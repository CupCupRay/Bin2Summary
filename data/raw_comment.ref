Name: error; Comment: Optional error handler for attr_copy_file(). CTX is the error context passed to attr_copy_file(), ERR is the errno value that occurred. FMT and the rest are printf style arguments. 
Name: quote; Comment: Optional handler for quoting path names in error messages. (This is a very stupid example!) 
Name: is_user_attr; Comment: Optional attribute filter for attr_copy_file(). This example excludes all attributes other than extended user attributes. 
Name: attr_copy_fd; Comment: Copy extended attributes from src_path to dst_path. If the file has an extended Access ACL (system.posix_acl_access) and that is copied successfully, the file mode permission bits are copied as a side effect. This may not always the case, so the file mode and/or ownership must be copied separately. 
Name: attr_copy_file; Comment: Copy extended attributes from src_path to dst_path. If the file has an extended Access ACL (system.posix_acl_access) and that is copied successfully, the file mode permission bits are copied as a side effect. This may not always the case, so the file mode and/or ownership must be copied separately. 
Name: api_convert; Comment: Convert IRIX API components into Linux/XFS API components, and vice-versa. 
Name: attr_list_pack; Comment: Helper routine for attr_list functions. 
Name: attr_single; Comment: Helper routines for the attr_multi functions. In IRIX, the multi routines are a single syscall - in Linux, we break em apart in userspace and make individual syscalls for each. 
Name: attr_multi; Comment: Operate on multiple attributes of the same object simultaneously From the manpage: "attr_multi will fail if ... a bit other than ATTR_DONTFOLLOW was set in the flag argument." flags must be checked here as they are not passed into the kernel. 
Name: delete_all_aliases; Comment: Delete all aliases. 
Name: all_aliases; Comment: Return a sorted list of all defined aliases 
Name: load_history; Comment: Load the history list from the history file. 
Name: save_history; Comment: Write the existing history out to the history file. 
Name: maybe_save_shell_history; Comment: If this is an interactive shell, then append the lines executed this session to the history file. 
Name: get_name_for_error; Comment: Return the name of the shell or the shell script for error reporting. 
Name: reader_loop; Comment: Read and execute commands until EOF is reached. This assumes that the input source has already been initialized. 
Name: send_pwd_to_eterm; Comment: Send an escape sequence to emacs term mode to tell it the current working directory. 
Name: parse_command; Comment: Call the YACC-generated parser and return the status of the parse. Input is read from the current input stream (bash_input). yyparse leaves the parsed command in the global variable GLOBAL_COMMAND. This is where PROMPT_COMMAND is executed. 
Name: read_command; Comment: Read and parse a command, returning the status of the parse. The command is left in the globval variable GLOBAL_COMMAND for use by reader_loop. This is where the shell timeout code is executed. 
Name: executing_line_number; Comment: Return the line number of the currently executing command. 
Name: open_files; Comment: A debugging function that can be called from gdb, for instance. 
Name: cpl_flush; Comment: Clear out the list of saved statuses 
Name: coproc_flush; Comment: Placeholder for now. Will require changes for multiple coprocs 
Name: pushexp; Comment: Push and save away the contents of the globals describing the current expression context. 
Name: popexp; Comment: Pop the the contents of the expression context stack into the globals describing the current expression context. 
Name: expcond; Comment: Conditional expression (expr?expr:expr) 
Name: explor; Comment: Logical OR. 
Name: expland; Comment: Logical AND. 
Name: expbor; Comment: Bitwise OR. 
Name: expbxor; Comment: Bitwise XOR. 
Name: expband; Comment: Bitwise AND. 
Name: expshift; Comment: Left and right shifts. 
Name: readtok; Comment: Lexical analyzer/token reader for the expression evaluator. Reads the next token and puts its value into curtok, while advancing past it. Updates value of tp. May also set tokval (for number) or tokstr (for string). 
Name: which_set_flags; Comment: Return a string which is the names of all the currently set shell flags. 
Name: tilde_initialize; Comment: Initialize the tilde expander. In Bash, we handle `~-' and `~+', as well as handling special tilde prefixes; `:~" and `=~' are indications that we should do tilde expansion. 
Name: conf_standard_path; Comment: Return a value for PATH that is guaranteed to find all of the standard utilities. This uses Posix.2 configuration variables, if present. It uses a value defined in config.h as a last resort. 
Name: init_job_stats; Comment: Initialize the global job stats structure and other bookkeeping variables 
Name: current_working_directory; Comment: Return the working directory for the current process. Unlike job_working_directory, this does not call malloc (), nor do any of the functions it calls. This is so that it can safely be called from a signal handler. 
Name: job_working_directory; Comment: Return the working directory for the current process. 
Name: start_pipeline; Comment: Start building a pipeline. 
Name: bgp_resize; Comment: The number of elements in bgpids.storage always has to be > js.c_childmax for the circular buffer to work right. 
Name: bgp_clear; Comment: Clear out the list of saved statuses 
Name: reset_job_indices; Comment: Reset the values of js.j_lastj and js.j_firstj after one or both have been deleted. The caller should check whether js.j_njobs is 0 before calling this. This wraps around, but the rest of the code does not. At this point, it should not matter. 
Name: cleanup_dead_jobs; Comment: Delete all DEAD jobs that the user had received notification about. 
Name: realloc_jobs_list; Comment: Reallocate and compress the jobs list. This returns with a jobs array whose size is a multiple of JOB_SLOTS and can hold the current number of jobs. Heuristics are used to minimize the number of new reallocs. 
Name: rotate_the_pipeline; Comment: Take the last job and make it the first job. Must be called with SIGCHLD blocked. 
Name: reverse_the_pipeline; Comment: Reverse the order of the processes in the_pipeline. Must be called with SIGCHLD blocked. 
Name: terminate_current_pipeline; Comment: Cause all the jobs in the current pipeline to exit. 
Name: terminate_stopped_jobs; Comment: Cause all stopped jobs to exit. 
Name: hangup_all_jobs; Comment: Cause all jobs, running or stopped, to receive a hangup signal. If a job is marked J_NOHUP, don't send the SIGHUP. 
Name: ignore_tty_job_signals; Comment: These two functions are called only in child processes. 
Name: default_tty_job_signals; Comment: Reset the tty-generated job control signals to SIG_DFL unless that signal was ignored at entry to the shell, in which case we need to set it to SIG_IGN in the child. We can't rely on resetting traps, since the hard ignored signals can't be trapped. 
Name: get_original_tty_job_signals; Comment: Called once in a parent process. 
Name: get_tty_state; Comment: Fill the contents of shell_tty_info with the current tty info. 
Name: set_tty_state; Comment: Make the current tty use the state in shell_tty_info. 
Name: wait_for_background_pids; Comment: Wait for all of the background processes started by this shell to finish. 
Name: wait_sigint_cleanup; Comment: Clean up state after longjmp to wait_intr_buf 
Name: wait_for_any_job; Comment: Wait for any background job started by this shell to finish. Very similar to wait_for_background_pids(). Returns the exit status of the next exiting job, -1 if there are no background jobs. The caller is responsible for translating -1 into the right return value. 
Name: notify_and_cleanup; Comment: Print info about dead jobs, and then delete them from the list of known jobs. This does not actually delete jobs when the shell is not interactive, because the dead jobs are not marked as notified. 
Name: reap_dead_jobs; Comment: Make dead jobs disappear from the jobs array without notification. This is used when the shell is not interactive. 
Name: reset_current; Comment: Here's the deal: The newest non-running job should be `+', and the next-newest non-running job should be `-'. If there is only a single stopped job, the js.j_previous is the newest non-running job. If there are only running jobs, the newest running job is `+' and the next-newest running job is `-'. Must be called with SIGCHLD blocked. 
Name: notify_of_job_status; Comment: Function to call when you want to notify people of changes in job status. This prints out all jobs which are pending notification to stderr, and marks those printed as already notified, thus making them candidates for cleanup. 
Name: initialize_job_signals; Comment: Setup this shell to handle C-C, etc. 
Name: freeze_jobs_list; Comment: Here to allow other parts of the shell (like the trap stuff) to freeze and unfreeze the jobs list. 
Name: without_job_control; Comment: Turn off all traces of job control. This is run by children of the shell which are going to do shellsy things, like wait (), etc. 
Name: end_job_control; Comment: If this shell is interactive, terminate all stopped jobs and restore the original terminal process group. This is done before the `exec' builtin calls shell_execve. 
Name: restart_job_control; Comment: Restart job control by closing shell tty and reinitializing. This is called after an exec fails in an interactive shell and we do not exit. 
Name: set_sigchld_handler; Comment: Set the handler to run when the shell receives a SIGCHLD signal. 
Name: close_pgrp_pipe; Comment: Functional interface closes our local-to-job-control pipes. 
Name: set_default_locale; Comment: Set the value of default_locale and make the current locale the system default locale. This should be called very early in main(). 
Name: set_default_locale_vars; Comment: Set default values for LC_CTYPE, LC_COLLATE, LC_MESSAGES, LC_NUMERIC and LC_TIME if they are not specified in the environment, but LC_ALL is. This should be called from main() after parsing the environment. 
Name: set_default_lang; Comment: Set default values for LANG and LC_ALL. Default values for all other locale-related variables depend on these. 
Name: reset_locale_vars; Comment: Called to reset all of the locale variables to their appropriate values if (and only if) LC_ALL has not been assigned a value. DO NOT CALL THIS IF LC_ALL HAS BEEN ASSIGNED A VALUE. 
Name: locale_setblanks; Comment: Set every character in the <blank> character class to be a shell break character for the lexical analyzer when the locale changes. 
Name: time_to_check_mail; Comment: Returns non-zero if it is time to check mail. 
Name: reset_mail_timer; Comment: Okay, we have checked the mail. Perhaps I should make this function go away. 
Name: reset_mail_files; Comment: Reset the existing mail files access and modification times to zero. 
Name: free_mail_files; Comment: Free the information that we have about the remembered mail files. 
Name: remember_mail_dates; Comment: Remember the dates of the files specified by MAILPATH, or if there is no MAILPATH, by the file specified in MAIL. If neither exists, use a default value, which we randomly concoct from using Unix. 
Name: check_mail; Comment: Check for mail in some files. If the modification date of any of the files in MAILPATH has changed since we last did a remember_mail_dates () then mention that the user has mail. Special hack: If the variable MAIL_WARNING is non-zero and the mail file has been accessed since the last time we remembered, then the message "The mail in <mailfile> has been read" is printed. 
Name: load_lsyntax; Comment: load up the correct flag values in lsyntax 
Name: alloc_pid_list; Comment: Allocate new, or grow existing PID_LIST. 
Name: cleanup_dead_jobs; Comment: Remove all dead, notified jobs from the pid_list. 
Name: reap_zombie_children; Comment: Collect the status of all zombie children so that their system resources can be deallocated. 
Name: wait_for_background_pids; Comment: Wait for all of the shell's children to exit. Called by the `wait' builtin. 
Name: without_job_control; Comment: The name is kind of a misnomer, but it's what the job control code uses. 
Name: indirection_level_string; Comment: Return a string denoting what our indirection level is. 
Name: uidget; Comment: Fetch the current set of uids and gids and return 1 if we're running setuid or setgid. 
Name: set_bash_input; Comment: Initialize the input routines for the parser. 
Name: shell_initialize; Comment: Do whatever is necessary to initialize the shell. Put new initializations in here. 
Name: shell_reinitialize; Comment: Function called by main () when it appears that the shell has already had some initialization performed. This is supposed to reset the world back to a pristine state, as if we had been exec'ed. 
Name: initialize_terminating_signals; Comment: Initialize signals that will terminate the shell to do some unwind protection. For non-interactive shells, we only call this when a trap is defined for EXIT (0) or when trap is run to display signal dispositions. 
Name: top_level_cleanup; Comment: Run some of the cleanups that should be performed when we run jump_to_top_level from a builtin command context. XXX - might want to also call reset_parser here. 
Name: throw_to_top_level; Comment: What to do when we've been interrupted, and it is safe to handle it. 
Name: while; Comment: Loop copying string[i] to string[j], i >= j. 
Name: if; Comment: Special case for SENTINEL at the end of STRING. If we haven't found the word containing SENTINEL yet, and the index we're looking for is at the end of STRING (or past the end of the previously-found token, possible if the end of the line is composed solely of IFS whitespace) add an additional null argument and set the current word pointer to that. 
Name: if; Comment: XXX - bash-4.4/bash-5.0 testing PF_ASSIGNRHS 
Name: if; Comment: Remove sequences of whitespace at the beginning of STRING, as long as those characters appear in IFS. Do not do this if STRING is quoted or if there are no separator characters. 
Name: if; Comment: Remove sequences of whitespace at the beginning of STRING, as long as those characters appear in IFS. 
Name: if; Comment: Move past the current separator character. 
Name: if; Comment: If the first separator was IFS whitespace and the current character is a non-whitespace IFS character, it should be part of the current field delimiter, not a separate delimiter that would result in an empty field. Look at POSIX.2, 3.6.5, (3)(b). 
Name: if; Comment: In a function but forcing assignment in global context 
Name: if; Comment: assignment failure 
Name: if; Comment: A string consisting of only a single CTLESC should pass through unchanged 
Name: switch; Comment: itrace("wmatchlen (%ls) -> %d", wpat, mlen); 
Name: switch; Comment: shut up gcc 
Name: switch; Comment: check for valid values of xc 
Name: if; Comment: If we didn't remove some of the FIFOs, compact the list. 
Name: if; Comment: Need to close any files that this process has open to pipes inherited from its parent. 
Name: while; Comment: Read the output of the command through the pipe. This may need to be changed to understand multibyte characters in the future. 
Name: if; Comment: If we read no output, just return now and save ourselves some trouble. 
Name: if; Comment: Strip trailing newlines from the output of the command. 
Name: if; Comment: Pipe the output of executing STRING into the current shell. 
Name: if; Comment: If unbound variables should generate an error, report one and return failure. 
Name: if; Comment: check for $@ and $* 
Name: if; Comment: Handle multiple digit arguments, as in ${11}. 
Name: if; Comment: Have to dequote here if necessary 
Name: if; Comment: None ksh93 expands bar[0]. We could do that here -- there are enough usable primitives to do that -- but do not at this point. 
Name: if; Comment: If the entire expression is between double quotes, we want to treat the value as a double-quoted string, with the exception that we strip embedded unescaped double quotes (for sh backwards compatibility). 
Name: if; Comment: ensure it's non-zero 
Name: switch; Comment: paranoia 
Name: if; Comment: Special cases: _1. A null pattern with mtype == MATCH_BEG means to prefix STRING *_ with REP and return the result. *_2. A null pattern with mtype == MATCH_END means to append REP to *_ STRING and return the result. *_3. A null STRING with a matching pattern means to append REP to *_ STRING and return the result. These don't understand or process `&' in the replacement string. 
Name: if; Comment: Now copy the unmatched portion of the input string 
Name: if; Comment: PATSUB is never NULL when this is called. 
Name: switch; Comment: OK, we now want to substitute REP for PAT in VAL. If flags & MATCH_GLOBREP is non-zero, the substitution is done everywhere, otherwise only the first occurrence of PAT is replaced. The pattern matching code doesn't understand CTLESC quoting CTLESC and CTLNUL so we use the dequoted variable values passed in (VT_VARIABLE) so the pattern substitution code works right. We need to requote special chars after we're done for VT_VARIABLE and VT_ARRAYMEMBER, and for the other cases if QUOTED == 0, since the posparams and arrays indexed byor @ do special things when QUOTED != 0. 
Name: switch; Comment: OK, now we do the case modification. 
Name: if; Comment: If we're not quoted but we still don't want word splitting, make__ we quote the IFS characters to protect them from splitting (e.g., __ when $@ is in the string as well). 
Name: if; Comment: bash-4.4/bash-5.0_ XXX - technically this should only be expanded at the start _ of a word 
Name: if; Comment: The test of sindex against t_index is to allow bare instances of_ ` to pass through, for backwards compatibility. 
Name: if; Comment: The code above *might* return a list (consider the case of "$@",_ where it returns "$1", "$2", etc.). We can't throw away the _ rest of the list, and we have to make sure each word gets added _ as quoted. We test on tresult->next: if it is non-NULL, we _ quote the whole list, save it to a string with string_list, and _ add that string. We don't need to quote the results of this _ (and it would be wrong, since that would quote the separators _ as well), so we go directly to add_string. 
Name: if; Comment: Variable assignment errors in non-interactive shells running_ in Posix.2 mode cause the shell to exit. 
Name: beyond; Comment: beyond - call when we're beyond the end of the argument list (an *_error condition) 
Name: expr; Comment: expr: *_or 
Name: or; Comment: or: *_and *_and '-o' or 
Name: and; Comment: and: *_term *_term '-a' and 
Name: term; Comment: term - parse a term and return 1 or 0 depending on whether the term *_evaluates to true or false, respectively. term ::= *_'-'('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'k'|'p'|'r'|'s'|'u'|'w'|'x') filename *_'-'('G'|'L'|'O'|'S'|'N') filename _'-t' [int] *_'-'('z'|'n') string *_'-'('v'|'R') varname *_'-o' option *_string *_string ('!='|'='|'==') string *_<int> '-'(eq|ne|le|lt|ge|gt) <int> *_file '-'(nt|ot|ef) file *_'(' <expr> ')' int ::= *_positive and negative integers 
Name: binary_operator; Comment: should never get here 
Name: posixtest; Comment: This is an implementation of a Posix.2 proposal by David Korn. 
Name: check_signals_and_traps; Comment: Convenience functions the rest of the shell can use 
Name: set_impossible_sigchld_trap; Comment: Temporarily set the SIGCHLD trap string to IMPOSSIBLE_TRAP_HANDLER. Used as a sentinel in run_sigchld_trap and maybe_set_sigchld_trap to see whether or not a SIGCHLD trap handler reset SIGCHLD disposition to the default. 
Name: set_sigint_handler; Comment: Reset the SIGINT handler so that subshells that are doing `shellsy' things, like waiting for command substitution or executing commands in explicit subshells ( ( cmd ) ), can catch interrupts properly. 
Name: run_exit_trap; Comment: Handle the calling of "trap 0". The only sticky situation is when the command to be executed includes an "exit". This is why we have to provide our own place for top_level to jump to. 
Name: free_trap_strings; Comment: Free all the allocated strings in the list of traps and reset the trap values to the default. Intended to be called from subshells that want to complete work done by reset_signal_handlers upon execution of a subsequent `trap' command that changes a signal's disposition. We need to make sure that we duplicate the behavior of reset_or_restore_signal_handlers and not change the disposition of signals that are set to be ignored. 
Name: reset_signal_handlers; Comment: Reset trapped signals to their original values, but don't free the trap strings. Called by the command substitution code and other places that create a "subshell environment". 
Name: restore_original_signals; Comment: Reset all trapped signals to their original values. Signals set to be ignored with trap '' SIGNAL should be ignored, so we make sure that they are. Called by child processes after they are forked. 
Name: remove_unwind_protect; Comment: Remove the top unwind protect from the list. 
Name: run_unwind_protects; Comment: Run the list of cleanup functions in unwind_protect_list. 
Name: shell_version_string; Comment: Give version information about this shell. 
Name: yy_symbol_value_print; Comment: ----------------------------------------.| Print this symbol's value on YYOUTPUT. | `----------------------------------------
Name: yy_symbol_print; Comment: --------------------------------.| Print this symbol on YYOUTPUT. | `--------------------------------
Name: yy_stack_print; Comment: ------------------------------------------------------------------.| yy_stack_print -- Print the state stack from its BOTTOM up to its | | TOP (included). | `------------------------------------------------------------------
Name: yy_reduce_print; Comment: ------------------------------------------------.| Report that the YYRULE is going to be reduced. | `------------------------------------------------
Name: yystrlen; Comment: Return the length of YYSTR. 
Name: yystpcpy; Comment: Copy YYSRC to YYDEST, returning the address of the terminating '_0' in YYDEST. 
Name: yytnamerr; Comment: Copy to YYRES the contents of YYSTR after stripping away unnecessary quotes and backslashes, so that it's suitable for yyerror. The heuristic is that double-quoting is unnecessary unless the string contains an apostrophe, a comma, or backslash (other than backslash-backslash). YYSTR is taken from yytname. If YYRES is null, do not copy; instead, return the length of what the result would have been. 
Name: yysyntax_error; Comment: Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message about the unexpected token YYTOKEN for the state stack whose top is YYSSP. Return 0 if *YYMSG was successfully written. Return 1 if *YYMSG is not large enough to hold the message. In that case, also set *YYMSG_ALLOC to the required number of bytes. Return 2 if the required number of bytes is too large to store. 
Name: yydestruct; Comment: -----------------------------------------------.| Release the memory associated to this symbol. | `-----------------------------------------------
Name: yyparse; Comment: ----------.| yyparse. | `----------
Name: return_EOF; Comment: Unconditionally returns end-of-file. 
Name: initialize_bash_input; Comment: Set all of the fields in BASH_INPUT to NULL. Free bash_input.name if it is non-null, avoiding a memory leak. 
Name: yy_getc; Comment: Call this to get the next character of input. 
Name: yy_string_get; Comment: **************************************************************** 
Name: rewind_input_string; Comment: Count the number of characters we've consumed from bash_input.location.string and read into shell_input_line, but have not returned from shell_getc. That is the true input location. Rewind bash_input.location.string by that number of characters, so it points to the last character actually consumed by the parser. 
Name: yy_stream_get; Comment: These two functions used to test the value of the HAVE_RESTARTABLE_SYSCALLS define, and just use getc/ungetc if it was defined, but since bash installs its signal handlers without the SA_RESTART flag, some signals (like SIGCHLD, SIGWINCH, etc.) received during a read(2) will not cause the read to be restarted. We need to restart it ourselves. 
Name: save_token_state; Comment: Save the current token state and return it in a malloced array. 
Name: pop_string; Comment: Make the top of the pushed_string stack be the current shell input. Only called when there is something on the stack. Called from shell_getc when it thinks it has consumed the string generated by an alias expansion and needs to return to the original input line. 
Name: shell_ungetchar; Comment: Back the input pointer up by one, effectively `ungetting' a character. 
Name: yylex; Comment: Function for yyparse to call. yylex keeps track of the last two tokens read, and calls read_token. 
Name: reset_parser; Comment: Called from shell.c when Control-C is typed at top level. Or by the error rule at top level. 
Name: parse_cond_command; Comment: This is kind of bogus -- we slip a mini recursive-descent parser in here to handle the conditional statement syntax. 
Name: parser_in_command_position; Comment: An interface to let the rest of the shell (primarily the completion system) know what the parser is expecting. 
Name: reset_readline_prompt; Comment: Called after each time readline is called. This insures that whatever the new prompt string is gets propagated to readline's local prompt variable. 
Name: prompt_again; Comment: Issue a prompt, or prepare to issue a prompt when the next character is read. 
Name: handle_eof_input_unit; Comment: If we have EOF as the only input unit, this user wants to leave the shell. If the shell is not interactive, then just leave. Otherwise, if ignoreeof is set, and we haven't done this the required number of times in a row, print a message. 
Name: reset_internal_getopt; Comment: reset_internal_getopt -- force the in[ft]ernal getopt to reset 
Name: builtin_error_prolog; Comment: This is a lot like report_error (), but it is for shell builtins instead of shell control structures, and it won't ever exit the shell. 
Name: builtin_usage; Comment: Print a usage summary for the currently-executing builtin command. 
Name: dollar_vars_changed; Comment: Have the dollar variables been reset to new values since we last checked? 
Name: initialize_shell_builtins; Comment: Sort the table of shell builtins so that the binary search will work in find_shell_builtin. 
Name: parse_and_execute_cleanup; Comment: How to force parse_and_execute () to clean up after itself. 
Name: if; Comment: prefix with N_( for gettext 
Name: perl_main; Comment: ** The Perl interpreter **
Name: libc_freeres_fn; Comment: If we want to free all resources we have to do some work at program's end. 
Name: get_charset_aliases; Comment: Return a pointer to the contents of the charset.alias file. 
Name: set_this_relocation_prefix; Comment: Sets the original and the current installation prefix of this module. Relocation simply replaces a pathname starting with the original prefix by the corresponding pathname with the current prefix instead. Both prefixes should be directory names without trailing slash (i.e. use "" instead of "/"). 
Name: set_relocation_prefix; Comment: Sets the original and the current installation prefix of the package. Relocation simply replaces a pathname starting with the original prefix by the corresponding pathname with the current prefix instead. Both prefixes should be directory names without trailing slash (i.e. use "" instead of "/"). 
Name: DllMain; Comment: Determine the full pathname of the shared library when it is loaded. 
Name: get_shared_library_fullname; Comment: Return the full pathname of the current shared library. Return NULL if unknown. Guaranteed to work only on Linux and Woe32. 
Name: relocate; Comment: Returns the pathname, relocated according to the current installation directory. 
Name: i00afunc; Comment: Determine a "stack measure" for an arbitrary ADDRESS. I doubt that "lint" will like this much. 
Name: i00afunc; Comment: Stack address function for a CRAY-1, CRAY X-MP, or CRAY Y-MP. Determine the number of the cell within the stack, given the address of the cell. The purpose of this routine is to linearize, in some sense, stack addresses for alloca. 
Name: malloc_stats; Comment: Return a copy of _MSTATS, with two additional fields filled in: BYTESFREE is the total number of bytes on free lists. BYTESUSED is the total number of bytes in use. These two fields are fairly expensive to compute, so we do it only when asked to. 
Name: bash_malloc_stub; Comment: Copyright (C) 1993-2003 Free Software Foundation, Inc. This file is part of GNU Bash, the Bourne Again SHell. Bash is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Bash is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Bash. If not, see <http:www.gnu.orglicenses>.
Name: rl_list_funmap_names; Comment: Print the names of functions known to Readline. 
Name: _rl_callback_newline; Comment: Make sure the terminal is set up, initialize readline, and prompt. 
Name: rl_callback_read_char; Comment: Read one character, and dispatch to the handler if it ends the line. 
Name: rl_callback_handler_remove; Comment: Remove the handler, and make sure the terminal is in its normal state. 
Name: rl_callback_sigcleanup; Comment: Make sure that this agrees with cases in rl_callback_read_char 
Name: _rl_put_indicator; Comment: Output a color indicator (which may contain nulls). 
Name: _rl_print_color_indicator; Comment: Returns whether any color sequence was printed. 
Name: free_undo_list; Comment: Provide backwards-compatible entry points for old function names. 
Name: rl_redisplay; Comment: Basic redisplay algorithm. 
Name: rl_on_new_line; Comment: Tell the update routines that we have moved onto a new (empty) line. 
Name: rl_clear_visible_line; Comment: Clear all screen lines occupied by the current readline line buffer (visible line) 
Name: rl_on_new_line_with_prompt; Comment: Tell the update routines that we have moved onto a new line with the prompt already displayed. Code originally from the version of readline distributed with CLISP. rl_expand_prompt must have already been called (explicitly or implicitly). This still doesn't work exactly right. 
Name: rl_forced_update_display; Comment: Actually update the display, period. 
Name: rl_redraw_prompt_last_line; Comment: Redraw only the last line of a multi-line prompt. 
Name: rl_clear_message; Comment: How to clear things from the "echo-area". 
Name: cr; Comment: Move to the start of the current line. 
Name: _rl_redisplay_after_sigwinch; Comment: Redisplay the current line after a SIGWINCH is received. 
Name: _rl_current_display_line; Comment: return the `current display line' of the cursor -- the number of lines to move up to get to the first screen line of the current readline line. 
Name: rl_initialize_funmap; Comment: Make the funmap contain all of the default entries. 
Name: rl_funmap_names; Comment: Produce a NULL terminated array of known function names. The array is sorted. The array itself is allocated, but not the strings inside. You should free () the array when you done, but not the pointers. 
Name: history_get_history_state; Comment: Return the current HISTORY_STATE of the history. 
Name: using_history; Comment: Begin a session in which the history functions might be used. This initializes interactive variables. 
Name: history_total_bytes; Comment: Return the number of bytes that the primary history entries are using. This just adds up the lengths of the_history->lines and the associated timestamps. 
Name: where_history; Comment: Returns the magic number which says what history element we are looking at now. In this implementation, it returns history_offset. 
Name: history_list; Comment: Return the current history array. The caller has to be careful, since this is the actual array of data, and could be bashed or made corrupt easily. The array is terminated with a NULL pointer. 
Name: current_history; Comment: Return the history entry at the current position, as determined by history_offset. If there is no entry there, return a NULL pointer. 
Name: previous_history; Comment: Back up history_offset to the previous history entry, and return a pointer to that entry. If there is no previous entry then return a NULL pointer. 
Name: next_history; Comment: Move history_offset forward to the next history entry, and return a pointer to that entry. If there is no next entry then return a NULL pointer. 
Name: unstifle_history; Comment: Stop stifling the history. This returns the previous maximum number of history entries. The value is positive if the history was stifled, negative if it wasn't. 
Name: ibuffer_space; Comment: Return the amount of space available in the buffer for stuffing characters. 
Name: rl_gather_tyi; Comment: If a character is available to be read, then read it and stuff it into IBUFFER. Otherwise, just return. Returns number of characters read (0 if none available) and -1 on error (EIO). 
Name: _rl_input_available; Comment: Is there input available to be read on the readline input file descriptor? Only works if the system has select(2) or FIONREAD. Uses the value of _keyboard_input_timeout as the timeout; if another readline function wants to specify a timeout and not leave it up to the user, it should use _rl_input_queued(timeout_value_in_microseconds) instead. 
Name: rl_clear_pending_input; Comment: Clear any pending input pushed with rl_execute_next() 
Name: rl_read_key; Comment: Read a key, including pending input. 
Name: rl_make_bare_keymap; Comment: Return a new, empty keymap. Free it with free() when you are done. 
Name: rl_make_keymap; Comment: Return a new keymap with the printing characters bound to rl_insert, the uppercase Meta characters bound to run their lowercase equivalents, and the Meta digits bound to produce numeric arguments. 
Name: _rl_next_macro_key; Comment: Return the next character available from a macro, or 0 if there are no macro characters. 
Name: _rl_push_executing_macro; Comment: Save the currently executing macro on a stack of saved macros. 
Name: _rl_pop_executing_macro; Comment: Discard the current macro, replacing it with the one on the top of the stack of saved macros. 
Name: _rl_arg_overflow; Comment: **************************************************************** 
Name: rl_digit_loop; Comment: Handle C-u style numeric args, as well as M--, and M-digits. 
Name: _rl_reset_argument; Comment: Create a default argument. 
Name: rl_discard_argument; Comment: What to do when you abort reading an argument. 
Name: _rl_start_using_history; Comment: Set the history pointer back to the last entry in the history. 
Name: rl_maybe_replace_line; Comment: Perhaps put back the current line if it has changed. 
Name: rl_maybe_unsave_line; Comment: Restore the _rl_saved_line_for_history if there is one. 
Name: rl_maybe_save_line; Comment: Save the current line in _rl_saved_line_for_history. 
Name: _rl_revert_all_lines; Comment: Process and free undo lists attached to each history entry prior to the current entry, inclusive, reverting each line to its saved state. This is destructive, and state about the current line is lost. This is not intended to be called while actively editing, and the current line is not assumed to have been added to the history list. 
Name: rl_clear_history; Comment: Free the history list, including private readline data and take care of pointer aliases to history data. Resets rl_undo_list if it points to an UNDO_LISTsaved as some history entry's data member. This should not be called while editing is active. 
Name: _rl_init_eightbit; Comment: Check for LC_ALL, LC_CTYPE, and LANG and use the first with a value to decide the defaults for 8-bit character input and output. Returns 1 if we set eight-bit mode. 
Name: get_funky_string; Comment: Parse a string as part of the LS_COLORS variable; this may involve decoding all kinds of escape characters. If equals_end is set an unescaped equal sign ends the string, otherwise only a : or _0 does. Set OUTPUT_COUNT to the number of bytes output. Return true if successful. The resulting string is not null-terminated, but may contain embedded nulls. Note that both dest and src are char ; on return they point to the first free byte after the array and the character that ended the input string, respectively. 
Name: readline_internal; Comment: Read a line of input from the global rl_instream, doing output on the global rl_outstream. If rl_prompt is non-null, then that is our prompt. 
Name: rl_initialize; Comment: Initialize readline (and terminal if not already). 
Name: readline_initialize_everything; Comment: Initialize the entire state of the world. 
Name: readline_default_bindings; Comment: If this system allows us to look at the values of the regular input editing characters, then bind them to their readline equivalents, iff the characters are not bound to keymaps. 
Name: reset_default_bindings; Comment: Reset the default bindings for the terminal special characters we're interested in back to rl_insert and read the new ones. 
Name: bind_arrow_keys; Comment: Try and bind the common arrow key prefixes after giving termcap and the inputrc file a chance to bind them and create `real' keymaps for the arrow key prefix. 
Name: rl_deprep_terminal; Comment: Restore the terminal's normal settings and modes. 
Name: rl_cleanup_after_signal; Comment: Clean up the terminal and readline state after catching a signal, before resending it to the calling application. 
Name: rl_reset_after_signal; Comment: Reset the terminal and readline state after a signal handler returns. 
Name: rl_free_line_state; Comment: Free up the readline variable line state for the current line (undo list, any partial history entry, any keyboard macros in progress, and any numeric arguments in process) after catching a signal, before calling rl_cleanup_after_signal(). 
Name: _rl_block_sigint; Comment: Cause SIGINT to not be delivered until the corresponding call to release_sigint(). 
Name: _rl_release_sigint; Comment: Allow SIGINT to be delivered. 
Name: _rl_block_sigwinch; Comment: Cause SIGWINCH to not be delivered until the corresponding call to release_sigwinch(). 
Name: _rl_release_sigwinch; Comment: Allow SIGWINCH to be delivered. 
Name: rl_crlf; Comment: Move to the start of the next line. 
Name: rl_ding; Comment: Ring the terminal bell. 
Name: _rl_enable_meta_key; Comment: flag indicating we enabled meta mode 
Name: rl_free_undo_list; Comment: Free the existing undo list. 
Name: rl_do_undo; Comment: Undo the next thing in the list. Return 0 if there is nothing to undo, or non-zero if there was. 
Name: rl_begin_undo_group; Comment: Begin a group. Subsequent undos are undone as an atomic operation. 
Name: rl_end_undo_group; Comment: End an undo group started with rl_begin_undo_group (). 
Name: _rl_abort_internal; Comment: How to abort things. 
Name: rl_digit_loop1; Comment: A simplified loop for vi. Don't dispatch key at end. Don't recognize minus sign? Should this do rl_save_prompt/rl_restore_prompt? 
Name: rl_vi_possible_completions; Comment: Try to complete the word we are standing on or the word that ends with the previous character. A space matches everything. Word delimiters are space and ;. 
Name: _rl_vi_set_mark; Comment: Functions to save and restore marks. 
Name: initialize_readline; Comment: Tell the GNU Readline library how to complete. We want to try to complete on command names if this is the first word in the line, or on filenames if not. 
Name: rl_gets; Comment: Read a string, and return a pointer to it. Returns NULL on EOF. 
Name: cb_linehandler; Comment: Callback function called for each line when accept-line executed, EOF seen, or EOF character read. This sets a flag and returns; it could also call exit(3). 
Name: memset; Comment: Copyright (C) 1991-2002 Free Software Foundation, Inc. This file is part of GNU Bash, the Bourne Again SHell. Bash is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Bash is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Bash. If not, see <http:www.gnu.orglicenses>.
Name: ttonechar; Comment: Set the terminal into one-character-at-a-time mode 
Name: ttnoecho; Comment: Set the terminal into no-echo mode 
Name: tteightbit; Comment: Set the terminal into eight-bit mode 
Name: ttnocanon; Comment: Set the terminal into non-canonical mode 
Name: ttcbreak; Comment: Set the terminal into cbreak (no-echo, one-character-at-a-time) mode 
Name: iso_8601_2000_year; Comment: iso_8601_2000_year --- format a year per ISO 8601:2000 as in 1003.1 
Name: strftime; Comment: strftime --- produce formatted time 
Name: isleap; Comment: isleap --- is a year a leap year? 
Name: iso8601wknum; Comment: iso8601wknum --- compute week number according to ISO 8601 
Name: weeknumber; Comment: With thanks and tip of the hatlo to ado@elsie.nci.nih.gov 
Name: get_home_dir; Comment: If we're not using $HOME, assume that the passwd file information won't change while this shell instance is running. 
Name: strduplicate; Comment: Some systems don't have strdup so lets use our own - which can also check for out of memory. 
Name: strmaxcpy; Comment: Assumes space for n plus a null 
Name: strlimitcpy; Comment: Assumes space for limit plus a null 
Name: escape_input; Comment: takes string and escapes all metacharacters. should be used before including string in system() or similar call. 
Name: add_links; Comment: None _method:string -> method:string _www.host.name__-> http:www.host.name _ftp.host.name -> ftp:ftp.host.name *_name@host -> mailto:name@host *_<name.h> -> file:/usr/include/name.h (guess) Other possible links to add in the future: /dir/dir/file -> file:/dir/dir/file 
Name: 	while; Comment: start scanning 
Name: swap_abort; Comment: If somebody calls any byte-swapping routines, shoot them. 
Name: xcoff64_core_file_matches_executable_p; Comment: Return `TRUE' if given core is from the given executable. 
Name: MY; Comment: We need our own version to set header flags. 
Name: MY; Comment: We need our own for these reasons: - Assert that a normal 8, 16 or 32 reloc is output. - Fix what seems to be a weak-bug (perhaps there for valid reasons). 
Name: MY; Comment: We need our own to assert that a normal 8, 16 or 32 reloc is input. 
Name: MY; Comment: We use the same as the default, except that we also set "obj_reloc_entry_size (abfd) = RELOC_EXT_SIZE;", to avoid changing NAME (aout, set_arch_mach) in aoutx. 
Name: MY; Comment: The ns32k series is ah, unusual, when it comes to relocation. There are three storage methods for relocatable objects. There are displacements, immediate operands and ordinary twos complement data. Of these, only the last fits into the standard relocation scheme. Immediate operands are stored huffman encoded and immediate operands are stored big endian (where as the natural byte order is little endian for this architecture). Note that the ns32k displacement storage method is orthogonal to whether the relocation is pc relative or not. The "displacement" storage scheme is used for essentially all address constants. The displacement can be relative to zero (absolute displacement), relative to the pc (pc relative), the stack pointer, the frame pointer, the static base register and general purpose register etc. For example: sym1: .long ._ # pc relative 2's complement sym1: .long foo_ # 2's complement not pc relative self: movd @self, r0 # pc relative displacement_ movd foo, r0 # non pc relative displacement self: movd self, r0 # pc relative immediate_ movd foo, r0 # non pc relative immediate In addition, for historical reasons the encoding of the relocation types in the a.out format relocation entries is such that even the relocation methods which are standard are not encoded the standard way. 
Name: _bfd_ar_spacepad; Comment: True iff NAME designated a BSD 4.4 extended name. 
Name: bfd_get_next_mapent; Comment: None DESCRIPTION _Step through archive @var{abfd}'s symbol table (if it_has one). Successively update @var{sym} with the next symbol's_information, returning that symbol's (internal) index into the _symbol table. _Supply <<BFD_NO_MORE_SYMBOLS>> as the @var{previous} entry to get_the first one; returns <<BFD_NO_MORE_SYMBOLS>> when you've already_got the last one. _A <<carsym>> is a canonical archive symbol. The only _user-visible element is its name, a null-terminated string. 
Name: _bfd_create_empty_archive_element_shell; Comment: To be called by backends only. 
Name: bfd_set_archive_head; Comment: None DESCRIPTION _Set the head of the chain of _BFDs contained in the archive @var{output} to @var{new_head}.
Name: eq_file_ptr; Comment: Returns non-zero if P1 and P2 are equal. 
Name: _bfd_calloc_wrapper; Comment: The calloc function doesn't always take size_t (e.g. on VMS) so wrap it to avoid a compile time warning. 
Name: _bfd_add_bfd_to_archive_cache; Comment: Kind of stupid to call cons for each one, but we don't do too many. 
Name: get_extended_arelt_filename; Comment: The name begins with space. Hence the rest of the name is an index into the string table. 
Name: _bfd_generic_read_ar_hdr; Comment: This functions reads an arch header and returns an areltdata pointer, or NULL on error. Presumes the file pointer is already in the right place (ie pointing to the ar_hdr in the file). Moves the file pointer; on success it should be pointing to the front of the file contents; on failure it could have been moved arbitrarily. 
Name: _bfd_generic_read_ar_hdr_mag; Comment: Alpha ECOFF uses an optional different ARFMAG value, so we have a variant of _bfd_generic_read_ar_hdr which accepts a magic string. 
Name: _bfd_append_relative_path; Comment: Append the relative pathname for a member of the thin archive to the pathname of the directory containing the archive. 
Name: _bfd_get_elt_at_filepos; Comment: This is an internal function; it's mainly used when indexing through the archive symbol table, but also used to get the next element, since it handles the bookkeeping so nicely for us. 
Name: _bfd_generic_get_elt_at_index; Comment: Return the BFD which is referenced by the symbol in ABFD indexed by SYM_INDEX. SYM_INDEX should have been returned by bfd_get_next_mapent. 
Name: bfd_openr_next_archived_file; Comment: None DESCRIPTION _Provided a BFD, @var{archive}, containing an archive and NULL, open_an input BFD on the first contained element and returns that. _Subsequent calls should pass the archive and the previous return _value to return a created BFD to the next contained element. NULL _is returned when there are no more. _Note - if you want to process the bfd returned by this call be _sure to call bfd_check_format() on it first. 
Name: do_slurp_bsd_armap; Comment: Read a BSD-style archive symbol table. Returns FALSE on error, TRUE otherwise. 
Name: do_slurp_coff_armap; Comment: Read a COFF archive symbol table. Returns FALSE on error, TRUE otherwise. 
Name: bfd_slurp_armap; Comment: This routine can handle either coff-style or bsd-style armaps (archive symbol table). Returns FALSE on error, TRUE otherwise 
Name: if; Comment: For each leading path element in the reference path, insert "../" into the path. 
Name: if; Comment: If the caller requested that the BFD generate deterministic output, fake values for modification time, UID, GID, and file mode. 
Name: if; Comment: The spec sez this should be a newline. But in order to be bug-compatible for sun's ar we use a null. 
Name: if; Comment: The spec sez this should be a newline. But in order to be bug-compatible for arc960 we use a null. 
Name: _bfd_archive_64_bit_slurp_armap; Comment: Read an Irix 6 armap. 
Name: _bfd_archive_64_bit_write_armap; Comment: Write out an Irix 6 armap. The Irix 6 tools are supposed to be able to handle ordinary ELF armaps, but at least on Irix 6.2 the linker crashes. 
Name: bfd_printable_name; Comment: None DESCRIPTION _Return a printable string representing the architecture and machine _from the pointer to the architecture info structure. 
Name: bfd_scan_arch; Comment: None DESCRIPTION _Figure out if BFD supports any cpu which could be described with _the name @var{string}. Return a pointer to an <<arch_info>>_structure if a machine is found, otherwise NULL. 
Name: bfd_arch_list; Comment: None DESCRIPTION _Return a freshly malloced NULL-terminated vector of the names _of all the valid BFD architectures. Do not modify the names. 
Name: bfd_arch_get_compatible; Comment: None DESCRIPTION _Determine whether two BFDs' architectures and machine types _are compatible. Calculates the lowest common denominator _between the two architectures and machine types implied by _the BFDs and returns a pointer to an <<arch_info>> structure _describing the compatible machine. 
Name: bfd_set_arch_info; Comment: None DESCRIPTION _Set the architecture info of @var{abfd} to @var{arg}.
Name: bfd_default_set_arch_mach; Comment: None DESCRIPTION _Set the architecture and machine type in BFD @var{abfd}_to @var{arch} and @var{mach}. Find the correct_pointer to a structure and insert it into the <<arch_info>> _pointer. 
Name: bfd_get_arch; Comment: None DESCRIPTION _Return the enumerated type which describes the BFD @var{abfd}'s_architecture. 
Name: bfd_get_mach; Comment: None DESCRIPTION _Return the long type which describes the BFD @var{abfd}'s_machine. 
Name: bfd_arch_bits_per_byte; Comment: None DESCRIPTION _Return the number of bits in one of the BFD @var{abfd}'s_architecture's bytes. 
Name: bfd_arch_bits_per_address; Comment: None DESCRIPTION _Return the number of bits in one of the BFD @var{abfd}'s_architecture's addresses. 
Name: bfd_default_compatible; Comment: None DESCRIPTION _The default function for testing for compatibility. 
Name: bfd_default_scan; Comment: None DESCRIPTION _The default function for working out whether this is an _architecture hit and a machine hit. 
Name: bfd_get_arch_info; Comment: None DESCRIPTION _Return the architecture info struct in @var{abfd}.
Name: bfd_lookup_arch; Comment: None DESCRIPTION _Look for the architecture info structure which matches the _arguments @var{arch} and @var{machine}. A machine of 0 matches the_machine/architecture structure which marks itself as the _default. 
Name: bfd_printable_arch_mach; Comment: None DESCRIPTION _Return a printable string representing the architecture and _machine type. _This routine is depreciated. 
Name: bfd_octets_per_byte; Comment: None DESCRIPTION _Return the number of octets (8-bit quantities) per target byte _(minimum addressable unit). In most cases, this will be one, but some _DSP targets have 16, 32, or even 48 bits per byte. 
Name: bfd_arch_mach_octets_per_byte; Comment: None DESCRIPTION _See bfd_octets_per_byte. _This routine is provided for those cases where a bfdis not _available 
Name: bfd_arch_default_fill; Comment: None DESCRIPTION _Allocate via bfd_malloc and return a fill buffer of size COUNT. _If IS_BIGENDIAN is TRUE, the order of bytes is big endian. If _CODE is TRUE, the buffer contains code. 
Name: bfd_get_error; Comment: None DESCRIPTION _Return the current BFD error condition. 
Name: bfd_set_error; Comment: None DESCRIPTION _Set the BFD error condition to be @var{error_tag}. _@var{error_tag} must not be bfd_error_on_input. Use_bfd_set_input_error for input errors instead. 
Name: bfd_set_input_error; Comment: None DESCRIPTION _Set the BFD error condition to be bfd_error_on_input. _@var{input} is the input bfd where the error occurred, and_@var{error_tag} the bfd_error_type error.
Name: bfd_errmsg; Comment: None DESCRIPTION _Return a string describing the error @var{error_tag}, or_the system error if @var{error_tag} is <<bfd_error_system_call>>.
Name: bfd_perror; Comment: None DESCRIPTION _Print to the standard error stream a string describing the _last BFD error that occurred, or the last system error if _the last BFD error was a system call failure. If @var{message}_is non-NULL and non-empty, the error string printed is preceded _by @var{message}, a colon, and a space. It is followed by a newline.
Name: _bfd_doprnt_scan; Comment: First pass over FORMAT to gather ARGS. Returns number of args. 
Name: error_handler_fprintf; Comment: The standard error handler that prints to stderr. 
Name: err_sprintf; Comment: An fprintf like function that instead prints to a string buffer. 
Name: error_handler_sprintf; Comment: An error handler that prints to a string, then dups that string to a per-xvec cache. 
Name: _bfd_error_handler; Comment: None DESCRIPTION _This is the default routine to handle BFD error messages. _Like fprintf (stderr, ...), but also handles some extra format _specifiers. _%pA section name from section. For group components, prints _group name too. _%pB file name from bfd. For archive components, prints _archive too. _Beware: Only supports a maximum of 9 format arguments. 
Name: bfd_set_error_handler; Comment: None DESCRIPTION _Set the BFD error handler function. Returns the previous _function. 
Name: _bfd_set_error_handler_caching; Comment: None DESCRIPTION _Set the BFD error handler function to one that stores messages _to the per_xvec_warn array. Returns the previous function. 
Name: bfd_set_error_program_name; Comment: None DESCRIPTION _Set the program name to use when printing a BFD error. This _is printed before the error message followed by a colon and _space. The string must not be changed after it is passed to _this function. 
Name: _bfd_get_error_program_name; Comment: None DESCRIPTION _Get the program name used when printing a BFD error. 
Name: _bfd_default_assert_handler; Comment: Note the use of bfd_ prefix on the parameter names above: we want to show which one is the message and which is the version by naming the parameters, but avoid polluting the program-using-bfd namespace as the typedef is visible in the exported headers that the program includes. Below, it's just for consistency. 
Name: bfd_set_assert_handler; Comment: None DESCRIPTION _Set the BFD assert handler function. Returns the previous _function. 
Name: bfd_get_reloc_upper_bound; Comment: None DESCRIPTION _Return the number of bytes required to store the _relocation information associated with section @var{sect}_attached to bfd @var{abfd}. If an error occurs, return -1. 
Name: bfd_canonicalize_reloc; Comment: None DESCRIPTION _Call the back end associated with the open BFD _@var{abfd} and translate the external form of the relocation_information attached to @var{sec} into the internal canonical_form. Place the table into memory at @var{loc}, which has_been preallocated, usually by a call to _<<bfd_get_reloc_upper_bound>>. Returns the number of relocs, or _-1 on error. _The @var{syms} table is also needed for horrible internal magic_reasons. 
Name: bfd_set_file_flags; Comment: None DESCRIPTION _Set the flag word in the BFD @var{abfd} to the value @var{flags}. _Possible errors are: _o <<bfd_error_wrong_format>> - The target bfd was not of object format. _o <<bfd_error_invalid_operation>> - The target bfd was open for reading. _o <<bfd_error_invalid_operation>> - _The flag word contained a bit which was not applicable to the _type of file. E.g., an attempt was made to set the <<D_PAGED>> bit _on a BFD format which does not support demand paging. 
Name: _bfd_abort; Comment: A more or less friendly abort message. In libbfd.h abort is defined to call this function. 
Name: bfd_get_arch_size; Comment: None DESCRIPTION _Returns the normalized architecture address size, in bits, as _determined by the object file's format. By normalized, we mean _either 32 or 64. For ELF, this information is included in the _header. Use bfd_arch_bits_per_address for number of bits in _the architecture address. RETURNS _Returns the arch size in bits if known, <<-1>> otherwise. 
Name: bfd_get_sign_extend_vma; Comment: None DESCRIPTION _Indicates if the target architecture "naturally" sign extends _an address. Some architectures implicitly sign extend address _values when they are converted to types larger than the size _of an address. For instance, bfd_get_start_address() will _return an address sign extended to fill a bfd_vma when this is _the case. RETURNS _Returns <<1>> if the target architecture is known to sign _extend addresses, <<0>> if the target architecture is known to _not sign extend addresses, and <<-1>> otherwise. 
Name: bfd_set_start_address; Comment: None DESCRIPTION _Make @var{vma} the entry point of output BFD @var{abfd}. RETURNS _Returns <<TRUE>> on success, <<FALSE>> otherwise. 
Name: bfd_get_gp_size; Comment: None DESCRIPTION _Return the maximum size of objects to be optimized using the GP _register under MIPS ECOFF. This is typically set by the <<-G>> _argument to the compiler, assembler or linker. 
Name: bfd_set_gp_size; Comment: None DESCRIPTION _Set the maximum size of objects to be optimized using the GP _register under ECOFF or MIPS ELF. This is typically set by _the <<-G>> argument to the compiler, assembler or linker. 
Name: _bfd_get_gp_value; Comment: Get the GP value. This is an internal function used by some of the relocation special_function routines on targets which support a GP register. 
Name: _bfd_set_gp_value; Comment: Set the GP value. 
Name: bfd_set_gp_value; Comment: None DESCRIPTION _Allow external access to the fucntion to set the GP value. _This is specifically added for gdb-compile support. 
Name: bfd_scan_vma; Comment: None DESCRIPTION _Convert, like <<strtoul>>, a numerical expression _@var{string} into a <<bfd_vma>> integer, and return that integer._(Though without as many bells and whistles as <<strtoul>>.) _The expression is assumed to be unsigned (i.e., positive). _If given a @var{base}, it is used as the base for conversion._A base of 0 causes the function to interpret the string _in hex if a leading "0x" or "0X" is found, otherwise _in octal if a leading zero is found, otherwise in decimal. _If the value would overflow, the maximum <<bfd_vma>> value is _returned. 
Name: bfd_get_relocated_section_contents; Comment: None. 
Name: is32bit; Comment: Return true iff this target is 32-bit. 
Name: bfd_sprintf_vma; Comment: bfd_sprintf_vma and bfd_fprintf_vma display an address in the target's address size. 
Name: bfd_alt_mach_code; Comment: None DESCRIPTION _When more than one machine code number is available for the _same machine type, this function can be used to switch between _the preferred one (alternative == 0) and any others. Currently, _only ELF supports this feature, with up to two alternate _machine codes. 
Name: bfd_emul_get_maxpagesize; Comment: None DESCRIPTION _Returns the maximum page size, in bytes, as determined by _emulation. RETURNS _Returns the maximum page size in bytes for ELF, 0 otherwise. 
Name: bfd_emul_get_commonpagesize; Comment: None DESCRIPTION _Returns the common page size, in bytes, as determined by _emulation. RETURNS _Returns the common page size in bytes for ELF, 0 otherwise. 
Name: bfd_demangle; Comment: None DESCRIPTION _Wrapper around cplus_demangle. Strips leading underscores and _other such chars that would otherwise confuse the demangler. _If passed a g++ v3 ABI mangled name, returns a buffer allocated _with malloc holding the demangled name. Returns NULL otherwise _and on memory alloc failure. 
Name: _bfd_get_link_info; Comment: Get the linker information. 
Name: close_on_exec; Comment: Mark FILE as close-on-exec. Return FILE. FILE may be NULL, in which case nothing is done. 
Name: bfd_bread; Comment: Return value is amount read. 
Name: bfd_stat; Comment: Returns 0 for success, negative value for failure (in which case bfd_get_error can retrieve the error code). 
Name: bfd_seek; Comment: Returns 0 for success, nonzero for failure (in which case bfd_get_error can retrieve the error code). 
Name: bfd_get_mtime; Comment: None DESCRIPTION _Return the file modification time (as read from the file system, or _from the archive header for archive members). 
Name: bfd_get_size; Comment: None DESCRIPTION _Return the file size (as read from file system) for the file _associated with BFD @var{abfd}. _The initial motivation for, and use of, this routine is not _so we can get the exact size of the object the BFD applies to, since _that might not be generally possible (archive members for example). _It would be ideal if someone could eventually modify _it so that such results were guaranteed. _Instead, we want to ask questions like "is this NNN byte sized _object I'm about to try read from file offset YYY reasonable?" _As as example of where we might do this, some object formats _use string tables for which the first <<sizeof (long)>> bytes of the _table contain the size of the table itself, including the size bytes. _If an application tries to read what it thinks is one of these _string tables, without some way to validate the size, and for _some reason the size is wrong (byte swapping error, wrong location _for the string table, etc.), the only clue is likely to be a read _error when it tries to read the table, or a "virtual memory _exhausted" error when it tries to allocate 15 bazillon bytes _of space for the 15 bazillon byte table it is about to read. _This function at least allows us to answer the question, "is the _size reasonable?". _A return value of zero indicates the file size is unknown. 
Name: bfd_get_file_size; Comment: None DESCRIPTION _Return the file size (as read from file system) for the file _associated with BFD @var{abfd}. It supports both normal files_and archive elements. 
Name: bfd_mmap; Comment: None DESCRIPTION _Return mmap()ed region of the file, if possible and implemented. _LEN and OFFSET do not need to be page aligned. The page aligned _address and length are written to MAP_ADDR and MAP_LEN. 
Name: memory_bread; Comment: Memory file I/O operations. 
Name: binary_mkobject; Comment: Create a binary object. Invoked via bfd_set_format. 
Name: binary_object_p; Comment: Any file may be considered to be a binary file, provided the target was not defaulted. That is, it must be explicitly specified as being binary. 
Name: binary_get_section_contents; Comment: Get contents of the only section. 
Name: binary_get_symtab_upper_bound; Comment: Return the amount of memory needed to read the symbol table. 
Name: mangle_name; Comment: Create a symbol name based on the bfd's filename. 
Name: binary_canonicalize_symtab; Comment: Return the symbol table. 
Name: binary_get_symbol_info; Comment: Get information about a symbol. 
Name: binary_set_section_contents; Comment: Write section contents of a binary file. 
Name: binary_sizeof_headers; Comment: No space is required for header information. 
Name: bfd_cache_max_open; Comment: Set max_open_files, if not already set, to 12.5% of the allowed open file descriptors, but at least 10, and return the value. 
Name: insert; Comment: Insert a BFD into the cache. 
Name: snip; Comment: Remove a BFD from the cache. 
Name: bfd_cache_delete; Comment: Close a BFD and remove it from the cache. 
Name: close_one; Comment: We need to open a new file, and the cache is full. Find the least recently used cacheable BFD and close it. 
Name: bfd_cache_lookup_worker; Comment: Called when the macro <<bfd_cache_lookup>> fails to find a quick answer. Find a file descriptor for @var{abfd}. If necessary, it open it. If there are already more than <<bfd_cache_max_open>> files open, it tries to close one first, to avoid running out of file descriptors. It will return NULL if it is unable to (re)open the @var{abfd}. 
Name: cache_bread_1; Comment: Note that archive entries don't have streams; they share their parent's. This allows someone to play with the iostream behind BFD's back. Also, note that the origin pointer points to the beginning of a file's contents (0 for non-archive elements). For archive entries this is the first octet in the file, NOT the beginning of the archive header. 
Name: bfd_cache_init; Comment: None DESCRIPTION _Add a newly opened BFD to the cache. 
Name: bfd_cache_close; Comment: None DESCRIPTION _Remove the BFD @var{abfd} from the cache. If the attached file is open,_then close it too. RETURNS _<<FALSE>> is returned if closing the file fails, <<TRUE>> is _returned if all is well. 
Name: bfd_cache_close_all; Comment: None DESCRIPTION _Remove all BFDs from the cache. If the attached file is open, _then close it too. RETURNS _<<FALSE>> is returned if closing one of the file fails, <<TRUE>> is _returned if all is well. 
Name: bfd_open_file; Comment: None DESCRIPTION _Call the OS to open a file for @var{abfd}. Return the <<FILE >>_(possibly <<NULL>>) that results from this operation. Set up the _BFD so that future accesses know the file is open. If the <<FILE *>> _returned is <<NULL>>, then it won't have been put in the _cache, so it won't have to be removed from it. 
Name: cisco_core_file_validate; Comment: Examine the file for a crash info struct at the offset given by CRASH_INFO_LOC. 
Name: in_reloc_p; Comment: Return TRUE if this relocation should appear in the output .reloc section. 
Name: reloc_nil; Comment: How to process the various reloc types. 
Name: alpha_ecoff_object_p; Comment: Recognize an Alpha ECOFF file. 
Name: alpha_ecoff_bad_format_hook; Comment: See whether the magic number matches. 
Name: alpha_ecoff_mkobject_hook; Comment: This is a hook called by coff_real_object_p to create any backend specific information. 
Name: alpha_ecoff_swap_reloc_in; Comment: Swap a reloc in. 
Name: alpha_ecoff_swap_reloc_out; Comment: Swap a reloc out. 
Name: alpha_adjust_reloc_in; Comment: Finish canonicalizing a reloc. Part of this is generic to all ECOFF targets, and that part is in ecoff.c. The rest is done in this backend routine. It must fill in the howto field. 
Name: alpha_adjust_reloc_out; Comment: When writing out a reloc we need to pull some values back out of the addend field into the reloc. This is roughly the reverse of alpha_adjust_reloc_in, except that there are several changes we do not need to undo. 
Name: alpha_ecoff_get_relocated_section_contents; Comment: Alpha ECOFF relocs have a built in expression evaluator as well as other interdependencies. Rather than use a bunch of special functions and global variables, we use a single routine to do all the relocation for a section. I haven't yet worked out how the assembler is going to handle this. 
Name: alpha_bfd_reloc_type_lookup; Comment: Get the howto structure for a generic reloc type. 
Name: alpha_convert_external_reloc; Comment: A helper routine for alpha_relocate_section which converts an external reloc when generating relocatable output. Returns the relocation amount. 
Name: alpha_relocate_section; Comment: Relocate a section while linking an Alpha ECOFF file. This is quite similar to get_relocated_section_contents. Perhaps they could be combined somehow. 
Name: alpha_adjust_headers; Comment: Do final adjustments to the filehdr and the aouthdr. This routine sets the dynamic bits in the file header. 
Name: alpha_ecoff_read_ar_hdr; Comment: Read an archive header. This is like the standard routine, but it also accepts ARFZMAG. 
Name: alpha_ecoff_get_elt_at_filepos; Comment: Get an archive element at a specified file position. This is where we uncompress the archive element if necessary. 
Name: alpha_ecoff_openr_next_archived_file; Comment: Open the next archived file. 
Name: alpha_ecoff_get_elt_at_index; Comment: Open the archive file given an index into the armap. 
Name: coff_arm_reloc; Comment: Used by the assembler. 
Name: aoutarm_fix_pcrel_26_done; Comment: Used by the assembler. 
Name: aoutarm_fix_pcrel_26; Comment: Used by the assembler. 
Name: coff_arm_link_hash_table_create; Comment: Create an ARM coff linker hash table. 
Name: coff_arm_relocate_section; Comment: The reloc processing routine for the ARM/Thumb COFF linker. NOTE: This code is a very slightly modified copy of _bfd_coff_generic_relocate_section. It would be a much more maintainable solution to have a MACRO that could be expanded within _bfd_coff_generic_relocate_section that would only be provided for ARM/Thumb builds. It is only the code marked THUMBEXTENSION that is different from the original. 
Name: bfd_arm_get_bfd_for_interworking; Comment: Select a BFD to be used to hold the sections used by the glue code. This function is called from the linker scripts in ld/emultempl/ {armcoff/pe}.em 
Name: coff_arm_adjust_symndx; Comment: When doing a relocatable link, we want to convert ARM_26 relocs into ARM_26D relocs. 
Name: coff_arm_merge_private_bfd_data; Comment: Called when merging the private data areas of two BFDs. This is important as it allows us to detect if we are attempting to merge binaries compiled for different ARM targets, eg different CPUs or different APCS's. 
Name: coff_arm_print_private_bfd_data; Comment: Display the flags field. 
Name: _bfd_coff_arm_set_private_flags; Comment: Copies the given flags into the coff_tdata.flags field. Typically these flags come from the f_flags[] field of the COFF filehdr structure, which contains important, target specific information. Note: Although this function is static, it is explicitly called from both coffcode.h and peicode.h. 
Name: coff_arm_copy_private_bfd_data; Comment: Copy the important parts of the target specific data from one instance of a BFD to another. 
Name: coff_arm_is_local_label_name; Comment: Like _bfd_coff_is_local_label_name, but a) test against USER_LABEL_PREFIX, to avoid stripping labels known to be non-local. b) Allow other prefixes than ".", e.g. an empty prefix would cause all labels of the form Lxxx to be stripped. 
Name: coff_arm_link_output_has_begun; Comment: This piece of machinery exists only to guarantee that the bfd that holds the glue section is written last. This does depend on bfd_make_section attaching a new section to the end of the section list for the bfd. 
Name: bfd_coff_get_syment; Comment: Return the COFF syment for a symbol. 
Name: bfd_coff_get_auxent; Comment: Return the COFF auxent for a symbol. 
Name: coff_i386_reloc; Comment: If we are producing relocatable output, we need to do some adjustments to the object file that are not done by the bfd_perform_relocation function. This function is called by every reloc type to make any required adjustments. 
Name: coff_pe_i386_relocate_section; Comment: The PE relocate section routine. We handle secidx relocations here, as well as making sure that we don't do anything for a relocatable link. 
Name: coff_i386_rtype_to_howto; Comment: Convert an rtype to howto for the COFF backend linker. 
Name: coff_i386_is_local_label_name; Comment: If i386 gcc uses underscores for symbol names, then it does not use a leading dot for local labels, so if TARGET_UNDERSCORE is defined we treat all symbols starting with L as local. 
Name: mcore_emit_base_file_entry; Comment: Add an entry to the base file. 
Name: in_reloc_p; Comment: Return TRUE if this relocation should appear in the output .reloc section. This function is referenced in pe_mkobject in peicode.h. 
Name: coff_mcore_relocate_section; Comment: The reloc processing routine for the optimized COFF linker. 
Name: mips_ecoff_bad_format_hook; Comment: See whether the magic number matches. 
Name: mips_ecoff_swap_reloc_in; Comment: Swap a reloc in. 
Name: mips_ecoff_swap_reloc_out; Comment: Swap a reloc out. 
Name: mips_adjust_reloc_in; Comment: Finish canonicalizing a reloc. Part of this is generic to all ECOFF targets, and that part is in ecoff.c. The rest is done in this backend routine. It must fill in the howto field. 
Name: mips_adjust_reloc_out; Comment: Make any adjustments needed to a reloc before writing it out. None are needed for MIPS. 
Name: mips_generic_reloc; Comment: ECOFF relocs are either against external symbols, or against sections. If we are producing relocatable output, and the reloc is against an external symbol, and nothing has given us any additional addend, the resulting reloc will also be against the same symbol. In such a case, we don't want to change anything about the way the reloc is handled, since it will all be done at final link time. Rather than put special case code into bfd_perform_relocation, all the reloc types use this howto function. It just short circuits the reloc if producing relocatable output against an external symbol. 
Name: mips_reflo_reloc; Comment: Do a REFLO relocation. This is a straightforward 16 bit inplace relocation; this function exists in order to do the REFHI relocation described above. 
Name: mips_gprel_reloc; Comment: Do a GPREL relocation. This is a 16 bit value which must become the offset from the gp register. 
Name: mips_bfd_reloc_type_lookup; Comment: Get the howto structure for a generic reloc type. 
Name: mips_relocate_hi; Comment: A helper routine for mips_relocate_section which handles the REFHI relocations. The REFHI relocation must be followed by a REFLO relocation, and the addend used is formed from the addends of both instructions. 
Name: mips_relocate_section; Comment: Relocate a section while linking a MIPS ECOFF file. 
Name: member_layout_init; Comment: Initialize INFO so that it describes member MEMBER of archive ARCHIVE. OFFSET is the even-padded offset of MEMBER, not including any leading padding needed for section alignment. 
Name: archive_iterator_begin; Comment: Set up ITERATOR to iterate through archive ARCHIVE. 
Name: archive_iterator_next; Comment: Make ITERATOR visit the first unvisited archive member. Return true on success; return false if all members have been visited. 
Name: _bfd_xcoff_mkobject; Comment: We use our own tdata type. Its first field is the COFF tdata type, so the COFF routines are compatible. 
Name: _bfd_xcoff_copy_private_bfd_data; Comment: Copy XCOFF data from one BFD to another. 
Name: _bfd_xcoff_is_local_label_name; Comment: I don't think XCOFF really has a notion of local labels based on name. This will mean that ld -X doesn't actually strip anything. The AIX native linker does not have a -X option, and it ignores the -x option. 
Name: _bfd_strntol; Comment: PR 21786: The PE/COFF standard does not require NUL termination for any of the ASCII fields in the archive headers. So in order to be able to extract numerical values we provide our own versions of strtol and strtoll which take a maximum length as an additional parameter. Also - just to save space, we omit the endptr return parameter, since we know that it is never used. 
Name: _bfd_xcoff_slurp_armap; Comment: Read in the armap of an XCOFF archive. 
Name: _bfd_xcoff_archive_p; Comment: See if this is an XCOFF archive. 
Name: _bfd_xcoff_read_ar_hdr; Comment: Read the archive header in an XCOFF archive. 
Name: _bfd_xcoff_openr_next_archived_file; Comment: Open the next element in an XCOFF archive. 
Name: _bfd_xcoff_stat_arch_elt; Comment: Stat an element in an XCOFF archive. 
Name: normalize_filename; Comment: Normalize a file name for inclusion in an archive. 
Name: xcoff_write_armap_old; Comment: Write out an XCOFF armap. 
Name: xcoff_write_archive_contents_old; Comment: Write out an XCOFF archive. We always write an entire archive, rather than fussing with the freelist and so forth. 
Name: _bfd_xcoff_sizeof_headers; Comment: We can't use the usual coff_sizeof_headers routine, because AIX always uses an a.out header. 
Name: xcoff_swap_ldhdr_in; Comment: Swap in the ldhdr structure. 
Name: xcoff_swap_ldhdr_out; Comment: Swap out the ldhdr structure. 
Name: xcoff_swap_ldsym_in; Comment: Swap in the ldsym structure. 
Name: xcoff_swap_ldsym_out; Comment: Swap out the ldsym structure. 
Name: xcoff_swap_ldrel_in; Comment: Swap in the ldrel structure. 
Name: xcoff_swap_ldrel_out; Comment: Swap out the ldrel structure. 
Name: xcoff_ppc_relocate_section; Comment: This is the relocation function for the RS/6000/POWER/PowerPC. This is currently the only processor which uses XCOFF; I hope that will never change. The original version was based on two documents: the PowerPC AIX Version 4 Application Binary Interface, First Edition (April 1992), and the PowerOpen ABI, Big-Endian 32-Bit Hardware Implementation (June 30, 1994). Differences between the documents are noted below. Now, IBM has released an official documentation about XCOFF format: https:www.ibm.comsupportknowledgecenterssw_aix_72filesreferenceXCOFF.html Unsupported r_type's R_RTB: R_RRTBI: R_RRTBA: These relocs are defined by the PowerPC ABI to be relative branches which use half of the difference between the symbol and the program counter. I can't quite figure out when this is useful. These relocs are not defined by the PowerOpen ABI. Supported r_type's R_POS: Simple positive relocation. R_NEG: Simple negative relocation. R_REL: Simple PC relative relocation. R_TOC: TOC relative relocation. The value in the instruction in the input file is the offset from the input file TOC to the desired location. We want the offset from the final TOC to the desired location. We have: isym = iTOC + in iinsn = in + o osym = oTOC + on oinsn = on + o so we must change insn by on - in. This relocation allows the linker to perform optimizations by transforming a load instruction into a add-immediate when possible. The relocation is, then, changed to R_TRLA in the output file. TODO: Currently, the optimisation isn't implemented. R_TRL: TOC relative relocation. Same as R_TOC, except that the optimization isn't allowed R_TRLA: TOC relative relocation. This is a TOC relative load address instruction which have been changed to an add- immediate instruction. R_GL: GL linkage relocation. The value of this relocation is the address of the external symbol in the TOC section. R_TCL: Local object TOC address. I can't figure out the difference between this and case R_GL. R_RL: The PowerPC AIX ABI describes this as a load which may be changed to a load address. The PowerOpen ABI says this is the same as case R_POS. R_RLA: The PowerPC AIX ABI describes this as a load address which may be changed to a load. The PowerOpen ABI says this is the same as R_POS. R_REF: Not a relocation but a way to prevent the garbage collector of AIX linker to remove symbols. This is not needed in our case. R_BA: The PowerOpen ABI says this is the same as R_RBA. R_RBA: Absolute branch which may be modified to become a relative branch. R_BR: The PowerOpen ABI says this is the same as R_RBR. R_RBR: A relative branch which may be modified to become an absolute branch. R_CAI: The PowerPC ABI defines this as an absolute call which may be modified to become a relative call. The PowerOpen ABI does not define this relocation type. R_CREL: The PowerPC ABI defines this as a relative call which may be modified to become an absolute call. The PowerOpen ABI does not define this relocation type. R_RBAC: The PowerPC ABI defines this as an absolute branch to a fixed address which may be modified to an absolute branch to a symbol. The PowerOpen ABI does not define this relocation type. R_RBRC: The PowerPC ABI defines this as an absolute branch to a fixed address which may be modified to a relative branch. The PowerOpen ABI does not define this relocation type. R_TLS: Thread-local storage relocation using general-dynamic model. R_TLS_IE: Thread-local storage relocation using initial-exec model. R_TLS_LD: Thread-local storage relocation using local-dynamic model. R_TLS_LE: Thread-local storage relocation using local-exec model. R_TLSM: Tread-local storage relocation used by the loader. R_TLSML: Tread-local storage relocation used by the loader. R_TOCU: Upper TOC relative relocation. The value is the high-order 16 bit of a TOC relative relocation. R_TOCL: Lower TOC relative relocation. The value is the low-order 16 bit of a TOC relative relocation. 
Name: get_symbol_value; Comment: Get the value of a symbol, when performing a relocation. 
Name: sh_reloc; Comment: This is the howto function for the SH relocations. 
Name: sh_relax_section; Comment: This function handles relaxing on the SH. Function calls on the SH look like this: movl L1,r0 ... jsr @r0 ... L1: .long function The compiler and assembler will cooperate to create R_SH_USES relocs on the jsr instructions. The r_offset field of the R_SH_USES reloc is the PC relative offset to the instruction which loads the register (the r_offset field is computed as though it were a jump instruction, so the offset value is actually from four bytes past the instruction). The linker can use this reloc to determine just which function is being called, and thus decide whether it is possible to replace the jsr with a bsr. If multiple function calls are all based on a single register load (i.e., the same function is called multiple times), the compiler guarantees that each function call will have an R_SH_USES reloc. Therefore, if the linker is able to convert each R_SH_USES reloc which refers to that address, it can safely eliminate the register load. When the assembler creates an R_SH_USES reloc, it examines it to determine which address is being loaded (L1 in the above example). It then counts the number of references to that address, and creates an R_SH_COUNT reloc at that address. The r_offset field of the R_SH_COUNT reloc will be the number of references. If the linker is able to eliminate a register load, it can use the R_SH_COUNT reloc to see whether it can also eliminate the function address. SH relaxing also handles another, unrelated, matter. On the SH, if a load or store instruction is not aligned on a four byte boundary, the memory cycle interferes with the 32 bit instruction fetch, causing a one cycle bubble in the pipeline. Therefore, we try to align load and store instructions on four byte boundaries if we can, by swapping them with one of the adjacent instructions. 
Name: sh_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: sh_insn_info; Comment: Given an instruction, return a pointer to the corresponding sh_opcode structure. Return NULL if the instruction is not recognized. 
Name: sh_insn_uses_reg; Comment: See whether an instruction uses a general purpose register. 
Name: sh_insn_sets_reg; Comment: See whether an instruction sets a general purpose register. 
Name: sh_insn_uses_or_sets_reg; Comment: See whether an instruction uses or sets a general purpose register 
Name: sh_insn_uses_freg; Comment: See whether an instruction uses a floating point register. 
Name: sh_insn_sets_freg; Comment: See whether an instruction sets a floating point register. 
Name: sh_insn_uses_or_sets_freg; Comment: See whether an instruction uses or sets a floating point register 
Name: sh_insns_conflict; Comment: See whether instructions I1 and I2 conflict, assuming I1 comes before I2. OP1 and OP2 are the corresponding sh_opcode structures. This should return TRUE if there is a conflict, or FALSE if the instructions can be swapped safely. 
Name: sh_load_use; Comment: I1 is a load instruction, and I2 is some other instruction. Return TRUE if I1 loads a register which I2 uses. 
Name: sh_swap_insns; Comment: Swap two SH instructions. 
Name: sh_align_loads; Comment: Look for loads and stores which we can align to four byte boundaries. See the longer comment above sh_relax_section for why this is desirable. This sets *PSWAPPED if some instruction was swapped. 
Name: sh_relocate_section; Comment: This is a modification of _bfd_coff_generic_relocate_section, which will handle SH relaxing. 
Name: sh_coff_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses sh_relocate_section. 
Name: coff_small_object_p; Comment: Only recognize the small versions if the target was not defaulted. Otherwise we won't recognize the non default endianness. 
Name: coff_small_new_section_hook; Comment: Set the section alignment for the small versions. 
Name: go32exe_create_stub; Comment: That's the function, which creates the stub. There are different cases from where the stub is taken. At first the environment variable $(GO32STUB) is checked and then $(STUB) if it was not set. If it exists and points to a valid stub the stub is taken from that file. This file can be also a whole executable file, because the stub is computed from the exe information at the start of that file. If there was any error, the standard stub (compiled in this file) is taken. Ideally this function should exec '$(TARGET)-stubify' to generate a stub, like gcc does. 
Name: go32exe_copy_private_bfd_data; Comment: If ibfd was a stubbed coff image, copy the stub from that bfd to the new obfd. 
Name: go32exe_cleanup; Comment: Cleanup function, returned from check_format hook. 
Name: go32exe_check_format; Comment: Check that there is a GO32 stub and read it to go32exe_temp_stub. Then set abfd->origin so that the COFF image is read at the correct file offset. 
Name: go32exe_write_object_contents; Comment: Write the stub to the output file, then call coff_write_object_contents. 
Name: go32exe_mkobject; Comment: mkobject hook. Called directly through bfd_set_format or via coff_mkobject_hook etc from bfd_check_format. 
Name: tic30_coff_reloc_type_lookup; Comment: For the case statement use the code values used in tc_gen_reloc to map to the howto table entries that match those in both the aout and coff implementations. 
Name: coff_tic30_select_reloc; Comment: Turn a howto into a reloc number. 
Name: rtype2howto; Comment: Code to turn a r_type into a howto ptr, uses the above howto table. 
Name: ticoff_bfd_is_local_label_name; Comment: Replace the stock _bfd_coff_is_local_label_name to recognize TI COFF local labels. 
Name: tic4x_coff_reloc_type_lookup; Comment: For the case statement use the code values used tc_gen_reloc (defined in bfd/reloc.c) to map to the howto table entries. 
Name: tic4x_lookup_howto; Comment: Code to turn a r_type into a howto ptr, uses the above howto table. Called after some initial checking by the tic4x_rtype_to_howto fn below. 
Name: tic54x_getl32; Comment: 32-bit operations The octet order is screwy. words are LSB first (LS octet, actually), but longwords are MSW first. For example, 0x12345678 is encoded 0x5678 in the first word and 0x1234 in the second. When looking at the data as stored in the COFF file, you would see the octets ordered as 0x78, 0x56, 0x34, 0x12. Don't bother with 64-bits, as there aren't any. 
Name: tic54x_set_arch_mach; Comment: Set the architecture appropriately. Allow unkown architectures (e.g. binary). 
Name: tic54x_coff_reloc_type_lookup; Comment: For the case statement use the code values used tc_gen_reloc (defined in bfd/reloc.c) to map to the howto table entries. 
Name: tic54x_lookup_howto; Comment: Code to turn a r_type into a howto ptr, uses the above howto table. Called after some initial checking by the tic54x_rtype_to_howto fn below. 
Name: coff_amd64_reloc; Comment: If we are producing relocatable output, we need to do some adjustments to the object file that are not done by the bfd_perform_relocation function. This function is called by every reloc type to make any required adjustments. 
Name: coff_pe_amd64_relocate_section; Comment: The PE relocate section routine. We handle secidx relocations here, as well as making sure that we don't do anything for a relocatable link. 
Name: coff_amd64_rtype_to_howto; Comment: Convert an rtype to howto for the COFF backend linker. 
Name: coff_amd64_is_local_label_name; Comment: If amd64 gcc uses underscores for symbol names, then it does not use a leading dot for local labels, so if TARGET_UNDERSCORE is defined we treat all symbols starting with L as local. 
Name: _bfd_xcoff64_swap_lineno_in; Comment: For XCOFF64, the effective width of symndx changes depending on whether we are the first entry. Sigh. 
Name: xcoff64_swap_ldhdr_in; Comment: Swap in the ldhdr structure. 
Name: xcoff64_swap_ldhdr_out; Comment: Swap out the ldhdr structure. 
Name: xcoff64_swap_ldsym_in; Comment: Swap in the ldsym structure. 
Name: xcoff64_swap_ldsym_out; Comment: Swap out the ldsym structure. 
Name: xcoff64_swap_ldrel_in; Comment: Swap in the ldrel structure. 
Name: xcoff64_swap_ldrel_out; Comment: Swap out the ldrel structure. 
Name: xcoff64_ppc_relocate_section; Comment: This is the relocation function for the PowerPC64. See xcoff_ppc_relocation_section for more information. 
Name: xcoff64_slurp_armap; Comment: Read in the armap of an XCOFF archive. 
Name: xcoff64_archive_p; Comment: See if this is an NEW XCOFF archive. 
Name: xcoff64_openr_next_archived_file; Comment: Open the next element in an XCOFF archive. 
Name: xcoff64_sizeof_headers; Comment: We can't use the usual coff_sizeof_headers routine, because AIX always uses an a.out header. 
Name: make_a_section_from_file; Comment: Take a section header read from a coff file (in HOST byte order), and make a BFD "section" out of it. This is used by ECOFF. 
Name: coff_object_p; Comment: Turn a COFF file into a BFD, but fail with bfd_error_wrong_format if it is not a COFF file. This is also used by ECOFF. 
Name: coff_section_from_bfd_index; Comment: Get the BFD section from a COFF symbol section number. 
Name: coff_get_symtab_upper_bound; Comment: Get the upper bound of a COFF symbol table. 
Name: coff_canonicalize_symtab; Comment: Canonicalize a COFF symbol table. 
Name: _bfd_coff_internal_syment_name; Comment: Get the name of a symbol. The caller must pass in a buffer of size >= SYMNMLEN + 1. 
Name: _bfd_coff_read_internal_relocs; Comment: Read in and swap the relocs. This returns a buffer holding the relocs for section SEC in file ABFD. If CACHE is TRUE and INTERNAL_RELOCS is NULL, the relocs read in will be saved in case the function is called again. If EXTERNAL_RELOCS is not NULL, it is a buffer large enough to hold the unswapped relocs. If INTERNAL_RELOCS is not NULL, it is a buffer large enough to hold the swapped relocs. If REQUIRE_INTERNAL is TRUE, then the return value must be INTERNAL_RELOCS. The function returns NULL on error. 
Name: coff_count_linenumbers; Comment: Set lineno_count for the output sections of a COFF file. 
Name: coff_renumber_symbols; Comment: Run through all the symbols in the symbol table and work out what their indexes into the symbol table will be when output. Coff requires that each C_FILE symbol points to the next one in the chain, and that the last one points to the first external symbol. We do that here too. 
Name: coff_mangle_symbols; Comment: Run thorough the symbol table again, and fix it so that all pointers to entries are changed to the entries' index in the output symbol table. 
Name: coff_write_symbol; Comment: Write a symbol out to a COFF file. 
Name: coff_write_alien_symbol; Comment: Write out a symbol to a COFF file that does not come from a COFF file originally. This symbol may have been created by the linker, or we may be linking a non COFF file to a COFF file. 
Name: coff_write_native_symbol; Comment: Write a native symbol to a COFF file. 
Name: coff_write_symbols; Comment: Write out the COFF symbols. 
Name: coff_pointerize_aux; Comment: This function transforms the offsets into the symbol table into pointers to syments. 
Name: build_debug_section; Comment: Allocate space for the ".debug" section, and read it. We did not read the debug section until now, because we didn't want to go to the trouble until someone needed it. 
Name: copy_name; Comment: Return a pointer to a malloc'd copy of 'name'. 'name' may not be _0-terminated, but will not exceed 'maxlen' characters. The copy *will* be _0-terminated. 
Name: _bfd_coff_get_external_symbols; Comment: Read in the external symbols. 
Name: _bfd_coff_read_string_table; Comment: Read in the external strings. The strings are not loaded until they are needed. This is because we have no simple way of detecting a missing string table in an archive. If the strings are loaded then the STRINGS and STRINGS_LEN fields in the coff_tdata structure will be set. 
Name: _bfd_coff_free_symbols; Comment: Free up the external symbols and strings read from a COFF file. 
Name: coff_get_normalized_symtab; Comment: Read a symbol table into freshly bfd_allocated memory, swap it, and knit the symbol names into a normalized form. By normalized here I mean that all symbols have an n_offset pointer that points to a null- terminated string. 
Name: coff_bfd_make_debug_symbol; Comment: Make a debugging symbol. 
Name: coff_print_symbol; Comment: Print out information about COFF symbol. 
Name: _bfd_coff_is_local_label_name; Comment: Return whether a symbol name implies a local symbol. In COFF, local symbols generally start with ``.L''. Most targets use this function for the is_local_label_name entry point, but some may override it. 
Name: coff_find_nearest_line_with_names; Comment: Provided a BFD, a section and an offset (in bytes, not octets) into the section, calculate and return the name of the source file and the line nearest to the wanted location. 
Name: bfd_coff_set_symbol_class; Comment: Change the class of a coff symbol held by BFD. 
Name: init_reloc_cookie; Comment: Initialize COOKIE for input bfd ABFD. 
Name: fini_reloc_cookie; Comment: Free the memory allocated by init_reloc_cookie, if appropriate. 
Name: init_reloc_cookie_rels; Comment: Initialize the relocation information in COOKIE for input section SEC of input bfd ABFD. 
Name: fini_reloc_cookie_rels; Comment: Free the memory allocated by init_reloc_cookie_rels, if appropriate. 
Name: init_reloc_cookie_for_section; Comment: Initialize the whole of COOKIE for input section SEC. 
Name: fini_reloc_cookie_for_section; Comment: Free the memory allocated by init_reloc_cookie_for_section, if appropriate. 
Name: _bfd_coff_gc_mark_rsec; Comment: COOKIE->rel describes a relocation against section SEC, which is a section we've decided to keep. Return the section that contains the relocation symbol, or NULL if no section contains it. 
Name: _bfd_coff_gc_mark_reloc; Comment: COOKIE->rel describes a relocation against section SEC, which is a section we've decided to keep. Mark the section that contains the relocation symbol. 
Name: _bfd_coff_gc_mark; Comment: The mark phase of garbage collection. For a given section, mark it and any sections in this section's group, and all the sections which define symbols to which it refers. 
Name: coff_gc_sweep_symbol; Comment: Sweep symbols in swept sections. Called via coff_link_hash_traverse. 
Name: _bfd_coff_gc_keep; Comment: Keep all sections containing symbols undefined on the command-line, and the section containing the entry symbol. 
Name: bfd_coff_gc_sections; Comment: Do mark and sweep of unused sections. 
Name: bfd_coff_group_name; Comment: Return name used to identify a comdat group. 
Name: _bfd_coff_link_hash_newfunc; Comment: Create an entry in a COFF linker hash table. 
Name: _bfd_coff_link_hash_table_init; Comment: Initialize a COFF linker hash table. 
Name: _bfd_coff_link_hash_table_create; Comment: Create a COFF linker hash table. 
Name: _bfd_coff_debug_merge_hash_newfunc; Comment: Create an entry in a COFF debug merge hash table. 
Name: _bfd_coff_link_add_symbols; Comment: Given a COFF BFD, add symbols to the global hash table as appropriate. 
Name: coff_link_add_object_symbols; Comment: Add symbols from a COFF object file. 
Name: coff_link_check_archive_element; Comment: Check a single archive element to see if we need to include it in the link. *PNEEDED is set according to whether this element is needed in the link or not. This is called via _bfd_generic_link_add_archive_symbols. 
Name: coff_link_add_symbols; Comment: Add all the symbols from an object file to the hash table. 
Name: _bfd_coff_final_link; Comment: Do the final link step. 
Name: dores_com; Comment: Parse out a -heap <reserved>,<commit> line. 
Name: process_embedded_commands; Comment: Process any magic embedded commands in a section called .drectve. 
Name: mark_relocs; Comment: Place a marker against all symbols which are used by relocations. This marker can be picked up by the 'do we skip this symbol ?' loop in _bfd_coff_link_input_bfd() and used to prevent skipping that symbol. 
Name: _bfd_coff_link_input_bfd; Comment: Link an input file into the linker output file. This function handles all the sections and relocations of the input file at once. 
Name: _bfd_coff_write_global_sym; Comment: Write out a global symbol. Called via bfd_hash_traverse. 
Name: _bfd_coff_write_task_globals; Comment: Write out task global symbols, converting them to statics. Called via coff_link_hash_traverse. Calls bfd_coff_write_global_sym to do the dirty work, if the symbol we are processing needs conversion. 
Name: _bfd_coff_reloc_link_order; Comment: Handle a link order which is supposed to generate a reloc. 
Name: _bfd_coff_generic_relocate_section; Comment: A basic reloc handling routine which may be used by processors with simple relocs. 
Name: bfd_get_compression_algorithm; Comment: NoneDESCRIPTION _Return compressed_debug_section_type from a string representation. 
Name: bfd_get_compression_algorithm_name; Comment: NoneDESCRIPTION _Return compression algorithm name based on the type. 
Name: bfd_update_compression_header; Comment: None DESCRIPTION _Set the compression header at CONTENTS of SEC in ABFD and update _elf_section_flags for compression. 
Name: bfd_check_compression_header; Comment: Check the compression header at CONTENTS of SEC in ABFD and store the ch_type in CH_TYPE, uncompressed size in UNCOMPRESSED_SIZE, and the uncompressed data alignment in UNCOMPRESSED_ALIGNMENT_POWER if the compression header is valid. 
Name: bfd_get_compression_header_size; Comment: None DESCRIPTION _Return the size of the compression header of SEC in ABFD. RETURNS _Return the size of the compression header in bytes. 
Name: bfd_convert_section_setup; Comment: None DESCRIPTION _Do early setup for objcopy, when copying @var{isec} in input_BFD @var{ibfd} to output BFD @var{obfd}. Returns the name and_size of the output section. 
Name: bfd_convert_section_contents; Comment: None DESCRIPTION _Convert the contents, stored in @var{ptr}, of the section_@var{isec} in input BFD @var{ibfd} to output BFD @var{obfd}_if needed. The original buffer pointed to by @var{ptr} may_be freed and @var{ptr} is returned with memory malloc'd by this_function, and the new size written to @var{ptr_size}.
Name: bfd_compress_section_contents; Comment: Compress section contents using zlib/zstd and store as the contents field. This function assumes the contents field was allocated using bfd_malloc() or equivalent. Return the uncompressed size if the full section contents is compressed successfully. Otherwise return 0. 
Name: bfd_get_full_section_contents; Comment: None DESCRIPTION _Read all data from @var{section} in BFD @var{abfd}, decompress_if needed, and store in @var{ptr}. If @var{ptr} is NULL,_return @var{ptr} with memory malloc'd by this function. _Return @code{TRUE} if the full section contents is retrieved_successfully. If the section has no contents then this function _returns @code{TRUE} but @var{ptr} is set to NULL.
Name: bfd_is_section_compressed_info; Comment: None DESCRIPTION _Return @code{TRUE} if @var{section} is compressed. Compression_header size is returned in @var{compression_header_size_p},_uncompressed size is returned in @var{uncompressed_size_p}_and the uncompressed data alignement power is returned in _@var{uncompressed_align_pow_p}. If compression is_unsupported, compression header size is returned with -1 _and uncompressed size is returned with 0. 
Name: bfd_is_section_compressed; Comment: None DESCRIPTION _Return @code{TRUE} if @var{section} is compressed.
Name: bfd_init_section_decompress_status; Comment: None DESCRIPTION _Record compressed section size, update section size with _decompressed size and set compress_status to _DECOMPRESS_SECTION_{ZLIB,ZSTD}. _Return @code{FALSE} if the section is not a valid compressed_section. Otherwise, return @code{TRUE}.
Name: bfd_init_section_compress_status; Comment: None DESCRIPTION _If open for read, compress section, update section size with _compressed size and set compress_status to COMPRESS_SECTION_DONE. _Return @code{FALSE} if the section is not a valid compressed_section. Otherwise, return @code{TRUE}.
Name: bfd_compress_section; Comment: None DESCRIPTION _If open for write, compress section, update section size with _compressed size and set compress_status to COMPRESS_SECTION_DONE. _Return @code{FALSE} if compression fail. Otherwise, return_@code{TRUE}. UNCOMPRESSED_BUFFER is freed in both cases.
Name: bfd_core_file_failing_command; Comment: None DESCRIPTION _Return a read-only string explaining which program was running _when it failed and produced the core file @var{abfd}. 
Name: bfd_core_file_failing_signal; Comment: None DESCRIPTION _Returns the signal number which caused the core dump which _generated the file the BFD @var{abfd} is attached to.
Name: bfd_core_file_pid; Comment: None DESCRIPTION _Returns the PID of the process the core dump the BFD _@var{abfd} is attached to was generated from.
Name: core_file_matches_executable_p; Comment: None DESCRIPTION _Return <<TRUE>> if the core file attached to @var{core_bfd}_was generated by a run of the executable file attached to _@var{exec_bfd}, <<FALSE>> otherwise.
Name: generic_core_file_matches_executable_p; Comment: None DESCRIPTION _Return TRUE if the core file attached to @var{core_bfd}_was generated by a run of the executable file attached _to @var{exec_bfd}. The match is based on executable_basenames only. _Note: When not able to determine the core file failing _command or the executable name, we still return TRUE even _though we're not sure that core file and executable match. _This is to avoid generating a false warning in situations _where we really don't know whether they match or not. 
Name: compatible; Comment: This routine is provided two arch_infos and works out which Aarch64 machine which would be compatible with both and returns a pointer to its info structure. 
Name: arc_compatible; Comment: ARC-specific "compatible" function. The general rule is that if A and B are compatible, then this function should return architecture that is more "feature-rich", that is, can run both A and B. ARCv2, EM and HS all has same mach number, so bfd_default_compatible assumes they are the same, and returns an A. That causes issues with GDB, because GDB assumes that if machines are compatible, then "compatible ()" always returns same machine regardless of argument order. As a result GDB gets confused because, for example, compatible (ARCv2, EM) returns ARCv2, but compatible (EM, ARCv2) returns EM, hence GDB is not sure if they are compatible and prints a warning. 
Name: compatible; Comment: This routine is provided two arch_infos and works out which ARM machine which would be compatible with both and returns a pointer to its info structure. 
Name: bfd_arm_merge_machines; Comment: Handle the merging of the 'machine' settings of input file IBFD and an output file OBFD. These values actually represent the different possible ARM architecture variants. Returns TRUE if they were merged successfully or FALSE otherwise. 
Name: bfd_arm_get_mach_from_notes; Comment: Extract the machine number stored in a note section. 
Name: compatible; Comment: This routine is provided two arch_infos and works out which AVR machine which would be compatible with both and returns a pointer to its info structure. 
Name: compatible; Comment: This routine is provided two arch_infos and works out the machine which would be compatible with both and returns a pointer to its info structure. 
Name: bfd_h8300_pad_address; Comment: Pad the given address to 32 bits, converting 16-bit and 24-bit addresses into the values they would have had on a h8s target. 
Name: bfd_arch_i386_fill; Comment: Fill the buffer with zero or nop instruction if CODE is TRUE. Use multi byte nop instructions if LONG_NOP is TRUE. 
Name: bfd_arch_i386_short_nop_fill; Comment: Fill the buffer with zero or short nop instruction if CODE is true. 
Name: bfd_arch_i386_long_nop_fill; Comment: Fill the buffer with zero or long nop instruction if CODE is TRUE. 
Name: ins_rsvd; Comment: Logically, this code should be part of libopcode but since some of the operand insertion/extraction functions help bfd to implement relocations, this code is included as part of cpu-ia64.c. This avoids circular dependencies between libopcode and libbfd and also obviates the need for applications to link in libopcode when all they really want is libbfd. --davidm Mon Apr 13 22:14:02 1998 
Name: m32c_scan; Comment: Like bfd_default_scan but if the string is just "m32c" then skip the m16c architecture. 
Name: bit_count; Comment: Return the count of bits set in MASK 
Name: bfd_m68k_mach_to_features; Comment: Return the architectural features supported by MACH 
Name: bfd_m68k_features_to_mach; Comment: Return the bfd machine that most closely represents the architectural features. We find the machine with the smallest number of additional features. If there is no such machine, we find the one with the smallest number of missing features. 
Name: mips_compatible; Comment: The default routine tests bits_per_word, which is wrong on mips as mips word size doesn't correlate with reloc size. 
Name: compatible; Comment: This routine is provided two arch_infos and works out which MSP machine which would be compatible with both and returns a pointer to its info structure. 
Name: do_ns32k_reloc; Comment: This is just like the standard perform_relocation except we use get_data and put_data which know about the ns32k storage methods. This is probably a lot more complicated than it needs to be! 
Name: _bfd_do_ns32k_reloc_contents; Comment: Relocate a given location using a given value and howto. 
Name: powerpc_compatible; Comment: The common PowerPC architecture is compatible with the RS/6000. 
Name: bfd_arch_ppc_nop_fill; Comment: Return a COUNT sized buffer filled with nops (if CODE is TRUE) or zeros (if CODE is FALSE). This is the fill used between input sections for alignment. It won't normally be executed. 
Name: riscv_scan; Comment: Return TRUE if STRING matches the architecture described by INFO. 
Name: riscv_get_priv_spec_class_from_numbers; Comment: Get the corresponding CSR version class by giving privilege version numbers. It is usually used to convert the priv attribute numbers into the corresponding class. 
Name: riscv_elf_is_mapping_symbols; Comment: Define mapping symbols for riscv. 
Name: rs6000_compatible; Comment: The RS/6000 architecture is compatible with the PowerPC common architecture. 
Name: compatible; Comment: This routine is provided two arch_infos and works out which Score machine which would be compatible with both and returns a pointer to its info structure. 
Name: sh_get_arch_from_bfd_mach; Comment: Convert a BFD mach number into the right opcodes arch flags using the table above. 
Name: sh_get_arch_up_from_bfd_mach; Comment: Convert a BFD mach number into a set of opcodes arch flags describing all the compatible architectures (i.e. arch_up) using the table above. 
Name: sh_get_bfd_mach_from_arch_set; Comment: Convert an arbitary arch_set - not necessarily corresponding directly to anything in the table above - to the most generic architecture which supports all the required features, and return the corresponding BFD mach. 
Name: compatible; Comment: This routine is provided two arch_infos and returns whether they'd be compatible. 
Name: compatible; Comment: This routine is provided two arch_infos and returns whether they'd be compatible 
Name: alloc_dwarf1_unit; Comment: Return a newly allocated dwarf1_unit. It should be cleared and then attached into the 'stash' at 'stash->lastUnit'. 
Name: alloc_dwarf1_func; Comment: Return a newly allocated dwarf1_func. It must be cleared and attached into 'aUnit' at 'aUnit->func_list'. 
Name: parse_die; Comment: parse_die - parse a Dwarf1 die. Parse the die starting at 'aDiePtr' into 'aDieInfo'. 'abfd' must be the bfd from which the section that 'aDiePtr' points to was pulled from. Return FALSE if the die is invalidly formatted; TRUE otherwise. 
Name: parse_line_table; Comment: Parse a dwarf1 line number table for 'aUnit->stmt_list_offset' into 'aUnit->linenumber_table'. Return FALSE if an error occurs; TRUE otherwise. 
Name: parse_functions_in_unit; Comment: Parse each function die in a compilation unit 'aUnit'. The first child die of 'aUnit' should be in 'aUnit->first_child', the result is placed in 'aUnit->func_list'. Return FALSE if error; TRUE otherwise. 
Name: dwarf1_unit_find_nearest_line; Comment: Find the nearest line to 'addr' in 'aUnit'. Return whether we found the line (or a function) without error. 
Name: _bfd_dwarf1_find_nearest_line; Comment: The DWARF 1 version of find_nearest line. Return TRUE if the line is found without error. 
Name: addr_range_intersects; Comment: Return true if address range do intersect. 
Name: splay_tree_compare_addr_range; Comment: Compare function for splay tree of addr_ranges. 
Name: splay_tree_free_addr_range; Comment: Splay tree release function for keys (addr_range). 
Name: info_hash_table_newfunc; Comment: Function to create a new entry in info hash table. 
Name: create_info_hash_table; Comment: Function to create a new info hash table. It returns a pointer to the newly created table or NULL if there is any error. We need abfd solely for memory allocation. 
Name: insert_info_hash_table; Comment: Insert an info entry into an info hash table. We do not check of duplicate entries. Also, the caller need to guarantee that the right type of info in inserted as info is passed as a void* pointer. This function returns true if there is no error. 
Name: lookup_info_hash_table; Comment: Look up an info entry list from an info hash table. Return NULL if there is none. 
Name: read_section; Comment: Read a section into its appropriate place in the dwarf2_debug struct (indicated by SECTION_BUFFER and SECTION_SIZE). If SYMS is not NULL, use bfd_simple_get_relocated_section_contents to read the section contents, otherwise use bfd_get_section_contents. Fail if the located section does not contain at least OFFSET bytes. 
Name: read_string; Comment: Scans a NUL terminated string starting at *PTR, returning a pointer to it. Bytes at or beyond BUF_END will not be read. Returns NULL if the terminator is not found or if the string is empty. *PTR is incremented over the bytes scanned, including the terminator. 
Name: read_indirect_string; Comment: Reads an offset from *PTR and then locates the string at this offset inside the debug string section. Returns a pointer to the string. Increments *PTR by the number of bytes read for the offset. This value is set even if the function fails. Bytes at or beyond BUF_END will not be read. Returns NULL if there was a problem, or if the string is empty. Does not check for NUL termination of the string. 
Name: read_indirect_line_string; Comment: Like read_indirect_string but from .debug_line_str section. 
Name: read_alt_indirect_string; Comment: Like read_indirect_string but uses a .debug_str located in an alternate file pointed to by the .gnu_debugaltlink section. Used to impement DW_FORM_GNU_strp_alt. 
Name: read_alt_indirect_ref; Comment: Resolve an alternate reference from UNIT at OFFSET. Returns a pointer into the loaded alternate CU upon success or NULL upon failure. 
Name: lookup_abbrev; Comment: Lookup an abbrev_info structure in the abbrev hash table. 
Name: read_abbrevs; Comment: In DWARF version 2, the description of the debugging information is stored in a separate .debug_abbrev section. Before we read any dies from a section we read in all abbreviations and install them in a hash table. 
Name: is_str_form; Comment: Returns true if the form is one which has a string value. 
Name: is_int_form; Comment: Returns true if the form is one which has an integer value. 
Name: read_indexed_address; Comment: Returns the address in .debug_addr section using DW_AT_addr_base. Used to implement DW_FORM_addrx*. 
Name: read_indexed_string; Comment: Returns the string using DW_AT_str_offsets_base. Used to implement DW_FORM_strx*. 
Name: read_attribute_value; Comment: Read and fill in the value of attribute ATTR as described by FORM. Read data starting from INFO_PTR, but never at or beyond INFO_PTR_END. Returns an updated INFO_PTR taking into account the amount of data read. 
Name: read_attribute; Comment: Read an attribute described by an abbreviated attribute. 
Name: mangle_style; Comment: Return mangling style given LANG. 
Name: add_line_info; Comment: Adds a new entry to the line_info list in the line_info_table, ensuring that the list is sorted. Note that the line_info list is sorted from highest to lowest VMA (with possible duplicates); that is, line_info->prev_line always accesses an equal or smaller VMA. 
Name: concat_filename; Comment: Extract a fully qualified filename from a line info table. The returned string has been malloc'ed and it is the caller's responsibility to free it. 
Name: ranges_overlap; Comment: Check whether [low1, high1) can be combined with [low2, high2), i.e., they touch or overlap. 
Name: insert_arange_in_trie; Comment: Insert an address range in the trie mapping addresses to compilation units. Will return the new trie node (usually the same as is being sent in, but in case of a leaf-to-interior conversion, or expansion of a leaf, it may be different), or NULL on failure. 
Name: compare_sequences; Comment: Compare function for line sequences. 
Name: build_line_info_table; Comment: Construct the line information table for quick lookup. 
Name: sort_line_sequences; Comment: Sort the line sequences for quick lookup. 
Name: line_info_add_include_dir; Comment: Add directory to TABLE. CUR_DIR memory ownership is taken by TABLE. 
Name: line_info_add_file_name; Comment: Add file to TABLE. CUR_FILE memory ownership is taken by TABLE. 
Name: read_formatted_entries; Comment: Read directory or file name entry format, starting with byte of format count entries, ULEB128 pairs of entry formats, ULEB128 of entries count and the entries themselves in the described entry format. 
Name: decode_line_info; Comment: Decode the line number information for UNIT. 
Name: lookup_address_in_line_info_table; Comment: If ADDR is within TABLE set the output parameters and return TRUE, otherwise set *FILENAME_PTR to NULL and return FALSE. The parameters FILENAME_PTR, LINENUMBER_PTR and DISCRIMINATOR_PTR are pointers to the objects to be filled in. 
Name: read_debug_ranges; Comment: Read in the .debug_ranges section for future reference. 
Name: read_debug_rnglists; Comment: Read in the .debug_rnglists section for future reference. 
Name: compare_lookup_funcinfos; Comment: Function table functions. 
Name: lookup_address_in_function_table; Comment: If ADDR is within UNIT's function tables, set FUNCTION_PTR, and return TRUE. Note that we need to find the function that has the smallest range that contains ADDR, to handle inlined functions without depending upon them being ordered in TABLE by increasing range. 
Name: lookup_symbol_in_function_table; Comment: If SYM at ADDR is within function table of UNIT, set FILENAME_PTR and LINENUMBER_PTR, and return TRUE. 
Name: lookup_symbol_in_variable_table; Comment: If SYM is within variable table of UNIT, set FILENAME_PTR and LINENUMBER_PTR, and return TRUE. 
Name: reverse_funcinfo_list; Comment: DWARF2 Compilation unit functions. 
Name: scan_unit_for_symbols; Comment: Scan over each die in a comp. unit looking for functions to add to the function table and variables to the variable table. 
Name: reread_attribute; Comment: Read the attributes of the form strx and addrx. 
Name: parse_comp_unit; Comment: Parse a DWARF2 compilation unit starting at INFO_PTR. UNIT_LENGTH includes the compilation unit header that proceeds the DIE's, but does not include the length field that precedes each compilation unit header. END_PTR points one past the end of this comp unit. OFFSET_SIZE is the size of DWARF2 offsets (either 4 or 8 bytes). This routine does not read the whole compilation unit; only enough to get to the line number information for the compilation unit. 
Name: comp_unit_contains_address; Comment: Return TRUE if UNIT may contain the address given by ADDR. When there are functions written entirely with inline asm statements, the range info in the compilation unit header may not be correct. We need to consult the line info table to see if a compilation unit really contains the given address. 
Name: comp_unit_find_nearest_line; Comment: If UNIT contains ADDR, set the output parameters to the values for the line containing ADDR and return TRUE. Otherwise return FALSE. The output parameters, FILENAME_PTR, FUNCTION_PTR, and LINENUMBER_PTR, are pointers to the objects to be filled in. 
Name: comp_unit_maybe_decode_line_info; Comment: None FALSE otherwise. 
Name: comp_unit_find_line; Comment: None FALSE otherwise. 
Name: comp_unit_hash_info; Comment: Extract all interesting funcinfos and varinfos of a compilation unit into hash tables for faster lookup. Returns TRUE if no errors were enountered; FALSE otherwise. 
Name: set_debug_vma; Comment: Transfer VMAs from object file to separate debug file. 
Name: _bfd_dwarf2_stash_syms; Comment: If the dwarf2 info was found in a separate debug file, return the debug file section corresponding to the section in the original file and the debug file symbols. 
Name: unset_sections; Comment: Unset vmas for adjusted sections in STASH. 
Name: place_sections; Comment: Set VMAs for allocated and .debug_info sections in ORIG_BFD, a relocatable object file. VMAs are normally all zero in relocatable object files, so if we want to distinguish locations in sections by address we need to set VMAs so the sections do not overlap. We also set VMA on .debug_info so that when we have multiple .debug_info sections (or the linkonce variant) they also do not overlap. The multiple .debug_info sections make up a single logical section. ??? We should probably do the same for other debug sections. 
Name: info_hash_lookup_funcinfo; Comment: Look up a funcinfo by name using the given info hash table. If found, also update the locations pointed to by filename_ptr and linenumber_ptr. This function returns TRUE if a funcinfo that matches the given symbol and address is found with any error; otherwise it returns FALSE. 
Name: info_hash_lookup_varinfo; Comment: Look up a varinfo by name using the given info hash table. If found, also update the locations pointed to by filename_ptr and linenumber_ptr. This function returns TRUE if a varinfo that matches the given symbol and address is found with any error; otherwise it returns FALSE. 
Name: stash_maybe_update_info_hash_tables; Comment: Update the funcinfo and varinfo info hash tables if they are not up to date. Returns TRUE if there is no error; otherwise returns FALSE and disable the info hash tables. 
Name: stash_verify_info_hash_table; Comment: Check consistency of info hash tables. This is for debugging only. 
Name: stash_maybe_enable_info_hash_tables; Comment: Check to see if we want to enable the info hash tables, which consume quite a bit of memory. Currently we only check the number times bfd_dwarf2_find_line is called. In the future, we may also want to take the number of symbols into account. 
Name: stash_find_line_fast; Comment: None otherwise it returns FALSE. 
Name: save_section_vma; Comment: Save current section VMAs. 
Name: section_vma_same; Comment: Compare current section VMAs against those at the time the stash was created. If find_nearest_line is used in linker warnings or errors early in the link process, the debug info stash will be invalid for later calls. This is because we relocate debug info sections, so the stashed section contents depend on symbol values, which in turn depend on section VMAs. 
Name: _bfd_dwarf2_slurp_debug_info; Comment: Read debug information from DEBUG_BFD when DEBUG_BFD is specified. If DEBUG_BFD is not specified, we read debug information from ABFD or its gnu_debuglink. The results will be stored in PINFO. The function returns TRUE iff debug information is ready. 
Name: stash_comp_unit; Comment: Parse the next DWARF2 compilation unit at FILE->INFO_PTR. 
Name: hash_asymbol; Comment: Hash function for an asymbol. 
Name: eq_asymbol; Comment: Equality function for asymbols. 
Name: _bfd_dwarf2_find_symbol_bias; Comment: Scan the debug information in PINFO looking for a DW_TAG_subprogram abbrev with a DW_AT_low_pc attached to it. Then lookup that same symbol in SYMBOLS and return the difference between the low_pc and the symbol's address. Returns 0 if no suitable symbol could be found. 
Name: _bfd_dwarf2_find_nearest_line; Comment: See _bfd_dwarf2_find_nearest_line_with_alt. 
Name: ; Comment: Find the source code location of SYMBOL. If SYMBOL is NULL then find the nearest source code location corresponding to the address SECTION + OFFSET. Returns 1 if the line is found without error and fills in FILENAME_PTR and LINENUMBER_PTR. In the case where SYMBOL was NULL the FUNCTIONNAME_PTR is also filled in. Returns 2 if partial information from _bfd_elf_find_function is returned (function and maybe file) by looking at symbols. DWARF2 info is present but not regarding the requested code location. Returns 0 otherwise. SYMBOLS contains the symbol table for ABFD. DEBUG_SECTIONS contains the name of the dwarf debug sections. If ALT_FILENAME is given, attempt to open the file and use it as the .gnu_debugaltlink file. Otherwise this file will be searched for when needed. 
Name: _bfd_elf_find_function; Comment: Find the function to a particular section and offset, for error reporting. 
Name: _bfd_ecoff_mkobject; Comment: Create an ECOFF object. 
Name: _bfd_ecoff_mkobject_hook; Comment: This is a hook called by coff_real_object_p to create any backend specific information. 
Name: _bfd_ecoff_new_section_hook; Comment: Initialize a new section. 
Name: _bfd_ecoff_set_arch_mach_hook; Comment: Determine the machine architecture and type. This is called from the generic COFF routines. It is the inverse of ecoff_get_magic, below. This could be an ECOFF backend routine, with one version for each target, but there aren't all that many ECOFF targets. 
Name: ecoff_get_magic; Comment: Get the magic number to use based on the architecture and machine. This is the inverse of _bfd_ecoff_set_arch_mach_hook, above. 
Name: ecoff_sec_to_styp_flags; Comment: Get the section s_flags to use for a section. 
Name: _bfd_ecoff_styp_to_sec_flags; Comment: Get the BFD flags to use for a section. 
Name: ecoff_slurp_symbolic_header; Comment: Read in the symbolic header for an ECOFF object file. 
Name: _bfd_ecoff_slurp_symbolic_info; Comment: Read in and swap the important symbolic information for an ECOFF object file. This is called by gdb via the read_debug_info entry point in the backend structure. 
Name: _bfd_ecoff_make_empty_symbol; Comment: Create an empty symbol. 
Name: ecoff_set_symbol_info; Comment: Set the BFD flags and section for an ECOFF symbol. 
Name: _bfd_ecoff_slurp_symbol_table; Comment: Read an ECOFF symbol table. 
Name: _bfd_ecoff_get_symtab_upper_bound; Comment: Return the amount of space needed for the canonical symbols. 
Name: _bfd_ecoff_canonicalize_symtab; Comment: Get the canonical symbols. 
Name: ecoff_emit_aggregate; Comment: Write aggregate information to a string. 
Name: ecoff_type_to_string; Comment: Convert the type information to string format. 
Name: _bfd_ecoff_get_symbol_info; Comment: Return information about ECOFF symbol SYMBOL in RET. 
Name: _bfd_ecoff_bfd_is_local_label_name; Comment: Return whether this is a local label. 
Name: _bfd_ecoff_print_symbol; Comment: Print information about an ECOFF symbol. 
Name: ecoff_slurp_reloc_table; Comment: Read in the relocs for a section. 
Name: _bfd_ecoff_canonicalize_reloc; Comment: Get a canonical list of relocs. 
Name: _bfd_ecoff_find_nearest_line; Comment: Provided a BFD, a section and an offset into the section, calculate and return the name of the source file and the line nearest to the wanted location. 
Name: _bfd_ecoff_bfd_copy_private_bfd_data; Comment: Copy private BFD data. This is called by objcopy and strip. We use it to copy the ECOFF debugging information from one BFD to the other. It would be theoretically possible to represent the ECOFF debugging information in the symbol table. However, it would be a lot of work, and there would be little gain (gas, gdb, and ld already access the ECOFF debugging information via the ecoff_debug_info structure, and that structure would have to be retained in order to support ECOFF debugging in MIPS ELF). The debugging information for the ECOFF external symbols comes from the symbol table, so this function only handles the other debugging information. 
Name: _bfd_ecoff_set_arch_mach; Comment: Set the architecture. The supported architecture is stored in the backend pointer. We always set the architecture anyhow, since many callers ignore the return value. 
Name: _bfd_ecoff_sizeof_headers; Comment: Get the size of the section headers. 
Name: _bfd_ecoff_get_section_contents; Comment: Get the contents of a section. 
Name: ecoff_sort_hdrs; Comment: Sort sections by VMA, but put SEC_ALLOC sections first. This is called via qsort. 
Name: ecoff_compute_section_file_positions; Comment: Calculate the file position for each section, and set reloc_filepos. 
Name: ecoff_compute_reloc_file_positions; Comment: Determine the location of the relocs for all the sections in the output file, as well as the location of the symbolic debugging information. 
Name: _bfd_ecoff_set_section_contents; Comment: Set the contents of a section. 
Name: bfd_ecoff_set_gp_value; Comment: Set the GP value for an ECOFF file. This is a hook used by the assembler. 
Name: bfd_ecoff_set_regmasks; Comment: Set the register masks for an ECOFF file. This is a hook used by the assembler. 
Name: ecoff_get_extr; Comment: Get ECOFF EXTR information for an external symbol. This function is passed to bfd_ecoff_debug_externals. 
Name: ecoff_set_index; Comment: Set the external symbol index. This routine is passed to bfd_ecoff_debug_externals. 
Name: _bfd_ecoff_write_object_contents; Comment: Write out an ECOFF file. 
Name: ecoff_armap_hash; Comment: This returns the hash value to use for a string. It also sets *REHASH to the rehash adjustment if the first slot is taken. SIZE is the number of entries in the hash table, and HLOG is the log base 2 of SIZE. 
Name: _bfd_ecoff_slurp_armap; Comment: Read in the armap. 
Name: _bfd_ecoff_write_armap; Comment: Write out an armap. 
Name: ecoff_link_hash_newfunc; Comment: Routine to create an entry in an ECOFF link hash table. 
Name: _bfd_ecoff_bfd_link_hash_table_create; Comment: Create an ECOFF link hash table. 
Name: ecoff_link_add_externals; Comment: Add the external symbols of an object file to the global linker hash table. The external symbols and strings we are passed are just allocated on the stack, and will be discarded. We must explicitly save any information we may need later on in the link. We do not want to read the external symbol information again. 
Name: ecoff_link_add_object_symbols; Comment: Add symbols from an ECOFF object file to the global linker hash table. 
Name: ecoff_link_check_archive_element; Comment: This is called if we used _bfd_generic_link_add_archive_symbols because we were not dealing with an ECOFF archive. 
Name: ecoff_link_add_archive_symbols; Comment: Add the symbols from an archive file to the global hash table. This looks through the undefined symbols, looks each one up in the archive hash table, and adds any associated object file. We do not use _bfd_generic_link_add_archive_symbols because ECOFF archives already have a hash table, so there is no reason to construct another one. 
Name: _bfd_ecoff_bfd_link_add_symbols; Comment: Given an ECOFF BFD, add symbols to the global hash table as appropriate. 
Name: ecoff_final_link_debug_accumulate; Comment: Accumulate the debugging information for an input BFD into the output BFD. This must read in the symbolic information of the input BFD. 
Name: ecoff_indirect_link_order; Comment: Relocate and write an ECOFF section into an ECOFF output file. 
Name: ecoff_reloc_link_order; Comment: Generate a reloc when linking an ECOFF file. This is a reloc requested by the linker, and does come from any input file. This is used to build constructor and destructor tables when linking with -Ur. 
Name: ecoff_link_write_external; Comment: Put out information for an external symbol. These come only from the hash table. 
Name: _bfd_ecoff_bfd_final_link; Comment: ECOFF final link routine. This looks through all the input BFDs and gathers together all the debugging information, and then processes all the link order information. This may cause it to close and reopen some input BFDs; I'll see how bad this is. 
Name: _bfd_ecoff_swap_tir_in; Comment: Swap in a type information record. BIGEND says whether AUX symbols are big-endian or little-endian; this info comes from the file header record (fh-fBigendian). 
Name: _bfd_ecoff_swap_tir_out; Comment: Swap out a type information record. BIGEND says whether AUX symbols are big-endian or little-endian; this info comes from the file header record (fh-fBigendian). 
Name: _bfd_ecoff_swap_rndx_in; Comment: Swap in a relative symbol record. BIGEND says whether it is in big-endian or little-endian format.
Name: _bfd_ecoff_swap_rndx_out; Comment: Swap out a relative symbol record. BIGEND says whether it is in big-endian or little-endian format.
Name: ecoff_add_bytes; Comment: Add bytes to a buffer. Return success. 
Name: string_hash_newfunc; Comment: Routine to create an entry in a string hash table. 
Name: add_file_shuffle; Comment: Add a file entry to a shuffle list. 
Name: add_memory_shuffle; Comment: Add a memory entry to a shuffle list. 
Name: bfd_ecoff_debug_init; Comment: Initialize the FDR hash table. This returns a handle which is then passed in to bfd_ecoff_debug_accumulate, et. al. 
Name: bfd_ecoff_debug_free; Comment: Free the accumulated debugging information. 
Name: bfd_ecoff_debug_accumulate; Comment: Accumulate the debugging information from INPUT_BFD into OUTPUT_BFD. The INPUT_DEBUG argument points to some ECOFF debugging information which we want to link into the information pointed to by the OUTPUT_DEBUG argument. OUTPUT_SWAP and INPUT_SWAP point to the swapping information needed. INFO is the linker information structure. HANDLE is returned by bfd_ecoff_debug_init. 
Name: ecoff_add_string; Comment: Add a string to the debugging information we are accumulating. Return the offset from the fdr string base. 
Name: bfd_ecoff_debug_accumulate_other; Comment: Add debugging information from a non-ECOFF file. 
Name: bfd_ecoff_debug_externals; Comment: Set up ECOFF debugging information for the external symbols. FIXME: This is done using a memory buffer, but it should be probably be changed to use a shuffle structure. The assembler uses this interface, so that must be changed to do something else. 
Name: bfd_ecoff_debug_one_external; Comment: Add a single external symbol to the debugging information. 
Name: ecoff_align_debug; Comment: Align the ECOFF debugging information. 
Name: bfd_ecoff_debug_size; Comment: Return the size required by the ECOFF debugging information. 
Name: ecoff_write_symhdr; Comment: Write out the ECOFF symbolic header, given the file position it is going to be placed at. This assumes that the counts are set correctly. 
Name: bfd_ecoff_write_debug; Comment: Write out the ECOFF debugging information. This function assumes that the information (the pointers and counts) in *DEBUG have been set correctly. WHERE is the position in the file to write the information to. This function fills in the file offsets in the symbolic header. 
Name: ecoff_write_shuffle; Comment: Write out a shuffle list. 
Name: bfd_ecoff_write_accumulated_debug; Comment: Write out debugging information using accumulated linker information. 
Name: cmp_fdrtab_entry; Comment: Compare FDR entries. This is called via qsort. 
Name: mk_fdrtab; Comment: Each file descriptor (FDR) has a memory address, to simplify looking up an FDR by address, we build a table covering all FDRs that have a least one procedure descriptor in them. The final table will be sorted by address so we can look it up via binary search. 
Name: fdrtab_lookup; Comment: Return index of first FDR that covers to OFFSET. 
Name: lookup_line; Comment: Look up a line given an address, storing the information in LINE_INFO->cache. 
Name: _bfd_ecoff_locate_line; Comment: Do the work of find_nearest_line. 
Name: ecoff_collect_shuffle; Comment: Collect a shuffle into a memory buffer. 
Name: _bfd_ecoff_get_accumulated_pdr; Comment: Copy PDR information into a memory buffer. 
Name: _bfd_ecoff_get_accumulated_sym; Comment: Copy symbol information into a memory buffer. 
Name: _bfd_ecoff_get_accumulated_ss; Comment: Copy the string table into a memory buffer. 
Name: uleb128_size; Comment: Return the number of bytes needed by I in uleb128 format. 
Name: is_default_attr; Comment: Return TRUE if the attribute has the default value (0/""). 
Name: obj_attr_size; Comment: Return the size of a single attribute. 
Name: vendor_obj_attr_name; Comment: Return the vendor name for a given object attributes section. 
Name: vendor_obj_attr_size; Comment: Return the size of the object attributes section for VENDOR (OBJ_ATTR_PROC or OBJ_ATTR_GNU), or 0 if there are no attributes for that vendor to record and the vendor is OBJ_ATTR_GNU. 
Name: bfd_elf_obj_attr_size; Comment: Return the size of the object attributes section. 
Name: write_uleb128; Comment: Write VAL in uleb128 format to P, returning a pointer to the following byte. 
Name: write_obj_attribute; Comment: Write attribute ATTR to butter P, and return a pointer to the following byte. 
Name: vendor_set_obj_attr_contents; Comment: Write the contents of the object attributes section (length SIZE) for VENDOR to CONTENTS. 
Name: bfd_elf_set_obj_attr_contents; Comment: Write the contents of the object attributes section to CONTENTS. 
Name: elf_new_obj_attr; Comment: Allocate/find an object attribute. 
Name: bfd_elf_get_obj_attr_int; Comment: Return the value of an integer object attribute. 
Name: bfd_elf_add_obj_attr_int; Comment: Add an integer object attribute. 
Name: elf_attr_strdup; Comment: Duplicate an object attribute string value. 
Name: elf_add_obj_attr_string; Comment: Add a string object attribute. 
Name: elf_add_obj_attr_int_string; Comment: Add a int+string object attribute. 
Name: _bfd_elf_copy_obj_attributes; Comment: Copy the object attributes from IBFD to OBFD. 
Name: gnu_obj_attrs_arg_type; Comment: Determine whether a GNU object attribute tag takes an integer, a string or both. 
Name: _bfd_elf_obj_attrs_arg_type; Comment: Determine what arguments an attribute tag takes. 
Name: _bfd_elf_parse_attributes; Comment: Parse an object attributes section. 
Name: _bfd_elf_merge_object_attributes; Comment: Merge common object attributes from IBFD into OBFD. Raise an error if there are conflicting attributes. Any processor-specific attributes have already been merged. This must be called from the bfd_elfNN_bfd_merge_private_bfd_data hook for each individual target, along with any target-specific merging. Because there are no common attributes other than Tag_compatibility at present, and non-"gnu" Tag_compatibility is not expected in "gnu" sections, this is not presently called for targets without their own attributes. 
Name: _bfd_elf_merge_unknown_attribute_low; Comment: Merge an unknown processor-specific attribute TAG, within the range of known attributes, from IBFD into OBFD; return TRUE if the link is OK, FALSE if it must fail. 
Name: _bfd_elf_merge_unknown_attribute_list; Comment: Merge the lists of unknown processor-specific attributes, outside the known range, from IBFD into OBFD; return TRUE if the link is OK, FALSE if it must fail. 
Name: skip_leb128; Comment: Move *ITER over an leb128, stopping at END. Return true if the end of the leb128 was found. 
Name: read_uleb128; Comment: Like skip_leb128, but treat the leb128 as an unsigned value and store it in *VALUE. 
Name: read_sleb128; Comment: Like read_uleb128, but for signed values. 
Name: get_DW_EH_PE_width; Comment: Return 0 if either encoding is variable width, or not yet known to bfd. 
Name: read_value; Comment: Read a width sized value from memory. 
Name: write_value; Comment: Store a width sized value to memory. 
Name: cie_eq; Comment: Return one if C1 and C2 CIEs can be merged. 
Name: size_of_output_cie_fde; Comment: Return the size that ENTRY will have in the output. 
Name: next_cie_fde_offset; Comment: Return the offset of the FDE or CIE after ENT. 
Name: skip_cfa_op; Comment: Assume that the bytes between *ITER and END are CFA instructions. Try to move *ITER past the first instruction and return true on success. ENCODED_PTR_WIDTH gives the width of pointer entries. 
Name: skip_non_nops; Comment: Try to interpret the bytes between BUF and END as CFA instructions. If every byte makes sense, return a pointer to the first DW_CFA_nop padding byte, or END if there is no padding. Return null otherwise. ENCODED_PTR_WIDTH is as for skip_cfa_op. 
Name: make_pc_relative; Comment: Convert absolute encoding ENCODING into PC-relative form. SIZE is the size of a pointer. 
Name: bfd_elf_discard_eh_frame_entry; Comment: Examine each .eh_frame_entry section and discard those those that are marked SEC_EXCLUDE. 
Name: bfd_elf_record_eh_frame_entry; Comment: Add a .eh_frame_entry section. 
Name: _bfd_elf_parse_eh_frame_entry; Comment: Parse a .eh_frame_entry section. Figure out which text section it references. 
Name: _bfd_elf_parse_eh_frame; Comment: Try to parse .eh_frame section SEC, which belongs to ABFD. Store the information in the section's sec_info field on success. COOKIE describes the relocations in SEC. 
Name: cmp_eh_frame_hdr; Comment: Order eh_frame_hdr entries by the VMA of their text section. 
Name: add_eh_frame_hdr_terminator; Comment: Add space for a CANTUNWIND terminator to SEC if the text sections referenced by it and NEXT are not contiguous, or NEXT is NULL. 
Name: _bfd_elf_end_eh_frame_parsing; Comment: Finish a pass over all .eh_frame_entry sections. 
Name: mark_entry; Comment: None its "rel" field can be changed freely. 
Name: _bfd_elf_gc_mark_fdes; Comment: Mark all the relocations against FDEs that relate to code in input section SEC. The FDEs belong to .eh_frame section EH_FRAME, whose relocations are described by COOKIE. 
Name: find_merged_cie; Comment: Input section SEC of ABFD is an .eh_frame section that contains the CIE described by CIE_INF. Return a version of CIE_INF that is going to be kept in the output, adding CIE_INF to the output if necessary. HDR_INFO is the .eh_frame_hdr information and COOKIE describes the relocations in REL. 
Name: offset_adjust; Comment: For a given OFFSET in SEC, return the delta to the new location after .eh_frame editing. 
Name: _bfd_elf_adjust_eh_frame_global_symbol; Comment: Adjust a global symbol defined in .eh_frame, so that it stays relative to its original CIE/FDE. It is assumed that a symbol defined at the beginning of a CIE/FDE belongs to that CIE/FDE rather than marking the end of the previous CIE/FDE. This matters when a CIE is merged with a previous CIE, since the symbol is moved to the merged CIE. 
Name: adjust_eh_frame_local_symbols; Comment: The same for all local symbols defined in .eh_frame. Returns true if any symbol was changed. 
Name: ; Comment: This function is called for each input file before the .eh_frame section is relocated. It discards duplicate CIEs and FDEs for discarded functions. The function returns TRUE iff any entries have been deleted. 
Name: _bfd_elf_discard_section_eh_frame_hdr; Comment: This function is called for .eh_frame_hdr section after _bfd_elf_discard_section_eh_frame has been called on all .eh_frame input sections. It finalizes the size of .eh_frame_hdr section. 
Name: _bfd_elf_eh_frame_present; Comment: Return true if there is at least one non-empty .eh_frame section in input files. Can only be called after ld has mapped input to output sections, and before sections are stripped. 
Name: _bfd_elf_eh_frame_entry_present; Comment: Return true if there is at least one .eh_frame_entry section in input files. 
Name: _bfd_elf_maybe_strip_eh_frame_hdr; Comment: This function is called from size_dynamic_sections. It needs to decide whether .eh_frame_hdr should be output or not, because when the dynamic symbol table has been sized it is too late to strip sections. 
Name: _bfd_elf_eh_frame_section_offset; Comment: Adjust an address in the .eh_frame section. Given OFFSET within SEC, this returns the new offset in the adjusted .eh_frame section, or -1 if the address refers to a CIE/FDE which has been removed or to offset with dynamic relocation which is no longer needed. 
Name: _bfd_elf_write_section_eh_frame_entry; Comment: Write out .eh_frame_entry section. Add CANTUNWIND terminator if needed. Also check that the contents look sane. 
Name: _bfd_elf_write_section_eh_frame; Comment: Write out .eh_frame section. This is called with the relocated contents. 
Name: vma_compare; Comment: Helper function used to sort .eh_frame_hdr search table by increasing VMA of FDE initial location. 
Name: _bfd_elf_fixup_eh_frame_hdr; Comment: Reorder .eh_frame_entry sections to match the associated text sections. This routine is called during the final linking step, just before writing the contents. At this stage, sections in the eh_frame_hdr_info are already sorted in order of increasing text section address and so we simply need to make the .eh_frame_entrys follow that same order. Note that it is invalid for a linker script to try to force a particular order of .eh_frame_entry sections. 
Name: write_compact_eh_frame_hdr; Comment: The .eh_frame_hdr format for Compact EH frames: ubyte version__(2) ubyte eh_ref_enc__(DW_EH_PE_* encoding of typinfo references) uint32_t count__(Number of entries in table) [array from .eh_frame_entry sections] 
Name: write_dwarf_eh_frame_hdr; Comment: The .eh_frame_hdr format for DWARF frames: ubyte version__(currently 1) ubyte eh_frame_ptr_enc_(DW_EH_PE_* encoding of pointer to start of ____ .eh_frame section) ubyte fde_count_enc__(DW_EH_PE_* encoding of total FDE count ____ number (or DW_EH_PE_omit if there is no ____ binary search table computed)) ubyte table_enc__(DW_EH_PE_* encoding of binary search table, ____ or DW_EH_PE_omit if not present. ____ DW_EH_PE_datarel is using address of ____ .eh_frame_hdr section start as base) [encoded] eh_frame_ptr_(pointer to start of .eh_frame section) optionally followed by: [encoded] fde_count__(total number of FDEs in .eh_frame section) fde_count x [encoded] initial_loc, fde ____(array of encoded pairs containing ____ FDE initial_location field and FDE address, ____ sorted by increasing initial_loc). 
Name: _bfd_elf_write_section_eh_frame_hdr; Comment: Write out .eh_frame_hdr section. This must be called after _bfd_elf_write_section_eh_frame has been called on all input .eh_frame sections. 
Name: _bfd_elf_eh_frame_address_size; Comment: Return the width of FDE addresses. This is the default implementation. 
Name: _bfd_elf_can_make_relative; Comment: Decide whether we can use a PC-relative encoding within the given EH frame section. This is the default implementation. 
Name: _bfd_elf_encode_eh_address; Comment: Select an encoding for the given address. Preference is given to PC-relative addressing modes. 
Name: _bfd_elf_create_ifunc_sections; Comment: Create sections needed by STT_GNU_IFUNC symbol. 
Name: _bfd_elf_allocate_ifunc_dyn_relocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs against a STT_GNU_IFUNC symbol definition. 
Name: mn10200_info_to_howto; Comment: Set the howto pointer for an MN10200 ELF reloc. 
Name: mn10200_elf_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: mn10200_elf_relocate_section; Comment: Relocate an MN10200 ELF section. 
Name: mn10200_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: mn10200_elf_relax_section; Comment: This function handles relaxing for the mn10200. There are quite a few relaxing opportunities available on the mn10200: _* jsr:24 -> jsr:16_____ 2 bytes _* jmp:24 -> jmp:16_____ 2 bytes _* jmp:16 -> bra:8_____ 1 byte __* If the previous instruction is a conditional branch __around the jump/bra, we may be able to reverse its condition __and change its target to the jump's target. The jump/bra __can then be deleted.____ 2 bytes _* mov abs24 -> mov abs16_2 byte savings _* Most instructions which accept imm24 can relax to imm16 2 bytes _- Most instructions which accept imm16 can relax to imm8 1 byte _* Most instructions which accept d24 can relax to d16_ 2 bytes _- Most instructions which accept d16 can relax to d8_ 1 byte _abs24, imm24, d24 all look the same at the reloc level. It _might make the code simpler if we had different relocs for _the various relaxable operand types. _We don't handle imm16->imm8 or d16->d8 as they're very rare _and somewhat more difficult to support. 
Name: mn10200_elf_symbol_address_p; Comment: Return TRUE if a symbol exists at the given address, else return FALSE. 
Name: mn10200_elf_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses mn10200_elf_relocate_section. 
Name: _bfd_mn10300_elf_create_got_section; Comment: Create the GOT section. 
Name: mn10300_info_to_howto; Comment: Set the howto pointer for an MN10300 ELF reloc. 
Name: dtpoff; Comment: Return the relocation value for @tpoff relocation if STT_TLS virtual address is ADDRESS. 
Name: tpoff; Comment: Return the relocation value for @tpoff relocation if STT_TLS virtual address is ADDRESS. 
Name: mn10300_do_tls_transition; Comment: Returns nonzero if there's a R_MN10300_PLT32 reloc that we now need to skip, after this one. The actual value is the offset between this reloc and the PLT reloc. 
Name: mn10300_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: mn10300_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: mn10300_elf_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: mn10300_elf_relocate_section; Comment: Relocate an MN10300 ELF section. 
Name: elf32_mn10300_finish_hash_table_entry; Comment: Finish initializing one hash table entry. 
Name: elf32_mn10300_count_hash_table_entries; Comment: Used to count hash table entries. 
Name: elf32_mn10300_list_hash_table_entries; Comment: Used to enumerate hash table entries into a linear array. 
Name: sort_by_value; Comment: Used to sort the array created by the above. 
Name: compute_function_info; Comment: Compute the stack size and movm arguments for the function referred to by HASH at address ADDR in section with contents CONTENTS, store the information in the hash table. 
Name: mn10300_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: mn10300_elf_symbol_address_p; Comment: Return TRUE if a symbol exists at the given address, else return FALSE. 
Name: mn10300_elf_relax_section; Comment: This function handles relaxing for the mn10300. There are quite a few relaxing opportunities available on the mn10300: _* calls:32 -> calls:16_____ 2 bytes _* call:32 -> call:16_____ 2 bytes _* call:32 -> calls:32_____ 1 byte _* call:16 -> calls:16_____ 1 byte __* These are done anytime using "calls" would result __in smaller code, or when necessary to preserve the __meaning of the program. _* call:32______ varies _* call:16 __* In some circumstances we can move instructions __from a function prologue into a "call" instruction. __This is only done if the resulting code is no larger __than the original code. _* jmp:32 -> jmp:16_____ 2 bytes _* jmp:16 -> bra:8_____ 1 byte __* If the previous instruction is a conditional branch __around the jump/bra, we may be able to reverse its condition __and change its target to the jump's target. The jump/bra __can then be deleted.____ 2 bytes _* mov abs32 -> mov abs16____ 1 or 2 bytes _* Most instructions which accept imm32 can relax to imm16 1 or 2 bytes _- Most instructions which accept imm16 can relax to imm8 1 or 2 bytes _* Most instructions which accept d32 can relax to d16_ 1 or 2 bytes _- Most instructions which accept d16 can relax to d8_ 1 or 2 bytes _We don't handle imm16->imm8 or d16->d8 as they're very rare _and somewhat more difficult to support. 
Name: mn10300_elf_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses mn10300_elf_relocate_section. 
Name: elf32_mn10300_link_hash_newfunc; Comment: Create an entry in an MN10300 ELF linker hash table. 
Name: elf32_mn10300_link_hash_table_free; Comment: Destroy an mn10300 ELF linker hash table. 
Name: elf32_mn10300_link_hash_table_create; Comment: Create an mn10300 ELF linker hash table. 
Name: _bfd_mn10300_elf_final_write_processing; Comment: The final processing done just before writing out a MN10300 ELF object file. This gets the MN10300 architecture right based on the machine number. 
Name: _bfd_mn10300_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: _bfd_mn10300_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: _bfd_mn10300_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: _bfd_mn10300_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: _bfd_mn10300_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: _bfd_mn10300_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: _bfd_mn10300_elf_reloc_type_class; Comment: Classify relocation types, such that combreloc can sort them properly. 
Name: mn10300_elf_mkobject; Comment: Allocate space for an MN10300 extension to the bfd elf data structure. 
Name: segment_eligible_for_headers; Comment: Determine if this segment is eligible to receive the file and program headers. It must be read-only and non-executable. Its first section must start far enough past the page boundary to allow space for the headers. 
Name: nacl_modify_segment_map; Comment: We permute the segment_map to get BFD to do the file layout we want: The first non-executable PT_LOAD segment appears first in the file and contains the ELF file header and phdrs. 
Name: nacl_modify_headers; Comment: After nacl_modify_segment_map has done its work, the file layout has been done as we wanted. But the PT_LOAD phdrs are no longer in the proper order for the ELF rule that they must appear in ascending address order. So find the two segments we swapped before, and swap them back. 
Name: _bfd_elf_get_property; Comment: Get a property, allocate a new one if needed. 
Name: _bfd_elf_parse_gnu_properties; Comment: Parse GNU properties. 
Name: elf_merge_gnu_properties; Comment: Merge GNU property BPROP with APROP. If APROP isn't NULL, return TRUE if APROP is updated. Otherwise, return TRUE if BPROP should be merged with ABFD. 
Name: elf_find_and_remove_property; Comment: Return the property of TYPE on *LISTP and remove it from *LISTP if RM is true. Return NULL if not found. 
Name: elf_merge_gnu_property_list; Comment: Merge GNU property list *LISTP in ABFD with FIRST_PBFD. 
Name: elf_get_gnu_property_section_size; Comment: Get GNU property section size. 
Name: elf_write_gnu_properties; Comment: Write GNU properties. 
Name: _bfd_elf_link_setup_gnu_properties; Comment: Set up GNU properties. Return the first relocatable ELF input with GNU properties if found. Otherwise, return NULL. 
Name: _bfd_elf_convert_gnu_property_size; Comment: Convert GNU property size. 
Name: _bfd_elf_convert_gnu_properties; Comment: Convert GNU properties. 
Name: s390_elf_create_ifunc_sections; Comment: Create sections needed by STT_GNU_IFUNC symbol. 
Name: s390_elf_allocate_ifunc_dyn_relocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs against a STT_GNU_IFUNC symbol definition. 
Name: elf_s390_elf_sort_relocs_p; Comment: Whether to sort relocs output by ld -r or ld --emit-relocs, by r_offset. Don't do so for code sections. We want to keep ordering of GDCALL / PLT32DBL for TLS optimizations as is. On the other hand, elf-eh-frame.c processing requires .eh_frame relocs to be sorted. 
Name: elf_s390_merge_obj_attributes; Comment: Merge object attributes from IBFD into OBFD. Raise an error if there are conflicting attributes. 
Name: sframe_decoder_func_deleted_p; Comment: Return TRUE if the function has been marked for deletion during the linking process. 
Name: sframe_decoder_mark_func_deleted; Comment: Mark the function in the decoder info for deletion. 
Name: sframe_decoder_get_func_r_offset; Comment: Get the relocation offset from the decoder info for the given function. 
Name: sframe_decoder_set_func_r_offset; Comment: Bookkeep the function relocation offset in the decoder info. 
Name: sframe_decoder_get_func_reloc_index; Comment: Get the relocation index in the elf_reloc_cookie for the function. 
Name: sframe_decoder_set_func_reloc_index; Comment: Bookkeep the relocation index in the elf_reloc_cookie for the function. 
Name: sframe_decoder_init_func_bfdinfo; Comment: Initialize the set of additional information in CFD_INFO, needed for linking SEC. Returns TRUE if setup is done successfully. 
Name: sframe_read_value; Comment: Read the value from CONTENTS at the specified OFFSET for the given ABFD. 
Name: _bfd_elf_sframe_present; Comment: Return true if there is at least one non-empty .sframe section in input files. Can only be called after ld has mapped input to output sections, and before sections are stripped. 
Name: _bfd_elf_parse_sframe; Comment: Try to parse .sframe section SEC, which belongs to ABFD. Store the information in the section's sec_info field on success. COOKIE describes the relocations in SEC. Returns TRUE if success, FALSE if any error or failure. 
Name: ; Comment: This function is called for each input file before the .sframe section is relocated. It marks the SFrame FDE for the discarded functions for deletion. The function returns TRUE iff any entries have been deleted. 
Name: _bfd_elf_set_section_sframe; Comment: Update the reference to the output .sframe section in the output ELF BFD ABFD. Returns true if no error. 
Name: _bfd_elf_merge_section_sframe; Comment: Merge .sframe section SEC. This is called with the relocated CONTENTS. 
Name: _bfd_elf_write_section_sframe; Comment: Write out the .sframe section. This must be called after _bfd_elf_merge_section_sframe has been called on all input .sframe sections. 
Name: elf_strtab_hash_newfunc; Comment: Routine to create an entry in a section merge hashtab. 
Name: _bfd_elf_strtab_init; Comment: Create a new hash table. 
Name: _bfd_elf_strtab_free; Comment: Free a strtab. 
Name: _bfd_elf_strtab_add; Comment: Get the index of an entity in a hash table, adding it if it is not already present. 
Name: _bfd_elf_strtab_restore; Comment: Restore strtab refcounts on finding --as-needed library not needed. 
Name: strrevcmp; Comment: Compare two elf_strtab_hash_entry structures. Called via qsort. Won't ever return zero as all entries differ, so there is no issue with qsort stability here. 
Name: _bfd_elf_strtab_finalize; Comment: This function assigns final string table offsets for used strings, merging strings matching suffixes of longer strings if possible. 
Name: elf_vxworks_gott_symbol_p; Comment: Return true if symbol NAME, as defined by ABFD, is one of the special __GOTT_BASE__ or __GOTT_INDEX__ symbols. 
Name: elf_vxworks_add_symbol_hook; Comment: Tweak magic VxWorks symbols as they are loaded. 
Name: elf_vxworks_create_dynamic_sections; Comment: Perform VxWorks-specific handling of the create_dynamic_sections hook. When creating an executable, set *SRELPLT2_OUT to the .rel(a).plt.unloaded section. 
Name: elf_vxworks_link_output_symbol_hook; Comment: Tweak magic VxWorks symbols as they are written to the output file. 
Name: elf_vxworks_emit_relocs; Comment: Copy relocations into the output file. Fixes up relocations against PLT entries, then calls the generic routine. 
Name: elf_vxworks_final_write_processing; Comment: Set the sh_link and sh_info fields on the static plt relocation secton. 
Name: elf_vxworks_add_dynamic_entries; Comment: Add the dynamic entries required by VxWorks. These point to the tls sections. 
Name: elf_vxworks_finish_dynamic_entry; Comment: If *DYN is one of the VxWorks-specific dynamic entries, then fill in the value now and return TRUE. Otherwise return FALSE. 
Name: _bfd_elf_maybe_vxworks_add_dynamic_tags; Comment: Add dynamic tags. 
Name: _bfd_elf_swap_verdef_in; Comment: Swap in a Verdef structure. 
Name: _bfd_elf_swap_verdef_out; Comment: Swap out a Verdef structure. 
Name: _bfd_elf_swap_verdaux_in; Comment: Swap in a Verdaux structure. 
Name: _bfd_elf_swap_verdaux_out; Comment: Swap out a Verdaux structure. 
Name: _bfd_elf_swap_verneed_in; Comment: Swap in a Verneed structure. 
Name: _bfd_elf_swap_verneed_out; Comment: Swap out a Verneed structure. 
Name: _bfd_elf_swap_vernaux_in; Comment: Swap in a Vernaux structure. 
Name: _bfd_elf_swap_vernaux_out; Comment: Swap out a Vernaux structure. 
Name: _bfd_elf_swap_versym_in; Comment: Swap in a Versym structure. 
Name: _bfd_elf_swap_versym_out; Comment: Swap out a Versym structure. 
Name: bfd_elf_hash; Comment: Standard ELF hash function. Do not change this function; you will cause invalid hash tables to be generated. 
Name: bfd_elf_gnu_hash; Comment: DT_GNU_HASH hash function. Do not change this function; you will cause invalid hash tables to be generated. 
Name: bfd_elf_allocate_object; Comment: Create a tdata field OBJECT_SIZE bytes in length, zeroed out and with the object_id field of an elf_obj_tdata field set to OBJECT_ID. 
Name: bfd_elf_get_elf_syms; Comment: Read and convert symbols to internal format. SYMCOUNT specifies the number of symbols to read, starting from symbol SYMOFFSET. If any of INTSYM_BUF, EXTSYM_BUF or EXTSHNDX_BUF are non-NULL, they are used to store the internal symbols, external symbols, and symbol section index extensions, respectively. Returns a pointer to the internal symbol buffer (malloced if necessary) or NULL if there were no symbols or some kind of problem. 
Name: bfd_elf_sym_name; Comment: Look up a symbol name. 
Name: group_signature; Comment: Return the name of the group signature symbol. Why isn't the signature just a string? 
Name: setup_group; Comment: Set next_in_group list pointer, and group name for NEWSECT. 
Name: _bfd_elf_make_section_from_shdr; Comment: Make a BFD section from an ELF section. We store a pointer to the BFD section in the bfd_section field of the header. 
Name: bfd_elf_generic_reloc; Comment: ELF relocs are against symbols. If we are producing relocatable output, and the reloc is against an external symbol, and nothing has given us any additional addend, the resulting reloc will also be against the same symbol. In such a case, we don't want to change anything about the way the reloc is handled, since it will all be done at final link time. Rather than put special case code into bfd_perform_relocation, all the reloc types use this howto function, or should call this function for relocatable output. 
Name: section_match; Comment: Returns TRUE if section A matches section B. Names, addresses and links may be different, but everything else should be the same. 
Name: find_link; Comment: Find a section in OBFD that has the same characteristics as IHEADER. Return the index of this section or SHN_UNDEF if none can be found. Check's section HINT first, as this is likely to be the correct section. 
Name: copy_special_section_fields; Comment: PR 19938: Attempt to set the ELF section header fields of an OS or Processor specific section, based upon a matching input section. Returns TRUE upon success, FALSE otherwise. 
Name: _bfd_elf_copy_private_bfd_data; Comment: Copy the program header and other data from one object module to another. 
Name: _bfd_elf_print_private_bfd_data; Comment: Print out the program headers. 
Name: _bfd_elf_get_symbol_version_string; Comment: Get version name. If BASE_P is TRUE, return "Base" for VER_FLG_BASE and return symbol version for symbol version itself. 
Name: bfd_elf_print_symbol; Comment: Display ELF-specific fields of a symbol. 
Name: bfd_section_from_shdr; Comment: Create a new bfd section from an ELF section header. 
Name: bfd_sym_from_r_symndx; Comment: Return the local symbol specified by ABFD, R_SYMNDX. 
Name: bfd_section_from_elf_index; Comment: Given an ELF section number, retrieve the corresponding BFD section. 
Name: _bfd_elf_make_section_from_phdr; Comment: Create a new bfd section from an ELF program header. Since program segments have no names, we generate a synthetic name of the form segment<NUM>, where NUM is generally the index in the program header table. For segments that are split (see below) we generate the names segment<NUM>a and segment<NUM>b. Note that some program segments may have a file size that is different than (less than) the memory size. All this means is that at execution the system must allocate the amount of memory specified by the memory size, but only initialize it with the first "file size" bytes read from the file. This would occur for example, with program segments consisting of combined data+bss. To handle the above situation, this routine generates TWO bfd sections for the single program segment. The first has the length specified by the file size of the segment, and the second has the length specified by the difference between the two sizes. In effect, the segment is split into its initialized and uninitialized parts. 
Name: _bfd_elf_single_rel_hdr; Comment: Return the REL_HDR for SEC, assuming there is only a single one, either REL or RELA. 
Name: _bfd_elf_init_reloc_shdr; Comment: Allocate and initialize a section-header for a new reloc section, containing relocations against ASECT. It is stored in RELDATA. If USE_RELA_P is TRUE, we use RELA relocations; otherwise, we use REL relocations. 
Name: bfd_elf_get_default_section_type; Comment: Return the default section type based on the passed in section flags. 
Name: elf_fake_sections; Comment: Set up an ELF internal section header for a section. 
Name: bfd_elf_set_group_contents; Comment: Fill in the contents of a SHT_GROUP section. Called from _bfd_elf_compute_section_file_positions for gas, objcopy, and when ELF targets use the generic linker, ld. Called for ld -r from bfd_elf_final_link. 
Name: _bfd_elf_plt_get_reloc_section; Comment: Given NAME, the name of a relocation section stripped of its .rel/.rela prefix, return the section in ABFD to which the relocations apply. 
Name: elf_get_reloc_section; Comment: Return the section to which RELOC_SEC applies. 
Name: assign_section_numbers; Comment: Assign all ELF section numbers. The dummy first section is handled here too. The link/info pointers for the standard section types are filled in here too, while we're at it. LINK_INFO will be 0 when arriving here for gas, objcopy, and when using the generic ELF linker. 
Name: _bfd_elf_filter_global_symbols; Comment: Filter global symbols of ABFD to include in the import library. All SYMCOUNT symbols of ABFD can be examined from their pointers in SYMS. Pointers of symbols to keep should be stored contiguously at the beginning of that array. Returns the number of symbols to keep. 
Name: ignore_section_sym; Comment: Don't output section symbols for sections that are not going to be output, that are duplicates or there is no BFD section. 
Name: elf_map_symbols; Comment: Map symbol from it's internal number to the external number, moving all local symbols to be at the head of the list. 
Name: _bfd_elf_assign_file_position_for_section; Comment: Assign a file position to a section, optionally aligning to the required section alignment. 
Name: _bfd_elf_compute_section_file_positions; Comment: Compute the file positions we are going to put the sections at, and otherwise prepare to begin writing out the ELF file. If LINK_INFO is not NULL, this is being called by the ELF backend linker. 
Name: elf_eh_frame_hdr; Comment: Retrieve .eh_frame_hdr. Prior to size_dynamic_sections the function effectively returns whether --eh-frame-hdr is given on the command line. After size_dynamic_sections the result reflects whether .eh_frame_hdr will actually be output (sizing isn't done until ldemul_after_allocation). 
Name: get_program_header_size; Comment: Make an initial estimate of the size of the program header. If we get the number wrong here, we'll redo section placement. 
Name: _bfd_elf_find_segment_containing_section; Comment: Find the segment that contains the output_section of section. 
Name: make_mapping; Comment: Create a mapping from a set of sections to a program segment. 
Name: _bfd_elf_make_dynamic_segment; Comment: Create the PT_DYNAMIC segment, which includes DYNSEC. Returns NULL on failure. 
Name: elf_modify_segment_map; Comment: Possibly add or remove segments from the segment map. 
Name: _bfd_elf_map_sections_to_segments; Comment: Set up a mapping from BFD sections to program segments. Update NEED_LAYOUT if the section layout is changed. 
Name: elf_sort_sections; Comment: Sort sections by address. 
Name: elf_sort_segments; Comment: This qsort comparison functions sorts PT_LOAD segments first and by p_paddr, for assign_file_positions_for_load_sections. 
Name: vma_page_aligned_bias; Comment: None which can be collapsed into the expression below. 
Name: assign_file_positions_for_load_sections; Comment: Assign file positions to the sections based on the mapping from sections to segments. This function also sets up some fields in the file header. 
Name: is_debuginfo_file; Comment: Determine if a bfd is a debuginfo file. Unfortunately there is no defined method for detecting such files, so we have to use heuristics instead. 
Name: assign_file_positions_for_non_load_sections; Comment: Assign file positions for other sections, except for compressed debug and sections assigned in _bfd_elf_assign_file_positions_for_non_load. 
Name: assign_file_positions_except_relocs; Comment: Work out the file positions of all the sections. This is called by _bfd_elf_compute_section_file_positions. All the section sizes and VMAs must be known before this is called. Reloc sections come in two flavours: Those processed specially as "side-channel" data attached to a section to which they apply, and those that bfd doesn't process as relocations. The latter sort are stored in a normal bfd section by bfd_section_from_shdr. We don't consider the former sort here, unless they form part of the loadable image. Reloc sections not assigned here (and compressed debugging sections and CTF sections which nothing else in the file can rely upon) will be handled later by assign_file_positions_for_relocs. We also don't set the positions of the .symtab and .strtab here. 
Name: _bfd_elf_modify_headers; Comment: Set e_type in ELF header to ET_EXEC for -pie -Ttext-segment=. FIXME: We used to have code here to sort the PT_LOAD segments into ascending order, as per the ELF spec. But this breaks some programs, including the Linux kernel. But really either the spec should be changed or the programs updated. 
Name: _bfd_elf_assign_file_positions_for_non_load; Comment: Assign file positions for all the reloc sections which are not part of the loadable file image, and the file position of section headers. 
Name: _bfd_elf_section_from_bfd_section; Comment: Given a section, search the header to find them. 
Name: _bfd_elf_symbol_from_bfd_symbol; Comment: Given a BFD symbol, return the index in the ELF symbol table, or -1 on error. 
Name: is_contained_by; Comment: Returns TRUE if the given section is contained within the given segment. LMA addresses are compared against PADDR when bed->want_p_paddr_set_to_zero is false, VMA against VADDR when true. 
Name: is_note; Comment: Handle PT_NOTE segment. 
Name: rewrite_elf_program_header; Comment: Rewrite program header information. 
Name: elf_is_p_align_valid; Comment: Return true if p_align in the ELF program header in ABFD is valid. 
Name: copy_elf_program_header; Comment: Copy ELF program header information. 
Name: copy_private_bfd_data; Comment: Copy private BFD data. This copies or rewrites ELF program header information. 
Name: _bfd_elf_init_private_section_data; Comment: Initialize private output section information from input section. 
Name: _bfd_elf_copy_private_section_data; Comment: Copy private section information. This copies over the entsize field, and sometimes the info field. 
Name: _bfd_elf_fixup_group_sections; Comment: Look at all the SHT_GROUP sections in IBFD, making any adjustments necessary if we are removing either the SHT_GROUP section or any of the group member sections. DISCARDED is the value that a section's output_section has if the section will be discarded, NULL when this function is called from objcopy, bfd_abs_section_ptr when called from the linker. 
Name: _bfd_elf_copy_private_header_data; Comment: Copy private header information. 
Name: swap_out_syms; Comment: Swap out the symbols. 
Name: _bfd_elf_get_symtab_upper_bound; Comment: Return the number of bytes required to hold the symtab vector. Note that we base it on the count plus 1, since we will null terminate the vector allocated based on this size. However, the ELF symbol table always has a dummy entry as symbol #0, so it ends up even. 
Name: _bfd_elf_canonicalize_reloc; Comment: Canonicalize the relocs. 
Name: _bfd_elf_get_dynamic_reloc_upper_bound; Comment: Return the size required for the dynamic reloc entries. Any loadable section that was actually installed in the BFD, and has type SHT_REL or SHT_RELA, and uses the dynamic symbol table, is considered to be a dynamic reloc section. 
Name: _bfd_elf_canonicalize_dynamic_reloc; Comment: Canonicalize the dynamic relocation entries. Note that we return the dynamic relocations as a single block, although they are actually associated with particular sections; the interface, which was designed for SunOS style shared libraries, expects that there is only one set of dynamic relocs. Any loadable section that was actually installed in the BFD, and has type SHT_REL or SHT_RELA, and uses the dynamic symbol table, is considered to be a dynamic reloc section. 
Name: _bfd_elf_slurp_version_tables; Comment: Read in the version information. 
Name: _bfd_elf_is_local_label_name; Comment: Return whether a symbol name implies a local symbol. Most targets use this function for the is_local_label_name entry point, but some override it. 
Name: _bfd_elf_find_nearest_line; Comment: Find the nearest line to a particular section and offset, for error reporting. 
Name: _bfd_elf_find_nearest_line_with_alt; Comment: Find the nearest line to a particular section and offset, for error reporting. ALT_BFD representing a .gnu_debugaltlink file can be optionally specified. 
Name: _bfd_elf_find_line; Comment: Find the line for a symbol. 
Name: _bfd_elf_find_inliner_info; Comment: After a call to bfd_find_nearest_line, successive calls to bfd_find_inliner_info can be used to get source information about each level of function inlining that terminated at the address passed to bfd_find_nearest_line. Currently this is only supported for DWARF2 with appropriate DWARF3 extensions. 
Name: _bfd_elf_validate_reloc; Comment: Try to convert a non-ELF reloc into an ELF one. 
Name: ; Comment: For Rel targets, we encode meaningful data for BFD_RELOC_VTABLE_ENTRY in the relocation's offset. Thus we cannot allow any sort of sanity range-checking to interfere. There is nothing else to do in processing this reloc. 
Name: elfcore_make_pid; Comment: Return a PID that identifies a "thread" for threaded cores, or the PID of the main process for non-threaded cores. 
Name: elfcore_maybe_make_sect; Comment: If there isn't a section called NAME, make one, using data from SECT. Note, this function will generate a reference to NAME, so you shouldn't deallocate or overwrite it. 
Name: _bfd_elfcore_make_pseudosection; Comment: Create a pseudosection containing SIZE bytes at FILEPOS. This actually creates up to two pseudosections: - For the single-threaded case, a section named NAME, unless such a section already exists. - For the multi-threaded case, a section named "NAME/PID", where PID is elfcore_make_pid (abfd). Both pseudosections have identical contents. 
Name: elfcore_make_note_pseudosection; Comment: Create a pseudosection containing the exact contents of NOTE. 
Name: elfcore_grok_prfpreg; Comment: There isn't a consistent prfpregset_t across platforms, but it doesn't matter, because we don't have to pick this data structure apart. 
Name: elfcore_grok_prxfpreg; Comment: Linux dumps the Intel SSE regs in a note named "LINUX" with a note type of NT_PRXFPREG. Just include the whole note's contents literally. 
Name: elfcore_grok_xstatereg; Comment: Linux dumps the Intel XSAVE extended state in a note named "LINUX" with a note type of NT_X86_XSTATE. Just include the whole note's contents literally. 
Name: elfcore_grok_riscv_csr; Comment: Convert NOTE into a bfd_section called ".reg-riscv-csr". Return TRUE if successful otherwise, return FALSE. 
Name: elfcore_grok_gdb_tdesc; Comment: Convert NOTE into a bfd_section called ".gdb-tdesc". Return TRUE if successful otherwise, return FALSE. 
Name: _bfd_elfcore_strndup; Comment: return a malloc'ed copy of a string at START which is at most MAX bytes long, possibly without a terminating '_0'. the copy will always have a terminating '_0'. 
Name: elfcore_grok_solaris_prstatus; Comment: Processes Solaris's process status note. sig_off ~ offsetof(prstatus_t, pr_cursig) pid_off ~ offsetof(prstatus_t, pr_pid) lwpid_off ~ offsetof(prstatus_t, pr_who) gregset_size ~ sizeof(gregset_t) gregset_offset ~ offsetof(prstatus_t, pr_reg) 
Name: elfcore_grok_solaris_info; Comment: Gets program and arguments from a core. prog_off ~ offsetof(prpsinfo | psinfo_t, pr_fname) comm_off ~ offsetof(prpsinfo | psinfo_t, pr_psargs) 
Name: elfcore_grok_solaris_lwpstatus; Comment: Processes Solaris's LWP status note. gregset_size ~ sizeof(gregset_t) gregset_off ~ offsetof(lwpstatus_t, pr_reg) fpregset_size ~ sizeof(fpregset_t) fpregset_off ~ offsetof(lwpstatus_t, pr_fpreg) 
Name: elfcore_grok_solaris_note; Comment: For name starting with "CORE" this may be either a Solaris core file or a gdb-generated core file. Do Solaris-specific processing on selected note types first with elfcore_grok_solaris_note(), then process the note in elfcore_grok_note(). 
Name: elfcore_write_note; Comment: Function: elfcore_write_note Inputs: buffer to hold note, and current size of buffer name of note type of note data for note size of data for note Writes note to end of buffer. ELF64 notes are written exactly as for ELF32, despite the current (as of 2006) ELF gabi specifying that they ought to have 8-byte namesz and descsz field, and have 8-byte alignment. Other writers, eg. Linux kernel, do the same. Return: Pointer to realloc'd buffer, *BUFSIZ updated. 
Name: elfcore_write_riscv_csr; Comment: Write the buffer of csr values in CSRS (length SIZE) into the note buffer BUF and update *BUFSIZ. ABFD is the bfd the note is being written into. Return a pointer to the new start of the note buffer, to replace BUF which may no longer be valid. 
Name: elfcore_write_gdb_tdesc; Comment: Write the target description (a string) pointed to by TDESC, length SIZE, into the note buffer BUF, and update *BUFSIZ. ABFD is the bfd the note is being written into. Return a pointer to the new start of the note buffer, to replace BUF which may no longer be valid. 
Name: bfd_get_elf_phdr_upper_bound; Comment: Return an upper bound on the number of bytes required to store a copy of ABFD's program header table entries. Return -1 if an error occurs; bfd_get_error will return an appropriate code. 
Name: bfd_get_elf_phdrs; Comment: Copy ABFD's program header table entries to *PHDRS. The entries will be stored as an array of Elf_Internal_Phdr structures, as defined in include/elf/internal.h. To find out how large the buffer needs to be, call bfd_get_elf_phdr_upper_bound. Return the number of program header table entries read, or -1 if an error occurs; bfd_get_error will return an appropriate code. 
Name: _bfd_elf_rela_local_sym; Comment: For RELA architectures, return the relocation value for a relocation against a local symbol. 
Name: _bfd_elf_section_offset; Comment: Adjust an address within a section. Given OFFSET within SEC, return the new offset within the section, based upon changes made to the section. Returns -1 if the offset is now invalid. The offset (in abnd out) is in target sized bytes, however big a byte may be. 
Name: ; Comment: Create a new BFD as if by bfd_openr. Rather than opening a file, reconstruct an ELF file by reading the segments out of remote memory based on the ELF file header at EHDR_VMA and the ELF program headers it points to. If not null, LOADBASEP is filled in with the difference between the VMAs from which the segments were read, and the VMAs the file headers (and hence BFD's idea of each section's VMA) put them at. The function TARGET_READ_MEMORY is called to copy LEN bytes from the remote memory at target address VMA into the local buffer at MYADDR; it should return zero on success or an `errno' code on failure. TEMPL must be a BFD for an ELF target with the word size and byte order found in the remote memory. 
Name: _bfd_elf_is_function_type; Comment: Return TRUE for ELF symbol types that represent functions. This is the default version of this function, which is sufficient for most targets. It returns true if TYPE is STT_FUNC or STT_GNU_IFUNC. 
Name: _bfd_elf_maybe_function_sym; Comment: If the ELF symbol SYM might be a function in SEC, return the function size and set *CODE_OFF to the function's entry point, otherwise return zero. 
Name: _bfd_elf_init_secondary_reloc_section; Comment: Create a BFD section to hold a secondary reloc section. 
Name: _bfd_elf_slurp_secondary_reloc_section; Comment: Read in any secondary relocs associated with SEC. 
Name: _bfd_elf_copy_special_section_fields; Comment: Set the ELF section header fields of an output secondary reloc section. 
Name: _bfd_elf_write_secondary_reloc_section; Comment: Write out a secondary reloc section. FIXME: Currently this function can result in a serious performance penalty for files with secondary relocs and lots of sections. The proper way to fix this is for _bfd_elf_copy_special_section_fields() to chain secondary relocs together and then to have this function just walk that chain. 
Name: elf32_am33lin_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: bfd_get_32_me; Comment: Similar with bfd_get_32 but taking into account the middle-endianess of the ARC CPUs. Only to be used in code sections. 
Name: elf_arc_link_hash_table_free; Comment: Destroy an ARC ELF linker hash table. 
Name: arc_elf_link_hash_table_create; Comment: Create an ARC ELF linker hash table. 
Name: arc_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: arc_elf_print_private_bfd_data; Comment: Print private flags. 
Name: arc_elf_copy_private_bfd_data; Comment: Copy backend specific data from one object module to another. 
Name: arc_info_to_howto_rel; Comment: Set the howto pointer for an ARC ELF reloc. 
Name: arc_extract_features; Comment: Extract CPU features from an NTBS. 
Name: arc_stralloc; Comment: Concatenate two strings. s1 can be NULL but not s2. 
Name: arc_elf_merge_attributes; Comment: Merge ARC object attributes from IBFD into OBFD. Raise an error if there are conflicting attributes. 
Name: arc_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: bfd_arc_get_mach_from_attributes; Comment: Return a best guess for the machine number based on the attributes. 
Name: arc_elf_object_p; Comment: Set the right machine number for an ARC ELF file. 
Name: arc_elf_final_write_processing; Comment: The final processing done just before writing out an ARC ELF object file. This gets the ARC architecture right based on the machine number. 
Name: elf_arc_relocate_section; Comment: Relocate an arc ELF section. Function : elf_arc_relocate_section Brief : Relocate an arc section, by handling all the relocations _ appearing in that section. Args : output_bfd : The bfd being written to. _ info_ : Link information. _ input_bfd : The input bfd. _ input_section : The section being relocated. _ contents_ : contents of the section being relocated. _ relocs_ : List of relocations in the section. _ local_syms : is a pointer to the swapped in local symbols. _ local_section : is an array giving the section in the input file ___ corresponding to the st_shndx field of each ___ local symbol. 
Name: elf_arc_adjust_dynamic_symbol; Comment: Desc : Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_arc_finish_dynamic_symbol; Comment: Function : elf_arc_finish_dynamic_symbol Brief : Finish up dynamic symbol handling. We set the _ contents of various dynamic sections here. Args : output_bfd : _ info_ : _ h_ : _ sym_ : Returns : True/False as the return status. 
Name: elf_arc_finish_dynamic_sections; Comment: Function : elf_arc_finish_dynamic_sections Brief : Finish up the dynamic sections handling. Args : output_bfd : _ info_ : _ h_ : _ sym_ : Returns : True/False as the return status. 
Name: elf_arc_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf32_arc_reloc_type_class; Comment: Classify dynamic relocs such that -z combreloc can reorder and combine them. 
Name: elf32_arc_grok_prstatus; Comment: GDB expects general purpose registers to be in section .reg. However Linux kernel doesn't create this section and instead writes registers to NOTE section. It is up to the binutils to create a pseudo-section .reg from the contents of NOTE. Also BFD will read pid and signal number from NOTE. This function relies on offsets inside elf_prstatus structure in Linux to be stable. 
Name: elf32_arc_obj_attrs_arg_type; Comment: Determine whether an object attribute tag takes an integer, a string or both. 
Name: elf32_arc_obj_attrs_handle_unknown; Comment: Attribute numbers >=14 can be safely ignored. 
Name: elf32_arc_section_from_shdr; Comment: Handle an ARC specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: arc_elf_relax_section; Comment: Relaxation hook. These are the current relaxing opportunities available: R_ARC_GOTPC32 => R_ARC_PCREL. 
Name: elf32_arm_nabi_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: arm_elf_add_rofixup; Comment: Add an FDPIC read-only fixup. 
Name: elf32_arm_link_hash_newfunc; Comment: Create an entry in an ARM ELF linker hash table. 
Name: elf32_arm_allocate_local_sym_info; Comment: Ensure that we have allocated bookkeeping structures for ABFD's local symbols. 
Name: elf32_arm_create_local_iplt; Comment: Return the .iplt information for local symbol R_SYMNDX, which belongs to input bfd ABFD. Create the information if it doesn't already exist. Return null if an allocation fails. 
Name: elf32_arm_get_plt_info; Comment: Try to obtain PLT information for the symbol with index R_SYMNDX in ABFD's symbol table. If the symbol is global, H points to its hash table entry, otherwise H is null. Return true if the symbol does have PLT information. When returning true, point *ROOT_PLT at the target-independent reference count/offset union and *ARM_PLT at the ARM-specific information. 
Name: elf32_arm_plt_needs_thumb_stub_p; Comment: Return true if the PLT described by ARM_PLT requires a Thumb stub before it. 
Name: elf32_arm_get_local_dynreloc_list; Comment: Return a pointer to the head of the dynamic reloc list that should be used for local symbol ISYM, which is symbol number R_SYMNDX in ABFD's symbol table. Return null if an error occurs. 
Name: stub_hash_newfunc; Comment: Initialize an entry in the stub hash table. 
Name: create_got_section; Comment: Create .got, .gotplt, and .rel(a).got sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: create_ifunc_sections; Comment: Create the .iplt, .rel(a).iplt and .igot.plt sections. 
Name: using_thumb_only; Comment: Determine if we're dealing with a Thumb only architecture. 
Name: using_thumb2; Comment: Determine if we're dealing with a Thumb-2 object. 
Name: using_thumb2_bl; Comment: Determine whether Thumb-2 BL instruction is available. 
Name: elf32_arm_create_dynamic_sections; Comment: Create .plt, .rel(a).plt, .got, .got.plt, .rel(a).got, .dynbss, and .rel(a).bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: elf32_arm_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: elf32_arm_link_hash_table_free; Comment: Destroy an ARM elf linker hash table. 
Name: elf32_arm_link_hash_table_create; Comment: Create an ARM elf linker hash table. 
Name: arch_has_arm_nop; Comment: Determine what kind of NOPs are available. 
Name: arm_type_of_stub; Comment: Determine the type of stub needed, if any, for a call. 
Name: elf32_arm_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: elf32_arm_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: arm_dedicated_stub_output_section_required; Comment: Whether veneers of type STUB_TYPE require to be in a dedicated output section. 
Name: ; Comment: Required alignment (as a power of 2) for the dedicated section holding veneers of type STUB_TYPE, or 0 if veneers of this type are interspersed with input sections. 
Name: arm_dedicated_stub_output_section_name; Comment: Name of the dedicated output section to put veneers of type STUB_TYPE, or NULL if veneers of this type are interspersed with input sections. 
Name: arm_dedicated_stub_input_section_ptr; Comment: If veneers of type STUB_TYPE should go in a dedicated output section, returns the address of the hash table field in HTAB holding a pointer to the corresponding input section. Otherwise, returns NULL. 
Name: elf32_arm_create_or_find_stub_sec; Comment: Find or create a stub section to contain a stub of type STUB_TYPE. SECTION is the section that branch into veneer and can be NULL if stub should go in a dedicated output section. Returns a pointer to the stub section, and the section to which the stub section will be attached (in *LINK_SEC_P). LINK_SEC_P may be NULL. 
Name: elf32_arm_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: put_arm_insn; Comment: Store an Arm insn into an output section not processed by elf32_arm_write_section. 
Name: put_thumb_insn; Comment: Store a 16-bit Thumb insn into an output section not processed by elf32_arm_write_section. 
Name: put_thumb2_insn; Comment: Store a Thumb2 insn into an output section not processed by elf32_arm_write_section. 
Name: elf32_arm_tls_transition; Comment: If it's possible to change R_TYPE to a more efficient access model, return the new reloc type. 
Name: arm_stub_sym_claimed; Comment: Returns whether stubs of type STUB_TYPE take over the symbol they are veneering (TRUE) or have their own symbol (FALSE). 
Name: arm_dedicated_stub_section_padding; Comment: Returns the padding needed for the dedicated section used stubs of type STUB_TYPE. 
Name: arm_new_stubs_start_offset_ptr; Comment: If veneers of type STUB_TYPE should go in a dedicated output section, returns the address of the hash table field in HTAB holding the offset at which new veneers should be layed out in the stub section. 
Name: find_stub_size_and_template; Comment: Calculate the template, template size and instruction size for a stub. Return value is the instruction size. 
Name: arm_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: elf32_arm_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: elf32_arm_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: group_sections; Comment: See whether we can group stub sections together. Grouping stub sections may result in fewer stubs. More importantly, we need to put all .init* and .fini* stubs at the end of the .init or .fini output sections respectively, because glibc splits the _init and _fini functions into multiple parts. Putting a stub in the middle of a function is not a good idea. 
Name: a8_reloc_compare; Comment: Comparison function for sorting/searching relocations relating to Cortex-A8 erratum fix. 
Name: cortex_a8_erratum_scan; Comment: Helper function to scan code for sequences which might trigger the Cortex-A8 branch/TLB erratum. Fill in the table described by A8_FIXES_P, NUM_A8_FIXES_P, A8_FIX_TABLE_SIZE_P. Returns true if an error occurs, false otherwise. 
Name: elf32_arm_create_stub; Comment: Create or update a stub entry depending on whether the stub can already be found in HTAB. The stub is identified by: - its type STUB_TYPE - its source branch (note that several can share the same stub) whose section and relocation (if any) are given by SECTION and IRELA respectively - its target symbol whose input section, hash, name, value and branch type are given in SYM_SEC, HASH, SYM_NAME, SYM_VALUE and BRANCH_TYPE respectively If found, the value of the stub's target symbol is updated from SYM_VALUE and *NEW_STUB is set to FALSE. Otherwise, *NEW_STUB is set to TRUE and the stub entry is initialized. Returns the stub that was created or updated, or NULL if an error occurred. 
Name: cmse_scan; Comment: Scan symbols in INPUT_BFD to identify secure entry functions needing a gateway veneer to transition from non secure to secure state and create them accordingly. "ARMv8-M Security Extensions: Requirements on Development Tools" document defines the conditions that govern Secure Gateway veneer creation for a given symbol <SYM> as follows: - it has function type - it has non local binding - a symbol named __acle_se_<SYM> (called special symbol) exists with the same type, binding and value as <SYM> (called normal symbol). An entry function can handle secure state transition itself in which case its special symbol would have a different value from the normal symbol. OUT_ATTR gives the output attributes, SYM_HASHES the symbol index to hash entry mapping while HTAB gives the name to hash entry mapping. *CMSE_STUB_CREATED is increased by the number of secure gateway veneer created. The return value gives whether a stub failed to be allocated. 
Name: cmse_entry_fct_p; Comment: Return TRUE iff a symbol identified by its linker HASH entry is a secure code entry function, ie can be called from non secure code without using a veneer. 
Name: arm_list_new_cmse_stub; Comment: Output the name (in symbol table) of the veneer GEN_ENTRY if it is a new secure gateway veneers (ie. the veneers was not in the input import library) and there is no output import library (GEN_INFO->out_implib_bfd is NULL. 
Name: set_cmse_veneer_addr_from_implib; Comment: Set offset of each secure gateway veneers so that its address remain identical to the one in the input import library referred by HTAB->in_implib_bfd. A warning is issued for veneers that disappeared (present in input import library but absent from the executable being linked) or if new veneers appeared and there is no output import library (INFO->out_implib_bfd is NULL and *CMSE_STUB_CREATED is bigger than the number of secure gateway veneers found in the input import library. The function returns whether an error occurred. If no error occurred, *CMSE_STUB_CREATED gives the number of SG veneers created by both cmse_scan and this function and HTAB->new_cmse_stub_offset is set to the biggest veneer observed set for new veneers to be layed out after. 
Name: elf32_arm_size_stubs; Comment: Determine and set the size of the stub section for a final link. The basic idea here is to examine all the relocations looking for PC-relative calls to a target that is unreachable with a "bl" instruction. 
Name: elf32_arm_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. We also set up the .plt entries for statically linked PIC functions here. This function is called via arm_elf_finish in the linker. 
Name: find_thumb_glue; Comment: Locate the Thumb encoded calling stub for NAME. 
Name: find_arm_glue; Comment: Locate the ARM encoded calling stub for NAME. 
Name: record_arm_to_thumb_glue; Comment: Allocate space and symbols for calling a Thumb function from Arm mode. returns the symbol identifying the stub. 
Name: record_arm_bx_glue; Comment: Allocate space for ARMv4 BX veneers. 
Name: elf32_arm_section_map_add; Comment: Add an entry to the code/data map for section SEC. 
Name: record_vfp11_erratum_veneer; Comment: Record information about a VFP11 denorm-erratum veneer. Only ARM-mode veneers are handled for now. 
Name: record_stm32l4xx_erratum_veneer; Comment: Record information about a STM32L4XX STM erratum veneer. Only THUMB-mode veneers need to be handled because used only in Cortex-M. 
Name: arm_make_glue_section; Comment: Create a fake section for use by the ARM backend of the linker. 
Name: bfd_elf32_arm_use_long_plt; Comment: Set size of .plt entries. This function is called from the linker scripts in ld/emultempl/{armelf}.em. 
Name: bfd_elf32_arm_add_glue_sections_to_bfd; Comment: Add the glue sections to ABFD. This function is called from the linker scripts in ld/emultempl/{armelf}.em. 
Name: bfd_elf32_arm_keep_private_stub_output_sections; Comment: Mark output sections of veneers needing a dedicated one with SEC_KEEP. This ensures they are not marked for deletion by strip_excluded_output_sections () when veneers are going to be created later. Not doing so would trigger assert on empty section size in lang_size_sections_1 (). 
Name: bfd_elf32_arm_get_bfd_for_interworking; Comment: Select a BFD to be used to hold the sections used by the glue code. This function is called from the linker scripts in ld/emultempl/ {armelf/pe}.em. 
Name: bfd_elf32_arm_init_maps; Comment: Initialise maps of ARM/Thumb/data for input BFDs. 
Name: bfd_elf32_arm_set_cortex_a8_fix; Comment: Auto-select enabling of Cortex-A8 erratum fix if the user didn't explicitly say what they wanted. 
Name: bfd_arm_vfp11_regno; Comment: Return a VFP register number. This is encoded as RX:X for single-precision registers, or X:RX for double-precision registers, where RX is the group of four bits in the instruction encoding and X is the single extension bit. RX and X fields are specified using their lowest (starting) bit. The return value is: 0...31: single-precision registers s0...s31 32...63: double-precision registers d0...d31. Although X should be zero for VFP11 (encoding d0...d15 only), we might encounter VFP3 instructions, so we allow the full range for DP registers. 
Name: bfd_arm_vfp11_write_mask; Comment: Set bits in *WMASK according to a register number REG as encoded by bfd_arm_vfp11_regno(). Ignore d16-d31. 
Name: bfd_arm_vfp11_antidependency; Comment: Return TRUE if WMASK overwrites anything in REGS. 
Name: bfd_arm_vfp11_insn_decode; Comment: In this function, we're interested in two things: finding input registers for VFP data-processing instructions, and finding the set of registers which arbitrary VFP instructions may write to. We use a 32-bit unsigned int to hold the written set, so FLDM etc. are easy to deal with (we're only interested in 32 SP registers or 16 dp registers, due to the VFP version implemented by the chip in question). DP registers are marked by setting both SP registers in the write mask). 
Name: bfd_elf32_arm_vfp11_erratum_scan; Comment: Look for potentially-troublesome code sequences which might trigger the VFP11 denormal/antidependency erratum. See, e.g., the ARM1136 errata sheet (available from ARM) for details of the erratum. A short version is described in ld.texinfo. 
Name: bfd_elf32_arm_vfp11_fix_veneer_locations; Comment: Find virtual-memory addresses for VFP11 erratum veneers and return locations after sections have been laid out, using specially-named symbols. 
Name: bfd_elf32_arm_stm32l4xx_fix_veneer_locations; Comment: Find virtual-memory addresses for STM32L4XX erratum veneers and return locations after sections have been laid out, using specially-named symbols. 
Name: stm32l4xx_need_create_replacing_stub; Comment: STM STM32L4XX erratum : This function assumes that it receives an LDM or VLDM opcode and: - computes the number and the mode of memory accesses - decides if the replacement should be done: . replaces only if > 8-word accesses . or (testing purposes only) replaces all accesses. 
Name: bfd_elf32_arm_stm32l4xx_erratum_scan; Comment: Look for potentially-troublesome code sequences which might trigger the STM STM32L4XX erratum. 
Name: bfd_elf32_arm_set_target_params; Comment: Set target relocation values needed during linking. 
Name: insert_thumb_branch; Comment: Replace the target offset of a Thumb bl or b.w instruction. 
Name: elf32_thumb_to_arm_stub; Comment: Thumb code calling an ARM function. 
Name: elf32_arm_create_thumb_stub; Comment: Populate an Arm to Thumb stub. Returns the stub symbol. 
Name: elf32_arm_to_thumb_stub; Comment: Arm code calling a Thumb function. 
Name: elf32_arm_to_thumb_export_stub; Comment: Populate Arm stub for an exported Thumb function. 
Name: elf32_arm_bx_glue; Comment: Populate ARMv4 BX veneers. Returns the absolute adress of the veneer. 
Name: elf32_arm_begin_write_processing; Comment: Generate Arm stubs for exported Thumb symbols. 
Name: elf32_arm_allocate_dynrelocs; Comment: Reserve space for COUNT dynamic relocations in relocation selection SRELOC. 
Name: elf32_arm_allocate_irelocs; Comment: Reserve space for COUNT R_ARM_IRELATIVE relocations. If the link is dynamic, the relocations should go in SRELOC, otherwise they should go in the special .rel.iplt section. 
Name: elf32_arm_add_dynreloc; Comment: Add relocation REL to the end of relocation section SRELOC. 
Name: elf32_arm_allocate_plt_entry; Comment: Allocate room for a PLT entry described by ROOT_PLT and ARM_PLT. IS_IPLT_ENTRY says whether the entry belongs to .iplt rather than to .plt. 
Name: elf32_arm_populate_plt_entry; Comment: Fill in a PLT entry and its associated GOT slot. If DYNINDX == -1, the entry lives in .iplt and resolves to (*SYM_VALUE)(). Otherwise, DYNINDX is the index of the symbol in the dynamic symbol table and SYM_VALUE is undefined. ROOT_PLT points to the offset of the PLT entry from the start of its section (.iplt or .plt). ARM_PLT points to the symbol's ARM-specific bookkeeping information. Returns FALSE if there was a problem. 
Name: arm_real_reloc_type; Comment: Some relocations map to different relocations depending on the target. Return the real relocation. 
Name: dtpoff_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving @dtpoff relocation. This is PT_TLS segment p_vaddr. 
Name: elf32_arm_abs12_reloc; Comment: Perform an R_ARM_ABS12 relocation on the field pointed to by DATA. VALUE is the relocation value. 
Name: elf32_arm_tls_relax; Comment: Handle TLS relaxations. Relaxing is possible for symbols that use R_ARM_GOTDESC, R_ARM_{,THM_}TLS_CALL or R_ARM_{,THM_}TLS_DESCSEQ relocations, during a static link. Return bfd_reloc_ok if we're done, bfd_reloc_continue if the caller is to then call final_link_relocate. Return other values in the case of error. FIXME:When --emit-relocs is in effect, we'll emit relocs describing the pre-relaxed code. It would be nice if the relocs were updated to match the optimization. 
Name: calculate_group_reloc_mask; Comment: For a given value of n, calculate the value of G_n as required to deal with group relocations. We return it in the form of an encoded constant-and-rotation, together with the final residual. If n is specified as less than zero, then final_residual is filled with the input value and no further action is performed. 
Name: identify_add_or_sub; Comment: Given an ARM instruction, determine whether it is an ADD or a SUB. Returns 1 if it is an ADD, -1 if it is a SUB, and 0 otherwise. 
Name: elf32_arm_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: arm_add_to_rel; Comment: Add INCREMENT to the reloc (of type HOWTO) at ADDRESS. 
Name: elf32_arm_relocate_section; Comment: Relocate an ARM ELF section. 
Name: add_unwind_table_edit; Comment: Add a new unwind edit to the list described by HEAD, TAIL. If TINDEX is zero, adds the edit to the start of the list. (The list must be built in order of ascending TINDEX: the function's callers are primarily responsible for maintaining that condition). 
Name: adjust_exidx_size; Comment: Increase the size of EXIDX_SEC by ADJUST bytes. ADJUST mau be negative. 
Name: insert_cantunwind_after; Comment: Insert an EXIDX_CANTUNWIND marker at the end of a section. 
Name: elf32_arm_fix_exidx_coverage; Comment: Scan .ARM.exidx tables, and create a list describing edits which should be made to those tables, such that: 1. Regions without unwind data are marked with EXIDX_CANTUNWIND entries. 2. Duplicate entries are merged together (EXIDX_CANTUNWIND, or unwind _codes which have been inlined into the index). If MERGE_EXIDX_ENTRIES is false, duplicate entries are not merged. The edits are applied when the tables are written (in elf32_arm_write_section). 
Name: bfd_arm_get_mach_from_attributes; Comment: Return a best guess for the machine number based on the attributes. 
Name: elf32_arm_object_p; Comment: Set the right machine number. 
Name: elf32_arm_set_private_flags; Comment: Function to keep ARM specific flags in the ELF header. 
Name: elf32_arm_copy_private_bfd_data; Comment: Copy backend specific data from one object module to another. 
Name: elf32_arm_obj_attrs_arg_type; Comment: Determine whether an object attribute tag takes an integer, a string or both. 
Name: elf32_arm_obj_attrs_order; Comment: The ABI defines that Tag_conformance should be emitted first, and that Tag_nodefaults should be second (if either is defined). This sets those two positions, and bumps up the position of all the remaining tags to compensate. 
Name: elf32_arm_obj_attrs_handle_unknown; Comment: Attribute numbers >=64 (mod 128) can be safely ignored. 
Name: get_secondary_compatible_arch; Comment: Read the architecture from the Tag_also_compatible_with attribute, if any. Returns -1 if no architecture could be read. 
Name: set_secondary_compatible_arch; Comment: Set, or unset, the architecture of the Tag_also_compatible_with attribute. The tag is removed if ARCH is -1. 
Name: tag_cpu_arch_combine; Comment: Combine two values for Tag_CPU_arch, taking secondary compatibility tags into account. 
Name: elf32_arm_attributes_accept_div; Comment: Query attributes object to see if integer divide instructions may be present in an object. 
Name: elf32_arm_attributes_forbid_div; Comment: Query attributes object to see if integer divide instructions are forbidden to be in the object. This is not the inverse of elf32_arm_attributes_accept_div. 
Name: elf32_arm_merge_eabi_attributes; Comment: Merge EABI object attributes from IBFD into OBFD. Raise an error if there are conflicting attributes. 
Name: elf32_arm_versions_compatible; Comment: Return TRUE if the two EABI versions are incompatible. 
Name: elf32_arm_print_private_bfd_data; Comment: Display the flags field. 
Name: elf32_arm_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: elf32_arm_gc_mark_extra_sections; Comment: Unwinding tables are not referenced directly. This pass marks them as required if the corresponding code section is marked. Similarly, ARMv8-M secure entry functions can only be referenced by SG veneers which are created after the GC process. They need to be marked in case they reside in their own section (as would be the case if code was compiled with -ffunction-sections). 
Name: elf32_arm_is_target_special_symbol; Comment: Treat mapping symbols as special target symbols. 
Name: elf32_arm_maybe_function_sym; Comment: If the ELF symbol SYM might be a function in SEC, return the function size and set *CODE_OFF to the function's entry point, otherwise return zero. 
Name: elf32_arm_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: allocate_dynrelocs_for_symbol; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: elf32_arm_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf32_arm_always_size_sections; Comment: Size sections even though they're not dynamic. We use it to setup _TLS_MODULE_BASE_, if needed. 
Name: elf32_arm_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: arm_nacl_put_plt0; Comment: Install the special first PLT entry for elf32-arm-nacl. Unlike other variants, NaCl needs this entry in a static executable's .iplt too. When we're handling that case, GOT_DISPLACEMENT is zero. For .iplt really only the last bundle is useful, and .iplt could have a shorter first entry, with each individual PLT entry's relative branch calculated differently so it targets the last bundle instead of the instruction before it (labelled .Lplt_tail above). But it's simpler to keep the size and layout of PLT0 consistent with the dynamic case, at the cost of some dead code at the start of .iplt and the one dead store to the stack at the start of .Lplt_tail. 
Name: elf32_arm_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: is_arm_elf_unwind_section_name; Comment: Return TRUE if this is an unwinding table entry. 
Name: elf32_arm_fake_sections; Comment: Set the type and flags for an ARM section. We do this by the section name, which is a hack, but ought to work. 
Name: elf32_arm_section_from_shdr; Comment: Handle an ARM specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: elf32_arm_output_map_sym; Comment: Output a single mapping symbol. 
Name: elf32_arm_output_plt_map_1; Comment: Output mapping symbols for the PLT entry described by ROOT_PLT and ARM_PLT. IS_IPLT_ENTRY_P says whether the PLT is in .iplt rather than .plt. 
Name: elf32_arm_output_plt_map; Comment: Output mapping symbols for PLT entries associated with H. 
Name: arm_stub_claim_sym; Comment: Bind a veneered symbol to its veneer identified by its hash entry STUB_ENTRY. The veneered location thus loose its symbol. 
Name: elf32_arm_output_stub_sym; Comment: Output a single local symbol for a generated stub. 
Name: elf32_arm_output_arch_local_syms; Comment: Output mapping symbols for linker generated sections, and for those data-only sections that do not have a $d. 
Name: elf32_arm_filter_cmse_symbols; Comment: Filter normal symbols of CMSE entry functions of ABFD to include in the import library. All SYMCOUNT symbols of ABFD can be examined from their pointers in SYMS. Pointers of symbols to keep should be stored continuously at the beginning of that array. Returns the number of symbols to keep. 
Name: elf32_arm_filter_implib_symbols; Comment: Filter symbols of ABFD to include in the import library. All SYMCOUNT symbols of ABFD can be examined from their pointers in SYMS. Pointers of symbols to keep should be stored continuously at the beginning of that array. Returns the number of symbols to keep. 
Name: elf32_arm_new_section_hook; Comment: Allocate target specific section data. 
Name: elf32_arm_compare_mapping; Comment: Used to order a list of mapping symbols by address. 
Name: offset_prel31; Comment: Add OFFSET to lower 31 bits of ADDR, leaving other bits unmodified. 
Name: copy_exidx_entry; Comment: Copy an .ARM.exidx table entry, adding OFFSET to (applied) PREL31 relocations. 
Name: make_branch_to_a8_stub; Comment: Helper to insert branches to Cortex-A8 erratum stubs in the right places for a particular section. 
Name: stm32l4xx_fill_stub_udf; Comment: Function filling up a region in memory with T1 and T2 UDFs taking care of alignment. 
Name: stm32l4xx_create_replacing_stub_ldmia; Comment: Functions writing the stream of instructions equivalent to the derived sequence for ldmia, ldmdb, vldm respectively. 
Name: elf32_arm_write_section; Comment: Do code byteswapping. Return FALSE afterwards so that the section is written out as normal. 
Name: elf32_arm_swap_symbol_in; Comment: Mangle thumb function symbols as we read them in. 
Name: elf32_arm_swap_symbol_out; Comment: Mangle thumb function symbols as we write them out. 
Name: elf32_arm_modify_segment_map; Comment: Add the PT_ARM_EXIDX program header. 
Name: elf32_arm_additional_program_headers; Comment: We may add a PT_ARM_EXIDX program header. 
Name: elf32_arm_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. 
Name: elf32_arm_plt0_size; Comment: Return size of plt0 entry starting at ADDR or (bfd_vma) -1 if size can not be determined. 
Name: elf32_arm_plt_size; Comment: Return size of plt entry starting at offset OFFSET of plt section located at address START or (bfd_vma) -1 if size can not be determined. 
Name: elf32_arm_get_synthetic_symtab; Comment: Implementation is shamelessly borrowed from _bfd_elf_get_synthetic_symtab. 
Name: elf32_arm_copy_special_section_fields; Comment: Called to set the sh_flags, sh_link and sh_info fields of OSECTION which has a type >= SHT_LOOS. Returns TRUE if these fields were initialised FALSE otherwise. ISECTION is the best guess matching section from the input bfd IBFD, but it might be NULL. 
Name: is_arm_mapping_symbol; Comment: Returns TRUE if NAME is an ARM mapping symbol. Traditionally the symbols $a, $d and $t have been used. The ARM ELF standard also defines $x (for A64 code). It also allows a period initiated suffix to be added to the symbol: "$[adtx]_.[:sym_char]+". Other tools might also produce $b (Thumb BL), $f, $p, $m and $v, but we do not support them here. $t.x indicates the start of ThumbEE instructions. 
Name: elf32_arm_backend_symbol_processing; Comment: Make sure that mapping symbols in object files are not removed via the "strip --strip-unneeded" tool. These symbols are needed in order to correctly generate interworking veneers, and for byte swapping code regions. Once an object file has been linked, it is safe to remove the symbols as they will no longer be needed. 
Name: elf32_arm_nacl_link_hash_table_create; Comment: Like elf32_arm_link_hash_table_create -- but overrides appropriately for NaCl. 
Name: elf32_arm_nacl_modify_segment_map; Comment: Since NaCl doesn't use the ARM-specific unwind format, we don't really need to use elf32_arm_modify_segment_map. But we do it anyway just to reduce gratuitous differences with the stock ARM backend. 
Name: elf32_arm_fdpic_link_hash_table_create; Comment: Like elf32_arm_link_hash_table_create -- but overrides appropriately for FDPIC. 
Name: elf32_arm_fdpic_omit_section_dynsym; Comment: We need dynamic symbols for every section, since segments can relocate independently. 
Name: elf32_arm_vxworks_link_hash_table_create; Comment: Like elf32_arm_link_hash_table_create -- but overrides appropriately for VxWorks. 
Name: elf32_arm_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf_avr_new_section_hook; Comment: Possibly initialise avr specific data for new section SEC from ABFD. 
Name: get_avr_relax_info; Comment: Return a pointer to the relaxation information for SEC. 
Name: init_avr_relax_info; Comment: Initialise the per section relaxation information for SEC. 
Name: elf32_avr_link_hash_newfunc; Comment: This function is just a straight passthrough to the real function in linker.c. Its prupose is so that its address can be compared inside the avr_link_hash_table macro. 
Name: elf32_avr_link_hash_table_free; Comment: Free the derived linker hash table. 
Name: elf32_avr_link_hash_table_create; Comment: Create the derived linker hash table. The AVR ELF port uses the derived hash table to keep information specific to the AVR ELF linker (without using static variables). 
Name: avr_relative_distance_considering_wrap_around; Comment: Calculates the effective distance of a pc relative jump/call. 
Name: avr_info_to_howto_rela; Comment: Set the howto pointer for an AVR ELF reloc. 
Name: avr_get_stub_addr; Comment: Returns the address of the corresponding stub if there is one. Returns otherwise an address above 0x020000. This function could also be used, if there is no knowledge on the section where the destination is found. 
Name: bfd_elf_avr_diff_reloc; Comment: Perform a diff relocation. Nothing to do, as the difference value is already written into the section's contents. 
Name: avr_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines, but a few relocs, we have to do them ourselves. 
Name: elf32_avr_relocate_section; Comment: Relocate an AVR ELF section. 
Name: bfd_elf_avr_final_write_processing; Comment: The final processing done just before writing out a AVR ELF object file. This gets the AVR architecture right based on the machine number. 
Name: elf32_avr_object_p; Comment: Set the right machine number. 
Name: elf32_avr_is_diff_reloc; Comment: Returns whether the relocation type passed is a diff reloc. 
Name: elf32_avr_adjust_diff_reloc_value; Comment: Reduce the diff value written in the section by count if the shrinked insn address happens to fall between the two symbols for which this diff reloc was emitted. 
Name: elf32_avr_relax_delete_bytes; Comment: Delete some bytes from a section while changing the size of an instruction. The parameter "addr" denotes the section-relative offset pointing just behind the shrinked instruction. "addr+count" point at the first byte just behind the original unshrinked instruction. If delete_shrinks_insn is FALSE, we are deleting redundant padding bytes from relax_info prop record handling. In that case, addr is section-relative offset of start of padding, and count is the number of padding bytes to delete. 
Name: get_elf_r_symndx_section; Comment: None . an absolute value, return the absolute section. 
Name: get_elf_r_symndx_offset; Comment: Get the section-relative offset for a symbol number. 
Name: avr_elf32_assign_records_to_sections; Comment: Iterate over the property records in R_LIST, and copy each record into the list of records within the relaxation information for the section to which the record applies. 
Name: avr_property_record_compare; Comment: Compare two STRUCT AVR_PROPERTY_RECORD in AP and BP, used as the ordering callback from QSORT. 
Name: avr_load_all_property_sections; Comment: Load all of the avr property sections from all of the bfd objects referenced from LINK_INFO. All of the records within each property section are assigned to the STRUCT AVR_RELAX_INFO within the section specific data of the appropriate section. 
Name: elf32_avr_relax_section; Comment: This function handles relaxing for the avr. Many important relaxing opportunities within functions are already realized by the compiler itself. Here we try to replace call (4 bytes) -> rcall (2 bytes) and jump -> rjmp (safes also 2 bytes). As well we now optimize seqences of - call/rcall function - ret to yield - jmp/rjmp function - ret . In case that within a sequence - jmp/rjmp label - ret the ret could no longer be reached it is optimized away. In order to check if the ret is no longer needed, it is checked that the ret's address is not the target of a branch or jump within the same section, it is checked that there is no skip instruction before the jmp/rjmp and that there is no local or global label place at the address of the ret. We refrain from relaxing within sections ".vectors" and ".jumptables" in order to maintain the position of the instructions. There, however, we substitute jmp/call by a sequence rjmp,nop/rcall,nop if possible. (In future one could possibly use the space of the nop for the first instruction of the irq service function. The .jumptables sections is meant to be used for a future tablejump variant for the devices with 3-byte program counter where the table itself contains 4-byte jump instructions whose relative offset must not be changed. 
Name: elf32_avr_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses elf32_avr_relocate_section. For avr it's essentially a cut and paste taken from the H8300 port. The author of the relaxation support patch for avr had absolutely no clue what is happening here but found out that this part of the code seems to be important. 
Name: avr_stub_name; Comment: Determines the hash entry name for a particular reloc. It consists of the identifier of the symbol section and the added reloc addend and symbol offset relative to the section the symbol is attached to. 
Name: avr_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: avr_build_one_stub; Comment: We assume that there is already space allocated for the stub section contents and that before building the stubs the section size is initialized to 0. We assume that within the stub hash table entry, the absolute position of the jmp target has been written in the target_value field. We write here the offset of the generated jmp insn relative to the trampoline section start to the stub_offset entry in the stub hash table entry. 
Name: elf32_avr_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. It also sets information on the stubs bfd and the stub section in the info struct. 
Name: get_local_syms; Comment: Read in all local syms for all input bfds, and create hash entries for export stubs if we are building a multi-subspace shared lib. Returns -1 on error, 0 otherwise. 
Name: elf32_avr_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. We also set up the .plt entries for statically linked PIC functions here. This function is called via hppaelf_finish in the linker. 
Name: internal_reloc_compare; Comment: Callback used by QSORT to order relocations AP and BP. 
Name: avr_is_section_for_address; Comment: Return true if ADDRESS is within the vma range of SECTION from ABFD. 
Name: avr_find_section_for_address; Comment: Helper function to locate the section holding a certain virtual memory address. This is called via bfd_map_over_sections. The DATA is an instance of STRUCT AVR_FIND_SECTION_DATA, the address field of which has been set to the address to search for, and the section field has been set to NULL. If SECTION from ABFD contains ADDRESS then the section field in DATA will be set to SECTION. As an optimisation, if the section field is already non-null then this function does not perform any checks, and just returns. 
Name: avr_elf32_load_records_from_section; Comment: Load all of the property records from SEC, a section from ABFD. Return a STRUCT AVR_PROPERTY_RECORD_LIST containing all the records. The memory for the returned structure, and all of the records pointed too by the structure are allocated with a single call to malloc, so, only the pointer returned needs to be free'd. 
Name: avr_elf32_load_property_records; Comment: Load all of the property records from ABFD. See AVR_ELF32_LOAD_RECORDS_FROM_SECTION for details of the return value. 
Name: bfin_pltpc_reloc; Comment: FUNCTION : bfin_pltpc_reloc ABSTRACT : TODO : figure out how to handle pltpc relocs. 
Name: bfin_bfd_reloc; Comment: bfin_bfd_reloc handles the blackfin arithmetic relocations. Use this instead of bfd_perform_relocation. 
Name: bfin_bfd_reloc_type_lookup; Comment: Given a BFD reloc type, return the howto. 
Name: bfin_reloc_type_lookup; Comment: Given a bfin relocation type, return the howto. 
Name: bfin_is_local_label_name; Comment: Return TRUE if the name is a local label. bfin local labels begin with L$. 
Name: bfin_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: bfinfdpic_elf_link_hash_table_create; Comment: Create a Blackfin ELF linker hash table. 
Name: bfinfdpic_relocs_info_hash; Comment: Compute a hash with the key fields of an bfinfdpic_relocs_info entry. 
Name: bfinfdpic_relocs_info_eq; Comment: Test whether the key fields of two bfinfdpic_relocs_info entries are identical. 
Name: bfinfdpic_relocs_info_find; Comment: Find or create an entry in a hash table HT that matches the key fields of the given ENTRY. If it's not found, memory for a new entry is allocated in ABFD's obstack. 
Name: bfinfdpic_relocs_info_for_global; Comment: Obtain the address of the entry in HT associated with H's symbol + addend, creating a new entry if none existed. ABFD is only used for memory allocation purposes. 
Name: bfinfdpic_relocs_info_for_local; Comment: Obtain the address of the entry in HT associated with the SYMNDXth local symbol of the input bfd ABFD, plus the addend, creating a new entry if none existed. 
Name: bfinfdpic_pic_merge_early_relocs_info; Comment: Merge fields set by check_relocs() of two entries that end up being mapped to the same (presumably global) symbol. 
Name: _bfinfdpic_add_dyn_reloc; Comment: Add a dynamic relocation to the SRELOC section. 
Name: _bfinfdpic_add_rofixup; Comment: Add a fixup to the ROFIXUP section. 
Name: _bfinfdpic_osec_to_segment; Comment: Find the segment number in which OSEC, and output section, is located. 
Name: _bfinfdpic_emit_got_relocs_plt_entries; Comment: Generate relocations for GOT entries, function descriptors, and code for PLT and lazy PLT entries. 
Name: bfinfdpic_relocate_section; Comment: Relocate an Blackfin ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: _bfinfdpic_link_omit_section_dynsym; Comment: We need dynamic symbols for every section, since segments can relocate independently. 
Name: _bfin_create_got_section; Comment: Create a .got section, as well as its additional info field. This is almost entirely copied from elflink.c:_bfd_elf_create_got_section(). 
Name: elf32_bfinfdpic_create_dynamic_sections; Comment: Make sure the got and plt sections exist, and that our pointers in the link hash table point to them. 
Name: _bfinfdpic_count_nontls_entries; Comment: Compute the total GOT size required by each symbol in each range. Symbols may require up to 4 words in the GOT: an entry pointing to the symbol, an entry pointing to its function descriptor, and a private function descriptors taking two words. 
Name: _bfinfdpic_count_relocs_fixups; Comment: Compute the number of dynamic relocations and fixups that a symbol requires, and add (or subtract) from the grand and per-symbol totals. 
Name: _bfinfdpic_count_got_plt_entries; Comment: Compute the total GOT and PLT size required by each symbol in each range. Symbols may require up to 4 words in the GOT: an entry pointing to the symbol, an entry pointing to its function descriptor, and a private function descriptors taking two words. 
Name: _bfinfdpic_compute_got_alloc_data; Comment: Determine the positive and negative ranges to be used by each offset range in the GOT. FDCUR and CUR, that must be aligned to a double-word boundary, are the minimum (negative) and maximum (positive) GOT offsets already used by previous ranges, except for an ODD entry that may have been left behind. GOT and FD indicate the size of GOT entries and function descriptors that must be placed within the range from -WRAP to WRAP. If there's room left, up to FDPLT bytes should be reserved for additional function descriptors. 
Name: _bfinfdpic_get_got_entry; Comment: Compute the location of the next GOT entry, given the allocation data for a range. 
Name: _bfinfdpic_get_fd_entry; Comment: Compute the location of the next function descriptor entry in the GOT, given the allocation data for a range. 
Name: _bfinfdpic_assign_got_entries; Comment: Assign GOT offsets for every GOT entry and function descriptor. Doing everything in a single pass is tricky. 
Name: _bfinfdpic_assign_plt_entries; Comment: Assign GOT offsets to private function descriptors used by PLT entries (or referenced by 32-bit offsets), as well as PLT entries and lazy PLT entries. 
Name: _bfinfdpic_reset_got_plt_entries; Comment: Cancel out any effects of calling _bfinfdpic_assign_got_entries and _bfinfdpic_assign_plt_entries. 
Name: _bfinfdpic_resolve_final_relocs_info; Comment: Follow indirect and warning hash entries so that each got entry points to the final symbol definition. P must point to a pointer to the hash table we're traversing. Since this traversal may modify the hash table, we set this pointer to NULL to indicate we've made a potentially-destructive change to the hash table, so the traversal must be restarted. 
Name: _bfinfdpic_size_got_plt; Comment: Compute the total size of the GOT, the PLT, the dynamic relocations section and the rofixup section. Assign locations for GOT and PLT entries. 
Name: elf32_bfinfdpic_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: _bfinfdpic_check_discarded_relocs; Comment: Check whether any of the relocations was optimized away, and subtract it from the relocation or fixup count. 
Name: elf32_bfinfdpic_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. 
Name: elf32_bfinfdpic_finish_dynamic_symbol; Comment: Perform any actions needed for dynamic symbols. 
Name: bfinfdpic_elf_use_relative_eh_frame; Comment: Decide whether to attempt to turn absptr or lsda encodings in shared libraries into pcrel within the given input section. 
Name: bfinfdpic_elf_encode_eh_address; Comment: Adjust the contents of an eh_frame_hdr section before they're output. 
Name: bfinfdpic_check_relocs; Comment: Look through the relocs for a section during the first phase. Besides handling virtual table relocs for gc, we have to deal with all sorts of PIC-related relocations. We describe below the general plan on how to handle such relocations, even though we only collect information at this point, storing them in hash tables for perusal of later passes. 32 relocations are propagated to the linker output when creating position-independent output. LO16 and HI16 relocations are not supposed to be encountered in this case. LABEL16 should always be resolvable by the linker, since it's only used by branches. LABEL24, on the other hand, is used by calls. If it turns out that the target of a call is a dynamic symbol, a PLT entry must be created for it, which triggers the creation of a private function descriptor and, unless lazy binding is disabled, a lazy PLT entry. GPREL relocations require the referenced symbol to be in the same segment as _gp, but this can only be checked later. All GOT, GOTOFF and FUNCDESC relocations require a .got section to exist. LABEL24 might as well, since it may require a PLT entry, that will require a got. Non-FUNCDESC GOT relocations require a GOT entry to be created regardless of whether the symbol is dynamic. However, since a global symbol that turns out to not be exported may have the same address of a non-dynamic symbol, we don't assign GOT entries at this point, such that we can share them in this case. A relocation for the GOT entry always has to be created, be it to offset a private symbol by the section load address, be it to get the symbol resolved dynamically. FUNCDESC GOT relocations require a GOT entry to be created, and handled as if a FUNCDESC relocation was applied to the GOT entry in an object file. FUNCDESC relocations referencing a symbol that turns out to NOT be dynamic cause a private function descriptor to be created. The FUNCDESC relocation then decays to a 32 relocation that points at the private descriptor. If the symbol is dynamic, the FUNCDESC relocation is propagated to the linker output, such that the dynamic linker creates the canonical descriptor, pointing to the dynamically-resolved definition of the function. Non-FUNCDESC GOTOFF relocations must always refer to non-dynamic symbols that are assigned to the same segment as the GOT, but we can only check this later, after we know the complete set of symbols defined and/or exported. FUNCDESC GOTOFF relocations require a function descriptor to be created and, unless lazy binding is disabled or the symbol is not dynamic, a lazy PLT entry. Since we can't tell at this point whether a symbol is going to be dynamic, we have to decide later whether to create a lazy PLT entry or bind the descriptor directly to the private function. FUNCDESC_VALUE relocations are not supposed to be present in object files, but they may very well be simply propagated to the linker output, since they have no side effect. A function descriptor always requires a FUNCDESC_VALUE relocation. Whether it's in .plt.rel or not depends on whether lazy binding is enabled and on whether the referenced symbol is dynamic. The existence of a lazy PLT requires the resolverStub lazy PLT entry to be present. As for assignment of GOT, PLT and lazy PLT entries, and private descriptors, we might do them all sequentially, but we can do better than that. For example, we can place GOT entries and private function descriptors referenced using 12-bit operands closer to the PIC register value, such that these relocations don't overflow. Those that are only referenced with LO16 relocations could come next, but we may as well place PLT-required function descriptors in the 12-bit range to make them shorter. Symbols referenced with LO16/HI16 may come next, but we may place additional function descriptors in the 16-bit range if we can reliably tell that we've already placed entries that are ever referenced with only LO16. PLT entries are therefore generated as small as possible, while not introducing relocation overflows in GOT or FUNCDESC_GOTOFF relocations. Lazy PLT entries could be generated before or after PLT entries, but not intermingled with them, such that we can have more lazy PLT entries in range for a branch to the resolverStub. The resolverStub should be emitted at the most distant location from the first lazy PLT entry such that it's still in range for a branch, or closer, if there isn't a need for so many lazy PLT entries. Additional lazy PLT entries may be emitted after the resolverStub, as long as branches are still in range. If the branch goes out of range, longer lazy PLT entries are emitted. We could further optimize PLT and lazy PLT entries by giving them priority in assignment to closer-to-gr17 locations depending on the number of occurrences of references to them (assuming a function that's called more often is more important for performance, so its PLT entry should be faster), or taking hints from the compiler. Given infinite time and money... :-) 
Name: elf32_bfin_object_p; Comment: Set the right machine number for a Blackfin ELF file. 
Name: elf32_bfin_print_private_bfd_data; Comment: Display the flags field. 
Name: elf32_bfin_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: bfin_link_hash_table_create; Comment: Create an bfin ELF linker hash table. 
Name: bfin_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: bfin_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: bfin_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: bfin_discard_copies; Comment: This function is called via elf_link_hash_traverse if we are creating a shared object. In the -Bsymbolic case it discards the space allocated to copy PC relative relocs against symbols which are defined in regular objects. For the normal shared case, it discards space for pc-relative relocs that have become local due to symbol visibility changes. We allocated space for them in the check_relocs routine, but we won't fill them in in the relocate_section routine. We also check whether any of the remaining relocations apply against a readonly section, and set the DF_TEXTREL flag in this case. 
Name: bfd_bfin_elf32_create_embedded_relocs; Comment: Given a .data section and a .emreloc in-memory section, store relocation information into the .emreloc section which can be used at runtime to relocate the section. This is called by the linker when the --embedded-relocs switch is used. This is called after the add_symbols entry point has been called for all the objects, and before the final_link entry point is called. 
Name: _bfd_cr16_elf_create_got_section; Comment: Create the GOT section. 
Name: elf_cr16_reloc_type_lookup; Comment: Retrieve a howto ptr using a BFD reloc_code. 
Name: elf_cr16_info_to_howto; Comment: Retrieve a howto ptr using an internal relocation entry. 
Name: cr16_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: cr16_elf_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: elf32_cr16_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: elf32_cr16_relocate_section; Comment: Relocate a CR16 ELF section. 
Name: elf32_cr16_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses elf32_cr16_relocate_section. 
Name: elf32_cr16_link_hash_newfunc; Comment: Create an entry in an CR16 ELF linker hash table. 
Name: elf32_cr16_link_hash_table_create; Comment: Create an cr16 ELF linker hash table. 
Name: _bfd_cr16_elf_final_write_processing; Comment: The final processing done just before writing out a CR16 ELF object file. This gets the CR16 architecture right based on the machine number. 
Name: _bfd_cr16_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_cr16_relax_section; Comment: This function handles relaxing for the CR16. There's quite a few relaxing opportunites available on the CR16: _* bcond:24 -> bcond:16____ 1 byte _* bcond:16 -> bcond:8____ 1 byte _* arithmetic imm32 -> arithmetic imm20__ 12 bits _* arithmetic imm20/imm16 -> arithmetic imm4_ 12/16 bits Symbol- and reloc-reading infrastructure copied from elf-m10200.c. 
Name: _bfd_cr16_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: _bfd_cr16_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: _bfd_cr16_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: _bfd_cr16_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: _bfd_cr16_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: bfd_cr16_elf32_create_embedded_relocs; Comment: Given a .data.rel section and a .emreloc in-memory section, store relocation information into the .emreloc section which can be used at runtime to relocate the section. This is called by the linker when the --embedded-relocs switch is used. This is called after the add_symbols entry point has been called for all the objects, and before the final_link entry point is called. 
Name: _bfd_cr16_elf_reloc_type_class; Comment: Classify relocation types, such that combreloc can sort them properly. 
Name: cris_info_to_howto_rela; Comment: Set the howto pointer for an CRIS ELF reloc. 
Name: cris_elf_grok_prstatus; Comment: Support for core dump NOTE sections. The slightly unintuitive code layout is an attempt to keep at least some similarities with other ports, hoping to simplify general changes, while still keeping Linux/CRIS and Linux/CRISv32 code apart. 
Name: elf_cris_link_hash_newfunc; Comment: Create an entry in a CRIS ELF linker hash table. 
Name: elf_cris_link_hash_table_create; Comment: Create a CRIS ELF linker hash table. 
Name: cris_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines, with a few tweaks. 
Name: cris_elf_relocate_section; Comment: Relocate an CRIS ELF section. See elf32-fr30.c, from where this was copied, for further comments. 
Name: elf_cris_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_cris_finish_dynamic_sections; Comment: Finish up the dynamic sections. Do *not* emit relocs here, as their offsets were changed, as part of -z combreloc handling, from those we computed. 
Name: cris_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: cris_elf_plt_sym_val; Comment: The elf_backend_plt_sym_val hook function. 
Name: elf_cris_adjust_gotplt_to_got; Comment: Make sure we emit a GOT entry if the symbol was supposed to have a PLT entry but we found we will not create any. Called when we find we will not have any PLT for this symbol, by for example elf_cris_adjust_dynamic_symbol when we're doing a proper dynamic link, or elf_cris_size_dynamic_sections if no dynamic sections will be created (we're only linking static objects). 
Name: elf_cris_try_fold_plt_to_got; Comment: Try to fold PLT entries with GOT entries. There are two cases when we want to do this: - When all PLT references are GOTPLT references, and there are GOT references, and this is not the executable. We don't have to generate a PLT at all. - When there are both (ordinary) PLT references and GOT references, and this isn't the executable. We want to make the PLT reference use the ordinary GOT entry rather than R_CRIS_JUMP_SLOT, a run-time dynamically resolved GOTPLT entry, since the GOT entry will have to be resolved at startup anyway. Though the latter case is handled when room for the PLT is allocated, not here. By folding into the GOT, we may need a round-trip to a PLT in the executable for calls, a loss in performance. Still, losing a reloc is a win in size and at least in start-up time. Note that this function is called before symbols are forced local by version scripts. The differing cases are handled by elf_cris_hide_symbol. 
Name: elf_cris_hide_symbol; Comment: Our own version of hide_symbol, so that we can adjust a GOTPLT reloc to use a GOT entry (and create one) rather than requiring a GOTPLT entry. 
Name: elf_cris_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_cris_copy_indirect_symbol; Comment: Adjust our "subclass" elements for an indirect symbol. 
Name: cris_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: elf_cris_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf_cris_discard_excess_dso_dynamics; Comment: This function is called via elf_cris_link_hash_traverse if we are creating a shared object. In the -Bsymbolic case, it discards the space allocated to copy PC relative relocs against symbols which are defined in regular objects. For the normal non-symbolic case, we also discard space for relocs that have become local due to symbol visibility changes. We allocated space for them in the check_relocs routine, but we won't fill them in in the relocate_section routine. 
Name: elf_cris_discard_excess_program_dynamics; Comment: This function is called via elf_cris_link_hash_traverse if we are *not* creating a shared object. We discard space for relocs for symbols put in the .got, but which we found we do not have to resolve at run-time. 
Name: cris_elf_object_p; Comment: Reject a file depending on presence and expectation of prefixed underscores on symbols. 
Name: cris_elf_final_write_processing; Comment: Mark presence or absence of leading underscore. Set machine type flags from mach type. 
Name: cris_elf_set_mach_from_flags; Comment: Set the mach type from e_flags value. 
Name: cris_elf_print_private_bfd_data; Comment: Display the flags field. 
Name: cris_elf_merge_private_bfd_data; Comment: Don't mix files with and without a leading underscore. 
Name: cris_elf_copy_private_bfd_data; Comment: Do side-effects of e_flags copying to obfd. 
Name: elf_cris_got_elt_size; Comment: The elf_backend_got_elt_size worker. For one symbol, we can have up to two GOT entries from three types with two different sizes. We handle it as a single entry, so we can use the regular offset-calculation machinery. 
Name: elf_crx_reloc_type_lookup; Comment: Retrieve a howto ptr using a BFD reloc_code. 
Name: elf_crx_info_to_howto; Comment: Retrieve a howto ptr using an internal relocation entry. 
Name: crx_elf_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: elf32_crx_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: elf32_crx_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses elf32_crx_relocate_section. 
Name: elf32_crx_relocate_section; Comment: Relocate a CRX ELF section. 
Name: elf32_crx_relax_section; Comment: This function handles relaxing for the CRX. There's quite a few relaxing opportunites available on the CRX: _* bal/bcond:32 -> bal/bcond:16____ 2 bytes _* bcond:16 -> bcond:8_____ 2 bytes _* cmpbcond:24 -> cmpbcond:8____ 2 bytes _* arithmetic imm32 -> arithmetic imm16___ 2 bytes Symbol- and reloc-reading infrastructure copied from elf-m10200.c. 
Name: csky_elf_reloc_type_lookup; Comment: NOTICE! The way the following two look-up functions work demands that BFD_RELOC_CKCORE_xxx are defined contiguously. 
Name: csky_get_insn_32; Comment: We can't change vectors in the bfd target which will apply to data sections, however we only do this to the text sections. 
Name: elf32_csky_create_or_find_stub_sec; Comment: Find or create a stub section. Returns a pointer to the stub section, and the section to which the stub section will be attached (in *LINK_SEC_P). LINK_SEC_P may be NULL. 
Name: elf32_csky_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: csky_type_of_stub; Comment: Determine the type of stub needed, if any, for a call. 
Name: csky_elf_link_hash_newfunc; Comment: Create an entry in an C-SKY ELF linker hash table. 
Name: csky_elf_link_hash_table_free; Comment: Free the derived linker hash table. 
Name: csky_elf_link_hash_table_create; Comment: Create an CSKY elf linker hash table. 
Name: csky_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: csky_allocate_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: csky_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: csky_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: csky_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: csky_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: csky_elf_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: csky_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: is_mapping_symbol_name; Comment: Match symbol names created by tc-csky.c:make_mapping_symbol. 
Name: csky_elf_is_target_special_symbol; Comment: Treat mapping symbols as special target symbols. 
Name: csky_elf_maybe_function_sym; Comment: Exclude mapping symbols from being treated as function symbols by objdump and nm. 
Name: csky_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: csky_elf_set_private_flags; Comment: Function to keep CSKY specific flags in the ELF header. 
Name: csky_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: csky_elf_ignore_discarded_relocs; Comment: Ignore the discarded relocs in special sections in link time. 
Name: elf32_csky_gc_mark_extra_sections; Comment: .csky_stack_size are not referenced directly. This pass marks all of them as required. 
Name: elf32_csky_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: sym_must_create_stub; Comment: If the symbol referenced by bsr is defined in shared object file, or it is a weak symbol and we aim to create shared object file, we must create a stub for this bsr. 
Name: csky_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: elf32_csky_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: elf32_csky_size_stubs; Comment: Determine and set the size of the stub section for a final link. The basic idea here is to examine all the relocations looking for PC-relative calls to a target that is unreachable with a "bsr" instruction. 
Name: elf32_csky_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. We also set up the .plt entries for statically linked PIC functions here. This function is called via arm_elf_finish in the linker. 
Name: elf32_csky_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: elf32_csky_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: csky_elf_relocate_section; Comment: Relocate a csky section. 
Name: elf32_csky_obj_attrs_arg_type; Comment: Determine whether an object attribute tag takes an integer, a string or both. 
Name: elf32_csky_obj_attrs_handle_unknown; Comment: Attribute numbers >=64 (mod 128) can be safely ignored. 
Name: d10v_info_to_howto_rel; Comment: Set the howto pointer for an D10V ELF reloc. 
Name: elf32_d10v_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: elf32_d10v_relocate_section; Comment: Relocate a D10V ELF section. 
Name: d30v_info_to_howto_rel; Comment: Set the howto pointer for an D30V ELF reloc (type REL). 
Name: d30v_info_to_howto_rela; Comment: Set the howto pointer for an D30V ELF reloc (type RELA). 
Name: elf32_dlx_relocate16; Comment: ELF relocs are against symbols. If we are producing relocatable output, and the reloc is against an external symbol, and nothing has given us any additional addend, the resulting reloc will also be against the same symbol. In such a case, we don't want to change anything about the way the reloc is handled, since it will all be done at final link time. Rather than put special case code into bfd_perform_relocation, all the reloc types use this howto function. It just short circuits the reloc if producing relocatable output against an external symbol. 
Name: elf32_dlx_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: elf32_dlx_reloc_type_lookup; Comment: Given a BFD reloc type, return a howto structure. 
Name: epiphany_reloc_type_lookup; Comment: Map BFD reloc types to EPIPHANY ELF reloc types. 
Name: epiphany_elf_relax_section; Comment: This function handles relaxing for the epiphany. Dummy placeholder for future optimizations. 
Name: epiphany_info_to_howto_rela; Comment: Set the howto pointer for a EPIPHANY ELF reloc. 
Name: epiphany_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines. 
Name: epiphany_elf_relocate_section; Comment: Relocate an EPIPHANY ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: fr30_elf_i20_reloc; Comment: Utility to actually perform an R_FR30_20 reloc. 
Name: fr30_elf_i32_reloc; Comment: Utility to actually perform a R_FR30_48 reloc. 
Name: fr30_info_to_howto_rela; Comment: Set the howto pointer for an FR30 ELF reloc. 
Name: fr30_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines, but a few relocs, we have to do them ourselves. 
Name: fr30_elf_relocate_section; Comment: Relocate an FR30 ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: fr30_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: fr30_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: frvfdpic_elf_link_hash_table_create; Comment: Create an FRV ELF linker hash table. 
Name: frvfdpic_relocs_info_hash; Comment: Compute a hash with the key fields of an frvfdpic_relocs_info entry. 
Name: frvfdpic_relocs_info_eq; Comment: Test whether the key fields of two frvfdpic_relocs_info entries are identical. 
Name: frvfdpic_relocs_info_find; Comment: Find or create an entry in a hash table HT that matches the key fields of the given ENTRY. If it's not found, memory for a new entry is allocated in ABFD's obstack. 
Name: frvfdpic_relocs_info_for_global; Comment: Obtain the address of the entry in HT associated with H's symbol + addend, creating a new entry if none existed. ABFD is only used for memory allocation purposes. 
Name: frvfdpic_relocs_info_for_local; Comment: Obtain the address of the entry in HT associated with the SYMNDXth local symbol of the input bfd ABFD, plus the addend, creating a new entry if none existed. 
Name: frvfdpic_pic_merge_early_relocs_info; Comment: Merge fields set by check_relocs() of two entries that end up being mapped to the same (presumably global) symbol. 
Name: _frvfdpic_add_dyn_reloc; Comment: Add a dynamic relocation to the SRELOC section. 
Name: _frvfdpic_add_rofixup; Comment: Add a fixup to the ROFIXUP section. 
Name: _frvfdpic_osec_to_segment; Comment: Find the segment number in which OSEC, and output section, is located. 
Name: tls_biased_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving TLSMOFF relocation. This is PT_TLS segment p_vaddr, plus the 2048-16 bias. 
Name: _frvfdpic_emit_got_relocs_plt_entries; Comment: Generate relocations for GOT entries, function descriptors, and code for PLT and lazy PLT entries. 
Name: elf32_frv_relocate_gprel12; Comment: Handle an FRV small data reloc. 
Name: elf32_frv_relocate_gprelu12; Comment: Handle an FRV small data reloc. for the u12 field. 
Name: elf32_frv_relocate_hi16; Comment: Handle an FRV ELF HI16 reloc. 
Name: elf32_frv_relocate_label24; Comment: Perform the relocation for the CALL label24 instruction. 
Name: frv_info_to_howto_rela; Comment: Set the howto pointer for an FRV ELF reloc. 
Name: frvfdpic_info_to_howto_rel; Comment: Set the howto pointer for an FRV ELF REL reloc. 
Name: frv_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines, but a few relocs, we have to do them ourselves. 
Name: elf32_frv_relocate_section; Comment: Relocate an FRV ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: elf32_frv_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf32_frv_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put .comm items in .scomm, and not .comm. 
Name: _frvfdpic_link_omit_section_dynsym; Comment: We need dynamic symbols for every section, since segments can relocate independently. 
Name: _frv_create_got_section; Comment: Create a .got section, as well as its additional info field. This is almost entirely copied from elflink.c:_bfd_elf_create_got_section(). 
Name: elf32_frvfdpic_create_dynamic_sections; Comment: Make sure the got and plt sections exist, and that our pointers in the link hash table point to them. 
Name: _frvfdpic_count_nontls_entries; Comment: Compute the total GOT and PLT size required by each symbol in each range. Symbols may require up to 4 words in the GOT: an entry pointing to the symbol, an entry pointing to its function descriptor, and a private function descriptors taking two words. 
Name: _frvfdpic_count_tls_entries; Comment: Compute the total GOT size required by each TLS symbol in each range. Symbols may require up to 5 words in the GOT: an entry holding the TLS offset for the symbol, and an entry with a full TLS descriptor taking 4 words. 
Name: _frvfdpic_count_relocs_fixups; Comment: Compute the number of dynamic relocations and fixups that a symbol requires, and add (or subtract) from the grand and per-symbol totals. 
Name: _frvfdpic_relax_tls_entries; Comment: Look for opportunities to relax TLS relocations. We can assume we're linking the main executable or a static-tls library, since otherwise we wouldn't have got here. When relaxing, we have to first undo any previous accounting of TLS uses of fixups, dynamic relocations, GOT and PLT entries. 
Name: _frvfdpic_count_got_plt_entries; Comment: Compute the total GOT and PLT size required by each symbol in each range. Symbols may require up to 4 words in the GOT: an entry pointing to the symbol, an entry pointing to its function descriptor, and a private function descriptors taking two words. 
Name: _frvfdpic_compute_got_alloc_data; Comment: Determine the positive and negative ranges to be used by each offset range in the GOT. FDCUR and CUR, that must be aligned to a double-word boundary, are the minimum (negative) and maximum (positive) GOT offsets already used by previous ranges, except for an ODD entry that may have been left behind. GOT and FD indicate the size of GOT entries and function descriptors that must be placed within the range from -WRAP to WRAP. If there's room left, up to FDPLT bytes should be reserved for additional function descriptors. 
Name: _frvfdpic_get_got_entry; Comment: Compute the location of the next GOT entry, given the allocation data for a range. 
Name: _frvfdpic_get_fd_entry; Comment: Compute the location of the next function descriptor entry in the GOT, given the allocation data for a range. 
Name: _frvfdpic_get_tlsdesc_entry; Comment: Compute the location of the next TLS descriptor entry in the GOT, given the allocation data for a range. 
Name: _frvfdpic_assign_got_entries; Comment: Assign GOT offsets for every GOT entry and function descriptor. Doing everything in a single pass is tricky. 
Name: _frvfdpic_assign_plt_entries; Comment: Assign GOT offsets to private function descriptors used by PLT entries (or referenced by 32-bit offsets), as well as PLT entries and lazy PLT entries. 
Name: _frvfdpic_reset_got_plt_entries; Comment: Cancel out any effects of calling _frvfdpic_assign_got_entries and _frvfdpic_assign_plt_entries. 
Name: _frvfdpic_resolve_final_relocs_info; Comment: Follow indirect and warning hash entries so that each got entry points to the final symbol definition. P must point to a pointer to the hash table we're traversing. Since this traversal may modify the hash table, we set this pointer to NULL to indicate we've made a potentially-destructive change to the hash table, so the traversal must be restarted. 
Name: _frvfdpic_size_got_plt; Comment: Compute the total size of the GOT, the PLT, the dynamic relocations section and the rofixup section. Assign locations for GOT and PLT entries. 
Name: elf32_frvfdpic_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: _frvfdpic_check_discarded_relocs; Comment: Check whether any of the relocations was optimized away, and subtract it from the relocation or fixup count. 
Name: _frvfdpic_relax_got_plt_entries; Comment: Look for opportunities to relax TLS relocations. We can assume we're linking the main executable or a static-tls library, since otherwise we wouldn't have got here. 
Name: elf32_frv_finish_dynamic_sections; Comment: Fill in code and data in dynamic sections. 
Name: elf32_frvfdpic_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. 
Name: elf32_frvfdpic_finish_dynamic_symbol; Comment: Perform any actions needed for dynamic symbols. 
Name: frvfdpic_elf_use_relative_eh_frame; Comment: Decide whether to attempt to turn absptr or lsda encodings in shared libraries into pcrel within the given input section. 
Name: frvfdpic_elf_encode_eh_address; Comment: Adjust the contents of an eh_frame_hdr section before they're output. 
Name: elf32_frv_check_relocs; Comment: Look through the relocs for a section during the first phase. Besides handling virtual table relocs for gc, we have to deal with all sorts of PIC-related relocations. We describe below the general plan on how to handle such relocations, even though we only collect information at this point, storing them in hash tables for perusal of later passes. 32 relocations are propagated to the linker output when creating position-independent output. LO16 and HI16 relocations are not supposed to be encountered in this case. LABEL16 should always be resolvable by the linker, since it's only used by branches. LABEL24, on the other hand, is used by calls. If it turns out that the target of a call is a dynamic symbol, a PLT entry must be created for it, which triggers the creation of a private function descriptor and, unless lazy binding is disabled, a lazy PLT entry. GPREL relocations require the referenced symbol to be in the same segment as _gp, but this can only be checked later. All GOT, GOTOFF and FUNCDESC relocations require a .got section to exist. LABEL24 might as well, since it may require a PLT entry, that will require a got. Non-FUNCDESC GOT relocations require a GOT entry to be created regardless of whether the symbol is dynamic. However, since a global symbol that turns out to not be exported may have the same address of a non-dynamic symbol, we don't assign GOT entries at this point, such that we can share them in this case. A relocation for the GOT entry always has to be created, be it to offset a private symbol by the section load address, be it to get the symbol resolved dynamically. FUNCDESC GOT relocations require a GOT entry to be created, and handled as if a FUNCDESC relocation was applied to the GOT entry in an object file. FUNCDESC relocations referencing a symbol that turns out to NOT be dynamic cause a private function descriptor to be created. The FUNCDESC relocation then decays to a 32 relocation that points at the private descriptor. If the symbol is dynamic, the FUNCDESC relocation is propagated to the linker output, such that the dynamic linker creates the canonical descriptor, pointing to the dynamically-resolved definition of the function. Non-FUNCDESC GOTOFF relocations must always refer to non-dynamic symbols that are assigned to the same segment as the GOT, but we can only check this later, after we know the complete set of symbols defined and/or exported. FUNCDESC GOTOFF relocations require a function descriptor to be created and, unless lazy binding is disabled or the symbol is not dynamic, a lazy PLT entry. Since we can't tell at this point whether a symbol is going to be dynamic, we have to decide later whether to create a lazy PLT entry or bind the descriptor directly to the private function. FUNCDESC_VALUE relocations are not supposed to be present in object files, but they may very well be simply propagated to the linker output, since they have no side effect. A function descriptor always requires a FUNCDESC_VALUE relocation. Whether it's in .plt.rel or not depends on whether lazy binding is enabled and on whether the referenced symbol is dynamic. The existence of a lazy PLT requires the resolverStub lazy PLT entry to be present. As for assignment of GOT, PLT and lazy PLT entries, and private descriptors, we might do them all sequentially, but we can do better than that. For example, we can place GOT entries and private function descriptors referenced using 12-bit operands closer to the PIC register value, such that these relocations don't overflow. Those that are only referenced with LO16 relocations could come next, but we may as well place PLT-required function descriptors in the 12-bit range to make them shorter. Symbols referenced with LO16/HI16 may come next, but we may place additional function descriptors in the 16-bit range if we can reliably tell that we've already placed entries that are ever referenced with only LO16. PLT entries are therefore generated as small as possible, while not introducing relocation overflows in GOT or FUNCDESC_GOTOFF relocations. Lazy PLT entries could be generated before or after PLT entries, but not intermingled with them, such that we can have more lazy PLT entries in range for a branch to the resolverStub. The resolverStub should be emitted at the most distant location from the first lazy PLT entry such that it's still in range for a branch, or closer, if there isn't a need for so many lazy PLT entries. Additional lazy PLT entries may be emitted after the resolverStub, as long as branches are still in range. If the branch goes out of range, longer lazy PLT entries are emitted. We could further optimize PLT and lazy PLT entries by giving them priority in assignment to closer-to-gr17 locations depending on the number of occurrences of references to them (assuming a function that's called more often is more important for performance, so its PLT entry should be faster), or taking hints from the compiler. Given infinite time and money... :-) 
Name: elf32_frv_machine; Comment: Return the machine subcode from the ELF e_flags header. 
Name: elf32_frv_object_p; Comment: Set the right machine number for a FRV ELF file. 
Name: frv_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: frv_elf_arch_extension_p; Comment: Return true if the architecture described by elf header flag EXTENSION is an extension of the architecture described by BASE. 
Name: frv_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_frv_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: bfd_elf_ft32_diff_reloc; Comment: Perform a diff relocation. Nothing to do, as the difference value is already written into the section's contents. 
Name: ft32_info_to_howto_rela; Comment: Set the howto pointer for an FT32 ELF reloc. 
Name: ft32_elf_relocate_section; Comment: Relocate an FT32 ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: ; Comment: Relaxation. 
Name: elf32_ft32_is_diff_reloc; Comment: Returns whether the relocation type passed is a diff reloc. 
Name: elf32_ft32_adjust_diff_reloc_value; Comment: Reduce the diff value written in the section by count if the shrinked insn address happens to fall between the two symbols for which this diff reloc was emitted. 
Name: elf32_ft32_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: elf32_ft32_relax_is_branch_target; Comment: Return TRUE if LOC can be a target of a branch, jump or call. 
Name: elf_generic_info_to_howto; Comment: pcrel_offset 
Name: special; Comment: Special handling for H8/300 relocs. We only come here for pcrel stuff and return normally if not an -r link. When doing -r, we can't do any arithmetic for the pcrel stuff, because we support relaxing on the H8/300 series chips. 
Name: elf32_h8_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: elf32_h8_relocate_section; Comment: Relocate an H8 ELF section. 
Name: elf32_h8_mach; Comment: Object files encode the specific H8 model they were compiled for in the ELF flags field. Examine that field and return the proper BFD machine type for the object file. 
Name: elf32_h8_final_write_processing; Comment: The final processing done just before writing out a H8 ELF object file. We use this opportunity to encode the BFD machine type into the flags field in the object file. 
Name: elf32_h8_object_p; Comment: Return nonzero if ABFD represents a valid H8 ELF object file; also record the encoded machine type found in the ELF flags. 
Name: elf32_h8_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. The only data we need to copy at this time is the architecture/machine information. 
Name: elf32_h8_relax_section; Comment: This function handles relaxing for the H8.. There are a few relaxing opportunities available on the H8: jmp/jsr:24_ ->_ bra/bsr:8__2 bytes The jmp may be completely eliminated if the previous insn is a conditional branch to the insn after the jump. In that case we invert the branch and delete the jump and save 4 bytes. bCC:16_ ->_ bCC:8__ 2 bytes bsr:16_ ->_ bsr:8__ 2 bytes bset:16_ ->_ bset:8__ 2 bytes bset:24/32_ ->_ bset:8__ 4 bytes (also applicable to other bit manipulation instructions) mov.b:16_ ->_ mov.b:8__ 2 bytes mov.b:24/32 ->_ mov.b:8__ 4 bytes bset:24/32_ ->_ bset:16__ 2 bytes (also applicable to other bit manipulation instructions) mov.[bwl]:24/32 ->_ mov.[bwl]:16__ 2 bytes mov.[bwl] @(displ:24/32+ERx) -> mov.[bwl] @(displ:16+ERx)_4 bytes. 
Name: elf32_h8_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: elf32_h8_symbol_address_p; Comment: Return TRUE if a symbol exists at the given address, else return FALSE. 
Name: elf32_h8_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses elf32_h8_relocate_section. 
Name: hppa_link_hash_newfunc; Comment: Initialize an entry in the link hash table. 
Name: elf32_hppa_link_hash_table_free; Comment: Free the derived linker hash table. 
Name: elf32_hppa_link_hash_table_create; Comment: Create the derived linker hash table. The PA ELF port uses the derived hash table to keep information specific to the PA ELF linker (without using static variables). 
Name: elf32_hppa_init_stub_bfd; Comment: Initialize the linker stubs BFD so that we can use it for linker created dynamic sections. 
Name: hppa_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: hppa_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: hppa_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: hppa_type_of_stub; Comment: Determine the type of stub needed, if any, for a call. 
Name: hppa_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: elf32_hppa_object_p; Comment: Return nonzero if ABFD represents an HPPA ELF32 file. Additionally we set the default architecture and machine. 
Name: elf32_hppa_create_dynamic_sections; Comment: Create the .plt and .got sections, and set up our hash table short-cuts to various dynamic sections. 
Name: elf32_hppa_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: hppa32_elf_local_refcounts; Comment: Return a pointer to the local GOT, PLT and TLS reference counts for ABFD. Returns NULL if the storage allocation fails. 
Name: elf32_hppa_check_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the global offset table, procedure linkage table, and dynamic reloc sections. At this point we haven't necessarily read all the input files. 
Name: elf32_hppa_gc_mark_hook; Comment: Return the section that should be marked against garbage collection for a given relocation. 
Name: elf32_hppa_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf32_hppa_hide_symbol; Comment: Our own version of hide_symbol, so that we can keep plt entries for plabels. 
Name: alias_readonly_dynrelocs; Comment: Return true if we have dynamic relocs against H or any of its weak aliases, that apply to read-only sections. Cannot be used after size_dynamic_sections. 
Name: elf32_hppa_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: ensure_undef_dynamic; Comment: If EH is undefined, make it dynamic if that makes sense. 
Name: allocate_plt_static; Comment: Allocate space in the .plt for entries that won't have relocations. ie. plabel entries. 
Name: allocate_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for global syms. 
Name: clobber_millicode_symbols; Comment: This function is called via elf_link_hash_traverse to force millicode symbols local so they do not end up as globals in the dynamic symbol table. We ought to be able to do this in adjust_dynamic_symbol, but our adjust_dynamic_symbol is not called for all dynamic symbols. Arguably, this is a bug in elf_adjust_dynamic_symbol. 
Name: elf32_hppa_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf32_hppa_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: elf32_hppa_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: group_sections; Comment: See whether we can group stub sections together. Grouping stub sections may result in fewer stubs. More importantly, we need to put all .init* and .fini* stubs at the beginning of the .init or .fini output sections respectively, because glibc splits the _init and _fini functions into multiple parts. Putting a stub in the middle of a function is not a good idea. 
Name: get_local_syms; Comment: Read in all local syms for all input bfds, and create hash entries for export stubs if we are building a multi-subspace shared lib. Returns -1 on error, 1 if export stubs created, 0 otherwise. 
Name: ; Comment: Determine and set the size of the stub section for a final link. The basic idea here is to examine all the relocations looking for PC-relative calls to a target that is unreachable with a "bl" instruction. 
Name: elf32_hppa_set_gp; Comment: For a final link, this function is called after we have sized the stubs to provide a value for __gp. 
Name: elf32_hppa_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. We also set up the .plt entries for statically linked PIC functions here. This function is called via hppaelf_finish in the linker. 
Name: dtpoff_base; Comment: Return the base vma address which should be subtracted from the real address when resolving a dtpoff relocation. This is PT_TLS segment p_vaddr. 
Name: tpoff; Comment: Return the relocation value for R_PARISC_TLS_TPOFF*.. 
Name: elf32_hppa_final_link; Comment: Perform a final link. 
Name: hppa_record_segment_addr; Comment: Record the lowest address for the data and text segments. 
Name: final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: elf32_hppa_relocate_section; Comment: Relocate an HPPA ELF section. 
Name: elf32_hppa_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf32_hppa_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf32_hppa_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf32_hppa_elf_get_symbol_type; Comment: Called when writing out an object file to decide the type of a symbol. 
Name: elf_i386_is_local_label_name; Comment: Return whether a symbol name implies a local label. The UnixWare 2.1 cc generates temporary symbols that start with .X, so we recognize them here. FIXME: do other SVR4 compilers also use .X?. If so, we should move the .X recognition into _bfd_elf_is_local_label_name. 
Name: elf_i386_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf_i386_check_tls_transition; Comment: Return TRUE if the TLS access code sequence support transition from R_TYPE. 
Name: elf_i386_tls_transition; Comment: Return TRUE if the TLS access transition is OK or no transition will be performed. Update R_TYPE if there is a transition. 
Name: elf_i386_convert_load_reloc; Comment: With the local symbol, foo, we convert mov foo@GOT[(%reg1)], %reg2 to lea foo[@GOTOFF(%reg1)], %reg2 and convert call/jmp *foo@GOT[(%reg)] to nop call foo/jmp foo nop When PIC is false, convert test %reg1, foo@GOT[(%reg2)] to test $foo, %reg1 and convert binop foo@GOT[(%reg1)], %reg2 to binop $foo, %reg2 where binop is one of adc, add, and, cmp, or, sbb, sub, xor instructions. 
Name: elf_i386_scan_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the global offset table, and procedure linkage table. 
Name: elf_i386_fake_sections; Comment: Set the correct type for an x86 ELF section. We do this by the section name, which is a hack, but ought to work. 
Name: elf_i386_tpoff; Comment: Return the relocation value for @tpoff relocation if STT_TLS virtual address is ADDRESS. 
Name: elf_i386_relocate_section; Comment: Relocate an i386 ELF section. 
Name: elf_i386_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_i386_finish_local_dynamic_symbol; Comment: Finish up local dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_i386_pie_finish_undefweak_symbol; Comment: Finish up undefined weak symbol handling in PIE. Fill its PLT entry here since undefined weak symbol may not be dynamic and may not be called for elf_i386_finish_dynamic_symbol. 
Name: elf_i386_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf_i386_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: ; Comment: Fill PLT/GOT entries and allocate dynamic relocations for local STT_GNU_IFUNC symbols, which aren't in the ELF linker hash table. It has to be done before elf_link_sort_relocs is called so that dynamic relocations are properly sorted. 
Name: elf_i386_get_synthetic_symtab; Comment: Similar to _bfd_elf_get_synthetic_symtab. Support PLTs with all dynamic relocations. 
Name: elf_i386_link_setup_gnu_properties; Comment: Set up i386 GNU properties. Return the first relocatable ELF input with GNU properties if found. Otherwise, return NULL. 
Name: elf_i386_fbsd_init_file_header; Comment: The kernel recognizes executables as valid only if they carry a "FreeBSD" label in the ELF header. So we put this label on all executables and (for simplicity) also all other object files. 
Name: elf32_i386_copy_solaris_special_section_fields; Comment: Called to set the sh_flags, sh_link and sh_info fields of OSECTION which has a type >= SHT_LOOS. Returns TRUE if these fields were initialised FALSE otherwise. ISECTION is the best guess matching section from the input bfd IBFD, but it might be NULL. 
Name: elf32_iamcu_elf_object_p; Comment: Intel MCU support. 
Name: ip2k_reloc_type_lookup; Comment: Map BFD reloc types to IP2K ELF reloc types. 
Name: symbol_value; Comment: Return the value of the symbol associated with the relocation IREL. 
Name: ip2k_is_switch_table_128; Comment: Determine if the instruction sequence matches that for the prologue of a switch dispatch table with fewer than 128 entries. _ sc _ page_ $nnn0 _ jmp_ $nnn0 _ add_ w,wreg _ add_ pcl,w addr=> _ page_ $nnn1 _ jmp_ $nnn1 _ page_ $nnn2 _ jmp_ $nnn2 _ ... _ page_ $nnnN _ jmp_ $nnnN After relaxation. _ sc _ page_ $nnn0 _ jmp_ $nnn0 _ add_ pcl,w addr=> _ jmp_ $nnn1 _ jmp_ $nnn2 _ ... _ jmp_ $nnnN 
Name: ip2k_is_switch_table_256; Comment: Determine if the instruction sequence matches that for the prologue switch dispatch table with fewer than 256 entries but more than 127. Before relaxation. _ push_ %lo8insn(label) ; Push address of table_ push_ %hi8insn(label) _ add_ w,wreg_ ; index2 => offset_ snc___ ; CARRY SET?_ inc_ 1(sp)__ ; Propagate MSB into table address_ add_ 2(sp),w_ ; Add low bits of offset to table address_ snc___ ; and handle any carry-out_ inc_ 1(sp) addr=> _ page_ __indjmp_ ; Do an indirect jump to that location_ jmp_ __indjmp label:___ ; case dispatch table starts here_ page_ $nnn1 _ jmp_ $nnn1 _ page_ $nnn2 _ jmp_ $nnn2 _ ... _ page_ $nnnN _ jmp_ $nnnN After relaxation. _ push_ %lo8insn(label) ; Push address of table_ push_ %hi8insn(label) _ add_ 2(sp),w_ ; Add low bits of offset to table address_ snc___ ; and handle any carry-out_ inc_ 1(sp) addr=> _ page_ __indjmp_ ; Do an indirect jump to that location_ jmp_ __indjmp label:___ ; case dispatch table starts here_ jmp_ $nnn1 _ jmp_ $nnn2 _ ... _ jmp_ $nnnN 
Name: ip2k_nominal_page_bits; Comment: Returns the expected page state for the given instruction not including the effect of page instructions. 
Name: adjust_all_relocations; Comment: Adjust all the relocations entries after adding or inserting instructions. 
Name: ip2k_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: ip2k_elf_relax_section_page; Comment: This function handles relaxation of a section in a specific page. 
Name: ip2k_elf_relax_section; Comment: This function handles relaxing for the ip2k. Principle: Start with the first page and remove page instructions that are not require on this first page. By removing page instructions more code will fit into this page - repeat until nothing more can be achieved for this page. Move on to the next page. Processing the pages one at a time from the lowest page allows a removal only policy to be used - pages can be removed but are never reinserted. 
Name: ip2k_info_to_howto_rela; Comment: Set the howto pointer for a IP2K ELF reloc. 
Name: ip2k_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines. 
Name: ip2k_elf_relocate_section; Comment: Relocate a IP2K ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: iq2000_elf_howto_hi16_reloc; Comment: pcrel_offset 
Name: iq2000_reloc_type_lookup; Comment: Map BFD reloc types to IQ2000 ELF reloc types. 
Name: iq2000_final_link_relocate; Comment: Perform a single relocation._ By default we use the standard BFD routines. 
Name: iq2000_info_to_howto_rela; Comment: Set the howto pointer for a IQ2000 ELF reloc. 
Name: iq2000_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc._ 
Name: iq2000_elf_relocate_section; Comment: Relocate a IQ2000 ELF section. There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly._ 
Name: iq2000_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation._
Name: elf32_iq2000_machine; Comment: Return the MACH for an e_flags value. 
Name: iq2000_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: iq2000_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: lm32_elf_link_hash_table_create; Comment: Create an lm32 ELF linker hash table. 
Name: _lm32fdpic_add_rofixup; Comment: Add a fixup to the ROFIXUP section. 
Name: create_rofixup_section; Comment: Create .rofixup sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: lm32_info_to_howto_rela; Comment: Set the howto pointer for an Lattice Mico32 ELF reloc. 
Name: lm32_elf_object_p; Comment: Set the right machine number for an Lattice Mico32 ELF file. 
Name: lm32_elf_final_write_processing; Comment: Set machine type flags just before file is written out. 
Name: lm32_elf_assign_gp; Comment: Set the GP value for OUTPUT_BFD. Returns FALSE if this is a dangerous relocation. 
Name: lm32_elf_final_gp; Comment: We have to figure out the gp value, so that we can adjust the symbol value correctly. We look up the symbol _gp in the output BFD. If we can't find it, we're stuck. We cache it in the ELF target data. We don't need to adjust the symbol value for an external symbol if we are producing relocatable output. 
Name: _lm32fdpic_osec_to_segment; Comment: Find the segment number in which OSEC, and output section, is located. 
Name: _lm32fdpic_osec_readonly_p; Comment: Determine if an output section is read-only. 
Name: lm32_elf_relocate_section; Comment: Relocate a section 
Name: lm32_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: lm32_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: lm32_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: lm32_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: allocate_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: lm32_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: lm32_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: m32c_info_to_howto_rela; Comment: Set the howto pointer for an M32C ELF reloc. 
Name: m32c_apply_reloc_24; Comment: Apply R_M32C_24 relocations. We have to do this because it's not a power-of-two size, and the generic code may think it overruns the section if it's right at the end. Must return something other than bfd_reloc_continue to avoid the above problem. Typical return values include bfd_reloc_ok or bfd_reloc_overflow. 
Name: ; Comment: Relocate an M32C ELF section. There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: ; Comment: We support 16-bit pointers to code above 64k by generating a thunk below 64k containing a JMP instruction to the final address. 
Name: m32c_elf_finish_dynamic_sections; Comment: This must exist if dynobj is ever set. 
Name: m32c_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: m32c_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_m32c_machine; Comment: Return the MACH for an e_flags value. 
Name: m32c_relax_plt_realloc; Comment: A subroutine of m32c_elf_relax_section. If the global symbol H previously had a plt entry, give it a new entry offset. 
Name: m32c_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: _bfd_m32c_elf_eh_frame_address_size; Comment: This is for versions of gcc prior to 4.3. 
Name: m32r_elf_do_10_pcrel_reloc; Comment: Utility to actually perform an R_M32R_10_PCREL reloc. 
Name: m32r_elf_10_pcrel_reloc; Comment: Handle the R_M32R_10_PCREL reloc. 
Name: m32r_elf_generic_reloc; Comment: Do generic partial_inplace relocation. This is a local replacement for bfd_elf_generic_reloc. 
Name: m32r_elf_sda16_reloc; Comment: Handle the R_M32R_SDA16 reloc. This reloc is used to compute the address of objects in the small data area and to perform loads and stores from that area. The lower 16 bits are sign extended and added to the register specified in the instruction, which is assumed to point to _SDA_BASE_. 
Name: m32r_elf_relocate_hi16; Comment: Handle an M32R ELF HI16 reloc. 
Name: m32r_elf_lo16_reloc; Comment: Do an R_M32R_LO16 relocation. This is a straightforward 16 bit inplace relocation; this function exists in order to do the R_M32R_HI16_[SU]LO relocation described above. 
Name: m32r_info_to_howto_rel; Comment: Set the howto pointer for an M32R ELF reloc. 
Name: _bfd_m32r_elf_section_from_bfd_section; Comment: Given a BFD section, try to locate the corresponding ELF section index. 
Name: _bfd_m32r_elf_symbol_processing; Comment: Handle the special M32R section numbers that a symbol may use. 
Name: m32r_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We must handle the special M32R section numbers here. We also keep watching for whether we need to create the sdata special linker sections. 
Name: m32r_elf_final_sda_base; Comment: We have to figure out the SDA_BASE value, so that we can adjust the symbol value correctly. We look up the symbol _SDA_BASE_ in the output BFD. If we can't find it, we're stuck. We cache it in the ELF target data. We don't need to adjust the symbol value for an external symbol if we are producing relocatable output. 
Name: m32r_elf_link_hash_table_create; Comment: Create an m32r ELF linker hash table. 
Name: m32r_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: m32r_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: m32r_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: m32r_elf_relocate_section; Comment: Relocate an M32R/D ELF section. There is some attempt to make this function usable for many architectures, both for RELA and REL type relocs, if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjust the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: m32r_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: m32r_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: m32r_elf_object_p; Comment: Set the right machine number. 
Name: m32r_elf_final_write_processing; Comment: Store the machine number in the flags field. 
Name: m32r_elf_set_private_flags; Comment: Function to keep M32R specific file flags. 
Name: m32r_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: m32r_elf_print_private_bfd_data; Comment: Display the flags field. 
Name: m32r_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: m68hc11_info_to_howto_rel; Comment: Set the howto pointer for an M68HC11 ELF reloc. 
Name: m68hc11_elf_build_one_stub; Comment: Build a 68HC11 trampoline stub. 
Name: m68hc11_elf_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: m68hc11_elf_bfd_link_hash_table_create; Comment: Create a 68HC11 ELF linker hash table. 
Name: m68hc11_elf_relax_section; Comment: This function handles relaxing for the 68HC11. _and somewhat more difficult to support. 
Name: m68hc11_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: m68hc12_elf_build_one_stub; Comment: Build a 68HC12 trampoline stub. 
Name: m68hc12_elf_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: m68hc12_elf_bfd_link_hash_table_create; Comment: Create a 68HC12 ELF linker hash table. 
Name: m68hc11_elf_bfd_link_hash_table_free; Comment: Destroy a 68HC11/68HC12 ELF linker hash table. 
Name: m68hc11_elf_hash_table_create; Comment: Create a 68HC11/68HC12 ELF linker hash table. 
Name: m68hc12_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: elf32_m68hc11_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it for identify far symbols and force a loading of the trampoline handler. 
Name: elf32_m68hc11_merge_symbol_attribute; Comment: Merge non-visibility st_other attributes, STO_M68HC12_FAR and STO_M68HC12_INTERRUPT. 
Name: elf32_m68hc11_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: elf32_m68hc11_size_stubs; Comment: Determine and set the size of the stub section for a final link. The basic idea here is to examine all the relocations looking for PC-relative calls to a target that is unreachable with a "bl" instruction. 
Name: m68hc11_elf_export_one_stub; Comment: Export the trampoline addresses in the symbol table. 
Name: m68hc11_elf_set_symbol; Comment: Export a symbol or set its value and section. 
Name: elf32_m68hc11_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. This function is called via m68hc12elf_finish in the linker. 
Name: m68hc11_addr_is_banked; Comment: Return 1 if the address is in banked memory. This can be applied to a virtual address and to a physical address. 
Name: m68hc11_phys_addr; Comment: Return the physical address seen by the processor, taking into account banked memory. 
Name: m68hc11_phys_page; Comment: Return the page number corresponding to an address in banked memory. 
Name: m68hc11_elf_ignore_reloc; Comment: This function is used for relocs which are only used for relaxing, which the linker should otherwise ignore. 
Name: elf32_m68hc11_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: elf32_m68hc11_relocate_section; Comment: Relocate a 68hc11/68hc12 ELF section. 
Name: _bfd_m68hc11_elf_set_private_flags; Comment: Set and control ELF flags in ELF header. 
Name: _bfd_m68hc11_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_m68hc11_init_file_header; Comment: Tweak the OSABI field of the elf header. 
Name: elf_m68k_reloc_got_type; Comment: Return representative type for relocation R_TYPE. This is used to avoid enumerating many relocations in comparisons, switches etc. 
Name: elf_m68k_reloc_got_offset_size; Comment: Return size of the GOT entry offset for relocation R_TYPE. 
Name: elf_m68k_reloc_got_n_slots; Comment: Return number of GOT entries we need to allocate in GOT for relocation R_TYPE. 
Name: elf_m68k_reloc_tls_p; Comment: Return TRUE if relocation R_TYPE is a TLS one. 
Name: elf_m68k_link_hash_newfunc; Comment: Create an entry in an m68k ELF linker hash table. 
Name: elf_m68k_link_hash_table_free; Comment: Destroy an m68k ELF linker hash table. 
Name: elf_m68k_link_hash_table_create; Comment: Create an m68k ELF linker hash table. 
Name: elf32_m68k_object_p; Comment: Set the right machine number. 
Name: elf_m68k_final_write_processing; Comment: Somewhat reverse of elf32_m68k_object_p, this sets the e_flag field based on the machine number. 
Name: elf32_m68k_set_private_flags; Comment: Keep m68k-specific flags in the ELF header. 
Name: m68k_elf_merge_obj_attributes; Comment: Merge object attributes from IBFD into OBFD. Warn if there are conflicting attributes. 
Name: elf32_m68k_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_m68k_print_private_bfd_data; Comment: Display the flags field. 
Name: elf_m68k_init_got; Comment: Initialize GOT. 
Name: elf_m68k_clear_got; Comment: Destruct GOT. 
Name: elf_m68k_create_empty_got; Comment: Create and empty GOT structure. INFO is the context where memory should be allocated. 
Name: elf_m68k_init_got_entry_key; Comment: Initialize KEY. 
Name: elf_m68k_got_entry_hash; Comment: Calculate hash of got_entry. ??? Is it good? 
Name: elf_m68k_got_entry_eq; Comment: Check if two got entries are equal. 
Name: elf_m68k_get_got_entry; Comment: Get or create (depending on HOWTO) entry with KEY in GOT. INFO is context in which memory should be allocated (can be NULL if HOWTO is SEARCH or MUST_FIND). 
Name: elf_m68k_update_got_entry_type; Comment: Update GOT counters when merging entry of WAS type with entry of NEW type. Return the value to which ENTRY's type should be set. 
Name: elf_m68k_add_entry_to_got; Comment: Add new or update existing entry to GOT. H, ABFD, TYPE and SYMNDX is data for the entry. INFO is a context where memory should be allocated. 
Name: elf_m68k_bfd2got_entry_hash; Comment: Compute the hash value of the bfd in a bfd2got hash entry. 
Name: elf_m68k_bfd2got_entry_eq; Comment: Check whether two hash entries have the same bfd. 
Name: elf_m68k_bfd2got_entry_del; Comment: Destruct a bfd2got entry. 
Name: elf_m68k_get_bfd2got_entry; Comment: Find existing or create new (depending on HOWTO) bfd2got entry in MULTI_GOT. ABFD is the bfd we need a GOT for. INFO is a context where memory should be allocated. 
Name: elf_m68k_can_merge_gots_1; Comment: Process a single entry from the small GOT to see if it should be added or updated in the big GOT. 
Name: elf_m68k_can_merge_gots; Comment: Return TRUE if SMALL GOT can be added to BIG GOT without overflowing it. Construct DIFF GOT holding the entries which should be added or updated in BIG GOT to accumulate information from SMALL. INFO is the context where memory should be allocated. 
Name: elf_m68k_merge_gots_1; Comment: Process a single entry from DIFF got. Add or update corresponding entry in the BIG got. 
Name: elf_m68k_merge_gots; Comment: Merge data from DIFF to BIG. INFO is context where memory should be allocated. 
Name: elf_m68k_finalize_got_offsets_1; Comment: Assign ENTRY an offset. Build list of GOT entries for global symbols along the way. 
Name: elf_m68k_finalize_got_offsets; Comment: Assign offsets within GOT. USE_NEG_GOT_OFFSETS_P indicates if we should use negative offsets. Build list of GOT entries for global symbols along the way. SYMNDX2H is mapping from global symbol indices to actual global symbols. Return offset at which next GOT should start. 
Name: elf_m68k_partition_multi_got_1; Comment: Process a single BFD2GOT entry and either merge GOT to CURRENT_GOT or start a new CURRENT_GOT. 
Name: elf_m68k_init_symndx2h_1; Comment: Helper function to build symndx2h mapping. 
Name: elf_m68k_partition_multi_got; Comment: Merge GOTs of some BFDs, assign offsets to GOT entries and build lists of GOT entries for global symbols. Calculate sizes of .got and .rela.got sections. 
Name: elf_m68k_copy_indirect_symbol; Comment: Copy any information related to dynamic linking from a pre-existing symbol to a newly created symbol. Also called to copy flags and other back-end info to a weakdef, in which case the symbol is not newly created and plt/got refcounts and dynamic indices should not be copied. 
Name: elf_m68k_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: elf_m68k_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf_m68k_get_plt_info; Comment: Return the type of PLT associated with OUTPUT_BFD. 
Name: elf_m68k_always_size_sections; Comment: This function is called after all the input files have been read, and the input sections have been assigned to output sections. It's a convenient place to determine the PLT style. 
Name: elf_m68k_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_m68k_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf_m68k_discard_copies; Comment: This function is called via elf_link_hash_traverse if we are creating a shared object. In the -Bsymbolic case it discards the space allocated to copy PC relative relocs against symbols which are defined in regular objects. For the normal shared case, it discards space for pc-relative relocs that have become local due to symbol visibility changes. We allocated space for them in the check_relocs routine, but we won't fill them in in the relocate_section routine. We also check whether any of the remaining relocations apply against a readonly section, and set the DF_TEXTREL flag in this case. 
Name: elf_m68k_install_rela; Comment: Install relocation RELA. 
Name: elf_m68k_init_got_entry_static; Comment: Output necessary relocation to handle a symbol during static link. This function is called from elf_m68k_relocate_section. 
Name: elf_m68k_init_got_entry_local_shared; Comment: Output necessary relocation to handle a local symbol during dynamic link. This function is called either from elf_m68k_relocate_section or from elf_m68k_finish_dynamic_symbol. 
Name: elf_m68k_relocate_section; Comment: Relocate an M68K ELF section. 
Name: elf_m68k_install_pc32; Comment: Install an M_68K_PC32 relocation against VALUE at offset OFFSET into section SEC. 
Name: elf_m68k_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_m68k_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: bfd_m68k_elf32_create_embedded_relocs; Comment: Given a .data section and a .emreloc in-memory section, store relocation information into the .emreloc section which can be used at runtime to relocate the section. This is called by the linker when the --embedded-relocs switch is used. This is called after the add_symbols entry point has been called for all the objects, and before the final_link entry point is called. 
Name: bfd_elf_m68k_set_target_options; Comment: Set target options. 
Name: elf_m68k_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: elf_m68k_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: mcore_elf_set_private_flags; Comment: Function to set whether a module needs the -mrelocatable bit set. 
Name: mcore_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: mcore_elf_unsupported_reloc; Comment: Don't pretend we can deal with unsupported relocs. 
Name: mcore_elf_howto_init; Comment: Initialize the mcore_elf_howto_table, so that linear accesses can be done. 
Name: mcore_elf_info_to_howto; Comment: Set the howto pointer for a RCE ELF reloc. 
Name: mcore_elf_relocate_section; Comment: The RELOCATE_SECTION function is called by the ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjust the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: mcore_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: mcore_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: mep_info_to_howto_rela; Comment: Set the howto pointer for a MEP ELF reloc. 
Name: ; Comment: Relocate a MEP ELF section. There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: mep_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: mep_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_mep_machine; Comment: Return the machine subcode from the ELF e_flags header. 
Name: tpoff; Comment: Return the relocation value for R_METAG_TLS_IE 
Name: metag_link_hash_newfunc; Comment: Initialize an entry in the link hash table. 
Name: elf_metag_link_hash_table_free; Comment: Free the derived linker hash table. 
Name: elf_metag_link_hash_table_create; Comment: Create the derived linker hash table. The Meta ELF port uses the derived hash table to keep information specific to the Meta ELF linker (without using static variables). 
Name: metag_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: metag_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: metag_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: within_signed_range; Comment: Check a signed integer value can be represented in the given number of bits. 
Name: metag_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: elf_metag_relocate_section; Comment: Relocate a META ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the sectionactually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: elf_metag_create_dynamic_sections; Comment: Create the .plt and .got sections, and set up our hash table short-cuts to various dynamic sections. 
Name: elf_metag_check_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the global offset table, procedure linkage table, and dynamic reloc sections. At this point we haven't necessarily read all the input files. 
Name: elf_metag_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: elf_metag_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_metag_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf_metag_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_metag_init_file_header; Comment: Set the Meta ELF ABI version. 
Name: elf_metag_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf_metag_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf_metag_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: metag_type_of_stub; Comment: Determine the type of stub needed, if any, for a call. 
Name: metag_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: elf_metag_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: elf_metag_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: get_local_syms; Comment: Read in all local syms for all input bfds. Returns -1 on error, 0 otherwise. 
Name: elf_metag_size_stubs; Comment: See elf32-hppa.c and elf64-ppc.c. 
Name: elf_metag_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. This function is called via metagelf_finish in the linker. 
Name: elf_metag_is_local_label_name; Comment: Return TRUE if SYM represents a local label symbol. 
Name: elf_metag_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: microblaze_elf_howto_init; Comment: Initialize the microblaze_elf_howto_table, so that linear accesses can be done. 
Name: microblaze_elf_info_to_howto; Comment: Set the howto pointer for a RCE ELF reloc. 
Name: microblaze_elf_is_local_label_name; Comment: Microblaze ELF local labels start with 'L.' or '$L', not '.L'. 
Name: link_hash_newfunc; Comment: Create an entry in a microblaze ELF linker hash table. 
Name: microblaze_elf_link_hash_table_create; Comment: Create a mb ELF linker hash table. 
Name: microblaze_elf_final_sdp; Comment: Set the values of the small data pointers. 
Name: microblaze_elf_output_dynamic_relocation; Comment: Output a simple dynamic relocation into SRELOC. 
Name: microblaze_elf_relocate_section; Comment: This code is taken from elf32-m32r.c There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjust the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: calc_fixup; Comment: Calculate fixup value for reference. 
Name: microblaze_bfd_write_imm_value_32; Comment: Read-modify-write into the bfd, an immediate value into appropriate fields of a 32-bit instruction. 
Name: microblaze_bfd_write_imm_value_64; Comment: Read-modify-write into the bfd, an immediate value into appropriate fields of two consecutive 32-bit instructions. 
Name: microblaze_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: microblaze_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: microblaze_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: microblaze_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: microblaze_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: microblaze_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: microblaze_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put .comm items in .sbss, and not .bss. 
Name: mips_elf_assign_gp; Comment: Set the GP value for OUTPUT_BFD. Returns FALSE if this is a dangerous relocation. 
Name: mips_elf_final_gp; Comment: We have to figure out the gp value, so that we can adjust the symbol value correctly. We look up the symbol _gp in the output BFD. If we can't find it, we're stuck. We cache it in the ELF target data. We don't need to adjust the symbol value for an external symbol if we are producing relocatable output. 
Name: _bfd_mips_elf32_gprel16_reloc; Comment: Do a R_MIPS_GPREL16 relocation. This is a 16 bit value which must become the offset from the gp register. This function also handles R_MIPS_LITERAL relocations, although those can be handled more cleverly because the entries in the .lit8 and .lit4 sections can be merged. 
Name: mips_elf_gprel32_reloc; Comment: Do a R_MIPS_GPREL32 relocation. This is a 32 bit value which must become the offset from the gp register. 
Name: mips32_64bit_reloc; Comment: Handle a 64 bit reloc in a 32 bit MIPS ELF file. These are generated when addresses are 64 bits. The upper 32 bits are a simple sign extension. 
Name: mips16_gprel_reloc; Comment: Handle a mips16 GP relative reloc. 
Name: bfd_elf32_bfd_reloc_type_lookup; Comment: Given a BFD reloc type, return a howto structure. 
Name: mips_elf32_rtype_to_howto; Comment: Given a MIPS Elf_Internal_Rel, fill in an arelent structure. 
Name: mips_info_to_howto_rel; Comment: Given a MIPS Elf_Internal_Rel, fill in an arelent structure. 
Name: mips_info_to_howto_rela; Comment: Given a MIPS Elf_Internal_Rela, fill in an arelent structure. 
Name: mips_elf_sym_is_global; Comment: Determine whether a symbol is global for the purposes of splitting the symbol table into global symbols and local symbols. At least on Irix 5, this split must be between section symbols and all other symbols. On most ELF targets the split is between static symbols and externally visible symbols. 
Name: mips_elf32_elfsym_local_is_section; Comment: Likewise, return TRUE if the symbol table split overall must be between section symbols and all other symbols. 
Name: mips_elf32_object_p; Comment: Set the right machine number for a MIPS ELF file. 
Name: mips_elf_is_local_label_name; Comment: MIPS ELF local labels start with '$', not 'L'. 
Name: elf32_mips_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf32_mips_write_core_note; Comment: Write Linux core PRSTATUS note into core file. 
Name: elf32_mips_fixup_symbol; Comment: Remove the magic _gp_disp symbol from the symbol tables. 
Name: elf32_mips_irix_compat; Comment: Depending on the target vector we generate some version of Irix executables or "normal" MIPS ELF ABI executables. 
Name: mips_vxworks_final_write_processing; Comment: Implement elf_backend_final_write_processing for VxWorks. 
Name: moxie_info_to_howto_rela; Comment: Set the howto pointer for an MOXIE ELF reloc. 
Name: moxie_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines, but a few relocs, we have to do them ourselves. 
Name: moxie_elf_relocate_section; Comment: Relocate an MOXIE ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: moxie_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: moxie_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: msp430_elf_ignore_reloc; Comment: Special handler for relocations which don't have to be relocated. This function just simply returns bfd_reloc_ok. 
Name: msp430_info_to_howto_rela; Comment: Set the howto pointer for an MSP430 ELF reloc. 
Name: elf32_msp430_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: msp430_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines, but a few relocs, we have to do them ourselves. 
Name: elf32_msp430_relocate_section; Comment: Relocate an MSP430 ELF section. 
Name: bfd_elf_msp430_final_write_processing; Comment: The final processing done just before writing out a MSP430 ELF object file. This gets the MSP430 architecture right based on the machine number. 
Name: elf32_msp430_object_p; Comment: Set the right machine number. 
Name: msp430_elf_symbol_address_p; Comment: Return TRUE if a symbol exists at the given address. 
Name: msp430_elf_relax_adjust_locals; Comment: Adjust all local symbols defined as '.section + 0xXXXX' (.section has sec_shndx) referenced from current and other sections. 
Name: msp430_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: msp430_elf_relax_add_words; Comment: Insert one or two words into a section whilst relaxing. 
Name: elf32_msp430_section_from_shdr; Comment: Handle an MSP430 specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: elf32_msp430_obj_attrs_arg_type; Comment: Determine whether an object attribute tag takes an integer, a string or both. 
Name: elf32_msp430_merge_msp430_attributes; Comment: Merge MSPABI and GNU object attributes from IBFD into OBFD. Raise an error if there are conflicting attributes. 
Name: elf32_msp430_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: ; Comment: Map BFD reloc types to MT ELF reloc types. 
Name: mt_info_to_howto_rela; Comment: Set the howto pointer for a MT ELF reloc. 
Name: ; Comment: Perform a single relocation. By default we use the standard BFD routines. 
Name: ; Comment: Relocate a MT ELF section. There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: mt_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: elf32_mt_machine; Comment: Return the MACH for an e_flags value. 
Name: mt_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: mt_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: nds32_insertion_sort; Comment: nds32_insertion_sort sorts an array with nmemb elements of size size. This prototype is the same as qsort (). 
Name: compar_reloc; Comment: Sort relocation by r_offset. We didn't use qsort () in stdlib, because quick-sort is not a stable sorting algorithm. Relocations at the same r_offset must keep their order. For example, RELAX_ENTRY must be the very first relocation entry. Currently, this function implements insertion-sort. FIXME: If we already sort them in assembler, why bother sort them _ here again? 
Name: nds32_elf_9_pcrel_reloc; Comment: Handle the R_NDS32_9_PCREL & R_NDS32_9_PCREL_RELA reloc. 
Name: nds32_elf_relocate_hi20; Comment: Handle an NDS32 ELF HI20 reloc. 
Name: nds32_elf_lo12_reloc; Comment: Do an R_NDS32_LO12 relocation. This is a straightforward 12 bit inplace relocation; this function exists in order to do the R_NDS32_HI20_[SU]LO relocation described above. 
Name: nds32_elf_generic_reloc; Comment: Do generic partial_inplace relocation. This is a local replacement for bfd_elf_generic_reloc. 
Name: nds32_elf_sda15_reloc; Comment: Handle the R_NDS32_SDA15 reloc. This reloc is used to compute the address of objects in the small data area and to perform loads and stores from that area. The lower 15 bits are sign extended and added to the register specified in the instruction, which is assumed to point to _SDA_BASE_. Since the lower 15 bits offset is left-shifted 0, 1 or 2 bits depending on the access size, this must be taken care of. 
Name: nds32_elf_ignore_reloc; Comment: nds32_elf_ignore_reloc is the special function for relocation types which don't need to be relocated like relaxation relocation types. This function simply return bfd_reloc_ok when it is invoked. 
Name: bfd_elf32_bfd_reloc_name_lookup; Comment: Patch tag. 
Name: nds32_info_to_howto_rel; Comment: Set the howto pointer for an NDS32 ELF reloc. 
Name: nds32_elf_grok_prstatus; Comment: Support for core dump NOTE sections. Reference to include/linux/elfcore.h in Linux. 
Name: nds32_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We must handle the special NDS32 section numbers here. We also keep watching for whether we need to create the sdata special linker sections. 
Name: nds32_elf_link_hash_newfunc; Comment: Create an entry in an nds32 ELF linker hash table. 
Name: nds32_elf_link_hash_table_create; Comment: Create an nds32 ELF linker hash table. 
Name: create_got_section; Comment: Create .got, .gotplt, and .rela.got sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: nds32_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: nds32_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: nds32_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf32_nds32_add_dynreloc; Comment: Add relocation REL to the end of relocation section SRELOC. 
Name: nds32_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: bfd_elf32_nds32_set_target_option; Comment: Put target dependent option into info hash table. 
Name: nds32_fag_insert; Comment: Insert a fag in ascending order. If a fag of the same address already exists, they are chained by relas array. 
Name: nds32_fag_find_base; Comment: Find the best fp-base address. The relocation associated with that address is returned, so we can track the symbol instead of a fixed address. When relaxation, the address of an datum may change, because a text section is shrinked, so the data section moves forward. If the aligments of text and data section are different, their distance may change too. Therefore, tracking a fixed address is not appriate. 
Name: nds32_fag_mark_relax; Comment: Apply R_NDS32_INSN16_FP7U2_FLAG on gp-relative accesses, so we can convert it fo fp-relative access later. `best_fag' is the best fp-base. Only those inside the window of best_fag is applied the flag. 
Name: nds32_fag_unmark_relax; Comment: Reset INSN16 to clean fp as gp. 
Name: nds32_relax_fp_as_gp; Comment: This is the main function of fp-as-gp optimization. It should be called by relax_section. 
Name: nds32_fag_remove_unused_fpbase; Comment: Remove unused `la $fp, _FD_BASE_' instruction. 
Name: nds32_elf_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents. We need this variety because relaxation will modify the dwarf infomation. When there is undefined symbol reference error mesage, linker need to dump line number where the symbol be used. However the address is be relaxed, it can not get the original dwarf contents. The variety only modify function call for reading in the section. 
Name: nds32_elf_is_target_special_symbol; Comment: Check target symbol. 
Name: nds32_elf_maybe_function_sym; Comment: nds32 find maybe function sym. Ignore target special symbol first, and then go the general function. 
Name: elf32_nds32_check_relax_group; Comment: Check R_NDS32_RELAX_GROUP of each section. There might be multiple sections in one object file. 
Name: lookup_howto; Comment: Return the howto for relocation RTYPE. 
Name: nios2_elf32_install_imm16; Comment: Install 16-bit immediate value VALUE at offset OFFSET into section SEC. 
Name: nios2_elf32_install_data; Comment: Install COUNT 32-bit values DATA starting at offset OFFSET into section SEC. 
Name: hiadj; Comment: The usual way of loading a 32-bit constant into a Nios II register is to load the high 16 bits in one instruction and then add the low 16 bits with a signed add. This means that the high halfword needs to be adjusted to compensate for the sign bit of the low halfword. This function returns the adjusted high halfword for a given 32-bit constant. 
Name: nios2_grok_prstatus; Comment: Implement elf_backend_grok_prstatus: Support for core dump NOTE sections. 
Name: nios2_grok_psinfo; Comment: Implement elf_backend_grok_psinfo. 
Name: link_hash_newfunc; Comment: Create an entry in a Nios II ELF linker hash table. 
Name: nios2_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: nios2_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: nios2_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: nios2_elf32_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: nios2_elf32_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: group_sections; Comment: See whether we can group stub sections together. Grouping stub sections may result in fewer stubs. More importantly, we need to put all .init* and .fini* stubs at the end of the .init or .fini output sections respectively, because glibc splits the _init and _fini functions into multiple parts. Putting a stub in the middle of a function is not a good idea. Rather than computing groups of a maximum fixed size, for Nios II CALL26 relaxation it makes more sense to compute the groups based on sections that fit within a 256MB address segment. Also do not allow a group to span more than one output section, since different output sections might correspond to different memory banks on a bare-metal target, etc. 
Name: nios2_type_of_stub; Comment: Determine the type of stub needed, if any, for a call. 
Name: nios2_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: nios2_elf32_size_stubs; Comment: Determine and set the size of the stub section for a final link. 
Name: nios2_elf32_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. This function is called via nios2elf_finish in the linker. 
Name: nios2_elf32_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: nios2_elf32_bfd_reloc_type_lookup; Comment: Implement bfd_elf32_bfd_reloc_type_lookup: Given a BFD reloc type, return a howto structure. 
Name: nios2_elf32_bfd_reloc_name_lookup; Comment: Implement bfd_elf32_bfd_reloc_name_lookup: Given a reloc name, return a howto structure. 
Name: nios2_elf32_info_to_howto; Comment: Implement elf_info_to_howto: Given a ELF32 relocation, fill in a arelent structure. 
Name: nios2_elf_assign_gp; Comment: Set the GP value for OUTPUT_BFD. Returns FALSE if this is a dangerous relocation. 
Name: nios2_elf_final_gp; Comment: Retrieve the previously cached _gp pointer, returning bfd_reloc_dangerous if it's not available as we don't have a link_info pointer available here to look it up in the output symbol table. We don't need to adjust the symbol value for an external symbol if we are producing relocatable output. 
Name: nios2_elf32_do_hi16_relocate; Comment: Do the relocations that require special handling. 
Name: nios2_elf32_ignore_reloc; Comment: This is for relocations used only when relaxing to ensure changes in size of section don't screw up .align. 
Name: nios2_elf32_relocate_section; Comment: Implement elf_backend_relocate_section. 
Name: nios2_elf32_section_flags; Comment: Implement elf-backend_section_flags: Convert NIOS2 specific section flags to bfd internal section flags. 
Name: nios2_elf32_fake_sections; Comment: Implement elf_backend_fake_sections: Set the correct type for an NIOS2 ELF section. We do this by the section name, which is a hack, but ought to work. 
Name: nios2_elf32_create_dynamic_sections; Comment: Implement elf_backend_create_dynamic_sections: Create .plt, .rela.plt, .got, .got.plt, .rela.got, .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: nios2_elf32_copy_indirect_symbol; Comment: Implement elf_backend_copy_indirect_symbol: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: nios2_elf32_object_p; Comment: Set the right machine number for a NIOS2 ELF file. 
Name: nios2_elf32_check_relocs; Comment: Implement elf_backend_check_relocs: Look through the relocs for a section during the first phase. 
Name: nios2_elf32_gc_mark_hook; Comment: Implement elf_backend_gc_mark_hook: Return the section that should be marked against GC for a given relocation. 
Name: nios2_elf32_finish_dynamic_symbol; Comment: Implement elf_backend_finish_dynamic_symbols: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: nios2_elf32_finish_dynamic_sections; Comment: Implement elf_backend_finish_dynamic_sections. 
Name: nios2_elf32_adjust_dynamic_symbol; Comment: Implement elf_backend_adjust_dynamic_symbol: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: adjust_dynrelocs; Comment: Worker function for nios2_elf32_size_dynamic_sections. 
Name: allocate_dynrelocs; Comment: Another worker function for nios2_elf32_size_dynamic_sections. Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: nios2_elf32_size_dynamic_sections; Comment: Implement elf_backend_size_dynamic_sections: Set the sizes of the dynamic sections. 
Name: nios2_elf32_link_hash_table_free; Comment: Free the derived linker hash table. 
Name: nios2_elf32_link_hash_table_create; Comment: Implement bfd_elf32_bfd_link_hash_table_create. 
Name: nios2_elf32_reloc_type_class; Comment: Implement elf_backend_reloc_type_class. 
Name: is_nios2_elf_target; Comment: Return 1 if target is one of ours. 
Name: nios2_elf_add_symbol_hook; Comment: Implement elf_backend_add_symbol_hook. This hook is called by the linker when adding symbols from an object file. We use it to put .comm items in .sbss, and not .bss. 
Name: nios2_elf32_can_make_relative_eh_frame; Comment: Implement elf_backend_can_make_relative_eh_frame: Decide whether to attempt to turn absptr or lsda encodings in shared libraries into pcrel within the given input section. 
Name: or1k_elf_link_hash_newfunc; Comment: Create an entry in an or1k ELF linker hash table. 
Name: or1k_elf_link_hash_table_create; Comment: Create an or1k ELF linker hash table. 
Name: or1k_info_to_howto_rela; Comment: Set the howto pointer for an Or1k ELF reloc. 
Name: tpoff; Comment: Return the relocation value for @tpoff relocations.. 
Name: or1k_initial_exec_offset; Comment: If we have both IE and GD accesses to a symbol the IE relocations should be offset by 8 bytes because the got contains both GD and IE entries. 
Name: or1k_final_link_relocate; Comment: Like _bfd_final_link_relocate, but handles non-contiguous fields. 
Name: or1k_elf_relocate_section; Comment: Relocate an Or1k ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: or1k_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: or1k_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: or1k_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: or1k_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: or1k_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: or1k_set_got_and_rela_sizes; Comment: Caclulate an update the sizes required for a symbol in the GOT and RELA relocation section based on the TLS_TYPE and whether or not the symbol is DYNAMIC. Symbols with TLS_GD access require 8 bytes in the GOT and, if dynamic, require two relocation entries. Symbols with TLS_IE access require 4 bytes in the GOT and, if dynamic, require one relocation entry. Symbols may have both TLS_GD and TLS_IE access to be accounted for. Other symbols require 4 bytes in the GOT table and, if dynamic, require one relocation entry. 
Name: or1k_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: or1k_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: or1k_elf_object_p; Comment: Set the right machine number. 
Name: or1k_elf_final_write_processing; Comment: Store the machine number in the flags field. 
Name: elf32_or1k_merge_private_bfd_data; Comment: Make sure all input files are consistent with respect to EF_OR1K_NODELAY flag setting. 
Name: or1k_grok_prstatus; Comment: Implement elf_backend_grok_prstatus: Support for core dump NOTE sections. 
Name: or1k_grok_psinfo; Comment: Implement elf_backend_grok_psinfo. 
Name: pj_elf_reloc; Comment: This function is used for normal relocs. This is like the COFF function, and is almost certainly incorrect for other ELF targets. 
Name: pj_elf_reloc_type_lookup; Comment: Given a BFD reloc code, return the howto structure for the corresponding PJ ELf reloc. 
Name: pj_elf_info_to_howto; Comment: Given an ELF reloc, fill in the howto field of a relent. 
Name: pj_elf_final_write_processing; Comment: Take this moment to fill in the special picoJava bits in the e_flags field. 
Name: ppc_elf_howto_init; Comment: Initialize the ppc_elf_howto_table, so that linear accesses can be done. 
Name: ppc_elf_info_to_howto; Comment: Set the howto pointer for a PowerPC ELF reloc. 
Name: ppc_elf_addr16_ha_reloc; Comment: Handle the R_PPC_ADDR16_HA and R_PPC_REL16_HA relocs. 
Name: ppc_elf_mkobject; Comment: Override the generic function because we store some extras. 
Name: _bfd_elf_ppc_set_arch; Comment: When defaulting arch/mach, decode apuinfo to find a better match. 
Name: ppc_elf_object_p; Comment: Fix bad default arch selected for a 32 bit input bfd when the default is 64 bit. Also select arch based on apuinfo. 
Name: ppc_elf_set_private_flags; Comment: Function to set whether a module needs the -mrelocatable bit set. 
Name: ppc_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: ppc_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: ppc_elf_section_from_shdr; Comment: Handle a PowerPC specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: ppc_elf_fake_sections; Comment: Set up any other section flags and such that may be necessary. 
Name: ppc_elf_additional_program_headers; Comment: If we have .sbss2 or .PPC.EMB.sbss0 output sections, we need to bump up the number of section headers. 
Name: ppc_elf_modify_segment_map; Comment: Modify the segment map for VLE executables. 
Name: ppc_elf_begin_write_processing; Comment: Scan the input BFDs and create a linked list of the APUinfo values that will need to be emitted. 
Name: ppc_elf_write_section; Comment: Prevent the output section from accumulating the input sections' contents. We have already stored this in our linked list structure. 
Name: ppc_final_write_processing; Comment: Finally we can generate the output section. 
Name: must_be_dyn_reloc; Comment: Of those relocs that might be copied as dynamic relocs, this function selects those that must be copied when linking a shared library or PIE, even when the symbol is local. 
Name: ppc_elf_link_hash_newfunc; Comment: Create an entry in a PPC ELF linker hash table. 
Name: ppc_elf_link_hash_table_create; Comment: Create a PPC ELF linker hash table. 
Name: ppc_elf_link_params; Comment: Hook linker params into hash table. 
Name: ppc_elf_create_got; Comment: Create .got and the related sections. 
Name: ppc_elf_create_linker_section; Comment: Create a special linker section, used for R_PPC_EMB_SDAI16 and R_PPC_EMB_SDA2I16 pointers. These sections become part of .sdata and .sdata2. Create _SDA_BASE_ and _SDA2_BASE too. 
Name: ppc_elf_create_dynamic_sections; Comment: We have to create .dynsbss and .rela.sbss here so that they get mapped to output sections (just like _bfd_elf_create_dynamic_sections has to create .dynbss and .rela.bss). 
Name: ppc_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: ppc_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put .comm items in .sbss, and not .bss. 
Name: ; Comment: Find a linker generated pointer with a given addend and type. 
Name: elf_allocate_pointer_linker_section; Comment: Allocate a pointer to live in a linker created section. 
Name: is_plt_seq_reloc; Comment: Relocs on inline plt call sequence insns prior to the call. 
Name: offset_in_range; Comment: Like bfd_reloc_offset_in_range but without a howto. Return true iff a field of SIZE bytes at OFFSET is within SEC limits. 
Name: ppc_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: _bfd_elf_ppc_merge_fp_attributes; Comment: Warn for conflicting Tag_GNU_Power_ABI_FP attributes between IBFD and OBFD, and merge non-conflicting ones. 
Name: ppc_elf_merge_obj_attributes; Comment: Merge object attributes from IBFD into OBFD. Warn if there are conflicting attributes. 
Name: ppc_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: ppc_elf_select_plt_layout; Comment: Choose which PLT scheme to use, and set .plt flags appropriately. Returns -1 on error, 0 for old PLT, 1 for new PLT. 
Name: ppc_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: ppc_elf_inline_plt; Comment: Analyze inline PLT call relocations to see whether calls to locally defined functions can be converted to direct calls. 
Name: ppc_elf_tls_setup; Comment: Set plt output section type, htab->tls_get_addr, and call the generic ELF tls_setup function. 
Name: branch_reloc_hash_match; Comment: Return TRUE iff REL is a branch reloc with a global symbol matching HASH. 
Name: ppc_elf_tls_optimize; Comment: Run through all the TLS relocs looking for optimization opportunities. 
Name: pc_dynrelocs; Comment: Return whether H has pc-relative dynamic relocs. 
Name: ppc_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: add_stub_sym; Comment: Generate a symbol to mark plt call stubs. For non-PIC code the sym is xxxxxxxx.plt_call32.<callee> where xxxxxxxx is a hex number, usually 0, specifying the addend on the plt relocation. For -fpic code, the sym is xxxxxxxx.plt_pic32.<callee>, and for -fPIC xxxxxxxx.got2.plt_pic32.<callee>. 
Name: allocate_got; Comment: Allocate NEED contiguous space in .got, and return the offset. Handles allocation of the got header when crossing 32k. 
Name: ensure_undef_dynamic; Comment: If H is undefined, make it dynamic if that makes sense. 
Name: allocate_dynrelocs; Comment: Allocate space in associated reloc sections for dynamic relocs. 
Name: ppc_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: maybe_strip_sdasym; Comment: Arrange to have _SDA_BASE_ or _SDA2_BASE_ stripped from the output if it looks like nothing is using them. 
Name: ppc_elf_hash_symbol; Comment: Return TRUE if symbol should be hashed in the `.gnu.hash' section. 
Name: ppc_elf_relax_section; Comment: This function implements long branch trampolines, and the ppc476 icache bug workaround. Any section needing trampolines or patch space for the workaround has its size extended so that we can add trampolines at the end of the section. 
Name: ppc_elf_action_discarded; Comment: What to do when ld finds relocations against symbols defined in discarded sections. 
Name: elf_finish_pointer_linker_section; Comment: Fill in the address for a pointer generated in a linker section. 
Name: is_static_defined; Comment: Return true if symbol is defined statically. 
Name: _bfd_elf_ppc_at_tls_transform; Comment: If INSN is an opcode that may be used with an @tls operand, return the transformed insn for TLS optimisation, otherwise return 0. If REG is non-zero only match an insn with RB or RA equal to REG. 
Name: _bfd_elf_ppc_at_tprel_transform; Comment: If INSN is an opcode that may be used with an @tprel operand, return the transformed insn for an undefined weak symbol, ie. with the thread pointer REG operand removed. Otherwise return 0. 
Name: ppc_elf_relocate_section; Comment: The RELOCATE_SECTION function is called by the ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjust the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: write_global_sym_plt; Comment: Write out the PLT relocs and entries for H. 
Name: ppc_finish_symbols; Comment: Finish up PLT handling. 
Name: ppc_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: ppc_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: ppc_elf_vxworks_get_sec_type_attr; Comment: VxWorks uses the elf default section flags for .plt. 
Name: ppc_elf_vxworks_link_hash_table_create; Comment: Like ppc_elf_link_hash_table_create, but overrides appropriately for VxWorks. 
Name: ppc_elf_vxworks_add_symbol_hook; Comment: Tweak magic VxWorks symbols as they are loaded. 
Name: link_hash_newfunc; Comment: Create an entry in a PRU ELF linker hash table. 
Name: pru_elf32_bfd_reloc_type_lookup; Comment: Implement bfd_elf32_bfd_reloc_type_lookup: Given a BFD reloc type, return a howto structure. 
Name: pru_elf32_bfd_reloc_name_lookup; Comment: Implement bfd_elf32_bfd_reloc_name_lookup: Given a reloc name, return a howto structure. 
Name: pru_elf32_info_to_howto; Comment: Implement elf_info_to_howto: Given a ELF32 relocation, fill in a arelent structure. 
Name: pru_elf32_do_pmem_relocate; Comment: Produce a word address for program memory. Linker scripts will put .text at a high offset in order to differentiate it from .data. So here we also mask the high bits of PMEM address. But why 1MB when internal Program Memory much smaller? We want to catch unintended overflows. Why not use (1<<31) as an offset and a mask? Sitara DDRAM usually resides there, and users might want to put some shared carveout memory region in their linker scripts. So 0x80000000 might be a valid .data address. Note that we still keep and pass down the original howto. This way we can reuse this function for several different relocations. 
Name: pru_elf32_do_s10_pcrel_relocate; Comment: Direct copy of _bfd_final_link_relocate, but with special "fill-in". This copy-paste mumbo jumbo is only needed because BFD cannot deal correctly with non-contiguous bit fields. 
Name: pru_elf32_do_ldi32_relocate; Comment: Idea and code taken from elf32-d30v. 
Name: pru_elf32_pmem_relocate; Comment: HOWTO handlers for relocations that require special handling. 
Name: pru_elf32_relocate_section; Comment: Implement elf_backend_relocate_section. 
Name: bfd_elf_pru_diff_relocate; Comment: Perform a diff relocation. Nothing to do, as the difference value is already written into the section's contents. 
Name: elf32_pru_is_diff_reloc; Comment: Returns whether the relocation type passed is a diff reloc. 
Name: elf32_pru_adjust_diff_reloc_value; Comment: Reduce the diff value written in the section by count if the shrinked insn address happens to fall between the two symbols for which this diff reloc was emitted. 
Name: pru_elf_relax_delete_bytes; Comment: Delete some bytes from a section while changing the size of an instruction. The parameter "addr" denotes the section-relative offset pointing just behind the shrinked instruction. "addr+count" point at the first byte just behind the original unshrinked instruction. Idea copied from the AVR port. 
Name: pru_elf32_link_hash_table_free; Comment: Free the derived linker hash table. 
Name: pru_elf32_link_hash_table_create; Comment: Implement bfd_elf32_bfd_link_hash_table_create. 
Name: rl78_info_to_howto_rela; Comment: Set the howto pointer for an RL78 ELF reloc. 
Name: rl78_compute_complex_reloc; Comment: Special handling for RL78 complex relocs. Returns the value of the reloc, or 0 for relocs which do not generate a result. SYMVAL is the value of the symbol for relocs which use a symbolic argument. 
Name: check_overflow; Comment: Check whether RELOCATION overflows a relocation field described by HOWTO. 
Name: ; Comment: Relocate an RL78 ELF section. There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: rl78_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: rl78_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_rl78_machine; Comment: Return the MACH for an e_flags value. 
Name: rl78_elf_finish_dynamic_sections; Comment: This must exist if dynobj is ever set. 
Name: rl78_relax_plt_realloc; Comment: A subroutine of rl78_elf_relax_section. If the global symbol H previously had a plt entry, give it a new entry offset. 
Name: elf32_rl78_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: reloc_bubblesort; Comment: Used to sort relocs by address. If relocs have the same address, we maintain their relative order, except that R_RL78_RH_RELAX alignment relocs must be the first reloc for any given address. 
Name: rl78_elf_relax_section; Comment: Relax one section. 
Name: rx_info_to_howto_rela; Comment: Set the howto pointer for an RX ELF reloc. 
Name: ; Comment: Relocate an RX ELF section. There is some attempt to make this function usable for many architectures, both USE_REL and USE_RELA ['twould be nice if such a critter existed], if only to serve as a learning tool. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: next_smaller_reloc; Comment: Progression of relocations from largest operand size to smallest operand size. 
Name: elf32_rx_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: reloc_bubblesort; Comment: Used to sort relocs by address. If relocs have the same address, we maintain their relative order, except that R_RX_RH_RELAX alignment relocs must be the first reloc for any given address. 
Name: elf32_rx_relax_section; Comment: Relax one section. 
Name: rx_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: describe_flags; Comment: Converts FLAGS into a descriptive string. Returns a static pointer. 
Name: rx_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_rx_machine; Comment: Return the MACH for an e_flags value. 
Name: rx_get_section_contents; Comment: The rule is: big endian object that are final-link executables, have code sections stored with 32-bit words swapped relative to what you'd get by default. 
Name: ; Comment: We need to check for table entry symbols and build the tables, and we need to do it before the linker does garbage collection. This function is called once per input object file. 
Name: s12z_info_to_howto_rel; Comment: Set the howto pointer for an S12Z ELF reloc. 
Name: elf_s390_info_to_howto; Comment: We need to use ELF32_R_TYPE so we have our own copy of this function, and elf32-s390.c has its own copy. 
Name: s390_tls_reloc; Comment: A relocation function which doesn't do anything. 
Name: s390_elf_ldisp_reloc; Comment: Handle the large displacement relocs. 
Name: link_hash_newfunc; Comment: Create an entry in an s390 ELF linker hash table. 
Name: elf_s390_link_hash_table_create; Comment: Create an s390 ELF linker hash table. 
Name: elf_s390_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: elf_s390_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: elf_s390_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf_s390_adjust_gotplt; Comment: Make sure we emit a GOT entry if the symbol was supposed to have a PLT entry but we found we will not create any. Called when we find we will not have any PLT for this symbol, by for example elf_s390_adjust_dynamic_symbol when we're doing a proper dynamic link, or elf_s390_size_dynamic_sections if no dynamic sections will be created (we're only linking static objects). 
Name: elf_s390_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_s390_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: invalid_tls_insn; Comment: Complain if TLS instruction relocation is against an invalid instruction. 
Name: elf_s390_relocate_section; Comment: Relocate a 390 ELF section. 
Name: elf_s390_finish_ifunc_symbol; Comment: Generate the PLT slots together with the dynamic relocations needed for IFUNC symbols. 
Name: elf_s390_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_s390_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf_s390_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf_s390_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf_s390_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: elf32_s390_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: score_elf_assign_gp; Comment: Set the GP value for OUTPUT_BFD. Returns FALSE if this is a dangerous relocation. 
Name: score_elf_final_gp; Comment: We have to figure out the gp value, so that we can adjust the symbol value correctly. We look up the symbol _gp in the output BFD. If we can't find it, we're stuck. We cache it in the ELF target data. We don't need to adjust the symbol value for an external symbol if we are producing relocatable output. 
Name: score_elf_gprel32_reloc; Comment: Do a R_SCORE_GPREL32 relocation. This is a 32 bit value which must become the offset from the gp register. 
Name: score_elf_got15_reloc; Comment: A howto special_function for R_SCORE_GOT15 relocations. This is just like any other 16-bit relocation when applied to global symbols, but is treated in the same as R_SCORE_HI16 when applied to local symbols. 
Name: score_elf_got_entry_hash; Comment: got_entries only match if they're identical, except for gotidx, so use all fields to compute the hash, and compare the appropriate union members. 
Name: score_elf_sort_hash_table_f; Comment: If H needs a GOT entry, assign it the highest available dynamic index. Otherwise, assign it the lowest available dynamic index. 
Name: score_elf_got_info; Comment: Returns the GOT information associated with the link indicated by INFO. If SGOTP is non-NULL, it is filled in with the GOT section. 
Name: score_elf_sort_hash_table; Comment: Sort the dynamic symbol table so that symbols that need GOT entries appear towards the end. This reduces the amount of GOT space required. MAX_LOCAL is used to set the number of local symbols known to be in the dynamic symbol table. During s3_bfd_score_elf_size_dynamic_sections, this value is 1. Afterward, the section symbols are added and the count is higher. 
Name: score_elf_link_hash_newfunc; Comment: Create an entry in an score ELF linker hash table. 
Name: score_elf_next_relocation; Comment: Returns the first relocation of type r_type found, beginning with RELOCATION. RELEND is one-past-the-end of the relocation table. 
Name: score_elf_sort_dynamic_relocs; Comment: This function is called via qsort() to sort the dynamic relocation entries by increasing r_symndx value. 
Name: score_elf_local_relocation_p; Comment: Return whether a relocation is against a local symbol. 
Name: score_elf_rel_dyn_section; Comment: Returns the dynamic relocation section for DYNOBJ. 
Name: score_elf_create_dynamic_relocation; Comment: Create a rel.dyn relocation for the dynamic linker to resolve. REL is the original relocation, which is now being transformed into a dynamic relocation. The ADDENDP is adjusted if necessary; the caller should store the result in place of the original addend. 
Name: score_elf_high; Comment: Calculate the %high function. 
Name: score_elf_create_local_got_entry; Comment: Create a local GOT entry for VALUE. Return the index of the entry, or -1 if it could not be created. 
Name: score_elf_got16_entry; Comment: Find a GOT entry whose higher-order 16 bits are the same as those for value. Return the index into the GOT for this entry. 
Name: score_elf_record_global_got_symbol; Comment: If H is a symbol that needs a global GOT entry, but has a dynamic symbol table index lower than any we've seen to date, record it for posterity. 
Name: score_elf_record_local_got_symbol; Comment: Reserve space in G for a GOT entry containing the value of symbol SYMNDX in input bfd ABDF, plus ADDEND. 
Name: score_elf_local_got_index; Comment: Returns the GOT offset at which the indicated address can be found. If there is not yet a GOT entry for this value, create one. Returns -1 if no satisfactory GOT offset can be found. 
Name: score_elf_global_got_index; Comment: Returns the GOT index for the global symbol indicated by H. 
Name: score_elf_got_offset_from_index; Comment: Returns the offset for the entry at the INDEXth position in the GOT. 
Name: score_elf_resolve_final_got_entry; Comment: Follow indirect and warning hash entries so that each got entry points to the final symbol definition. P must point to a pointer to the hash table we're traversing. Since this traversal may modify the hash table, we set this pointer to NULL to indicate we've made a potentially-destructive change to the hash table, so the traversal must be restarted. 
Name: score_elf_resolve_final_got_entries; Comment: Turn indirect got entries in a got_entries table into their final locations. 
Name: score_elf_add_to_rel; Comment: Add INCREMENT to the reloc (of type HOWTO) at ADDRESS. for -r 
Name: score_elf_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: s3_bfd_score_info_to_howto; Comment: Score backend functions. 
Name: s3_bfd_score_elf_relocate_section; Comment: Relocate an score ELF section. 
Name: s3_bfd_score_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table. 
Name: s3_bfd_score_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: s3_bfd_score_elf_always_size_sections; Comment: This function is called after all the input files have been read, and the input sections have been assigned to output sections. 
Name: s3_bfd_score_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: s3_bfd_score_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: s3_bfd_score_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: s3_bfd_score_elf_fake_sections; Comment: This function set up the ELF section header for a BFD section in preparation for writing it out. This is where the flags and type fields are set for unusual sections. 
Name: s3_bfd_score_elf_section_processing; Comment: assign_file_positions_except_relocs() check section flag and if it is allocatable, warning message will be issued. backend_fake_section is called before assign_file_positions_except_relocs(); backend_section_processing after it. so, we modify section flag there, but not backend_fake_section. 
Name: s3_bfd_score_elf_copy_indirect_symbol; Comment: Copy data from a SCORE ELF indirect symbol to its direct symbol, hiding the old indirect symbol. Process additional relocation information. 
Name: s3_bfd_score_elf_discard_info; Comment: Remove information about discarded functions from other sections which mention them. 
Name: s3_bfd_score_elf_ignore_discarded_relocs; Comment: Signal that discard_info() has removed the discarded relocations for this section. 
Name: s3_bfd_score_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: s3_bfd_score_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: s3_elf32_score_reloc_type_lookup; Comment: Score BFD functions. 
Name: _bfd_score_info_to_howto; Comment: s3_s7: backend hooks. 
Name: elf32_score_link_hash_table_create; Comment: Create a score elf linker hash table. This is a copy of _bfd_elf_link_hash_table_create() except with a different hash table entry creation function. 
Name: _bfd_score_elf_score_object_p; Comment: Set the right machine number. 
Name: score_elf_sort_hash_table; Comment: Sort the dynamic symbol table so that symbols that need GOT entries appear towards the end. This reduces the amount of GOT space required. MAX_LOCAL is used to set the number of local symbols known to be in the dynamic symbol table. During s7_bfd_score_elf_size_dynamic_sections, this value is 1. Afterward, the section symbols are added and the count is higher. 
Name: s7_bfd_score_info_to_howto; Comment: Score backend functions. 
Name: s7_bfd_score_elf_relocate_section; Comment: Relocate an score ELF section. 
Name: s7_bfd_score_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table. 
Name: s7_bfd_score_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: s7_bfd_score_elf_always_size_sections; Comment: This function is called after all the input files have been read, and the input sections have been assigned to output sections. 
Name: s7_bfd_score_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: s7_bfd_score_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: s7_bfd_score_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: s7_bfd_score_elf_fake_sections; Comment: This function set up the ELF section header for a BFD section in preparation for writing it out. This is where the flags and type fields are set for unusual sections. 
Name: s7_bfd_score_elf_section_processing; Comment: assign_file_positions_except_relocs() check section flag and if it is allocatable, warning message will be issued. backend_fake_section is called before assign_file_positions_except_relocs(); backend_section_processing after it. so, we modify section flag there, but not backend_fake_section. 
Name: s7_bfd_score_elf_copy_indirect_symbol; Comment: Copy data from a SCORE ELF indirect symbol to its direct symbol, hiding the old indirect symbol. Process additional relocation information. 
Name: s7_bfd_score_elf_discard_info; Comment: Remove information about discarded functions from other sections which mention them. 
Name: s7_bfd_score_elf_ignore_discarded_relocs; Comment: Signal that discard_info() has removed the discarded relocations for this section. 
Name: s7_bfd_score_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: s7_bfd_score_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: s7_elf32_score_reloc_type_lookup; Comment: Score BFD functions. 
Name: vxworks_object_p; Comment: Return true if OUTPUT_BFD is a VxWorks object. 
Name: fdpic_object_p; Comment: Return true if OUTPUT_BFD is an FDPIC object. 
Name: get_howto_table; Comment: Return the howto table for ABFD. 
Name: sh_elf_reloc; Comment: This function is used for normal relocs. This used to be like the COFF function, and is almost certainly incorrect for other ELF targets. 
Name: sh_elf_ignore_reloc; Comment: This function is used for relocs which are only used for relaxing, which the linker should otherwise ignore. 
Name: sh_elf_reloc_type_lookup; Comment: Given a BFD reloc code, return the howto structure for the corresponding SH ELF reloc. 
Name: sh_elf_info_to_howto; Comment: Given an ELF reloc, fill in the howto field of a relent. 
Name: sh_elf_relax_section; Comment: This function handles relaxing for SH ELF. See the corresponding function in coff-sh.c for a description of what this does. FIXME: There is a lot of duplication here between this code and the COFF specific code. The format of relocs and symbols is wound deeply into this code, but it would still be better if the duplication could be eliminated somehow. Note in particular that although both functions use symbols like R_SH_CODE, those symbols have different values; in coff-sh.c they come from includecoffsh.h, whereas here they come from enum elf_sh_reloc_type in include/elf/sh.h. 
Name: sh_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. FIXME: There is a lot of duplication between this function and sh_relax_delete_bytes in coff-sh.c. 
Name: sh_elf_align_loads; Comment: Look for loads and stores which we can align to four byte boundaries. This is like sh_align_loads in coff-sh.c. 
Name: sh_elf_swap_insns; Comment: Swap two SH instructions. This is like sh_swap_insns in coff-sh.c. 
Name: get_plt_info; Comment: Return the type of PLT associated with ABFD. PIC_P is true if the object is position-independent. 
Name: install_plt_field; Comment: Install a 32-bit PLT field starting at ADDR, which occurs in OUTPUT_BFD. VALUE is the field's value and CODE_P is true if VALUE refers to code, not data. 
Name: get_plt_index; Comment: Return the index of the PLT entry at byte offset OFFSET. 
Name: get_plt_offset; Comment: Do the inverse operation. 
Name: sh_elf_mkobject; Comment: Override the generic function because we need to store sh_elf_obj_tdata as the specific tdata. 
Name: sh_elf_link_hash_newfunc; Comment: Create an entry in an sh ELF linker hash table. 
Name: sh_elf_link_hash_table_create; Comment: Create an sh ELF linker hash table. 
Name: sh_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: sh_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: sh_elf_always_size_sections; Comment: This function is called after all the input files have been read, and the input sections have been assigned to output sections. It's a convenient place to determine the PLT style. 
Name: sh_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: sh_elf_add_dyn_reloc; Comment: Add a dynamic relocation to the SRELOC section. 
Name: sh_elf_add_rofixup; Comment: Add an FDPIC read-only fixup. 
Name: sh_elf_got_offset; Comment: Return the offset of the generated .got section from the _GLOBAL_OFFSET_TABLE_ symbol. 
Name: sh_elf_osec_to_segment; Comment: Find the segment number in which OSEC, and output section, is located. 
Name: sh_elf_initialize_funcdesc; Comment: Generate the initial contents of a local function descriptor, along with any relocations or fixups required. 
Name: install_movi20_field; Comment: Install a 20-bit movi20 field starting at ADDR, which occurs in OUTPUT_BFD. VALUE is the field's value. Return bfd_reloc_ok if successful or an error otherwise. 
Name: sh_elf_relocate_section; Comment: Relocate an SH ELF section. 
Name: sh_elf_get_relocated_section_contents; Comment: This is a version of bfd_generic_get_relocated_section_contents which uses sh_elf_relocate_section. 
Name: tpoff; Comment: Return the relocation value for R_SH_TLS_TPOFF32.. 
Name: sh_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: sh_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: sh_elf_get_flags_from_mach; Comment: Reverse table lookup for sh_ef_bfd_table[]. Given a bfd MACH value from archures.c return the equivalent ELF flags from the table. Return -1 if no match is found. 
Name: sh_elf_copy_private_data; Comment: Copy backend specific data from one object module to another 
Name: sh_find_elf_flags; Comment: This function returns the ELF architecture number that corresponds to the given arch_sh* flags. 
Name: sh_merge_bfd_arch; Comment: Merge the architecture type of two BFD files, such that the resultant architecture supports all the features required by the two input BFDs. If the input BFDs are multually incompatible - i.e. one uses DSP while the other uses FPU - or there is no known architecture that fits the requirements then an error is emitted. 
Name: sh_elf_merge_private_data; Comment: This routine initialises the elf flags when required and calls sh_merge_bfd_arch() to check dsp/fpu compatibility. 
Name: sh_elf_object_p; Comment: Override the generic function because we need to store sh_elf_obj_tdata as the specific tdata. We set also the machine architecture from flags here. 
Name: sh_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: sh_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf32_shlin_grok_prstatus; Comment: Support for Linux core dump NOTE sections. 
Name: sh_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: sh_elf_use_relative_eh_frame; Comment: Decide whether to attempt to turn absptr or lsda encodings in shared libraries into pcrel within the given input section. 
Name: sh_elf_encode_eh_address; Comment: Adjust the contents of an eh_frame_hdr section before they're output. 
Name: elf32_sparc_grok_psinfo; Comment: Support for core dump NOTE sections. 
Name: elf32_sparc_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: sparc_final_write_processing; Comment: The final processing done just before writing out the object file. We need to set the e_machine field appropriately. 
Name: elf32_sparc_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf32_sparc_vxworks_final_write_processing; Comment: A final_write_processing hook that does both the SPARC- and VxWorks- specific handling. 
Name: spu_elf_rel9; Comment: Apply R_SPU_REL9 and R_SPU_REL9I relocs. 
Name: spu_elf_object_p; Comment: Set up overlay info for executables. 
Name: spu_elf_backend_symbol_processing; Comment: Specially mark defined symbols named _EAR_* with BSF_KEEP so that strip --strip-unneeded will not remove them. 
Name: spu_elf_link_hash_table_create; Comment: Create a spu ELF linker hash table. 
Name: get_sym_h; Comment: Find the symbol for the given R_SYMNDX in IBFD and set *HP and *SYMP to (hash, NULL) for global symbols, and (NULL, sym) for locals. Set *SYMSECP to the symbol's section. *LOCSYMSP caches local syms. 
Name: spu_elf_create_sections; Comment: Create the note section if not already present. This is done early so that the linker maps the sections to the right place in the output. 
Name: sort_sections; Comment: qsort predicate to sort sections by vma. 
Name: spu_elf_find_overlays; Comment: Identify overlays in the output bfd, and number them. Returns 0 on error, 1 if no overlays, 2 if overlays. 
Name: is_branch; Comment: Return true for all relative and absolute branch instructions. bra 00110000 0.. brasl 00110001 0.. br 00110010 0.. brsl 00110011 0.. brz 00100000 0.. brnz 00100001 0.. brhz 00100010 0.. brhnz 00100011 0.. 
Name: is_indirect_branch; Comment: Return true for all indirect branch instructions. bi 00110101 000 bisl 00110101 001 iret 00110101 010 bisled 00110101 011 biz 00100101 000 binz 00100101 001 bihz 00100101 010 bihnz 00100101 011 
Name: is_hint; Comment: Return true for branch hint instructions. hbra 0001000.. hbrr 0001001.. 
Name: maybe_needs_stubs; Comment: True if INPUT_SECTION might need overlay stubs. 
Name: needs_ovl_stub; Comment: Return non-zero if this reloc symbol should go via an overlay stub. Return 2 if the stub must be in non-overlay area. 
Name: ovl_stub_size; Comment: Support two sizes of overlay stubs, a slower more compact stub of two instructions, and a faster stub of four instructions. Soft-icache stubs are four or eight words. 
Name: build_stub; Comment: None brasl $75,__icache_br_handler .quad xor_pattern 
Name: allocate_spuear_stubs; Comment: Called via elf_link_hash_traverse to allocate stubs for any _SPUEAR_ symbols. 
Name: process_stubs; Comment: Size or build stubs. 
Name: spu_elf_size_stubs; Comment: Allocate space for overlay call and return stubs. Return 0 on error, 1 if no overlays, 2 otherwise. 
Name: spu_elf_place_overlay_data; Comment: Called from ld to place overlay manager data sections. This is done after the overlay manager itself is loaded, mainly so that the linker's htab->init section is placed after any other .ovl.init sections. 
Name: ovl_mgr_open; Comment: Functions to handle embedded spu_ovl.o object. 
Name: define_ovtab_symbol; Comment: Define an STT_OBJECT symbol. 
Name: spu_elf_build_stubs; Comment: Fill in all stubs and the overlay tables. 
Name: spu_elf_check_vma; Comment: Check that all loadable section VMAs lie in the range LO .. HI inclusive, and stash some parameters for --auto-overlay. 
Name: find_function_stack_adjust; Comment: OFFSET in SEC (presumably) is the beginning of a function prologue. Search for stack adjusting insns, and return the sp delta. If a store of lr is found save the instruction offset to *LR_STORE. If a stack adjusting instruction is found, save that offset to *SP_ADJUST. 
Name: alloc_stack_info; Comment: Allocate a struct spu_elf_stack_info with MAX_FUN struct function_info entries for section SEC. 
Name: maybe_insert_function; Comment: Add a new struct function_info describing a (part of a) function starting at SYM_H. Keep the array sorted by address. 
Name: func_name; Comment: Return the name of FUN. 
Name: is_nop; Comment: Read the instruction at OFF in SEC. Return true iff the instruction is a nop, lnop, or stop 0 (all zero insn). 
Name: insns_at_end; Comment: Extend the range of FUN to cover nop padding up to LIMIT. Return TRUE iff some instruction other than a NOP was found. 
Name: check_function_ranges; Comment: Check and fix overlapping function ranges. Return TRUE iff there are gaps in the current info we have about functions in SEC. 
Name: find_function; Comment: Search current function info for a function that contains address OFFSET in section SEC. 
Name: insert_callee; Comment: Add CALLEE to CALLER call list if not already present. Return TRUE if CALLEE was new. If this function return FALSE, CALLEE should be freed. 
Name: copy_callee; Comment: Copy CALL and insert the copy into CALLER. 
Name: interesting_section; Comment: We're only interested in code sections. Testing SEC_IN_MEMORY excludes overlay stub sections. 
Name: mark_functions_via_relocs; Comment: Rummage through the relocs for SEC, looking for function calls. If CALL_TREE is true, fill in call graph. If CALL_TREE is false, mark destination symbols on calls as being functions. Also look at branches, which may be tail calls or go to hot/cold section part of same function. 
Name: pasted_function; Comment: Handle something like .init or .fini, which has a piece of a function. These sections are pasted together to form a single function. 
Name: discover_functions; Comment: Map address ranges in code sections to functions. 
Name: for_each_node; Comment: Iterate over all function_info we have collected, calling DOIT on each node if ROOT_ONLY is false. Only call DOIT on root nodes if ROOT_ONLY. 
Name: transfer_calls; Comment: Transfer call info attached to struct function_info entries for all of a given function's sections to the first entry. 
Name: mark_non_root; Comment: Mark nodes in the call graph that are called by some other node. 
Name: remove_cycles; Comment: Remove cycles from the call graph. Set depth of nodes. 
Name: mark_detached_root; Comment: Check that we actually visited all nodes in remove_cycles. If we didn't, then there is some cycle in the call graph not attached to any root node. Arbitrarily choose a node in the cycle as a new root and break the cycle. 
Name: build_call_tree; Comment: Populate call_list for each function. 
Name: sort_calls; Comment: qsort predicate to sort calls by priority, max_depth then count. 
Name: mark_overlay_section; Comment: Set linker_mark and gc_mark on any sections that we will put in overlays. These flags are used by the generic ELF linker, but we won't be continuing on to bfd_elf_final_link so it is OK to use them. linker_mark is clear before we get here. Set segment_mark on sections that are part of a pasted function (excluding the last section). Set up function rodata section if --overlay-rodata. We don't currently include merged string constant rodata sections since Sort the call graph so that the deepest nodes will be visited first. 
Name: unmark_overlay_section; Comment: Undo some of mark_overlay_section's work. 
Name: collect_lib_sections; Comment: Add sections we have marked as belonging to overlays to an array for consideration as non-overlay sections. The array consist of pairs of sections, (text,rodata), for functions in the call graph. 
Name: sort_lib; Comment: qsort predicate to sort sections by call count. 
Name: auto_ovl_lib_functions; Comment: Remove some sections from those marked to be in overlays. Choose those that are called from many places, likely library functions. 
Name: collect_overlays; Comment: Build an array of overlay sections. The deepest node's section is added first, then its parent node's section, then everything called from the parent section. The idea being to group sections to minimise calls between different overlays. 
Name: sum_stack; Comment: Descend the call graph for FUN, accumulating total stack required. 
Name: find_pasted_call; Comment: SEC is part of a pasted function. Return the call_info for the next section of this function. 
Name: sort_bfds; Comment: qsort predicate to sort bfds by file name. 
Name: spu_elf_auto_overlay; Comment: Handle --auto-overlay. 
Name: elf32_tic6x_link_hash_table_create; Comment: Create a C6X ELF linker hash table. 
Name: elf32_tic6x_setup; Comment: Called to pass PARAMS to the backend. We store them in the hash table associated with INFO. 
Name: elf32_tic6x_using_dsbt; Comment: Determine if we're dealing with a DSBT object. 
Name: elf32_tic6x_create_dynamic_sections; Comment: Create .plt, .rela.plt, .got, .got.plt, .rela.got and .dsbt sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: elf32_tic6x_install_rela; Comment: Install relocation RELA into section SRELA, incrementing its reloc_count. 
Name: elf32_tic6x_make_got_dynreloc; Comment: Create a dynamic reloc against the GOT at offset OFFSET. The contents of the GOT at this offset have been initialized with the relocation. 
Name: elf32_tic6x_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf32_tic6x_gc_mark_extra_sections; Comment: Unwinding tables are not referenced directly. This pass marks them as required if the corresponding code section is marked. 
Name: is_tic6x_elf_unwind_section_name; Comment: Return TRUE if this is an unwinding table index. 
Name: elf32_tic6x_fake_sections; Comment: Set the type and flags for an unwinding index table. We do this by the section name, which is a hack, but ought to work. 
Name: elf32_tic6x_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf32_tic6x_rel_relocation_p; Comment: Return true if relocation REL against section SEC is a REL rather than RELA relocation. RELOCS is the first relocation in the section and ABFD is the bfd that contains SEC. 
Name: elf32_tic6x_link_omit_section_dynsym; Comment: We need dynamic symbols for every section, since segments can relocate independently. 
Name: elf32_tic6x_check_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the global offset table, procedure linkage table, and dynamic reloc sections. 
Name: elf32_tic6x_allocate_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: elf32_tic6x_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf32_tic6x_always_size_sections; Comment: This function is called after all the input files have been read, and the input sections have been assigned to output sections. 
Name: elf32_tic6x_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: elf32_tic6x_merge_arch_attributes; Comment: Merge the Tag_ISA attribute values ARCH1 and ARCH2 and return the merged value. At present, all merges succeed, so no return value for errors is defined. 
Name: elf32_tic6x_tag_to_array_alignment; Comment: Convert a Tag_ABI_array_object_alignment or Tag_ABI_array_object_align_expected tag value TAG to a corresponding alignment value; return the alignment, or -1 for an unknown tag value. 
Name: elf32_tic6x_array_alignment_to_tag; Comment: Convert a Tag_ABI_array_object_alignment or Tag_ABI_array_object_align_expected alignment ALIGN to a corresponding tag value; return the tag value. 
Name: elf32_tic6x_merge_attributes; Comment: Merge attributes from IBFD and OBFD, returning TRUE if the merge succeeded, FALSE otherwise. 
Name: elf32_tic6x_add_unwind_table_edit; Comment: Add a new unwind edit to the list described by HEAD, TAIL. If TINDEX is zero, adds the edit to the start of the list. (The list must be built in order of ascending TINDEX: the function's callers are primarily responsible for maintaining that condition). 
Name: elf32_tic6x_adjust_exidx_size; Comment: Increase the size of EXIDX_SEC by ADJUST bytes. ADJUST must be negative. 
Name: elf32_tic6x_insert_cantunwind_after; Comment: Insert an EXIDX_CANTUNWIND marker at the end of a section. 
Name: elf32_tic6x_fix_exidx_coverage; Comment: Scan .cx6abi.exidx tables, and create a list describing edits which should be made to those tables, such that: 1. Regions without unwind data are marked with EXIDX_CANTUNWIND entries. 2. Duplicate entries are merged together (EXIDX_CANTUNWIND, or unwind _codes which have been inlined into the index). If MERGE_EXIDX_ENTRIES is false, duplicate entries are not merged. The edits are applied when the tables are written (in elf32_tic6x_write_section). 
Name: elf32_tic6x_add_low31; Comment: Add ADDEND to lower 31 bits of VAL, leaving other bits unmodified. 
Name: elf32_tic6x_copy_exidx_entry; Comment: Copy an .c6xabi.exidx table entry, adding OFFSET to (applied) PREL31 relocations. OFFSET is in bytes, and will be scaled before encoding. 
Name: elf32_tic6x_write_section; Comment: Do the actual mangling of exception index tables. 
Name: tilegx_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: tilepro_elf_mkobject; Comment: Allocate TILEPro ELF private object data. 
Name: tilepro_info_to_howto_rela; Comment: Set the howto pointer for an TILEPro ELF reloc. 
Name: tilepro_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: link_hash_newfunc; Comment: Create an entry in an TILEPro ELF linker hash table. 
Name: tilepro_elf_link_hash_table_create; Comment: Create a TILEPRO ELF linker hash table. 
Name: tilepro_elf_create_got_section; Comment: Create the .got section. 
Name: tilepro_elf_create_dynamic_sections; Comment: Create .plt, .rela.plt, .got, .got.plt, .rela.got, .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: tilepro_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: tilepro_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: tilepro_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: tilepro_elf_omit_section_dynsym; Comment: Return true if the dynamic symbol for a given section should be omitted when creating a shared library. 
Name: tilepro_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: tpoff; Comment: Return the relocation value for R_TILEPRO_TLS_TPOFF32. 
Name: tilepro_replace_insn; Comment: Replace the MASK bits in ADDR with those in INSN, for the next TILEPRO_BUNDLE_SIZE_IN_BYTES bytes. 
Name: tilepro_elf_relocate_section; Comment: Relocate an TILEPRO ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures. This function is responsible for adjusting the section contents as necessary, and (if generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: tilepro_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: tilepro_finish_dyn; Comment: Finish up the dynamic sections. 
Name: tilepro_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: v850_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: v850_elf_perform_lo16_relocation; Comment: Calculate the final operand value for a R_V850_LO16 or R_V850_LO16_SPLIT_OFFSET. *INSN is the current operand value and ADDEND is the sum of the relocation symbol and offset. Store the operand value in *INSN and return true on success. The assembler has already done some of this: If the value stored in the instruction has its 15th bit set, (counting from zero) then the assembler will have added 1 to the value stored in the associated HI16S reloc. So for example, these relocations: movhi hi( fred ), r0, r1 movea lo( fred ), r1, r1 will store 0 in the value fields for the MOVHI and MOVEA instructions and addend will be the address of fred, but for these instructions: movhi hi( fred + 0x123456 ), r0, r1 movea lo( fred + 0x123456 ), r1, r1 the value stored in the MOVHI instruction will be 0x12 and the value stored in the MOVEA instruction will be 0x3456. If however the instructions were: movhi hi( fred + 0x10ffff ), r0, r1 movea lo( fred + 0x10ffff ), r1, r1 then the value stored in the MOVHI instruction would be 0x11 (not 0x10) and the value stored in the MOVEA instruction would be 0xffff. Thus (assuming for the moment that the addend is 0), at run time the MOVHI instruction loads 0x110000 into r1, then the MOVEA instruction adds 0xffffffff (sign extension!) producing 0x10ffff. Similarly if the instructions were: movhi hi( fred - 1 ), r0, r1 movea lo( fred - 1 ), r1, r1 then 0 is stored in the MOVHI instruction and -1 is stored in the MOVEA instruction. Overflow can occur if the addition of the value stored in the instruction plus the addend sets the 15th bit when before it was clear. This is because the 15th bit will be sign extended into the high part, thus reducing its value by one, but since the 15th bit was originally clear, the assembler will not have added 1 to the previous HI16S reloc to compensate for this effect. For example: movhi hi( fred + 0x123456 ), r0, r1 movea lo( fred + 0x123456 ), r1, r1 The value stored in HI16S reloc is 0x12, the value stored in the LO16 reloc is 0x3456. If we assume that the address of fred is 0x00007000 then the relocations become: HI16S: 0x0012 + (0x00007000 >> 16) = 0x12 LO16: 0x3456 + (0x00007000 & 0xffff) = 0xa456 but when the instructions are executed, the MOVEA instruction's value is signed extended, so the sum becomes: _0x00120000 + 0xffffa456 ------------ _0x0011a456 but 'fred + 0x123456' = 0x0012a456 Note that if the 15th bit was set in the value stored in the LO16 reloc, then we do not have to do anything: movhi hi( fred + 0x10ffff ), r0, r1 movea lo( fred + 0x10ffff ), r1, r1 HI16S: 0x0011 + (0x00007000 >> 16) = 0x11 LO16: 0xffff + (0x00007000 & 0xffff) = 0x6fff _0x00110000 + 0x00006fff ------------ _0x00116fff = fred + 0x10ffff = 0x7000 + 0x10ffff Overflow can also occur if the computation carries into the 16th bit and it also results in the 15th bit having the same value as the 15th bit of the original value. What happens is that the HI16S reloc will have already examined the 15th bit of the original value and added 1 to the high part if the bit is set. This compensates for the sign extension of 15th bit of the result of the computation. But now there is a carry into the 16th bit, and this has not been allowed for. So, for example if fred is at address 0xf000: movhi hi( fred + 0xffff ), r0, r1 [bit 15 of the offset is set] movea lo( fred + 0xffff ), r1, r1 HI16S: 0x0001 + (0x0000f000 >> 16) = 0x0001 LO16: 0xffff + (0x0000f000 & 0xffff) = 0xefff (carry into bit 16 is lost) 0x00010000 + 0xffffefff ------------ 0x0000efff but 'fred + 0xffff' = 0x0001efff Similarly, if the 15th bit remains clear, but overflow occurs into the 16th bit then (assuming the address of fred is 0xf000): movhi hi( fred + 0x7000 ), r0, r1 [bit 15 of the offset is clear] movea lo( fred + 0x7000 ), r1, r1 HI16S: 0x0000 + (0x0000f000 >> 16) = 0x0000 LO16: 0x7000 + (0x0000f000 & 0xffff) = 0x6fff (carry into bit 16 is lost) 0x00000000 + 0x00006fff ------------ 0x00006fff but 'fred + 0x7000' = 0x00016fff Note - there is no need to change anything if a carry occurs, and the 15th bit changes its value from being set to being clear, as the HI16S reloc will have already added in 1 to the high part for us: movhi hi( fred + 0xffff ), r0, r1 [bit 15 of the offset is set] movea lo( fred + 0xffff ), r1, r1 HI16S: 0x0001 + (0x00007000 >> 16) LO16: 0xffff + (0x00007000 & 0xffff) = 0x6fff (carry into bit 16 is lost) 0x00010000 + 0x00006fff (bit 15 not set, so the top half is zero) ------------ 0x00016fff which is right (assuming that fred is at 0x7000) but if the 15th bit goes from being clear to being set, then we must once again handle overflow: movhi hi( fred + 0x7000 ), r0, r1 [bit 15 of the offset is clear] movea lo( fred + 0x7000 ), r1, r1 HI16S: 0x0000 + (0x0000ffff >> 16) LO16: 0x7000 + (0x0000ffff & 0xffff) = 0x6fff (carry into bit 16) 0x00000000 + 0x00006fff (bit 15 not set, so the top half is zero) ------------ 0x00006fff which is wrong (assuming that fred is at 0xffff). 
Name: v850_elf_perform_relocation; Comment: FIXME: The code here probably ought to be removed and the code in reloc.c allowed to do its stuff instead. At least for most of the relocs, anyway. 
Name: v850_elf_reloc; Comment: Insert the addend into the instruction. 
Name: v850_elf_ignore_reloc; Comment: This function is used for relocs which are only used for relaxing, which the linker should otherwise ignore. 
Name: v850_elf_reloc_type_lookup; Comment: Map a bfd relocation into the appropriate howto structure. 
Name: v850_elf_info_to_howto_rel; Comment: Set the howto pointer for an V850 ELF reloc. 
Name: v850_elf_info_to_howto_rela; Comment: Set the howto pointer for a V850 ELF reloc (type RELA). 
Name: v850_elf_final_link_relocate; Comment: Perform a relocation as part of a final link. 
Name: v850_elf_relocate_section; Comment: Relocate an V850 ELF section. 
Name: v850_elf_make_note_section; Comment: Create the note section if not already present. This is done early so that the linker maps the sections to the right place in the output. 
Name: v850_elf_create_sections; Comment: Create the note section if not already present. This is done early so that the linker maps the sections to the right place in the output. 
Name: v850_elf_copy_notes; Comment: Copy a v850 note section from one object module to another. 
Name: v850_elf_copy_private_bfd_data; Comment: Copy backend specific data from one object module to another. 
Name: v850_elf_object_p; Comment: Set the right machine number and architecture. 
Name: v850_elf_final_write_processing; Comment: Store the machine number in the flags field. 
Name: v850_elf_set_private_flags; Comment: Function to keep V850 specific file flags. 
Name: v850_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: v850_elf_print_private_bfd_data; Comment: Display the flags field. 
Name: v850_elf_section_from_bfd_section; Comment: Given a BFD section, try to locate the corresponding ELF section index. 
Name: v850_elf_symbol_processing; Comment: Handle the special V850 section numbers that a symbol may use. 
Name: v850_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We must handle the special v850 section numbers here. 
Name: v850_elf_fake_sections; Comment: Set the correct type for a V850 ELF section. We do this by the section name, which is a hack, but ought to work. 
Name: v850_elf_relax_delete_bytes; Comment: Delete some bytes from a section while relaxing. 
Name: v800_elf_reloc_type_lookup; Comment: Map a bfd relocation into the appropriate howto structure. 
Name: v800_elf_info_to_howto; Comment: Set the howto pointer in CACHE_PTR for a V800 ELF reloc. 
Name: elf_vax_link_hash_newfunc; Comment: Create an entry in an VAX ELF linker hash table. 
Name: elf_vax_link_hash_table_create; Comment: Create an VAX ELF linker hash table. 
Name: elf32_vax_set_private_flags; Comment: Keep vax-specific flags in the ELF header 
Name: elf32_vax_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_vax_print_private_bfd_data; Comment: Display the flags field 
Name: elf_vax_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: elf_vax_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf_vax_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_vax_discard_got_entries; Comment: This function is called via elf_link_hash_traverse. It resets GOT and PLT (.GOT) reference counts back to -1 so normal PC32 relocation will be done. 
Name: elf_vax_always_size_sections; Comment: Discard unused dynamic data if this is a static link. 
Name: elf_vax_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf_vax_discard_copies; Comment: This function is called via elf_vax_link_hash_traverse if we are creating a shared object with -Bsymbolic. It discards the space allocated to copy PC relative relocs against symbols which are defined in regular objects. We allocated space for them in the check_relocs routine, but we won't fill them in in the relocate_section routine. 
Name: elf_vax_instantiate_got_entries; Comment: This function is called via elf_link_hash_traverse. It looks for entries that have GOT or PLT (.GOT) references. If creating a shared object with -Bsymbolic, or the symbol has been forced local, then it resets the reference count back to -1 so normal PC32 relocation will be done. Otherwise space in the .got and .rela.got will be reserved for the symbol. 
Name: elf_vax_relocate_section; Comment: Relocate an VAX ELF section. 
Name: elf_vax_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_vax_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: visium_parity_bit; Comment: Return the parity bit for INSN shifted to its final position. 
Name: visium_elf_howto_parity_reloc; Comment: This "special function" will only be used when the input and output files have different formats ie. when generating S-records directly using "--oformat srec". Otherwise we use _bfd_final_link_relocate which uses a howto structure, but does not use the special_function field. It sets instruction parity to even. This cannot be done by a howto. 
Name: visium_info_to_howto_rela; Comment: Set the howto pointer for a VISIUM ELF reloc. 
Name: visium_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. Since we don't do .gots or .plts, we just need to consider the virtual table relocs for gc. 
Name: visium_elf_relocate_section; Comment: Relocate a VISIUM ELF section. 
Name: visium_elf_gc_mark_hook; Comment: This function is called during section gc to discover the section a to which a particular relocation refers. Return the section that should be marked against GC for a given relocation. 
Name: visium_elf_set_private_flags; Comment: Function to set the ELF flag bits. 
Name: visium_elf_copy_private_bfd_data; Comment: Copy backend specific data from one object module to another. 
Name: visium_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf32_wasm32_reloc_type_lookup; Comment: Look up the relocation CODE. 
Name: elf32_wasm32_reloc_name_lookup; Comment: Look up the relocation R_NAME. 
Name: elf32_wasm32_rtype_to_howto; Comment: Look up the relocation R_TYPE. 
Name: elf32_wasm32_info_to_howto_rela; Comment: Translate the ELF-internal relocation RELA into CACHE_PTR. 
Name: xgate_info_to_howto_rel; Comment: Set the howto pointer for an XGATE ELF reloc. 
Name: elf32_xgate_backend_symbol_processing; Comment: Hook called when reading symbols. 
Name: xgate_elf_ignore_reloc; Comment: This function is used for relocs which are only used for relaxing, which the linker should otherwise ignore. 
Name: xstormy16_elf_24_reloc; Comment: Handle the R_XSTORMY16_24 reloc, which has an odd bit arrangement. 
Name: xstormy16_info_to_howto_rela; Comment: Set the howto pointer for an XSTORMY16 ELF reloc. 
Name: xstormy16_elf_check_relocs; Comment: We support 16-bit pointers to code above 64k by generating a thunk below 64k containing a JMPF instruction to the final address. We cannot, unfortunately, minimize the number of thunks unless the -relax switch is given, as otherwise we have no idea where the sections will fall in the address space. 
Name: xstormy16_relax_plt_realloc; Comment: A subroutine of xstormy16_elf_relax_section. If the global symbol H previously had a plt entry, give it a new entry offset. 
Name: xstormy16_elf_relocate_section; Comment: Relocate an XSTORMY16 ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: xstormy16_elf_finish_dynamic_sections; Comment: This must exist if dynobj is ever set. 
Name: xstormy16_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf_xtensa_info_to_howto_rela; Comment: Given an ELF "rela" relocation, find the corresponding howto and record it in the BFD internal arelent representation of the relocation. 
Name: elf_xtensa_link_hash_newfunc; Comment: Create an entry in an Xtensa ELF linker hash table. 
Name: elf_xtensa_link_hash_table_create; Comment: Create an Xtensa ELF linker hash table. 
Name: elf_xtensa_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: xtensa_read_table_entries; Comment: Get the literal table or property table entries for the given section. Sets TABLE_P and returns the number of entries. On error, returns a negative value. 
Name: elf_xtensa_check_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the dynamic reloc sections. 
Name: elf_xtensa_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf_xtensa_create_dynamic_sections; Comment: Create all the dynamic sections. 
Name: elf_xtensa_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf_xtensa_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: bfd_elf_xtensa_reloc; Comment: This function is registered as the "special_function" in the Xtensa howto for handling simplify operations. bfd_perform_relocation / bfd_install_relocation use it to perform (install) the specified relocation. Since this replaces the code in bfd_perform_relocation, it is basically an Xtensa-specific, stripped-down version of bfd_perform_relocation. 
Name: elf_xtensa_create_plt_entry; Comment: Set up an entry in the procedure linkage table. 
Name: elf_xtensa_relocate_section; Comment: Relocate an Xtensa ELF section. This is invoked by the linker for both relocatable and final links. 
Name: elf_xtensa_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. There's not much to do here since the PLT and GOT entries are all set up by relocate_section. 
Name: elf_xtensa_combine_prop_entries; Comment: Combine adjacent literal table entries in the output. Adjacent entries within each input section may have been removed during relaxation, but we repeat the process here, even though it's too late to shrink the output section, because it's important to minimize the number of literal table entries to reduce the start-up work for the runtime linker. Returns the number of remaining table entries or -1 on error. 
Name: elf_xtensa_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf_xtensa_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf_xtensa_object_p; Comment: Set the right machine number for an Xtensa ELF file. 
Name: elf_xtensa_final_write_processing; Comment: The final processing done just before writing out an Xtensa ELF object file. This gets the Xtensa architecture right based on the machine number. 
Name: elf_xtensa_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: get_relocation_opcode; Comment: Get the opcode for a relocation. 
Name: insn_decode_len; Comment: Return 0 if it fails to decode. 
Name: insn_decode_opcode; Comment: Decode the opcode for a single slot instruction. Return 0 if it fails to decode or the instruction is multi-slot. 
Name: check_branch_target_aligned; Comment: The offset is the offset in the contents. The address is the address of that offset. 
Name: can_narrow_instruction; Comment: Check if an instruction can be "narrowed", i.e., changed from a standard 3-byte instruction to a 2-byte "density" instruction. If it is valid, return the instruction buffer holding the narrow instruction. Otherwise, return 0. The set of valid narrowing are specified by a string table but require some special case operand checks in some cases. 
Name: narrow_instruction; Comment: Attempt to narrow an instruction. If the narrowing is valid, perform the action in-place directly into the contents and return TRUE. Otherwise, the return value is FALSE and the contents are not modified. 
Name: can_widen_instruction; Comment: Check if an instruction can be "widened", i.e., changed from a 2-byte "density" instruction to a standard 3-byte instruction. If it is valid, return the instruction buffer holding the wide instruction. Otherwise, return 0. The set of valid widenings are specified by a string table but require some special case operand checks in some cases. 
Name: widen_instruction; Comment: Attempt to widen an instruction. If the widening is valid, perform the action in-place directly into the contents and return TRUE. Otherwise, the return value is FALSE and the contents are not modified. 
Name: elf_xtensa_do_asm_simplify; Comment: Code for transforming CALLs at link-time. 
Name: r_reloc_is_const; Comment: The r_reloc structure is included by value in literal_value, but not every literal_value has an associated relocation -- some are simple constants. In such cases, we set all the fields in the r_reloc struct to zero. The r_reloc_is_const function should be used to detect this case. 
Name: find_source_reloc; Comment: Find the source_reloc for a particular source offset and relocation type. Note that the array is sorted by _target_ offset, so this is just a linear search. 
Name: value_map_get_cached_value; Comment: Check if the specified literal_value has been seen before. 
Name: add_value_map; Comment: Record a new literal value. It is illegal to call this if VALUE already has an entry here. 
Name: text_action_add; Comment: Add a modification action to the text. For the case of adding or removing space, modify any current fill and assume that "unreachable_space" bytes can be freely contracted. Note that a negative removed value is a fill. 
Name: removed_by_actions; Comment: Find the total offset adjustment for the relaxations specified by text_actions, beginning from a particular starting action. This is typically used from offset_with_removed_text to search an entire list of actions, but it may also be called directly when adjusting adjacent offsets so that each search may begin where the previous one left off. 
Name: find_insn_action; Comment: The find_insn_action routine will only find non-fill actions. 
Name: add_removed_literal; Comment: Record that the literal at "from" is being removed. If "to" is not NULL, the "from" literal is being coalesced with the "to" literal. 
Name: find_removed_literal; Comment: Check if the list of removed literals contains an entry for the given address. Return the entry if found. 
Name: retrieve_internal_relocs; Comment: During relaxation, we need to modify relocations, section contents, and symbol definitions, and we need to keep the original values from being reloaded from the input files, i.e., we need to "pin" the modified values in memory. We also want to continue to observe the setting of the "keep-memory" flag. The following functions wrap the standard BFD functions to take care of this for us. 
Name: analyze_relocations; Comment: This function is called once at the start of relaxation. It scans all the input sections and marks the ones that are relaxable (i.e., literal sections with L32R relocations against them), and then collects source_reloc information for all the relocations against those relaxable sections. During this process, it also detects longcalls, i.e., calls relaxed by the assembler into indirect calls, that can be optimized back into direct calls. Within each extended basic block (ebb) containing an optimized longcall, it computes a set of "text actions" that can be performed to remove the L32R associated with the longcall while optionally preserving branch target alignments. 
Name: find_relaxable_sections; Comment: Find all the sections that might be relaxed. The motivation for this pass is that collect_source_relocs() needs to record _all_ the relocations that target each relaxable section. That is expensive and unnecessary unless the target section is actually going to be relaxed. This pass identifies all such sections by checking if they have L32Rs pointing to them. In the process, the total number of relocations targeting each section is also counted so that we know how much space to allocate for source_relocs against each relaxable literal section. 
Name: collect_source_relocs; Comment: Record _all_ the relocations that point to relaxable sections, and get rid of ASM_EXPAND relocs by either converting them to ASM_SIMPLIFY or by removing them. 
Name: is_resolvable_asm_expansion; Comment: Return TRUE if the asm expansion can be resolved. Generally it can be resolved on a final link or when a partial link locates it in the same section as the target. Set "is_reachable" flag if the target of the call is within the range of a direct call, given the current VMA for this section and the target section. 
Name: reloc_range_list_update_range; Comment: Update relocation list object so that it lists all relocations that cross [first; last] range. Range bounds should not decrease with successive invocations. 
Name: compute_text_actions; Comment: The compute_text_actions function will build a list of potential transformation actions for code in the extended basic block of each longcall that is optimized to a direct call. From this list we generate a set of actions to actually perform that optimizes for space and, if not using size_opt, maintains branch target alignments. These actions to be performed are placed on a per-section list. The actual changes are performed by relax_section() in the second pass. 
Name: prev_instr_is_a_loop; Comment: Do not widen an instruction if it is preceeded by a loop opcode. It might cause misalignment. 
Name: compute_ebb_proposed_actions; Comment: Find all of the possible actions for an extended basic block. 
Name: compute_ebb_actions; Comment: After all of the information has collected about the transformations possible in an EBB, compute the appropriate actions here in compute_ebb_actions. We still must check later to make sure that the actions do not break any relocations. The algorithm used here is pretty greedy. Basically, it removes as many no-ops as possible so that the end of the EBB has the same alignment characteristics as the original. First, it uses narrowing, then fill space at the end of the EBB, and finally widenings. If that does not work, it tries again with one fewer no-op removed. The optimization will only be performed if all of the branch targets that were aligned before transformation are also aligned after the transformation. When the size_opt flag is set, ignore the branch target alignments, narrow all wide instructions, and remove all no-ops unless the end of the EBB prevents it. 
Name: build_xlate_map; Comment: Build a binary searchable offset translation map from a section's action list. 
Name: free_xlate_map; Comment: Free an offset translation map. 
Name: check_section_ebb_pcrels_fit; Comment: Use check_section_ebb_pcrels_fit to make sure that all of the relocations in a section will fit if a proposed set of actions are performed. 
Name: compute_removed_literals; Comment: If the section contains relaxable literals, check each literal to see if it has the same value as another literal that has already been seen, either in the current section or a previous one. If so, add an entry to the per-section list of removed literals. The actual changes are deferred until the next pass. 
Name: relocations_reach; Comment: Check if the original relocations (presumably on L32R instructions) identified by reloc[0..N] can be changed to reference the literal identified by r_rel. If r_rel is out of range for any of the original relocations, then we don't want to coalesce the original literal with the one at r_rel. We only check reloc[0..N], where the offsets are all the same as for reloc[0] (i.e., they're all referencing the same literal) and where N is also bounded by the number of remaining entries in the "reloc" array. The "reloc" array is sorted by target offset so we know all the entries for the same literal will be contiguous. 
Name: coalesce_shared_literal; Comment: Move a literal to another literal location because it is the same as the other literal value. 
Name: move_shared_literal; Comment: Move a literal to another location. This may actually increase the total amount of space used because of alignments so we need to do this carefully. Also, it may make a branch go out of range. 
Name: action_remove_bytes_fn; Comment: Second relaxation pass. 
Name: relax_section; Comment: Modify all of the relocations to point to the right spot, and if this is a relaxable section, delete the unwanted literals and fix the section size. 
Name: translate_reloc_bfd_fix; Comment: Translate a fix given the mapping in the relax info for the target section. If it has already been translated, no work is required. 
Name: translate_reloc; Comment: Fix up a relocation to take account of removed literals. 
Name: shrink_dynamic_reloc_sections; Comment: For dynamic links, there may be a dynamic relocation for each literal. The number of dynamic relocations must be computed in size_dynamic_sections, which occurs before relaxation. When a literal is removed, this function checks if there is a corresponding dynamic relocation and shrinks the size of the appropriate dynamic relocation section accordingly. At this point, the contents of the dynamic relocation sections have not yet been filled in, so there's nothing else that needs to be done. 
Name: move_literal; Comment: Take an r_rel and move it to another section. This usually requires extending the interal_relocation array and pinning it. If the original r_rel is from the same BFD, we can complete this here. Otherwise, we add a fix record to let the final link fix the appropriate address. Contents and internal relocations for the section must be pinned after calling this routine. 
Name: relax_property_section; Comment: This is similar to relax_section except that when a target is moved, we shift addresses up. We also need to modify the size. This algorithm does NOT allow for relocations into the middle of the property sections. 
Name: relax_section_symbols; Comment: Change symbol values to account for removed literals. 
Name: do_fix_for_relocatable_link; Comment: "Fix" handling functions, called while performing relocations. 
Name: elf_xtensa_get_plt_section; Comment: Miscellaneous utility functions.... 
Name: match_section_group; Comment: Predicate function used to look up a section in a particular group. 
Name: xtensa_callback_required_dependence; Comment: Other functions called directly by the linker. 
Name: z80_info_to_howto_rela; Comment: Set the howto pointer for an z80 ELF reloc. 
Name: z80_elf_final_write_processing; Comment: The final processing done just before writing out a Z80 ELF object file. This gets the Z80 architecture right based on the machine number. 
Name: z80_elf_object_p; Comment: Set the right machine number. 
Name: elf64_alpha_link_hash_newfunc; Comment: Create an entry in a Alpha ELF linker hash table. 
Name: elf64_alpha_bfd_link_hash_table_create; Comment: Create a Alpha ELF linker hash table. 
Name: elf64_alpha_reloc_nil; Comment: A relocation function which doesn't do anything. 
Name: elf64_alpha_reloc_bad; Comment: A relocation function used for an unsupported reloc. 
Name: elf64_alpha_do_reloc_gpdisp; Comment: Do the work of the GPDISP relocation. 
Name: elf64_alpha_reloc_gpdisp; Comment: The special function for the GPDISP reloc. 
Name: elf64_alpha_bfd_reloc_type_lookup; Comment: Given a BFD reloc type, return a HOWTO structure. 
Name: elf64_alpha_info_to_howto; Comment: Given an Alpha ELF reloc type, fill in an arelent structure. 
Name: elf64_alpha_section_from_shdr; Comment: Handle an Alpha specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: elf64_alpha_section_flags; Comment: Convert Alpha specific section flags to bfd internal section flags. 
Name: elf64_alpha_fake_sections; Comment: Set the correct type for an Alpha ELF section. We do this by the section name, which is a hack, but ought to work. 
Name: elf64_alpha_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put .comm items in .sbss, and not .bss. 
Name: elf64_alpha_create_got_section; Comment: Create the .got section. 
Name: elf64_alpha_create_dynamic_sections; Comment: Create all the dynamic sections. 
Name: elf64_alpha_read_ecoff_info; Comment: Read ECOFF debugging information from a .mdebug section into a ecoff_debug_info structure. 
Name: elf64_alpha_is_local_label_name; Comment: Alpha ELF local labels start with '$'. 
Name: get_got_entry; Comment: Search for and possibly create a got entry. 
Name: elf64_alpha_sort_relocs_p; Comment: Whether to sort relocs output by ld -r or ld --emit-relocs, by r_offset. Don't do so for code sections. We want to keep ordering of LITERAL/LITUSE as is. On the other hand, elf-eh-frame.c processing requires .eh_frame relocs to be sorted. 
Name: elf64_alpha_check_relocs; Comment: Handle dynamic relocations when doing an Alpha ELF link. 
Name: elf64_alpha_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: elf64_alpha_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: elf64_alpha_merge_symbol_attribute; Comment: Record STO_ALPHA_NOPV and STO_ALPHA_STD_GPLOAD. 
Name: elf64_alpha_copy_indirect_symbol; Comment: Symbol versioning can create new symbols, and make our old symbols indirect to the new ones. Consolidate the got and reloc information in these situations. 
Name: elf64_alpha_can_merge_gots; Comment: Is it possible to merge two object file's .got tables? 
Name: elf64_alpha_merge_gots; Comment: Actually merge two .got tables. 
Name: elf64_alpha_calc_got_offsets_for_symbol; Comment: Calculate the offsets for the got entries. 
Name: elf64_alpha_size_got_sections; Comment: Constructs the gots. 
Name: elf64_alpha_size_plt_section; Comment: Called from relax_section to rebuild the PLT in light of potential changes in the function's status. 
Name: alpha_dynamic_entries_for_reloc; Comment: The number of dynamic relocations required by a static relocation. 
Name: elf64_alpha_calc_dynrel_sizes; Comment: Work out the sizes of the dynamic relocation entries. 
Name: elf64_alpha_size_rela_got_1; Comment: Subroutine of elf64_alpha_size_rela_got_section for doing the global symbols. 
Name: elf64_alpha_size_rela_got_section; Comment: Set the sizes of the dynamic relocation sections. 
Name: elf64_alpha_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: elf64_alpha_emit_dynrel; Comment: Emit a dynamic relocation for (DYNINDX, RTYPE, ADDEND) at (SEC, OFFSET) into the next available slot in SREL. 
Name: elf64_alpha_relocate_section_r; Comment: Relocate an Alpha ELF section for a relocatable link. We don't have to change anything unless the reloc is against a section symbol, in which case we have to adjust according to where the section symbol winds up in the output section. 
Name: elf64_alpha_relocate_section; Comment: Relocate an Alpha ELF section. 
Name: elf64_alpha_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf64_alpha_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf64_alpha_final_link; Comment: We need to use a special link routine to handle the .mdebug section. We need to merge all instances of these sections together, not write them all out sequentially. 
Name: elf64_alpha_fbsd_init_file_header; Comment: The kernel recognizes executables as valid only if they carry a "FreeBSD" label in the ELF header. So we put this label on all executables and (for simplicity) also all other object files. 
Name: bpf_reloc_type_lookup; Comment: Map BFD reloc types to bpf ELF reloc types. 
Name: bpf_reloc_name_lookup; Comment: Map BFD reloc names to bpf ELF reloc names. 
Name: bpf_info_to_howto; Comment: Set the howto pointer for a bpf reloc. 
Name: bpf_elf_relocate_section; Comment: Relocate an eBPF ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjusting the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: elf64_bpf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: bpf_elf_generic_reloc; Comment: A generic howto special function for installing BPF relocations. This function will be called by the assembler (via bfd_install_relocation), and by various get_relocated_section_contents functions. At link time, bpf_elf_relocate_section will resolve the final relocations. BPF instructions are always big endian, and this approach avoids problems in bfd_install_relocation. 
Name: hppa64_link_hash_newfunc; Comment: Initialize an entry in the link hash table. 
Name: elf64_hppa_hash_table_create; Comment: Create the derived linker hash table. The PA64 ELF port uses this derived hash table to keep information specific to the PA ElF linker (without using static variables). 
Name: elf64_hppa_object_p; Comment: Return nonzero if ABFD represents a PA2.0 ELF64 file. Additionally we set the default architecture and machine. 
Name: elf64_hppa_section_from_shdr; Comment: Given section type (hdr->sh_type), return a boolean indicating whether or not the section is an elf64-hppa specific section. 
Name: get_reloc_section; Comment: SEC is a section containing relocs for an input BFD when linking; return a suitable section for holding relocs in the output BFD for a link. 
Name: count_dyn_reloc; Comment: Add a new entry to the list of dynamic relocations against DYN_H. We use this to keep a record of all the FPTR relocations against a particular symbol so that we can create FPTR relocations in the output file. 
Name: hppa64_elf_local_refcounts; Comment: Return a pointer to the local DLT, PLT and OPD reference counts for ABFD. Returns NULL if the storage allocation fails. 
Name: elf64_hppa_check_relocs; Comment: Scan the RELOCS and record the type of dynamic entries that each referenced symbol needs. 
Name: elf64_hppa_dynamic_symbol_p; Comment: Should we do dynamic things to this symbol? 
Name: elf64_hppa_mark_exported_functions; Comment: Mark all functions exported by this file so that we can later allocate entries in .opd for them. 
Name: allocate_global_data_dlt; Comment: Allocate space for a DLT entry. 
Name: allocate_global_data_plt; Comment: Allocate space for a DLT.PLT entry. 
Name: allocate_global_data_stub; Comment: Allocate space for a STUB entry. 
Name: allocate_global_data_opd; Comment: Allocate space for a FPTR entry. 
Name: elf64_hppa_init_file_header; Comment: HP requires the EI_OSABI field to be filled in. The assignment to EI_ABIVERSION may not be strictly necessary. 
Name: get_opd; Comment: Create function descriptor section (.opd). This section is called .opd because it contains "official procedure descriptors". The "official" refers to the fact that these descriptors are used when taking the address of a procedure, thus ensuring a unique address for each procedure. 
Name: get_plt; Comment: Create the PLT section. 
Name: get_dlt; Comment: Create the DLT section. 
Name: get_stub; Comment: Create the stubs section. 
Name: elf64_hppa_create_dynamic_sections; Comment: Create sections necessary for dynamic linking. This is only a rough cut and will likely change as we learn more about the somewhat unusual dynamic linking scheme HP uses. .stub: _Contains code to implement cross-space calls. The first time one _of the stubs is used it will call into the dynamic linker, later _calls will go straight to the target. _The only stub we support right now looks like _ldd OFFSET(%dp),%r1 _bve %r0(%r1) _ldd OFFSET+8(%dp),%dp _Other stubs may be needed in the future. We may want the remove _the break/nop instruction. It is only used right now to keep the _offset of a .plt entry and a .stub entry in sync. .dlt: _This is what most people call the .got. HP used a different name. _Losers. .rela.dlt: _Relocations for the DLT. .plt: _Function pointers as address,gp pairs. .rela.plt: _Should contain dynamic IPLT (and EPLT?) relocations. .opd: _FPTRS .rela.opd: _EPLT relocations for symbols exported from shared libraries. 
Name: allocate_dynrel_entries; Comment: Allocate dynamic relocations for those symbols that turned out to be dynamic. 
Name: elf64_hppa_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. 
Name: elf64_hppa_mark_milli_and_exported_functions; Comment: This function is called via elf_link_hash_traverse to mark millicode symbols with a dynindx of -1 and to remove the string table reference from the dynamic symbol table. If the symbol is not a millicode symbol, elf64_hppa_mark_exported_functions is called. 
Name: elf64_hppa_size_dynamic_sections; Comment: Set the final sizes of the dynamic sections and allocate memory for the contents of our special sections. 
Name: elf64_hppa_link_output_symbol_hook; Comment: Called after we have output the symbol into the dynamic symbol table, but before we output the symbol into the normal symbol table. For some symbols we had to change their address when outputting the dynamic symbol table. We undo that change here so that the symbols have their expected value in the normal symbol table. Ick. 
Name: elf64_hppa_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf64_hppa_finalize_opd; Comment: The .opd section contains FPTRs for each function this file exports. Initialize the FPTR entries. 
Name: elf64_hppa_finalize_dlt; Comment: The .dlt section contains addresses for items referenced through the dlt. Note that we can have a DLTIND relocation for a local symbol, thus we can not depend on finish_dynamic_symbol to initialize the .dlt. 
Name: elf64_hppa_finalize_dynreloc; Comment: Finalize the dynamic relocations. Specifically the FPTR relocations for dynamic functions used to initialize static data. 
Name: elf64_hppa_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf64_hppa_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf64_hppa_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf64_hppa_additional_program_headers; Comment: Return the number of additional phdrs we will need. The generic ELF code only creates PT_PHDRs for executables. The HP dynamic linker requires PT_PHDRs for dynamic libraries too. This routine indicates that the backend needs one additional program header for that case. Note we do not have access to the link info structure here, so we have to guess whether or not we are building a shared library based on the existence of a .interp section. 
Name: elf64_hppa_modify_segment_map; Comment: Allocate and initialize any program headers required by this specific backend. The generic ELF code only creates PT_PHDRs for executables. The HP dynamic linker requires PT_PHDRs for dynamic libraries too. This allocates the PT_PHDR and initializes it in a manner suitable for the HP linker. Note we do not have access to the link info structure here, so we have to guess whether or not we are building a shared library based on the existence of a .interp section. 
Name: elf64_hppa_elf_get_symbol_type; Comment: Called when writing out an object file to decide the type of a symbol. 
Name: elf64_hppa_section_from_phdr; Comment: Support HP specific sections for core files. 
Name: elf_hppa_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. HP's libraries define symbols with HP specific section indices, which we have to handle. 
Name: elf_hppa_record_segment_addrs; Comment: Record the lowest address for the data and text segments. 
Name: elf_hppa_final_link; Comment: Called after we have seen all the input files/sections, but before final symbol resolution and section placement has been determined. We use this hook to (possibly) provide a value for __gp, then we fall back to the generic ELF final link routine. 
Name: elf_hppa_relocate_insn; Comment: Relocate the given INSN. VALUE should be the actual value we want to insert into the instruction, ie by this point we should not be concerned with computing an offset relative to the DLT, PC, etc. Instead this routine is meant to handle the bit manipulations needed to insert the relocation into the given instruction. 
Name: elf_hppa_final_link_relocate; Comment: Compute the value for a relocation (REL) during a final link stage, then insert the value into the proper location in CONTENTS. VALUE is a tentative value for the relocation and may be overridden and modified here based on the specific relocation to be performed. For example we do conversions for PC-relative branches in this routine or redirection of calls to external routines to stubs. The work of actually applying the relocation is left to a helper routine in an attempt to reduce the complexity and size of this function. 
Name: elf64_hppa_relocate_section; Comment: Relocate an HPPA ELF section. 
Name: elf64_ia64_info_to_howto; Comment: Given a ELF reloc, return the matching HOWTO structure. 
Name: elf64_ia64_relax_section; Comment: Use a two passes algorithm. In the first pass, branches are relaxed (which may increase the size of the section). In the second pass, the other relaxations are done. 
Name: elf64_ia64_section_flags; Comment: ??? There is no bfd internal flag equivalent to the SHF_IA_64_NORECOV flag. 
Name: elf64_ia64_fake_sections; Comment: Set the correct type for an IA-64 ELF section. We do this by the section name, which is a hack, but ought to work. 
Name: elf64_ia64_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put .comm items in .sbss, and not .bss. 
Name: elf64_ia64_is_local_label_name; Comment: According to the Tahoe assembler spec, all labels starting with a '.' are local. 
Name: elf64_ia64_dynamic_symbol_p; Comment: Should we do dynamic things to this symbol? 
Name: elf64_ia64_local_htab_hash; Comment: Compute a hash of a local hash entry. 
Name: elf64_ia64_local_htab_eq; Comment: Compare local hash entries. 
Name: elf64_ia64_global_dyn_info_free; Comment: Free the global elf64_ia64_dyn_sym_info array. 
Name: elf64_ia64_local_dyn_info_free; Comment: Free the local elf64_ia64_dyn_sym_info array. 
Name: elf64_ia64_link_hash_table_free; Comment: Destroy IA-64 linker hash table. 
Name: elf64_ia64_hash_table_create; Comment: Create the derived linker hash table. The IA-64 ELF port uses this derived hash table to keep information specific to the IA-64 ElF linker (without using static variables). 
Name: get_local_sym_hash; Comment: Find and/or create a hash entry for local symbol. 
Name: addend_compare; Comment: Used to sort elf64_ia64_dyn_sym_info array. 
Name: sort_dyn_sym_info; Comment: Sort elf64_ia64_dyn_sym_info array and remove duplicates. 
Name: get_dyn_sym_info; Comment: Find and/or create a descriptor for dynamic symbol info. This will vary based on global or local symbol, and the addend to the reloc. We don't sort when inserting. Also, we sort and eliminate duplicates if there is an unsorted section. Typically, this will only happen once, because we do all insertions before lookups. We then use bsearch to do a lookup. This also allows lookups to be fast. So we have fast insertion (O(log N) due to duplicate check), fast lookup (O(log N)) and one sort (O(N log N) expected time). Previously, all lookups were O(N) because of the use of the linked list and also all insertions were O(N) because of the check for duplicates. There are some complications here because the array size grows occasionally, which may add an O(N) factor, but this should be rare. Also, we free the excess array allocation, which requires a copy which is O(N), but this only happens once. 
Name: get_fptr; Comment: Create function descriptor section (.opd). This section is called .opd because it contains "official procedure descriptors". The "official" refers to the fact that these descriptors are used when taking the address of a procedure, thus ensuring a unique address for each procedure. 
Name: allocate_global_data_got; Comment: For cleanliness, and potentially faster dynamic loading, allocate external GOT entries first. 
Name: allocate_global_fptr_got; Comment: Next, allocate all the GOT entries used by LTOFF_FPTR relocs. 
Name: allocate_local_got; Comment: Lastly, allocate all the GOT entries for local data. 
Name: allocate_fptr; Comment: Allocate function descriptors. We can do these for every function in a main executable that is not exported. 
Name: allocate_plt_entries; Comment: Allocate all the minimal PLT entries. 
Name: allocate_plt2_entries; Comment: Allocate all the full PLT entries. 
Name: allocate_pltoff_entries; Comment: Allocate all the PLTOFF entries requested by relocations and plt entries. We can't share space with allocated FPTR entries, because the latter are not necessarily addressable by the GP. ??? Relaxation might be able to determine that they are. 
Name: set_got_entry; Comment: Store an entry for target address TARGET_ADDR in the linkage table and return the gp-relative address of the linkage table entry. 
Name: set_fptr_entry; Comment: Fill in a function descriptor consisting of the function's code address and its global pointer. Return the descriptor's address. 
Name: set_pltoff_entry; Comment: Fill in a PLTOFF entry consisting of the function's code address and its global pointer. Return the descriptor's address. 
Name: elf64_ia64_choose_gp; Comment: Make sure we've got ourselves a nice fat __gp value. 
Name: elf64_ia64_set_private_flags; Comment: Function to keep IA-64 specific file flags. 
Name: elf64_ia64_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf64_vms_section_from_shdr; Comment: Handle an IA-64 specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: elf64_vms_final_write_processing; Comment: The final processing done just before writing out a VMS IA-64 ELF object file. 
Name: elf64_vms_link_add_object_symbols; Comment: Add symbols from an ELF object file to the linker hash table. 
Name: mips_elf64_swap_reloc_in; Comment: Swap in a MIPS 64-bit Rel reloc. 
Name: mips_elf64_swap_reloca_in; Comment: Swap in a MIPS 64-bit Rela reloc. 
Name: mips_elf64_swap_reloc_out; Comment: Swap out a MIPS 64-bit Rel reloc. 
Name: mips_elf64_swap_reloca_out; Comment: Swap out a MIPS 64-bit Rela reloc. 
Name: mips_elf64_be_swap_reloc_in; Comment: Swap in a MIPS 64-bit Rel reloc. 
Name: mips_elf64_be_swap_reloca_in; Comment: Swap in a MIPS 64-bit Rela reloc. 
Name: mips_elf64_be_swap_reloc_out; Comment: Swap out a MIPS 64-bit Rel reloc. 
Name: mips_elf64_be_swap_reloca_out; Comment: Swap out a MIPS 64-bit Rela reloc. 
Name: mips_elf64_assign_gp; Comment: Set the GP value for OUTPUT_BFD. Returns FALSE if this is a dangerous relocation. 
Name: mips_elf64_final_gp; Comment: We have to figure out the gp value, so that we can adjust the symbol value correctly. We look up the symbol _gp in the output BFD. If we can't find it, we're stuck. We cache it in the ELF target data. We don't need to adjust the symbol value for an external symbol if we are producing relocatable output. 
Name: mips_elf64_gprel16_reloc; Comment: Do a R_MIPS_GPREL16 relocation. This is a 16 bit value which must become the offset from the gp register. 
Name: mips_elf64_literal_reloc; Comment: Do a R_MIPS_LITERAL relocation. 
Name: mips_elf64_gprel32_reloc; Comment: Do a R_MIPS_GPREL32 relocation. This is a 32 bit value which must become the offset from the gp register. 
Name: mips_elf64_shift6_reloc; Comment: Do a R_MIPS_SHIFT6 relocation. The MSB of the shift is stored at bit 2, the rest is at bits 6-10. The bitpos already got right by the howto. 
Name: bfd_elf64_bfd_reloc_type_lookup; Comment: Given a BFD reloc type, return a howto structure. 
Name: mips_elf64_rtype_to_howto; Comment: Given a MIPS Elf_Internal_Rel, fill in an arelent structure. 
Name: mips_elf64_info_to_howto_rela; Comment: Prevent relocation handling by bfd for MIPS ELF64. 
Name: mips_elf64_get_dynamic_reloc_upper_bound; Comment: Since each entry in an SHT_REL or SHT_RELA section can represent up to three relocs, we must tell the user to allocate more space. 
Name: mips_elf64_slurp_one_reloc_table; Comment: Read the relocations from one reloc section. This is mostly copied from elfcode.h, except for the changes to expand one external relocation to 3 internal ones. To reduce processing effort we could discard those R_MIPS_NONE relocations that occupy the second and the third entry of a triplet, as `mips_elf64_write_rel' and `mips_elf64_write_rela' recreate them in output automagically, however that would also remove them from `objdump -r' output, breaking a long-established tradition and likely confusing people. 
Name: mips_elf64_slurp_reloc_table; Comment: Read the relocations. On Irix 6, there can be two reloc sections associated with a single data section. This is copied from elfcode.h as well, with changes as small as accounting for 3 internal relocs per external reloc. 
Name: mips_elf64_write_relocs; Comment: Write out the relocations. 
Name: mips_elf64_object_p; Comment: Set the right machine number for a MIPS ELF file. 
Name: elf64_mips_irix_compat; Comment: Depending on the target vector we generate some version of Irix executables or "normal" MIPS ELF ABI executables. 
Name: elf64_mips_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf64_mips_write_core_note; Comment: Write Linux core PRSTATUS note into core file. 
Name: mmix_elf_perform_relocation; Comment: This function performs the actual bitfiddling and sanity check for a final relocation. Each relocation gets its worst-case expansion in size when it arrives here; any reduction in size should have been caught in linker relaxation earlier. When we get here, the relocation looks like the smallest instruction with SWYM:s (nop:s) appended to the max size. We fill in those nop:s. R_MMIX_GETA: (FIXME: Relaxation should break this up in 1, 2, 3 tetra) GETA $N,foo -> SETL $N,foo & 0xffff INCML $N,(foo >> 16) & 0xffff INCMH $N,(foo >> 32) & 0xffff INCH $N,(foo >> 48) & 0xffff R_MMIX_CBRANCH: (FIXME: Relaxation should break this up, but condbranches needing relaxation might be rare enough to not be worthwhile.) [P]Bcc $N,foo -> [~P]B~cc $N,.+20 SETL $255,foo & ... INCML ... INCMH ... INCH ... GO $255,$255,0 R_MMIX_PUSHJ: (FIXME: Relaxation...) PUSHJ $N,foo -> SETL $255,foo & ... INCML ... INCMH ... INCH ... PUSHGO $N,$255,0 R_MMIX_JMP: (FIXME: Relaxation...) JMP foo -> SETL $255,foo & ... INCML ... INCMH ... INCH ... GO $255,$255,0 R_MMIX_ADDR19 and R_MMIX_ADDR27 are just filled in. 
Name: mmix_info_to_howto_rela; Comment: Set the howto pointer for an MMIX ELF reloc (type RELA). 
Name: mmix_elf_reloc; Comment: Any MMIX-specific relocation gets here at assembly time or when linking to other formats (such as mmo); this is the relocation function from the reloc_table. We don't get here for final pure ELF linking. 
Name: mmix_elf_relocate_section; Comment: Relocate an MMIX ELF section. Modified from elf32-fr30.c; look to it for guidance if you're thinking of copying this. 
Name: mmix_final_link_relocate; Comment: Perform a single relocation. By default we use the standard BFD routines. A few relocs we have to do ourselves. 
Name: mmix_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: mmix_elf_sort_relocs; Comment: Sort register relocs to come before expanding relocs. 
Name: mmix_elf_check_common_relocs; Comment: Subset of mmix_elf_check_relocs, common to ELF and mmo linking. 
Name: mmix_elf_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: _bfd_mmix_check_all_relocs; Comment: Wrapper for mmix_elf_check_common_relocs, called when linking to mmo. Copied from elf_link_add_object_symbols. 
Name: mmix_elf_link_output_symbol_hook; Comment: Change symbols relative to the reg contents section to instead be to the register section, and scale them down to correspond to the register number. 
Name: mmix_elf_symbol_processing; Comment: Handle the special section numbers that a symbol may use. 
Name: mmix_elf_section_from_bfd_section; Comment: Given a BFD section, try to locate the corresponding ELF section index. 
Name: mmix_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We must handle the special SHN_REGISTER section number here. We also check that we only have *one* each of the section-start symbols, since otherwise having two with the same value would cause them to be "merged", but with the contents serialized. 
Name: mmix_elf_is_local_label_name; Comment: We consider symbols matching "L.*:[0-9]+" to be local symbols. 
Name: mmix_elf_final_link; Comment: We get rid of the register section here. 
Name: mmix_set_relaxable_size; Comment: We need to include the maximum size of PUSHJ-stubs in the initial section size. This is expected to shrink during linker relaxation. 
Name: _bfd_mmix_before_linker_allocation; Comment: Initialize stuff for the linker-generated GREGs to match R_MMIX_BASE_PLUS_OFFSET relocs seen by the linker. 
Name: _bfd_mmix_after_linker_allocation; Comment: Fill in contents in the linker allocated gregs. Everything is calculated at this point; we just move the contents into place here. 
Name: bpo_reloc_request_sort_fn; Comment: Sort valid relocs to come before non-valid relocs, then on increasing value. 
Name: mmix_dump_bpo_gregs; Comment: For debug use only. Dumps the global register allocations resulting from base-plus-offset relocs. 
Name: mmix_elf_relax_section; Comment: This links all R_MMIX_BASE_PLUS_OFFSET relocs into a special array, and when the last such reloc is done, an index-array is sorted according to the values and iterated over to produce register numbers (indexed by 0 from the first allocated register number) and offsets for use in real relocation. (N.B.: Relocatable runs are handled, not just punted.) PUSHJ stub accounting is also done here. Symbol- and reloc-reading infrastructure copied from elf-m10200.c. 
Name: ppc_howto_init; Comment: Initialize the ppc64_elf_howto_table, so that linear accesses can be done. 
Name: ppc64_elf_info_to_howto; Comment: Set the howto pointer for a PowerPC ELF reloc. 
Name: ppc64_elf_ha_reloc; Comment: Handle the R_PPC64_ADDR16_HA and similar relocs. 
Name: ppc64_elf_mkobject; Comment: Override the generic function because we store some extras. 
Name: ppc64_elf_object_p; Comment: Fix bad default arch selected for a 64 bit input bfd when the default is 32 bit. Also select arch based on apuinfo. 
Name: ppc64_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: compare_symbols; Comment: qsort comparison function for ppc64_elf_get_synthetic_symtab. 
Name: sym_exists_at; Comment: Search SYMS for a symbol of the given VALUE. 
Name: ppc64_elf_get_synthetic_symtab; Comment: Create synthetic symbols, effectively restoring "dot-symbol" function entry syms. Also generate @plt symbols for the glink branch table. Returns count of synthetic symbols in RET or -1 on error. 
Name: stub_hash_newfunc; Comment: Create an entry in the stub hash table. 
Name: branch_hash_newfunc; Comment: Create an entry in the branch hash table. 
Name: link_hash_newfunc; Comment: Create an entry in a ppc64 ELF linker hash table. 
Name: ppc64_elf_link_hash_table_free; Comment: Destroy a ppc64 ELF linker hash table. 
Name: ppc64_elf_link_hash_table_create; Comment: Create a ppc64 ELF linker hash table. 
Name: create_linkage_sections; Comment: Create sections for linker generated code. 
Name: ppc64_elf_init_stub_bfd; Comment: Satisfy the ELF linker by filling in some fields in our fake bfd. 
Name: ppc_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: select_alt_stub; Comment: If mixing power10 with non-power10 code and --power10-stubs is not specified (or is auto) then there may be multiple stub types for any given symbol. Up to three classes of stubs are stored in separate stub_hash_table entries having the same key string. The entries will always be adjacent on entry->root.next chain, even if hash table resizing occurs. This function selects the correct entry to use. 
Name: ppc_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: ppc_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: ppc_merge_stub; Comment: A stub has already been created, but it may not be the required type. We shouldn't be transitioning from plt_call to long_branch stubs or vice versa, but we might be upgrading from plt_call to plt_call with r2save for example. 
Name: create_got_section; Comment: Create .got and .rela.got sections in ABFD, and .got in dynobj if not already done. 
Name: move_plt_plist; Comment: Merge PLT info on FROM with that on TO. 
Name: ppc64_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: lookup_fdh; Comment: Find the function descriptor hash entry from the given function code hash entry FH. Link the entries via their OH fields. 
Name: make_fdh; Comment: Make a fake function descriptor sym for the undefined code sym FH. 
Name: ppc64_elf_add_symbol_hook; Comment: Fix function descriptor symbols defined in .opd sections to be function type. 
Name: ppc64_elf_merge_symbol_attribute; Comment: Merge non-visibility st_other attributes: local entry point. 
Name: ppc64_elf_merge_symbol; Comment: Hook called on merging a symbol. We use this to clear "fake" since we now have a real symbol. 
Name: ppc64_elf_archive_symbol_lookup; Comment: This function makes an old ABI object reference to ".bar" cause the inclusion of a new ABI object archive that defines "bar". NAME is a symbol defined in an archive. Return a symbol in the hash table that might be satisfied by the archive symbols. 
Name: add_symbol_adjust; Comment: This function satisfies all old ABI object references to ".bar" if a new ABI object defines "bar". Well, at least, undefined dot symbols are made weak. This stops later archive searches from including an object if we already have a function descriptor definition. It also prevents the linker complaining about undefined symbols. We also check and correct mismatched symbol visibility here. The most restrictive visibility of the function descriptor and the function entry symbol is used. 
Name: ppc64_elf_before_check_relocs; Comment: Set up opd section info and abiversion for IBFD, and process list of dot-symbols we made in link_hash_newfunc. 
Name: ppc64_elf_notice_as_needed; Comment: Undo hash table changes when an --as-needed input file is determined not to be needed. 
Name: ppc64_elf_link_just_syms; Comment: If --just-symbols against a final linked binary, then assume we need toc adjusting stubs when calling functions defined there. 
Name: is_8byte_reloc; Comment: Of relocs which might appear paired with TLSGD and TLSLD marker relocs, return true for those that operate on a dword. 
Name: ppc64_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the global offset table, procedure linkage table, and dynamic reloc sections. 
Name: ppc64_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: opd_entry_value; Comment: OFFSET in OPD_SEC specifies a function descriptor. Return the address of the code entry point, and its section, which must be in the same object as OPD_SEC. Returns (bfd_vma) -1 on error. 
Name: ppc64_elf_maybe_function_sym; Comment: If the ELF symbol SYM might be a function in SEC, return the function size and set *CODE_OFF to the function's entry point, otherwise return zero. 
Name: is_elfv2_localentry0; Comment: Return true if symbol is a strong function defined in an ELFv2 object with st_other localentry bits of zero, ie. its local entry point coincides with its global entry point. 
Name: is_static_defined; Comment: Return true if symbol is defined in a regular object file. 
Name: defined_code_entry; Comment: If FDH is a function descriptor symbol, return the associated code entry symbol if it is defined. Return NULL otherwise. 
Name: defined_func_desc; Comment: If FH is a function code entry symbol, return the associated function descriptor symbol if it is defined. Return NULL otherwise. 
Name: defined_sym_val; Comment: Given H is a symbol that satisfies is_static_defined, return the value in the output file. 
Name: is_tls_get_addr; Comment: Return true if H matches __tls_get_addr or one of its variants. 
Name: ppc64_elf_gc_sections; Comment: Garbage collect sections, after first dealing with dot-symbols. 
Name: ppc64_elf_gc_keep; Comment: Mark all our entry sym sections, both opd and code section. 
Name: ppc64_elf_gc_mark_dynamic_ref; Comment: Mark sections containing dynamically referenced symbols. When building shared libraries, we must assume that any visible symbol is referenced. 
Name: ppc64_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: sfpr_define; Comment: Auto-generate _save*, _rest* functions in .sfpr. If STUB_SEC is non-null, define alias symbols in STUB_SEC instead. 
Name: tls_get_addr_prologue; Comment: Emit prologue of wrapper preserving regs around a call to __tls_get_addr_opt. 
Name: tls_get_addr_epilogue; Comment: Emit epilogue of wrapper preserving regs around a call to __tls_get_addr_opt. 
Name: func_desc_adjust; Comment: Called via elf_link_hash_traverse to transfer dynamic linking information on function code symbol entries to their corresponding function descriptor symbol entries. Must not be called twice for any given code symbol. 
Name: ppc64_elf_edit; Comment: Called near the start of bfd_elf_size_dynamic_sections. We use this hook to a) run the edit functions in this file, b) provide some gcc support functions, and c) transfer dynamic linking information gathered so far on function code symbol entries, to their corresponding function descriptor symbol entries. 
Name: pc_dynrelocs; Comment: Return whether EH has pc-relative dynamic relocs. 
Name: global_entry_stub; Comment: Return true if a global entry stub will be created for H. Valid for ELFv2 before plt entries have been allocated. 
Name: ppc64_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: ppc64_elf_hide_symbol; Comment: If given a function descriptor symbol, hide both the function code sym and the descriptor. 
Name: get_tls_mask; Comment: Returns TLS_MASKP for the given REL symbol. Function return is 0 on error, 2 on a toc GD type suitable for optimization, 3 on a toc LD type suitable for optimization, and 1 otherwise. 
Name: tocsave_find; Comment: Find (or create) an entry in the tocsave hash table. 
Name: adjust_opd_syms; Comment: Adjust all global syms defined in opd sections. In gcc generated code for the old ABI, these will already have been done. 
Name: dec_dynrel_count; Comment: Handles decrementing dynamic reloc counts for the reloc specified by R_INFO in section SEC. If LOCAL_SYMS is NULL, then H and SYM have already been determined. 
Name: ppc64_elf_edit_opd; Comment: Remove unused Official Procedure Descriptor entries. Currently we only remove those associated with functions in discarded link-once sections, or weakly defined functions that have been overridden. It would be possible to remove many more entries for statically linked applications. 
Name: ppc64_elf_inline_plt; Comment: Analyze inline PLT call relocations to see whether calls to locally defined functions can be converted to direct calls. 
Name: ppc64_elf_tls_setup; Comment: Set htab->tls_get_addr and various other info specific to TLS. This needs to run before dynamic symbols are processed in bfd_elf_size_dynamic_sections. 
Name: branch_reloc_hash_match; Comment: Return TRUE iff REL is a branch reloc with a global symbol matching any of HASH1, HASH2, HASH3, or HASH4. 
Name: ppc64_elf_tls_optimize; Comment: Run through all the TLS relocs looking for optimization opportunities. The linker has been hacked (see ppc64elf.em) to do a preliminary section layout so that we know the TLS segment offsets. We can't optimize earlier because some optimizations need to know the tp offset, and we need to optimize before allocating dynamic relocations. 
Name: ok_lo_toc_insn; Comment: Return TRUE iff INSN with a relocation of R_TYPE is one we expect on a _LO variety toc/got reloc. 
Name: xlate_pcrel_opt; Comment: PCREL_OPT in one instance flags to the linker that a pair of insns: pld ra,symbol@got@pcrel load/store rt,off(ra) or pla ra,symbol@pcrel load/store rt,off(ra) may be translated to pload/pstore rt,symbol+off@pcrel nop. This function returns true if the optimization is possible, placing the prefix insn in *PINSN1, a NOP in *PINSN2 and the offset in *POFF. On entry to this function, the linker has already determined that the pld can be replaced with pla: *PINSN1 is that pla insn, while *PINSN2 is the second instruction. 
Name: ppc64_elf_edit_toc; Comment: Examine all relocs referencing .toc sections in order to remove unused .toc entries. 
Name: ppc64_elf_has_small_toc_reloc; Comment: Return true iff input section I references the TOC using instructions limited to +/-32k offsets. 
Name: allocate_got; Comment: Allocate space for one GOT entry. 
Name: merge_got_entries; Comment: This function merges got entries in the same toc group. 
Name: size_global_entry_stubs; Comment: Called via elf_link_hash_traverse from ppc64_elf_size_dynamic_sections to set up space for global entry stubs. These are put in glink, after the branch table. 
Name: ppc64_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: ppc64_elf_hash_symbol; Comment: Return TRUE if symbol should be hashed in the `.gnu.hash' section. 
Name: build_offset; Comment: Gets the address of a label (1:) in r11 and builds an offset in r12, then adds it to r11 (LOAD false) or loads r12 from r11+r12 (LOAD true). ._mflr_%r12 ._bcl_20,31,1f .1:_mflr_%r11 ._mtlr_%r12 ._lis_%r12,xxx-1b@highest ._ori_%r12,%r12,xxx-1b@higher ._sldi_%r12,%r12,32 ._oris_%r12,%r12,xxx-1b@high ._ori_%r12,%r12,xxx-1b@l ._add/ldx_%r12,%r11,%r12 
Name: eh_advance; Comment: Emit .eh_frame opcode to advance pc by DELTA. 
Name: eh_advance_size; Comment: Size of required .eh_frame opcode to advance pc by DELTA. 
Name: use_global_in_relocs; Comment: Convert the relocs R[0] thru R[-NUM_REL+1], which are all no-symbol forms, to the equivalent relocs against the global symbol given by STUB_ENTRY->H. 
Name: dump_stub; Comment: Debug dump. 
Name: ppc_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes, and select plt_branch stubs where long_branch stubs won't do. 
Name: ppc64_elf_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: ppc64_elf_start_multitoc_partition; Comment: Set up for first pass at multitoc partitioning. 
Name: ppc64_elf_next_toc_section; Comment: The linker repeatedly calls this function for each TOC input section and linker generated GOT section. Group input bfds such that the toc within a group is less than 64k in size. 
Name: merge_global_got; Comment: Called via elf_link_hash_traverse to merge GOT entries for global symbol H. 
Name: reallocate_got; Comment: Called via elf_link_hash_traverse to allocate GOT entries for global symbol H. 
Name: ppc64_elf_layout_multitoc; Comment: Called on the first multitoc pass after the last call to ppc64_elf_next_toc_section. This function removes duplicate GOT entries. 
Name: ppc64_elf_finish_multitoc_partition; Comment: Called after second pass of multitoc partitioning. 
Name: toc_adjusting_stub_needed; Comment: No toc references were found in ISEC. If the code in ISEC makes no calls, then there's no need to use toc adjusting stubs when branching into ISEC. Actually, indirect calls from ISEC are OK as they will load r2. Returns -1 on error, 0 for no stub needed, 1 for stub needed, and 2 if a cyclical call-graph was found but no other reason for a stub was detected. If called from the top level, a return of 2 means the same as a return of 0. 
Name: ppc64_elf_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: check_pasted_section; Comment: Check that all .init and .fini sections use the same toc, if they have toc relocs. 
Name: maybe_strip_output; Comment: Stripping output sections is normally done before dynamic section symbols have been allocated. This function is called later, and handles cases like htab->brlt which is mapped to its own output section. 
Name: append_relr_off; Comment: Stash R_PPC64_RELATIVE reloc at input section SEC, r_offset OFF to the array of such relocs. 
Name: compare_relr_address; Comment: qsort comparator for bfd_vma args. 
Name: sort_relr; Comment: Produce a malloc'd sorted array of reloc addresses from the info stored by append_relr_off. 
Name: got_and_plt_relr_for_local_syms; Comment: Look over GOT and PLT entries saved on elf_local_got_ents for all input files, stashing info about needed relative relocs. 
Name: got_and_plt_relr; Comment: Stash info about needed GOT and PLT entry relative relocs for global symbol H. 
Name: ppc64_elf_size_stubs; Comment: Determine and set the size of the stub section for a final link. The basic idea here is to examine all the relocations looking for PC-relative calls to a target that is unreachable with a "bl" instruction. 
Name: ppc64_elf_set_toc; Comment: Called after we have determined section placement. If sections move, we'll be called again. Provide a value for TOCstart. 
Name: build_global_entry_stubs_and_plt; Comment: Called via elf_link_hash_traverse from ppc64_elf_build_stubs to write out any global entry stubs, and PLT relocations. 
Name: write_plt_relocs_for_local_syms; Comment: Write PLT relocs for locals. 
Name: emit_tga_desc; Comment: Emit the static wrapper function preserving registers around a __tls_get_addr_opt call. 
Name: emit_tga_desc_eh_frame; Comment: Emit eh_frame describing the static wrapper function. 
Name: ppc64_elf_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. This function is called via gldelf64ppc_finish. 
Name: ppc64_elf_action_discarded; Comment: What to do when ld finds relocations against symbols defined in discarded sections. 
Name: ppc64_glibc_dynamic_reloc; Comment: These are the dynamic relocations supported by glibc. 
Name: ppc64_elf_relocate_section; Comment: The RELOCATE_SECTION function is called by the ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures; if the section actually uses Rel structures, the r_addend field will always be zero. This function is responsible for adjust the section contents as necessary, and (if using Rela relocs and generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: ppc64_elf_output_symbol_hook; Comment: Adjust the value of any local symbols in opd sections. 
Name: ppc64_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: ppc64_elf_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: ppc64_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf_s390_info_to_howto; Comment: We need to use ELF64_R_TYPE so we have our own copy of this function, and elf64-s390.c has its own copy. 
Name: elf64_s390_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf_s390_additional_program_headers; Comment: We may add a PT_S390_PGSTE program header. 
Name: elf_s390_modify_segment_map; Comment: Add the PT_S390_PGSTE program header. 
Name: elf64_sparc_get_reloc_upper_bound; Comment: Due to the way how we handle R_SPARC_OLO10, each entry in a SHT_RELA section can represent up to two relocs, we must tell the user to allocate more space. 
Name: elf64_sparc_slurp_one_reloc_table; Comment: Read relocations for ASECT from REL_HDR. There are RELOC_COUNT of them. We cannot use generic elf routines for this, because R_SPARC_OLO10 has secondary addend in ELF64_R_TYPE_DATA. We handle it as two relocations for the same location, R_SPARC_LO10 and R_SPARC_13. 
Name: elf64_sparc_slurp_reloc_table; Comment: Read in and swap the external relocs. 
Name: elf64_sparc_canonicalize_reloc; Comment: Canonicalize the relocs. 
Name: elf64_sparc_canonicalize_dynamic_reloc; Comment: Canonicalize the dynamic relocation entries. Note that we return the dynamic relocations as a single block, although they are actually associated with particular sections; the interface, which was designed for SunOS style shared libraries, expects that there is only one set of dynamic relocs. Any section that was actually installed in the BFD, and has type SHT_REL or SHT_RELA, and uses the dynamic symbol table, is considered to be a dynamic reloc section. 
Name: elf64_sparc_set_reloc; Comment: Install a new set of internal relocs. 
Name: elf64_sparc_write_relocs; Comment: Write out the relocs. 
Name: elf64_sparc_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it for STT_REGISTER symbols. 
Name: elf64_sparc_output_arch_syms; Comment: This function takes care of emitting STT_REGISTER symbols which we cannot easily keep in the symbol hash table. 
Name: elf64_sparc_symbol_processing; Comment: A STB_GLOBAL,STT_REGISTER symbol should be BSF_GLOBAL even in SHN_UNDEF section. 
Name: elf64_sparc_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elf64_sparc_fake_sections; Comment: MARCO: Set the correct entry size for the .stab section. 
Name: elf64_sparc_print_symbol_all; Comment: Print a STT_REGISTER symbol to file FILE. 
Name: elf64_sparc_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf_x86_64_reloc_type_lookup; Comment: Given a BFD reloc type, return a HOWTO structure. 
Name: elf_x86_64_info_to_howto; Comment: Given an x86_64 ELF reloc type, fill in an arelent structure. 
Name: elf_x86_64_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: elf_x86_64_check_tls_transition; Comment: Return TRUE if the TLS access code sequence support transition from R_TYPE. 
Name: elf_x86_64_tls_transition; Comment: Return TRUE if the TLS access transition is OK or no transition will be performed. Update R_TYPE if there is a transition. 
Name: elf_x86_64_convert_load_reloc; Comment: With the local symbol, foo, we convert mov foo@GOTPCREL(%rip), %reg to lea foo(%rip), %reg and convert call/jmp *foo@GOTPCREL(%rip) to nop call foo/jmp foo nop When PIC is false, convert test %reg, foo@GOTPCREL(%rip) to test $foo, %reg and convert binop foo@GOTPCREL(%rip), %reg to binop $foo, %reg where binop is one of adc, add, and, cmp, or, sbb, sub, xor instructions. 
Name: elf_x86_64_scan_relocs; Comment: Look through the relocs for a section during the first phase, and calculate needed space in the global offset table, and procedure linkage table. 
Name: elf_x86_64_tpoff; Comment: Return the relocation value for @tpoff relocation if STT_TLS virtual address is ADDRESS. 
Name: elf_x86_64_relocate_section; Comment: Relocate an x86_64 ELF section. 
Name: elf_x86_64_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_x86_64_finish_local_dynamic_symbol; Comment: Finish up local dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elf_x86_64_pie_finish_undefweak_symbol; Comment: Finish up undefined weak symbol handling in PIE. Fill its PLT entry here since undefined weak symbol may not be dynamic and may not be called for elf_x86_64_finish_dynamic_symbol. 
Name: elf_x86_64_reloc_type_class; Comment: Used to decide how to sort relocs in an optimal manner for the dynamic linker, before writing them out. 
Name: elf_x86_64_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: elf_x86_64_get_synthetic_symtab; Comment: Similar to _bfd_elf_get_synthetic_symtab. Support PLTs with all dynamic relocations. 
Name: elf_x86_64_section_from_shdr; Comment: Handle an x86-64 specific section when reading an object file. This is called when elfcode.h finds a section with an unknown type. 
Name: elf_x86_64_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put SHN_X86_64_LCOMMON items in .lbss, instead of .bss. 
Name: elf_x86_64_elf_section_from_bfd_section; Comment: Given a BFD section, try to locate the corresponding ELF section index. 
Name: elf_x86_64_symbol_processing; Comment: Process a symbol. 
Name: elf_x86_64_relocs_compatible; Comment: Return TRUE iff relocations for INPUT are compatible with OUTPUT. 
Name: elf_x86_64_link_setup_gnu_properties; Comment: Set up x86-64 GNU properties. Return the first relocatable ELF input with GNU properties if found. Otherwise, return NULL. 
Name: _bfd_elf_define_linkage_sym; Comment: Define a symbol in a dynamic linkage section. 
Name: _bfd_elf_link_create_dynstrtab; Comment: Create a strtab to hold the dynamic symbol names. 
Name: _bfd_elf_link_create_dynamic_sections; Comment: Create some sections which will be filled in with dynamic linking information. ABFD is an input file which requires dynamic sections to be created. The dynamic sections take up virtual memory space when the final executable is run, so we need to create them before addresses are assigned to the output sections. We work out the actual contents and size of these sections later. 
Name: _bfd_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: bfd_elf_link_record_dynamic_symbol; Comment: Record a new dynamic symbol. We record the dynamic symbols as we read the input files, since we need to have a list of all of them before we can determine the final sizes of the output sections. Note that we may actually call this function even though we are not going to output any dynamic symbols; in some cases we know that a symbol should be in the dynamic symbol table, but only if there is one. 
Name: bfd_elf_link_mark_dynamic_symbol; Comment: Mark a symbol dynamic. 
Name: bfd_elf_record_link_assignment; Comment: Record an assignment to a symbol made by a linker script. We need this in case some dynamic object refers to this symbol. 
Name: bfd_elf_link_record_local_dynamic_symbol; Comment: Record a new local dynamic symbol. Returns 0 on failure, 1 on success, and 2 on a failure caused by attempting to record a symbol in a discarded section, eg. a discarded link-once section symbol. 
Name: _bfd_elf_link_lookup_local_dynindx; Comment: Return the dynindex of a local dynamic symbol. 
Name: elf_link_renumber_hash_table_dynsyms; Comment: This function is used to renumber the dynamic symbols, if some of them are removed because they are marked as local. This is called via elf_link_hash_traverse. 
Name: elf_link_renumber_local_hash_table_dynsyms; Comment: Like elf_link_renumber_hash_table_dynsyms, but just number symbols with STB_LOCAL binding. 
Name: _bfd_elf_omit_section_dynsym_default; Comment: Return true if the dynamic symbol for a given section should be omitted when creating a shared library. 
Name: _bfd_elf_link_renumber_dynsyms; Comment: Assign dynsym indices. In a shared library we generate a section symbol for each output section, which come first. Next come symbols which have been forced to local binding. Then all of the back-end allocated local dynamic syms, followed by the rest of the global symbols. If SECTION_SYM_COUNT is NULL, section dynindx is not set. (This prevents the early call before elf_backend_init_index_section and strip_excluded_output_sections setting dynindx for sections that are stripped.) 
Name: elf_merge_st_other; Comment: Merge st_other field. 
Name: _bfd_elf_merge_symbol; Comment: This function is called when we want to merge a new symbol with an existing symbol. It handles the various cases which arise when we find a definition in a dynamic object, or when there is already a definition in a dynamic object. The new symbol is described by NAME, SYM, PSEC, and PVALUE. We set SYM_HASH to the hash table entry. We set POLDBFD to the old symbol's BFD. We set POLD_WEAK if the old symbol was weak. We set POLD_ALIGNMENT to the alignment of an old common symbol. We set OVERRIDE if the old symbol is overriding a new definition. We set TYPE_CHANGE_OK if it is OK for the type to change. We set SIZE_CHANGE_OK if it is OK for the size to change. By OK to change, we mean that we shouldn't warn if the type or size does change. 
Name: _bfd_elf_add_default_symbol; Comment: This function is called to create an indirect symbol from the default for the symbol with the default version if needed. The symbol is described by H, NAME, SYM, SEC, and VALUE. We set DYNSYM if the new indirect symbol is dynamic. 
Name: _bfd_elf_export_symbol; Comment: This routine is used to export all defined symbols into the dynamic symbol table. It is called via elf_link_hash_traverse. 
Name: elf_link_add_dt_relr_dependency; Comment: Return true if GLIBC_ABI_DT_RELR is added to the list of version dependencies successfully. GLIBC_ABI_DT_RELR will be put into the .gnu.version_r section. 
Name: _bfd_elf_link_find_version_dependencies; Comment: Look through the symbols which are defined in other shared libraries and referenced here. Update the list of version dependencies. This will be put into the .gnu.version_r section. This function is called via elf_link_hash_traverse. 
Name: _bfd_elf_link_hide_versioned_symbol; Comment: Return TRUE and set *HIDE to TRUE if the versioned symbol is hidden. Set *T_P to NULL if there is no match. 
Name: _bfd_elf_link_hide_sym_by_version; Comment: Return TRUE if the symbol H is hidden by version script. 
Name: _bfd_elf_link_assign_sym_version; Comment: Figure out appropriate versions for all the symbols. We may not have the version number script until we have read all of the input files, so until that point we don't know which symbols should be local. This function is called via elf_link_hash_traverse. 
Name: elf_link_read_relocs_from_section; Comment: Read and swap the relocs from the section indicated by SHDR. This may be either a REL or a RELA section. The relocations are translated into RELA relocations and stored in INTERNAL_RELOCS, which should have already been allocated to contain enough space. The EXTERNAL_RELOCS are a buffer where the external form of the relocations should be stored. Returns FALSE if something goes wrong. 
Name: _bfd_elf_link_info_read_relocs; Comment: Read and swap the relocs for a section O. They may have been cached. If the EXTERNAL_RELOCS and INTERNAL_RELOCS arguments are not NULL, they are used as buffers to read into. They are known to be large enough. If the INTERNAL_RELOCS relocs argument is NULL, the return value is allocated using either malloc or bfd_alloc, according to the KEEP_MEMORY argument. If O has two relocation sections (both REL and RELA relocations), then the REL_HDR relocations will appear first in INTERNAL_RELOCS, followed by the RELA_HDR relocations. If INFO isn't NULL and KEEP_MEMORY is true, update cache_size. 
Name: _bfd_elf_link_read_relocs; Comment: This is similar to _bfd_elf_link_info_read_relocs, except for that NULL is passed to _bfd_elf_link_info_read_relocs for pointer to struct bfd_link_info. 
Name: _bfd_elf_link_size_reloc_section; Comment: Compute the size of, and allocate space for, REL_HDR which is the section header for a section containing relocations for O. 
Name: _bfd_elf_link_output_relocs; Comment: Copy the relocations indicated by the INTERNAL_RELOCS (which originated from the section given by INPUT_REL_HDR) to the OUTPUT_BFD. 
Name: _bfd_elf_link_hash_fixup_symbol; Comment: Make weak undefined symbols in PIE dynamic. 
Name: _bfd_elf_fix_symbol_flags; Comment: Fix up the flags for a symbol. This handles various cases which can only be fixed after all the input files are seen. This is currently called by both adjust_dynamic_symbol and assign_sym_version, which is unnecessary but perhaps more robust in the face of future changes. 
Name: _bfd_elf_adjust_dynamic_symbol; Comment: Make the backend pick a good value for a dynamic symbol. This is called via elf_link_hash_traverse, and also calls itself recursively. 
Name: _bfd_elf_adjust_dynamic_copy; Comment: Adjust the dynamic symbol, H, for copy in the dynamic bss section, DYNBSS. 
Name: _bfd_elf_link_sec_merge_syms; Comment: Adjust all external symbols pointing into SEC_MERGE sections to reflect the object merging within the sections. 
Name: _bfd_elf_dynamic_symbol_p; Comment: Returns false if the symbol referred to by H should be considered to resolve local to the current module, and true if it should be considered to bind dynamically. 
Name: _bfd_elf_symbol_refs_local_p; Comment: Return true if the symbol referred to by H should be considered to resolve local to the current module, and false otherwise. Differs from (the inverse of) _bfd_elf_dynamic_symbol_p in the treatment of undefined symbols. The two functions are virtually identical except for the place where dynindx == -1 is tested. If that test is true, _bfd_elf_dynamic_symbol_p will say the symbol is local, while _bfd_elf_symbol_refs_local_p will say the symbol is local only for defined symbols. It might seem that _bfd_elf_dynamic_symbol_p could be rewritten as !_bfd_elf_symbol_refs_local_p, except that targets differ in their treatment of undefined weak symbols. For those that do not make undefined weak symbols dynamic, both functions may return false. 
Name: _bfd_elf_tls_setup; Comment: Caches some TLS segment info, and ensures that the TLS segment vma is aligned. Returns the first TLS output section. 
Name: is_global_data_symbol_definition; Comment: Return TRUE iff this is a non-common, definition of a non-function symbol. 
Name: elf_link_is_defined_archive_symbol; Comment: Search the symbol table of the archive element of the archive ABFD whose archive map contains a mention of SYMDEF, and determine if the symbol is defined in this element. 
Name: _bfd_elf_add_dynamic_entry; Comment: Add an entry to the .dynamic table. 
Name: _bfd_elf_strip_zero_sized_dynamic_sections; Comment: Strip zero-sized dynamic sections. 
Name: bfd_elf_add_dt_needed_tag; Comment: Add a DT_NEEDED entry for this dynamic object. Returns -1 on error, 1 if a DT_NEEDED tag already exists, and 0 on success. 
Name: on_needed_list; Comment: Return true if SONAME is on the needed list between NEEDED and STOP (or the end of list if STOP is NULL), and needed by a library that will be loaded. 
Name: elf_sort_symbol; Comment: Sort symbol by value, section, size, and type. 
Name: elf_adjust_dynstr_offsets; Comment: This function is used to adjust offsets into .dynstr for dynamic symbols. This is called via elf_link_hash_traverse. 
Name: elf_finalize_dynstr; Comment: Assign string offsets in .dynstr, update all structures referencing them. 
Name: _bfd_elf_default_relocs_compatible; Comment: Return TRUE iff relocations for INPUT are compatible with OUTPUT. The default is to only match when the INPUT and OUTPUT are exactly the same target. 
Name: _bfd_elf_relocs_compatible; Comment: Return TRUE iff relocations for INPUT are compatible with OUTPUT. This version is used when different targets for the same architecture are virtually identical. 
Name: _bfd_elf_notice_as_needed; Comment: Make a special call to the linker "notice" function to tell it that we are about to handle an as-needed lib, or have finished processing the lib. 
Name: ; Comment: Call ACTION on each relocation in an ELF object file. 
Name: _bfd_elf_link_check_relocs; Comment: Check relocations in an ELF object file. This is called after all input files have been opened. 
Name: elf_link_add_object_symbols; Comment: Add symbols from an ELF object file to the linker hash table. 
Name: _bfd_elf_archive_symbol_lookup; Comment: Return the linker hash table entry of a symbol that might be satisfied by an archive symbol. Return -1 on error. 
Name: elf_link_add_archive_symbols; Comment: Add symbols from an ELF archive file to the linker hash table. We don't use _bfd_generic_link_add_archive_symbols because we need to handle versioned symbols. Fortunately, ELF archive handling is simpler than that done by _bfd_generic_link_add_archive_symbols, which has to allow for a.out oddities. In ELF, if we find a symbol in the archive map, and the symbol is currently undefined, we know that we must pull in that object file. Unfortunately, we do have to make multiple passes over the symbol table until nothing further is resolved. 
Name: bfd_elf_link_add_symbols; Comment: Given an ELF BFD, add symbols to the global hash table as appropriate. 
Name: elf_collect_hash_codes; Comment: This function will be called though elf_link_hash_traverse to store all hash value of the exported symbols in an array. 
Name: elf_collect_gnu_hash_codes; Comment: This function will be called though elf_link_hash_traverse to store all hash value of the exported symbols in an array. 
Name: elf_gnu_hash_process_symidx; Comment: This function will be called though elf_link_hash_traverse to do final dynamic symbol renumbering in case of .gnu.hash. If using .MIPS.xhash, invoke record_xhash_symbol to add symbol index to the translation table. 
Name: _bfd_elf_hash_symbol; Comment: Return TRUE if symbol should be hashed in the `.gnu.hash' section. 
Name: compute_bucket_count; Comment: Compute bucket count for hashing table. We do not use a static set of possible tables sizes anymore. Instead we determine for all possible reasonable sizes of the table the outcome (i.e., the number of collisions etc) and choose the best solution. The weighting functions are not too simple to allow the table to grow without bounds. Instead one of the weighting factors is the size. Therefore the result is always a good payoff between few collisions (= short chain lengths) and table size. 
Name: _bfd_elf_size_group_sections; Comment: Size any SHT_GROUP section for ld -r. 
Name: bfd_elf_stack_segment_size; Comment: Set a default stack segment size. The value in INFO wins. If it is unset, LEGACY_SYMBOL's value is used, and if that symbol is undefined it is initialized. 
Name: bfd_elf_size_dynamic_sections; Comment: Set up the sizes and contents of the ELF dynamic sections. This is called by the ELF linker emulation before_allocation routine. We must set the sizes of the sections before the linker sets the addresses of the various sections. 
Name: _bfd_elf_init_1_index_section; Comment: Find the first non-excluded output section. We'll use its section symbol for some emitted relocs. 
Name: _bfd_elf_init_2_index_sections; Comment: Find two non-excluded output sections, one for code, one for data. We'll use their section symbols for some emitted relocs. 
Name: merge_sections_remove_hook; Comment: Make sure sec_info_type is cleared if sec_info is cleared too. 
Name: _bfd_elf_merge_sections; Comment: Finish SHF_MERGE section merging. 
Name: _bfd_elf_link_hash_newfunc; Comment: Create an entry in an ELF linker hash table. 
Name: _bfd_elf_link_hash_copy_indirect; Comment: Copy data from an indirect symbol to its direct symbol, hiding the old indirect symbol. Also used for copying flags to a weakdef. 
Name: _bfd_elf_link_hide_symbol; Comment: Hide a symbol. 
Name: ; Comment: Initialize an ELF linker hash table. *TABLE has been zeroed by our caller. 
Name: _bfd_elf_link_hash_table_create; Comment: Create an ELF linker hash table. 
Name: _bfd_elf_link_hash_table_free; Comment: Destroy an ELF linker hash table. 
Name: bfd_elf_set_dt_needed_name; Comment: This is a hook for the ELF emulation code in the generic linker to tell the backend linker what file name to use for the DT_NEEDED entry for a dynamic object. 
Name: bfd_elf_get_needed_list; Comment: Get the list of DT_NEEDED entries for a link. This is a hook for the linker ELF emulation code. 
Name: bfd_elf_get_runpath_list; Comment: Get the list of DT_RPATH/DT_RUNPATH entries for a link. This is a hook for the linker ELF emulation code. 
Name: bfd_elf_get_dt_soname; Comment: Get the name actually used for a dynamic object for a link. This is the SONAME entry if there is one. Otherwise, it is the string passed to bfd_elf_set_dt_needed_name, or it is the filename. 
Name: bfd_elf_get_bfd_needed_list; Comment: Get the list of DT_NEEDED entries from a BFD. This is a hook for the ELF linker emulation code. 
Name: elf_sort_elf_symbol; Comment: Sort references to symbols by ascending section number. 
Name: bfd_elf_match_symbols_in_sections; Comment: Check if 2 sections define the same set of local and global symbols. 
Name: _bfd_elf_match_sections_by_type; Comment: Return TRUE if 2 section types are compatible. 
Name: local_hash_newfunc; Comment: Create an entry in the local symbol hash table. 
Name: set_symbol_value; Comment: None <binary-operator> := as in C <unary-operator> := as in C, plus "0-" for unambiguous negation. 
Name: resolve_section; Comment: Looks up NAME in SECTIONS. If found sets RESULT to NAME's address (in bytes) and returns TRUE, otherwise returns FALSE. Accepts pseudo-section names like "foo.end" which is the end address of section "foo". 
Name: ext32l_r_offset; Comment: Functions to read r_offset from external (target order) reloc entry. Faster than bfd_getl32 et al, because we let the compiler know the value is aligned. 
Name: elf_link_adjust_relocs; Comment: When performing a relocatable link, the input relocations are preserved. But, if they reference global symbols, the indices referenced must be updated. Update all the relocations found in RELDATA. 
Name: elf_link_sort_cmp1; Comment: qsort stability here and for cmp2 is only an issue if multiple dynamic relocations are emitted at the same address. But targets that apply a series of dynamic relocations each operating on the result of the prior relocation can't use -z combreloc as implemented anyway. Such schemes tend to be broken by sorting on symbol index. That leaves dynamic NONE relocs as the only other case where ld might emit multiple relocs at the same address, and those are only emitted due to target bugs. 
Name: elf_link_output_symstrtab; Comment: Add a symbol to the output symbol string table. 
Name: elf_link_swap_symbols_out; Comment: Swap symbols out to the symbol table and flush the output symbols to the file. 
Name: check_dynsym; Comment: Return TRUE if the dynamic symbol SYM in ABFD is supported. 
Name: elf_link_check_versioned_symbol; Comment: For DSOs loaded in via a DT_NEEDED entry, emulate ld.so in allowing an unsatisfied unversioned symbol in the DSO to match a versioned symbol that would normally require an explicit version. We also handle the case that a DSO references a hidden symbol which may be satisfied by a versioned symbol in another DSO. 
Name: elf_link_convert_common_type; Comment: Convert ELF common symbol TYPE. 
Name: elf_link_output_extsym; Comment: Add an external symbol to the symbol table. This is called from the hash table traversal routine. When generating a shared object, we go through the symbol table twice. The first time we output anything that might have been forced to local scope in a version script. The second time we output the symbols that are still global symbols. 
Name: elf_section_ignore_discarded_relocs; Comment: Return TRUE if special handling is done for relocs in SEC against symbols defined in discarded sections. 
Name: _bfd_elf_default_action_discarded; Comment: Return a mask saying how ld should treat relocations in SEC against symbols defined in discarded sections. If this function returns COMPLAIN set, ld will issue a warning message. If this function returns PRETEND set, and the discarded section was link-once and the same size as the kept link-once section, ld will pretend that the symbol was actually defined in the kept section. Otherwise ld will zero the reloc (at least that is the intent, but some cooperation by the target dependent code is needed, particularly for REL targets). 
Name: match_group_member; Comment: Find a match between a section and a member of a section group. 
Name: _bfd_elf_check_kept_section; Comment: Check if the kept section of a discarded section SEC can be used to replace it. Return the replacement if it is OK. Otherwise return NULL. 
Name: elf_link_input_bfd; Comment: Link an input file into the linker output file. This function handles all the sections and relocations of the input file at once. This is so that we only have to read the local symbols once, and don't have to keep them in memory. 
Name: elf_reloc_link_order; Comment: Generate a reloc when linking an ELF file. This is a reloc requested by the linker, and does not come from any input file. This is used to build constructor and destructor tables when linking with -Ur. 
Name: elf_output_implib; Comment: Generate an import library in INFO->implib_bfd from symbols in ABFD. Returns TRUE upon success, FALSE otherwise. 
Name: bfd_elf_final_link; Comment: Do the final step of an ELF link. 
Name: _bfd_elf_gc_mark_hook; Comment: Default gc_mark_hook. 
Name: elf_gc_mark_debug_section; Comment: Return the debug definition section. 
Name: _bfd_elf_gc_mark_rsec; Comment: COOKIE->rel describes a relocation against section SEC, which is a section we've decided to keep. Return the section that contains the relocation symbol, or NULL if no section contains it. 
Name: _bfd_elf_gc_mark_reloc; Comment: COOKIE->rel describes a relocation against section SEC, which is a section we've decided to keep. Mark the section that contains the relocation symbol. 
Name: _bfd_elf_gc_mark; Comment: The mark phase of garbage collection. For a given section, mark it and any sections in this section's group, and all the sections which define symbols to which it refers. 
Name: _bfd_elf_gc_mark_debug_special_section_group; Comment: Scan and mark sections in a special or debug section group. 
Name: _bfd_elf_gc_mark_extra_sections; Comment: Keep debug and special sections. 
Name: elf_gc_propagate_vtable_entries_used; Comment: Propagate collected vtable information. This is called through elf_link_hash_traverse. 
Name: bfd_elf_gc_mark_dynamic_ref_symbol; Comment: Mark sections containing dynamically referenced symbols. When building shared libraries, we must assume that any visible symbol is referenced. 
Name: _bfd_elf_gc_keep; Comment: Keep all sections containing symbols undefined on the command-line, and the section containing the entry symbol. 
Name: bfd_elf_gc_sections; Comment: Do mark and sweep of unused sections. 
Name: bfd_elf_gc_record_vtinherit; Comment: Called from check_relocs to record the existence of a VTINHERIT reloc. 
Name: bfd_elf_gc_record_vtentry; Comment: Called from check_relocs to record the existence of a VTENTRY reloc. 
Name: bfd_elf_lookup_section_flags; Comment: Returns TRUE if the section is to be included, otherwise FALSE. 
Name: elf_gc_allocate_got_offsets; Comment: We need a special top-level link routine to convert got reference counts to real got offsets. 
Name: bfd_elf_gc_common_finalize_got_offsets; Comment: And an accompanying bit to work out final got entry offsets once we're done. Should be called from final_link. 
Name: bfd_elf_gc_common_final_link; Comment: Many folk need no more in the way of final link than this, once got entry reference counting is enabled. 
Name: bfd_elf_discard_info; Comment: Discard unneeded references to discarded sections. Returns -1 on error, 1 if any section's size was changed, 0 if nothing changed. This function assumes that the relocations are in sorted order, which is true for all known assemblers. 
Name: get_dynamic_reloc_section_name; Comment: Returns the name of the dynamic reloc section associated with SEC. 
Name: _bfd_elf_get_dynamic_reloc_section; Comment: Returns the dynamic reloc section associated with SEC. If necessary compute the name of the dynamic reloc section based on SEC's name (looked up in ABFD's string table) and the setting of IS_RELA. 
Name: _bfd_elf_make_dynamic_reloc_section; Comment: Returns the dynamic reloc section associated with SEC. If the section does not exist it is created and attached to the DYNOBJ bfd and stored in the SRELOC field of SEC's elf_section_data structure. ALIGNMENT is the alignment for the newly created section and IS_RELA defines whether the name should be .rela.<SEC's name> or .rel.<SEC's name>. The section name is looked up in the string table associated with ABFD. 
Name: _bfd_elf_copy_link_hash_symbol_type; Comment: Copy the ELF symbol type and other attributes for a linker script assignment from HSRC to HDEST. Generally this should be treated as if we found a strong non-dynamic definition for HDEST (except that ld ignores multiple definition errors). 
Name: elf_append_rela; Comment: Append a RELA relocation REL to section S in BFD. 
Name: elf_append_rel; Comment: Append a REL relocation REL to section S in BFD. 
Name: bfd_elf_define_start_stop; Comment: Define __start, __stop, .startof. or .sizeof. symbol. 
Name: _bfd_elf_readonly_dynrelocs; Comment: Find dynamic relocs for H that apply to read-only sections. 
Name: _bfd_elf_maybe_set_textrel; Comment: Set DF_TEXTREL if we find any dynamic relocs that apply to read-only sections. 
Name: _bfd_elf_add_dynamic_tags; Comment: Add dynamic tags. 
Name: mips_elf_gprel16_reloc; Comment: Do a R_MIPS_GPREL16 relocation. This is a 16 bit value which must become the offset from the gp register. 
Name: mips_elf_literal_reloc; Comment: Do a R_MIPS_LITERAL relocation. 
Name: mips_elf_shift6_reloc; Comment: Do a R_MIPS_SHIFT6 relocation. The MSB of the shift is stored at bit 2, the rest is at bits 6-10. The bitpos already got right by the howto. 
Name: mips_elf_n32_rtype_to_howto; Comment: Given a MIPS Elf_Internal_Rel, fill in an arelent structure. 
Name: mips_elf_n32_elfsym_local_is_section; Comment: Likewise, return TRUE if the symbol table split overall must be between section symbols and all other symbols. 
Name: mips_elf_n32_object_p; Comment: Set the right machine number for a MIPS ELF file. 
Name: elf_n32_mips_irix_compat; Comment: Depending on the target vector we generate some version of Irix executables or "normal" MIPS ELF ABI executables. 
Name: mips_elf_n32_mkobject; Comment: Make an n32 MIPS object. We need to set the n32 ABI flag in `e_flags' to tell the object apart from an o32 object. 
Name: elfNN_aarch64_bfd_reloc_from_howto; Comment: Given HOWTO, return the bfd internal relocation enumerator. 
Name: elfNN_aarch64_bfd_reloc_from_type; Comment: Given R_TYPE, return the bfd internal relocation enumerator. 
Name: elfNN_aarch64_howto_from_bfd_reloc; Comment: Given the bfd internal relocation enumerator in CODE, return the corresponding howto entry. 
Name: elfNN_aarch64_link_hash_newfunc; Comment: Create an entry in an AArch64 ELF linker hash table. 
Name: elfNN_aarch64_local_htab_hash; Comment: Compute a hash of a local hash entry. We use elf_link_hash_entry for local symbol so that we can handle local STT_GNU_IFUNC symbols as global symbol. We reuse indx and dynstr_index for local symbol hash since they aren't used by global symbols in this backend. 
Name: elfNN_aarch64_local_htab_eq; Comment: Compare local hash entries. 
Name: elfNN_aarch64_get_local_sym_hash; Comment: Find and/or create a hash entry for local symbol. 
Name: elfNN_aarch64_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: elfNN_aarch64_merge_symbol_attribute; Comment: Merge non-visibility st_other attributes. 
Name: elfNN_aarch64_link_hash_table_free; Comment: Destroy an AArch64 elf linker hash table. 
Name: elfNN_aarch64_link_hash_table_create; Comment: Create an AArch64 elf linker hash table. 
Name: aarch64_relocate; Comment: Perform relocation R_TYPE. Returns TRUE upon success, FALSE otherwise. 
Name: aarch64_type_of_stub; Comment: Determine the type of stub needed, if any, for a call. 
Name: elfNN_aarch64_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: elf_aarch64_hash_symbol; Comment: Return TRUE if symbol H should be hashed in the `.gnu.hash' section. For executable PLT slots where the executable never takes the address of those functions, the function symbols are not added to the hash table. 
Name: elfNN_aarch64_get_stub_entry; Comment: Look up an entry in the stub hash. Stub entries are cached because creating the stub name takes a bit of time. 
Name: _bfd_aarch64_create_stub_section; Comment: Create a stub section. 
Name: _bfd_aarch64_get_stub_for_link_section; Comment: Find or create a stub section for a link section. Fix or create the stub section used to collect stubs attached to the specified link section. 
Name: _bfd_aarch64_create_or_find_stub_sec; Comment: Find or create a stub section in the stub group for an input section. 
Name: _bfd_aarch64_add_stub_entry_in_group; Comment: Add a new stub entry in the stub group associated with an input section to the stub hash. Not all fields of the new stub entry are initialised. 
Name: _bfd_aarch64_add_stub_entry_after; Comment: Add a new stub entry in the final stub section to the stub hash. Not all fields of the new stub entry are initialised. 
Name: aarch64_size_one_stub; Comment: As above, but don't actually build the stub. Just bump offset so we know stub section sizes. 
Name: elfNN_aarch64_setup_section_lists; Comment: Set up various things so that we can make a list of input sections for each output section included in the link. Returns -1 on error, 0 when no stubs will be needed, and 1 on success. 
Name: elfNN_aarch64_next_input_section; Comment: The linker repeatedly calls this function for each input section, in the order that input sections are linked into output sections. Build lists of input sections to determine groupings between which we may insert linker stubs. 
Name: aarch64_mem_op_p; Comment: Classify an INSN if it is indeed a load/store. Return TRUE if INSN is a LD/ST instruction otherwise return FALSE. For scalar LD/ST instructions PAIR is FALSE, RT is returned and RT2 is set equal to RT. For LD/ST pair instructions PAIR is TRUE, RT and RT2 are returned. 
Name: aarch64_mlxl_p; Comment: Return TRUE if INSN is multiply-accumulate. 
Name: aarch64_erratum_sequence; Comment: Some early revisions of the Cortex-A53 have an erratum (835769) whereby it is possible for a 64-bit multiply-accumulate instruction to generate an incorrect result. The details are quite complex and hard to determine statically, since branches in the code may exist in some circumstances, but all cases end with a memory (load, store, or prefetch) instruction followed immediately by the multiply-accumulate operation. We employ a linker patching technique, by moving the potentially affected multiply-accumulate instruction into a patch region and replacing the original instruction with a branch to the patch. This function checks if INSN_1 is the memory operation followed by a multiply-accumulate operation (INSN_2). Return TRUE if an erratum sequence is found, FALSE if INSN_1 and INSN_2 are safe. 
Name: elf_aarch64_compare_mapping; Comment: Used to order a list of mapping symbols by address. 
Name: _bfd_aarch64_erratum_835769_scan; Comment: Scan for Cortex-A53 erratum 835769 sequence. Return TRUE else FALSE on abnormal termination. 
Name: _bfd_aarch64_adrp_p; Comment: Test if instruction INSN is ADRP. 
Name: _bfd_aarch64_erratum_843419_sequence_p; Comment: Helper predicate to look for cortex-a53 erratum 843419 sequence 1. 
Name: _bfd_aarch64_erratum_843419_p; Comment: Test for the presence of Cortex-A53 erratum 843419 instruction sequence. Return TRUE if section CONTENTS at offset I contains one of the erratum 843419 sequences, otherwise return FALSE. If a sequence is seen set P_VENEER_I to the offset of the final LOAD/STORE instruction in the sequence. 
Name: _bfd_aarch64_resize_stubs; Comment: Resize all stub sections. 
Name: _bfd_aarch64_erratum_843419_stub_name; Comment: Construct an erratum 843419 workaround stub name. 
Name: _bfd_aarch64_erratum_843419_fixup; Comment: Build a stub_entry structure describing an 843419 fixup. The stub_entry constructed is populated with the bit pattern INSN of the instruction located at OFFSET within input SECTION. Returns TRUE on success. 
Name: _bfd_aarch64_erratum_843419_scan; Comment: Scan an input section looking for the signature of erratum 843419. Scans input SECTION in INPUT_BFD looking for erratum 843419 signatures, for each signature found a stub_entry is created describing the location of the erratum for subsequent fixup. Return TRUE on successful scan, FALSE on failure to scan. 
Name: elfNN_aarch64_size_stubs; Comment: Determine and set the size of the stub section for a final link. The basic idea here is to examine all the relocations looking for PC-relative calls to a target that is unreachable with a "bl" instruction. 
Name: elfNN_aarch64_build_stubs; Comment: Build all the stubs associated with the current output file. The stubs are kept in a hash table attached to the main linker hash table. We also set up the .plt entries for statically linked PIC functions here. This function is called via aarch64_elf_finish in the linker. 
Name: elfNN_aarch64_section_map_add; Comment: Add an entry to the code/data map for section SEC. 
Name: bfd_elfNN_aarch64_init_maps; Comment: Initialise maps of insn/data for input BFDs. 
Name: bfd_elfNN_aarch64_set_options; Comment: Set option values needed during linking. 
Name: aarch64_tls_transition_without_check; Comment: Change R_TYPE to a more efficient access model where possible, return the new reloc type. 
Name: aarch64_tls_transition; Comment: Given the relocation code R_TYPE, return the relaxed bfd reloc enumerator. 
Name: dtpoff_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving R_AARCH64_TLS_DTPREL relocation. 
Name: tpoff_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving R_AARCH64_TLS_GOTTPREL64 relocations. 
Name: make_branch_to_erratum_835769_stub; Comment: Helper to insert branches to erratum 835769 stubs in the right places for a particular section. 
Name: aarch64_relocation_aginst_gp_p; Comment: Return TRUE if RELOC is a relocation against the base of GOT table. 
Name: elfNN_aarch64_final_link_relocate; Comment: Perform a relocation as part of a final link. The input relocation type should be TLS relaxed. 
Name: _bfd_aarch64_erratum_843419_clear_stub; Comment: Clear the erratum information for GEN_ENTRY if the ADRP_OFFSET and section inside IN_ARG matches. The clearing is done by setting the stub_type to none. 
Name: clear_erratum_843419_entry; Comment: TLS Relaxations may relax an adrp sequence that matches the erratum 843419 sequence. In this case the erratum no longer applies and we need to remove the entry from the pending stub generation. This clears matching adrp insn at ADRP_OFFSET in INPUT_SECTION in the stub table defined in GLOBALS. 
Name: elfNN_aarch64_tls_relax; Comment: Handle TLS relaxations. Relaxing is possible for symbols that use R_AARCH64_TLSDESC_ADR_{PAGE, LD64_LO12_NC, ADD_LO12_NC} during a static link. Return bfd_reloc_ok if we're done, bfd_reloc_continue if the caller is to then call final_link_relocate. Return other values in the case of error. 
Name: elfNN_aarch64_relocate_section; Comment: Relocate an AArch64 ELF section. 
Name: elfNN_aarch64_object_p; Comment: Set the right machine number. 
Name: elfNN_aarch64_set_private_flags; Comment: Function to keep AArch64 specific flags in the ELF header. 
Name: elfNN_aarch64_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: elfNN_aarch64_print_private_bfd_data; Comment: Display the flags field. 
Name: need_copy_relocation_p; Comment: Return true if we need copy relocation against EH. 
Name: elfNN_aarch64_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand._
Name: aarch64_elf_create_got_section; Comment: Create the .got section to hold the global offset table. 
Name: elfNN_aarch64_check_relocs; Comment: Look through the relocs for a section during the first phase. 
Name: elfNN_aarch64_is_target_special_symbol; Comment: Treat mapping symbols as special target symbols. 
Name: elfNN_aarch64_maybe_function_sym; Comment: If the ELF symbol SYM might be a function in SEC, return the function size and set *CODE_OFF to the function's entry point, otherwise return zero. 
Name: elfNN_aarch64_section_from_shdr; Comment: Handle an AArch64 specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: elfNN_aarch64_section_from_phdr; Comment: Process any AArch64-specific program segment types. 
Name: elfNN_aarch64_modify_headers; Comment: Implements the bfd_elf_modify_headers hook for aarch64. 
Name: elfNN_aarch64_output_map_sym; Comment: Output a single mapping symbol. 
Name: elfNN_aarch64_output_stub_sym; Comment: Output a single local symbol for a generated stub. 
Name: elfNN_aarch64_output_arch_local_syms; Comment: Output mapping symbols for linker generated sections. 
Name: elfNN_aarch64_new_section_hook; Comment: Allocate target specific section data. 
Name: elfNN_aarch64_create_dynamic_sections; Comment: Create dynamic sections. This is different from the ARM backend in that the got, plt, gotplt and their relocation sections are all created in the standard part of the bfd elf backend. 
Name: elfNN_aarch64_allocate_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: elfNN_aarch64_allocate_ifunc_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for ifunc dynamic relocs. 
Name: elfNN_aarch64_allocate_local_ifunc_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for local ifunc dynamic relocs. 
Name: elfNN_aarch64_size_dynamic_sections; Comment: This is the most important function of all . Innocuosly named though ! 
Name: elfNN_aarch64_always_size_sections; Comment: Size sections even though they're not dynamic. We use it to setup _TLS_MODULE_BASE_, if needed. 
Name: elfNN_aarch64_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: elfNN_aarch64_finish_local_dynamic_symbol; Comment: Finish up local dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: get_plt_type; Comment: Check if BTI enabled PLTs are needed. Returns the type needed. 
Name: elfNN_aarch64_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: is_aarch64_mapping_symbol; Comment: Returns TRUE if NAME is an AArch64 mapping symbol. The ARM ELF standard defines $x (for A64 code) and $d (for data). It also allows a period initiated suffix to be added to the symbol, ie: "$[adtx]_.[:sym_char]+". 
Name: elfNN_aarch64_backend_symbol_processing; Comment: Make sure that mapping symbols in object files are not removed via the "strip --strip-unneeded" tool. These symbols might needed in order to correctly generate linked files. Once an object file has been linked, it should be safe to remove them. 
Name: elfNN_aarch64_link_setup_gnu_properties; Comment: Implement elf_backend_setup_gnu_properties for AArch64. It serves as a wrapper function for _bfd_aarch64_elf_link_setup_gnu_properties to account for the effect of GNU properties of the output_bfd. 
Name: elfNN_aarch64_merge_gnu_properties; Comment: Implement elf_backend_merge_gnu_properties for AArch64. It serves as a wrapper function for _bfd_aarch64_elf_merge_gnu_properties to account for the effect of GNU properties of the output_bfd. 
Name: elfNN_ia64_info_to_howto; Comment: Given a ELF reloc, return the matching HOWTO structure. 
Name: elfNN_ia64_update_short_info; Comment: These functions do relaxation for IA-64 ELF. 
Name: elfNN_ia64_section_from_shdr; Comment: Handle an IA-64 specific section when reading an object file. This is called when bfd_section_from_shdr finds a section with an unknown type. 
Name: elfNN_ia64_section_flags; Comment: ??? There is no bfd internal flag equivalent to the SHF_IA_64_NORECOV flag. 
Name: elfNN_ia64_fake_sections; Comment: Set the correct type for an IA-64 ELF section. We do this by the section name, which is a hack, but ought to work. 
Name: elfNN_ia64_final_write_processing; Comment: The final processing done just before writing out an IA-64 ELF object file. 
Name: elfNN_ia64_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We use it to put .comm items in .sbss, and not .bss. 
Name: elfNN_ia64_additional_program_headers; Comment: Return the number of additional phdrs we will need. 
Name: elfNN_ia64_modify_headers; Comment: Turn on PF_IA_64_NORECOV if needed. This involves traversing all of the input sections for each output section in the segment and testing for SHF_IA_64_NORECOV on each. 
Name: elfNN_ia64_is_local_label_name; Comment: According to the Tahoe assembler spec, all labels starting with a '.' are local. 
Name: elfNN_ia64_dynamic_symbol_p; Comment: Should we do dynamic things to this symbol? 
Name: elfNN_ia64_local_htab_hash; Comment: Compute a hash of a local hash entry. 
Name: elfNN_ia64_local_htab_eq; Comment: Compare local hash entries. 
Name: elfNN_ia64_global_dyn_info_free; Comment: Free the global elfNN_ia64_dyn_sym_info array. 
Name: elfNN_ia64_local_dyn_info_free; Comment: Free the local elfNN_ia64_dyn_sym_info array. 
Name: elfNN_ia64_link_hash_table_free; Comment: Destroy IA-64 linker hash table. 
Name: elfNN_ia64_hash_table_create; Comment: Create the derived linker hash table. The IA-64 ELF port uses this derived hash table to keep information specific to the IA-64 ElF linker (without using static variables). 
Name: addend_compare; Comment: Used to sort elfNN_ia64_dyn_sym_info array. 
Name: sort_dyn_sym_info; Comment: Sort elfNN_ia64_dyn_sym_info array and remove duplicates. 
Name: global_sym_index; Comment: Search for the index of a global symbol in it's defining object file. 
Name: elfNN_ia64_tprel_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving @tprel() relocation. Main program TLS (whose template starts at PT_TLS p_vaddr) is assigned offset round(2size of pointer, PT_TLS p_align). 
Name: elfNN_ia64_dtprel_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving @dtprel() relocation. This is PT_TLS segment p_vaddr. 
Name: elfNN_ia64_choose_gp; Comment: Make sure we've got ourselves a nice fat __gp value. 
Name: elfNN_ia64_set_private_flags; Comment: Function to keep IA-64 specific file flags. 
Name: elfNN_ia64_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: loongarch_make_plt_header; Comment: Generate a PLT header. 
Name: loongarch_make_plt_entry; Comment: Generate a PLT entry. 
Name: link_hash_newfunc; Comment: Create an entry in an LoongArch ELF linker hash table. 
Name: elfNN_loongarch_local_htab_hash; Comment: Compute a hash of a local hash entry. We use elf_link_hash_entry for local symbol so that we can handle local STT_GNU_IFUNC symbols as global symbol. We reuse indx and dynstr_index for local symbol hash since they aren't used by global symbols in this backend. 
Name: elfNN_loongarch_local_htab_eq; Comment: Compare local hash entries. 
Name: elfNN_loongarch_get_local_sym_hash; Comment: Find and/or create a hash entry for local symbol. 
Name: elfNN_loongarch_link_hash_table_free; Comment: Destroy an LoongArch elf linker hash table. 
Name: loongarch_elf_link_hash_table_create; Comment: Create a LoongArch ELF linker hash table. 
Name: elfNN_loongarch_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: loongarch_elf_create_got_section; Comment: Create the .got section. 
Name: loongarch_elf_create_dynamic_sections; Comment: Create .plt, .rela.plt, .got, .got.plt, .rela.got, .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: loongarch_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: readonly_dynrelocs; Comment: Find dynamic relocs for H that apply to read-only sections. 
Name: loongarch_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: local_allocate_ifunc_dyn_relocs; Comment: A modified version of _bfd_elf_allocate_ifunc_dyn_relocs. For local def and ref ifunc, dynamic relocations are stored in 1. rela.srelgot section in dynamic object (dll or exec). 2. rela.irelplt section in static executable. Unlike _bfd_elf_allocate_ifunc_dyn_relocs, rela.srelgot is used instead of rela.srelplt. Glibc ELF loader will not support R_LARCH_IRELATIVE relocation in rela.plt. 
Name: elfNN_allocate_ifunc_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for ifunc dynamic relocs. 
Name: elfNN_allocate_local_ifunc_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for ifunc dynamic relocs. 
Name: maybe_set_textrel; Comment: Set DF_TEXTREL if we find any dynamic relocs that apply to read-only sections. 
Name: loongarch_check_offset; Comment: Check rel->r_offset in range of contents. 
Name: loongarch_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: loongarch_finish_dyn; Comment: Finish up the dynamic sections. 
Name: elfNN_loongarch_finish_local_dynamic_symbol; Comment: Finish up local dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: loongarch_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: loongarch_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: loongarch_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: loongarch_elf_object_p; Comment: Set the right mach type. 
Name: elf_loongarch64_hash_symbol; Comment: Return TRUE if symbol H should be hashed in the `.gnu.hash' section. For executable PLT slots where the executable never takes the address of those functions, the function symbols are not added to the hash table. 
Name: riscv_is_insn_reloc; Comment: Return true if a relocation is modifying an instruction. 
Name: riscv_make_plt_header; Comment: Generate a PLT header. 
Name: riscv_make_plt_entry; Comment: Generate a PLT entry. 
Name: link_hash_newfunc; Comment: Create an entry in an RISC-V ELF linker hash table. 
Name: riscv_elf_local_htab_hash; Comment: Compute a hash of a local hash entry. We use elf_link_hash_entry for local symbol so that we can handle local STT_GNU_IFUNC symbols as global symbol. We reuse indx and dynstr_index for local symbol hash since they aren't used by global symbols in this backend. 
Name: riscv_elf_local_htab_eq; Comment: Compare local hash entries. 
Name: riscv_elf_get_local_sym_hash; Comment: Find and/or create a hash entry for local symbol. 
Name: riscv_elf_link_hash_table_free; Comment: Destroy a RISC-V elf linker hash table. 
Name: riscv_elf_link_hash_table_create; Comment: Create a RISC-V ELF linker hash table. 
Name: riscv_elf_create_got_section; Comment: Create the .got section. 
Name: riscv_elf_create_dynamic_sections; Comment: Create .plt, .rela.plt, .got, .got.plt, .rela.got, .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: riscv_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: riscv_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: riscv_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: allocate_ifunc_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for ifunc dynamic relocs. 
Name: allocate_local_ifunc_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for local ifunc dynamic relocs. 
Name: dtpoff; Comment: Return the relocation value for a TLS dtp-relative reloc. 
Name: tpoff; Comment: Return the relocation value for a static TLS tp-relative relocation. 
Name: riscv_global_pointer_value; Comment: Return the global pointer's value, or 0 if it is not in use. 
Name: perform_relocation; Comment: Emplace a static relocation. 
Name: riscv_elf_relocate_section; Comment: Relocate a RISC-V ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures. This function is responsible for adjusting the section contents as necessary, and (if generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: riscv_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: riscv_elf_finish_local_dynamic_symbol; Comment: Finish up local dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: riscv_finish_dyn; Comment: Finish up the dynamic sections. 
Name: riscv_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: riscv_float_abi_string; Comment: Given the ELF header flags in FLAGS, it returns a string that describes the float ABI. 
Name: riscv_std_ext_p; Comment: Predicator for standard extension. 
Name: riscv_update_subset_version; Comment: Update the output subset's version to match the input when the input subset's version is newer. 
Name: riscv_i_or_e_p; Comment: Return true if subset is 'i' or 'e'. 
Name: riscv_merge_std_ext; Comment: Merge standard extensions. Return Value: Return FALSE if failed to merge. Arguments: `bfd`: bfd handler. `in_arch`: Raw ISA string for input object. `out_arch`: Raw ISA string for output object. `pin`: Subset list for input object. `pout`: Subset list for output object. 
Name: riscv_merge_multi_letter_ext; Comment: Merge multi letter extensions. PIN is a pointer to the head of the input object subset list. Likewise for POUT and the output object. Return TRUE on success and FALSE when a conflict is found. 
Name: riscv_merge_arch_attr_info; Comment: Merge Tag_RISCV_arch attribute. 
Name: riscv_merge_attributes; Comment: Merge object attributes from IBFD into output_bfd of INFO. Raise an error if there are conflicting attributes. 
Name: _bfd_riscv_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: riscv_init_pcgp_relocs; Comment: Initialize the pcgp reloc info in P. 
Name: riscv_free_pcgp_relocs; Comment: Free the pcgp reloc info in P. 
Name: riscv_record_pcgp_hi_reloc; Comment: Record pcgp hi part reloc info in P, using HI_SEC_OFF as the lookup index. The HI_ADDEND, HI_ADDR, HI_SYM, and SYM_SEC args contain info required to relax the corresponding lo part reloc. 
Name: riscv_find_pcgp_hi_reloc; Comment: Look up hi part pcgp reloc info in P, using HI_SEC_OFF as the lookup index. This is used by a lo part reloc to find the corresponding hi part reloc. 
Name: riscv_record_pcgp_lo_reloc; Comment: Record pcgp lo part reloc info in P, using HI_SEC_OFF as the lookup info. This is used to record relocs that can't be relaxed. 
Name: riscv_find_pcgp_lo_reloc; Comment: Look up lo part pcgp reloc info in P, using HI_SEC_OFF as the lookup index. This is used by a hi part reloc to find the corresponding lo part reloc. 
Name: _riscv_relax_delete_bytes; Comment: Delete some bytes, adjust relcocations and symbol table from a section. 
Name: _riscv_relax_delete_piecewise; Comment: Do not delete some bytes from a section while relaxing. Just mark the deleted bytes as R_RISCV_DELETE. 
Name: _riscv_relax_delete_immediate; Comment: Delete some bytes from a section while relaxing. 
Name: riscv_relax_resolve_delete_relocs; Comment: Delete the bytes for R_RISCV_DELETE relocs. 
Name: _bfd_riscv_relax_call; Comment: Relax AUIPC + JALR into JAL. 
Name: _bfd_riscv_get_max_alignment; Comment: Traverse all output sections and return the max alignment. 
Name: _bfd_riscv_relax_lui; Comment: Relax non-PIC global variable references to GP-relative references. 
Name: _bfd_riscv_relax_tls_le; Comment: Relax non-PIC TLS references to TP-relative references. 
Name: _bfd_riscv_relax_align; Comment: Implement R_RISCV_ALIGN by deleting excess alignment NOPs. Once we've handled an R_RISCV_ALIGN, we can't relax anything else. 
Name: _bfd_riscv_relax_pc; Comment: Relax PC-relative references to GP-relative references. 
Name: bfd_elfNN_riscv_set_data_segment_info; Comment: Called by after_allocation to set the information of data segment before relaxing. 
Name: _bfd_riscv_relax_section; Comment: Relax a section. Pass 0: Shortens code sequences for LUI/CALL/TPREL/PCREL relocs. Pass 1: Deletes the bytes that PCREL relaxation in pass 0 made obsolete. Pass 2: Which cannot be disabled, handles code alignment directives. 
Name: riscv_write_core_note; Comment: Write PRSTATUS and PRPSINFO note into core file. This will be called before the generic code in elf.c. By checking the compiler defines we only perform any action here if the generic code would otherwise not be able to help us. The intention is that bare metal core dumps (where the prstatus_t and/or prpsinfo_t might not be available) will use this code, while non bare metal tools will use the generic elf code. 
Name: riscv_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: riscv_elf_object_p; Comment: Set the right mach type. 
Name: riscv_elf_obj_attrs_arg_type; Comment: Determine whether an object attribute tag takes an integer, a string or both. 
Name: riscv_maybe_function_sym; Comment: Do not choose mapping symbols as a function name. 
Name: riscv_elf_is_target_special_symbol; Comment: Treat the following cases as target special symbols, they are usually omitted. 
Name: riscv_elf_merge_symbol_attribute; Comment: Merge non-visibility st_other attributes. 
Name: _bfd_aarch64_sign_extend; Comment: Sign-extend VALUE, which has the indicated number of BITS. 
Name: _bfd_aarch64_decode_adrp_imm; Comment: Decode the IMM field of ADRP. 
Name: _bfd_aarch64_reencode_adr_imm; Comment: Reencode the IMM field of ADR. 
Name: aarch64_unsigned_overflow; Comment: Return non-zero if the indicated VALUE has overflowed the maximum range expressible by a unsigned number with the indicated number of BITS. 
Name: aarch64_signed_overflow; Comment: Return non-zero if the indicated VALUE has overflowed the maximum range expressible by an signed number with the indicated number of BITS. 
Name: _bfd_aarch64_elf_put_addend; Comment: Insert the addend/value into the instruction or data object being relocated. 
Name: _bfd_aarch64_elf_grok_prstatus; Comment: Support for core dump NOTE sections. 
Name: _bfd_aarch64_elf_link_setup_gnu_properties; Comment: Find the first input bfd with GNU property and merge it with GPROP. If no such input is found, add it to a new section at the last input. Update GPROP accordingly. 
Name: _bfd_aarch64_elf_parse_gnu_properties; Comment: Define elf_backend_parse_gnu_properties for AArch64. 
Name: _bfd_aarch64_elf_merge_gnu_properties; Comment: Merge AArch64 GNU property BPROP with APROP also accounting for PROP. If APROP isn't NULL, merge it with BPROP and/or PROP. Vice-versa if BROP isn't NULL. Return TRUE if there is any update to APROP or if BPROP should be merge with ABFD. 
Name: ; Comment: Fix up AArch64 GNU properties. 
Name: ia64_elf_reloc; Comment: Perform a relocation. Not much to do here as all the hard work is done in elfNN_ia64_final_link_relocate. 
Name: ia64_elf_lookup_howto; Comment: Given a BFD reloc type, return the matching HOWTO structure. 
Name: loongarch_reloc_type_lookup; Comment: Cost so much. 
Name: reloc_bits; Comment: Adjust val to perform insn BFD_RELOC_LARCH_SOP_POP_32_S_10_5 BFD_RELOC_LARCH_SOP_POP_32_S_10_12 BFD_RELOC_LARCH_SOP_POP_32_U_10_12 BFD_RELOC_LARCH_SOP_POP_32_S_10_16 BFD_RELOC_LARCH_SOP_POP_32_S_5_20 BFD_RELOC_LARCH_SOP_POP_32_U. 
Name: reloc_bits_b16; Comment: Adjust val to perform insn R_LARCH_SOP_POP_32_S_10_16_S2 R_LARCH_B16. 
Name: reloc_bits_b21; Comment: Reloc type : R_LARCH_SOP_POP_32_S_0_5_10_16_S2 R_LARCH_B21. 
Name: reloc_bits_b26; Comment: Reloc type: R_LARCH_SOP_POP_32_S_0_10_10_16_S2 R_LARCH_B26. 
Name: bfd_put_micromips_32; Comment: microMIPS 32-bit opcode helper installer. 
Name: bfd_get_micromips_32; Comment: microMIPS 32-bit opcode helper retriever. 
Name: mips_elf_link_hash_newfunc; Comment: Create an entry in a MIPS ELF linker hash table. 
Name: _bfd_mips_elf_mkobject; Comment: Allocate MIPS ELF private object data. 
Name: _bfd_mips_elf_read_ecoff_info; Comment: Read ECOFF debugging information from a .mdebug section into a ecoff_debug_info structure. 
Name: ecoff_swap_rpdr_out; Comment: Swap RPDR (runtime procedure table entry) for output. 
Name: mips_elf_create_procedure_table; Comment: Create a runtime procedure table from the .mdebug section. 
Name: mips_elf_create_stub_symbol; Comment: We're going to create a stub for H. Create a symbol for the stub's value and size, to help make the disassembly easier to read. 
Name: mips_elf_create_shadow_symbol; Comment: We're about to redefine H. Create a symbol to represent H's current value and size, to help make the disassembly easier to read. 
Name: section_allows_mips16_refs_p; Comment: Return TRUE if relocations in SECTION can refer directly to a MIPS16 function rather than to a hard-float stub. 
Name: mips16_stub_symndx; Comment: [RELOCS, RELEND) are the relocations against SEC, which is a MIPS16 stub section of some kind. Return the R_SYMNDX of the target function, or 0 if we can't decide which function that is. 
Name: mips_elf_check_mips16_stubs; Comment: Check the mips16 stubs for a particular symbol, and see if we can discard them. 
Name: mips_elf_la25_stub_hash; Comment: Hashtable callbacks for mips_elf_la25_stubs. 
Name: _bfd_mips_elf_init_stubs; Comment: Called by the linker to set up the la25 stub-creation code. FN is the linker's implementation of add_stub_function. Return true on success. 
Name: mips_elf_local_pic_function_p; Comment: Return true if H is a locally-defined PIC function, in the sense that it or its fn_stub might need $25 to be valid on entry. Note that MIPS16 functions set up $gp using PC-relative instructions, so they themselves never need $25 to be valid. Only non-MIPS16 entry points are of interest here. 
Name: mips_elf_get_la25_target; Comment: Set *SEC to the input section that contains the target of STUB. Return the offset of the target from the start of that section. 
Name: mips_elf_add_la25_intro; Comment: STUB describes an la25 stub that we have decided to implement by inserting an LUI/ADDIU pair before the target function. Create the section and redirect the function symbol to it. 
Name: mips_elf_add_la25_trampoline; Comment: STUB describes an la25 stub that we have decided to implement with a separate trampoline. Allocate room for it and redirect the function symbol to it. 
Name: mips_elf_add_la25_stub; Comment: H describes a symbol that needs an la25 stub. Make sure that an appropriate stub exists and point H at it. 
Name: mips_elf_check_symbols; Comment: A mips_elf_link_hash_traverse callback that is called before sizing sections. DATA points to a mips_htab_traverse_info structure. 
Name: _bfd_mips_reloc_offset_in_range; Comment: Perform reloc offset checking. We can only use bfd_reloc_offset_in_range, which takes into account the size of the field being relocated, when section contents will be accessed because mips object files may use relocations that seem to access beyond section limits. gas/testsuite/gas/mips/dla-reloc.s is an example that puts R_MIPS_SUB, a 64-bit relocation, on the last instruction in the section. The R_MIPS_SUB applies to the addend for the next reloc rather than the section contents. CHECK is CHECK_STD for the standard bfd_reloc_offset_in_range check, CHECK_INPLACE to only check partial_inplace relocs, and CHECK_SHUFFLE to only check relocs that shuffle/unshuffle. 
Name: _bfd_mips_elf_hi16_reloc; Comment: A howto special_function for REL *HI16 relocations. We can only calculate the correct value once we've seen the partnering *LO16 relocation, so just save the information for later. The ABI requires that the *LO16 immediately follow the *HI16. However, as a GNU extension, we permit an arbitrary number of *HI16s to be associated with a single *LO16. This significantly simplies the relocation handling in gcc. 
Name: _bfd_mips_elf_got16_reloc; Comment: A howto special_function for REL R_MIPS*_GOT16 relocations. This is just like any other 16-bit relocation when applied to global symbols, but is treated in the same as R_MIPS_HI16 when applied to local symbols. 
Name: _bfd_mips_elf_lo16_reloc; Comment: A howto special_function for REL *LO16 relocations. The *LO16 itself is a straightforward 16 bit inplace relocation, but we must deal with any partnering high-part relocations as well. 
Name: _bfd_mips_elf_generic_reloc; Comment: A generic howto special_function. This calculates and installs the relocation itself, thus avoiding the oft-discussed problems in bfd_perform_relocation and bfd_install_relocation. 
Name: bfd_mips_elf32_swap_gptab_in; Comment: Swap an entry in a .gptab section. Note that these routines rely on the equivalence of the two elements of the union. 
Name: bfd_mips_elf32_swap_reginfo_in; Comment: A .reginfo section holds a single Elf32_RegInfo structure. These routines swap this structure in and out. They are used outside of BFD, so they are globally visible. 
Name: bfd_mips_elf64_swap_reginfo_in; Comment: In the 64 bit ABI, the .MIPS.options section holds register information in an Elf64_Reginfo structure. These routines swap them in and out. They are globally visible because they are used outside of BFD. These routines are here so that gas can call them without worrying about whether the 64 bit ABI has been included. 
Name: bfd_mips_elf_swap_options_in; Comment: Swap in an options header. 
Name: bfd_mips_elf_swap_options_out; Comment: Swap out an options header. 
Name: bfd_mips_elf_swap_abiflags_v0_in; Comment: Swap in an abiflags structure. 
Name: bfd_mips_elf_swap_abiflags_v0_out; Comment: Swap out an abiflags structure. 
Name: sort_dynamic_relocs; Comment: This function is called via qsort() to sort the dynamic relocation entries by increasing r_symndx value. 
Name: sort_dynamic_relocs_64; Comment: Like sort_dynamic_relocs, but used for elf64 relocations. 
Name: mips_elf_output_extsym; Comment: This routine is used to write out ECOFF debugging external symbol information. It is called via mips_elf_link_hash_traverse. The ECOFF external symbol information must match the ELF external symbol information. Unfortunately, at this point we don't know whether a symbol is required by reloc information, so the two tables may wind up being different. We must sort out the external symbol information before we can set the final size of the .mdebug section, and we must set the size of the .mdebug section before we can relocate any sections, and we can't know which symbols are required by relocation until we relocate the sections. Fortunately, it is relatively unlikely that any symbol will be stripped but required by a reloc. In particular, it can not happen when generating a final executable. 
Name: gptab_compare; Comment: A comparison routine used to sort .gptab entries. 
Name: mips_elf_create_got_info; Comment: Create and return a new mips_got_info structure. 
Name: mips_elf_bfd_got; Comment: Return the GOT info for input bfd ABFD, trying to create a new one if CREATE_P and if ABFD doesn't already have a GOT. 
Name: mips_elf_replace_bfd_got; Comment: Record that ABFD should use output GOT G. 
Name: mips_elf_rel_dyn_section; Comment: Return the dynamic relocation section. If it doesn't exist, try to create a new it if CREATE_P, otherwise return NULL. Also return NULL if creation fails. 
Name: mips_elf_reloc_tls_type; Comment: Return the GOT_TLS_* type required by relocation type R_TYPE. 
Name: mips_tls_got_entries; Comment: Return the number of GOT slots needed for GOT TLS type TYPE. 
Name: mips_tls_got_relocs; Comment: Count the number of relocations needed for a TLS GOT entry, with access types from TLS_TYPE, and symbol H (or a local symbol if H is NULL). 
Name: mips_elf_count_got_entry; Comment: Add the number of GOT entries and TLS relocations required by ENTRY to G. 
Name: mips_elf_output_dynamic_relocation; Comment: Output a simple dynamic relocation into SRELOC. 
Name: mips_elf_initialize_tls_slots; Comment: Initialize a set of TLS GOT entries for one symbol. 
Name: mips_elf_gotplt_index; Comment: Return the offset from _GLOBAL_OFFSET_TABLE_ of the .got.plt entry for global symbol H. .got.plt comes before the GOT, so the offset will be negative. 
Name: mips_elf_local_got_index; Comment: Return the GOT offset for address VALUE. If there is not yet a GOT entry for this value, create one. If R_SYMNDX refers to a TLS symbol, create a TLS GOT entry instead. Return -1 if no satisfactory GOT offset can be found. 
Name: mips_elf_primary_global_got_index; Comment: Return the GOT index of global symbol H in the primary GOT. 
Name: mips_elf_global_got_index; Comment: Return the GOT index for the global symbol indicated by H, which is referenced by a relocation of type R_TYPE in IBFD. 
Name: mips_elf_got_page; Comment: Find a GOT page entry that points to within 32KB of VALUE. These entries are supposed to be placed at small offsets in the GOT, i.e., within 32KB of GP. Return the index of the GOT entry, or -1 if no entry could be created. If OFFSETP is nonnull, use it to return the offset of the GOT entry from VALUE. 
Name: mips_elf_got16_entry; Comment: Find a local GOT entry for an R_MIPS*_GOT16 relocation against VALUE. EXTERNAL is true if the relocation was originally against a global symbol that binds locally. 
Name: mips_elf_got_offset_from_index; Comment: Returns the offset for the entry at the INDEXth position in the GOT. 
Name: mips_elf_create_local_got_entry; Comment: Create and return a local GOT entry for VALUE, which was calculated from a symbol belonging to INPUT_SECTON. Return NULL if it could not be created. If R_SYMNDX refers to a TLS symbol, create a TLS entry instead. 
Name: count_section_dynsyms; Comment: Return the number of dynamic section symbols required by OUTPUT_BFD. The number might be exact or a worst-case estimate, depending on how much information is available to elf_backend_omit_section_dynsym at the current linking stage. 
Name: mips_elf_sort_hash_table; Comment: Sort the dynamic symbol table so that symbols that need GOT entries appear towards the end. 
Name: mips_elf_sort_hash_table_f; Comment: If H needs a GOT entry, assign it the highest available dynamic index. Otherwise, assign it the lowest available dynamic index. 
Name: mips_elf_record_got_entry; Comment: Record that input bfd ABFD requires a GOT entry like *LOOKUP (which is owned by the caller and shouldn't be added to the hash table directly). 
Name: mips_elf_record_global_got_symbol; Comment: ABFD has a GOT relocation of type R_TYPE against H. Reserve a GOT entry for it. FOR_CALL is true if the caller is only interested in using the GOT entry for calls. 
Name: mips_elf_record_local_got_symbol; Comment: ABFD has a GOT relocation of type R_TYPE against symbol SYMNDX + ADDEND, where SYMNDX is a local symbol. Reserve a GOT entry for it. 
Name: mips_elf_record_got_page_ref; Comment: Record that ABFD has a page relocation against SYMNDX + ADDEND. H is the symbol's hash table entry, or null if SYMNDX is local to ABFD. 
Name: mips_elf_allocate_dynamic_relocations; Comment: Add room for N relocations to the .rel(a).dyn section in ABFD. 
Name: mips_elf_check_recreate_got; Comment: A htab_traverse callback for GOT entries, with DATA pointing to a mips_elf_traverse_got_arg structure. Count the number of GOT entries and TLS relocs. Set DATA->value to true if we need to resolve indirect or warning symbols and then recreate the GOT. 
Name: mips_elf_recreate_got; Comment: A htab_traverse callback for GOT entries, with DATA pointing to a mips_elf_traverse_got_arg structure. Add all entries to DATA->g, converting entries for indirect and warning symbols into entries for the target symbol. Set DATA->g to null on error. 
Name: mips_elf_pages_for_range; Comment: Return the maximum number of GOT page entries required for RANGE. 
Name: mips_elf_record_got_page_entry; Comment: Record that G requires a page entry that can reach SEC + ADDEND. 
Name: mips_elf_resolve_got_page_ref; Comment: A htab_traverse callback for which *REFP points to a mips_got_page_ref and for which DATA points to a mips_elf_traverse_got_arg. Work out whether the page reference described by *REFP needs a GOT page entry, and record that entry in DATA->g if so. Set DATA->g to null on failure. 
Name: mips_elf_resolve_final_got_entries; Comment: If any entries in G->got_entries are for indirect or warning symbols, replace them with entries for the target symbol. Convert g->got_page_refs into got_page_entry structures and estimate the number of page entries that they require. 
Name: mips_use_local_got_p; Comment: Return true if a GOT entry for H should live in the local rather than global GOT area. 
Name: mips_elf_count_got_symbols; Comment: A mips_elf_link_hash_traverse callback for which DATA points to the link_info structure. Decide whether the hash entry needs an entry in the global part of the primary GOT, setting global_got_area accordingly. Count the number of global symbols that are in the primary GOT only because they have relocations against them (reloc_only_gotno). 
Name: mips_elf_add_got_entry; Comment: A htab_traverse callback for GOT entries. Add each one to the GOT given in mips_elf_traverse_got_arg DATA. Clear DATA->G on error. 
Name: mips_elf_add_got_page_entry; Comment: A htab_traverse callback for GOT page entries. Add each one to the GOT given in mips_elf_traverse_got_arg DATA. Clear DATA->G on error. 
Name: mips_elf_merge_got_with; Comment: Consider merging FROM, which is ABFD's GOT, into TO. Return -1 if this would lead to overflow, 1 if they were merged successfully, and 0 if a merge failed due to lack of memory. (These values are chosen so that nonnegative return values can be returned by a htab_traverse callback.) 
Name: mips_elf_merge_got; Comment: Attempt to merge GOT G, which belongs to ABFD. Try to use as much as possible of the primary got, since it doesn't require explicit dynamic relocations, but don't use bfds that would reference global symbols out of the addressable range. Failing the primary got, attempt to merge with the current got, or finish the current got and then make make the new got current. 
Name: mips_elf_set_gotidx; Comment: ENTRYP is a hash table entry for a mips_got_entry. Set its gotidx to GOTIDX, duplicating the entry if it has already been assigned an index in a different GOT. 
Name: mips_elf_initialize_tls_index; Comment: Set the TLS GOT index for the GOT entry in ENTRYP. DATA points to a mips_elf_traverse_got_arg in which DATA->value is the size of one GOT entry. Set DATA->g to null on failure. 
Name: mips_elf_set_global_got_area; Comment: A htab_traverse callback for GOT entries, where DATA points to a mips_elf_traverse_got_arg. Set the global_got_area of each global symbol to DATA->value. 
Name: mips_elf_set_global_gotidx; Comment: A htab_traverse callback for secondary GOT entries, where DATA points to a mips_elf_traverse_got_arg. Assign GOT indices to global entries and record the number of relocations they require. DATA->value is the size of one GOT entry. Set DATA->g to null on failure. 
Name: mips_elf_forbid_lazy_stubs; Comment: A htab_traverse callback for GOT entries for which DATA is the bfd_link_info. Forbid any global symbols from having traditional lazy-binding stubs. 
Name: mips_elf_adjust_gp; Comment: Return the offset of an input bfd IBFD's GOT from the beginning of the primary GOT. 
Name: mips_elf_multi_got; Comment: Turn a single GOT that is too big for 16-bit addressing into a sequence of GOTs, each one 16-bit addressable. 
Name: mips_elf_next_relocation; Comment: Returns the first relocation of type r_type found, beginning with RELOCATION. RELEND is one-past-the-end of the relocation table. 
Name: mips_elf_local_relocation_p; Comment: Return whether an input relocation is against a local symbol. 
Name: _bfd_mips_elf_sign_extend; Comment: Sign-extend VALUE, which has the indicated number of BITS. 
Name: mips_elf_overflow_p; Comment: Return non-zero if the indicated VALUE has overflowed the maximum range expressible by a signed number with the indicated number of BITS. 
Name: mips_elf_high; Comment: Calculate the %high function. 
Name: mips_elf_higher; Comment: Calculate the %higher function. 
Name: mips_elf_highest; Comment: Calculate the %highest function. 
Name: ; Comment: Create the .compact_rel section. 
Name: mips_elf_create_got_section; Comment: Create the .got section to hold the global offset table. 
Name: is_gott_symbol; Comment: Return true if H refers to the special VxWorks __GOTT_BASE__ or __GOTT_INDEX__ symbols. These symbols are only special for shared objects; they are not used in executables. 
Name: mips_elf_relocation_needs_la25_stub; Comment: Return TRUE if a relocation of type R_TYPE from INPUT_BFD might require an la25 stub. See also mips_elf_local_pic_function_p, which determines whether the destination function ever requires a stub. 
Name: mips_elf_obtain_contents; Comment: Obtain the field relocated by RELOCATION. 
Name: mips_elf_store_contents; Comment: Store the field relocated by RELOCATION. 
Name: mips_elf_nullify_got_load; Comment: Try to patch a load from GOT instruction in CONTENTS pointed to by RELOCATION described by HOWTO, with a move of 0 to the load target register, returning TRUE if that is successful and FALSE otherwise. If DOIT is FALSE, then only determine it patching is possible and return status without actually changing CONTENTS. 
Name: mips_elf_calculate_relocation; Comment: Calculate the value produced by the RELOCATION (which comes from the INPUT_BFD). The ADDEND is the addend to use for this RELOCATION; RELOCATION->R_ADDEND is ignored. The result of the relocation calculation is stored in VALUEP. On exit, set *CROSS_MODE_JUMP_P to true if the relocation field is a MIPS16 or microMIPS jump to standard MIPS code, or vice versa. This function returns bfd_reloc_continue if the caller need take no further action regarding this relocation, bfd_reloc_notsupported if something goes dramatically wrong, bfd_reloc_overflow if an overflow occurs, and bfd_reloc_ok to indicate success. 
Name: mips_elf_perform_relocation; Comment: It has been determined that the result of the RELOCATION is the VALUE. Use HOWTO to place VALUE into the output file at the appropriate position. The SECTION is the section to which the relocation applies. CROSS_MODE_JUMP_P is true if the relocation field is a MIPS16 or microMIPS jump to standard MIPS code, or vice versa. Returns FALSE if anything goes wrong. 
Name: mips_elf_create_dynamic_relocation; Comment: Create a rel.dyn relocation for the dynamic linker to resolve. REL is the original relocation, which is now being transformed into a dynamic relocation. The ADDENDP is adjusted if necessary; the caller should store the result in place of the original addend. 
Name: _bfd_elf_mips_mach; Comment: Return the MACH for a MIPS e_flags value. 
Name: _bfd_mips_elf_symbol_processing; Comment: This is used for both the 32-bit and the 64-bit ABI. 
Name: _bfd_mips_elf_eh_frame_address_size; Comment: Implement elf_backend_eh_frame_address_size. This differs from the default in the way it handles EABI64. EABI64 was originally specified as an LP64 ABI, and that is what -mabi=eabi normally gives on a 64-bit target. However, gcc has historically accepted the combination of -mabi=eabi and -mlong32, and this ILP32 variation has become semi-official over time. Both forms use elf32 and have pointer-sized FDE addresses. If an EABI object was generated by GCC 4.0 or above, it will have an empty .gcc_compiled_longXX section, where XX is the size of longs in bits. Unfortunately, ILP32 objects generated by earlier compilers have no special marking to distinguish them from LP64 objects. We don't want users of the official LP64 ABI to be punished for the existence of the ILP32 variant, but at the same time, we don't want to mistakenly interpret pre-4.0 ILP32 objects as being LP64 objects. We therefore take the following approach: - If ABFD contains a .gcc_compiled_longXX section, use it to _determine the pointer size. - Otherwise check the type of the first relocation. Assume that _the LP64 ABI is being used if the relocation is of type R_MIPS_64. - Otherwise punt. The second check is enough to detect LP64 objects generated by pre-4.0 compilers because, in the kind of output generated by those compilers, the first relocation will be associated with either a CIE personality routine or an FDE start address. Furthermore, the compilers never used a special (non-pointer) encoding for this ABI. Checking the relocation type should also be safe because there is no reason to use R_MIPS_64 in an ILP32 object. Pre-4.0 compilers never did so. 
Name: _bfd_mips_elf_name_local_section_symbols; Comment: There appears to be a bug in the MIPSpro linker that causes GOT_DISP relocations against two unnamed section symbols to resolve to the same address. For example, if we have code like: _lw_$4,%got_disp(.data)($gp) _lw_$25,%got_disp(.text)($gp) _jalr_$25 then the linker will resolve both relocations to .data and the program will jump there rather than to .text. We can work around this problem by giving names to local section symbols. This is also what the MIPSpro tools do. 
Name: _bfd_mips_elf_section_processing; Comment: Work over a section just before writing it out. This routine is used by both the 32-bit and the 64-bit ABI. FIXME: We recognize sections that need the SHF_MIPS_GPREL flag by name; there has to be a better way. 
Name: _bfd_mips_elf_section_from_shdr; Comment: Handle a MIPS specific section when reading an object file. This is called when elfcode.h finds a section with an unknown type. This routine supports both the 32-bit and 64-bit ELF ABI. 
Name: _bfd_mips_elf_fake_sections; Comment: Set the correct type for a MIPS ELF section. We do this by the section name, which is a hack, but ought to work. This routine is used by both the 32-bit and the 64-bit ABI. 
Name: _bfd_mips_elf_section_from_bfd_section; Comment: Given a BFD section, try to locate the corresponding ELF section index. This is used by both the 32-bit and the 64-bit ABI. Actually, it's not clear to me that the 64-bit ABI supports these, but for non-PIC objects we will certainly want support for at least the .scommon section. 
Name: _bfd_mips_elf_add_symbol_hook; Comment: Hook called by the linker routine which adds symbols from an object file. We must handle the special MIPS section numbers here. 
Name: ; Comment: This hook function is called before the linker writes out a global symbol. We mark symbols as small common if appropriate. This is also where we undo the increment of the value for a mips16 symbol. 
Name: _bfd_mips_elf_create_dynamic_sections; Comment: Create dynamic sections when linking against a dynamic object. 
Name: mips_elf_rel_relocation_p; Comment: Return true if relocation REL against section SEC is a REL rather than RELA relocation. RELOCS is the first relocation in the section and ABFD is the bfd that contains SEC. 
Name: mips_elf_read_rel_addend; Comment: Read the addend for REL relocation REL, which belongs to bfd ABFD. HOWTO is the relocation's howto and CONTENTS points to the contents of the section that REL is against. 
Name: mips_elf_add_lo16_rel_addend; Comment: REL is a relocation in ABFD that needs a partnering LO16 relocation and *ADDEND is the addend for REL itself. Look for the LO16 relocation and update *ADDEND with the final addend. Return true on success or false if the LO16 could not be found. RELEND is the exclusive upper bound on the relocations for REL's section. 
Name: mips_elf_get_section_contents; Comment: Try to read the contents of section SEC in bfd ABFD. Return true and store the contents in *CONTENTS on success. Assume that *CONTENTS already holds the contents if it is nonull on entry. 
Name: mips_elf_make_plt_record; Comment: Make a new PLT record to keep internal data. 
Name: mips_elf_define_absolute_zero; Comment: Define the special `__gnu_absolute_zero' symbol. We only need this for PIC code, as otherwise there is no load-time relocation involved and local GOT entries whose value is zero at static link time will retain their value at load time. 
Name: _bfd_mips_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table and record the need for standard MIPS and compressed procedure linkage table entries. 
Name: allocate_dynrelocs; Comment: Allocate space for global sym dynamic relocs. 
Name: _bfd_mips_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: _bfd_mips_elf_always_size_sections; Comment: This function is called after all the input files have been read, and the input sections have been assigned to output sections. We check for any mips16 stub sections that we can discard. 
Name: mips_elf_lay_out_got; Comment: If the link uses a GOT, lay it out and work out its size. 
Name: mips_elf_estimate_stub_size; Comment: Estimate the size of the .MIPS.stubs section. 
Name: mips_elf_allocate_lazy_stub; Comment: A mips_elf_link_hash_traverse callback for which DATA points to a mips_htab_traverse_info. If H needs a traditional MIPS lazy-binding stub, allocate an entry in the stubs section. 
Name: mips_elf_lay_out_lazy_stubs; Comment: Allocate offsets in the stubs section to each symbol that needs one. Set the final size of the .MIPS.stub section. 
Name: mips_elf_set_plt_sym_value; Comment: A mips_elf_link_hash_traverse callback for which DATA points to a bfd_link_info. If H uses the address of a PLT entry as the value of the symbol, then set the entry in the symbol table now. Prefer a standard MIPS PLT entry. 
Name: _bfd_mips_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: mips_elf_adjust_addend; Comment: REL is a relocation in INPUT_BFD that is being copied to OUTPUT_BFD. Adjust its R_ADDEND field so that it is correct for the output file. LOCAL_SYMS and LOCAL_SECTIONS are arrays of INPUT_BFD's local symbols and sections respectively; both use symbol indexes. 
Name: mips_reloc_against_discarded_section; Comment: Handle relocations against symbols from removed linkonce sections, or sections discarded by a linker script. We use this wrapper around RELOC_AGAINST_DISCARDED_SECTION to handle triplets of compound relocs on 64-bit ELF targets. In this case for any relocation handled, which always be the first in a triplet, the remaining two have to be processed together with the first, even if they are R_MIPS_NONE. It is the symbol index referred by the first reloc that applies to all the three and the remaining two never refer to an object symbol. And it is the final relocation (the last non-null one) that determines the output field of the whole relocation so retrieve the corresponding howto structure for the relocatable field to be cleared by RELOC_AGAINST_DISCARDED_SECTION. Note that RELOC_AGAINST_DISCARDED_SECTION is a macro that uses "continue" and therefore requires to be pasted in a loop. It also defines a block and does not protect any of its arguments, hence the extra brackets. 
Name: _bfd_mips_elf_relocate_section; Comment: Relocate a MIPS ELF section. 
Name: mips_elf_create_la25_stub; Comment: A function that iterates over each entry in la25_stubs and fills in the code for each one. DATA points to a mips_htab_traverse_info. 
Name: mips_elf_irix6_finish_dynamic_symbol; Comment: If NAME is one of the special IRIX6 symbols defined by the linker, adjust it appropriately now. 
Name: _bfd_mips_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: _bfd_mips_vxworks_finish_dynamic_symbol; Comment: Likewise, for VxWorks. 
Name: mips_finish_exec_plt; Comment: Write out a plt0 entry to the beginning of .plt. 
Name: mips_vxworks_finish_exec_plt; Comment: Install the PLT header for a VxWorks executable and finalize the contents of .rela.plt.unloaded. 
Name: mips_vxworks_finish_shared_plt; Comment: Install the PLT header for a VxWorks shared library. 
Name: _bfd_mips_elf_finish_dynamic_sections; Comment: Finish up the dynamic sections. 
Name: mips_set_isa_flags; Comment: Set ABFD's EF_MIPS_ARCH and EF_MIPS_MACH flags. 
Name: _bfd_mips_elf_sort_relocs_p; Comment: Whether to sort relocs output by ld -r or ld --emit-relocs, by r_offset. Don't do so for code sections. We want to keep ordering of HI16/LO16 as is. On the other hand, elf-eh-frame.c processing requires .eh_frame relocs to be sorted. 
Name: _bfd_mips_final_write_processing; Comment: The final processing done just before writing out a MIPS ELF object file. This gets the MIPS architecture right based on the machine number. This is used by both the 32-bit and the 64-bit ABI. 
Name: _bfd_mips_elf_additional_program_headers; Comment: When creating an IRIX5 executable, we need REGINFO and RTPROC segments. 
Name: _bfd_mips_elf_modify_segment_map; Comment: Modify the segment map for an IRIX5 executable. 
Name: _bfd_mips_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation. 
Name: _bfd_mips_elf_gc_mark_extra_sections; Comment: Prevent .MIPS.abiflags from being discarded with --gc-sections. 
Name: _bfd_mips_elf_copy_indirect_symbol; Comment: Copy data from a MIPS ELF indirect symbol to its direct symbol, hiding the old indirect symbol. Process additional relocation information. Also called for weakdefs, in which case we just let _bfd_elf_link_hash_copy_indirect copy the flags for us. 
Name: _bfd_mips_elf_hide_symbol; Comment: Take care of the special `__gnu_absolute_zero' symbol and ignore attempts to hide it. It has to remain global (it will also be protected) so as to be assigned a global GOT entry, which will then remain unchanged at load time. 
Name: _bfd_mips_elf_is_target_special_symbol; Comment: microMIPS code retains local labels for linker relaxation. Omit them from output by default for clarity. 
Name: _bfd_mips_elf_set_section_contents; Comment: When are writing out the .options or .MIPS.options section, remember the bytes we are writing out, so that we can install the GP value in the section_processing routine. 
Name: ; Comment: This is almost identical to bfd_generic_get_... except that some MIPS relocations need to be handled specially. Sigh. 
Name: find_match; Comment: Instruction match support. 
Name: check_br16_dslot; Comment: If PTR points to what *might* be a 16-bit branch or jump, then return the minimum length of its delay slot, otherwise return 0. Non-zero results are not definitive as we might be checking against the second half of another instruction. 
Name: check_br32_dslot; Comment: If PTR points to what *might* be a 32-bit branch or jump, then return the minimum length of its delay slot, otherwise return 0. Non-zero results are not definitive as we might be checking against the second half of another instruction. 
Name: check_br16; Comment: If PTR points to a 16-bit branch or jump with a 32-bit delay slot that doesn't fiddle with REG, then return TRUE, otherwise FALSE. 
Name: check_br32; Comment: If PTR points to a 32-bit branch or jump that doesn't fiddle with REG, then return TRUE, otherwise FALSE. 
Name: check_relocated_bzc; Comment: If the instruction encoding at PTR and relocations [INTERNAL_RELOCS, IRELEND) at OFFSET indicate that there must be a compact branch there, then return TRUE, otherwise FALSE. 
Name: _bfd_mips_elf_link_hash_table_create; Comment: Create a MIPS ELF linker hash table. 
Name: _bfd_mips_vxworks_link_hash_table_create; Comment: Likewise, but indicate that the target is VxWorks. 
Name: _bfd_mips_elf_use_plts_and_copy_relocs; Comment: A function that the linker calls if we are allowed to use PLTs and copy relocs. 
Name: _bfd_mips_elf_linker_flags; Comment: A function that the linker calls to select between all or only 32-bit microMIPS instructions, and between making or ignoring branch relocation checks for invalid transitions between ISA modes. Also record whether we have been configured for a GNU target. 
Name: _bfd_mips_elf_compact_branches; Comment: A function that the linker calls to enable use of compact branches in linker generated code for MIPSR6. 
Name: mips_mach_extends_p; Comment: Return true if bfd machine EXTENSION is an extension of machine BASE. 
Name: bfd_mips_isa_ext_mach; Comment: Return the BFD mach for each .MIPS.abiflags ISA Extension. 
Name: bfd_mips_isa_ext; Comment: Return the .MIPS.abiflags value representing each ISA Extension. 
Name: update_mips_abiflags_isa; Comment: Update the isa_level, isa_rev, isa_ext fields of abiflags. 
Name: mips_32bit_flags_p; Comment: Return true if the given ELF header flags describe a 32-bit binary. 
Name: infer_mips_abiflags; Comment: Infer the content of the ABI flags based on the elf header. 
Name: _bfd_mips_elf_final_link; Comment: We need to use a special link routine to handle the .reginfo and the .mdebug sections. We need to merge all instances of these sections together, not write them all out sequentially. 
Name: mips_elf_merge_obj_e_flags; Comment: Merge object file header flags from IBFD into OBFD. Raise an error if there are conflicting settings. 
Name: mips_elf_merge_obj_attributes; Comment: Merge object attributes from IBFD into OBFD. Raise an error if there are conflicting attributes. 
Name: mips_elf_merge_obj_abiflags; Comment: Merge object ABI flags from IBFD into OBFD. Raise an error if there are conflicting settings. 
Name: _bfd_mips_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: _bfd_mips_elf_set_private_flags; Comment: Function to keep MIPS specific file flags like as EF_MIPS_PIC. 
Name: _bfd_mips_fp_abi_string; Comment: Return the meaning of Tag_GNU_MIPS_ABI_FP value FP, or null if not known. 
Name: _bfd_mips_elf_merge_symbol_attribute; Comment: Merge non visibility st_other attributes. Ensure that the STO_OPTIONAL flag is copied into h->other, even if this is not a definiton of the symbol. 
Name: _bfd_mips_elf_ignore_undef_symbol; Comment: Decide whether an undefined symbol is special and can be ignored. This is the case for OPTIONAL symbols on IRIX. 
Name: _bfd_mips_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: _bfd_mips_elf_get_synthetic_symtab; Comment: Build a table of synthetic symbols to represent the PLT. As with MIPS16 and microMIPS PLT slots we may have a many-to-one mapping between .plt and .got.plt and also the slots may be of a different size each we walk the PLT manually fetching instructions and matching them against known patterns. To make things easier standard MIPS slots, if any, always come first. As we don't create proper ELF symbols we use the UDATA.I member of ASYMBOL to carry ISA annotation. The encoding used is the same as with the ST_OTHER member of the ELF symbol. 
Name: bfd_mips_elf_get_abiflags; Comment: Return the ABI flags associated with ABFD if available. 
Name: ; Comment: Return the opcode for can't unwind. 
Name: _bfd_mips_elf_record_xhash_symbol; Comment: Record a position XLAT_LOC in the xlat translation table, associated with the hash entry H. The entry in the translation table will later be populated with the real symbol dynindx. 
Name: riscv_reloc_type_lookup; Comment: Given a BFD reloc type, return a howto structure. 
Name: riscv_elf_add_sub_reloc; Comment: Special_function of RISCV_ADD and RISCV_SUB relocations. 
Name: check_implicit_always; Comment: Always add the IMPLICIT for the SUBSET. 
Name: check_implicit_for_i; Comment: Add the IMPLICIT only when the version of SUBSET less than 2.1. 
Name: riscv_get_prefix_class; Comment: Get the prefixed name class for the extensions, the class also means the order of the prefixed extensions. 
Name: riscv_known_prefixed_ext; Comment: Check KNOWN_EXTS to see if the EXT is supported. 
Name: riscv_recognized_prefixed_ext; Comment: Check whether the prefixed extension is recognized or not. Return true if recognized, otehrwise return false. 
Name: riscv_init_ext_order; Comment: Init the riscv_ext_order array. 
Name: riscv_compare_subsets; Comment: Similar to the strcmp. It returns an integer less than, equal to, or greater than zero if `subset2` is found, respectively, to be less than, to match, or be greater than `subset1`. The order values, Zero: Preserved keywords. Positive number: Standard extensions. Negative number: Prefixed keywords. 
Name: riscv_lookup_subset; Comment: Find subset in the list. Return TRUE and set `current` to the subset if it is found. Otherwise, return FALSE and set `current` to the place where we should insert the subset. However, return FALSE with the NULL `current` means we should insert the subset at the head of subset list, if needed. 
Name: riscv_add_subset; Comment: Add the extension to the subset list. Search the list first, and then find the right place to add. 
Name: riscv_get_default_ext_version; Comment: Get the default versions from the riscv_supported_*ext tables. 
Name: riscv_parse_add_subset; Comment: Find the default versions for the extension before adding them to the subset list, if their versions are RISCV_UNKNOWN_VERSION. Afterwards, report errors if we can not find their default versions. 
Name: riscv_release_subset_list; Comment: Release subset list. 
Name: riscv_parsing_subset_version; Comment: Parsing extension version. Return Value: Points to the end of version Arguments: `p`: Curent parsing position. `major_version`: Parsed major version. `minor_version`: Parsed minor version. 
Name: riscv_parse_extensions; Comment: Parsing function for both standard and prefixed extensions. Return Value: Points to the end of extensions. Arguments: `rps`: Hooks and status for parsing extensions. `arch`: Full ISA string. `p`: Curent parsing position. 
Name: riscv_parse_add_implicit_subsets; Comment: Add the implicit extensions. 
Name: riscv_parse_check_conflicts; Comment: Check extensions conflicts. 
Name: riscv_set_default_arch; Comment: Set the default subset list according to the default_enable field of riscv_supported_*ext tables. 
Name: riscv_parse_subset; Comment: Function for parsing ISA string. Return Value: Return TRUE on success. Arguments: `rps`: Hooks and status for parsing extensions. `arch`: Full ISA string. 
Name: riscv_estimate_digit; Comment: Return the number of digits for the input. 
Name: riscv_estimate_arch_strlen1; Comment: Auxiliary function to estimate string length of subset list. 
Name: riscv_estimate_arch_strlen; Comment: Estimate the string length of this subset list. 
Name: riscv_arch_str1; Comment: Auxiliary function to convert subset info to string. 
Name: riscv_arch_str; Comment: Convert subset information into string with explicit versions. 
Name: riscv_copy_subset; Comment: Copy the subset in the subset list. 
Name: riscv_copy_subset_list; Comment: Copy the subset list. 
Name: riscv_remove_subset; Comment: Remove the SUBSET from the subset list. 
Name: riscv_update_subset; Comment: Add/Remove an extension to/from the subset list. This is used for the .option rvc or norvc, and .option arch directives. 
Name: riscv_subset_supports; Comment: Check if the FEATURE subset is supported or not in the subset list. Return true if it is supported; Otherwise, return false. 
Name: riscv_multi_subset_supports; Comment: Each instuction is belonged to an instruction class INSN_CLASS_*. Call riscv_subset_supports to make sure if the instuction is valid. 
Name: riscv_multi_subset_supports_ext; Comment: Each instuction is belonged to an instruction class INSN_CLASS_*. Call riscv_subset_supports_ext to determine the missing extension. 
Name: init_insn_reloc; Comment: Utility for performing the standard initial work of an instruction relocation. *PRELOCATION will contain the relocated item. *PINSN will contain the instruction from the input stream. If the result is `bfd_reloc_other' the caller can continue with performing the relocation. Otherwise it must stop and return the value to its caller. 
Name: sparc_elf_notsup_reloc; Comment: For unsupported relocs. 
Name: sparc_elf_wdisp16_reloc; Comment: Handle the WDISP16 reloc. 
Name: sparc_elf_wdisp10_reloc; Comment: Handle the WDISP10 reloc. 
Name: sparc_elf_hix22_reloc; Comment: Handle the HIX22 reloc. 
Name: sparc_elf_lox10_reloc; Comment: Handle the LOX10 reloc. 
Name: link_hash_newfunc; Comment: Create an entry in an SPARC ELF linker hash table. 
Name: elf_sparc_local_htab_hash; Comment: Compute a hash of a local hash entry. We use elf_link_hash_entry for local symbol so that we can handle local STT_GNU_IFUNC symbols as global symbol. We reuse indx and dynstr_index for local symbol hash since they aren't used by global symbols in this backend. 
Name: elf_sparc_local_htab_eq; Comment: Compare local hash entries. 
Name: elf_sparc_get_local_sym_hash; Comment: Find and/or create a hash entry for local symbol. 
Name: _bfd_sparc_elf_link_hash_table_free; Comment: Destroy a SPARC ELF linker hash table. 
Name: _bfd_sparc_elf_link_hash_table_create; Comment: Create a SPARC ELF linker hash table. 
Name: _bfd_sparc_elf_create_dynamic_sections; Comment: Create .plt, .rela.plt, .got, .rela.got, .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: _bfd_sparc_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: _bfd_sparc_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: _bfd_sparc_elf_fixup_symbol; Comment: Remove undefined weak symbol from the dynamic symbol table if it is resolved to 0. 
Name: _bfd_sparc_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: allocate_local_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for local dynamic relocs. 
Name: _bfd_sparc_elf_omit_section_dynsym; Comment: Return true if the dynamic symbol for a given section should be omitted when creating a shared library. 
Name: _bfd_sparc_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: gdopoff; Comment: Return the relocation value for a %gdop relocation. 
Name: gdop_relative_offset_ok; Comment: Return whether H is local and its ADDRESS is within 4G of _GLOBAL_OFFSET_TABLE_ and thus the offset may be calculated by a sethi, xor sequence. 
Name: _bfd_sparc_elf_relocate_section; Comment: Relocate a SPARC ELF section. 
Name: sparc_vxworks_build_plt_entry; Comment: Build a VxWorks PLT entry. PLT_INDEX is the index of the PLT entry and PLT_OFFSET is the byte offset from the start of .plt. GOT_OFFSET is the offset of the associated .got.plt entry from _GLOBAL_OFFSET_TABLE_. 
Name: _bfd_sparc_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: sparc_finish_dyn; Comment: Finish up the dynamic sections. 
Name: sparc_vxworks_finish_exec_plt; Comment: Install the first PLT entry in a VxWorks executable and make sure that .rela.plt.unloaded relocations have the correct symbol indexes. 
Name: sparc_vxworks_finish_shared_plt; Comment: Install the first PLT entry in a VxWorks shared object. 
Name: finish_local_dynamic_symbol; Comment: Finish up local dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: pie_finish_undefweak_symbol; Comment: Finish up undefined weak symbol handling in PIE. Fill its PLT entry here since undefined weak symbol may not be dynamic and may not be called for _bfd_sparc_elf_finish_dynamic_symbol. 
Name: _bfd_sparc_elf_object_p; Comment: Set the right machine number for a SPARC ELF file. 
Name: _bfd_sparc_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: _bfd_sparc_elf_merge_private_bfd_data; Comment: Merge backend specific data from an object file to the output object file when linking. 
Name: link_hash_newfunc; Comment: Create an entry in an TILEGX ELF linker hash table. 
Name: tilegx_elf_link_hash_table_create; Comment: Create a TILEGX ELF linker hash table. 
Name: tilegx_elf_create_got_section; Comment: Create the .got section. 
Name: tilegx_elf_create_dynamic_sections; Comment: Create .plt, .rela.plt, .got, .got.plt, .rela.got, .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts to them in our hash table. 
Name: tilegx_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: tilegx_elf_check_relocs; Comment: Look through the relocs for a section during the first phase, and allocate space in the global offset table or procedure linkage table. 
Name: tilegx_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: tilegx_elf_omit_section_dynsym; Comment: Return true if the dynamic symbol for a given section should be omitted when creating a shared library. 
Name: tpoff; Comment: Return the relocation value for @tpoff relocation. 
Name: tilegx_copy_bits; Comment: Copy SIZE bits from FROM to TO at address ADDR. 
Name: tilegx_replace_insn; Comment: Replace the MASK bits in ADDR with those in INSN, for the next TILEGX_BUNDLE_SIZE_IN_BYTES bytes. 
Name: tilegx_elf_relocate_section; Comment: Relocate an TILEGX ELF section. The RELOCATE_SECTION function is called by the new ELF backend linker to handle the relocations for a section. The relocs are always passed as Rela structures. This function is responsible for adjusting the section contents as necessary, and (if generating a relocatable output file) adjusting the reloc addend as necessary. This function does not have to worry about setting the reloc address or the reloc symbol index. LOCAL_SYMS is a pointer to the swapped in local symbols. LOCAL_SECTIONS is an array giving the section in the input file corresponding to the st_shndx field of each local symbol. The global hash table entry for the global symbols can be found via elf_sym_hashes (input_bfd). When generating relocatable output, this function must handle STB_LOCAL/STT_SECTION symbols specially. The output symbol is going to be the section symbol corresponding to the output section, which means that the addend must be adjusted accordingly. 
Name: tilegx_elf_finish_dynamic_symbol; Comment: Finish up dynamic symbol handling. We set the contents of various dynamic sections here. 
Name: tilegx_finish_dyn; Comment: Finish up the dynamic sections. 
Name: tilegx_elf_plt_sym_val; Comment: Return address for Ith PLT stub in section PLT, for relocation REL or (bfd_vma) -1 if it should not be included. 
Name: _bfd_x86_elf_set_tls_module_base; Comment: _TLS_MODULE_BASE_ needs to be treated especially when linking executables. Rather than setting it to the beginning of the TLS section, we have to set it to the end. This function may be called multiple times, it is idempotent. 
Name: _bfd_x86_elf_dtpoff_base; Comment: Return the base VMA address which should be subtracted from real addresses when resolving @dtpoff relocation. This is PT_TLS segment p_vaddr. 
Name: elf_x86_allocate_dynrelocs; Comment: Allocate space in .plt, .got and associated reloc sections for dynamic relocs. 
Name: elf_x86_allocate_local_dynreloc; Comment: Allocate space in .plt, .got and associated reloc sections for local dynamic relocs. 
Name: _bfd_elf_x86_get_local_sym_hash; Comment: Find and/or create a hash entry for local symbol. 
Name: _bfd_x86_elf_link_hash_newfunc; Comment: Create an entry in a x86 ELF linker hash table. NB: THIS MUST BE IN SYNC WITH _bfd_elf_link_hash_newfunc. 
Name: _bfd_x86_elf_local_htab_hash; Comment: Compute a hash of a local hash entry. We use elf_link_hash_entry for local symbol so that we can handle local STT_GNU_IFUNC symbols as global symbol. We reuse indx and dynstr_index for local symbol hash since they aren't used by global symbols in this backend. 
Name: _bfd_x86_elf_local_htab_eq; Comment: Compare local hash entries. 
Name: elf_x86_link_hash_table_free; Comment: Destroy an x86 ELF linker hash table. 
Name: _bfd_x86_elf_link_hash_table_create; Comment: Create an x86 ELF linker hash table. 
Name: _bfd_x86_elf_compare_relocs; Comment: Sort relocs into address order. 
Name: elf_x86_linker_defined; Comment: Mark symbol, NAME, as locally defined by linker if it is referenced and not defined in a relocatable object file. 
Name: elf_x86_hide_linker_defined; Comment: Hide a linker-defined symbol, NAME, with hidden visibility. 
Name: _bfd_x86_elf_check_relocs; Comment: Look through the relocs for a section before allocation to make the dynamic reloc section. 
Name: ; Comment: Add an entry to the relative reloc record. 
Name: _bfd_x86_elf_link_relax_section; Comment: After input sections have been mapped to output sections and addresses of output sections are set initiallly, scan input relocations with the same logic in relocate_section to determine if a relative relocation should be generated. Save the relative relocation candidate information for sizing the DT_RELR section later after all symbols addresses can be determined. 
Name: ; Comment: Add an entry to the 64-bit DT_RELR bitmap. 
Name: ; Comment: Add an entry to the 32-bit DT_RELR bitmap. 
Name: ; Comment: Size or finish relative relocations to determine the run-time addresses for DT_RELR bitmap computation later. OUTREL is set to NULL in the sizing phase and non-NULL in the finising phase where the regular relative relocations will be written out. 
Name: ; Comment: Compute the DT_RELR section size. Set NEED_PLAYOUT to true if the DT_RELR section size has been increased. 
Name: elf_x86_write_dl_relr_bitmap; Comment: Write out the DT_RELR section. 
Name: elf_x86_relative_reloc_compare; Comment: Sort relative relocations by address. 
Name: _bfd_x86_elf_create_sframe_plt; Comment: Create SFrame unwind info for the plt entries in the .plt section of type PLT_SEC_TYPE. 
Name: _bfd_x86_elf_write_sframe_plt; Comment: Put contents of the .sframe section corresponding to the specified PLT_SEC_TYPE. 
Name: _bfd_x86_elf_size_dynamic_sections; Comment: Set the sizes of the dynamic sections. 
Name: _bfd_x86_elf_finish_dynamic_sections; Comment: Finish up the x86 dynamic sections. 
Name: _bfd_x86_elf_copy_indirect_symbol; Comment: Copy the extra info we tack onto an elf_link_hash_entry. 
Name: _bfd_x86_elf_fixup_symbol; Comment: Remove undefined weak symbol from the dynamic symbol table if it is resolved to 0. 
Name: _bfd_x86_elf_link_fixup_ifunc_symbol; Comment: Change the STT_GNU_IFUNC symbol defined in position-dependent executable into the normal function symbol and set its address to its PLT entry, which should be resolved by R_*_IRELATIVE at run-time. 
Name: ; Comment: Report relative relocation. 
Name: _bfd_x86_elf_hash_symbol; Comment: Return TRUE if symbol should be hashed in the `.gnu.hash' section. 
Name: _bfd_x86_elf_adjust_dynamic_symbol; Comment: Adjust a symbol defined by a dynamic object and referenced by a regular object. The current definition is in some section of the dynamic object, but we're not including those sections. We have to change the definition to something the rest of the link can understand. 
Name: _bfd_x86_elf_link_symbol_references_local; Comment: Return TRUE if a symbol is referenced locally. It is similar to SYMBOL_REFERENCES_LOCAL, but it also checks version script. It works in check_relocs. 
Name: _bfd_x86_elf_gc_mark_hook; Comment: Return the section that should be marked against GC for a given relocation._
Name: _bfd_x86_elf_parse_gnu_properties; Comment: Parse x86 GNU properties. 
Name: _bfd_x86_elf_merge_gnu_properties; Comment: Merge x86 GNU property BPROP with APROP. If APROP isn't NULL, return TRUE if APROP is updated. Otherwise, return TRUE if BPROP should be merged with ABFD. 
Name: ; Comment: Set up x86 GNU properties. Return the first relocatable ELF input with GNU properties if found. Otherwise, return NULL. 
Name: ; Comment: Fix up x86 GNU properties. 
Name: bfd_check_format; Comment: None DESCRIPTION _Verify if the file attached to the BFD @var{abfd} is compatible_with the format @var{format} (i.e., one of <<bfd_object>>,_<<bfd_archive>> or <<bfd_core>>). _If the BFD has been set to a specific target before the _call, only the named target and format combination is _checked. If the target has not been set, or has been set to _<<default>>, then all the known target backends is _interrogated to determine a match. If the default target _matches, it is used. If not, exactly one target must recognize _the file, or an error results. _The function returns <<TRUE>> on success, otherwise <<FALSE>> _with one of the following error codes: _o <<bfd_error_invalid_operation>> - _if <<format>> is not one of <<bfd_object>>, <<bfd_archive>> or _<<bfd_core>>. _o <<bfd_error_system_call>> - _if an error occured during a read - even some file mismatches _can cause bfd_error_system_calls. _o <<file_not_recognised>> - _none of the backends recognised the file format. _o <<bfd_error_file_ambiguously_recognized>> - _more than one backend recognised the file format. 
Name: bfd_preserve_save; Comment: When testing an object for compatibility with a particular target back-end, the back-end object_p function needs to set up certain fields in the bfd on successfully recognizing the object. This typically happens in a piecemeal fashion, with failures possible at many points. On failure, the bfd is supposed to be restored to its initial state, which is virtually impossible. However, restoring a subset of the bfd state works in practice. This function stores the subset. 
Name: bfd_reinit; Comment: Clear out a subset of BFD state. 
Name: bfd_preserve_restore; Comment: Restores bfd state saved by bfd_preserve_save. 
Name: bfd_preserve_finish; Comment: Called when the bfd state saved by bfd_preserve_save is no longer needed. 
Name: bfd_check_format_matches; Comment: None DESCRIPTION _Like <<bfd_check_format>>, except when it returns FALSE with _<<bfd_errno>> set to <<bfd_error_file_ambiguously_recognized>>. In that _case, if @var{matching} is not NULL, it will be filled in with_a NULL-terminated list of the names of the formats that matched, _allocated with <<malloc>>. _Then the user may choose a format and try again. _When done with the list that @var{matching} points to, the caller_should free it. 
Name: bfd_set_format; Comment: None DESCRIPTION _This function sets the file format of the BFD @var{abfd} to the_format @var{format}. If the target set in the BFD does not_support the format requested, the format is invalid, or the BFD _is not open for writing, then an error occurs. 
Name: bfd_format_string; Comment: None DESCRIPTION _Return a pointer to a const string _<<invalid>>, <<object>>, <<archive>>, <<core>>, or <<unknown>>, _depending upon the value of @var{format}.
Name: higher_prime_number; Comment: The following function returns a nearest prime number which is greater than N, and near a power of two. Copied from libiberty. Returns zero for ridiculously large N to signify an error. 
Name: bfd_hash_table_init_n; Comment: Create a new hash table, given a number of entries. 
Name: bfd_hash_table_init; Comment: Create a new hash table with the default number of entries. 
Name: bfd_hash_table_free; Comment: Free a hash table. 
Name: bfd_hash_lookup; Comment: Look up a string in a hash table. 
Name: bfd_hash_insert; Comment: Insert an entry in a hash table. 
Name: bfd_hash_rename; Comment: Rename an entry in a hash table. 
Name: bfd_hash_replace; Comment: Replace an entry in a hash table. 
Name: bfd_hash_allocate; Comment: Allocate space in a hash table. 
Name: bfd_hash_newfunc; Comment: Base method for creating a new hash table entry. 
Name: bfd_hash_traverse; Comment: Traverse a hash table. 
Name: strtab_hash_newfunc; Comment: Routine to create an entry in a strtab. 
Name: _bfd_stringtab_init; Comment: Create a new strtab. 
Name: _bfd_xcoff_stringtab_init; Comment: Create a new strtab in which the strings are output in the format used in the XCOFF .debug section: a two byte length precedes each string. 
Name: _bfd_stringtab_free; Comment: Free a strtab. 
Name: _bfd_stringtab_add; Comment: Get the index of a string in a strtab, adding it if it is not already present. If HASH is FALSE, we don't really use the hash table, and we don't eliminate duplicate strings. If COPY is true then store a copy of STR if creating a new entry. 
Name: _bfd_stringtab_size; Comment: Get the number of bytes in a strtab. 
Name: _bfd_stringtab_emit; Comment: Write out a strtab. ABFD must already be at the right location in the file. 
Name: thread_section_p; Comment: Return true if the given core file section corresponds to a thread, based on its name. 
Name: hpux_core_core_file_p; Comment: this function builds a bfd target if the file is a corefile. It returns null or 0 if it finds out thaat it is not a core file. The way it checks this is by looking for allowed 'type' field values. These are declared in sys/core.h There are some values which are 'reserved for future use'. In particular CORE_NONE is actually defined as 0. This may be a catch-all for cases in which the core file is generated by some non-hpux application. (I am just guessing here!) 
Name: i386aout_write_object_contents; Comment: Set the machine type correctly. 
Name: NAME; Comment: Output standard relocation information to a file in target byte order. 
Name: NAME; Comment: Output extended relocation information to a file in target byte order. 
Name: NAME; Comment: undefined symbol 
Name: NAME; Comment: Reloc hackery 
Name: NAME; Comment: Write out a relocation section into an object file. 
Name: NAME; Comment: This is stupid. This function should be a boolean predicate 
Name: ihex_init; Comment: Initialize by filling in the hex conversion array. 
Name: ihex_mkobject; Comment: Create an ihex object. 
Name: ihex_bad_byte; Comment: Report a problem in an Intel Hex file. 
Name: ihex_scan; Comment: Read an Intel hex file and turn it into sections. We create a new section for each contiguous set of bytes. 
Name: ihex_object_p; Comment: Try to recognize an Intel Hex file. 
Name: ihex_read_section; Comment: Read the contents of a section in an Intel Hex file. 
Name: ihex_get_section_contents; Comment: Get the contents of a section in an Intel Hex file. 
Name: ihex_set_section_contents; Comment: Set the contents of a section in an Intel Hex file. 
Name: ihex_write_record; Comment: Write a record out to an Intel Hex file. 
Name: ihex_write_object_contents; Comment: Write out an Intel Hex file. 
Name: ihex_set_arch_mach; Comment: Set the architecture for the output file. The architecture is irrelevant, so we ignore errors about unknown architectures. 
Name: ihex_sizeof_headers; Comment: Get the size of the headers, for the linker. 
Name: bfd_init; Comment: Actually, there is currently nothing for this function to do. However, someday it may be needed, so keep it around. 
Name: do_sections; Comment: 32-bit version. 
Name: _bfd_bool_bfd_false; Comment: SECTION _Implementation details SUBSECTION _Internal functions DESCRIPTION _These routines are used within BFD. _They are not intended for export, but are documented here for _completeness. 
Name: _bfd_bool_bfd_false_error; Comment: A routine which is used in target vectors for unsupported operations. 
Name: _bfd_bool_bfd_true; Comment: A routine which is used in target vectors for supported operations which do not actually do anything. 
Name: _bfd_ptr_bfd_null_error; Comment: A routine which is used in target vectors for unsupported operations which return a pointer value. 
Name: _bfd_long_bfd_n1_error; Comment: A routine which is used in target vectors for unsupported operations which return -1 on error. 
Name: _bfd_nocore_core_file_failing_command; Comment: Routine to handle core_file_failing_command entry point for targets without core file support. 
Name: _bfd_nocore_core_file_failing_signal; Comment: Routine to handle core_file_failing_signal entry point for targets without core file support. 
Name: _bfd_nocore_core_file_pid; Comment: Routine to handle the core_file_pid entry point for targets without core file support. 
Name: bfd_malloc; Comment: None DESCRIPTION _Returns a pointer to an allocated block of memory that is at least _SIZE bytes long. If SIZE is 0 then it will be treated as if it were _1. If SIZE is too big then NULL will be returned. _ _Returns NULL upon error and sets bfd_error. 
Name: bfd_realloc; Comment: None DESCRIPTION _Returns a pointer to an allocated block of memory that is at least _SIZE bytes long. If SIZE is 0 then it will be treated as if it were _1. If SIZE is too big then NULL will be returned. _ _If MEM is not NULL then it must point to an allocated block of memory. _If this block is large enough then MEM may be used as the return _value for this function, but this is not guaranteed. _If MEM is not returned then the first N bytes in the returned block _will be identical to the first N bytes in region pointed to by MEM, _where N is the lessor of SIZE and the length of the region of memory _currently addressed by MEM. _Returns NULL upon error and sets bfd_error. 
Name: bfd_realloc_or_free; Comment: None DESCRIPTION _Returns a pointer to an allocated block of memory that is at least _SIZE bytes long. If SIZE is 0 then no memory will be allocated, _MEM will be freed, and NULL will be returned. This will not cause _bfd_error to be set. _If SIZE is too big then NULL will be returned and bfd_error will be _set. _ _If MEM is not NULL then it must point to an allocated block of memory. _If this block is large enough then MEM may be used as the return _value for this function, but this is not guaranteed. _If MEM is not returned then the first N bytes in the returned block _will be identical to the first N bytes in region pointed to by MEM, _where N is the lessor of SIZE and the length of the region of memory _currently addressed by MEM. 
Name: bfd_zmalloc; Comment: None DESCRIPTION _Returns a pointer to an allocated block of memory that is at least _SIZE bytes long. If SIZE is 0 then it will be treated as if it were _1. If SIZE is too big then NULL will be returned. _ _Returns NULL upon error and sets bfd_error. _If NULL is not returned then the allocated block of memory will _have been cleared. 
Name: bfd_write_bigendian_4byte_int; Comment: None DESCRIPTION _Write a 4 byte integer @var{i} to the output BFD @var{abfd}, in big_endian order regardless of what else is going on. This is useful in _archives. 
Name: _bfd_generic_get_section_contents; Comment: Default implementation 
Name: _bfd_generic_set_section_contents; Comment: This generic function can only be used in implementations where creating NEW sections is disallowed. It is useful in patching existing sections in read-write files, though. See other set_section_contents functions to see why it doesn't work for new sections. 
Name: bfd_log2; Comment: None DESCRIPTION _Return the log base 2 of the value supplied, rounded up. E.g., an _@var{x} of 1025 returns 11. A @var{x} of 0 returns 0.
Name: _bfd_warn_deprecated; Comment: Give a warning at runtime if someone compiles code which calls old routines. 
Name: _bfd_read_unsigned_leb128; Comment: Helper function for reading uleb128 encoded data. 
Name: _bfd_safe_read_leb128; Comment: Read in a LEB128 encoded value from ABFD starting at *PTR. If SIGN is true, return a signed LEB128 value. *PTR is incremented by the number of bytes read. No bytes will be read at address END or beyond. 
Name: _bfd_read_signed_leb128; Comment: Helper function for reading sleb128 encoded data. 
Name: _bfd_write_unsigned_leb128; Comment: Write VAL in uleb128 format to P. END indicates the last byte of allocated space for the uleb128 value to fit in. Return a pointer to the byte following the last byte that was written, or NULL if the uleb128 value does not fit in the allocated space between P and END. 
Name: _bfd_link_hash_newfunc; Comment: Routine to create an entry in the link hash table. 
Name: ; Comment: Initialize a link hash table. The BFD argument is the one responsible for creating this table. 
Name: bfd_link_hash_lookup; Comment: Look up a symbol in a link hash table. If follow is TRUE, we follow bfd_link_hash_indirect and bfd_link_hash_warning links to the real symbol. .{ Return TRUE if the symbol described by a linker hash entry H. is going to be absolute. Linker-script defined symbols can be . converted from absolute to section-relative ones late in the . link. Use this macro to correctly determine whether the symbol . will actually end up absolute in output. }.#define bfd_is_abs_symbol(H) . (((H)->type == bfd_link_hash_defined . || (H)->type == bfd_link_hash_defweak) . && bfd_is_abs_section ((H)->u.def.section) . && !(H)->rel_from_abs). 
Name: bfd_wrapped_link_hash_lookup; Comment: Look up a symbol in the main linker hash table if the symbol might be wrapped. This should only be used for references to an undefined symbol, not for definitions of a symbol. 
Name: unwrap_hash_lookup; Comment: If H is a wrapped symbol, ie. the symbol name starts with "__wrap_" and the remainder is found in wrap_hash, return the real symbol. 
Name: ; Comment: Traverse a generic link hash table. Differs from bfd_hash_traverse in the treatment of warning symbols. When warning symbols are created they replace the real symbol, so you don't get to see the real symbol in a bfd_hash_traverse. This traversal calls func with the real symbol. 
Name: bfd_link_add_undef; Comment: Add a symbol to the linker hash table undefs list. 
Name: bfd_link_repair_undef_list; Comment: The undefs list was designed so that in normal use we don't need to remove entries. However, if symbols on the list are changed from bfd_link_hash_undefined to either bfd_link_hash_undefweak or bfd_link_hash_new for some reason, then they must be removed from the list. Failure to do so might result in the linker attempting to add the symbol to the list again at a later stage. 
Name: _bfd_generic_link_hash_newfunc; Comment: Routine to create an entry in a generic link hash table. 
Name: _bfd_generic_link_hash_table_create; Comment: Create a generic link hash table. 
Name: bfd_generic_link_read_symbols; Comment: Grab the symbols for an object file when doing a generic link. We store the symbols in the outsymbols field. We need to keep them around for the entire link to ensure that we only read them once. If we read them multiple times, we might wind up with relocs and the hash table pointing to different instances of the symbol structure. 
Name: _bfd_generic_link_just_syms; Comment: Indicate that we are only retrieving symbol values from this section. We want the symbols to act as though the values in the file are absolute. 
Name: _bfd_generic_copy_link_hash_symbol_type; Comment: Copy the symbol type and other attributes for a linker script assignment from HSRC to HDEST. The default implementation does nothing. 
Name: _bfd_generic_link_add_symbols; Comment: Generic function to add symbols from an object file to the global hash table. 
Name: generic_link_add_object_symbols; Comment: Add symbols from an object file to the global hash table. 
Name: ; Comment: Generic function to add symbols from an archive file to the global hash file. This function presumes that the archive symbol table has already been read in (this is normally done by the bfd_check_format entry point). It looks through the archive symbol table for symbols that are undefined or common in the linker global symbol hash table. When one is found, the CHECKFN argument is used to see if an object file should be included. This allows targets to customize common symbol behaviour. CHECKFN should set *PNEEDED to TRUE if the object file should be included, and must also call the bfd_link_info add_archive_element callback function and handle adding the symbols to the global hash table. CHECKFN must notice if the callback indicates a substitute BFD, and arrange to add those symbols instead if it does so. CHECKFN should only return FALSE if some sort of error occurs. 
Name: generic_link_check_archive_element; Comment: See if we should include an archive element. 
Name: generic_link_add_symbol_list; Comment: Add the symbols from an object file to the global hash table. ABFD is the object file. INFO is the linker information. SYMBOL_COUNT is the number of symbols. SYMBOLS is the list of symbols. 
Name: hash_entry_bfd; Comment: Return the BFD in which a hash entry has been defined, if known. 
Name: _bfd_generic_link_add_one_symbol; Comment: Add a symbol to the global hash table. ABFD is the BFD the symbol comes from. NAME is the name of the symbol. FLAGS is the BSF_ bits associated with the symbol. SECTION is the section in which the symbol is defined; this may be bfd_und_section_ptr or bfd_com_section_ptr. VALUE is the value of the symbol, relative to the section. STRING is used for either an indirect symbol, in which case it is the name of the symbol to indirect to, or a warning symbol, in which case it is the warning string. COPY is TRUE if NAME or STRING must be copied into locally allocated memory if they need to be saved. COLLECT is TRUE if we should automatically collect gcc constructor or destructor names as collect2 does. HASHP, if not NULL, is a place to store the created hash table entry; if HASHP is not NULL, the caller has already looked up the hash table entry, and stored it in *HASHP. 
Name: _bfd_generic_final_link; Comment: Generic final link routine. 
Name: generic_add_output_symbol; Comment: Add an output symbol to the output BFD. 
Name: _bfd_generic_link_output_symbols; Comment: Handle the symbols for an input BFD. 
Name: set_symbol_from_hash; Comment: Set the section and value of a generic BFD symbol based on a linker hash table entry. 
Name: _bfd_generic_link_write_global_symbol; Comment: Write out a global symbol, if it hasn't already been written out. This is called for each symbol in the hash table. 
Name: _bfd_generic_reloc_link_order; Comment: Create a relocation. 
Name: bfd_new_link_order; Comment: Allocate a new link_order for a section. 
Name: _bfd_default_link_order; Comment: Default link order processing routine. Note that we can not handle the reloc_link_order types here, since they depend upon the details of how the particular backends generates relocs. 
Name: default_data_link_order; Comment: Default routine to handle a bfd_data_link_order. 
Name: default_indirect_link_order; Comment: Default routine to handle a bfd_indirect_link_order. 
Name: _bfd_count_link_order_relocs; Comment: A little routine to count the number of relocs in a link_order list. 
Name: _bfd_generic_link_split_section; Comment: None DESCRIPTION _Return nonzero if @var{sec} should be split during a_reloceatable or final link. .#define bfd_link_split_section(abfd, sec) ._BFD_SEND (abfd, _bfd_link_split_section, (abfd, sec)). 
Name: ; Comment: Support routines for the hash table used by section_already_linked, initialize the table, traverse, lookup, fill in an entry and remove the table. 
Name: _bfd_handle_already_linked; Comment: Report warnings as appropriate for duplicate section SEC. Return FALSE if we decide to keep SEC after all. 
Name: _bfd_generic_section_already_linked; Comment: This is used on non-ELF inputs. 
Name: _bfd_nearby_section; Comment: Choose a neighbouring section to S in OBFD that will be output, or the absolute section if ADDR is out of bounds of the neighbours. 
Name: fix_syms; Comment: Convert symbols in excluded output sections to use a kept section. 
Name: bfd_generic_define_common_symbol; Comment: None DESCRIPTION _Convert common symbol @var{h} into a defined symbol._Return TRUE on success and FALSE on failure. .#define bfd_define_common_symbol(output_bfd, info, h) ._BFD_SEND (output_bfd, _bfd_define_common_symbol, (output_bfd, info, h)). 
Name: _bfd_generic_link_hide_symbol; Comment: None DESCRIPTION _Hide symbol @var{h}._This is an internal function. It should not be called from _outside the BFD library. .#define bfd_link_hide_symbol(output_bfd, info, h) ._BFD_SEND (output_bfd, _bfd_link_hide_symbol, (output_bfd, info, h)). 
Name: bfd_generic_define_start_stop; Comment: None DESCRIPTION _Define a __start, __stop, .startof. or .sizeof. symbol. _Return the symbol or NULL if no such undefined symbol exists. .#define bfd_define_start_stop(output_bfd, info, symbol, sec) ._BFD_SEND (output_bfd, _bfd_define_start_stop, (info, symbol, sec)). 
Name: bfd_find_version_for_sym; Comment: None DESCRIPTION _Search an elf version script tree for symbol versioning _info and export don't-export status for a given symbol. _Return non-NULL on success and NULL on failure; also sets_the output @samp{hide} boolean parameter. 
Name: bfd_hide_sym_by_version; Comment: None DESCRIPTION _Search an elf version script tree for symbol versioning _info for a given symbol. Return TRUE if the symbol is hidden. 
Name: bfd_link_check_relocs; Comment: None DESCRIPTION _Checks the relocs in ABFD for validity. _Does not execute the relocs. _Return TRUE if everything is OK, FALSE otherwise. _This is the external entry point to this code. 
Name: _bfd_generic_link_check_relocs; Comment: None DESCRIPTION _Stub function for targets that do not implement reloc checking. _Return TRUE. _This is an internal function. It should not be called from _outside the BFD library. 
Name: _bfd_generic_verify_endian_match; Comment: None DESCRIPTION _Can be used from / for bfd_merge_private_bfd_data to check that _endianness matches between input and output file. Returns _TRUE for a match, otherwise returns FALSE and emits an error. 
Name: _bfd_link_keep_memory; Comment: Return false if linker should avoid caching relocation infomation and symbol tables of input files in memory. 
Name: make_bfd_asection; Comment: Handle Lynx core dump file. 
Name: bfd_mach_o_section_data_for_mach_sect; Comment: Fetch the translation from a Mach-O section designation (segment, section) as a bfd short name, if one exists. Otherwise return NULL. Allow the segment and section names to be unterminated 16 byte arrays. 
Name: bfd_mach_o_section_data_for_bfd_name; Comment: If the bfd_name for this section is a 'canonical' form for which we know the Mach-O data, return the segment name and the data for the Mach-O equivalent. Otherwise return NULL. 
Name: bfd_mach_o_convert_section_name_to_bfd; Comment: Convert Mach-O section name to BFD. Try to use standard/canonical names, for which we have tables including default flag settings - which are returned. Otherwise forge a new name in the form "<segmentname>.<sectionname>" this will be prefixed with LC_SEGMENT. if the segment name does not begin with an underscore. SEGNAME and SECTNAME are 16 byte arrays (they do not need to be NUL- terminated if the name length is exactly 16 bytes - but must be if the name length is less than 16 characters). 
Name: bfd_mach_o_convert_section_name_to_mach_o; Comment: Convert a bfd section name to a Mach-O segment + section name. If the name is a canonical one for which we have a Darwin match return the translation table - which contains defaults for flags, type, attribute and default alignment data. Otherwise, expand the bfd_name (assumed to be in the form "[LC_SEGMENT.]<segmentname>.<sectionname>") and return NULL. 
Name: bfd_mach_o_section_get_entry_size; Comment: Return the size of an entry for section SEC. Must be called only for symbol pointer section and symbol stubs sections. 
Name: bfd_mach_o_section_get_nbr_indirect; Comment: Return the number of indirect symbols for a section. Must be called only for symbol pointer section and symbol stubs sections. 
Name: bfd_mach_o_append_command; Comment: Append command CMD to ABFD. Note that header.ncmds is not updated. 
Name: bfd_mach_o_bfd_copy_private_symbol_data; Comment: Copy any private info we understand from the input symbol to the output symbol. 
Name: bfd_mach_o_bfd_copy_private_section_data; Comment: Copy any private info we understand from the input section to the output section. 
Name: bfd_mach_o_bfd_copy_private_header_data; Comment: Copy any private info we understand from the input bfd to the output bfd. 
Name: bfd_mach_o_bfd_set_private_flags; Comment: This allows us to set up to 32 bits of flags (unless we invent some fiendish scheme to subdivide). For now, we'll just set the file flags without error checking - just overwrite. 
Name: bfd_mach_o_count_symbols; Comment: Count the total number of symbols. 
Name: bfd_mach_o_get_synthetic_symtab; Comment: Create synthetic symbols for indirect symbols. 
Name: bfd_mach_o_pad4; Comment: Write n NUL bytes to ABFD so that LEN + n is a multiple of 4. Return the number of bytes written or -1 in case of error. 
Name: bfd_mach_o_pad_command; Comment: Likewise, but for a command. 
Name: bfd_mach_o_swap_in_non_scattered_reloc; Comment: In addition to the need to byte-swap the symbol number, the bit positions of the fields in the relocation information vary per target endian-ness. 
Name: bfd_mach_o_canonicalize_non_scattered_reloc; Comment: Set syms_ptr_ptr and addend of RES. 
Name: bfd_mach_o_pre_canonicalize_one_reloc; Comment: Do most of the work for canonicalize_relocs on RAW: create internal representation RELOC and set most fields of RES using symbol table SYMS. Each target still has to set the howto of RES and possibly adjust other fields. Previously the Mach-O hook point was simply swap_in, but some targets (like arm64) don't follow the generic rules (symnum is a value for the non-scattered relocation ADDEND). 
Name: bfd_mach_o_swap_out_non_scattered_reloc; Comment: In addition to the need to byte-swap the symbol number, the bit positions of the fields in the relocation information vary per target endian-ness. 
Name: bfd_mach_o_count_indirect_symbols; Comment: Count the number of indirect symbols in the image. Requires that the sections are in their final order. 
Name: bfd_mach_o_build_dysymtab; Comment: Create the dysymtab. 
Name: bfd_mach_o_write_dysymtab; Comment: Write a dysymtab command. TODO: Possibly coalesce writes of smaller objects. 
Name: bfd_mach_o_mangle_symbols; Comment: Process the symbols. This should be OK for single-module files - but it is not likely to work for multi-module shared libraries. (a) If the application has not filled in the relevant mach-o fields, make an estimate. (b) Order them, like this: _( i) local. __(unsorted) _( ii) external defined __(by name) _(iii) external undefined/common __(by name) _( iv) common __(by name) 
Name: bfd_mach_o_mangle_sections; Comment: We build a flat table of sections, which can be re-ordered if necessary. Fill in the section number and other mach-o-specific data. 
Name: bfd_mach_o_set_section_flags_from_bfd; Comment: Create section Mach-O flags from BFD flags. 
Name: bfd_mach_o_layout_commands; Comment: Layout the commands: set commands size and offset, set ncmds and sizeofcmds fields in header. 
Name: bfd_mach_o_init_segment; Comment: Subroutine of bfd_mach_o_build_commands: set type, name and nsects of a segment. 
Name: bfd_mach_o_build_commands; Comment: Build Mach-O load commands (currently assuming an MH_OBJECT file). TODO: Other file formats, rebuilding symtab/dysymtab commands for strip and copy functionality. 
Name: bfd_mach_o_set_section_contents; Comment: Set the contents of a section. 
Name: bfd_mach_o_make_empty_symbol; Comment: Make an empty symbol. This is required only because bfd_make_section_anyway wants to create a symbol for the section. 
Name: bfd_mach_o_get_base_address; Comment: Return the base address of ABFD, ie the address at which the image is mapped. The possible initial pagezero is ignored. 
Name: overlap_previous; Comment: Check for overlapping archive elements. Note that we can't allow multiple elements at the same offset even if one is empty, because bfd_mach_o_fat_openr_next_archived_file assume distinct offsets. 
Name: bfd_mach_o_fat_member_init; Comment: Set the filename for a fat binary member ABFD, whose bfd architecture is ARCH_TYPE/ARCH_SUBTYPE and corresponding entry in header is ENTRY. Set arelt_data and origin fields too. 
Name: bfd_mach_o_fat_stat_arch_elt; Comment: Analogous to stat call. 
Name: bfd_mach_o_fat_extract; Comment: If ABFD format is FORMAT and architecture is ARCH, return it. If ABFD is a fat image containing a member that corresponds to FORMAT and ARCH, returns it. In other case, returns NULL. This function allows transparent uses of fat images. 
Name: bfd_mach_o_get_section_type_from_name; Comment: Get the section type from NAME. Return 256 if NAME is unknown. 
Name: bfd_mach_o_get_section_attribute_from_name; Comment: Get the section attribute from NAME. Return -1 if NAME is unknown. 
Name: bfd_mach_o_dsym_for_uuid_p; Comment: Return true if ABFD is a dSYM file and its UUID matches UUID_CMD. 
Name: bfd_mach_o_find_dsym; Comment: Find a BFD in DSYM_FILENAME which matches ARCH and UUID_CMD. The caller is responsible for closing the returned BFD object and its my_archive if the returned BFD is in a fat dSYM. 
Name: bfd_mach_o_follow_dsym; Comment: Return a BFD created from a dSYM file for ABFD. The caller is responsible for closing the returned BFD object, its filename, and its my_archive if the returned BFD is in a fat dSYM. 
Name: sec_merge_hash_newfunc; Comment: Routine to create an entry in a section merge hashtab. 
Name: sec_merge_hash_lookup; Comment: Look up an entry in a section merge hash table. 
Name: sec_merge_init; Comment: Create a new hash table. 
Name: sec_merge_add; Comment: Get the index of an entity in a hash table, adding it if it is not already present. 
Name: _bfd_add_merge_section; Comment: Register a SEC_MERGE section as a candidate for merging. This function is called for all non-dynamic SEC_MERGE input sections. 
Name: record_section; Comment: Record one section into the hash table. 
Name: strrevcmp; Comment: qsort comparison function. Won't ever return zero as all entries differ, so there is no issue with qsort stability here. 
Name: strrevcmp_align; Comment: Like strrevcmp, but for the case where all strings have the same alignment > entsize. 
Name: merge_strings; Comment: This is a helper function for _bfd_merge_sections. It attempts to merge strings matching suffixes of longer strings. 
Name: _bfd_merge_sections; Comment: This function is called once after all SEC_MERGE sections are registered with _bfd_merge_section. 
Name: _bfd_write_merged_section; Comment: Write out the merged section. 
Name: _bfd_merged_section_offset; Comment: Adjust an address in the SEC_MERGE section. Given OFFSET within *PSEC, this returns the new offset in the adjusted SEC_MERGE section and writes the new section back into *PSEC. 
Name: _bfd_merge_sections_free; Comment: Tidy up when done. 
Name: mmo_make_section; Comment: Get section SECNAME or create one if it doesn't exist. When creating one, new memory for the name is allocated. 
Name: mmo_init; Comment: Nothing to do, but keep as a placeholder if we need it. Note that state that might differ between bfd:s must not be initialized here, nor must it be static. Add it to tdata information instead. 
Name: mmo_object_p; Comment: Check whether an existing file is an mmo file. 
Name: mmo_mkobject; Comment: Set up the mmo tdata information. 
Name: mmo_ignore_symbol_consistency; Comment: Find out whether we should omit symbol consistency checks for this bfd and cache the value. This function must only be called when all section contents is known. However, calculating symbol consistency at the time the private BFD data is initialized is too late for some uses. 
Name: mmo_find_sec_w_addr; Comment: Helper functions for mmo_decide_section, used through bfd_map_over_sections. 
Name: mmo_decide_section; Comment: Find a section that corresponds to a VMA. Automatically create .text or .data and set current section to it, depending on what vma. If we can't deduce a section, make one up as ".MMIX.sec.N", where N is an increasing number. 
Name: mmo_write_loc_chunk; Comment: Write a lop_loc and some contents. A caller needs to call mmo_flush_chunk after calling this function. The location is only output if different than *LAST_VMAP, which is updated after this call. 
Name: mmo_get_generic_spec_data_section; Comment: Make a .MMIX.spec_data.N section. 
Name: mmo_get_spec_section; Comment: Make a special section for SPEC_DATA_NUMBER. If it is the one we use ourselves, parse some of its data to get at the section name. 
Name: mmo_get_byte; Comment: Read a byte, but read from file in multiples of 32-bit words. 
Name: mmo_write_byte; Comment: Write a byte, in multiples of 32-bit words. 
Name: mmo_create_symbol; Comment: Create a symbol. 
Name: mmo_get_symbols; Comment: Read in symbols. 
Name: mmo_get_loc; Comment: Get the location of memory area [VMA..VMA + SIZE - 1], which we think is in section SEC. Adjust and reallocate zero-initialized contents. If there's new contents, allocate to the next multiple of MMO_SEC_CONTENTS_CHUNK_SIZE. 
Name: mmo_map_set_sizes; Comment: Set sizes once we've read in all sections. 
Name: mmo_scan; Comment: Read the mmo file and turn it into sections. 
Name: mmo_new_section_hook; Comment: A hook to set up object file dependent section information. For mmo, we point out the shape of allocated section contents. 
Name: mmo_get_section_contents; Comment: We already have section contents loaded for sections that have contents. 
Name: mmo_get_symtab_upper_bound; Comment: Return the amount of memory needed to read the symbol table. 
Name: mmo_sort_mmo_symbols; Comment: Sort mmo symbols by serial number. 
Name: mmo_canonicalize_symtab; Comment: Translate the symbol table. 
Name: mmo_get_symbol_info; Comment: Get information about a symbol. 
Name: mmo_sizeof_headers; Comment: We can't map a file directly into executable code, so the size of header information is irrelevant. 
Name: mmo_internal_write_header; Comment: Write the (section-neutral) file preamble. 
Name: mmo_internal_write_post; Comment: Write the LOP_POST record, with global register initializations. Z is the Z field of the LOP_POST, corresponding to 255 - number of registers at DATA. The Z = 255 field is filled in with the start-address. 
Name: mmo_sec_flags_from_bfd_flags; Comment: Translate to and from BFD flags. This is to make sure that we don't get bitten by BFD flag number changes. 
Name: mmo_has_leading_or_trailing_zero_tetra_p; Comment: Return TRUE iff the leading or trailing tetrabyte in SEC is defined and is 0. 
Name: mmo_internal_write_section; Comment: Write a section. 
Name: mmo_write_section_description; Comment: Write the description of a section, extended-mmo-style. 
Name: mmo_set_section_contents; Comment: We save up all data before output. 
Name: mmo_internal_add_3_sym; Comment: Add a symbol to a trie-tree. 
Name: mmo_internal_3_length; Comment: Find out the length of the serialized version of a trie in bytes. 
Name: mmo_beb128_out; Comment: Helper function for outputting the serial number of a symbol, output as a variant of leb128 (see dwarf2 documentation) which could be called beb128. Using a helper function and recursion simplifies debugging. 
Name: mmo_internal_3_dump; Comment: Serialize a trie. 
Name: mmo_write_symbols_and_terminator; Comment: Write symbols in mmo format. Also write the lop_end terminator. 
Name: mmo_write_section_unless_reg_contents; Comment: Write section unless it is the register contents section. For that, we instead store the section in the supplied pointer. This function is used through bfd_map_over_sections. 
Name: mmo_write_object_contents; Comment: Do the actual output of a file. Assumes mmo_set_section_contents is already called. 
Name: netbsd_core_file_p; Comment: Handle NetBSD-style core dump file. 
Name: _bfd_new_bfd; Comment: Return a new BFD. All BFD's are allocated through this routine. 
Name: _bfd_new_bfd_contained_in; Comment: Allocate a new BFD as a member of archive OBFD. 
Name: _bfd_delete_bfd; Comment: Delete a BFD. 
Name: _bfd_free_cached_info; Comment: Free objalloc memory. 
Name: bfd_fopen; Comment: None DESCRIPTION _Open the file @var{filename} with the target @var{target}._Return a pointer to the created BFD. If @var{fd} is not -1,_then <<fdopen>> is used to open the file; otherwise, <<fopen>>_is used. @var{mode} is passed directly to <<fopen>> or_<<fdopen>>. _Calls <<bfd_find_target>>, so @var{target} is interpreted as by_that function. _The new BFD is marked as cacheable iff @var{fd} is -1. _If <<NULL>> is returned then an error has occured. Possible errors _are <<bfd_error_no_memory>>, <<bfd_error_invalid_target>> or _<<system_call>> error. _On error, @var{fd} is always closed. _A copy of the @var{filename} argument is stored in the newly created_BFD. It can be accessed via the bfd_get_filename() macro. 
Name: bfd_openr; Comment: None DESCRIPTION _Open the file @var{filename} (using <<fopen>>) with the target_@var{target}. Return a pointer to the created BFD. _Calls <<bfd_find_target>>, so @var{target} is interpreted as by_that function. _If <<NULL>> is returned then an error has occured. Possible errors _are <<bfd_error_no_memory>>, <<bfd_error_invalid_target>> or _<<system_call>> error. _A copy of the @var{filename} argument is stored in the newly created_BFD. It can be accessed via the bfd_get_filename() macro. 
Name: bfd_fdopenr; Comment: None DESCRIPTION _<<bfd_fdopenr>> is to <<bfd_fopenr>> much like <<fdopen>> is to _<<fopen>>. It opens a BFD on a file already described by the _@var{fd} supplied. _When the file is later <<bfd_close>>d, the file descriptor will _be closed. If the caller desires that this file descriptor be _cached by BFD (opened as needed, closed as needed to free _descriptors for other opens), with the supplied @var{fd} used as_an initial file descriptor (but subject to closure at any time), _call bfd_set_cacheable(bfd, 1) on the returned BFD. The default _is to assume no caching; the file descriptor will remain open_until <<bfd_close>>, and will not be affected by BFD operations _on other files. _Possible errors are <<bfd_error_no_memory>>, _<<bfd_error_invalid_target>> and <<bfd_error_system_call>>. _On error, @var{fd} is closed. _A copy of the @var{filename} argument is stored in the newly created_BFD. It can be accessed via the bfd_get_filename() macro. 
Name: bfd_fdopenw; Comment: None DESCRIPTION _<<bfd_fdopenw>> is exactly like <<bfd_fdopenr>> with the exception that _the resulting BFD is suitable for output. 
Name: bfd_openstreamr; Comment: None DESCRIPTION _Open a BFD for read access on an existing stdio stream. When _the BFD is passed to <<bfd_close>>, the stream will be closed. _A copy of the @var{filename} argument is stored in the newly created_BFD. It can be accessed via the bfd_get_filename() macro. 
Name: bfd_openw; Comment: None DESCRIPTION _Create a BFD, associated with file @var{filename}, using the_file format @var{target}, and return a pointer to it. _Possible errors are <<bfd_error_system_call>>, <<bfd_error_no_memory>>, _<<bfd_error_invalid_target>>. _A copy of the @var{filename} argument is stored in the newly created_BFD. It can be accessed via the bfd_get_filename() macro. 
Name: bfd_close; Comment: None DESCRIPTION _Close a BFD. If the BFD was open for writing, then pending _operations are completed and the file written out and closed. _If the created file is executable, then <<chmod>> is called _to mark it as such. _All memory attached to the BFD is released. _The file descriptor associated with the BFD is closed (even _if it was passed in to BFD by <<bfd_fdopenr>>). RETURNS _<<TRUE>> is returned if all is ok, otherwise <<FALSE>>. 
Name: bfd_close_all_done; Comment: None DESCRIPTION _Close a BFD. Differs from <<bfd_close>> since it does not _complete any pending operations. This routine would be used _if the application had just used BFD for swapping and didn't _want to use any of the writing code. _If the created file is executable, then <<chmod>> is called _to mark it as such. _All memory attached to the BFD is released. RETURNS _<<TRUE>> is returned if all is ok, otherwise <<FALSE>>. 
Name: bfd_create; Comment: None DESCRIPTION _Create a new BFD in the manner of <<bfd_openw>>, but without _opening a file. The new BFD takes the target from the target _used by @var{templ}. The format is always set to <<bfd_object>>. _A copy of the @var{filename} argument is stored in the newly created_BFD. It can be accessed via the bfd_get_filename() macro. 
Name: bfd_make_writable; Comment: None DESCRIPTION _Takes a BFD as created by <<bfd_create>> and converts it _into one like as returned by <<bfd_openw>>. It does this _by converting the BFD to BFD_IN_MEMORY. It's assumed that _you will call <<bfd_make_readable>> on this bfd later. RETURNS _<<TRUE>> is returned if all is ok, otherwise <<FALSE>>. 
Name: bfd_make_readable; Comment: None DESCRIPTION _Takes a BFD as created by <<bfd_create>> and _<<bfd_make_writable>> and converts it into one like as _returned by <<bfd_openr>>. It does this by writing the _contents out to the memory buffer, then reversing the _direction. RETURNS _<<TRUE>> is returned if all is ok, otherwise <<FALSE>>. 
Name: bfd_alloc; Comment: None DESCRIPTION _Allocate a block of @var{wanted} bytes of memory attached to_<<abfd>> and return a pointer to it. 
Name: bfd_zalloc; Comment: None DESCRIPTION _Allocate a block of @var{wanted} bytes of zeroed memory_attached to <<abfd>> and return a pointer to it. 
Name: bfd_release; Comment: Free a block allocated for a BFD. Note: Also frees all more recently allocated blocks! 
Name: bfd_calc_gnu_debuglink_crc32; Comment: None DESCRIPTION _Computes a CRC value as used in the .gnu_debuglink section. _Advances the previously computed @var{crc} value by computing_and adding in the crc32 for @var{len} bytes of @var{buf}. RETURNS _Return the updated CRC32 value. 
Name: bfd_get_debug_link_info_1; Comment: None DESCRIPTION _Extracts the filename and CRC32 value for any separate debug _information file associated with @var{abfd}. _The @var{crc32_out} parameter is an untyped pointer because_this routine is used as a @code{get_func_type} function, but it_is expected to be an unsigned long pointer. RETURNS _The filename of the associated debug information file, or NULL _if there is no such file. If the filename was found then the _contents of @var{crc32_out} are updated to hold the corresponding_CRC32 value for the file. _The returned filename is allocated with @code{malloc}; freeing_it is the responsibility of the caller. 
Name: bfd_get_debug_link_info; Comment: None DESCRIPTION _Extracts the filename and CRC32 value for any separate debug _information file associated with @var{abfd}. RETURNS _The filename of the associated debug information file, or NULL _if there is no such file. If the filename was found then the _contents of @var{crc32_out} are updated to hold the corresponding_CRC32 value for the file. _The returned filename is allocated with @code{malloc}; freeing_it is the responsibility of the caller. 
Name: bfd_get_alt_debug_link_info; Comment: None DESCRIPTION _Fetch the filename and BuildID value for any alternate debuginfo _associated with @var{abfd}. Return NULL if no such info found,_otherwise return filename and update @var{buildid_len} and_@var{buildid_out}. The returned filename and build_id are_allocated with @code{malloc}; freeing them is the responsibility_of the caller. 
Name: separate_debug_file_exists; Comment: None DESCRIPTION _Checks to see if @var{name} is a file and if its contents_match @var{crc32}, which is a pointer to an @code{unsigned_long} containing a CRC32. _The @var{crc32_p} parameter is an untyped pointer because_this routine is used as a @code{check_func_type} function.
Name: separate_alt_debug_file_exists; Comment: None DESCRIPTION _Checks to see if @var{name} is a file.
Name: bfd_follow_gnu_debuglink; Comment: None DESCRIPTION _Takes a BFD and searches it for a .gnu_debuglink section. If this _section is found, it examines the section for the name and checksum _of a '.debug' file containing auxiliary debugging information. It _then searches the filesystem for this .debug file in some standard _locations, including the directory tree rooted at @var{dir}, and if_found returns the full filename. _If @var{dir} is NULL, the search will take place starting at_the current directory. RETURNS _<<NULL>> on any errors or failure to locate the .debug file, _otherwise a pointer to a heap-allocated string containing the _filename. The caller is responsible for freeing this string. 
Name: get_alt_debug_link_info_shim; Comment: Helper for bfd_follow_gnu_debugaltlink. It just returns the name of the separate debug file. 
Name: bfd_follow_gnu_debugaltlink; Comment: None DESCRIPTION _Takes a BFD and searches it for a .gnu_debugaltlink section. If this _section is found, it examines the section for the name of a file _containing auxiliary debugging information. It then searches the _filesystem for this file in a set of standard locations, including _the directory tree rooted at @var{dir}, and if found returns the_full filename. _If @var{dir} is NULL, the search will take place starting at_the current directory. RETURNS _<<NULL>> on any errors or failure to locate the debug file, _otherwise a pointer to a heap-allocated string containing the _filename. The caller is responsible for freeing this string. 
Name: bfd_create_gnu_debuglink_section; Comment: None DESCRIPTION _Takes a @var{BFD} and adds a .gnu_debuglink section to it. The_section is sized to be big enough to contain a link to the specified _@var{filename}. RETURNS _A pointer to the new section is returned if all is ok. Otherwise _<<NULL>> is returned and bfd_error is set. 
Name: bfd_fill_in_gnu_debuglink_section; Comment: None DESCRIPTION _Takes a @var{BFD} and containing a .gnu_debuglink section @var{SECT}_and fills in the contents of the section to contain a link to the _specified @var{filename}. The filename should be relative to the_current directory. RETURNS _<<TRUE>> is returned if all is ok. Otherwise <<FALSE>> is returned _and bfd_error is set. 
Name: get_build_id; Comment: None DESCRIPTION _Finds the build-id associated with @var{abfd}. If the build-id is_extracted from the note section then a build-id structure is built _for it, using memory allocated to @var{abfd}, and this is then_attached to the @var{abfd}. RETURNS _Returns a pointer to the build-id structure if a build-id could be _found. If no build-id is found NULL is returned and error code is _set. 
Name: get_build_id_name; Comment: INTERNAL_FUNCTION _get_build_id_name SYNOPSIS _char get_build_id_name (bfd abfd, void build_id_out_p) DESCRIPTION _Searches @var{abfd} for a build-id, and then constructs a pathname_from it. The path is computed as .build-idNNNN+NN.debug where _NNNN+NN is the build-id value as a hexadecimal string. RETURNS _Returns the constructed filename or NULL upon error. _It is the caller's responsibility to free the memory used to hold the _filename. _If a filename is returned then the @var{build_id_out_p}_parameter (which points to a @code{struct bfd_build_id}_pointer) is set to a pointer to the build_id structure. 
Name: check_build_id_file; Comment: None DESCRIPTION _Checks to see if @var{name} is a readable file and if its build-id_matches @var{buildid}. RETURNS _Returns TRUE if the file exists, is readable, and contains a _build-id which matches the build-id pointed at by _@var{build_id_p} (which is really a @code{struct bfd_build_id }).
Name: bfd_follow_build_id_debuglink; Comment: None DESCRIPTION _Takes @var{abfd} and searches it for a .note.gnu.build-id section._If this section is found, it extracts the value of the NT_GNU_BUILD_ID _note, which should be a hexadecimal value @var{NNNN+NN} (for_32+ hex digits). It then searches the filesystem for a file named _@var{.build-idNNNN+NN.debug} in a set of standard locations,_including the directory tree rooted at @var{dir}. The filename_of the first matching file to be found is returned. A matching _file should contain a .note.gnu.build-id section with the same _@var{NNNN+NN} note as @var{abfd}, although this check is currently_not implemented. _If @var{dir} is NULL, the search will take place starting at_the current directory. RETURNS _<<NULL>> on any errors or failure to locate the debug file, _otherwise a pointer to a heap-allocated string containing the _filename. The caller is responsible for freeing this string. 
Name: bfd_set_filename; Comment: None DESCRIPTION _Set the filename of @var{abfd}, copying the FILENAME parameter to_bfd_alloc'd memory owned by @var{abfd}. Returns a pointer the_newly allocated name, or NULL if the allocation failed. 
Name: is_stab; Comment: Disambiguate conflicts between normal symbol types and .stab symbol types (undefined externals N_UNDF+N_EXT vs. global variables N_GYSM and external bss symbols N_BSS+N_EXT vs. function names N_FUN) with a hack to look for the ':' in the global variable or function name string. 
Name: MY; Comment: Write an object file. Section contents have already been written. We write the file header, symbols, and relocation. 
Name: NAME; Comment: Swap the information in an internal exec header structure "execp" into the buffer "bytes" ready for writing to disk. 
Name: NAME; Comment: Make all the section for an a.out file. 
Name: NAME; Comment: Some a.out variant thinks that the file open in ABFD checking is an a.out file. Do some more checking, and set up for access if it really is. Call back to the calling environment's "finish up" function just before returning, to handle any last-minute setup. 
Name: NAME; Comment: Initialize ABFD for use with a.out files. 
Name: NAME; Comment: Keep track of machine architecture and machine type for a.out's. Return the <<machine_type>> for a particular architecture and machine, or <<M_UNKNOWN>> if that exact architecture and machine can't be represented in a.out format. If the architecture is understood, machine type 0 (default) is always understood. 
Name: NAME; Comment: Set the architecture and the machine of the ABFD to the values ARCH and MACHINE. Verify that @ABFD's format can support the architecture required. 
Name: NAME; Comment: Called by the BFD in response to a bfd_make_section request. 
Name: aout_get_external_symbols; Comment: Read the external symbols from an a.out file. 
Name: translate_from_native_sym_flags; Comment: Translate an a.out symbol into a BFD symbol. The desc, other, type and symbol->value fields of CACHE_PTR will be set from the a.out nlist structure. This function is responsible for setting symbol->flags and symbol->section, and adjusting symbol->value. 
Name: translate_to_native_sym_flags; Comment: Set the fields of SYM_POINTER according to CACHE_PTR. 
Name: NAME; Comment: Native-level interface to symbols. 
Name: NAME; Comment: Translate a set of external symbols into internal symbols. 
Name: NAME; Comment: We read the symbols into a buffer, which is discarded when this function exits. We read the strings into a buffer large enough to hold them all plus all the cached symbol entries. 
Name: emit_stringtab; Comment: Write out a strtab. ABFD is already at the right location in the file. 
Name: pdp11_aout_swap_reloc_out; Comment: Output extended relocation information to a file in target byte order. 
Name: pdp11_aout_swap_reloc_in; Comment: Undefined symbol. 
Name: NAME; Comment: Read and swap the relocs for a section. 
Name: NAME; Comment: This is stupid. This function should be a boolean predicate. 
Name: NAME; Comment: Read minisymbols. For minisymbols, we use the unmodified a.out symbols. The minisymbol_to_symbol function translates these into BFD asymbol structures. 
Name: NAME; Comment: Convert a minisymbol to a BFD asymbol. A minisymbol is just an unmodified a.out symbol. The SYM argument is a structure returned by bfd_make_empty_symbol, which we fill in here. 
Name: NAME; Comment: Provided a BFD, a section and an offset into the section, calculate and return the name of the source file and the line nearest to the wanted location. 
Name: NAME; Comment: Free all information we have cached for this BFD. We can always read it again later if we need it. 
Name: NAME; Comment: Routine to create an entry in an a.out link hash table. 
Name: NAME; Comment: Initialize an a.out link hash table. 
Name: NAME; Comment: Create an a.out link hash table. 
Name: aout_link_free_symbols; Comment: Free up the internal symbols read from an a.out file. 
Name: NAME; Comment: Given an a.out BFD, add symbols to the global hash table as appropriate. 
Name: aout_link_add_object_symbols; Comment: Add symbols from an a.out object file. 
Name: aout_link_check_ar_symbols; Comment: Look through the internal symbols to see if this object file should be included in the link. We should include this object file if it defines any symbols which are currently undefined. If this object file defines a common symbol, then we may adjust the size of the known symbol but we do not include the object file in the link (unless there is some other reason to include it). 
Name: aout_link_check_archive_element; Comment: Check a single archive element to see if we need to include it in the link. *PNEEDED is set according to whether this element is needed in the link or not. This is called from _bfd_generic_link_add_archive_symbols. 
Name: aout_link_add_symbols; Comment: Add all symbols from an object file to the hash table. 
Name: aout_link_includes_newfunc; Comment: The function to create a new entry in the header file hash table. 
Name: aout_link_write_other_symbol; Comment: Write out a symbol that was not associated with an a.out input object. 
Name: aout_link_reloc_link_order; Comment: Handle a link order which is supposed to generate a reloc. 
Name: aout_link_input_section; Comment: Link an a.out section into the output file. 
Name: aout_link_input_bfd; Comment: Link an a.out input BFD into the output file. 
Name: NAME; Comment: Do the final link step. This is called on the output BFD. The INFO structure should point to a list of BFDs linked through the link.next field which can be used to find each BFD which takes part in the output. Also, each section in ABFD should point to a list of bfd_link_order structures which list all the input sections for the output section. 
Name: aout_link_write_symbols; Comment: Adjust and write out the symbols for an a.out file. Set the new symbol indices into a symbol_map. 
Name: bfd_getp32; Comment: Write out a symbol that was not associated with an a.out input object. 
Name: pex64_get_runtime_function; Comment: Swap in a runtime function. 
Name: pex64_get_unwind_info; Comment: Swap in unwind info header. 
Name: pex64_xdata_print_uwd_codes; Comment: Display unwind codes. 
Name: pex64_get_section_by_rva; Comment: Check wether section SEC_NAME contains the xdata at address ADDR. 
Name: pex64_dump_xdata; Comment: Dump xdata at for function RF to FILE. The argument XDATA_SECTION designate the bfd section containing the xdata, XDATA is its content, and ENDX the size if known (or NULL). 
Name: sort_xdata_arr; Comment: Helper function to sort xdata. The entries of xdata are sorted to know the size of each entry. 
Name: pex64_bfd_print_pdata_section; Comment: Display unwind tables for x86-64. 
Name: pex64_print_all_pdata_sections; Comment: Helper function for bfd_map_over_section. 
Name: add_data_entry; Comment: A support function for below. 
Name: pe_print_pdata; Comment: This really is architecture dependent. On IA-64, a .pdata entry consists of three dwords containing relative virtual addresses that specify the start and end address of the code range the entry covers and the address of the corresponding unwind info data. On ARM and SH-4, a compressed PDATA structure is used : _IMAGE_CE_RUNTIME_FUNCTION_ENTRY, whereas MIPS is documented to use _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY. See http:msdn2.microsoft.comen-uslibraryms253988(VS.80).aspx . This is the version for uncompressed data. 
Name: _bfd_XX_print_ce_compressed_pdata; Comment: This is the version for "compressed" pdata. 
Name: rsrc_print_resource_entries; Comment: Print the resource entry at DATA, with the text indented by INDENT. Recusively calls rsrc_print_resource_directory to print the contents of directory entries. Returns the address of the end of the data associated with the entry or section_end + 1 upon failure. 
Name: rsrc_print_section; Comment: Display the contents of a .rsrc section. We do not try to reproduce the resources, windres does that. Instead we dump the tables in a human readable format. 
Name: _bfd_XX_print_private_bfd_data_common; Comment: Print out the program headers. 
Name: _bfd_XX_bfd_copy_private_bfd_data_common; Comment: Copy any private info we understand from the input bfd to the output bfd. 
Name: _bfd_XX_bfd_copy_private_section_data; Comment: Copy private section data. 
Name: u16_mbtouc; Comment: Return the length (number of units) of the first character in S, putting its 'ucs4_t' representation in *PUC. 
Name: rsrc_cmp; Comment: Perform a comparison of two entries. 
Name: rsrc_merge_string_entries; Comment: *sigh* Windows resource strings are special. Only the top 28-bits of their ID is stored in the NAME entry. The bottom four bits are used as an index into unicode string table that makes up the data of the leaf. So identical type-name-lang string resources may not actually be identical at all. This function is called when we have detected two string resources with match top-28-bit IDs. We have to scan the string tables inside the leaves and discover if there are any real collisions. If there are then we report them and return FALSE. Otherwise we copy any strings from B into A and then return TRUE. 
Name: rsrc_sort_entries; Comment: Sort the entries in given part of the directory. We use an old fashioned bubble sort because we are dealing with lists and we want to handle matches specially. 
Name: rsrc_attach_chain; Comment: Attach B's chain onto A. 
Name: rsrc_process_section; Comment: Check the .rsrc section. If it contains multiple concatenated resources then we must merge them properly. Otherwise Windows will ignore all but the first set. 
Name: _bfd_XXi_final_link_postscript; Comment: Handle the .idata section and other things that need symbol table access. 
Name: dlopen; Comment: Dummy value. 
Name: register_claim_file; Comment: Register a claim-file handler. 
Name: bfd_plugin_close_file_descriptor; Comment: Close the plugin file descriptor FD. If ABFD isn't NULL, it is an archive member. 
Name: bfd_plugin_specified_p; Comment: Return TRUE if a plugin library is used. 
Name: bfd_link_plugin_object_p; Comment: Return TRUE if ABFD can be claimed by linker LTO plugin. 
Name: bfd_plugin_target_p; Comment: Return TRUE if TARGET is a pointer to plugin_vec. 
Name: register_ld_plugin_object_p; Comment: Register OBJECT_P to be used by bfd_plugin_object_p. 
Name: bfd_plugin_bfd_copy_private_bfd_data; Comment: Copy any private info we understand from the input bfd to the output bfd. 
Name: bfd_plugin_bfd_copy_private_section_data; Comment: Copy any private info we understand from the input section to the output section. 
Name: bfd_plugin_bfd_copy_private_symbol_data; Comment: Copy any private info we understand from the input symbol to the output symbol. 
Name: bfd_plugin_make_empty_symbol; Comment: Make an empty symbol. 
Name: ppcboot_mkobject; Comment: Create a ppcboot object. Invoked via bfd_set_format. 
Name: ppcboot_set_arch_mach; Comment: Set the architecture to PowerPC 
Name: ppcboot_object_p; Comment: Any file may be considered to be a ppcboot file, provided the target was not defaulted. That is, it must be explicitly specified as being ppcboot. 
Name: ppcboot_get_section_contents; Comment: Get contents of the only section. 
Name: ppcboot_get_symtab_upper_bound; Comment: Return the amount of memory needed to read the symbol table. 
Name: ppcboot_canonicalize_symtab; Comment: Return the symbol table. 
Name: ppcboot_get_symbol_info; Comment: Get information about a symbol. 
Name: ppcboot_set_section_contents; Comment: Write section contents of a ppcboot file. 
Name: ppcboot_bfd_print_private_bfd_data; Comment: Print out the program headers. 
Name: bfd_check_overflow; Comment: None DESCRIPTION _Perform overflow checking on @var{relocation} which has_@var{bitsize} significant bits and will be shifted right by_@var{rightshift} bits, on a machine with addresses containing_@var{addrsize} significant bits. The result is either of_@code{bfd_reloc_ok} or @code{bfd_reloc_overflow}. 
Name: bfd_reloc_offset_in_range; Comment: HOWTO describes a relocation, at offset OCTET. Return whether the relocation field is within SECTION of ABFD. 
Name: read_reloc; Comment: Read and return the section contents at DATA converted to a host integer (bfd_vma). The number of bytes read is given by the HOWTO. 
Name: write_reloc; Comment: Convert VAL to target format and write to DATA. The number of bytes written is given by the HOWTO. 
Name: apply_reloc; Comment: Apply RELOCATION value to target bytes at DATA, according to HOWTO. 
Name: bfd_perform_relocation; Comment: None DESCRIPTION _If @var{output_bfd} is supplied to this function, the_generated image will be relocatable; the relocations are_copied to the output file after they have been changed to _reflect the new state of the world. There are two ways of _reflecting the results of partial linkage in an output file: _by modifying the output data in place, and by modifying the _relocation record. Some native formats (e.g., basic a.out and _basic coff) have no way of specifying an addend in the _relocation type, so the addend has to go in the output data. _This is no big deal since in these formats the output data _slot will always be big enough for the addend. Complex reloc _types with addends were invented to solve just this problem. _The @var{error_message} argument is set to an error message if_this return @code{bfd_reloc_dangerous}. 
Name: bfd_install_relocation; Comment: None DESCRIPTION _This looks remarkably like <<bfd_perform_relocation>>, except it _does not expect that the section contents have been filled in. _I.e., it's suitable for use when creating, rather than applying _a relocation. _For now, this function should be considered reserved for the _assembler. 
Name: _bfd_final_link_relocate; Comment: This relocation routine is used by some of the backend linkers. They do not construct asymbol or arelent structures, so there is no reason for them to use bfd_perform_relocation. Also, bfd_perform_relocation is so hacked up it is easier to write a new function than to try to deal with it. This routine does a final relocation. Whether it is useful for a relocatable link depends upon how the object format defines relocations. FIXME: This routine ignores any special_function in the HOWTO, since the existing special_function values have been written for bfd_perform_relocation. HOWTO is the reloc howto information. INPUT_BFD is the BFD which the reloc applies to. INPUT_SECTION is the section which the reloc applies to. CONTENTS is the contents of the section. ADDRESS is the address of the reloc within INPUT_SECTION. VALUE is the value of the symbol the reloc refers to. ADDEND is the addend of the reloc. 
Name: _bfd_relocate_contents; Comment: Relocate a given location using a given value and howto. 
Name: _bfd_clear_contents; Comment: Clear a given location using a given howto, by applying a fixed relocation value and discarding any in-place addend. This is used for fixed-up relocations against discarded symbols, to make ignorable debug or unwind information more obvious. 
Name: bfd_reloc_type_lookup; Comment: None DESCRIPTION _Return a pointer to a howto structure which, when _invoked, will perform the relocation @var{code} on data from the_architecture noted. 
Name: bfd_default_reloc_type_lookup; Comment: None DESCRIPTION _Provides a default relocation lookup routine for any architecture. 
Name: bfd_get_reloc_code_name; Comment: None DESCRIPTION _Provides a printable name for the supplied relocation code. _Useful mainly for printing error messages. 
Name: bfd_generic_relax_section; Comment: None DESCRIPTION _Provides default handling for relaxing for back ends which _don't do relaxing. 
Name: bfd_generic_gc_sections; Comment: None DESCRIPTION _Provides default handling for relaxing for back ends which _don't do section gc -- i.e., does nothing. 
Name: bfd_generic_lookup_section_flags; Comment: None DESCRIPTION _Provides default handling for section flags lookup _-- i.e., does nothing. _Returns FALSE if the section should be omitted, otherwise TRUE. 
Name: bfd_generic_merge_sections; Comment: None DESCRIPTION _Provides default handling for SEC_MERGE section merging for back ends _which don't have SEC_MERGE support -- i.e., does nothing. 
Name: bfd_generic_get_relocated_section_contents; Comment: None DESCRIPTION _Provides default handling of relocation effort for back ends _which can't be bothered to do it efficiently. 
Name: _bfd_generic_set_reloc; Comment: None DESCRIPTION _Installs a new set of internal relocations in SECTION. 
Name: _bfd_unrecognized_reloc; Comment: None DESCRIPTION _Reports an unrecognized reloc. _Written as a function in order to reduce code duplication. _Returns FALSE so that it can be called from a return statement. 
Name: read_hdr; Comment: Try to read into CORE the header from the core file associated with ABFD. Return success. 
Name: rs6000coff_core_p; Comment: Decide if a given bfd represents a `core' file or not. There really is no magic number or anything like, in rs6000coff. 
Name: rs6000coff_core_file_matches_executable_p; Comment: Return `TRUE' if given core is from the given executable. 
Name: bfd_section_hash_newfunc; Comment: Initialize an entry in the section hash table. 
Name: _bfd_generic_new_section_hook; Comment: Create a symbol whose only job is to point to this section. This is useful for things like relocs which are relative to the base of a section. 
Name: bfd_section_init; Comment: Initializes a new section. NEWSECT->NAME is already set. 
Name: bfd_section_list_clear; Comment: None DESCRIPTION _Clears the section list, and also resets the section count and _hash table entries. 
Name: bfd_get_section_by_name; Comment: None DESCRIPTION _Return the most recently created section attached to @var{abfd}_named @var{name}. Return NULL if no such section exists.
Name: bfd_get_next_section_by_name; Comment: None DESCRIPTION Given @var{sec} is a section returned by @code{bfd_get_section_by_name}, return the next most recently created section attached to the same BFD with the same name, or if no such section exists in the same BFD and IBFD is non-NULL, the next section with the same name in any input BFD following IBFD. Return NULL on finding no section. 
Name: bfd_get_linker_section; Comment: None DESCRIPTION _Return the linker created section attached to @var{abfd}_named @var{name}. Return NULL if no such section exists.
Name: bfd_get_section_by_name_if; Comment: None _It returns the first section for which @var{func} returns true,_otherwise <<NULL>>. 
Name: bfd_get_unique_section_name; Comment: None DESCRIPTION _Invent a section name that is unique in @var{abfd} by tacking_a dot and a digit suffix onto the original @var{templat}. If_@var{count} is non-NULL, then it specifies the first number_tried as a suffix to generate a unique name. The value _pointed to by @var{count} will be incremented in this case.
Name: bfd_make_section_old_way; Comment: None DESCRIPTION _Create a new empty section called @var{name}_and attach it to the end of the chain of sections for the _BFD @var{abfd}. An attempt to create a section with a name which_is already in use returns its pointer without changing the _section chain. _It has the funny name since this is the way it used to be _before it was rewritten.... _Possible errors are: _o <<bfd_error_invalid_operation>> - _If output has already started for this BFD. _o <<bfd_error_no_memory>> - _If memory allocation fails. 
Name: bfd_make_section_anyway_with_flags; Comment: None DESCRIPTION Create a new empty section called @var{name} and attach it to the end of the chain of sections for @var{abfd}. Create a new section even if there is already a section with that name. Also set the attributes of the new section to the value @var{flags}. Return <<NULL>> and set <<bfd_error>> on error; possible errors are: o <<bfd_error_invalid_operation>> - If output has already started for @var{abfd}. o <<bfd_error_no_memory>> - If memory allocation fails. 
Name: bfd_make_section_anyway; Comment: None DESCRIPTION Create a new empty section called @var{name} and attach it to the end of the chain of sections for @var{abfd}. Create a new section even if there is already a section with that name. Return <<NULL>> and set <<bfd_error>> on error; possible errors are: o <<bfd_error_invalid_operation>> - If output has already started for @var{abfd}. o <<bfd_error_no_memory>> - If memory allocation fails. 
Name: bfd_make_section_with_flags; Comment: None DESCRIPTION Like <<bfd_make_section_anyway>>, but return <<NULL>> (without calling bfd_set_error ()) without changing the section chain if there is already a section named @var{name}. Also set the attributes of the new section to the value @var{flags}. If there is an error, return <<NULL>> and set <<bfd_error>>. 
Name: bfd_make_section; Comment: None DESCRIPTION Like <<bfd_make_section_anyway>>, but return <<NULL>> (without calling bfd_set_error ()) without changing the section chain if there is already a section named @var{name}. If there is an error, return <<NULL>> and set <<bfd_error>>. 
Name: bfd_set_section_flags; Comment: None DESCRIPTION _Set the attributes of the section @var{sec} to the value @var{flags}._Return <<TRUE>> on success, <<FALSE>> on error. Possible error _returns are: _o <<bfd_error_invalid_operation>> - _The section cannot have one or more of the attributes _requested. For example, a .bss section in <<a.out>> may not _have the <<SEC_HAS_CONTENTS>> field set. 
Name: bfd_rename_section; Comment: None DESCRIPTION _Rename section @var{sec} to @var{newname}.
Name: bfd_map_over_sections; Comment: None|_ for (p = abfd->sections; p != NULL; p = p->next)|_ func (abfd, p, ...) 
Name: bfd_sections_find_if; Comment: None _It returns the first section for which @var{operation} returns true. 
Name: bfd_set_section_size; Comment: None DESCRIPTION _Set @var{sec} to the size @var{val}. If the operation is_ok, then <<TRUE>> is returned, else <<FALSE>>. _Possible error returns: _o <<bfd_error_invalid_operation>> - _Writing has started to the BFD, so setting the size is invalid. 
Name: bfd_set_section_contents; Comment: None DESCRIPTION _Sets the contents of the section @var{section} in BFD_@var{abfd} to the data starting in memory at @var{location}._The data is written to the output section starting at offset _@var{offset} for @var{count} octets. _Normally <<TRUE>> is returned, but <<FALSE>> is returned if _there was an error. Possible error returns are: _o <<bfd_error_no_contents>> - _The output section does not have the <<SEC_HAS_CONTENTS>> _attribute, so nothing can be written to it. _o <<bfd_error_bad_value>> - _The section is unable to contain all of the data. _o <<bfd_error_invalid_operation>> - _The BFD is not writeable. _o and some more too. _This routine is front end to the back end function _<<_bfd_set_section_contents>>. 
Name: bfd_get_section_contents; Comment: None DESCRIPTION _Read data from @var{section} in BFD @var{abfd}_into memory starting at @var{location}. The data is read at an_offset of @var{offset} from the start of the input section,_and is read for @var{count} bytes. _If the contents of a constructor with the <<SEC_CONSTRUCTOR>> _flag set are requested or if the section does not have the _<<SEC_HAS_CONTENTS>> flag set, then the @var{location} is filled_with zeroes. If no errors occur, <<TRUE>> is returned, else _<<FALSE>>. 
Name: bfd_malloc_and_get_section; Comment: None DESCRIPTION _Read all data from @var{section} in BFD @var{abfd}_into a buffer, @var{buf}, malloc'd by this function.
Name: bfd_generic_is_group_section; Comment: None DESCRIPTION _Returns TRUE if @var{sec} is a member of a group.
Name: bfd_generic_group_name; Comment: None DESCRIPTION _Returns group name if @var{sec} is a member of a group.
Name: bfd_generic_discard_group; Comment: None DESCRIPTION _Remove all members of @var{group} from the output.
Name: _bfd_section_size_insane; Comment: None DESCRIPTION _Returns true if the given section has a size that indicates _it cannot be read from file. Return false if the size is OK _*or* this function can't say one way or the other. 
Name: simple_save_output_info; Comment: The sections in ABFD may already have output sections and offsets set if we are here during linking. DWARF-2 specifies offsets into debug sections in many cases and bfd_simple_get_relocated_section_contents is called to relocate debug info for a single relocatable object file. So we want offsets relative to that object file's sections, not offsets in the output file. For that reason, reset a debug section->output_offset to zero. If not called during linking then set section->output_section to point back to the input section, because output_section must not be NULL when calling the relocation routines. Save the original output offset and section to restore later. 
Name: bfd_simple_get_relocated_section_contents; Comment: None DESCRIPTION _Returns the relocated contents of section @var{sec}. The symbols in_@var{symbol_table} will be used, or the symbols from @var{abfd} if_@var{symbol_table} is NULL. The output offsets for debug sections will_be temporarily reset to 0. The result will be stored at @var{outbuf}_or allocated with @code{bfd_malloc} if @var{outbuf} is @code{NULL}. _Returns @code{NULL} on a fatal error; ignores errors applying_particular relocations. 
Name: som_initialize_reloc_queue; Comment: Initialize the SOM relocation queue. By definition the queue holds the last four multibyte fixups. 
Name: som_reloc_queue_insert; Comment: Insert a new relocation into the relocation queue. 
Name: som_reloc_queue_fix; Comment: When an entry in the relocation queue is reused, the entry moves to the front of the queue. 
Name: som_reloc_queue_find; Comment: Search for a particular relocation in the relocation queue. 
Name: som_reloc_skip; Comment: Emit the proper R_NO_RELOCATION fixups to map the next SKIP bytes without any relocation. Update the size of the subspace relocation stream via SUBSPACE_RELOC_SIZE_P; also return the current pointer into the relocation stream. 
Name: som_reloc_addend; Comment: Emit the proper R_DATA_OVERRIDE fixups to handle a nonzero addend from a BFD relocation. Update the size of the subspace relocation stream via SUBSPACE_RELOC_SIZE_P; also return the current pointer into the relocation stream. 
Name: som_reloc_call; Comment: Handle a single function call relocation. 
Name: exact_log2; Comment: Return the logarithm of X, base 2, considering X unsigned, if X is a power of 2. Otherwise, returns -1. 
Name: hppa_som_gen_reloc_type; Comment: Given a generic HPPA relocation type, the instruction format, and a field selector, return one or more appropriate SOM relocations. 
Name: som_bfd_reloc_type_lookup; Comment: Return the address of the correct entry in the PA SOM relocation howto table. 
Name: som_object_setup; Comment: Perform some initialization for an object. Save results of this initialization in the BFD. 
Name: setup_sections; Comment: Convert all of the space and subspace info into BFD sections. Each space contains a number of subspaces, which in turn describe the mapping between regions of the exec file, and the address space that the program runs in. BFD sections which correspond to spaces will overlap the sections for the associated subspaces. 
Name: som_object_p; Comment: Read in a SOM object and make it into a BFD. 
Name: som_mkobject; Comment: Create a SOM object. 
Name: som_prep_headers; Comment: Initialize some information in the file header. This routine makes not attempt at doing the right thing for a full executable; it is only meant to handle relocatable objects. 
Name: som_is_space; Comment: Return TRUE if the given section is a SOM space, FALSE otherwise. 
Name: som_is_subspace; Comment: Return TRUE if the given section is a SOM subspace, FALSE otherwise. 
Name: som_is_container; Comment: Return TRUE if the given space contains the given subspace. It is safe to assume space really is a space, and subspace really is a subspace. 
Name: som_count_spaces; Comment: Count and return the number of spaces attached to the given BFD. 
Name: som_count_subspaces; Comment: Count the number of subspaces attached to the given BFD. 
Name: compare_syms; Comment: Return -1, 0, 1 indicating the relative ordering of sym1 and sym2. We desire symbols to be ordered starting with the symbol with the highest relocation count down to the symbol with the lowest relocation count. Doing so compacts the relocation stream. 
Name: compare_subspaces; Comment: Return -1, 0, 1 indicating the relative ordering of subspace1 and subspace. 
Name: som_prep_for_fixups; Comment: Perform various work in preparation for emitting the fixup stream. 
Name: som_write_space_strings; Comment: Write out the space/subspace string table. 
Name: som_write_symbol_strings; Comment: Write out the symbol string table. 
Name: som_begin_writing; Comment: Compute variable information to be placed in the SOM headers, space/subspace dictionaries, relocation streams, etc. Begin writing parts of the object file. 
Name: som_finish_writing; Comment: Finally, scribble out the various headers to the disk. 
Name: som_compute_checksum; Comment: Compute and return the checksum for a SOM file header. 
Name: som_build_and_write_symbol_table; Comment: Build and write, in one big chunk, the entire symbol table for this BFD. 
Name: som_write_object_contents; Comment: Write an object in SOM format. 
Name: som_slurp_string_table; Comment: Read and save the string table associated with the given BFD. 
Name: som_get_symtab_upper_bound; Comment: Return the amount of data (in bytes) required to hold the symbol table for this object. 
Name: ; Comment: Convert from a SOM subspace index to a BFD section. 
Name: som_slurp_symbol_table; Comment: Read and save the symbol table associated with the given BFD. 
Name: som_canonicalize_symtab; Comment: Canonicalize a SOM symbol table. Return the number of entries in the symbol table. 
Name: som_make_empty_symbol; Comment: Make a SOM symbol. There is nothing special to do here. 
Name: som_print_symbol; Comment: Print symbol information. 
Name: som_set_reloc_info; Comment: Count or process variable-length SOM fixup records. To avoid code duplication we use this code both to compute the number of relocations requested by a stream, and to internalize the stream. When computing the number of relocations requested by a stream the variables rptr, section, and symbols have no meaning. Return the number of relocations requested by the fixup stream. When not just counting This needs at least two or three more passes to get it cleaned up. 
Name: som_slurp_reloc_table; Comment: Read in the relocs (aka fixups in SOM terms) for a section. som_get_reloc_upper_bound calls this routine with JUST_COUNT set to TRUE to indicate it only needs a count of the number of actual relocations. 
Name: som_get_reloc_upper_bound; Comment: Return the number of bytes required to store the relocation information associated with the given section. 
Name: som_canonicalize_reloc; Comment: Convert relocations from SOM (external) form into BFD internal form. Return the number of relocations. 
Name: som_new_section_hook; Comment: A hook to set up object file dependent section information. 
Name: som_bfd_copy_private_symbol_data; Comment: Copy any private info we understand from the input symbol to the output symbol. 
Name: som_bfd_copy_private_section_data; Comment: Copy any private info we understand from the input section to the output section. 
Name: som_bfd_copy_private_bfd_data; Comment: Copy any private info we understand from the input bfd to the output bfd. 
Name: som_bfd_print_private_bfd_data; Comment: Display the SOM header. 
Name: bfd_som_set_section_attributes; Comment: Set backend info for sections which can not be described in the BFD data structures. 
Name: bfd_som_set_subsection_attributes; Comment: Set backend info for subsections which can not be described in the BFD data structures. 
Name: bfd_som_set_symbol_type; Comment: Set the full SOM symbol type. SOM needs far more symbol information than any other object file format I'm aware of. It is mandatory to be able to know if a symbol is an entry point, millicode, data, code, absolute, storage request, or procedure label. If you get the symbol type wrong your program will not link. 
Name: bfd_som_attach_aux_hdr; Comment: Attach an auxiliary header to the BFD backend so that it may be written into the object file. 
Name: bfd_som_attach_compilation_unit; Comment: Attach a compilation unit header to the BFD backend so that it may be written into the object file. 
Name: som_section_type; Comment: Return the single-character symbol type corresponding to SOM section S, or '?' for an unknown SOM section. 
Name: som_get_symbol_info; Comment: Return information about SOM symbol SYMBOL in RET. 
Name: som_bfd_count_ar_symbols; Comment: Count the number of symbols in the archive symbol table. Necessary so that we can allocate space for all the carsyms at once. 
Name: som_bfd_fill_in_ar_symbols; Comment: Fill in the canonical archive symbols (SYMS) from the archive described by ABFD and LST_HEADER. 
Name: som_slurp_armap; Comment: Read in the LST from the archive. 
Name: som_bfd_prep_for_ar_write; Comment: Begin preparing to write a SOM library symbol table. As part of the prep work we need to determine the number of symbols and the size of the associated string section. 
Name: som_bfd_ar_symbol_hash; Comment: Hash a symbol name based on the hashing algorithm presented in the SOM ABI. 
Name: som_bfd_ar_write_symbol_stuff; Comment: Do the bulk of the work required to write the SOM library symbol table. 
Name: som_write_armap; Comment: Write out the LST for the archive. You'll never believe this is really how armaps are handled in SOM... 
Name: som_bfd_free_cached_info; Comment: Free all information we have cached for this BFD. We can always read it again later if we need it. 
Name: som_bfd_link_split_section; Comment: Linker support functions. 
Name: srec_init; Comment: Initialize by filling in the hex conversion array. 
Name: srec_mkobject; Comment: Set up the S-record tdata information. 
Name: srec_get_byte; Comment: Read a byte from an S record file. Set *ERRORPTR if an error occurred. Return EOF on error or end of file. 
Name: srec_bad_byte; Comment: Report a problem in an S record file. FIXME: This probably should not call fprintf, but we really do need some mechanism for printing error messages. 
Name: srec_new_symbol; Comment: Add a new symbol found in an S-record file. 
Name: srec_scan; Comment: Read the S record file and turn it into sections. We create a new section for each contiguous set of bytes. 
Name: srec_object_p; Comment: Check whether an existing file is an S-record file. 
Name: symbolsrec_object_p; Comment: Check whether an existing file is an S-record file with symbols. 
Name: srec_read_section; Comment: Read in the contents of a section in an S-record file. 
Name: srec_get_section_contents; Comment: Get the contents of a section in an S-record file. 
Name: srec_set_arch_mach; Comment: Set the architecture. We accept an unknown architecture here. 
Name: srec_set_section_contents; Comment: We have to save up all the Srecords for a splurge before output. 
Name: srec_write_record; Comment: Write a record of type, of the supplied number of bytes. The supplied bytes and length don't have a checksum. That's worked out here. 
Name: srec_get_symtab_upper_bound; Comment: Return the amount of memory needed to read the symbol table. 
Name: srec_canonicalize_symtab; Comment: Return the symbol table. 
Name: stab_link_includes_newfunc; Comment: The function to create a new entry in the header file hash table. 
Name: _bfd_link_section_stabs; Comment: This function is called for each input file from the add_symbols pass of the linker. 
Name: _bfd_discard_section_stabs; Comment: This function is called for each input file before the stab section is relocated. It discards stab entries for discarded functions and variables. The function returns TRUE iff any entries have been deleted. 
Name: _bfd_write_section_stabs; Comment: Write out the stab section. This is called with the relocated contents. 
Name: _bfd_write_stab_strings; Comment: Write out the .stabstr section. 
Name: _bfd_stab_section_offset; Comment: Adjust an address in the .stab section. Given OFFSET within STABSEC, this returns the new offset in the adjusted stab section, or -1 if the address refers to a stab which has been removed. 
Name: bfd_is_local_label; Comment: None DESCRIPTION _Return TRUE if the given symbol @var{sym} in the BFD @var{abfd} is_a compiler generated local label, else return FALSE. 
Name: bfd_set_symtab; Comment: None DESCRIPTION _Arrange that when the output BFD @var{abfd} is closed,_the table @var{location} of @var{count} pointers to symbols_will be written. 
Name: bfd_print_symbol_vandf; Comment: None DESCRIPTION _Print the value and flags of the @var{symbol} supplied to the_stream @var{file}.
Name: _bfd_generic_make_empty_symbol; Comment: None DESCRIPTION _Create a new <<asymbol>> structure for the BFD @var{abfd}_and return a pointer to it. Used by core file routines, _binary back-end and anywhere else where no private info _is needed. 
Name: coff_section_type; Comment: Return the single-character symbol type corresponding to section S, or '?' for an unknown COFF section. Check for leading strings which match, followed by a number, '.', or '$' so .idata5 matches the .idata entry. 
Name: decode_section_type; Comment: Return the single-character symbol type corresponding to section SECTION, or '?' for an unknown section. This uses section flags to identify sections. FIXME These types are unhandled: e, i, p. If we handled these also, we could perhaps obsolete coff_section_type. 
Name: _bfd_generic_read_minisymbols; Comment: The generic version of the function which returns mini symbols. This is used when the backend does not provide a more efficient version. It just uses BFD asymbol structures as mini symbols. 
Name: _bfd_generic_minisymbol_to_symbol; Comment: None we just return the asymbol the minisymbol points to. 
Name: cmpindexentry; Comment: Compare two indexentry structures. This is called via qsort. 
Name: _bfd_per_xvec_warn; Comment: None DESCRIPTION _Return a location for the given target xvec to use for _warnings specific to that target. If TARG is NULL, returns _the array of per_xvec_message pointers, otherwise if ALLOC is _zero, returns a pointer to a pointer to the list of messages _for TARG, otherwise (both TARG and ALLOC non-zero), allocates _a new _per_xvec_message with space for a string of ALLOC _bytes and returns a pointer to a pointer to it. May return a _pointer to a NULL pointer on allocation failure. 
Name: find_target; Comment: Find a target vector, given a name or configuration triplet. 
Name: bfd_set_default_target; Comment: None DESCRIPTION _Set the default target vector to use when recognizing a BFD. _This takes the name of the target, which may be a BFD target _name or a configuration triplet. 
Name: bfd_find_target; Comment: None DESCRIPTION _Return a pointer to the transfer vector for the object target _named @var{target_name}. If @var{target_name} is <<NULL>>,_choose the one in the environment variable <<GNUTARGET>>; if_that is null or not defined, then choose the first entry in the _target list. Passing in the string "default" or setting the _environment variable to "default" will cause the first entry in _the target list to be returned, and "target_defaulted" will be _set in the BFD if @var{abfd} isn't <<NULL>>. This causes_<<bfd_check_format>> to loop over all the targets to find the _one that matches the file being read. 
Name: _bfd_find_arch_match; Comment: Helper function for bfd_get_target_info to determine the target's architecture. This method handles bfd internal target names as tuples and triplets. 
Name: bfd_get_target_info; Comment: NoneDESCRIPTION _Return a pointer to the transfer vector for the object target _named @var{target_name}. If @var{target_name} is <<NULL>>,_choose the one in the environment variable <<GNUTARGET>>; if_that is null or not defined, then choose the first entry in the _target list. Passing in the string "default" or setting the _environment variable to "default" will cause the first entry in _the target list to be returned, and "target_defaulted" will be _set in the BFD if @var{abfd} isn't <<NULL>>. This causes_<<bfd_check_format>> to loop over all the targets to find the _one that matches the file being read. _If @var{is_bigendian} is not <<NULL>>, then set this value to target's_endian mode. True for big-endian, FALSE for little-endian or for _invalid target. _If @var{underscoring} is not <<NULL>>, then set this value to target's_underscoring mode. Zero for none-underscoring, -1 for invalid target, _else the value of target vector's symbol underscoring. _If @var{def_target_arch} is not <<NULL>>, then set it to the architecture_string specified by the target_name. 
Name: bfd_target_list; Comment: None DESCRIPTION _Return a freshly malloced NULL-terminated _vector of the names of all the valid BFD targets. Do not _modify the names. 
Name: bfd_iterate_over_targets; Comment: None DESCRIPTION _Call @var{func} for each target in the list of BFD target_vectors, passing @var{data} to @var{func}. Stop iterating if_@var{func} returns a non-zero result, and return that target_vector. Return NULL if @var{func} always returns zero.
Name: bfd_flavour_name; Comment: None DESCRIPTION _Return the string form of @var{flavour}.
Name: tekhex_init; Comment: Here's an example %3A6C6480004E56FFFC4E717063B0AEFFFC6D0652AEFFFC60F24E5E4E75 %1B3709T_SEGMENT1108FFFFFFFF %2B3AB9T_SEGMENT7Dgcc_compiled$1087hello$c10 %373829T_SEGMENT80int$t1$r1$$214741080char$t2$r2$0$12710 %373769T_SEGMENT80long$int$t3$r1$$1080unsigned$int$t4$10 %373CA9T_SEGMENT80long$unsigned$in1080short$int$t6$r1$10 %373049T_SEGMENT80long$long$int$t71080short$unsigned$i10 %373A29T_SEGMENT80long$long$unsign1080signed$char$t10$10 %373D69T_SEGMENT80unsigned$char$t11080float$t12$r1$4$010 %373D19T_SEGMENT80double$t13$r1$8$1080long$double$t14$10 %2734D9T_SEGMENT8Bvoid$t15$151035_main10 %2F3CA9T_SEGMENT81$1081$1681$1E81$21487main$F110 %2832F9T_SEGMENT83i$18FFFFFFFC81$1481$214 %07 8 10 10 explanation: %3A6C6480004E56FFFC4E717063B0AEFFFC6D0652AEFFFC60F24E5E4E75 ^ ^^ ^ ^-data | || +------ 4 char integer 0x8000 | |+-------- checksum | +--------- type 6 (data record) +----------- length 3a chars <---------------------- 3a (58 chars) -------------------> %1B3709T_SEGMENT1108FFFFFFFF _ ^ ^^ ^- 8 character integer 0xffffffff _ | |+- 1 character integer 0 _ | +-- type 1 symbol (section definition) _ +------------ 9 char symbol T_SEGMENT %2B3AB9T_SEGMENT7Dgcc_compiled$1087hello$c10 %373829T_SEGMENT80int$t1$r1$$214741080char$t2$r2$0$12710 %373769T_SEGMENT80long$int$t3$r1$$1080unsigned$int$t4$10 %373CA9T_SEGMENT80long$unsigned$in1080short$int$t6$r1$10 %373049T_SEGMENT80long$long$int$t71080short$unsigned$i10 %373A29T_SEGMENT80long$long$unsign1080signed$char$t10$10 %373D69T_SEGMENT80unsigned$char$t11080float$t12$r1$4$010 %373D19T_SEGMENT80double$t13$r1$8$1080long$double$t14$10 %2734D9T_SEGMENT8Bvoid$t15$151035_main10 %2F3CA9T_SEGMENT81$1081$1681$1E81$21487main$F110 %2832F9T_SEGMENT83i$18FFFFFFFC81$1481$214 %0781010 Turns into sac@thepub$ .objdump -dx -m m68k f f: file format tekhex -----x--- 955728 -134219416 Sep 29 15:13 1995 f architecture: UNKNOWN!, flags 0x00000010: HAS_SYMS start address 0x00000000 SECTION 0 [D00000000]_: size 00020000 vma 00000000 align 20 ALLOC, LOAD SECTION 1 [D00008000]_: size 00002001 vma 00008000 align 20 SECTION 2 [T_SEGMENT]_: size ffffffff vma 00000000 align 20 SYMBOL TABLE: 00000000 g T_SEGMENT gcc_compiled$ 00000000 g T_SEGMENT hello$c 00000000 g T_SEGMENT int$t1$r1$$21474 00000000 g T_SEGMENT char$t2$r2$0$127 00000000 g T_SEGMENT long$int$t3$r1$$ 00000000 g T_SEGMENT unsigned$int$t4$ 00000000 g T_SEGMENT long$unsigned$in 00000000 g T_SEGMENT short$int$t6$r1$ 00000000 g T_SEGMENT long$long$int$t7 00000000 g T_SEGMENT short$unsigned$i 00000000 g T_SEGMENT long$long$unsign 00000000 g T_SEGMENT signed$char$t10$ 00000000 g T_SEGMENT unsigned$char$t1 00000000 g T_SEGMENT float$t12$r1$4$0 00000000 g T_SEGMENT double$t13$r1$8$ 00000000 g T_SEGMENT long$double$t14$ 00000000 g T_SEGMENT void$t15$15 00000000 g T_SEGMENT _main 00000000 g T_SEGMENT $ 00000000 g T_SEGMENT $ 00000000 g T_SEGMENT $ 00000010 g T_SEGMENT $ 00000000 g T_SEGMENT main$F1 fcffffff g T_SEGMENT i$1 00000000 g T_SEGMENT $ 00000010 g T_SEGMENT $ RELOCATION RECORDS FOR [D00000000]: (none) RELOCATION RECORDS FOR [D00008000]: (none) RELOCATION RECORDS FOR [T_SEGMENT]: (none) Disassembly of section D00000000: ... 00008000 ($+)7ff0 linkw fp,#-4 00008004 ($+)7ff4 nop 00008006 ($+)7ff6 movel #99,d0 00008008 ($+)7ff8 cmpl fp@(-4),d0 0000800c ($+)7ffc blts 00008014 ($+)8004 0000800e ($+)7ffe addql #1,fp@(-4) 00008012 ($+)8002 bras 00008006 ($+)7ff6 00008014 ($+)8004 unlk fp 00008016 ($+)8006 rts ... 
Name: first_phase; Comment: The first pass is to find the names of all the sections, and see how big the data is. 
Name: pass_over; Comment: Pass over a tekhex, calling one of the above functions on each record. 
Name: tekhex_object_p; Comment: Return TRUE if the file looks like it's in TekHex format. Just look for a percent sign and some hex digits. 
Name: tekhex_set_section_contents; Comment: We have to save up all the Tekhexords for a splurge before output. 
Name: trad_unix_core_file_p; Comment: Handle 4.2-style (and perhaps also sysV-style) core dump file. 
Name: verilog_set_section_contents; Comment: We have to save up all the output for a splurge before output. 
Name: verilog_write_record; Comment: Write a record of type, of the supplied number of bytes. The supplied bytes and length don't have a checksum. That's worked out here. 
Name: verilog_init; Comment: Initialize by filling in the hex conversion array. 
Name: verilog_mkobject; Comment: Set up the verilog tdata information. 
Name: _bfd_vms_slurp_eihd; Comment: Read & process EIHD record. Return TRUE on success, FALSE on error. 
Name: _bfd_vms_slurp_eisd; Comment: Read & process EISD record. Return TRUE on success, FALSE on error. 
Name: _bfd_vms_slurp_eihs; Comment: Read & process EIHS record. Return TRUE on success, FALSE on error. 
Name: maybe_adjust_record_pointer_for_object; Comment: Get next record from object file to vms_buf. Set PRIV(buf_size) and return it This is a little tricky since it should be portable. The openVMS object file has 'variable length' which means that read() returns data in chunks of (hopefully) correct and expected size. The linker (and other tools on VMS) depend on that. Unix doesn't know about 'formatted' files, so reading and writing such an object file in a Unix environment is not trivial. With the tool 'file' (available on all VMS FTP sites), one can view and change the attributes of a file. Changing from 'variable length' to 'fixed length, 512 bytes' reveals the record size at the first 2 bytes of every record. The same may happen during the transfer of object files from VMS to Unix, at least with UCX, the DEC implementation of TCP/IP. The VMS format repeats the size at bytes 2 & 3 of every record. On the first call (file_format == FF_UNKNOWN) we check if the first and the third byte pair (!) of the record match. If they do it's an object file in an Unix environment or with wrong attributes (FF_FOREIGN), else we should be in a VMS environment where read() returns the record size (FF_NATIVE). Reading is always done in 2 steps: 1. first just the record header is read and the size extracted, 2. then the read buffer is adjusted and the remaining bytes are read in. All file I/O is done on even file positions. 
Name: _bfd_vms_get_object_record; Comment: Implement step #1 of the object record reading procedure. Return the record type or -1 on failure. 
Name: vms_get_remaining_object_record; Comment: Implement step #2 of the object record reading procedure. Return the size of the record or 0 on failure. 
Name: _bfd_vms_slurp_ehdr; Comment: Read and process emh record. Return TRUE on success, FALSE on error. 
Name: vms_secflag_by_name; Comment: Retrieve BFD section flags by name and size. 
Name: vms_esecflag_by_name; Comment: Retrieve VMS section flags by name and size. 
Name: add_symbol_entry; Comment: Add SYM to the symbol table of ABFD. Return FALSE in case of error. 
Name: add_symbol; Comment: Create a symbol whose name is ASCIC and add it to ABFD. Return NULL in case of error. 
Name: _bfd_vms_slurp_egsd; Comment: Read and process EGSD. Return FALSE on failure. 
Name: _bfd_vms_push; Comment: Push value and section index. 
Name: _bfd_vms_pop; Comment: Pop value and section index. 
Name: image_set_ptr; Comment: Initialize image buffer pointer to be filled. 
Name: image_inc_ptr; Comment: Increment image buffer pointer by offset. 
Name: dst_define_location; Comment: Save current DST location counter under specified index. 
Name: dst_restore_location; Comment: Restore saved DST location counter from specified index. 
Name: dst_retrieve_location; Comment: Retrieve saved DST location counter from specified index. 
Name: image_write; Comment: Write multiple bytes to section image. 
Name: image_write_b; Comment: Write byte to section image. 
Name: image_write_w; Comment: Write 2-byte word to image. 
Name: image_write_l; Comment: Write 4-byte long to image. 
Name: image_write_q; Comment: Write 8-byte quad to image. 
Name: _bfd_vms_slurp_etir; Comment: Read an ETIR record from ABFD. If INFO is not null, put the content into the output section (used during linking). Return FALSE in case of error. 
Name: vms_slurp_debug; Comment: Process EDBG/ETBT record. Return TRUE on success, FALSE on error 
Name: _bfd_vms_slurp_edbg; Comment: Process EDBG record. Return TRUE on success, FALSE on error. 
Name: _bfd_vms_slurp_etbt; Comment: Process ETBT record. Return TRUE on success, FALSE on error. 
Name: _bfd_vms_slurp_eeom; Comment: Process EEOM record. Return TRUE on success, FALSE on error. 
Name: _bfd_vms_slurp_object_records; Comment: Slurp an ordered set of VMS object records. Return FALSE on error. 
Name: vms_initialize; Comment: Initialize private data 
Name: alpha_vms_free_private; Comment: Free malloc'd memory. 
Name: alpha_vms_object_p; Comment: Check the format for a file being read. Return a (bfd_target *) if it's an object file or zero if not. 
Name: _bfd_vms_write_emh; Comment: Write an EMH/MHD record. 
Name: _bfd_vms_write_lmn; Comment: Write an EMH/LMN record. 
Name: _bfd_vms_write_eeom; Comment: Write eom record for bfd abfd. Return FALSE on error. 
Name: alpha_vms_file_position_block; Comment: Bump ABFD file position to next block. 
Name: alpha_vms_swap_eisd_out; Comment: Convert from internal structure SRC to external structure DST. 
Name: alpha_vms_append_extra_eisd; Comment: Append EISD to the list of extra eisd for ABFD. 
Name: alpha_vms_create_eisd_for_shared; Comment: Create an EISD for shared image SHRIMG. Return FALSE in case of error. 
Name: alpha_vms_create_eisd_for_section; Comment: Create an EISD for section SEC. Return FALSE in case of failure. 
Name: alpha_vms_write_exec; Comment: Layout executable ABFD and write it to the disk. Return FALSE in case of failure. 
Name: _bfd_vms_write_egsd; Comment: Write section and symbol directory of bfd abfd. Return FALSE on error. 
Name: _bfd_vms_write_ehdr; Comment: Write object header for bfd abfd. Return FALSE on error. 
Name: end_etir_record; Comment: Close the etir/etbt record. 
Name: sto_imm; Comment: Output a STO_IMM command for SSIZE bytes of data from CPR at virtual address VADDR in section specified by SEC_INDEX and NAME. 
Name: defer_reloc_p; Comment: Return whether RELOC must be deferred till the end. 
Name: _bfd_vms_write_etir; Comment: Write section contents for bfd abfd. Return FALSE on error. 
Name: alpha_vms_write_object_contents; Comment: Write cached information into a file being written, at bfd_close. 
Name: new_module; Comment: Build a new module for the specified BFD. 
Name: parse_module; Comment: Parse debug info for a module and internalize it. 
Name: build_module_list; Comment: Build the list of modules for the specified BFD. 
Name: module_find_nearest_line; Comment: Calculate and return the name of the source file and the line nearest to the wanted location in the specified module. 
Name: _bfd_vms_find_nearest_line; Comment: Provided a BFD, a section and an offset into the section, calculate and return the name of the source file and the line nearest to the wanted location. 
Name: alpha_vms_convert_symbol; Comment: Set name, value, section and flags of SYM from E. 
Name: alpha_vms_get_symtab_upper_bound; Comment: Return the number of bytes required to store a vector of pointers to asymbols for all the symbols in the BFD abfd, including a terminal NULL pointer. If there are no symbols in the BFD, then return 0. If an error occurs, return -1. 
Name: alpha_vms_canonicalize_symtab; Comment: Read the symbols from the BFD abfd, and fills in the vector location with pointers to the symbols and a trailing NULL. Return number of symbols read. 
Name: alpha_vms_slurp_relocs; Comment: Read and convert relocations from ETIR. We do it once for all sections. 
Name: alpha_vms_get_reloc_upper_bound; Comment: Return the number of bytes required to store the relocation information associated with the given section. 
Name: alpha_vms_canonicalize_reloc; Comment: Convert relocations from VMS (external) form into BFD internal form. Return the number of relocations. 
Name: alpha_vms_bfd_reloc_type_lookup; Comment: Return a pointer to a howto structure which, when invoked, will perform the relocation code on data from the architecture noted. 
Name: vms_time_to_str; Comment: Private dump. 
Name: alpha_vms_read_sections_content; Comment: Slurp ETIR/EDBG/ETBT VMS object records. 
Name: alpha_vms_add_fixup_lp; Comment: Add a linkage pair fixup at address SECT + OFFSET to SHLIB. 
Name: alpha_vms_add_fixup_ca; Comment: Add a code address fixup at address SECT + OFFSET to SHLIB. 
Name: alpha_vms_add_fixup_qr; Comment: Add a quad word relocation fixup at address SECT + OFFSET to SHLIB. 
Name: alpha_vms_add_lw_reloc; Comment: Add relocation. FIXME: Not yet emitted. 
Name: alpha_vms_bfd_link_hash_table_create; Comment: Create an Alpha/VMS link hash table. 
Name: alpha_vms_link_output_symbol; Comment: Called by bfd_hash_traverse to fill the symbol table. Return FALSE in case of failure. 
Name: alpha_vms_get_section_contents; Comment: Read the contents of a section. buf points to a buffer of buf_size bytes to be filled with section data (starting at offset into section) 
Name: alpha_vms_mkobject; Comment: Set the format of a file being written. 
Name: vms_close_and_cleanup; Comment: Called when the BFD is being closed to do any necessary cleanup. 
Name: vms_new_section_hook; Comment: Called when a new section is created. 
Name: vms_print_symbol; Comment: Print symbol to file according to how. how is one of bfd_print_symbol_name_just print the name bfd_print_symbol_more_print more (???) bfd_print_symbol_all_print all we know, which is not much right now :-). 
Name: vms_get_symbol_info; Comment: Return information about symbol in ret. fill type, value and name type: _A_absolute _B_bss segment symbol _C_common symbol _D_data segment symbol _f_filename _t_a static function symbol _T_text segment symbol _U_undefined _-_debug. 
Name: vms_bfd_is_local_label_name; Comment: Return TRUE if the given symbol sym in the BFD abfd is a compiler generated local label, else return FALSE. 
Name: _bfd_vms_set_section_contents; Comment: Sets the contents of the section section in BFD abfd to the data starting in memory at LOCATION. The data is written to the output section starting at offset offset for count bytes. Normally TRUE is returned, else FALSE. Possible error returns are: o bfd_error_no_contents - The output section does not have the _SEC_HAS_CONTENTS attribute, so nothing can be written to it. o and some more too 
Name: alpha_vms_set_arch_mach; Comment: Set the architecture and machine type in BFD abfd to arch and mach. Find the correct pointer to a structure and insert it into the arch_info pointer. 
Name: bfd_vms_set_section_flags; Comment: Set section VMS flags. Clear NO_FLAGS and set FLAGS. 
Name: vms_add_index; Comment: Simply add a name to the index. 
Name: vms_add_indexes_from_list; Comment: Follow all member of a lns list (pointed by RFA) and add indexes for NAME. Return FALSE in case of error. 
Name: vms_read_block; Comment: Read block VBN from ABFD and store it into BLK. Return FALSE in case of error. 
Name: vms_write_block; Comment: Write the content of BLK to block VBN of ABFD. Return FALSE in case of error. 
Name: vms_traverse_index; Comment: Read index block VBN and put the entry in **IDX (which is updated). If the entry is indirect, recurse. 
Name: vms_lib_read_index; Comment: Read index #IDX, which must have NBREL entries. 
Name: _bfd_vms_lib_archive_p; Comment: Standard function. 
Name: _bfd_vms_lib_alpha_archive_p; Comment: Standard function for alpha libraries. 
Name: _bfd_vms_lib_ia64_archive_p; Comment: Standard function for ia64 libraries. 
Name: _bfd_vms_lib_txt_archive_p; Comment: Standard function for text libraries. 
Name: _bfd_vms_lib_mkarchive; Comment: Standard bfd function. 
Name: _bfd_vms_lib_find_symbol; Comment: Find NAME in the symbol index. Return the index. 
Name: vms_lib_btell; Comment: Return the current position. 
Name: vms_lib_read_block; Comment: Read the header of the next data block if all bytes of the current block have been read. 
Name: vms_lib_bread_raw; Comment: Read NBYTES from ABFD into BUF if not NULL. If BUF is NULL, bytes are not stored. Read linearly from the library, but handle blocks. This function does not handle records nor EOF. 
Name: vms_lib_dcx; Comment: Decompress NBYTES from VEC. Store the bytes into BUF if not NULL. 
Name: vms_lib_bread; Comment: Standard IOVEC function. 
Name: vms_lib_bseek; Comment: Standard function, but we currently only handle the rewind case. 
Name: vms_lib_bopen; Comment: Open a library module. FILEPOS is the position of the module header. 
Name: _bfd_vms_lib_get_module; Comment: Get member MODIDX. Return NULL in case of error. 
Name: _bfd_vms_lib_get_elt_at_index; Comment: Standard function: get member at IDX. 
Name: _bfd_vms_lib_get_imagelib_file; Comment: Elements of an imagelib are stubs. You can get the real image with this function. 
Name: _bfd_vms_lib_openr_next_archived_file; Comment: Standard function. 
Name: _bfd_vms_lib_generic_stat_arch_elt; Comment: Standard function. Just compute the length. 
Name: lib_index_cmp; Comment: Used to sort index entries. 
Name: get_idxlen; Comment: Get the size of an index entry. 
Name: vms_write_index; Comment: Write the index composed by NBR symbols contained in IDX. VBN is the first vbn to be used, and will contain on return the last vbn. Can be called with ABFD set to NULL just to size the index. If not null, TOPVBN will be assigned to the vbn of the root index tree. IS_ELFIDX is true for elfidx (ie ia64) indexes layout. Return TRUE on success. 
Name: vms_write_data_block; Comment: Append data to the data block DATA. Force write if PAD is true. 
Name: _bfd_vms_lib_build_map; Comment: Build the symbols index. 
Name: _bfd_vms_lib_write_archive_contents; Comment: Do the hard work: write an archive on the disk. 
Name: _bfd_vms_debug; Comment: Debug function for all vms extensions evaluates environment variable VMS_DEBUG for a numerical value on the first call all error levels below this value are printed: Levels: 1_toplevel bfd calls (functions from the bfd vector) 2_functions called by bfd calls ... 9_almost everything Level is also indentation level. Indentation is performed if level > 0. 
Name: _bfd_hexdump; Comment: A debug function hex dump 'size' bytes starting at 'ptr'. 
Name: _bfd_vms_save_sized_string; Comment: Copy sized string (string with fixed size) to new allocated area. Size is string size (size of record). 
Name: _bfd_vms_save_counted_string; Comment: Copy counted string (string with size at first byte) to new allocated area. PTR points to size byte on entry. 
Name: _bfd_vms_output_begin; Comment: Begin new record. Write 2 bytes rectype and 2 bytes record length. 
Name: _bfd_vms_output_begin_subrec; Comment: Begin new sub-record. Write 2 bytes rectype, and 2 bytes record length. 
Name: _bfd_vms_output_alignment; Comment: Set record/subrecord alignment. 
Name: _bfd_vms_output_align; Comment: Align the size of the current record (whose length is LENGTH). Warning: this obviously changes the record (and the possible subrecord) length. 
Name: _bfd_vms_output_end_subrec; Comment: Ends current sub-record. Set length field. 
Name: _bfd_vms_output_end; Comment: Ends current record (and write it). 
Name: _bfd_vms_output_check; Comment: Check remaining buffer size. Return what's left. 
Name: _bfd_vms_output_byte; Comment: Output byte (8 bit) value. 
Name: _bfd_vms_output_short; Comment: Output short (16 bit) value. 
Name: _bfd_vms_output_long; Comment: Output long (32 bit) value. 
Name: _bfd_vms_output_quad; Comment: Output quad (64 bit) value. 
Name: _bfd_vms_output_counted; Comment: Output c-string as counted string. 
Name: _bfd_vms_output_dump; Comment: Output character area. 
Name: _bfd_vms_output_fill; Comment: Output count bytes of value. 
Name: vms_convert_to_var; Comment: Convert the file to variable record length format. This is done using undocumented system call sys$modify(). Pure VMS version. 
Name: _bfd_vms_convert_to_var_unix_filename; Comment: Convert the file to variable record length format. This is done using undocumented system call sys$modify(). Unix filename version. 
Name: get_vms_time_string; Comment: Manufacture a VMS like time on a unix based system. stolen from obj-vms.c. 
Name: vms_get_module_name; Comment: Create module name from filename (ie, extract the basename and convert it in upper cases). Works on both VMS and UNIX pathes. The result has to be free(). 
Name: vms_time_to_time_t; Comment: Convert a VMS time to a unix time. 
Name: vms_time_t_to_vms_time; Comment: Convert a time_t to a VMS time. 
Name: vms_rawtime_to_time_t; Comment: Convert a raw (stored in a buffer) VMS time to a unix time. 
Name: vms_raw_get_time; Comment: Get the current time into a raw buffer BUF. 
Name: wasm_section_code_to_name; Comment: Resolve SECTION_CODE to a section name if there is one, NULL otherwise. 
Name: wasm_section_name_to_code; Comment: Translate section name NAME to a section code, or 0 if it's a custom name. 
Name: wasm_read_leb128; Comment: Read an LEB128-encoded integer from ABFD's I/O stream, reading one byte at a time. Set ERROR_RETURN if no complete integer could be read, LENGTH_RETURN to the number of bytes read (including bytes in incomplete numbers). SIGN means interpret the number as SLEB128. 
Name: wasm_write_uleb128; Comment: Encode an integer V as LEB128 and write it to ABFD, return TRUE on success. 
Name: wasm_read_magic; Comment: Verify the magic number at the beginning of a WebAssembly module ABFD, setting ERRORPTR if there's a mismatch. 
Name: wasm_read_version; Comment: Read the version number from ABFD, returning TRUE if it's a supported version. Set ERRORPTR otherwise. 
Name: wasm_read_header; Comment: Read the WebAssembly header (magic number plus version number) from ABFD, setting ERRORPTR to TRUE if there is a mismatch. 
Name: wasm_scan_name_function_section; Comment: Scan the "function" subsection of the "name" section ASECT in the wasm module ABFD. Create symbols. Return TRUE on success. 
Name: wasm_read_byte; Comment: Read a byte from ABFD and return it, or EOF for EOF or error. Set ERRORPTR on non-EOF error. 
Name: wasm_scan; Comment: Scan the wasm module ABFD, creating sections and symbols. Return TRUE on success. 
Name: wasm_register_section; Comment: Put a numbered section ASECT of ABFD into the table of numbered sections pointed to by FSARG. 
Name: wasm_compute_custom_section_file_position; Comment: Compute the file position of ABFD's section ASECT. FSARG is a pointer to the current file position. We allow section names of the form .wasm.id to encode the numbered section with ID id, if it exists; otherwise, a custom section with ID "id" is produced. Arbitrary section names are for sections that are assumed already to contain a section header; those are appended to the WebAssembly module verbatim. 
Name: wasm_compute_section_file_positions; Comment: Compute the file positions for the sections of ABFD. Currently, this writes all numbered sections first, in order, then all custom sections, in section order. The spec says that the numbered sections must appear in order of their ids, but custom sections can appear in any position and any order, and more than once. FIXME: support that. 
Name: wasm_object_p; Comment: Check whether ABFD is a WebAssembly module; if so, scan it. 
Name: xcoff_get_section_contents; Comment: Read the contents of a section. 
Name: _bfd_xcoff_get_dynamic_symtab_upper_bound; Comment: Get the size required to hold the dynamic symbols. 
Name: _bfd_xcoff_canonicalize_dynamic_symtab; Comment: Get the dynamic symbols. 
Name: _bfd_xcoff_get_dynamic_reloc_upper_bound; Comment: Get the size required to hold the dynamic relocs. 
Name: _bfd_xcoff_canonicalize_dynamic_reloc; Comment: Get the dynamic relocs. 
Name: xcoff_archive_info_hash; Comment: Hash functions for xcoff_link_hash_table's archive_info. 
Name: xcoff_get_archive_info; Comment: Return information about archive ARCHIVE. Return NULL on error. 
Name: xcoff_link_hash_newfunc; Comment: Routine to create an entry in an XCOFF link hash table. 
Name: _bfd_xcoff_bfd_link_hash_table_free; Comment: Destroy an XCOFF link hash table. 
Name: _bfd_xcoff_bfd_link_hash_table_create; Comment: Create an XCOFF link hash table. 
Name: xcoff_read_internal_relocs; Comment: Read internal relocs for an XCOFF csect. This is a wrapper around _bfd_coff_read_internal_relocs which tries to take advantage of any relocs which may have been cached for the enclosing section. 
Name: bfd_xcoff_split_import_path; Comment: Split FILENAME into an import path and an import filename, storing them in *IMPPATH and *IMPFILE respectively. 
Name: bfd_xcoff_set_archive_import_path; Comment: Set ARCHIVE's import path as though its filename had been given as FILENAME. 
Name: xcoff_set_import_path; Comment: H is an imported symbol. Set the import module's path, file and member to IMPATH, IMPFILE and IMPMEMBER respectively. All three are null if no specific import module is specified. 
Name: xcoff_dynamic_definition_p; Comment: H is the bfd symbol associated with exported .loader symbol LDSYM. Return true if LDSYM defines H. 
Name: xcoff_link_add_dynamic_symbols; Comment: This function is used to add symbols from a dynamic object to the global symbol table. 
Name: xcoff_link_create_extra_sections; Comment: xcoff_link_create_extra_sections Takes care of creating the .loader, .gl, .ds, .debug and sections. 
Name: xcoff_find_reloc; Comment: Returns the index of reloc in RELOCS with the least address greater than or equal to ADDRESS. The relocs are sorted by address. 
Name: xcoff_link_add_symbols_to_hash_table; Comment: Return true if the symbol has to be added to the linker hash table. 
Name: xcoff_link_add_symbols; Comment: Add all the symbols from an object file to the hash table. XCOFF is a weird format. A normal XCOFF .o files will have three COFF sections--.text, .data, and .bss--but each COFF section will contain many csects. These csects are described in the symbol table. From the linker's point of view, each csect must be considered a section in its own right. For example, a TOC entry is handled as a small XMC_TC csect. The linker must be able to merge different TOC entries together, which means that it must be able to extract the XMC_TC csects from the .data section of the input .o file. From the point of view of our linker, this is, of course, a hideous nightmare. We cope by actually creating sections for each csect, and discarding the original sections. We then have to handle the relocation entries carefully, since the only way to tell which csect they belong to is to examine the address. 
Name: xcoff_link_add_object_symbols; Comment: Add symbols from an XCOFF object file. 
Name: xcoff_link_check_dynamic_ar_symbols; Comment: Look through the loader symbols to see if this dynamic object should be included in the link. The native linker uses the loader symbols, not the normal symbol table, so we do too. 
Name: xcoff_link_check_ar_symbols; Comment: Look through the symbols to see if this object file should be included in the link. 
Name: xcoff_link_check_archive_element; Comment: Check a single archive element to see if we need to include it in the link. *PNEEDED is set according to whether this element is needed in the link or not. This is called via _bfd_generic_link_add_archive_symbols. 
Name: _bfd_xcoff_bfd_link_add_symbols; Comment: Given an XCOFF BFD, add symbols to the global hash table as appropriate. 
Name: xcoff_find_function; Comment: If symbol H has not been interpreted as a function descriptor, see whether it should be. Set up its descriptor information if so. 
Name: xcoff_archive_contains_shared_object_p; Comment: Return true if the given bfd contains at least one shared object. 
Name: xcoff_covered_by_expall_p; Comment: Symbol H qualifies for export by -bexpfull. Return true if it also qualifies for export by -bexpall. 
Name: xcoff_auto_export_p; Comment: Return true if symbol H qualifies for the forms of automatic export specified by AUTO_EXPORT_FLAGS. 
Name: xcoff_need_ldrel_p; Comment: Return true if relocation REL needs to be copied to the .loader section. If REL is against a global symbol, H is that symbol, otherwise it is null. 
Name: xcoff_mark_symbol_by_name; Comment: Look for a symbol called NAME. If the symbol is defined, mark it. If the symbol exists, set FLAGS. 
Name: xcoff_mark; Comment: The mark phase of garbage collection. For a given section, mark it, and all the sections which define symbols to which it refers. Because this function needs to look at the relocs, we also count the number of relocs which need to be copied into the .loader section. 
Name: xcoff_sweep; Comment: The sweep phase of garbage collection. Remove all garbage sections. 
Name: bfd_xcoff_link_init; Comment: Initialize the back-end with linker infos. 
Name: bfd_xcoff_link_record_set; Comment: Record the number of elements in a set. This is used to output the correct csect length. 
Name: bfd_xcoff_import_symbol; Comment: Import a symbol. 
Name: bfd_xcoff_export_symbol; Comment: Export a symbol. 
Name: bfd_xcoff_link_count_reloc; Comment: Count a reloc against a symbol. This is called for relocs generated by the linker script, typically for global constructors and destructors. 
Name: bfd_xcoff_record_link_assignment; Comment: This function is called for each symbol to which the linker script assigns a value. FIXME: In cases like the linker test ld-scripts/defined5 where a symbol is defined both by an input object file and the script, the script definition doesn't override the object file definition as is usual for other targets. At least not when the symbol is output. Other uses of the symbol value by the linker do use the script value. 
Name: xcoff_mark_auto_exports; Comment: An xcoff_link_hash_traverse callback for which DATA points to an xcoff_loader_info. Mark all symbols that should be automatically exported. 
Name: xcoff_final_definition_p; Comment: INPUT_BFD has an external symbol associated with hash table entry H and csect CSECT. Return true if INPUT_BFD defines H. 
Name: xcoff_build_ldsym; Comment: See if H should have a loader symbol associated with it. 
Name: xcoff_post_gc_symbol; Comment: An xcoff_htab_traverse callback that is called for each symbol once garbage collection is complete. 
Name: xcoff_keep_symbol_p; Comment: INPUT_BFD includes XCOFF symbol ISYM, which is associated with linker hash table entry H and csect CSECT. AUX contains ISYM's auxiliary csect information, if any. NAME is the function's name if the name is stored in the .debug section, otherwise it is null. Return 1 if we should include an appropriately-adjusted ISYM in the output file, 0 if we should discard ISYM, or -1 if an error occured. 
Name: xcoff_size_loader_section; Comment: Compute the current size of the .loader section. Start filling its header but it will be finalized in xcoff_build_loader_section. 
Name: bfd_xcoff_size_dynamic_sections; Comment: Prepare the .loader section. This is called by the XCOFF linker emulation before_allocation routine. We must set the size of the .loader section before the linker lays out the output file. However, some symbols or relocations might be append to the .loader section when processing the addresses, thus it's not layout right now and its size might change. LIBPATH is the library path to search for shared objects; this is normally built from the -L arguments passed to the linker. ENTRY is the name of the entry point symbol (the -e linker option). FILE_ALIGN is the alignment to use for sections within the file (the -H linker option). MAXSTACK is the maximum stack size (the -bmaxstack linker option). MAXDATA is the maximum data size (the -bmaxdata linker option). GC is whether to do garbage collection (the -bgc linker option). MODTYPE is the module type (the -bmodtype linker option). TEXTRO is whether the text section must be read only (the -btextro linker option). AUTO_EXPORT_FLAGS is a mask of XCOFF_EXPALL and XCOFF_EXPFULL. SPECIAL_SECTIONS is set by this routine to csects with magic names like _end. 
Name: xcoff_build_loader_section; Comment: Lay out the .loader section, finalizing its header and filling the import paths 
Name: bfd_xcoff_build_dynamic_sections; Comment: Lay out the .loader section and allocate the space for the other dynamic sections of XCOFF. 
Name: xcoff_stub_csect_name; Comment: Get the name of a csect which will contain stubs. It has the same pattern as AIX linker: @FIX"number". 
Name: xcoff_stub_get_csect_in_range; Comment: Return a stub section which can be reach with a single branch from SECTION. CREATE means that creating a csect is allowed. 
Name: xcoff_stub_name; Comment: Build a name for an entry in the stub hash table. 
Name: bfd_xcoff_get_stub_entry; Comment: Look up an entry in the stub hash. 
Name: bfd_xcoff_type_of_stub; Comment: Check if the symbol targeted by IREL is reachable. Return the type of stub needed otherwise. 
Name: xcoff_add_stub; Comment: Add a new stub entry to the stub hash. Not all fields of the new stub entry are initialised. 
Name: bfd_xcoff_size_stubs; Comment: Check relocations and adds stubs if needed. 
Name: xcoff_stub_create_relocations; Comment: Create and apply relocations made by a stub entry. 
Name: xcoff_symbol_section; Comment: Return the section that defines H. Return null if no section does. 
Name: xcoff_create_ldrel; Comment: Add a .loader relocation for input relocation IREL. If the loader relocation should be against an output section, HSEC points to the input section that IREL is against, otherwise HSEC is null. H is the symbol that IREL is against, or null if it isn't against a global symbol. REFERENCE_BFD is the bfd to use in error messages about the relocation. 
Name: xcoff_link_input_bfd; Comment: Link an input file into the linker output file. This function handles all the sections and relocations of the input file at once. 
Name: xcoff_sort_relocs; Comment: Sort relocs by VMA. This is called via qsort. 
Name: xcoff_find_tc0; Comment: See if the link requires a TOC (it usually does!). If so, find a good place to put the TOC anchor csect, and write out the associated symbol. 
Name: xcoff_write_global_symbol; Comment: Write out a non-XCOFF global symbol. 
Name: xcoff_reloc_link_order; Comment: Handle a link order which is supposed to generate a reloc. 
Name: _bfd_xcoff_bfd_final_link; Comment: Do the final link step. 
Name: xtensa_insnbuf_size; Comment: Instruction buffers. 
Name: xtensa_insnbuf_to_chars; Comment: Copy an instruction in the 32-bit words pointed at by "insn" to characters pointed at by "cp". This is more complicated than you might think because we want 16-bit instructions in bytes 2 & 3 for big-endian configurations. This function allows us to specify which byte in "insn" to start with and which way to increment, allowing trivial implementation for both big- and little-endian configurations....and it seems to make pretty good code for both. 
Name: xtensa_insnbuf_from_chars; Comment: Inward conversion from byte stream to xtensa_insnbuf. See xtensa_insnbuf_to_chars for a discussion of why this is complicated by endianness. 
Name: xtensa_format_name; Comment: Instruction formats. 
Name: xtensa_opcode_lookup; Comment: Opcode information. 
Name: get_operand; Comment: Operand information. 
Name: xtensa_stateOperand_state; Comment: State Operands. 
Name: xtensa_interfaceOperand_interface; Comment: Interface Operands. 
Name: xtensa_regfile_lookup; Comment: Register Files. 
Name: xtensa_state_lookup; Comment: Processor States. 
Name: xtensa_sysreg_lookup; Comment: Sysregs. 
Name: xtensa_interface_lookup; Comment: Interfaces. 
Name: xtensa_funcUnit_lookup; Comment: Functional Units. 
Name: Field_t_Slot_inst_get; Comment: Field definitions. 
Name: Operand_soffsetx4_decode; Comment: Instruction operands. 
Name: Opcode_excw_Slot_inst_encode; Comment: Opcode encodings. 
Name: Slot_inst_decode; Comment: Slot-specific opcode decode functions. 
Name: Slot_x24_Format_inst_0_get; Comment: Instruction slots. 
Name: Format_x24_encode; Comment: Instruction formats. 
Name: remove_noncomments; Comment: This function removes everything not inside comments starting on the first char of the line from the string, also when copying comments, removes blank space and leading *'s. Blank lines are turned into one blank line. 
Name: paramstuff; Comment: None and a blank line. 
Name: translatecomments; Comment: turn {* and *} into comments 
Name: outputdots; Comment: Mod tos so that only lines with leading dots remain 
Name: courierize; Comment: Find lines starting with . and | and put example around them on tos 
Name: bulletize; Comment: Finds any lines starting with "o ", if there are any, then turns on @itemize @bullet, and @items each of them. Then ends with @end itemize, inplace at TOS
Name: do_fancy_stuff; Comment: Turn <<foo>> into @code{foo} in place at TOS
Name: iscommand; Comment: A command is all upper case,and alone on a line. 
Name: kill_bogus_lines; Comment: indent Take the string at the top of the stack, do some prettying. 
Name: chew_exit; Comment: There is no reliable way to declare exit. Sometimes it returns int, and sometimes it returns void. Sometimes it changes between OS releases. Trying to get it declared correctly in the hosts file is a pointless waste of time. 
Name: usage; Comment: Print a usage message to STREAM and exit with STATUS. 
Name: slurp_symtab; Comment: Read in the symbol table. 
Name: find_address_in_section; Comment: Look for an address in a section. This is called via bfd_map_over_sections. 
Name: find_offset_in_section; Comment: Look for an offset in a section. This is directly called. 
Name: lookup_symbol; Comment: Lookup a symbol with offset in symbol table. 
Name: is_symbol; Comment: Split an symbol+offset expression. adr is modified. 
Name: translate_addresses; Comment: Read hexadecimal or symbolic with offset addresses from stdin, translate into file_name:line_number and optionally function name. 
Name: process_file; Comment: Process a file. Returns an exit value for main(). 
Name: map_over_members; Comment: If COUNT is 0, then FUNCTION is called once on each entry. If nonzero, COUNT is the length of the FILES chain; FUNCTION is called on each entry whose name matches one in FILES. 
Name: normalize; Comment: Normalize a file name specified on the command line into a file name which we will use in an archive. 
Name: default_deterministic; Comment: If neither -D nor -U was specified explicitly, then use the configured default. 
Name: extract_file; Comment: Extract a member of the archive into its own file. We defer opening the new file until after we have read a BUFSIZ chunk of the old one, since we know we have just read the archive header for the old one. Since most members are shorter than BUFSIZ, this means we will read the old header, read the old data, write a new inode for the new file, and write the new data, and be done. This 'optimization' is what comes from sitting next to a bare disk and hearing it every time it seeks. -- Gnu Gilmore 
Name: get_pos_bfd; Comment: Return a pointer to the pointer to the entry which should be rplacd'd into when altering. DEFAULT_POS should be how to interpret pos_default, and should be a pos value. 
Name: move_members; Comment: Reposition existing members within an archive 
Name: replace_members; Comment: Ought to default to replacing in place, but this is existing practice! 
Name: ranlib_touch; Comment: Update the timestamp of the symbol map of an archive. 
Name: print_descr; Comment: Things which are interesting to map over all or some of the files: 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: yy_get_previous_state; Comment: yy_get_previous_state - get the state just before the EOB char was reached 
Name: yy_try_NUL_trans; Comment: None 
Name: yyrestart; Comment: * Immediately switch to a different input stream.@param input_file A readable stream. @note This function does not reset the start condition to @c INITIAL . 
Name: yy_switch_to_buffer; Comment: * Switch to a different input buffer.@param new_buffer The new input buffer. 
Name: yy_create_buffer; Comment: * Allocate and initialize an input buffer state.@param file A readable stream. @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE. @return the allocated buffer state. 
Name: yy_delete_buffer; Comment: * Destroy the buffer.@param b a buffer created with yy_create_buffer() 
Name: yy_init_buffer; Comment: Initializes or reinitializes a buffer.This function is sometimes called more than once on the same buffer, such as during a yyrestart() or at EOF. 
Name: yy_flush_buffer; Comment: * Discard all buffered characters. On the next scan, YY_INPUT will be called.@param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER. 
Name: yypush_buffer_state; Comment: * Pushes the new state onto the stack. The new state becomes the current state. This function will allocate the stack if necessary. @param new_buffer The new state. 
Name: yypop_buffer_state; Comment: * Removes and deletes the top of the stack, if present. The next element becomes the new top. 
Name: yyensure_buffer_stack; Comment: Allocates the stack if it does not exist. Guarantees space for at least one push. 
Name: yy_scan_buffer; Comment: * Setup the input buffer state to scan directly from a user-specified character buffer.@param base the character buffer @param size the size in bytes of the character buffer @return the newly allocated buffer state object. 
Name: yy_scan_string; Comment: * Setup the input buffer state to scan a string. The next call to yylex() willscan from a @e copy of @a str. @param yystr a NUL-terminated string to scan @return the newly allocated buffer state object. @note If you want to scan bytes that may contain NUL values, then use yy_scan_bytes() instead. 
Name: yy_scan_bytes; Comment: * Setup the input buffer state to scan the given bytes. The next call to yylex() willscan from a @e copy of @a bytes. @param yybytes the byte buffer to scan @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes. @return the newly allocated buffer state object. 
Name: yyget_lineno; Comment: * Get the current line number. 
Name: yyget_in; Comment: * Get the input stream. 
Name: yyget_out; Comment: * Get the output stream. 
Name: yyget_leng; Comment: * Get the length of the current token. 
Name: yyget_text; Comment: * Get the current token. 
Name: yyset_lineno; Comment: * Set the current line number.@param _line_number line number 
Name: yyset_in; Comment: * Set the input stream. This does not discard the currentinput buffer. @param _in_str A readable stream. @see yy_switch_to_buffer 
Name: yylex_destroy; Comment: yylex_destroy is for both reentrant and non-reentrant scanners. 
Name: yy_symbol_value_print; Comment: -----------------------------------.| Print this symbol's value on YYO. | `-----------------------------------
Name: yy_symbol_print; Comment: ---------------------------.| Print this symbol on YYO. | `---------------------------
Name: ar_list; Comment: And I added this one. 
Name: bfd_nonfatal_message; Comment: Issue a non fatal error message. FILENAME, or if NULL then BFD, are used to indicate the problematic file. SECTION, if non NULL, is used to provide a section name. If FORMAT is non-null, then it is used to print additional information via vfprintf. Finally the bfd error message is printed. In summary, error messages are of one of the following forms: PROGRAM: file: bfd-error-message PROGRAM: file[section]: bfd-error-message PROGRAM: file: printf-message: bfd-error-message PROGRAM: file[section]: printf-message: bfd-error-message. 
Name: bfd_xalloc; Comment: Like xmalloc except that ABFD's objalloc memory is returned. Use objalloc_free_block to free this memory and all more recently allocated, or more usually, leave it to bfd_close to free. 
Name: set_default_bfd_target; Comment: Set the default BFD target based on the configured target. Doing this permits the binutils to be configured for a particular target, and linked against a shared BFD library which was configured for a different target. 
Name: list_matching_formats; Comment: After a FALSE return from bfd_check_format_matches with bfd_get_error () == bfd_error_file_ambiguously_recognized, print the possible matching targets and free the list of targets. 
Name: list_supported_targets; Comment: List the supported targets. 
Name: list_supported_architectures; Comment: List the supported architectures. 
Name: do_display_target; Comment: List the targets that BFD is configured to support, each followed by its endianness and the architectures it supports. Also build info about target/archs. 
Name: do_info_size; Comment: Calculate how many targets we can print across the page. 
Name: do_info_header; Comment: Print header of target names. 
Name: do_info_row; Comment: Print a table row. 
Name: display_target_tables; Comment: Print tables of all the target-architecture combinations that BFD has been configured to support. 
Name: print_arelt_descr; Comment: Display the archive header for an element as if it were an ls -l listing: Mode User_tGroup_tSize_tDate Name 
Name: template_in_dir; Comment: Return a path for a new temporary file in the same directory as file PATH. 
Name: make_tempname; Comment: Return the name of a created temporary file in the same directory as FILENAME. 
Name: make_tempdir; Comment: Return the name of a created temporary directory inside the directory containing FILENAME. 
Name: parse_vma; Comment: Parse a string into a VMA, with a fatal error if it can't be parsed. 
Name: get_file_size; Comment: Returns the size of the named file. If the file does not exist, or if it is not a real file, then a suitable non-fatal error message is printed and (off_t) -1 is returned. 
Name: bfd_get_archive_filename; Comment: Return the filename in a static buffer. 
Name: is_valid_archive_path; Comment: Returns TRUE iff PATHNAME, a filename of an archive member, is valid for writing. For security reasons absolute paths and paths containing /../ are not allowed. See PR 17533. 
Name: do_define; Comment: Define a symbol and attach to block B. 
Name: standard_symbol_characters; Comment: Return the string of non-alnum characters that may occur as a valid symbol component, in the standard assembler symbol syntax. 
Name: debug_error; Comment: Issue an error message. 
Name: debug_add_to_namespace; Comment: Add an object to a namespace. 
Name: debug_add_to_current_namespace; Comment: Add an object to the current namespace. 
Name: debug_init; Comment: Return a handle for debugging information. 
Name: debug_set_filename; Comment: Set the source filename. This implicitly starts a new compilation unit. 
Name: debug_start_source; Comment: Change source files to the given file name. This is used for include files in a single compilation unit. 
Name: debug_record_function; Comment: Record a function definition. This implicitly starts a function block. The debug_type argument is the type of the return value. The boolean indicates whether the function is globally visible. The bfd_vma is the address of the start of the function. Currently the parameter types are specified by calls to debug_record_parameter. FIXME: There is no way to specify nested functions. 
Name: debug_record_parameter; Comment: Record a parameter for the current function. 
Name: debug_end_function; Comment: End a function. FIXME: This should handle function nesting. 
Name: debug_start_block; Comment: Start a block in a function. All local information will be recorded in this block, until the matching call to debug_end_block. debug_start_block and debug_end_block may be nested. The bfd_vma argument is the address at which this block starts. 
Name: debug_end_block; Comment: Finish a block in a function. This matches the call to debug_start_block. The argument is the address at which this block ends. 
Name: debug_record_line; Comment: Associate a line number in the current source file and function with a given address. 
Name: debug_start_common_block; Comment: Start a named common block. This is a block of variables that may move in memory. 
Name: debug_end_common_block; Comment: End a named common block. 
Name: debug_record_int_const; Comment: Record a named integer constant. 
Name: debug_record_float_const; Comment: Record a named floating point constant. 
Name: debug_record_typed_const; Comment: Record a typed constant with an integral value. 
Name: debug_record_label; Comment: Record a label. 
Name: debug_record_variable; Comment: Record a variable. 
Name: debug_make_type; Comment: Make a type with a given kind and size. 
Name: debug_make_indirect_type; Comment: Make an indirect type which may be used as a placeholder for a type which is referenced before it is defined. 
Name: debug_make_void_type; Comment: Make a void type. There is only one of these. 
Name: debug_make_int_type; Comment: Make an integer type of a given size. The boolean argument is true if the integer is unsigned. 
Name: debug_make_float_type; Comment: Make a floating point type of a given size. FIXME: On some platforms, like an Alpha, you probably need to be able to specify the format. 
Name: debug_make_bool_type; Comment: Make a boolean type of a given size. 
Name: debug_make_complex_type; Comment: Make a complex type of a given size. 
Name: debug_make_struct_type; Comment: Make a structure type. The second argument is true for a struct, false for a union. The third argument is the size of the struct. The fourth argument is a NULL terminated array of fields. 
Name: debug_make_object_type; Comment: Make an object type. The first three arguments after the handle are the same as for debug_make_struct_type. The next arguments are a NULL terminated array of base classes, a NULL terminated array of methods, the type of the object holding the virtual function table if it is not this object, and a boolean which is true if this object has its own virtual function table. 
Name: debug_make_enum_type; Comment: Make an enumeration type. The arguments are a null terminated array of strings, and an array of corresponding values. 
Name: debug_make_pointer_type; Comment: Make a pointer to a given type. 
Name: debug_make_function_type; Comment: Make a function returning a given type. FIXME: We should be able to record the parameter types. 
Name: debug_make_reference_type; Comment: Make a reference to a given type. 
Name: debug_make_range_type; Comment: Make a range of a given type from a lower to an upper bound. 
Name: debug_make_array_type; Comment: Make an array type. The second argument is the type of an element of the array. The third argument is the type of a range of the array. The fourth and fifth argument are the lower and upper bounds, respectively. The sixth argument is true if this array is actually a string, as in C. 
Name: debug_make_set_type; Comment: Make a set of a given type. For example, a Pascal set type. The boolean argument is true if this set is actually a bitstring, as in CHILL. 
Name: debug_make_offset_type; Comment: Make a type for a pointer which is relative to an object. The second argument is the type of the object to which the pointer is relative. The third argument is the type that the pointer points to. 
Name: debug_make_method_type; Comment: Make a type for a method function. The second argument is the return type, the third argument is the domain, and the fourth argument is a NULL terminated array of argument types. 
Name: debug_make_const_type; Comment: Make a const qualified version of a given type. 
Name: debug_make_volatile_type; Comment: Make a volatile qualified version of a given type. 
Name: debug_make_undefined_tagged_type; Comment: Make an undefined tagged type. For example, a struct which has been mentioned, but not defined. 
Name: debug_make_baseclass; Comment: Make a base class for an object. The second argument is the base class type. The third argument is the bit position of this base class in the object (always 0 unless doing multiple inheritance). The fourth argument is whether this is a virtual class. The fifth argument is the visibility of the base class. 
Name: debug_make_field; Comment: Make a field for a struct. The second argument is the name. The third argument is the type of the field. The fourth argument is the bit position of the field. The fifth argument is the size of the field (it may be zero). The sixth argument is the visibility of the field. 
Name: debug_make_static_member; Comment: Make a static member of an object. The second argument is the name. The third argument is the type of the member. The fourth argument is the physical name of the member (i.e., the name as a global variable). The fifth argument is the visibility of the member. 
Name: debug_make_method; Comment: Make a method. The second argument is the name, and the third argument is a NULL terminated array of method variants. 
Name: debug_make_method_variant; Comment: Make a method argument. The second argument is the real name of the function. The third argument is the type of the function. The fourth argument is the visibility. The fifth argument is whether this is a const function. The sixth argument is whether this is a volatile function. The seventh argument is the offset in the virtual function table, if any. The eighth argument is the virtual function context. FIXME: Are the const and volatile arguments necessary? Could we just use debug_make_const_type? 
Name: debug_make_static_method_variant; Comment: Make a static method argument. The arguments are the same as for debug_make_method_variant, except that the last two are omitted since a static method can not also be virtual. 
Name: debug_name_type; Comment: Name a type. 
Name: debug_tag_type; Comment: Tag a type. 
Name: debug_record_type_size; Comment: Record the size of a given type. 
Name: debug_find_named_type; Comment: Find a named type. 
Name: debug_find_tagged_type; Comment: Find a tagged type. 
Name: debug_get_real_type; Comment: Get a base type. We build a linked list on the stack to avoid crashing if the type is defined circularly. 
Name: debug_get_type_kind; Comment: Get the kind of a type. 
Name: debug_get_type_name; Comment: Get the name of a type. 
Name: debug_get_type_size; Comment: Get the size of a type. 
Name: debug_get_return_type; Comment: Get the return type of a function or method type. 
Name: debug_get_parameter_types; Comment: Get the parameter types of a function or method type (except that we don't currently store the parameter types of a function). 
Name: debug_get_target_type; Comment: Get the target type of a type. 
Name: debug_get_fields; Comment: Get the NULL terminated array of fields for a struct, union, or class. 
Name: debug_get_field_type; Comment: Get the type of a field. 
Name: debug_get_field_name; Comment: Get the name of a field. 
Name: debug_get_field_bitpos; Comment: Get the bit position of a field. 
Name: debug_get_field_bitsize; Comment: Get the bit size of a field. 
Name: debug_get_field_visibility; Comment: Get the visibility of a field. 
Name: debug_get_field_physname; Comment: Get the physical name of a field. 
Name: debug_write; Comment: Write out the debugging information. This is given a handle to debugging information, and a set of function pointers to call. 
Name: debug_write_name; Comment: Write out an element in a namespace. 
Name: debug_write_type; Comment: Write out a type. If the type is DEBUG_KIND_NAMED or DEBUG_KIND_TAGGED, then the name argument is the name for which we are about to call typedef or tag. If the type is anything else, then the name argument is a tag from a DEBUG_KIND_TAGGED type which points to this one. 
Name: debug_write_class_type; Comment: Write out a class type. 
Name: debug_write_function; Comment: Write out information for a function. 
Name: debug_write_block; Comment: Write out information for a block. 
Name: debug_write_linenos; Comment: Write out line number information up to ADDRESS. 
Name: debug_set_class_id; Comment: Get the ID number for a class. If during the same call to debug_write we find a struct with the same definition with the same name, we use the same ID. This type of things happens because the same struct will be defined by multiple compilation units. 
Name: debug_type_samep; Comment: See if two types are the same. At this point, we don't care about tags and the like. 
Name: debug_class_type_samep; Comment: See if two classes are the same. This is a subroutine of debug_type_samep. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: display_demangler_styles; Comment: Print the list of demangling styles to STREAM. A one line MSG is printed before the styles. Output is limited to 80 columns, with continuation lines being indented by leading spaces in MSG. 
Name: append_import; Comment: append_import simply adds the given import definition to the global import_list. It is used by def_import. 
Name: def_import; Comment: A note regarding the parse modes: In defparse.y we have to accept import declarations which follow any one of the following forms: <func_name_in_app> = <dll_name>.<func_name_in_dll> <func_name_in_app> = <dll_name>.<number> <dll_name>.<func_name_in_dll> <dll_name>.<number> Furthermore, the dll's name may or may not end with ".dll", which complicates the parsing a little. Normally the dll's name is passed to def_import() in the "module" parameter, but when it ends with ".dll" it gets passed in "module" sans ".dll" and that needs to be reappended. def_import gets five parameters: APP_NAME - the name of the function in the application, if present, or NULL if not present. MODULE - the name of the dll, possibly sans extension (ie, '.dll'). DLLEXT - the extension of the dll, if present, NULL if not present. ENTRY - the name of the function in the dll, if present, or NULL. ORD_VAL - the numerical tag of the function in the dll, if present, or NULL. Exactly one of <entry> or <ord_val> must be present (i.e., not NULL). 
Name: run; Comment: ********************************************************************
Name: scan_drectve_symbols; Comment: Look for a list of symbols to export in the .drectve section of ABFD. Pass each one to def_exports. 
Name: scan_filtered_symbols; Comment: Look through the symbols in MINISYMS, and add each one to list of symbols to export. 
Name: add_excludes; Comment: Add a list of symbols to exclude. 
Name: match_exclude; Comment: See if STRING is on the list of symbols to exclude. 
Name: set_default_excludes; Comment: Add the default list of symbols to exclude. 
Name: filter_symbols; Comment: Choose which symbols to export. 
Name: scan_all_symbols; Comment: Export all symbols in ABFD, except for ones we were told not to export. 
Name: scan_open_obj_file; Comment: Look at the object file to decide which symbols to export. 
Name: sfunc; Comment: Generate the .exp file. 
Name: generate_idata_ofile; Comment: generate_idata_ofile generates the portable assembly source code for the idata sections. It appends the source code to the end of the file. 
Name: assemble_file; Comment: Assemble the specified file. 
Name: make_label; Comment: This is what we're trying to make. We generate the imp symbols with both single and double underscores, for compatibility. _.text _.global__GetFileVersionInfoSizeW@8 _.global___imp_GetFileVersionInfoSizeW@8 _GetFileVersionInfoSizeW@8: _jmp ___imp_GetFileVersionInfoSizeW@8 _.section_.idata$7_# To force loading of head_.long___version_a_head # Import Address Table_.section_.idata$5 __imp_GetFileVersionInfoSizeW@8: _.rva_ID2 # Import Lookup Table_.section_.idata$4 _.rva_ID2 # HintName table_.section_.idata$6 ID2:_.short_2 _.asciz_"GetFileVersionInfoSizeW" 
Name: dll_name_list_append; Comment: Append a copy of data (cast to char *) to list. 
Name: dll_name_list_count; Comment: Count the number of entries in list. 
Name: dll_name_list_print; Comment: Print each entry in list to stdout. 
Name: dll_name_list_free; Comment: Free all entries in list, and list itself. 
Name: dll_name_list_free_contents; Comment: Recursive function to free all nodes entry->next->next... as well as entry itself. 
Name: dll_name_list_create; Comment: Allocate and initialize a dll_name_list_type object, including its sentinel node. Caller is responsible for calling dll_name_list_free when finished with the list. 
Name: identify_member_contains_symname; Comment: Search the symbol table of the suppled BFD for a symbol whose name matches OBJ (where obj is cast to const char *). If found, set global variable identify_member_contains_symname_result TRUE. It is the caller's responsibility to set the result variable FALSE before iterating with this function. 
Name: identify_dll_for_implib; Comment: This is the main implementation for the --identify option. Given the name of an import library in identify_imp_name, first determine if the import library is a GNU binutils-style one (where the DLL name is stored in an .idata$7 section), or if it is a MS-style one (where the DLL name, along with much other data, is stored in the .idata$6 section). We determine the style of import library by searching for the DLL-structure symbol inserted by MS tools: __NULL_IMPORT_DESCRIPTOR. Once we know which section to search, evaluate each section for the appropriate properties that indicate it may contain the name of the associated DLL (this differs depending on the style). Add the contents of all sections which meet the criteria to a linked list of dll names. Finally, print them all to stdout. (If --identify-strict, an error is reported if more than one match was found). 
Name: identify_search_archive; Comment: Loop over all members of the archive, applying the supplied function to each member that is a bfd_object. The function will be called as if: func (member_bfd, abfd, user_storage) 
Name: identify_search_member; Comment: Call the identify_search_section() function for each section of this archive member. 
Name: identify_process_section_p; Comment: This predicate returns true if section->name matches the desired value. By default, this is .idata$7 (.idata$6 if the import library is ms-style). 
Name: identify_search_section; Comment: If *section has contents and its name is .idata$7 (.idata$6 if import lib ms-generated) -- and it satisfies several other constraints -- then add the contents of the section to obj->list. 
Name: pfunc; Comment: Run through the information gathered from the .o files and the .def file and work out the best stuff. 
Name: look_for_prog; Comment: Look for the program formed by concatenating PROG_NAME and the string running from PREFIX to END_PREFIX. If the concatenated string contains a '/', try appending EXECUTABLE_SUFFIX if it is appropriate. 
Name: deduce_name; Comment: Deduce the name of the program we are want to invoke. PROG_NAME is the basic name of the program we want to run, eg "as" or "ld". The catch is that we might want actually run "i386-pe-as". If argv[0] contains the full path, then try to find the program in the same place, with and then without a target-like prefix. Given, argv[0] = usrlocalbini586-cygwin32-dlltool, deduce_name("as") uses the following search order: usrlocalbini586-cygwin32-as usrlocalbinas as If there's an EXECUTABLE_SUFFIX, it'll use that as well; for each name, it'll try without and then with EXECUTABLE_SUFFIX. Given, argv[0] = i586-cygwin32-dlltool, it will not even try "as" as the fallback, but rather return i586-cygwin32-as. Oh, and given, argv[0] = dlltool, it'll return "as". Returns a dynamically allocated string. 
Name: display; Comment: Please keep the following 4 routines in sync with dlltool.c: display () inform () look_for_prog () deduce_name () It's not worth the hassle to break these out since dllwrap will (hopefully) soon be retired in favor of `ld --shared. 
Name: deduce_name; Comment: Deduce the name of the program we are want to invoke. PROG_NAME is the basic name of the program we want to run, eg "as" or "ld". The catch is that we might want actually run "i386-pe-as" or "ppc-pe-ld". If argv[0] contains the full path, then try to find the program in the same place, with and then without a target-like prefix. Given, argv[0] = usrlocalbini586-cygwin32-dlltool, deduce_name("as") uses the following search order: usrlocalbini586-cygwin32-as usrlocalbinas as If there's an EXECUTABLE_SUFFIX, it'll use that as well; for each name, it'll try without and then with EXECUTABLE_SUFFIX. Given, argv[0] = i586-cygwin32-dlltool, it will not even try "as" as the fallback, but rather return i586-cygwin32-as. Oh, and given, argv[0] = dlltool, it'll return "as". Returns a dynamically allocated string. 
Name: usage; Comment: ********************************************************************
Name: print_hex; Comment: Print a uint64_t value (typically an address, offset or length) in hexadecimal format, followed by a space. The precision displayed is determined by the NUM_BYTES parameter. 
Name: print_hex_ns; Comment: Like print_hex, but no trailing space. 
Name: print_view; Comment: Print a view number in hexadecimal value, with the same width as print_hex would have printed it. 
Name: read_leb128; Comment: Read in a LEB128 encoded value starting at address DATA. If SIGN is true, return a signed LEB128 value. If LENGTH_RETURN is not NULL, return in it the number of bytes read. If STATUS_RETURN is not NULL, return with bit 0 (LSB) set if the terminating byte was not found and with bit 1 set if the value overflows a uint64_t. No bytes will be read at address END or beyond. 
Name: process_extended_line_op; Comment: Handled an extend line op. Returns the number of bytes read. 
Name: fetch_indexed_value; Comment: Fetch a value from a debug section that has been indexed by something in another section (eg DW_FORM_loclistx or DW_FORM_rnglistx). Returns -1 if the value could not be found. 
Name: find_abbrev_map_by_offset; Comment: FIXME: This function is going to slow down readelf & objdump. Not caching abbrevs is likely the answer. 
Name: process_abbrev_set; Comment: Return processed (partial) contents of a .debug_abbrev section. Returns NULL on errors. 
Name: find_and_process_abbrev_set; Comment: Return a sequence of abbrevs in SECTION starting at ABBREV_BASE plus ABBREV_OFFSET and finishing at ABBREV_BASE + ABBREV_SIZE. If FREE_LIST is non-NULL search the already decoded abbrevs on abbrev_lists first and if found set *FREE_LIST to NULL. If searching doesn't find a matching abbrev, set *FREE_LIST to the newly allocated list. If FREE_LIST is NULL, no search is done and the returned abbrev_list is always newly allocated. 
Name: find_cu_tu_set_v2; Comment: Find the CU or TU set corresponding to the given CU_OFFSET. This is used for DWARF package files. 
Name: get_type_abbrev_from_form; Comment: Given form FORM with value UVALUE, locate and return the abbreviation associated with it. 
Name: get_type_signedness; Comment: Return IS_SIGNED set to TRUE if the type using abbreviation ENTRY can be determined to be a signed type. The data for ENTRY can be found starting at DATA. 
Name: load_debug_section_with_follow; Comment: Like load_debug_section, but if the ordinary call fails, and we are following debug links, then attempt to load the requested section from one of the separate debug info files. 
Name: free_debug_information; Comment: Free memory allocated for one unit in debug_information. 
Name: process_debug_info; Comment: Process the contents of a .debug_info section. If do_loc is TRUE then we are scanning for location lists and dwo tags and we do not want to display anything to the user. If do_types is TRUE, we are processing a .debug_types section instead of a .debug_info section. The information displayed is restricted by the values in DWARF_START_DIE and DWARF_CUTOFF_LEVEL. Returns TRUE upon success. Otherwise an error or warning message is printed and FALSE is returned. 
Name: load_debug_info; Comment: Locate and scan the .debug_info section in the file and record the pointer sizes and offsets for the compilation units in it. Usually an executable will have just one pointer size, but this is not guaranteed, and so we try not to make any assumptions. Returns zero upon failure, or the number of compilation units upon success. 
Name: read_debug_line_header; Comment: Read a DWARF .debug_line section header starting at DATA. Upon success returns an updated DATA pointer and the LINFO structure and the END_OF_SEQUENCE pointer will be filled in. Otherwise returns NULL. 
Name: display_debug_lines_decoded; Comment: Output a decoded representation of the .debug_line section. 
Name: get_line_filename_and_dirname; Comment: Given LINE_OFFSET into the .debug_line section, attempt to return filename and dirname corresponding to file name table entry with index FILEIDX. Return NULL on failure. 
Name: is_max_address; Comment: Return true when ADDR is the maximum address, when addresses are POINTER_SIZE bytes long. 
Name: display_view_pair_list; Comment: Display a view pair list starting at *VSTART_PTR and ending at VLISTEND within SECTION. 
Name: display_loc_list; Comment: Display a location list from a normal (ie, non-dwo) .debug_loc section. 
Name: display_loclists_list; Comment: Display a location list from a normal (ie, non-dwo) .debug_loclists section. 
Name: print_addr_index; Comment: Print a .debug_addr table index in decimal, surrounded by square brackets, right-adjusted in a field of length LEN, and followed by a space. 
Name: display_loc_list_dwo; Comment: Display a location list from a .dwo section. It uses address indexes rather than embedded addresses. This code closely follows display_loc_list, but the two are sufficiently different that combining things is very ugly. 
Name: comp_addr_base; Comment: Comparison function for qsort. 
Name: display_debug_addr; Comment: Display the debug_addr section. 
Name: display_debug_str_offsets; Comment: Display the .debug_str_offsets and .debug_str_offsets.dwo sections. 
Name: range_entry_compar; Comment: Sort struct range_entry in ascending order of its RANGES_OFFSET. 
Name: frame_need_space; Comment: Return 0 if no more space is needed, 1 if more space is needed, -1 for invalid reg. 
Name: regname_internal_riscv; Comment: A RISC-V replacement for REGNAME_INTERNAL_BY_TABLE_ONLY which handles the large number of CSRs. 
Name: init_dwarf_regnames_by_bfd_arch_and_mach; Comment: Initialize the DWARF register name lookup state based on the architecture and specific machine type of a BFD. 
Name: display_data; Comment: Prints out the contents on the DATA array formatted as unsigned bytes. If do_wide is not enabled, then formats the output to fit into 80 columns. PRINTED contains the number of characters already written to the current output line. 
Name: display_augmentation_data; Comment: Prints out the contents on the augmentation data array. If do_wide is not enabled, then formats the output to fit into 80 columns. 
Name: prealloc_cu_tu_list; Comment: Pre-allocate enough space for the CU/TU sets needed. 
Name: get_DW_SECT_short_name; Comment: Return the short name of a DWARF section given by a DW_SECT enumerator. 
Name: process_cu_tu_index; Comment: Process a CU or TU index. If DO_DISPLAY is true, print the contents. These sections are extensions for Fission. See http://gcc.gnu.org/wiki/DebugFissionDWP. 
Name: load_cu_tu_indexes; Comment: Load the CU and TU indexes if present. This will build a list of section sets that we can use to associate a .debug_info.dwo section with its associated .debug_abbrev.dwo section in a .dwp file. 
Name: find_cu_tu_set; Comment: Find the set of sections that includes section SHNDX. 
Name: display_cu_index; Comment: Display a .debug_cu_index or .debug_tu_index section. 
Name: cmalloc; Comment: Like malloc, but takes two parameters like calloc. Verifies that the first parameter is not too large. Note: does *not* initialise the allocated memory to zero. 
Name: xcmalloc; Comment: Like xmalloc, but takes two parameters like calloc. Verifies that the first parameter is not too large. Note: does *not* initialise the allocated memory to zero. 
Name: xcrealloc; Comment: Like xrealloc, but takes three parameters. Verifies that the second parameter is not too large. Note: does *not* initialise any new memory to zero. 
Name: xcalloc2; Comment: Like xcalloc, but verifies that the first parameter is not too large. 
Name: debuginfod_fetch_separate_debug_info; Comment: Query debuginfod servers for the target debuglink or debugaltlink file. If successful, store the path of the file in filename and return TRUE, otherwise return FALSE. 
Name: load_dwo_file; Comment: Attempt to load a separate dwarf object file. 
Name: load_build_id_debug_file; Comment: Try to load a debug file based upon the build-id held in the .note.gnu.build-id section. 
Name: load_debug_sup_file; Comment: Try to load a debug file pointed to by the .debug_sup section. 
Name: check_for_and_load_links; Comment: Load a debuglink section and/or a debugaltlink section, if either are present. Recursively check the loaded files for more of these sections. Also follow any links in .debug_sup sections. FIXME: Should also check for DWO_* entries in the newly loaded files. 
Name: load_separate_debug_files; Comment: Load the separate debug info file(s) attached to FILE, if any exist. Returns TRUE if any were found, FALSE otherwise. If TRUE is returned then the linked list starting at first_separate_info will be populated with open file handles. 
Name: dwarf_select_sections_by_names; Comment: Enable display of specific DWARF sections as determined by the comma separated strings in NAMES. Returns non-zero if any displaying was enabled. 
Name: dwarf_select_sections_by_letters; Comment: Enable display of specific DWARF sections as determined by the characters in LETTERS. Returns non-zero if any displaying was enabled. 
Name: adjust_relative_path; Comment: Return the path name for a proxy entry in a thin archive, adjusted relative to the path name of the thin archive itself if necessary. Always returns a pointer to malloc'ed memory. 
Name: process_archive_index_and_symbols; Comment: Processes the archive index table and symbol table in ARCH. Entries in the index table are SIZEOF_AR_INDEX bytes long. Fills in ARCH->next_arhdr_offset and ARCH->arhdr. If READ_SYMBOLS is true then fills in ARCH->index_num, ARCH->index_array, ARCH->sym_size and ARCH->sym_table. It is the caller's responsibility to free ARCH->index_array and ARCH->sym_table. Returns 1 upon success, 0 otherwise. If failure occurs an error message is printed. 
Name: setup_archive; Comment: Read the symbol table and long-name table from an archive. 
Name: setup_nested_archive; Comment: Open and setup a nested archive, if not already open. 
Name: release_archive; Comment: Release the memory used for the archive information. 
Name: get_archive_member_name; Comment: Get the name of an archive member from the current archive header. For simple names, this will modify the ar_name field of the current archive header. For long names, it will return a pointer to the longnames table. For nested archives, it will open the nested archive and get the name recursively. NESTED_ARCH is a single-entry cache so we don't keep rereading the same information from a nested archive. 
Name: get_archive_member_name_at; Comment: Get the name of an archive member at a given OFFSET within an archive ARCH. 
Name: make_qualified_name; Comment: Construct a string showing the name of the archive member, qualified with the name of the containing archive file. For thin archives, we use square brackets to denote the indirection. For nested archives, we show the qualified name of the external member inside the square brackets (e.g., "thin.a[normal.a(foo.o)]"). 
Name: elf_x86_feature; Comment: Set enable_x86_features and disable_x86_features for a feature string, FEATURE. 
Name: elf_class; Comment: Return ELF class for a machine type, MACH. 
Name: process_object; Comment: Process one ELF object file according to the command line options. This file may actually be stored in an archive. The file is positioned at the start of the ELF object. 
Name: process_archive; Comment: Process an ELF archive. On entry the file is positioned just after the ARMAG string. 
Name: elf_osabi; Comment: Return ELFOSABI_XXX for an OSABI string, OSABI. 
Name: elf_machine; Comment: Return EM_XXX for a machine string, MACH. 
Name: elf_type; Comment: Return ET_XXX for a type string, TYPE. 
Name: mode_string; Comment: Like filemodestring, but only the relevant part of the `struct stat' is given as an argument. 
Name: setst; Comment: Set the 's' and 't' flags in file attributes string CHARS, according to the file mode BITS. 
Name: skip_until_eol; Comment: Skip characters in input_stream_pos up to and including a newline character. Returns non-zero if the newline was found, zero otherwise. 
Name: usage; Comment: Some error-reporting functions. 
Name: set_print_radix; Comment: Set the radix for the symbol value and size according to RADIX. 
Name: display_utf8; Comment: Convert a potential UTF-8 encoded sequence in IN into characters in OUT. The conversion format is controlled by the unicode_display variable. Returns the number of characters added to OUT. Returns the number of bytes consumed from IN in CONSUMED. Always consumes at least one byte and displays at least one character. 
Name: convert_utf8; Comment: Convert any UTF-8 encoded characters in NAME into the form specified by unicode_display. Also converts control characters. Returns a static buffer if conversion was necessary. Code stolen from objdump.c:sanitize_string(). 
Name: print_symname; Comment: Print symbol name NAME, read from ABFD, with printf format FORM, demangling it if requested. 
Name: filter_symbols; Comment: Choose which symbol entries to print; compact them downward to get rid of the rest. Return the number of symbols to be printed. 
Name: non_numeric_forward; Comment: Numeric sorts. Undefined symbols are always considered "less than" defined symbols with zero values. Common symbols are not treated specially -- i.e., their sizes are used as their "values". 
Name: size_forward1; Comment: This sort routine is used by sort_symbols_by_size. It is similar to numeric_forward, but when symbols have the same value it sorts by section VMA. This simplifies the sort_symbols_by_size code which handles symbols at the end of sections. Also, this routine tries to sort file names before other symbols with the same value. That will make the file name have a zero size, which will make sort_symbols_by_size choose the non file name symbol, leading to more meaningful output. For similar reasons, this code sorts gnu_compiled_* and gcc2_compiled before other symbols with the same value. 
Name: size_forward2; Comment: This sort routine is used by sort_symbols_by_size. It is sorting an array of size_sym structures into size order. 
Name: sort_symbols_by_size; Comment: Sort the symbols by size. ELF provides a size but for other formats we have to make a guess by assuming that the difference between the address of a symbol and the address of the next higher symbol is the size. 
Name: get_relocs; Comment: This function is used to get the relocs for a particular section. It is called via bfd_map_over_sections. 
Name: print_symbol; Comment: Print a single symbol. 
Name: print_size_symbols; Comment: Print the symbols when sorting by size. 
Name: print_symbols; Comment: Print the symbols of ABFD that are held in MINISYMS. If ARCHIVE_BFD is non-NULL, it is the archive containing ABFD. SYMCOUNT is the number of symbols in MINISYMS. SIZE is the size of a symbol in MINISYMS. 
Name: display_rel_file; Comment: If ARCHIVE_BFD is non-NULL, it is the archive containing ABFD. 
Name: get_print_format; Comment: Construct a formatting string for printing symbol values. 
Name: print_object_filename_bsd; Comment: Print the name of an object file given on the command line. 
Name: print_archive_filename_bsd; Comment: Print the name of an archive file given on the command line. 
Name: print_archive_member_bsd; Comment: Print the name of an archive member file. 
Name: print_symbol_filename_bsd; Comment: Print the name of the file (and archive, if there is one) containing a symbol. 
Name: print_value; Comment: Print a symbol value. 
Name: print_symbol_info_bsd; Comment: Print a line of information about a symbol. 
Name: parse_flags; Comment: Parse section flags into a flagword, with a fatal error if the string can't be parsed. 
Name: parse_symflags; Comment: Parse symbol flags into a flagword, with a fatal error if the string can't be parsed. 
Name: find_section_list; Comment: Find and optionally add an entry in the change_sections list. We need to be careful in how we match section names because of the support for wildcard characters. For example suppose that the user has invoked objcopy like this: --set-section-flags .debug_*=debug --set-section-flags .debug_str=readonly,debug --change-section-address .debug_*ranges=0x1000 With the idea that all debug sections will receive the DEBUG flag, the .debug_str section will also receive the READONLY flag and the .debug_ranges and .debug_aranges sections will have their address set to 0x1000. (This may not make much sense, but it is just an example). When adding the section name patterns to the section list we need to make sure that previous entries do not match with the new entry, unless the match is exact. (In which case we assume that the user is overriding the previous entry with the new context). When matching real section names to the section list we make use of the wildcard characters, but we must do so in context. Eg if we are setting section addresses then we match for .debug_ranges but not for .debug_info. Finally, if ADD is false and we do find a match, we mark the section list entry as used. 
Name: eq_string_redefnode; Comment: S1 is the entry node already in the table, S2 is the key node. 
Name: htab_hash_redefnode; Comment: P is redefine node. Hash value is generated from its "source" filed. 
Name: create_symbol2redef_htab; Comment: Create hashtab used for redefine node. 
Name: add_specific_symbol; Comment: Add a symbol to strip_specific_list. 
Name: add_specific_symbol_node; Comment: Like add_specific_symbol, but the element type is void *. 
Name: is_specified_symbol_predicate; Comment: See whether a symbol should be stripped or kept based on strip_specific_list and keep_symbols. 
Name: group_signature; Comment: Return a pointer to the symbol used as a signature for GROUP. 
Name: is_dwo_section; Comment: Return TRUE if the section is a DWO section. 
Name: is_update_section; Comment: Return TRUE if section SEC is in the update list. 
Name: is_strip_section_1; Comment: See if a non-group section is being removed. 
Name: is_strip_section; Comment: See if a section is being removed. 
Name: is_hidden_symbol; Comment: Return true if SYM is a hidden symbol. 
Name: filter_symbols; Comment: Choose which symbol entries to copy; put the result in OSYMS. We don't copy in place, because that confuses the relocs. Return the number of symbols to print. 
Name: lookup_sym_redefinition; Comment: Find the redefined name of symbol SOURCE. 
Name: add_redefine_and_check; Comment: Insert a node into symbol redefine hash tabel. 
Name: add_redefine_syms_file; Comment: Handle the --redefine-syms option. Read lines containing "old new" from the file, and add them to the symbol redefine list. 
Name: copy_unknown_object; Comment: Copy unknown object file IBFD onto OBFD. Returns TRUE upon success, FALSE otherwise. 
Name: overlaps_or_adjoins; Comment: Returns TRUE iff PNOTE1 overlaps or adjoins PNOTE2. 
Name: contained_by; Comment: Returns TRUE iff NEEDLE is fully contained by HAYSTACK. 
Name: compare_gnu_build_notes; Comment: This sorting function is used to get the notes into an order that makes merging easy. 
Name: sort_gnu_build_notes; Comment: This sorting function is used to get the notes into an order that makes eliminating address ranges easier. 
Name: merge_gnu_build_notes; Comment: Merge the notes on SEC, removing redundant entries. Returns the new, smaller size of the section upon success. 
Name: copy_object; Comment: Copy object file IBFD onto OBFD. Returns TRUE upon success, FALSE otherwise. 
Name: copy_archive; Comment: Read each archive element in turn from IBFD, copy the contents to temp file, and keep the temp file handle. If 'force_output_target' is TRUE then make sure that all elements in the new archive are of the type 'output_target'. 
Name: copy_file; Comment: The top-level control. 
Name: add_section_rename; Comment: Add a name to the section renaming list. 
Name: find_section_rename; Comment: Check the section rename list for a new name of the input section called OLD_NAME. Returns the new name if one is found and sets RETURNED_FLAGS if non-NULL to the flags to be used for this section. 
Name: setup_bfd_headers; Comment: Once each of the sections is copied, we may still need to do some finalization work for private section headers. Do that here. 
Name: setup_section; Comment: Create a section in OBFD with the same name and attributes as ISECTION in IBFD. 
Name: skip_section; Comment: Return TRUE if input section ISECTION should be skipped. 
Name: handle_remove_relocations_option; Comment: Add section SECTION_PATTERN to the list of sections that will have their relocations removed. 
Name: discard_relocations; Comment: Return TRUE if ISECTION from IBFD should have its relocations removed, otherwise return FALSE. If the user has requested that relocations be removed from a section that does not have relocations then this function will still return TRUE. 
Name: handle_remove_section_option; Comment: Wrapper for dealing with --remove-section (-R) command line arguments. A special case is detected here, if the user asks to remove a relocation section (one starting with ".rela" or ".rel") then this removal must be done using a different technique in a relocatable object. 
Name: copy_relocations_in_section; Comment: Copy relocations in input section ISECTION of IBFD to an output section with the same name in OBFDARG. If stripping then don't copy any relocation info. 
Name: copy_section; Comment: Copy the data of input section ISECTION of IBFD to an output section with the same name in OBFD. 
Name: get_sections; Comment: Get all the sections. This is used when --gap-fill or --pad-to is used. 
Name: compare_section_lma; Comment: Sort sections by LMA. This is called via qsort, and is used when --gap-fill or --pad-to is used. We force non loadable or empty sections to the front, where they are easier to ignore. 
Name: mark_symbols_used_in_relocations; Comment: Mark all the symbols which will be used in output relocations with the BSF_KEEP flag so that those symbols will not be stripped. Ignore relocations which will not appear in the output file. 
Name: write_debugging_info; Comment: Write out debugging information. 
Name: set_pe_subsystem; Comment: Set up PE subsystem. 
Name: convert_efi_target; Comment: Convert EFI target to PEI target. 
Name: init_section_add; Comment: Allocate and return a pointer to a struct section_add, initializing the structure using ARG, a string in the format "sectionname=filename". The returned structure will have its next pointer set to NEXT. The OPTION field is the name of the command line option currently being parsed, and is only used if an error needs to be reported. 
Name: section_add_load_file; Comment: Load the file specified in PA, allocating memory to hold the file contents, and store a pointer to the allocated memory in the contents field of PA. The size field of PA is also updated. All errors call FATAL. 
Name: sanitize_string; Comment: Returns a version of IN with any control characters replaced by escape sequences. Uses a static buffer if necessary. If unicode display is enabled, then also handles the conversion of unicode characters. 
Name: process_section_p; Comment: Returns TRUE if the specified section should be dumped. 
Name: add_only; Comment: Add an entry to the 'only' list. 
Name: free_only_list; Comment: Release the memory used by the 'only' list. PR 11225: Issue a warning message for unseen sections. Only do this if none of the sections were seen. This is mainly to support tools like the GAS testsuite where an object file is dumped with a list of generic section names known to be present in a range of different file formats. 
Name: find_longest_section_name; Comment: Called on each SECTION in ABFD, update the int variable pointed to by DATA which contains the string length of the longest section name. 
Name: slurp_dynamic_symtab; Comment: Read in the dynamic symbols. 
Name: is_significant_symbol_name; Comment: Some symbol names are significant and should be kept in the table of sorted symbol names, even if they are marked as debugging/section symbols. 
Name: remove_useless_symbols; Comment: Filter out (in place) symbols that are useless for disassembly. COUNT is the number of elements in SYMBOLS. Return the number of useful symbols. 
Name: compare_symbols; Comment: Sort symbols into value order. 
Name: compare_relocs; Comment: Sort relocs into address order. 
Name: objdump_print_value; Comment: Print an address (VMA) to the output stream in INFO. If SKIP_ZEROES is TRUE, omit leading zeroes. 
Name: objdump_print_symname; Comment: Print the name of a symbol. 
Name: find_symbol_for_address; Comment: Locate a symbol given a bfd and a section (from INFO->application_data), and a VMA. If INFO->application_data->require_sec is TRUE, then always require the symbol to be in the section. Returns NULL if there is no suitable symbol. If PLACE is not NULL, then *PLACE is set to the index of the symbol in sorted_syms. 
Name: objdump_print_addr_with_sym; Comment: Print an address and the offset to the nearest symbol. 
Name: objdump_print_addr; Comment: Print an address (VMA), symbolically if possible. If SKIP_ZEROES is TRUE, don't output leading zeroes. 
Name: objdump_print_address; Comment: Print VMA to INFO. This function is passed to the disassembler routine. 
Name: objdump_symbol_at_address; Comment: Determine if the given address has a symbol associated with it. 
Name: get_build_id; Comment: Return a hex string represention of the build-id. 
Name: find_separate_debug; Comment: Search for a separate debug file matching ABFD's build-id. 
Name: find_alt_debug; Comment: Search for a separate debug file matching ABFD's .gnu_debugaltlink build-id. 
Name: slurp_file; Comment: Reads the contents of file FN into memory. Returns a pointer to the buffer. Also returns the size of the buffer in SIZE_RETURN and a filled out stat structure in FST_RETURN. Returns NULL upon failure. 
Name: index_file; Comment: Precompute array of lines for a mapped file. 
Name: try_print_file_open; Comment: Tries to open MODNAME, and if successful adds a node to print_files linked list and returns that node. Also fills in the stat structure pointed to by FST_RETURN. Returns NULL on failure. 
Name: update_source_path; Comment: If the source file, as described in the symtab, is not found try to locate it in one of the paths specified with -I If found, add location to print_files linked list. 
Name: print_line; Comment: Print a source file line. 
Name: dump_lines; Comment: Print a range of source code lines. 
Name: show_line; Comment: Show the line number, or the source line, in a disassembly listing. 
Name: objdump_sprintf; Comment: sprintf to a "stream". 
Name: objdump_color_for_disassembler_style; Comment: Return an integer greater than, or equal to zero, representing the color for STYLE, or -1 if no color should be used. 
Name: objdump_styled_sprintf; Comment: Like objdump_sprintf, but add in escape sequences to highlight the content according to STYLE. 
Name: fprintf_styled; Comment: We discard the styling information here. This function is only used when objdump is printing auxiliary information, the symbol headers, and disassembly address, or the bytes of the disassembled instruction. We don't (currently) apply styling to any of this stuff, so, for now, just print the content with no additional style added. 
Name: jump_info_new; Comment: Construct a jump object for a jump from start to end with the corresponding level. 
Name: jump_info_free; Comment: Free a jump object and return the next object or NULL if this was the last one. 
Name: jump_info_min_address; Comment: Get the smallest value of all start and end addresses. 
Name: jump_info_max_address; Comment: Get the largest value of all start and end addresses. 
Name: jump_info_end_address; Comment: Get the target address of a jump. 
Name: jump_info_is_start_address; Comment: Test if an address is one of the start addresses of a jump. 
Name: jump_info_is_end_address; Comment: Test if an address is the target address of a jump. 
Name: jump_info_size; Comment: Get the difference between the smallest and largest address of a jump. 
Name: jump_info_unlink; Comment: Unlink a jump object from a list. 
Name: jump_info_insert; Comment: Insert unlinked jump info node into a list. 
Name: jump_info_add_front; Comment: Add unlinked node to the front of a list. 
Name: jump_info_move_linked; Comment: Move linked node to target position. 
Name: jump_info_intersect; Comment: Test if two jumps intersect. 
Name: jump_info_merge; Comment: Merge two compatible jump info objects. 
Name: jump_info_sort; Comment: Sort jumps by their size and starting point using a stable minsort. This could be improved if sorting performance is an issue, for example by using mergesort. 
Name: jump_info_visualize_address; Comment: Visualize all jumps at a given address. 
Name: disassemble_jumps; Comment: FIXME: is this correct? Can we strip it down even further? 
Name: null_print; Comment: The number of zeroes to skip at the end of a section. If the number of zeroes at the end is between SKIP_ZEROES_AT_END and SKIP_ZEROES, they will be disassembled. If there are fewer than SKIP_ZEROES_AT_END, they will be skipped. This is a heuristic attempt to avoid disassembling zeroes inserted by section alignment. 
Name: null_styled_print; Comment: Like null_print, but takes the extra STYLE argument. As this is not going to print anything, the extra argument is just ignored. 
Name: print_jump_visualisation; Comment: Print out jump visualization. 
Name: disassemble_bytes; Comment: Disassemble some data in memory between given values. 
Name: disassemble_data; Comment: Disassemble the contents of an object file. 
Name: dump_dwarf; Comment: Dump the dwarf debugging information. 
Name: read_section_stabs; Comment: Read ABFD's stabs section STABSECT_NAME, and return a pointer to it. Return NULL on failure. 
Name: print_section_stabs; Comment: Print ABFD's stabs section STABSECT_NAME (in `stabs'), using string table section STRSECT_NAME (in `strtab'). 
Name: dump_stabs; Comment: Dump the any sections containing stabs debugging information. 
Name: dump_ctf_indent_lines; Comment: Formatting callback function passed to ctf_dump. Returns either the pointer it is passed, or a pointer to newly-allocated storage, in which case dump_ctf() will free it when it no longer needs it. 
Name: make_ctfsect; Comment: Make a ctfsect suitable for ctf_bfdopen_ctfsect(). 
Name: dump_ctf_errs; Comment: Dump CTF errors/warnings. 
Name: dump_ctf_archive_member; Comment: Dump one CTF archive member. 
Name: dump_ctf; Comment: Dump the CTF debugging information. 
Name: dump_section; Comment: Display a section in hexadecimal format with associated characters. Each line prefixed by the zero padded address. 
Name: dump_data; Comment: Actually display the various requested regions. 
Name: dump_symbols; Comment: Should perhaps share code and display with nm? 
Name: add_include_path; Comment: Creates a table of paths, to search for source files. 
Name: sign_extend_address; Comment: Return the sign-extended form of an ARCH_SIZE sized VMA. 
Name: dump_bfd; Comment: Dump selected contents of ABFD. 
Name: elf32_avr_help; Comment: Display help. 
Name: elf32_avr_filter; Comment: Return TRUE if ABFD is handled. 
Name: mach_o_help; Comment: Display help. 
Name: mach_o_filter; Comment: Return TRUE if ABFD is handled. 
Name: dump_unwind_encoding_x86; Comment: Dump x86 or x86-64 compact unwind encoding. Works for both architecture, as the encoding is the same (but not register names). 
Name: dump_unwind_encoding_arm64; Comment: Dump arm64 compact unwind entries. 
Name: mach_o_dump; Comment: Dump ABFD (according to the options[] array). 
Name: xcoff_help; Comment: Display help. 
Name: xcoff_filter; Comment: Return TRUE if ABFD is handled. 
Name: dump_flags; Comment: Display the list of name (from TABLE) for FLAGS, using comma to separate them. A name is displayed if FLAGS & VAL is not 0. 
Name: dump_value; Comment: Display the name corresponding to VAL from TABLE, using at most MAXLEN char (possibly passed with spaces). 
Name: xcoff32_print_symbol; Comment: Print a symbol (if possible). 
Name: dump_xcoff32_file_header; Comment: Dump the file header. 
Name: dump_xcoff32_aout_header; Comment: Dump the a.out header. 
Name: dump_xcoff32_sections_header; Comment: Dump the sections header. 
Name: xcoff32_read_sections; Comment: Read section table. 
Name: xcoff32_read_symbols; Comment: Read symbols. 
Name: dump_xcoff32_symbols; Comment: Dump xcoff symbols. 
Name: dump_xcoff32_relocs; Comment: Dump xcoff relocation entries. 
Name: dump_xcoff32_lineno; Comment: Dump xcoff line number entries. 
Name: dump_xcoff32_loader; Comment: Dump xcoff loader section. 
Name: dump_xcoff32_except; Comment: Dump xcoff exception section. 
Name: dump_xcoff32_typchk; Comment: Dump xcoff type-check section. 
Name: dump_xcoff32_tbtags; Comment: Dump xcoff traceback tags section. 
Name: dump_xcoff32_toc; Comment: Dump the TOC symbols. 
Name: dump_xcoff32; Comment: Handle an rs6000 xcoff file. 
Name: xcoff_dump_obj; Comment: Dump ABFD (according to the options[] array). 
Name: dump_dumpx_core; Comment: Handle an AIX dumpx core file. 
Name: xcoff_dump_core; Comment: Dump a core file. 
Name: xcoff_dump; Comment: Dump an XCOFF file. 
Name: print_debugging_info; Comment: Print out the generic debugging information recorded in dhandle. 
Name: indent; Comment: Indent to the current indentation level. 
Name: push_type; Comment: Push a type on the type stack. 
Name: prepend_type; Comment: Prepend a string onto the type on the top of the type stack. 
Name: append_type; Comment: Append a string to the type on the top of the type stack. 
Name: append_parent; Comment: Append a string to the parents on the top of the type stack. 
Name: substitute_type; Comment: We use an underscore to indicate where the name should go in a type string. This function substitutes a string for the underscore. If there is no underscore, the name follows the type. 
Name: indent_type; Comment: Indent the type at the top of the stack by appending spaces. 
Name: pop_type; Comment: Pop a type from the type stack. 
Name: print_vma; Comment: Print a VMA value into a string. 
Name: pr_start_compilation_unit; Comment: Start a new compilation unit. 
Name: pr_start_source; Comment: Start a source file within a compilation unit. 
Name: pr_empty_type; Comment: Push an empty type onto the type stack. 
Name: pr_void_type; Comment: Push a void type onto the type stack. 
Name: pr_int_type; Comment: Push an integer type onto the type stack. 
Name: pr_float_type; Comment: Push a floating type onto the type stack. 
Name: pr_complex_type; Comment: Push a complex type onto the type stack. 
Name: pr_bool_type; Comment: Push a bool type onto the type stack. 
Name: pr_enum_type; Comment: Push an enum type onto the type stack. 
Name: pr_pointer_type; Comment: Turn the top type on the stack into a pointer. 
Name: pr_function_type; Comment: Turn the top type on the stack into a function returning that type. 
Name: pr_reference_type; Comment: Turn the top type on the stack into a reference to that type. 
Name: pr_range_type; Comment: Make a range type. 
Name: pr_array_type; Comment: Make an array type. 
Name: pr_set_type; Comment: Make a set type. 
Name: pr_offset_type; Comment: Make an offset type. 
Name: pr_method_type; Comment: Make a method type. 
Name: pr_const_type; Comment: Make a const qualified type. 
Name: pr_volatile_type; Comment: Make a volatile qualified type. 
Name: pr_start_struct_type; Comment: Start accumulating a struct type. 
Name: cpp_line; Comment: Handle a C preprocessor line. 
Name: get_string; Comment: Allocate a string of a given length. 
Name: handle_quotes; Comment: Handle a quoted string. The quotes are stripped. A pair of quotes in a string are turned into a single quote. Adjacent strings are merged separated by whitespace are merged, as in C. 
Name: get_unistring; Comment: Allocate a unicode string of a given length. 
Name: handle_uniquotes; Comment: Handle a quoted unicode string. The quotes are stripped. A pair of quotes in a string are turned into a single quote. Adjacent strings are merged separated by whitespace are merged, as in C. 
Name: rcparse_discard_strings; Comment: Discard all the strings we have allocated. The parser calls this when it no longer needs them. 
Name: rcparse_rcdata; Comment: Enter rcdata mode. 
Name: rcparse_normal; Comment: Go back to normal mode from rcdata mode. 
Name: yylex; Comment: yyparser entry method. 
Name: rcparse_set_language; Comment: Set the language from the command line. 
Name: coff_get_slot; Comment: Return the slot for a type. 
Name: parse_coff_type; Comment: Parse a COFF type code in NTYPE. 
Name: parse_coff_base_type; Comment: Parse a basic COFF type in NTYPE. 
Name: parse_coff_struct_type; Comment: Parse a struct type. 
Name: parse_coff_enum_type; Comment: Parse an enum type. 
Name: parse_coff_symbol; Comment: Handle a single COFF symbol. 
Name: external_coff_symbol_p; Comment: Determine if a symbol has external visibility. 
Name: parse_coff; Comment: This is the main routine. It looks through all the symbols and handles them. 
Name: read_debugging_info; Comment: Read debugging information from a BFD. Returns a generic debugging pointer. 
Name: read_section_stabs_debugging_info; Comment: Read stabs in sections debugging information from a BFD. 
Name: read_symbol_stabs_debugging_info; Comment: Read stabs in the symbol table. 
Name: save_stab; Comment: Save a stabs string. 
Name: stab_context; Comment: Provide context for an error. 
Name: free_saved_stabs; Comment: Free the saved stab strings. 
Name: get_data; Comment: Retrieve NMEMB structures, each SIZE bytes long from FILEDATA starting at OFFSET + the offset of the current archive member, if we are examining an archive. Put the retrieved data into VAR, if it is not NULL. Otherwise allocate a buffer using malloc and fill that. In either case return the pointer to the start of the retrieved data or NULL if something went wrong. If something does go wrong and REASON is not NULL then emit an error message using REASON as part of the context. 
Name: print_vma; Comment: Print a VMA value in the MODE specified. Returns the number of characters displayed. 
Name: print_symbol; Comment: Display a symbol on stdout. Handles the display of control characters and multibye characters (assuming the host environment supports them). Display at most abs(WIDTH) characters, truncating as necessary, unless do_wide is true. If truncation will happen and do_not_show_symbol_truncation is FALSE then display abs(WIDTH) - 5 characters followed by "[...]". If WIDTH is negative then ensure that the output is at least (- WIDTH) characters, padding as necessary. Returns the number of emitted characters. 
Name: printable_section_name; Comment: Returns a pointer to a static buffer containing a printable version of the given section's name. Like print_symbol, except that it does not try to print multibyte characters, it just interprets them as hex values. 
Name: find_section; Comment: Return a pointer to section NAME, or NULL if no such section exists. 
Name: find_section_by_address; Comment: Return a pointer to a section containing ADDR, or NULL if no such section exists. 
Name: find_section_in_set; Comment: Return a pointer to section NAME, or NULL if no such section exists, restricted to the list of sections given in SET. 
Name: guess_is_rela; Comment: Guess the relocation size commonly used by the specific machines. 
Name: slurp_rela_relocs; Comment: Load RELA type relocations from FILEDATA at REL_OFFSET extending for REL_SIZE bytes. Returns TRUE upon success, FALSE otherwise. If successful then a pointer to a malloc'ed buffer containing the relocs is placed in *RELASP, and the number of relocs loaded is placed in *NRELASP. It is the caller's responsibility to free the allocated buffer. 
Name: slurp_rel_relocs; Comment: Load REL type relocations from FILEDATA at REL_OFFSET extending for REL_SIZE bytes. Returns TRUE upon success, FALSE otherwise. If successful then a pointer to a malloc'ed buffer containing the relocs is placed in *RELSP, and the number of relocs loaded is placed in *NRELSP. It is the caller's responsibility to free the allocated buffer. 
Name: get_reloc_type; Comment: Returns the reloc type extracted from the reloc info field. 
Name: get_reloc_symindex; Comment: Return the symbol index extracted from the reloc info field. 
Name: dump_relocations; Comment: Display the contents of the relocation data found at the specified offset. 
Name: request_dump_bynumber; Comment: Record the fact that the user wants the contents of section number SECTION to be displayed using the method(s) encoded as flags bits in TYPE. Note, TYPE can be zero if we are creating the array for the first time. 
Name: request_dump_byname; Comment: Request a dump by section name. 
Name: process_file_header; Comment: Decode the data held in 'filedata->file_header'. 
Name: get_32bit_program_headers; Comment: Read in the program headers from FILEDATA and store them in PHEADERS. Returns TRUE upon success, FALSE otherwise. Loads 32-bit headers. 
Name: get_64bit_program_headers; Comment: Read in the program headers from FILEDATA and store them in PHEADERS. Returns TRUE upon success, FALSE otherwise. Loads 64-bit headers. 
Name: get_program_headers; Comment: Returns TRUE if the program headers were read into `program_headers'. 
Name: process_program_headers; Comment: Print program header info and locate dynamic section. 
Name: offset_from_vma; Comment: Find the file offset corresponding to VMA by using the program headers. 
Name: get_32bit_section_headers; Comment: Allocate memory and load the sections headers into FILEDATA->filedata->section_headers. If PROBE is true, this is just a probe and we do not generate any error messages if the load fails. 
Name: get_64bit_section_headers; Comment: Like get_32bit_section_headers, except that it fetches 64-bit headers. 
Name: dump_ia64_vms_dynamic_fixups; Comment: Display IA-64 OpenVMS dynamic fixups (used to dynamically link a shared library). 
Name: dump_ia64_vms_dynamic_relocs; Comment: Display IA-64 OpenVMS dynamic relocations (used to relocate an image). 
Name: process_ia64_vms_dynamic_relocs; Comment: Display IA-64 OpenVMS dynamic relocations and fixups. 
Name: process_relocs; Comment: Process the reloc section. 
Name: find_symbol_for_address; Comment: Find the nearest symbol at or below ADDR. Returns the symbol name, if found, and the offset from the symbol to ADDR. 
Name: symcmp; Comment: signed 
Name: get_unwind_section_word; Comment: 1) If SEC does not match the one cached in ARM_SEC, then free the current cached section and install SEC instead. 2) Locate the 32-bit word at WORD_OFFSET in unwind section SEC and return its valued inWORDP, relocating if necessary. 3) Update the NEXT_RELA field in ARM_SEC and store the section index and relocation's offset in ADDR. 4) If SYM_NAME is non-NULL and a relocation was applied, record the offset into the string table of the symbol associated with the reloc. If no reloc was applied store -1 there. 5) Return TRUE upon success, FALSE otherwise. 
Name: simple_copy; Comment: Copy file FROMFD to file TO, performing no translations. Return 0 if ok, -1 if error. 
Name: set_times; Comment: Set the times of the file DESTINATION to be the same as those in STATBUF. 
Name: smart_rename; Comment: Copy FROM to TO. TARGET_STAT has the file status that, if non-NULL, is used to fix up timestamps. Return 0 if ok, -1 if error. At one time this function renamed files, but file permissions are tricky to update given the number of different schemes used by various systems. So now we just copy. 
Name: bin_to_res; Comment: Given a resource type ID, a pointer to data, a length, return a rc_res_resource structure which represents that resource. The caller is responsible for initializing the res_info and coff_info fields of the returned structure. 
Name: toosmall; Comment: Give an error if the binary data is too small. 
Name: get_unicode; Comment: Swap in a NULL terminated unicode string. 
Name: get_resid; Comment: Get a resource identifier. This returns the number of bytes used. 
Name: bin_to_res_generic; Comment: Convert a resource which just stores uninterpreted data from binary. 
Name: bin_to_res_cursor; Comment: Convert a cursor resource from binary. 
Name: bin_to_res_menu; Comment: Convert a menu resource from binary. 
Name: bin_to_res_menuitems; Comment: Convert menu items from binary. 
Name: bin_to_res_menuexitems; Comment: Convert menuex items from binary. 
Name: bin_to_res_dialog; Comment: Convert a dialog resource from binary. 
Name: bin_to_res_string; Comment: Convert a stringtable resource from binary. 
Name: bin_to_res_fontdir; Comment: Convert a fontdir resource from binary. 
Name: bin_to_res_accelerators; Comment: Convert an accelerators resource from binary. 
Name: bin_to_res_rcdata; Comment: Convert an rcdata resource from binary. 
Name: bin_to_res_group_cursor; Comment: Convert a group cursor resource from binary. 
Name: bin_to_res_group_icon; Comment: Convert a group icon resource from binary. 
Name: get_version_header; Comment: Extract data from a version header. If KEY is not NULL, then the key must be KEY; otherwise, the key is returned in PKEY. This sets *LEN to the total length, *VALLEN to the value length, *TYPE to the type, and *OFF to the offset to the children. 
Name: bin_to_res_version; Comment: Convert a version resource from binary. 
Name: bin_to_res_userdata; Comment: Convert an arbitrary user defined resource from binary. 
Name: res_to_bin; Comment: Convert a resource to binary. 
Name: resid_to_bin; Comment: Convert a resource ID to binary. This always returns exactly one bindata structure. 
Name: unicode_to_bin; Comment: Convert a null terminated unicode string to binary. This always returns exactly one bindata structure. 
Name: res_to_bin_accelerator; Comment: Convert an accelerator resource to binary. 
Name: res_to_bin_cursor; Comment: Convert a cursor resource to binary. 
Name: res_to_bin_group_cursor; Comment: Convert a group cursor resource to binary. 
Name: res_to_bin_dialog; Comment: Convert a dialog resource to binary. 
Name: res_to_bin_fontdir; Comment: Convert a fontdir resource to binary. 
Name: res_to_bin_group_icon; Comment: Convert a group icon resource to binary. 
Name: res_to_bin_menu; Comment: Convert a menu resource to binary. 
Name: res_to_bin_menuitems; Comment: Convert menu items to binary. 
Name: res_to_bin_menuexitems; Comment: Convert menuex items to binary. 
Name: res_to_bin_rcdata; Comment: Convert an rcdata resource to binary. This is also used to convert other information which happens to be stored in rc_rcdata_item lists to binary. 
Name: res_to_bin_stringtable; Comment: Convert a stringtable resource to binary. 
Name: string_to_unicode_bin; Comment: Convert an ASCII string to a unicode binary string. This always returns exactly one bindata structure. 
Name: res_to_bin_versioninfo; Comment: Convert a versioninfo resource to binary. 
Name: res_to_bin_generic; Comment: Convert a generic resource to binary. 
Name: __attribute__; Comment: A resource directory table in a COFF file. 
Name: read_coff_rsrc; Comment: Read the resources in a COFF file. 
Name: overrun; Comment: Give an error if we are out of bounds. 
Name: read_coff_res_dir; Comment: Read a resource directory. 
Name: read_coff_data_entry; Comment: Read a resource data entry. 
Name: write_coff_file; Comment: Write resources to a COFF file. RESOURCES should already be sorted. Right now we always create a new file. Someday we should also offer the ability to merge resources into an existing file. This would require doing the basic work of objcopy, just modifying or adding the .rsrc section. 
Name: coff_bin_sizes; Comment: Work out the sizes of the various fixed size resource directory entries. This updates fields in CWI. 
Name: coff_alloc; Comment: Allocate data for a particular list. 
Name: coff_to_bin; Comment: Convert the resource directory RESDIR to binary. 
Name: coff_res_to_bin; Comment: Convert the resource RES to binary. 
Name: run_cmd; Comment: Run `cmd' and redirect the output to `redir'. 
Name: filename_need_quotes; Comment: Determine if FILENAME contains special characters that can cause problems unless the entire filename is quoted. 
Name: look_for_default; Comment: Look for the preprocessor program. 
Name: read_rc_file; Comment: Read an rc file. 
Name: close_input_stream; Comment: Close the input stream if it is open. 
Name: yyerror; Comment: Report an error while reading an rc file. 
Name: rcparse_warning; Comment: Issue a warning while reading an rc file. 
Name: unexpected_eof; Comment: Die if we get an unexpected end of file. 
Name: get_word; Comment: Read a 16 bit word from a file. The data is assumed to be little endian. 
Name: get_long; Comment: Read a 32 bit word from a file. The data is assumed to be little endian. 
Name: get_data; Comment: Read data from a file. This is a wrapper to do error checking. 
Name: define_accelerator; Comment: Define an accelerator resource. 
Name: define_bitmap; Comment: Define a bitmap resource. Bitmap data is stored in a file. The first 14 bytes of the file are a standard header, which is not included in the resource data. 
Name: define_cursor; Comment: Define a cursor resource. A cursor file may contain a set of bitmaps, each representing the same cursor at various different resolutions. They each get written out with a different ID. The real cursor resource is then a group resource which can be used to select one of the actual cursors. 
Name: define_dialog; Comment: Define a dialog resource. 
Name: define_control; Comment: Define a dialog control. This does not define a resource, but merely allocates and fills in a structure. 
Name: define_font; Comment: Define a font resource. 
Name: define_fontdirs; Comment: Define the fontdirs resource. This is called after the entire rc file has been parsed, if any font resources were seen. 
Name: define_icon; Comment: Define an icon resource. An icon file may contain a set of bitmaps, each representing the same icon at various different resolutions. They each get written out with a different ID. The real icon resource is then a group resource which can be used to select one of the actual icon bitmaps. 
Name: define_menu; Comment: Define a menu resource. 
Name: define_menuitem; Comment: Define a menu item. This does not define a resource, but merely allocates and fills in a structure. 
Name: define_messagetable; Comment: Define a messagetable resource. 
Name: define_rcdata; Comment: Define an rcdata resource. 
Name: define_rcdata_string; Comment: Create an rcdata item holding a string. 
Name: define_rcdata_unistring; Comment: Create an rcdata item holding a unicode string. 
Name: define_rcdata_number; Comment: Create an rcdata item holding a number. 
Name: define_stringtable; Comment: Define a stringtable resource. This is called for each string which appears in a STRINGTABLE statement. 
Name: define_user_data; Comment: Define a user data resource where the data is in the rc file. 
Name: define_user_file; Comment: Define a user data resource where the data is in a file. 
Name: define_versioninfo; Comment: Define a versioninfo resource. 
Name: append_ver_stringfileinfo; Comment: Add string version info to a list of version information. 
Name: append_ver_varfileinfo; Comment: Add variable version info to a list of version information. 
Name: append_verval; Comment: Append version string information to a list. 
Name: append_vertrans; Comment: Append version variable information to a list. 
Name: indent; Comment: Indent a given number of spaces. 
Name: write_rc_file; Comment: Dump the resources we have read in the format of an rc file. Reasoned by the fact, that some resources need to be stored into file and refer to that file, we use the user-data model for that to express it binary without the need to store it somewhere externally. 
Name: write_rc_directory; Comment: Write out a directory. E is the file to write to. RD is the directory. TYPE is a pointer to the level 1 ID which serves as the resource type. NAME is a pointer to the level 2 ID which serves as an individual resource name. LANGUAGE is a pointer to the current language. LEVEL is the level in the tree. 
Name: write_rc_subdir; Comment: Write out a subdirectory entry. E is the file to write to. RE is the subdirectory entry. TYPE and NAME are pointers to higher level IDs, or NULL. LANGUAGE is a pointer to the current language. LEVEL is the level in the tree. 
Name: write_rc_resource; Comment: Write out a single resource. E is the file to write to. TYPE is a pointer to the type of the resource. NAME is a pointer to the name of the resource; it will be NULL if there is a level mismatch. RES is the resource data. LANGUAGE is a pointer to the current language. 
Name: write_rc_accelerators; Comment: Write out accelerator information. 
Name: write_rc_cursor; Comment: Write out cursor information. This would normally be in a separate file, which the rc file would include. 
Name: write_rc_group_cursor; Comment: Write out group cursor data. This would normally be built from the cursor data. 
Name: write_rc_dialog; Comment: Write dialog data. 
Name: write_rc_dialog_control; Comment: Write a dialog control. 
Name: write_rc_fontdir; Comment: Write out font directory data. This would normally be built from the font data. 
Name: write_rc_group_icon; Comment: Write out group icon data. This would normally be built from the icon data. 
Name: write_rc_menu; Comment: Write out a menu resource. 
Name: write_rc_menuitems; Comment: Write out menuitems. 
Name: write_rc_rcdata; Comment: Write out an rcdata resource. This is also used for other types of resources that need to print arbitrary data. 
Name: write_rc_stringtable; Comment: Write out a stringtable resource. 
Name: write_rc_versioninfo; Comment: Write out a versioninfo resource. 
Name: read_res_file; Comment: Read resource file 
Name: write_res_file; Comment: Write resource file 
Name: read_resource_entry; Comment: Read a resource entry, returns 0 when all resources are read 
Name: write_res_directory; Comment: write resource directory to binary resource file 
Name: write_res_bin; Comment: Write a resource in binary resource format 
Name: get_id_size; Comment: Get number of bytes needed to store an id in binary format 
Name: write_res_header; Comment: Write a resource header 
Name: read_res_data; Comment: Read data from file, abort on failure 
Name: write_res_id; Comment: Write a resource id 
Name: write_res_info; Comment: Write resource info 
Name: read_res_id; Comment: read a resource identifier 
Name: read_unistring; Comment: Read a null terminated UNICODE string 
Name: skip_null_resource; Comment: Check if file is a win32 binary resource file, if so skip past the null resource. Returns 0 if successful, -1 on error. 
Name: res_add_resource; Comment: Add a resource to resource directory 
Name: res_append_resource; Comment: Append a resource to resource directory. This is just copied from define_resource and modified to add an existing resource. 
Name: calculate_common_size; Comment: Total size required for common symbols in ABFD. 
Name: display_bfd; Comment: Display stats on file or archive member ABFD. 
Name: strip_suffix; Comment: Just a time on my birthday 
Name: checksum; Comment: IT LEN stuff CS 
Name: walk_tree_type; Comment: None { if (symbol->type->type == coff_function_type) { } } 
Name: find_base; Comment: Find the offset of the .text section for this sfile in the .text section for the output file. 
Name: wr_globals; Comment: Write the global symbols out to the debug info. 
Name: wr_sc; Comment: Write out the SC records for a unit. Create an SC for all the sections which appear in the output file, even if there isn't an equivalent one on the input. 
Name: wr_er; Comment: Write out the ER records for a unit. 
Name: wr_ed; Comment: Write out the ED records for a unit. 
Name: prescan; Comment: Find all the common variables and turn them into ordinary defs - dunno why, but thats what hitachi does with 'em. 
Name: savestring; Comment: Save a string in memory. 
Name: parse_number; Comment: Read a number from a string. 
Name: bad_stab; Comment: Give an error for a bad stab string. 
Name: warn_stab; Comment: Warn about something in a stab string. 
Name: start_stab; Comment: Create a handle to parse stabs symbols with. 
Name: finish_stab; Comment: When we have processed all the stabs information, we need to go through and fill in all the undefined tags. 
Name: parse_stab; Comment: Handle a single stabs symbol. 
Name: parse_stab_string; Comment: Parse the stabs string. 
Name: parse_stab_type; Comment: Parse a stabs type. The typename argument is non-NULL if this is a typedef or a tag definition. The pp argument points to the stab string, and is updated. The slotp argument points to a place to store the slot used if the type is being defined. 
Name: parse_stab_type_number; Comment: Read a number by which a type is referred to in dbx data, or perhaps read a pair (FILENUM, TYPENUM) in parentheses. Just a single number N is equivalent to (0,N). Return the two numbers by storing them in the vector TYPENUMS. 
Name: parse_stab_range_type; Comment: Parse a range type. 
Name: parse_stab_sun_builtin_type; Comment: Sun's ACC uses a somewhat saner method for specifying the builtin typedefs in every file (for int, long, etc): _type = b <signed> <width>; <offset>; <nbits>_signed = u or s. Possible c in addition to u or s (for char?). _offset = offset from high order bit to start bit of type. _width is # bytes in object of this type, nbits is # bits in type. The width/offset stuff appears to be for small objects stored in larger ones (e.g. `shorts' in `int' registers). We ignore it for now, FIXME. 
Name: parse_stab_sun_floating_type; Comment: Parse a builtin floating type generated by the Sun compiler. 
Name: parse_stab_enum_type; Comment: Handle an enum type. 
Name: parse_stab_struct_type; Comment: Read the description of a structure (or union type) and return an object describing the type. PP points to a character pointer that points to the next unconsumed token in the stabs string. For example, given stabs "A:T4=s4a:1,0,32;;", *PP will point to "4a:1,0,32;;". 
Name: parse_stab_baseclasses; Comment: The stabs for C++ derived classes contain baseclass information which is marked by a '!' character after the total size. This function is called when we encounter the baseclass marker, and slurps up all the baseclass information. Immediately following the '!' marker is the number of base classes that the class is derived from, followed by information for each base class. For each base class, there are two visibility specifiers, a bit offset to the base class information within the derived class, a reference to the type for the base class, and a terminating semicolon. A typical example, with two base classes, would be "!2,020,19;0264,21;".______ ^^ ^ ^ ^ ^ ^ ^ _Baseclass information marker __________________|| | | | | | | _Number of baseclasses __________________________| | | | | | | _Visibility specifiers (2) ________________________| | | | | | _Offset in bits from start of class _________________| | | | | _Type number for base class ___________________________| | | | _Visibility specifiers (2) _______________________________| | | _Offset in bits from start of class ________________________| | _Type number of base class ____________________________________| Return TRUE for success, FALSE for failure. 
Name: parse_stab_struct_fields; Comment: None At the end, we see a semicolon instead of a field. In C++, this may wind up being NAME:?TYPENUM:PHYSNAME; for a static field. The optional VISIBILITY is one of: _'/0'_(VISIBILITY_PRIVATE) _'/1'_(VISIBILITY_PROTECTED) _'/2'_(VISIBILITY_PUBLIC) _'/9'_(VISIBILITY_IGNORE) or nothing, for C style fields with public visibility. Returns 1 for success, 0 for failure. 
Name: parse_stab_cpp_abbrev; Comment: Special GNU C++ name. 
Name: parse_stab_one_struct_field; Comment: Parse a single field in a struct or union. 
Name: parse_stab_members; Comment: None For the case of overloaded operators, the format is op$::*.funcs, where $ is the CPLUS_MARKER (usually '$'), `*' holds the place for an operator name (such as `+=') and `.' marks the end of the operator name. 
Name: parse_stab_argtypes; Comment: Parse a string representing argument types for a method. Stabs tries to save space by packing argument types into a mangled string. This string should give us enough information to extract both argument types and the physical name of the function, given the tag name. 
Name: parse_stab_tilde_field; Comment: The tail end of stabs for C++ classes that contain a virtual function pointer contains a tilde, a %, and a type number. The type number refers to the base class (possibly this class itself) which contains the vtable pointer for the current class. This function is called when we have parsed all the method declarations, so we can look for the vptr base class info. 
Name: parse_stab_array_type; Comment: Read a definition of an array type. 
Name: push_bincl; Comment: Start a new N_BINCL file, pushing it onto the stack. 
Name: pop_bincl; Comment: Finish an N_BINCL file, at an N_EINCL, popping the name off the stack. 
Name: find_excl; Comment: Handle an N_EXCL: get the types from the corresponding N_BINCL. 
Name: stab_record_variable; Comment: Handle a variable definition. gcc emits variable definitions for a block before the N_LBRAC, so we must hold onto them until we see it. The SunPRO compiler emits variable definitions after the N_LBRAC, so we can call debug_record_variable immediately. 
Name: stab_emit_pending_vars; Comment: Emit pending variable definitions. This is called after we see the N_LBRAC that starts the block. 
Name: stab_find_slot; Comment: Find the slot for a type in the database. 
Name: stab_find_type; Comment: Find a type given a type number. If the type has not been allocated yet, create an indirect type. 
Name: stab_record_type; Comment: Record that a given type number refers to a given type. 
Name: stab_xcoff_builtin_type; Comment: Return an XCOFF builtin type. 
Name: stab_find_tagged_type; Comment: Find or create a tagged type. 
Name: stab_bad_demangle; Comment: Warn about a bad demangling. 
Name: stab_demangle_count; Comment: Get a count from a stab string. 
Name: stab_demangle_get_count; Comment: Require a count in a string. The count may be multiple digits, in which case it must end in an underscore. 
Name: stab_demangle_argtypes; Comment: This function demangles a physical name, returning a NULL terminated array of argument types. 
Name: stab_demangle_prefix; Comment: Demangle the prefix of the mangled name. 
Name: stab_demangle_function_name; Comment: Demangle a function name prefix. The scan argument points to the double underscore which separates the function name from the signature. 
Name: stab_demangle_signature; Comment: Demangle the signature. This is where the argument types are found. 
Name: stab_demangle_qualified; Comment: Demangle a qualified name, such as "Q25Outer5Inner" which is the mangled form of "Outer::Inner". 
Name: stab_demangle_template; Comment: Demangle a template. If PNAME is not NULL, this sets *PNAME to a string representation of the template. 
Name: stab_demangle_class; Comment: Demangle a class name. 
Name: stab_demangle_args; Comment: Demangle function arguments. If the pargs argument is not NULL, it is set to a NULL terminated array holding the arguments. 
Name: stab_demangle_arg; Comment: Demangle a single argument. 
Name: stab_demangle_type; Comment: Demangle a type. If the ptype argument is not NULL, *ptype is set to the newly allocated type. 
Name: stab_demangle_fund_type; Comment: Demangle a fundamental type. If the ptype argument is not NULL, *ptype is set to the newly allocated type. 
Name: stab_demangle_remember_type; Comment: Remember a type string in a demangled string. 
Name: stab_demangle_v3_argtypes; Comment: Demangle names encoded using the g++ V3 ABI. The newer versions of g++ which use this ABI do not encode ordinary method argument types in a mangled name; they simply output the argument types. However, for a static method, g++ simply outputs the return type and the physical name. So in that case we need to demangle the name here. Here PHYSNAME is the physical name of the function, and we set the variable pointed at by PVARARGS to indicate whether this function is varargs. This returns NULL, or a NULL terminated array of argument types. 
Name: stab_demangle_v3_arglist; Comment: Demangle an argument list in a struct demangle_component tree. Returns a DEBUG_TYPE_NULL terminated array of argument types, and sets *PVARARGS to indicate whether this is a varargs function. 
Name: stab_demangle_v3_arg; Comment: Convert a struct demangle_component tree describing an argument type into a debug_type. 
Name: strings_a_section; Comment: Scan section SECT of the file ABFD, whose printable name is FILENAME. If it contains initialized data set GOT_A_SECTION and print the strings in it. 
Name: strings_object_file; Comment: Scan all of the sections in FILE, and print the strings in the initialized data section(s). Return TRUE if successful, FALSE if not (such as if FILE is not an object file). 
Name: strings_file; Comment: Print the strings in FILE. Return TRUE if ok, FALSE if an error occurs. 
Name: get_char; Comment: Read the next character, return EOF if none available. Assume that STREAM is positioned so that the next byte read is at address ADDRESS in the file. If STREAM is NULL, do not read from it. The caller can supply a buffer of characters to be processed before the data in STREAM. MAGIC is the address of the buffer and MAGICCOUNT is how many characters are in it. 
Name: unget_part_char; Comment: Throw away one byte of a (possibly) multi-byte char C, updating address and buffer to suit. 
Name: is_valid_utf8; Comment: Return non-zero if the bytes starting at BUFFER form a valid UTF-8 encoding. If the encoding is valid then returns the number of bytes it uses. 
Name: display_utf8_char; Comment: Display a UTF-8 encoded character in BUFFER according to the setting of unicode_display. The character is known to be valid. Returns the number of bytes consumed. 
Name: print_unicode_buffer; Comment: Display strings in BUFFER. Treat any UTF-8 encoded characters encountered according to the setting of the unicode_display variable. The buffer contains BUFLEN bytes. Display the characters as if they started at ADDRESS and are contained in FILENAME. 
Name: print_unicode_stream_body; Comment: Helper function for print_unicode_stream. 
Name: print_unicode_stream; Comment: Display strings read in from STREAM. Treat any UTF-8 encoded characters encountered according to the setting of the unicode_display variable. The stream is positioned at ADDRESS and is attached to FILENAME. 
Name: print_strings; Comment: Find the strings in file FILENAME, read from STREAM. Assume that STREAM is positioned so that the next byte read is at address ADDRESS in the file. If STREAM is NULL, do not read from it. The caller can supply a buffer of characters to be processed before the data in STREAM. MAGIC is the address of the buffer and MAGICCOUNT is how many characters are in it. Those characters come at address ADDRESS and the data in STREAM follow. 
Name: sysroff_swap_tr_in; Comment: FIXME: sysinfo, which generates sysroff.[ch] from sysroff.info, can't hack the special case of the tr block, which has no contents. So we implement our own functions for reading in and printing out the tr block. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: unw_decode_uleb128; Comment: Generic IA-64 unwind info decoder. This file is used both by the Linux kernel and objdump. Please keep the two copies of this file in sync (modulo differences in the prototypes...). You need to customize the decoder by defining the following macros/constants before including this file: Types: *_unw_word_Unsigned integer type with at least 64 bits Register names: *_UNW_REG_BSP *_UNW_REG_BSPSTORE *_UNW_REG_FPSR *_UNW_REG_LC *_UNW_REG_PFS *_UNW_REG_PR *_UNW_REG_RNAT *_UNW_REG_PSP *_UNW_REG_RP *_UNW_REG_UNAT Decoder action macros: *_UNW_DEC_BAD_CODE(code) *_UNW_DEC_ABI(fmt,abi,context,arg) *_UNW_DEC_BR_GR(fmt,brmask,gr,arg) *_UNW_DEC_BR_MEM(fmt,brmask,arg) *_UNW_DEC_COPY_STATE(fmt,label,arg) *_UNW_DEC_EPILOGUE(fmt,t,ecount,arg) *_UNW_DEC_FRGR_MEM(fmt,grmask,frmask,arg) *_UNW_DEC_FR_MEM(fmt,frmask,arg) *_UNW_DEC_GR_GR(fmt,grmask,gr,arg) *_UNW_DEC_GR_MEM(fmt,grmask,arg) *_UNW_DEC_LABEL_STATE(fmt,label,arg) *_UNW_DEC_MEM_STACK_F(fmt,t,size,arg) *_UNW_DEC_MEM_STACK_V(fmt,t,arg) *_UNW_DEC_PRIUNAT_GR(fmt,r,arg) *_UNW_DEC_PRIUNAT_WHEN_GR(fmt,t,arg) *_UNW_DEC_PRIUNAT_WHEN_MEM(fmt,t,arg) *_UNW_DEC_PRIUNAT_WHEN_PSPREL(fmt,pspoff,arg) *_UNW_DEC_PRIUNAT_WHEN_SPREL(fmt,spoff,arg) *_UNW_DEC_PROLOGUE(fmt,body,rlen,arg) *_UNW_DEC_PROLOGUE_GR(fmt,rlen,mask,grsave,arg) *_UNW_DEC_REG_PSPREL(fmt,reg,pspoff,arg) *_UNW_DEC_REG_REG(fmt,src,dst,arg) *_UNW_DEC_REG_SPREL(fmt,reg,spoff,arg) *_UNW_DEC_REG_WHEN(fmt,reg,t,arg) *_UNW_DEC_RESTORE(fmt,t,abreg,arg) *_UNW_DEC_RESTORE_P(fmt,qp,t,abreg,arg) *_UNW_DEC_SPILL_BASE(fmt,pspoff,arg) *_UNW_DEC_SPILL_MASK(fmt,imaskp,arg) *_UNW_DEC_SPILL_PSPREL(fmt,t,abreg,pspoff,arg) *_UNW_DEC_SPILL_PSPREL_P(fmt,qp,t,abreg,pspoff,arg) *_UNW_DEC_SPILL_REG(fmt,t,abreg,x,ytreg,arg) *_UNW_DEC_SPILL_REG_P(fmt,qp,t,abreg,x,ytreg,arg) *_UNW_DEC_SPILL_SPREL(fmt,t,abreg,spoff,arg) *_UNW_DEC_SPILL_SPREL_P(fmt,qp,t,abreg,pspoff,arg) 
Name: unw_decode; Comment: Decode one descriptor and return address of next descriptor. 
Name: print_version; Comment: Print the version number and copyright information, and exit. This implements the --version option for the various programs. 
Name: res_init; Comment: Initialize the resource building obstack. 
Name: res_alloc; Comment: Allocate space on the resource building obstack. 
Name: reswr_init; Comment: Initialize the resource writing obstack. 
Name: reswr_alloc; Comment: Allocate space on the resource writing obstack. 
Name: open_file_search; Comment: Open a file using the include directory search list. 
Name: res_id_cmp; Comment: Compare two resource ID's. We consider name entries to come before numeric entries, because that is how they appear in the COFF .rsrc section. 
Name: res_id_print; Comment: Print a resource ID. 
Name: res_ids_print; Comment: Print a list of resource ID's. 
Name: res_string_to_id; Comment: Convert an ASCII string to a resource ID. 
Name: res_unistring_to_id; Comment: Convert an unicode string to a resource ID. 
Name: define_resource; Comment: Define a resource. The arguments are the resource tree, RESOURCES, and the location at which to put it in the tree, CIDS and IDS. This returns a newly allocated rc_res_resource structure, which the caller is expected to initialize. If DUPOK is non-zero, then if a resource with this ID exists, it is returned. Otherwise, a warning is issued, and a new resource is created replacing the existing one. 
Name: define_standard_resource; Comment: Define a standard resource. This is a version of define_resource that just takes type, name, and language arguments. 
Name: cmp_res_entry; Comment: Comparison routine for resource sorting. 
Name: sort_resources; Comment: Sort the resources. 
Name: extended_dialog; Comment: Return whether the dialog resource DIALOG is a DIALOG or a DIALOGEX. 
Name: extended_menu; Comment: Return whether MENUITEMS are a MENU or a MENUEX. 
Name: format_from_name; Comment: Convert a string to a format type, or exit if it can't be done. 
Name: format_from_filename; Comment: Work out a format type given a file name. If INPUT is non-zero, it's OK to look at the file itself. 
Name: usage; Comment: Print a usage message and exit. 
Name: quot; Comment: Quote characters that will confuse the shell when we run the preprocessor. 
Name: main; Comment: The main function. 
Name: unicode_from_ascii; Comment: Convert an ASCII string to a unicode string. We just copy it, expanding chars to shorts, rather than doing something intelligent. 
Name: unicode_from_ascii_len; Comment: Convert an ASCII string with length A_LENGTH to a unicode string. We just copy it, expanding chars to shorts, rather than doing something intelligent. This routine converts also _0 within a string. 
Name: ascii_from_unicode; Comment: Convert an unicode string to an ASCII string. We just copy it, shrink shorts to chars, rather than doing something intelligent. Shorts with not within the char range are replaced by '_'. 
Name: unicode_print; Comment: Print the unicode string UNICODE to the file E. LENGTH is the number of characters to print, or -1 if we should print until the end of the string. FIXME: On a Windows host, we should be calling some Windows function, probably WideCharToMultiByte. 
Name: ascii_print; Comment: Print a unicode string to a file. 
Name: unicode_from_codepage; Comment: Convert an Codepage string to a unicode string. 
Name: codepage_from_unicode; Comment: Convert an unicode string to an codepage string. 
Name: stab_write_symbol; Comment: Add a symbol to the stabs debugging information we are building. 
Name: stab_push_string; Comment: Push a string on to the type stack. 
Name: stab_push_defined_type; Comment: Push a type index which has already been defined. 
Name: stab_pop_type; Comment: Pop a type off the type stack. The caller is responsible for freeing the string. 
Name: write_stabs_in_sections_debugging_info; Comment: The general routine to write out stabs in sections debugging information. This accumulates the stabs symbols and the strings in two obstacks. We can't easily write out the information as we go along, because we need to know the section sizes before we can write out the section contents. ABFD is the BFD and DHANDLE is the handle for the debugging information. This sets *PSYMS to point to the symbols, *PSYMSIZE the size of the symbols, *PSTRINGS to the strings, and *PSTRINGSIZE to the size of the strings. 
Name: stab_start_compilation_unit; Comment: Start writing out information for a compilation unit. 
Name: stab_start_source; Comment: Start writing out information for a particular source file. 
Name: stab_empty_type; Comment: Push an empty type. This shouldn't normally happen. We just use a void type. 
Name: stab_void_type; Comment: Push a void type. 
Name: stab_int_type; Comment: Push an integer type. 
Name: stab_float_type; Comment: Push a floating point type. 
Name: stab_complex_type; Comment: Push a complex type. 
Name: stab_bool_type; Comment: Push a bool type. We use an XCOFF predefined type, since gdb always recognizes them. 
Name: stab_enum_type; Comment: Push an enum type. 
Name: stab_modify_type; Comment: Push a modification of the top type on the stack. Cache the results in CACHE and CACHE_ALLOC. 
Name: stab_pointer_type; Comment: Push a pointer type. 
Name: stab_function_type; Comment: Push a function type. 
Name: stab_reference_type; Comment: Push a reference type. 
Name: stab_range_type; Comment: Push a range type. 
Name: stab_array_type; Comment: Push an array type. 
Name: stab_set_type; Comment: Push a set type. 
Name: stab_offset_type; Comment: Push an offset type. 
Name: stab_method_type; Comment: Push a method type. 
Name: stab_const_type; Comment: Push a const version of a type. 
Name: stab_volatile_type; Comment: Push a volatile version of a type. 
Name: stab_get_struct_index; Comment: Get the type index to use for a struct/union/class ID. This should return -1 if it fails. 
Name: stab_start_struct_type; Comment: Start outputting a struct. We ignore the tag, and handle it in stab_tag. 
Name: stab_struct_field; Comment: Add a field to a struct. 
Name: stab_end_struct_type; Comment: Finish up a struct. 
Name: stab_start_class_type; Comment: Start outputting a class. 
Name: stab_class_static_member; Comment: Add a static member to the class on the type stack. 
Name: stab_class_baseclass; Comment: Add a base class to the class on the type stack. 
Name: stab_class_start_method; Comment: Start adding a method to the class on the type stack. 
Name: stab_class_method_var; Comment: Add a variant, either static or not, to the current method. 
Name: stab_class_method_variant; Comment: Add a variant to the current method. 
Name: stab_class_static_method_variant; Comment: Add a static variant to the current method. 
Name: stab_class_end_method; Comment: Finish up a method. 
Name: stab_end_class_type; Comment: Finish up a class. 
Name: stab_typedef_type; Comment: Push a typedef which was previously defined. 
Name: stab_tag_type; Comment: Push a struct, union or class tag. 
Name: stab_typdef; Comment: Define a typedef. 
Name: stab_tag; Comment: Define a tag. 
Name: stab_int_constant; Comment: Define an integer constant. 
Name: stab_float_constant; Comment: Define a floating point constant. 
Name: stab_typed_constant; Comment: Define a typed constant. 
Name: stab_variable; Comment: Record a variable. 
Name: stab_start_function; Comment: Start outputting a function. 
Name: stab_function_parameter; Comment: Output a function parameter. 
Name: stab_start_block; Comment: Start a block. 
Name: stab_end_block; Comment: End a block. 
Name: stab_end_function; Comment: End a function. 
Name: stab_lineno; Comment: Output a line number. 
Name: do_scrub_begin; Comment: FIXME-soon: The entire lexer/parser thingy should be built statically at compile time rather than dynamically each and every time the assembler is run. xoxorich. 
Name: process_escape; Comment: @@ This assumes that _n &c are the same on host and target. This is not necessarily true. 
Name: do_scrub_chars; Comment: This function is called to process input characters. The GET parameter is used to retrieve more input characters. GET should set its parameter to point to a buffer, and return the length of the buffer; it should return 0 at end of file. The scrubbed output characters are put into the buffer starting at TOSTART; the TOSTART buffer is TOLEN bytes in length. The function returns the number of scrubbed characters put into TOSTART. This will be TOLEN unless end of file was seen. This function is arranged as a state machine, and saves its state so that it may return at any point. This is the way the old code used to work. 
Name: do_scrub_pending; Comment: Return amount of pending input. 
Name: parse_args; Comment: Since it is easy to do here we interpret the special arg "-" to mean "use stdin" and we set that argv[] pointing to "". After we have munged argv[], the only things left are source file name(s) and ""(s) denoting stdin. These file names are used (perhaps more than once) later. check for new machine-dep cmdline options in md_parse_option definitions in config/tc-*.c. 
Name: macro_expr; Comment: The interface between the macro code and gas expression handling. 
Name: perform_an_assembly_pass; Comment: Here to attempt 1 pass over each input file. We scan argv[*] looking for filenames or exactly "" which is shorthand for stdin. Any argv that is NULL is not a file-name. We set need_pass_2 TRUE if, after this, we still have unresolved expressions of the form (unknown value)+-(unknown value). Note the un*x semantics: there is only 1 logical input file, but it may be a catenation of many 'physical' input files. 
Name: cgen_asm_record_register; Comment: Callback to insert a register into the symbol table. A target may choose to let GAS parse the registers. ??? Not currently used. 
Name: gas_cgen_init_parse; Comment: Prepare to parse an instruction. ??? May wish to make this static and delete calls in md_assemble. 
Name: queue_fixup; Comment: Queue a fixup. 
Name: gas_cgen_record_fixup; Comment: Default routine to record a fixup. This is a cover function to fix_new. It exists because we record INSN with the fixup. FRAG and WHERE are their respective arguments to fix_new_exp. LENGTH is in bits. OPINFO is something the caller chooses to help in reloc determination. At this point we do not use a bfd_reloc_code_real_type for operands residing in the insn, but instead just use the operand index. This lets us easily handle fixups for any operand type. We pick a BFD reloc type in md_apply_fix. 
Name: gas_cgen_record_fixup_exp; Comment: Default routine to record a fixup given an expression. This is a cover function to fix_new_exp. It exists because we record INSN with the fixup. FRAG and WHERE are their respective arguments to fix_new_exp. LENGTH is in bits. OPINFO is something the caller chooses to help in reloc determination. At this point we do not use a bfd_reloc_code_real_type for operands residing in the insn, but instead just use the operand index. This lets us easily handle fixups for any operand type. We pick a BFD reloc type in md_apply_fix. 
Name: gas_cgen_parse_operand; Comment: Callback for cgen interface. Parse the expression at *STRP. The result is an error message or NULL for success (in which case *STRP is advanced past the parsed text). WANT is an indication of what the caller is looking for. If WANT == CGEN_ASM_PARSE_INIT the caller is beginning to try to match a table entry with the insn, reset the queued fixups counter. An enum cgen_parse_operand_result is stored in RESULTP. OPINDEX is the operand's table entry index. OPINFO is something the caller chooses to help in reloc determination. The resulting value is stored in VALUEP. 
Name: gas_cgen_md_operand; Comment: md_operand handler to catch unrecognized expressions and halt the parsing process so the next entry can be tried. ??? This could be done differently by adding code to `expression'. 
Name: gas_cgen_finish_insn; Comment: Finish assembling instruction INSN. BUF contains what we've built up so far. LENGTH is the size of the insn in bits. RELAX_P is non-zero if relaxable insns should be emitted as such. Otherwise they're emitted in non-relaxable forms. The "result" is stored in RESULT if non-NULL. 
Name: queue_fixup_recursively; Comment: Queue many fixups, recursively. If the field is a multi-ifield, repeatedly queue its sub-parts, right shifted to fit into the field (we assume here multi-fields represent a left-to-right, MSB0-LSB0 reading). 
Name: weak_operand_overflow_check; Comment: Purpose: make a weak check that the expression doesn't overflow the operand it's to be inserted into. Rationale: some insns used to use %operators to disambiguate during a parse. when these %operators are translated to expressions by the macro expander, the ambiguity returns. we attempt to disambiguate by field size. Method: check to see if the expression's top node is an O_and operator, and the mask is larger than the operand length. This would be an overflow, so signal it by returning an error string. Any other case is ambiguous, so we assume it's OK and return NULL. 
Name: gas_cgen_md_apply_fix; Comment: FIXME: This function handles some of the fixups and bfd_install_relocation handles the rest. bfd_install_relocation (or some other bfd function) should handle them all. 
Name: gas_cgen_tc_gen_reloc; Comment: Translate internal representation of relocation info to BFD target format. FIXME: To what extent can we get all relevant targets to use this? 
Name: gas_cgen_begin; Comment: Perform any cgen specific initialisation. Called after gas_cgen_cpu_desc has been created. 
Name: get_frag_fix; Comment: Return the size of the current fragment (taken from dwarf2dbg.c). 
Name: emit_secrel32_reloc; Comment: Emit a .secrel32 relocation. 
Name: emit_secidx_reloc; Comment: Emit a .secidx relocation. 
Name: write_string_table; Comment: Write the DEBUG_S_STRINGTABLE subsection. 
Name: write_checksums; Comment: Write the DEBUG_S_FILECHKSMS subsection. 
Name: write_lines_info; Comment: Write the DEBUG_S_LINES subsection. 
Name: target_processor; Comment: Return the CodeView constant for the selected architecture. 
Name: write_symbols_info; Comment: Write the CodeView symbols, describing the object name and assembler version. 
Name: codeview_finish; Comment: Processing of the file has finished, emit the .debug$S section. 
Name: get_fileno; Comment: Assign a new index number for the given file, or return the existing one if already assigned. 
Name: codeview_generate_asm_lineno; Comment: Called for each new line in asm file. 
Name: compress_init; Comment: Initialize the compression engine. 
Name: compress_data; Comment: Stream the contents of a frag to the compression engine. Output from the engine goes into the current frag on the obstack. 
Name: compress_finish; Comment: Finish the compression and consume the remaining compressed output. Returns -1 for error, 0 when done, 1 when more output buffer is needed. 
Name: s_ifdef; Comment: Performs the .ifdef (test_defined == 1) and the .ifndef (test_defined == 0) pseudo op. 
Name: s_ifb; Comment: Performs the .ifb (test_blank == 1) and the .ifnb (test_blank == 0) pseudo op. 
Name: get_mri_string; Comment: Get a string for the MRI IFC or IFNC pseudo-ops. 
Name: s_ifc; Comment: The MRI IFC and IFNC pseudo-ops. 
Name: cond_finish_check; Comment: Give an error if a conditional is unterminated inside a macro or the assembly as a whole. If NEST is non negative, we are being called because of the end of a macro expansion. If NEST is negative, we are being called at the of the input files. 
Name: cond_exit_macro; Comment: This function is called when we exit out of a macro. We assume that any conditionals which began within the macro are correctly nested, and just pop them off the stack. 
Name: start_dependencies; Comment: Start saving dependencies, to be written to FILENAME. If this is never called, then dependency tracking is simply skipped. 
Name: register_dependency; Comment: Noticed a new filename, so try to register it. 
Name: quote_string_for_make; Comment: Quote a file name the way `make' wants it, and print it to FILE. If FILE is NULL, do no printing, but return the length of the quoted string. This code is taken from gcc with only minor changes. 
Name: wrap_output; Comment: Append some output to the file, keeping track of columns and doing wrapping as necessary. 
Name: print_dependencies; Comment: Print dependency file. 
Name: out_uleb128; Comment: Emit an unsigned "little-endian base 128" number. 
Name: out_sleb128; Comment: Emit an unsigned "little-endian base 128" number. 
Name: emit_expr_encoded; Comment: Emit expression EXP in ENCODING. If EMIT_ENCODING is true, first emit a byte containing ENCODING. 
Name: get_debugseg_name; Comment: Build based on segment the derived .debug_... segment name containing origin segment's postfix name part. 
Name: alloc_debugseg_item; Comment: Allocate a dwcfi_seg_list structure. 
Name: make_debug_seg; Comment: Generate debug... segment with same linkonce properties of based segment. 
Name: generic_dwarf2_emit_offset; Comment: Create an offset to .dwarf2_*. 
Name: alloc_fde_entry; Comment: Construct a new FDE structure and add it to the end of the fde list. 
Name: cfi_new_fde; Comment: Construct a new FDE structure that begins at LABEL. 
Name: cfi_end_fde; Comment: End the currently open FDE. 
Name: cfi_set_return_column; Comment: Set the return column for the current FDE. 
Name: cfi_add_CFA_insn; Comment: Universal functions to store new instructions. 
Name: cfi_add_advance_loc; Comment: Add a CFI insn to advance the PC from the last address to LABEL. 
Name: cfi_add_label; Comment: Add a CFI insn to label the current position in the CFI segment. 
Name: cfi_add_CFA_offset; Comment: Add a DW_CFA_offset record to the CFI data. 
Name: cfi_add_CFA_val_offset; Comment: Add a DW_CFA_val_offset record to the CFI data. 
Name: cfi_add_CFA_def_cfa; Comment: Add a DW_CFA_def_cfa record to the CFI data. 
Name: cfi_add_CFA_register; Comment: Add a DW_CFA_register record to the CFI data. 
Name: cfi_add_CFA_def_cfa_register; Comment: Add a DW_CFA_def_cfa_register record to the CFI data. 
Name: cfi_add_CFA_def_cfa_offset; Comment: Add a DW_CFA_def_cfa_offset record to the CFI data. 
Name: output_compact_unwind_data; Comment: Function to emit the compact unwinding opcodes stored in the fde's eh_data field. The end of the opcode data will be padded to the value in align. 
Name: dot_cfi_inline_lsda; Comment: Handle the .cfi_inline_lsda directive. 
Name: dot_cfi_dummy; Comment: Emit an intelligible error message for missing support. 
Name: get_line_subseg; Comment: Find or create (if CREATE_P) an entry for SEG+SUBSEG in ALL_SEGS. 
Name: reverse_line_entry_list; Comment: (Un)reverse the line_entry list starting from H. 
Name: set_or_check_view; Comment: Compute the view for E based on the previous entry P. If we introduce an (undefined) view symbol for P, and H is given (P must be the tail in this case), introduce view symbols for earlier list entries as well, until one of them is constant. 
Name: dwarf2_gen_line_info_1; Comment: Record an entry for LOC occurring at LABEL. 
Name: dwarf2_gen_line_info; Comment: Record an entry for LOC occurring at OFS within the current fragment. 
Name: allocate_filenum; Comment: Get a .debug_line file number for PATHNAME. If there is a directory component to PATHNAME, then this will be stored in the directory table, if it is not already present. Returns the slot number allocated to that filename or -1 if there was a problem. 
Name: do_allocate_filenum; Comment: Run through the list of line entries starting at E, allocating file entries for gas generated debug. 
Name: purge_generated_debug; Comment: Remove any generated line entries. These don't live comfortably with compiler generated line info. If THELOT then remove everything, freeing all list entries we have created. 
Name: allocate_filename_to_slot; Comment: Allocate slot NUM in the .debug_line file table to FILENAME. If DIRNAME is not NULL or there is a directory component to FILENAME then this will be stored in the directory table, if not already present. if WITH_MD5 is TRUE then there is a md5 value in generic_bignum. Returns TRUE if allocation succeeded, FALSE otherwise. 
Name: dwarf2_where; Comment: Returns the current source information. If .file directives have been encountered, the info for the corresponding source file is returned. Otherwise, the info for the assembly source file is returned. 
Name: dwarf2_set_isa; Comment: A hook to allow the target backend to inform the line number state machine of isa changes when assembler debug info is enabled. 
Name: dwarf2_emit_insn; Comment: Called for each machine instruction, or relatively atomic group of machine instructions (ie built-in macro). The instruction or group is SIZE bytes in length. If dwarf2 line number generation is called for, emit a line statement appropriately. 
Name: dwarf2_move_insn; Comment: Move all previously-emitted line entries for the current position by DELTA bytes. This function cannot be used to move the same entries twice. 
Name: dwarf2_consume_line_info; Comment: Called after the current line information has been either used with dwarf2_gen_line_info or saved with a machine instruction for later use. This resets the state of the line number information to reflect that it has been used. 
Name: dwarf2_emit_label; Comment: Called for each (preferably code) label. If dwarf2_loc_mark_labels is enabled, emit a basic block marker. 
Name: dwarf2_directive_filename; Comment: Handle two forms of .file directive: - Pass .file "source.c" to s_file - Handle .file 1 "source.c" by adding an entry to the DWARF-2 file table If an entry is added to the file table, return a pointer to the filename. 
Name: dwarf2_directive_file; Comment: Calls dwarf2_directive_filename, but discards its result. Used in pseudo-op tables where the function result is ignored. 
Name: out_leb128; Comment: Emit a signed "little-endian base 128" number. 
Name: get_frag_fix; Comment: Get the size of a fragment. 
Name: out_set_addr; Comment: Set an absolute address (may result in a relocation entry). 
Name: size_inc_line_addr; Comment: Encode a pair of line and address skips as efficiently as possible. Note that the line skip is signed, whereas the address skip is unsigned. The following two routines *must* be kept in sync. This is enforced by making emit_inc_line_addr abort if we do not emit exactly the expected number of bytes. 
Name: out_inc_line_addr; Comment: Handy routine to combine calls to the above two routines. 
Name: relax_inc_line_addr; Comment: Generate a variant frag that we can use to relax address/line increments between fragments of the target segment. 
Name: dwarf2dbg_estimate_size_before_relax; Comment: The function estimates the size of a rs_dwarf2dbg variant frag based on the current values of the symbols. It is called before the relaxation loop. We set fr_subtype to the expected length. 
Name: dwarf2dbg_relax_frag; Comment: This function relaxes a rs_dwarf2dbg variant frag based on the current values of the symbols. fr_subtype is the current length of the frag. This returns the change in frag length. 
Name: dwarf2dbg_convert_frag; Comment: This function converts a rs_dwarf2dbg variant frag into a normal fill frag. This is called after all relaxation has been done. fr_subtype will be the desired length of the frag. 
Name: process_entries; Comment: Generate .debug_line content for the chain of line number entries beginning at E, for segment SEG. 
Name: add_line_strp; Comment: Switch to LINE_STR_SEG and output the given STR. Return the symbol pointing to the new string in the section. 
Name: out_dir_and_file_list; Comment: Emit the directory and file tables for .debug_line. 
Name: out_header; Comment: Switch to SEC and output a header length field. Return the size of offsets used in SEC. The caller must set EXPR->X_add_symbol value to the end of the section. EXPR->X_add_number will be set to the negative size of the header. 
Name: out_debug_line; Comment: Emit the collected .debug_line data. 
Name: out_debug_aranges; Comment: Emit data for .debug_aranges. 
Name: out_debug_abbrev; Comment: Emit data for .debug_abbrev. Note that this must be kept in sync with out_debug_info below. 
Name: out_debug_info; Comment: Emit a description of this compilation unit for .debug_info. 
Name: out_debug_str; Comment: Emit the three debug strings needed in .debug_str and setup symbols to them for use in out_debug_info. 
Name: dwarf2_finish; Comment: Finish the dwarf2 debug sections. We emit .debug.line if there were any .file/.loc directives, or --gdwarf2 was given, and if the file has a non-empty .debug_info section and an empty .debug_line section. If we emit .debug_line, and the .debug_info section is empty, we also emit .debug_info, .debug_aranges and .debug_abbrev. ALL_SEGS will be non-null if there were any .file/.loc directives, or --gdwarf2 was given and there were any located instructions emitted. 
Name: dwarf2dbg_final_check; Comment: Perform any deferred checks pertaining to debug information. 
Name: ecoff_read_begin_hook; Comment: This function should be called when the assembler starts up. 
Name: ecoff_symbol_new_hook; Comment: This function should be called when a symbol is created. 
Name: add_aux_sym_rndx; Comment: Add an auxiliary symbol (passing a file/symbol index combo). 
Name: add_file; Comment: Add a new filename, and set up all of the file relative virtual arrays (strings, symbols, aux syms, etc.). Record where the current file structure lives. 
Name: ecoff_new_file; Comment: This function is called when the assembler notices a preprocessor directive switching to a new file. This will not happen in compiler output, only in hand coded assembler. 
Name: ecoff_directive_begin; Comment: Parse .begin directives which have a label as the first argument which gives the location of the start of the block. 
Name: ecoff_directive_bend; Comment: Parse .bend directives which have a label as the first argument which gives the location of the end of the block. 
Name: ecoff_directive_def; Comment: Handle a .def directive: start defining a symbol. 
Name: ecoff_directive_dim; Comment: Handle a .dim directive, used to give dimensions for an array. The arguments are comma separated numbers. mips-tfile assumes that there will not be more than 6 dimensions, and gdb won't read any more than that anyhow, so I will also make that assumption. 
Name: ecoff_directive_scl; Comment: Handle a .scl directive, which sets the COFF storage class of the symbol. 
Name: ecoff_directive_size; Comment: Handle a .size directive. For some reason mips-tfile.c thinks that .size can have multiple arguments. We humor it, although gcc will never generate more than one argument. 
Name: ecoff_directive_type; Comment: Handle the .type directive, which gives the COFF type of the symbol. 
Name: ecoff_directive_tag; Comment: Handle the .tag directive, which gives the name of a structure, union or enum. 
Name: ecoff_directive_val; Comment: Handle the .val directive, which gives the value of the symbol. It may be the name of a static or global symbol. 
Name: ecoff_directive_endef; Comment: Handle the .endef directive, which terminates processing of COFF debugging information for a symbol. 
Name: ecoff_directive_end; Comment: Parse .end directives. 
Name: ecoff_directive_ent; Comment: Parse .ent directives. 
Name: ecoff_directive_extern; Comment: Parse .extern directives. 
Name: ecoff_directive_file; Comment: Parse .file directives. 
Name: ecoff_directive_fmask; Comment: Parse .fmask directives. 
Name: ecoff_directive_frame; Comment: Parse .frame directives. 
Name: ecoff_directive_mask; Comment: Parse .mask directives. 
Name: ecoff_directive_loc; Comment: Parse .loc directives. 
Name: ecoff_fix_loc; Comment: The MIPS assembler sometimes inserts nop instructions in the instruction stream. When this happens, we must patch up the .loc information so that it points to the instruction after the nop. 
Name: mark_stabs; Comment: Make sure the @stabs symbol is emitted. 
Name: ecoff_directive_weakext; Comment: For TC_MIPS use the version in tc-mips.c. 
Name: ecoff_stab; Comment: Handle .stabs directives. The actual parsing routine is done by a generic routine. This routine is called via OBJ_PROCESS_STAB. When this is called, input_line_pointer will be pointing at the value field of the stab. .stabs directives have five fields: _"string"_a string, encoding the type information. _code__a numeric code, defined in <stab.h> _0__a zero _desc__a zero or line number _value__a numeric value or an address. If the value is relocatable, we transform this into: _iss__points as an index into string space _value__value from lookup of the name _st__st from lookup of the name _sc__sc from lookup of the name _index__code|CODE_MASK If the value is not relocatable, we transform this into: _iss__points as an index into string space _value__value _st__st_Nil _sc__sc_Nil _index__code|CODE_MASK .stabn directives have four fields (string is null): _code__a numeric code, defined in <stab.h> _0__a zero _desc__a zero or a line number _value__a numeric value or an address. 
Name: ecoff_frob_symbol; Comment: Frob an ECOFF symbol. Small common symbols go into a special .scommon section rather than bfd_com_section. 
Name: ecoff_add_bytes; Comment: Add bytes to the symbolic information buffer. 
Name: ecoff_padding_adjust; Comment: Adjust the symbolic information buffer to the alignment required for the ECOFF target debugging information. 
Name: ecoff_build_lineno; Comment: Build the line number information. 
Name: ecoff_build_symbols; Comment: Build and swap out the symbols. 
Name: ecoff_build_procs; Comment: Swap out the procedure information. 
Name: ecoff_build_aux; Comment: Swap out the aux information. 
Name: ecoff_build_strings; Comment: Copy out the strings from a varray_t. This returns the number of bytes copied, rather than the new offset. 
Name: ecoff_build_ss; Comment: Dump out the local strings. 
Name: ecoff_build_fdr; Comment: Swap out the file descriptors. 
Name: ecoff_setup_ext; Comment: Set up the external symbols. These are supposed to be handled by the backend. This routine just gets the right information and calls a backend function to deal with it. 
Name: ecoff_build_debug; Comment: Build the ECOFF debugging information. 
Name: allocate_page; Comment: Allocate one page (which is initialized to 0). 
Name: allocate_scope; Comment: Allocate scoping information. 
Name: free_scope; Comment: Free scoping information. 
Name: allocate_vlinks; Comment: Allocate links for pages in a virtual array. 
Name: allocate_shash; Comment: Allocate string hash buckets. 
Name: allocate_thash; Comment: Allocate type hash buckets. 
Name: allocate_tag; Comment: Allocate structure, union, or enum tag information. 
Name: free_tag; Comment: Free scoping information. 
Name: allocate_forward; Comment: Allocate forward reference to a yet unknown tag. 
Name: allocate_thead; Comment: Allocate head of type hash list. 
Name: free_thead; Comment: Free scoping information. 
Name: get_cie_info; Comment: Extract information from the CIE. 
Name: check_eh_frame; Comment: This function is called from emit_expr. It looks for cases which we can optimize. Rather than try to parse all this information as we read it, we look for a single byte DW_CFA_advance_loc4 followed by a 4 byte difference. We turn that into a rs_cfa_advance frag, and handle those frags at the end of the assembly. If the gcc output changes somewhat, this optimization may stop working. This function returns non-zero if it handled the expression and emit_expr should not do anything, or zero otherwise. It can also change *EXP and *PNBYTES. 
Name: eh_frame_estimate_size_before_relax; Comment: The function estimates the size of a rs_cfa variant frag based on the current values of the symbols. It is called before the relaxation loop. We set fr_subtype{0:2} to the expected length. 
Name: eh_frame_relax_frag; Comment: This function relaxes a rs_cfa variant frag based on the current values of the symbols. fr_subtype{0:2} is the current length of the frag. This returns the change in frag length. 
Name: eh_frame_convert_frag; Comment: This function converts a rs_cfa variant frag into a normal fill frag. This is called after all relaxation has been done. fr_subtype{0:2} will be the desired length of the frag. 
Name: make_expr_symbol; Comment: Build a dummy symbol to hold a complex expression. This is how we build expressions up out of other expressions. The symbol is put into the fake section expr_section. 
Name: expr_symbol_where; Comment: Return the file and line number for an expr symbol. Return non-zero if something was found, 0 if no information is known for the symbol. 
Name: symbol_lookup_or_make; Comment: Look up a previously used .startof. / .sizeof. symbol, or make a fresh one. 
Name: expr_build_uconstant; Comment: Build an expression for an unsigned constant. The corresponding one for signed constants is missing because there's currently no need for it. One could add an unsigned_p flag but that seems more clumsy. 
Name: expr_build_dot; Comment: Build an expression for the current location ('.'). 
Name: mri_char_constant; Comment: Parse an MRI multi character constant. 
Name: current_location; Comment: Return an expression representing the current location. This handles the magic symbol `.'. 
Name: operand; Comment: In:_Input_line_pointer points to 1st char of operand, which may_be a space. Out:_An expressionS. _The operand may have been empty: in this case X_op == O_absent. _Input_line_pointer->(next non-blank) char after operand. 
Name: clean_up_expression; Comment: In:_address of an expressionS._The X_op field of the expressionS may only take certain values. _Elsewise we waste time special-case testing. Sigh. Ditto SEG_ABSENT. Out:_expressionS may have been modified: _Unused fields zeroed to help expr (). 
Name: expr_begin; Comment: Initialize the expression parser. 
Name: add_to_result; Comment: Implement "word-size + 1 bit" addition for {resultP->X_extrabit:resultP->X_add_number} + {rhs_highbit:amount}. This is used so that the full range of unsigned word values and the full range of signed word values can be represented in an O_constant expression, which is useful e.g. for .sleb128 directives. 
Name: subtract_from_result; Comment: Similarly, for subtraction. 
Name: resolve_expression; Comment: Resolve an expression without changing any symbols/sub-expressions used. 
Name: get_symbol_name; Comment: This lives here because it belongs equally in expr.c & read.c. expr.c is just a branch office read.c anyway, and putting it here lessens the crowd at read.c. Assume input_line_pointer is at start of symbol name, or the start of a double quote enclosed symbol name. Advance input_line_pointer past symbol name. Turn that character into a '_0', returning its former value, which may be the closing double quote. This allows a string compare (RMS wants symbol names to be strings) of the symbol name. There will always be a char following symbol name, because all good lines end in end-of-line. 
Name: restore_line_pointer; Comment: Replace the NUL character pointed to by input_line_pointer with C. If C is _" then advance past it. Return the character now pointed to by input_line_pointer. 
Name: flonum_copy; Comment: flonum_copy.c - copy a flonum Copyright (C) 1987-2023 Free Software Foundation, Inc. This file is part of GAS, the GNU Assembler. GAS is free software; you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. GAS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with GAS; see the file COPYING. If not, write to the Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA. 
Name: flonum_multip; Comment: _plan for a . b => p(roduct) _+-------+-------+-/ /-+-------+-------+ _| a_| a_| ..._| a_| a_| _| A_| A-1_|_| 1_| 0_| _+-------+-------+-/ /-+-------+-------+ _+-------+-------+-/ /-+-------+-------+ _| b_| b_| ..._| b_| b_| _| B_| B-1_|_| 1_| 0_| _+-------+-------+-/ /-+-------+-------+ _+-------+-------+-/ /-+-------+-/ /-+-------+-------+ _| p_| p_| ..._| p_| ..._| p_| p_| _| A+B+1| A+B_|_| N_|_| 1_| 0_| _+-------+-------+-/ /-+-------+-/ /-+-------+-------+ _/^ _(carry) a .b_ ..._ |_ ..._ a .b_ a .b _A B __ |__ 0 1_ 0 0 _| _..._ |_ ..._ a .b _|__ 1 0 _| _|_ ... _| _| _| _|__ ___ _|__ _+----- P = > a .b _N_ /__ i j _N = 0 ... A+B _for all i,j where i+j=N _[i,j integers > 0] _a[], b[], p[] may not intersect. _Zero length factors signify 0 significant bits: treat as 0.0. _0.0 factors do the right thing. _Zero length product OK. _I chose the ForTran accent "foo[bar]" instead of the C accent "*garply" _because I felt the ForTran way was more intuitive. The C way would _probably yield better code on most C compilers. Dean Elsner. _(C style also gives deeper insight [to me] ... oh well ...) 
Name: frag_init; Comment: Initialization for frag routines. 
Name: frag_alloc_check; Comment: Check that we're not trying to assemble into a section that can't allocate frags (currently, this is only possible in the absolute section), or into an mri common. 
Name: frag_alloc; Comment: Allocate a frag on the specified obstack. Call this routine from everywhere else, so that all the weird alignment hackery can be done in just one place. 
Name: frag_grow; Comment: Try to augment current frag by nchars chars. If there is no room, close off the current frag with a ".fill 0" and begin a new frag. Then loop until the new frag has at least nchars chars available. Does not set up any fields in frag_now. 
Name: frag_more; Comment: Start a new frag unless we have n more chars of room in the current frag. Close off the old frag with a .fill 0. Return the address of the 1st char to write into. Advance frag_now_growth past the new chars. 
Name: frag_var_init; Comment: Close the current frag, setting its fields for a relaxable frag. Start a new frag. 
Name: frag_var; Comment: Start a new frag unless we have max_chars more chars of room in the current frag. Close off the old frag with a .fill 0. Set up a machine_dependent relaxable frag, then start a new frag. Return the address of the 1st char of the var part of the old frag to write into. 
Name: frag_variant; Comment: OVE: This variant of frag_var assumes that space for the tail has been_allocated by caller. _No call to frag_grow is done. 
Name: frag_wane; Comment: Reduce the variable end of a frag to a harmless state. 
Name: frag_room; Comment: Return the number of bytes by which the current frag can be grown. 
Name: frag_align; Comment: Make an alignment frag. The size of this frag will be adjusted to force the next frag to have the appropriate alignment. ALIGNMENT is the power of two to which to align. FILL_CHARACTER is the character to use to fill in any bytes which are skipped. MAX is the maximum number of characters to skip when doing the alignment, or 0 if there is no maximum. 
Name: frag_align_pattern; Comment: Make an alignment frag like frag_align, but fill with a repeating pattern rather than a single byte. ALIGNMENT is the power of two to which to align. FILL_PATTERN is the fill pattern to repeat in the bytes which are skipped. N_FILL is the number of bytes in FILL_PATTERN. MAX is the maximum number of characters to skip when doing the alignment, or 0 if there is no maximum. 
Name: frag_offset_fixed_p; Comment: Return TRUE if FRAG1 and FRAG2 have a fixed relationship between their start addresses. Set OFFSET to the difference in address not already accounted for in the frag FR_ADDRESS. 
Name: frag_offset_ignore_align_p; Comment: Return TRUE if FRAG2 follows FRAG1 with a fixed relationship between the two assuming alignment frags do nothing. Set OFFSET to the difference in address not already accounted for in the frag FR_ADDRESS. 
Name: frag_gtoffset_p; Comment: Return TRUE if we can determine whether FRAG2 OFF2 appears after (strict >, not >=) FRAG1 OFF1, assuming it is not before. Set *OFFSET so that resolve_expression will resolve an O_gt operation between them to false (0) if they are guaranteed to be at the same location, or to true (-1) if they are guaranteed to be at different locations. Return FALSE conservatively, e.g. if neither result can be guaranteed (yet). They are known to be in the same segment, and not the same frag (this is a fallback for frag_offset_fixed_p, that always takes care of this case), and it is expected (from the uses this is designed to simplify, namely location view increments) that frag2 is reachable from frag1 following the fr_next links, rather than the other way round. 
Name: get_dw_fde_start_addrS; Comment: Get the start address symbol from the DWARF FDE. 
Name: get_dw_fde_end_addrS; Comment: Get the start address symbol from the DWARF FDE. 
Name: get_dw_fde_pauth_b_key_p; Comment: Get whether PAUTH B key is used. 
Name: sframe_fre_set_begin_addr; Comment: SFrame Frame Row Entry (FRE) related functions. 
Name: get_offset_size_in_bytes; Comment: Given a signed offset, return the size in bytes needed to represent it. 
Name: sframe_fre_offset_func_map_index; Comment: Given an OFFSET_SIZE, return the size in bytes needed to represent it. 
Name: sframe_v1_set_fre_info; Comment: SFrame (SFRAME_VERSION_1) set FRE info. 
Name: sframe_v1_set_func_info; Comment: SFrame (SFRAME_VERSION_1) set function info. 
Name: sframe_set_version; Comment: SFrame version specific operations setup. 
Name: sframe_set_fre_info; Comment: SFrame set FRE info. 
Name: sframe_set_func_info; Comment: SFrame set func info. 
Name: get_fre_base_reg_id; Comment: Get CFA base register ID as represented in SFrame Frame Row Entry. 
Name: get_fre_num_offsets; Comment: Get number of offsets necessary for the SFrame Frame Row Entry. 
Name: sframe_get_fre_offset_size; Comment: Get the minimum necessary offset size (in bytes) for this SFrame frame row entry. 
Name: create_fre_start_addr_exp; Comment: Create a composite exression CEXP (for SFrame FRE start address) such that: exp = <val> OP_absent <width>, where, - <val> and <width> are themselves expressionS. - <val> stores the expression which when evaluated gives the value of the start address offset of the FRE. - <width> stores the expression when evaluated gives the number of bytes needed to encode the start address offset of the FRE. The use of OP_absent as the X_op_symbol helps identify this expression later when fragments are fixed up. 
Name: create_func_info_exp; Comment: Create a composite exression CEXP (for SFrame FDE function info) such that: exp = <rest_of_func_info> OP_modulus <width>, where, - <rest_of_func_info> and <width> are themselves expressionS. - <rest_of_func_info> stores a constant expression where X_add_number is used to stash away the func_info. The upper 4-bits of the func_info are copied back to the resulting byte by the fragment fixup logic. - <width> stores the expression when evaluated gives the size of the funtion in number of bytes. The use of OP_modulus as the X_op_symbol helps identify this expression later when fragments are fixed up. 
Name: get_num_sframe_fres; Comment: Get the total number of SFrame row entries across the FDEs. 
Name: sframe_fde_alloc; Comment: Allocate an SFrame FDE. 
Name: sframe_fde_link; Comment: Link the SFrame FDE in. 
Name: sframe_fde_free; Comment: Free up the SFrame FDE. 
Name: sframe_xlate_ctx_alloc; Comment: Allocate a new SFrame translation context. 
Name: sframe_xlate_ctx_init; Comment: Initialize the given SFrame translation context. 
Name: sframe_xlate_ctx_cleanup; Comment: Cleanup the given SFrame translation context. 
Name: sframe_xlate_ctx_finalize; Comment: Transfer the state from the SFrame translation context to the SFrame FDE. 
Name: sframe_xlate_ctx_add_fre; Comment: Add the given FRE in the list of frame row entries in the given FDE translation context. 
Name: sframe_row_entry_initialize; Comment: A SFrame Frame Row Entry is self-sufficient in terms of unwind information for a given PC. It contains information assimilated from multiple CFI instructions, and hence, a new SFrame FRE is initialized with the data from the previous known FRE, if any. Understandably, not all information (especially the instruction begin and end boundaries) needs to be relayed. Hence, the caller of this API must set the pc_begin and pc_end as applicable. 
Name: sframe_xlate_do_advance_loc; Comment: Translate DW_CFA_advance_loc into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_def_cfa; Comment: Translate DW_CFA_def_cfa into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_def_cfa_register; Comment: Translate DW_CFA_def_cfa_register into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_def_cfa_offset; Comment: Translate DW_CFA_def_cfa_offset into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_offset; Comment: Translate DW_CFA_offset into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_val_offset; Comment: Translate DW_CFA_val_offset into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_remember_state; Comment: Translate DW_CFA_remember_state into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_restore_state; Comment: Translate DW_CFA_restore_state into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_restore; Comment: Translate DW_CFA_restore into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_xlate_do_gnu_window_save; Comment: Translate DW_CFA_GNU_window_save into SFrame context. Return SFRAME_XLATE_OK if success. 
Name: sframe_do_cfi_insn; Comment: Process CFI_INSN and update the translation context with the FRE information. Returns an error code (sframe_xlate_err) if CFI_INSN is not successfully processed. 
Name: create_sframe_all; Comment: Create SFrame unwind info for all functions. This function consumes the already generated FDEs (by dw2gencfi) and generates unwind data in SFrame format. 
Name: hash_string_tuple; Comment: Hash function for a string_tuple. 
Name: eq_string_tuple; Comment: Equality function for a string_tuple. 
Name: htab_insert; Comment: Insert ELEMENT into HTAB. If REPLACE is non-zero existing elements are overwritten. If ELEMENT already exists, a pointer to the slot is returned. Otherwise NULL is returned. 
Name: htab_print_statistics; Comment: Print statistics about a hash table. 
Name: input_file_begin; Comment: These hooks accommodate most operating systems. 
Name: input_file_buffer_size; Comment: Return BUFFER_SIZE. 
Name: input_file_push; Comment: Push the state of our input, returning a pointer to saved info that can be restored with input_file_pop (). 
Name: input_file_open; Comment: Open the specified file, "" means stdin. Filename must not be null. 
Name: input_file_close; Comment: Close input file. 
Name: input_file_get; Comment: This function is passed to do_scrub_chars. 
Name: input_scrub_reinit; Comment: Initialize input buffering. 
Name: input_scrub_push; Comment: Push the state of input reading and scrubbing so that we can #include. The return value is a 'void *' (fudged for old compilers) to a save area, which can be restored by passing it to input_scrub_pop(). 
Name: input_scrub_new_file; Comment: Start reading input from a new file. Return start of caller's part of buffer. 
Name: input_scrub_include_file; Comment: Include a file from the current file. Save our state, cause it to be restored on EOF, and begin handling a new file. Same result as input_scrub_new_file. 
Name: input_scrub_include_sb; Comment: Start getting input from an sb structure. This is used when expanding a macro. 
Name: seen_at_least_1_file; Comment: The remaining part of this file deals with line numbers, error messages and so on. Return TRUE if we opened any file. 
Name: as_where_physical; Comment: Return the current physical input file name and line number, if known 
Name: as_where; Comment: Return the file name and line number at the top most macro invocation, unless .file / .line were used inside a macro. 
Name: as_where_top; Comment: Return the current file name and line number. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: itbl_parse; Comment: Open the table and use lex and yacc to parse the entries.Return 1 for failure; 0 for success. 
Name: itbl_add_reg; Comment: Add a register entry 
Name: itbl_add_insn; Comment: Add an instruction entry 
Name: itbl_add_operand; Comment: Add an operand to an instruction entry 
Name: itbl_init; Comment: Initialize for gas. 
Name: itbl_get_reg_val; Comment: Get processor's register name from val 
Name: itbl_get_val; Comment: Get processor's register value from name 
Name: itbl_assemble; Comment: Assemble instruction "name" with operands "s".name - name of instruction s - operands returns - long word for assembled instruction 
Name: itbl_disassemble; Comment: Disassemble instruction "insn". insn - instruction s - buffer to hold disassembled instruction returns - 1 if succeeded; 0 if failed 
Name: build_opcode; Comment: Calculate instruction's opcode and function values from entry 
Name: apply_range; Comment: Calculate absolute value given the relative value and bit position range within the instruction. The range is inclusive where 0 is least significant bit. A range of { 24, 20 } will have a mask ofbit 3 2 1 pos: 1098 7654 3210 9876 5432 1098 7654 3210 bin: 0000 0001 1111 0000 0000 0000 0000 0000 hex: 0 1 f 0 0 0 0 0 mask: 0x01f00000. 
Name: extract_range; Comment: Calculate relative value given the absolute value and bit position rangewithin the instruction. 
Name: itbl_get_field; Comment: Return next argument from string pointer "s" and advance s.delimiters are " ,()" 
Name: find_entry_byname; Comment: Search entries for a given processor and typeto find one matching the name "n". Return a pointer to the entry 
Name: find_entry_byval; Comment: Search entries for a given processor and typeto find one matching the value "val" for the range "r". Return a pointer to the entry. This function is used for disassembling fields of an instruction. 
Name: get_entries; Comment: Return a pointer to the list of entries for a given processor and type. 
Name: get_processor; Comment: Return an integral value for the processor passed from yyparse. 
Name: get_type; Comment: Return an integral value for the entry type passed from yyparse. 
Name: alloc_entry; Comment: Allocate and initialize an entry 
Name: alloc_field; Comment: Allocate and initialize an entry's field 
Name: listing_prev_line; Comment: Attach all current frags to the previous line instead of the current line. This is called by the MIPS backend when it discovers that it needs to add some NOP instructions; the added NOP instructions should go with the instruction that has the delay, not with the new instruction. 
Name: buffer_line; Comment: This function returns the next source line from the file supplied, truncated to size. It appends a fake line to the end of each input file to make using the returned buffer simpler. 
Name: rebuffer_line; Comment: This function rewinds the requested file back to the line requested, reads it in again into the buffer provided and then restores the file back to its original location. 
Name: listing_page; Comment: Number of lines printed on current page. 
Name: emit_line; Comment: Print a line into the list_file. Update the line count and if necessary start a new page. 
Name: debugging_pseudo; Comment: Sometimes the user doesn't want to be bothered by the debugging records inserted by the compiler, see if the line is suspicious. 
Name: print_timestamp; Comment: Print time stamp in ISO format: yyyy-mm-ddThh:mm:ss.ss+/-zzzz. 
Name: print_options; Comment: Print options passed to as. 
Name: listing_general_info; Comment: Print a first section with basic info like file names, as version, options passed, target, and timestamp. The format of this section is as follows: AS VERSION fieldname TAB ':' fieldcontents { TAB fieldcontents-cont } 
Name: listing_list; Comment: Turn listing on or off. An argument of 0 means to turn off listing. An argument of 1 means to turn on listing. An argument of 2 means to turn off listing, but as of the next line; that is, the current line should be listed, but the next line should not. 
Name: listing_list; Comment: Dummy functions for when compiled without listing enabled. 
Name: macro_init; Comment: Initialize macro processing. 
Name: macro_set_alternate; Comment: Switch in and out of alternate mode on the fly. 
Name: macro_mri_mode; Comment: Switch in and out of MRI mode on the fly. 
Name: buffer_and_nest; Comment: Read input lines till we get to a TO string. Increase nesting depth if we get a FROM string. Put the results into sb at PTR. FROM may be NULL (or will be ignored) if TO is "ENDR". Add a new input line to an sb using GET_LINE. Return 1 on success, 0 on unexpected EOF. 
Name: get_token; Comment: Pick up a token. 
Name: getstring; Comment: Pick up a string. 
Name: get_any_string; Comment: Fetch string from the input stream, rules: 'Bxyx<whitespace> _-> return 'Bxyza %<expr>__-> return string of decimal value of <expr> "string"__-> return string (string)__-> return (string-including-whitespaces) xyx<whitespace> -> return xyz. 
Name: new_formal; Comment: Allocate a new formal. 
Name: del_formal; Comment: Free a formal. 
Name: do_formals; Comment: Pick up the formal parameters of a macro definition. 
Name: free_macro; Comment: Free the memory allocated to a macro. 
Name: define_macro; Comment: Define a new macro. Returns NULL on success, otherwise returns an error message. If NAMEP is not NULL, *NAMEP is set to the name of the macro which was defined. 
Name: get_apost_token; Comment: Scan a token, and then skip KIND. 
Name: sub_actual; Comment: Substitute the actual value for a formal parameter. 
Name: macro_expand_body; Comment: Expand the body of a macro. 
Name: macro_expand; Comment: Assign values to the formal parameters of a macro, and expand the body. 
Name: check_macro; Comment: Check for a macro. If one is found, put the expansion into *EXPAND. Return 1 if a macro is found, 0 otherwise. 
Name: delete_macro; Comment: Delete a macro. 
Name: expand_irp; Comment: Handle the MRI IRP and IRPC pseudo-ops. These are handled as a combined macro definition and execution. This returns NULL on success, or an error message otherwise. 
Name: identify; Comment: Despite the rest of the comments in this file, (FIXME-SOON), here is the current scheme for error messages etc: as_fatal() is used when gas is quite confused and continuing the assembly is pointless. In this case we exit immediately with error status. as_bad() is used to mark errors that result in what we presume to be a useless object file. Say, we ignored something that might have been vital. If we see any of these, assembly will continue to the end of the source, no object file will be produced, and we will terminate with error status. The new option, -Z, tells us to produce an object file anyway but we still exit with error status. The assumption here is that you don't want this object file but we could be wrong. as_warn() is used when we have an error from which we have a plausible error recovery. eg, masking the top bits of a constant that is longer than will fit in the destination. In this case we will continue to assemble the source, although we may have made a bad assumption, and we will produce an object file and return normal exit status (ie, no error). The new option -X tells us to treat all as_warn() errors as as_bad() errors. That is, no object file will be produced and we will exit with error status. The idea here is that we don't kill an entire make because of an error that we knew how to correct. On the other hand, sometimes you might want to stop the make at these points. as_tsktsk() is used when we see a minor error for which our error recovery action is almost certainly correct. In this case, we print a message and then assembly continues as though no error occurred. as_abort () is used for logic failure (assert or abort, signal). 
Name: as_show_where; Comment: Print the current location to stderr. 
Name: as_info_where; Comment: Send to stderr a string as information, with location data passed in. Note that for now this is not intended for general use. 
Name: as_tsktsk; Comment: Send to stderr a string as a warning, and locate warning in input file(s). Please only use this for when we have some recovery action. Please explain in string (which may have '_n's) what recovery was done. 
Name: as_warn_internal; Comment: The common portion of as_warn and as_warn_where. 
Name: as_warn; Comment: Send to stderr a string as a warning, and locate warning in input file(s). Please only use this for when we have some recovery action. Please explain in string (which may have '_n's) what recovery was done. 
Name: as_warn_where; Comment: Like as_warn but the file name and line number are passed in. Unfortunately, we have to repeat the function in order to handle the varargs correctly and portably. 
Name: as_bad_internal; Comment: The common portion of as_bad and as_bad_where. 
Name: as_bad; Comment: Send to stderr a string as a warning, and locate warning in input file(s). Please use when there is no recovery, but we want to continue processing but not produce an object file. Please explain in string (which may have '_n's) what recovery was done. 
Name: as_bad_where; Comment: Like as_bad but the file name and line number are passed in. Unfortunately, we have to repeat the function in order to handle the varargs correctly and portably. 
Name: as_fatal; Comment: Send to stderr a string as a fatal message, and print location of error in input file(s). Please only use this for when we DON'T have some recovery action. It xexit()s with a warning status. 
Name: as_abort; Comment: Indicate internal constency error. Arguments: Filename, line number, optional function name. FILENAME may be NULL, which we use for crash-via-signal. 
Name: signal_crash; Comment: Handler for fatal signals, such as SIGSEGV. 
Name: signal_init; Comment: Register signal handlers, for less abrubt crashes. 
Name: try_macro; Comment: Helper function of read_a_source_file, which tries to expand a macro. 
Name: start_bundle; Comment: Start a new instruction bundle. Returns the rs_align_code frag that will be used to align the new bundle. 
Name: pending_bundle_size; Comment: Calculate the maximum size after relaxation of the region starting at the given frag and extending through frag_now (which is unfinished). 
Name: finish_bundle; Comment: Finish off the frag created to ensure bundle alignment. 
Name: assemble_one; Comment: Assemble one instruction. This takes care of the bundle features around calling md_assemble. 
Name: do_align; Comment: Guts of .align directive: N is the power of two to which to align. A value of zero is accepted but ignored: the default alignment of the section will be at least this. FILL may be NULL, or it may point to the bytes of the fill pattern. LEN is the length of whatever FILL points to, if anything. If LEN is zero but FILL is not NULL then LEN is treated as if it were one. MAX is the maximum number of characters to skip when doing the alignment, or 0 if there is no maximum. 
Name: read_a_source_file; Comment: We read the file, putting things into a web that represents what we have been reading. 
Name: convert_to_bignum; Comment: Convert O_constant expression EXP into the equivalent O_big representation. Take the sign of the number from SIGN rather than X_add_number. 
Name: mri_comment_field; Comment: For most MRI pseudo-ops, the line actually ends at the first nonquoted space. This function looks for that point, stuffs a null in, and sets *STOPCP to the character that used to be there, and returns the location. Until I hear otherwise, I am going to assume that this is only true for the m68k MRI assembler. 
Name: mri_comment_end; Comment: Skip to the end of an MRI comment field. 
Name: s_align_bytes; Comment: Handle the .align pseudo-op on machines where ".align 4" means align to a 4 byte boundary. 
Name: s_align_ptwo; Comment: Handle the .align pseudo-op on machines where ".align 4" means align to a 2**4 boundary. 
Name: s_altmacro; Comment: Switch in and out of alternate macro mode. 
Name: read_symbol_name; Comment: Read a symbol name from input_line_pointer. Stores the symbol name in a buffer and returns a pointer to this buffer. The buffer is xalloc'ed. It is the caller's responsibility to free this buffer. The name is not left in the i_l_p buffer as it may need processing to handle escape characters. Advances i_l_p to the next non-whitespace character. If a symbol name could not be read, the routine issues an error messages, skips to the end of the line and returns NULL. 
Name: s_mri_common; Comment: The MRI COMMON pseudo-op. We handle this by creating a common symbol with the appropriate name. We make s_space do the right thing by increasing the size. 
Name: s_file_string; Comment: Handle the .file pseudo-op. This default definition may be overridden by the object or CPU specific pseudo-ops. 
Name: s_linefile; Comment: Handle the .linefile pseudo-op. This is automatically generated by do_scrub_chars when a preprocessor # line comment is seen. This default definition may be overridden by the object or CPU specific pseudo-ops. 
Name: s_end; Comment: Handle the .end pseudo-op. Actually, the real work is done in read_a_source_file. 
Name: s_err; Comment: Handle the .err pseudo-op. 
Name: s_errwarn; Comment: Handle the .error and .warning pseudo-ops. 
Name: s_fail; Comment: Handle the MRI fail pseudo-op. 
Name: s_irp; Comment: Handle the MRI IRP and IRPC pseudo-ops. 
Name: s_linkonce; Comment: Handle the .linkonce pseudo-op. This tells the assembler to mark the section to only be linked once. However, this is not supported by most object file formats. This takes an optional argument, which is what to do about duplicates. 
Name: s_lcomm_internal; Comment: Called from s_comm_internal after symbol name and size have been parsed. NEEDS_ALIGN is 0 if it was an ".lcomm" (2 args only), 1 if this was a ".bss" directive which has a 3rd argument (alignment as a power of 2), or 2 if this was a ".bss" directive with alignment in bytes. 
Name: get_line_sb; Comment: Read a line into an sb. Returns the character that ended the line or zero if there are no more lines. 
Name: s_macro; Comment: Define a macro. This is an interface to macro.c. 
Name: s_mexit; Comment: Handle the .mexit pseudo-op, which immediately exits a macro expansion. 
Name: s_mri; Comment: Switch in and out of MRI mode. 
Name: do_org; Comment: Handle changing the location counter. 
Name: s_mri_sect; Comment: Handle parsing for the MRI SECT/SECTION pseudo-op. This should be called by the obj-format routine which handles section changing when in MRI mode. It will create a new section, and return it. It will set *TYPE to the section type: one of 'C' (code), 'D' (data), 'M' (mixed), or 'R' (romable). The flags will be set in the section. 
Name: s_print; Comment: Handle the .print pseudo-op. 
Name: s_purgem; Comment: Handle the .purgem pseudo-op. 
Name: s_bad_end; Comment: Handle the .endm/.endr pseudo-ops. 
Name: s_rept; Comment: Handle the .rept pseudo-op. 
Name: do_repeat; Comment: This function provides a generic repeat block implementation. It allows different directives to be used as the start/end keys. Any text matching the optional EXPANDER in the block is replaced by the remaining iteration count. 
Name: end_repeat; Comment: Skip to end of current repeat loop; EXTRA indicates how many additional input buffers to skip. Assumes that conditionals preceding the loop end are properly nested. This function makes it easier to implement a premature "break" out of the loop. The EXTRA arg accounts for other buffers we might have inserted, such as line substitutions. 
Name: s_set; Comment: Handle the .equ, .equiv, .eqv, and .set directives. If EQUIV is 1, then this is .equiv, and it is an error if the symbol is already defined. If EQUIV is -1, the symbol additionally is a forward reference. 
Name: float_length; Comment: Obtain the size of a floating point number, given a type. 
Name: s_float_space; Comment: This is like s_space, but the value is a floating point number with the given precision. This is for the MRI dcb.s pseudo-op and friends. 
Name: s_struct; Comment: Handle the .struct pseudo-op, as found in MIPS assemblers. 
Name: s_weakref; Comment: .weakref x, y sets x as an alias to y that, as long as y is not referenced directly, will cause y to become a weak symbol. 
Name: demand_empty_rest_of_line; Comment: Verify that we are at the end of a line. If not, issue an error and skip to EOL. This function may leave input_line_pointer one past buffer_limit, so should not be called from places that may dereference input_line_pointer unconditionally. Note that when the gas parser is switched to handling a string (where buffer_limit should be the size of the string excluding the NUL terminator) this will be one past the NUL; is_end_of_line(0) returns true. 
Name: ignore_rest_of_line; Comment: None Don't call it from within expression parsing code in an attempt to silence further errors. 
Name: set_zero_frag; Comment: Sets frag for given symbol to zero_address_frag, except when the symbol frag is already set to a dummy listing frag. 
Name: pseudo_set; Comment: In:_Pointer to a symbol._Input_line_pointer->expression. Out:_Input_line_pointer->just after any whitespace after expression. _Tried to set symbol to value of expression. _Will change symbols type, value, and frag; 
Name: s_reloc; Comment: .reloc offset, reloc_name, symbol+addend. 
Name: emit_expr; Comment: Put the contents of expression EXP into the object file using NBYTES bytes. If need_pass_2 is 1, this does nothing. 
Name: parse_repeat_cons; Comment: Parse a repeat expression for cons. This is used by the MIPS assembler. The format is NUMBER:COUNT; NUMBER appears in the object file COUNT times. To use this for a target, define REPEAT_CONS_EXPRESSIONS. 
Name: hex_float; Comment: Parse a floating point number represented as a hex constant. This permits users to specify the exact bits they want in the floating point number. 
Name: emit_leb128_expr; Comment: Generate the appropriate fragments for a given expression to emit a leb128 value. SIGN is 1 for sleb, 0 for uleb. 
Name: s_leb128; Comment: Parse the .sleb128 and .uleb128 pseudos. 
Name: stringer; Comment: Worker to do .ascii etc statements. Reads 0 or more ',' separated, double-quoted strings. Caller should have checked need_pass_2 is FALSE because we don't check it. Checks for end-of-line. BITS_APPENDZERO says how many bits are in a target char. The bottom bit is set if a NUL char should be appended to the strings. 
Name: next_char_of_string; Comment: FIXME-SOMEDAY: I had trouble here on characters with the high bits set. We'll probably also have trouble with multibyte chars, wide chars, etc. Also be careful about returning values bigger than 1 byte. xoxorich. 
Name: demand_copy_C_string; Comment: Like demand_copy_string, but return NULL if the string contains any '_0's. Give a warning if that happens. 
Name: demand_copy_string; Comment: Demand string, but return a safe (=private) copy of the string. Return NULL if we can't read a string here. 
Name: is_it_end_of_statement; Comment: In:_Input_line_pointer->next character. Do:_Skip input_line_pointer over all whitespace. Out:_1 if input_line_pointer->end-of-line. 
Name: s_incbin; Comment: .incbin -- include a file verbatim at the current location. 
Name: s_include; Comment: .include -- include a file at this point. 
Name: generate_file_debug; Comment: Output debugging information to denote the source file. 
Name: generate_lineno_debug; Comment: Output line number debugging information for the current source line. 
Name: s_func; Comment: Output debugging information to mark a function entry point or end point. END_P is zero for .func, and non-zero for .endfunc. 
Name: do_s_func; Comment: Subroutine of s_func so targets can choose a different default prefix. If DEFAULT_PREFIX is NULL, use the target's "leading char". 
Name: input_scrub_insert_line; Comment: Inserts the given line into the input stream. This call avoids macro/conditionals nesting checking, since the contents of the line are assumed to replace the contents of a line already scanned. An appropriate use of this function would be substitution of input lines when called by md_start_line_hook(). The given line is assumed to already be properly scrubbed. 
Name: input_scrub_insert_file; Comment: Insert a file into the input stream; the path must resolve to an actual file; no include path searching or dependency registering is performed. 
Name: temp_ilp; Comment: Use BUF as a temporary input pointer for calling other functions in this file. BUF must be a C string, so that its end can be found by strlen. Also sets the buffer_limit variable (local to this file) so that buffer overruns should not occur. Saves the current input line pointer so that it can be restored by calling restore_ilp(). Does not support recursion. 
Name: restore_ilp; Comment: Restore a saved input line pointer. 
Name: add_debug_prefix_map; Comment: Record a debug file prefix mapping. ARG is the argument to -fdebug-prefix-map and must be of the form OLD=NEW. 
Name: remap_debug_filename; Comment: Perform user-specified mapping of debug filename prefixes. Returns a newly allocated buffer containing the name corresponding to FILENAME. It is the caller's responsibility to free the buffer. 
Name: sb_build; Comment: Initializes an sb. 
Name: sb_kill; Comment: Deallocate the sb at ptr. 
Name: sb_add_sb; Comment: Add the sb at s to the end of the sb at ptr. 
Name: sb_scrub_and_add_sb; Comment: Run the sb at s through do_scrub_chars and add the result to the sb at ptr. 
Name: sb_check; Comment: Make sure that the sb at ptr has room for another len characters, and grow it if it doesn't. 
Name: sb_reset; Comment: Make the sb at ptr point back to the beginning. 
Name: sb_add_char; Comment: Add character c to the end of the sb at ptr. 
Name: sb_add_string; Comment: Add null terminated string s to the end of sb at ptr. 
Name: sb_add_buffer; Comment: Add string at s of length len to sb at ptr 
Name: sb_terminate; Comment: Write terminating NUL and return string. 
Name: sb_skip_white; Comment: Start at the index idx into the string in sb at ptr and skip whitespace. return the index of the first non whitespace character. 
Name: sb_skip_comma; Comment: Start at the index idx into the sb at ptr. skips whitespace, a comma and any following whitespace. returns the index of the next character. 
Name: sframe_estimate_size_before_relax; Comment: The function estimates the size of a rs_sframe variant frag based on the current values of the symbols. It is called before the relaxation loop. We set fr_subtype{0:2} to the expected length. 
Name: sframe_relax_frag; Comment: This function relaxes a rs_sframe variant frag based on the current values of the symbols. fr_subtype{0:2} is the current length of the frag. This returns the change in frag length. 
Name: sframe_convert_frag; Comment: This function converts a rs_sframe variant frag into a normal fill frag. This is called after all relaxation has been done. fr_subtype{0:2} will be the desired length of the frag. 
Name: aout_process_stab; Comment: Here instead of obj-aout.c because other formats use it too. 
Name: s_stab_generic; Comment: This can handle different kinds of stabs (s,n,d) and different kinds of stab sections. If STAB_SECNAME_OBSTACK_END is non-NULL, then STAB_SECNAME and STABSTR_SECNAME will be freed if possible before this function returns (the former by obstack_free). 
Name: s_stab; Comment: Regular stab directive. 
Name: s_xstab; Comment: "Extended stabs", used in Solaris only now. 
Name: s_desc; Comment: Frob invented at RMS' request. Set the n_desc of a symbol. 
Name: stabs_generate_asm_file; Comment: Generate stabs debugging information to denote the main source file. 
Name: generate_asm_file; Comment: Generate stabs debugging information to denote the source file. TYPE is one of N_SO, N_SOL. 
Name: stabs_generate_asm_lineno; Comment: Generate stabs debugging information for the current line. This is used to produce debugging information for an assembler file. 
Name: stabs_generate_asm_func; Comment: Emit a function stab. All assembler functions are assumed to have return type `void'. 
Name: stabs_generate_asm_endfunc; Comment: Emit a stab to record the end of a function. 
Name: subseg_change; Comment: *___subseg_change() Change the subsegment we are in, BUT DO NOT MAKE A NEW FRAG for the subsegment. If we are already in the correct subsegment, change nothing. This is used eg as a worker for subseg_set [which does make a new frag_now] and for changing segments after we have read the source. We construct eg fixSs even after the source file is read, so we do have to keep the segment context correct. 
Name: subseg_get; Comment: *___subseg_set(segT, subsegT) If you attempt to change to the current subsegment, nothing happens. In:_segT, subsegT code for new subsegment. *_frag_now -> incomplete frag for current subsegment. *_If frag_now==NULL, then there is no old, incomplete frag, so *_the old frag is not closed off. Out:_now_subseg, now_seg updated. *_Frchain_now points to the (possibly new) struct frchain for this *_sub-segment. 
Name: subseg_force_new; Comment: Like subseg_new, except a new section is always created, even if a section with that name already exists. 
Name: subseg_text_p; Comment: Return whether the specified segment is thought to hold text. 
Name: seg_not_empty_p; Comment: Return non zero if SEC has at least one byte of data. It is possible that we'll return zero even on a non-empty section because we don't know all the fragment types, and it is possible that an fr_fix == 0 one still contributes data. Think of this as seg_definitely_not_empty_p. 
Name: hash_symbol_entry; Comment: Hash function for a symbol_entry. 
Name: eq_symbol_entry; Comment: Equality function for a symbol_entry. 
Name: notes_alloc; Comment: Utility functions to allocate and duplicate memory on the notes obstack, each like the corresponding function without "notes_" prefix. All of these exit on an allocation failure. 
Name: notes_free; Comment: Use with caution! Frees PTR and all more recently allocated memory on the notes obstack. 
Name: symbol_new; Comment: Return a pointer to a new symbol. Die if we can't make a new symbol. Fill in the symbol's values. Add symbol to end of symbol chain. This function should be called in the general case of creating a symbol. However, if the output file symbol table has already been set, and you are certain that this symbol won't be wanted in the output file, you can call symbol_create. 
Name: save_symbol_name; Comment: Save a symbol name on a permanent obstack, and convert it according to the object file format. 
Name: symbol_create; Comment: Create a symbol. NAME is copied, the caller can destroy/modify. 
Name: local_symbol_make; Comment: Create a local symbol and insert it into the local hash table. 
Name: local_symbol_convert; Comment: Convert a local symbol into a real symbol. 
Name: symbol_table_insert; Comment: Die if we can't insert the symbol. 
Name: symbol_find_or_make; Comment: If a symbol name does not exist, create it as undefined, and insert it into the symbol table. Return a pointer to it. 
Name: symbol_clone_if_forward_ref; Comment: Referenced symbols, if they are forward references, need to be cloned (without replacing the original) so that the value of the referenced symbols at the point of use is saved by the clone. 
Name: symbol_find_exact; Comment: Implement symbol table lookup. In:_A symbol's name as a string: '_0' can't be part of a symbol name. Out:_NULL if the name was not in the symbol table, else the address of a struct symbol associated with that name. 
Name: symbol_append; Comment: Link symbol ADDME after symbol TARGET in the chain. 
Name: symbol_clear_list_pointers; Comment: Set the chain pointers of SYMBOL to null. 
Name: symbol_remove; Comment: Remove SYMBOLP from the list. 
Name: symbol_insert; Comment: Link symbol ADDME before symbol TARGET in the chain. 
Name: resolve_symbol_value; Comment: Resolve the value of a symbol. This is called during the final pass over the symbol table to resolve any symbols with complex values. 
Name: resolve_local_symbol; Comment: A static function passed to hash_traverse. 
Name: resolve_local_symbol_values; Comment: Resolve all local symbols. 
Name: snapshot_symbol; Comment: Obtain the current value of a symbol without changing any sub-expressions used. 
Name: dollar_label_name; Comment: Caller must copy returned name: we re-use the area for the next name. The mth occurrence of label n: is turned into the symbol "Ln^Am" where n is the label number and m is the instance number. "L" makes it a label discarded unless debugging and "^A"('_1') ensures no ordinary symbol SHOULD get the same name as a local label symbol. The first "4:" is "L4^A1" - the m numbers begin at 1. fb labels get the same treatment, except that ^B is used in place of ^A. AUGEND is 0 for current instance, 1 for new instance. 
Name: fb_label_instance_inc; Comment: Add one to the instance number of this fb label. 
Name: fb_label_name; Comment: Caller must copy returned name: we re-use the area for the next name. The mth occurrence of label n: is turned into the symbol "Ln^Bm" where n is the label number and m is the instance number. "L" makes it a label discarded unless debugging and "^B"('_2') ensures no ordinary symbol SHOULD get the same name as a local label symbol. The first "4:" is "L4^B1" - the m numbers begin at 1. dollar labels get the same treatment, except that ^A is used in place of ^B. AUGEND is 0 for nb, 1 for n:, nf. 
Name: decode_local_label_name; Comment: Decode name that may have been generated by foo_label_name() above. If the name wasn't generated by foo_label_name(), then return it unaltered. This is used for error messages. 
Name: S_GET_VALUE_WHERE; Comment: Get the value of a symbol. 
Name: S_SET_VALUE; Comment: Set the value of a symbol. 
Name: S_FORCE_RELOC; Comment: Return true for symbols that should not be reduced to section symbols or eliminated from expressions, because they may be overridden by the linker. 
Name: symbol_previous; Comment: Return the previous symbol in a chain. 
Name: symbol_next; Comment: Return the next symbol in a chain. 
Name: symbol_get_value_expression; Comment: Return a pointer to the value of a symbol as an expression. 
Name: symbol_set_value_expression; Comment: Set the value of a symbol to an expression. 
Name: symbol_same_p; Comment: Return whether 2 symbols are the same. 
Name: symbol_X_add_number; Comment: Return a pointer to the X_add_number component of a symbol. 
Name: symbol_set_value_now; Comment: Set the value of SYM to the current position in the current segment. 
Name: symbol_set_frag; Comment: Set the frag of a symbol. 
Name: symbol_get_frag; Comment: Return the frag of a symbol. 
Name: symbol_mark_used; Comment: Mark a symbol as having been used. 
Name: symbol_clear_used; Comment: Clear the mark of whether a symbol has been used. 
Name: symbol_used_p; Comment: Return whether a symbol has been used. 
Name: symbol_mark_used_in_reloc; Comment: Mark a symbol as having been used in a reloc. 
Name: symbol_clear_used_in_reloc; Comment: Clear the mark of whether a symbol has been used in a reloc. 
Name: symbol_used_in_reloc_p; Comment: Return whether a symbol has been used in a reloc. 
Name: symbol_mark_mri_common; Comment: Mark a symbol as an MRI common symbol. 
Name: symbol_clear_mri_common; Comment: Clear the mark of whether a symbol is an MRI common symbol. 
Name: symbol_mri_common_p; Comment: Return whether a symbol is an MRI common symbol. 
Name: symbol_mark_written; Comment: Mark a symbol as having been written. 
Name: symbol_clear_written; Comment: Clear the mark of whether a symbol has been written. 
Name: symbol_written_p; Comment: Return whether a symbol has been written. 
Name: symbol_mark_removed; Comment: Mark a symbol as to be removed. 
Name: symbol_removed_p; Comment: Return whether a symbol has been marked to be removed. 
Name: symbol_mark_resolved; Comment: Mark a symbol has having been resolved. 
Name: symbol_resolved_p; Comment: Return whether a symbol has been resolved. 
Name: symbol_section_p; Comment: Return whether a symbol is a section symbol. 
Name: symbol_equated_p; Comment: Return whether a symbol is equated to another symbol. 
Name: symbol_equated_reloc_p; Comment: Return whether a symbol is equated to another symbol, and should be treated specially when writing out relocs. 
Name: symbol_constant_p; Comment: Return whether a symbol has a constant value. 
Name: symbol_shadow_p; Comment: Return whether a symbol was cloned and thus removed from the global symbol list. 
Name: symbol_symbolS; Comment: If S is a struct symbol return S, otherwise return NULL. 
Name: symbol_get_bfdsym; Comment: Return the BFD symbol for a symbol. 
Name: symbol_set_bfdsym; Comment: Set the BFD symbol for a symbol. 
Name: symbol_get_obj; Comment: Get a pointer to the object format information for a symbol. 
Name: symbol_set_obj; Comment: Set the object format information for a symbol. 
Name: symbol_get_tc; Comment: Get a pointer to the processor information for a symbol. 
Name: symbol_set_tc; Comment: Set the processor information for a symbol. 
Name: symbol_relc_make_sym; Comment: Convert given symbol to a new complex-relocation symbol name. This may be a recursive function, since it might be called for non-leaf nodes (plain symbols) in the expression tree. The caller owns the returning string, so should free it eventually. Errors are indicated via as_bad and a NULL return value. The given symbol is marked with used_in_reloc. 
Name: symbol_relc_make_value; Comment: Convert given value to a new complex-relocation symbol name. This is a non-recursive function, since it is be called for leaf nodes (plain values) in the expression tree. The caller owns the returning string, so should free() it eventually. No errors. 
Name: symbol_relc_make_expr; Comment: Convert given expression to a new complex-relocation symbol name. This is a recursive function, since it traverses the entire given expression tree. The caller owns the returning string, so should free() it eventually. Errors are indicated via as_bad() and a NULL return value. 
Name: fix_at_start; Comment: Create a fixup at the beginning of FRAG. The arguments are the same as for fix_new, except that WHERE is implicitly 0. 
Name: generic_force_reloc; Comment: Generic function to determine whether a fixup requires a relocation. 
Name: append; Comment: Append a string onto another string, bumping the pointer along. 
Name: renumber_sections; Comment: Reset the section indices after removing the gas created sections. 
Name: resolve_reloc_expr_symbols; Comment: Resolve U.A.OFFSET_SYM and U.A.SYM fields of RELOC_LIST entries, and check for validity. Convert RELOC_LIST from using U.A fields to U.B fields. 
Name: adjust_reloc_syms; Comment: This pass over fixups decides whether symbols can be replaced with section symbols. 
Name: fixup_segment; Comment: fixup_segment() Go through all the fixS's in a segment and see which ones can be handled now. (These consist of fixS where we have since discovered the value of a symbol, or the address of the frag involved.) For each one, call md_apply_fix to put the fix into the frag data. Ones that we couldn't completely handle here will be output later by emit_relocations. 
Name: md_generate_nops; Comment: Genenerate COUNT bytes of no-op instructions to WHERE. A target backend must override this with proper no-op instructions. 
Name: create_note_reloc; Comment: Create a relocation against an entry in a GNU Build attribute section. 
Name: write_object_file; Comment: Write the object file. 
Name: relax_frag; Comment: Relax a fragment by scanning TC_GENERIC_RELAX_TABLE. 
Name: relax_segment; Comment: Now we have a segment, not a crowd of sub-segments, we can make fr_address values. Relax the frags. After this, all frags in this segment have addresses that are correct within the segment. Since segments live in different file addresses, these frag addresses may not be the same as final object-file addresses. 
Name: unget_bits; Comment: Num had better be less than LITTLENUM_NUMBER_OF_BITS. 
Name: atof_ieee_detail; Comment: Build a floating point constant at str into a IEEE floating point number. This function does the same thing as atof_ieee however it allows more control over the exact format, i.e. explicitly specifying the precision and number of exponent bits instead of relying on this infomation being deduced from a given type. If generic_float_info is not NULL then it will be set to contain generic infomation about the parsed floating point number. Returns pointer past text consumed. 
Name: gen_to_words; Comment: Turn generic_floating_point_number into a real float/double/extended. 
Name: ieee_md_atof; Comment: This is a utility function called from various tc-*.c files. It is here in order to reduce code duplication. Turn a string at input_line_pointer into a floating point constant of type TYPE (a character found in the FLT_CHARS macro), and store it as LITTLENUMS in the bytes buffer LITP. The number of chars emitted is stored in *SIZEP. BIG_WORDIAN is TRUE if the littlenums should be emitted most significant littlenum first. An error message is returned, or a NULL pointer if everything went OK. 
Name: atof_vax_sizeof; Comment: Number of chars in flonum type 'letter'. 
Name: vax_md_atof; Comment: For .hfloats. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: set_start_state; Comment: Our start state is KEYWORD as we have command keywords such as PREFETCH. 
Name: valid_dreg_pair; Comment: Auxiliary functions. 
Name: check_macfunc_option; Comment: Check mac option. 
Name: check_macfuncs; Comment: Check (vector) mac funcs and ops. 
Name: binary; Comment: Return the expression structure that allows symbol operations. If the left and right children are constants, do the operation. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: m68k_reg_parse; Comment: If *CCP could be a register, return the register number and advance *CCP. Otherwise don't change *CCP, and return 0. 
Name: yylex; Comment: The lexer. 
Name: m68k_ip_op; Comment: Parse an m68k operand. This is the only function which is called from outside this file. 
Name: yyerror; Comment: The error handler. 
Name: obj_aout_frob_file_before_fix; Comment: Relocation processing may require knowing the VMAs of the sections. Writing to a section will cause the BFD back end to compute the VMAs. This function also ensures that file size is large enough to cover a_text and a_data should text or data be the last section in the file. 
Name: obj_aout_weak; Comment: Handle .weak. This is a GNU extension. 
Name: obj_aout_type; Comment: Handle .type. On {Net,Open}BSD, this is used to set the n_other field, which is then apparently used when doing dynamic linking. Older versions of gas ignored the .type pseudo-op, so we also ignore it if we can't parse it. 
Name: aout_pop_insert; Comment: Support for an AOUT emulation. 
Name: get_pxdata_name; Comment: Build based on segment the derived .pdata/.xdata segment name containing origin segment's postfix name part. 
Name: alloc_pxdata_item; Comment: Allocate a seh_seg_list structure. 
Name: make_pxdata_seg; Comment: Generate pdata/xdata segment with same linkonce properties of based segment. 
Name: seh_validate_seg; Comment: Check if current segment has same name. 
Name: obj_coff_seh_code; Comment: Switch back to the code section, whatever that may be. 
Name: seh_get_target_kind; Comment: Return the style of SEH unwind info to generate. 
Name: verify_context; Comment: Verify that we're in the context of a seh_proc. 
Name: verify_context_and_target; Comment: Similar, except we also verify the appropriate target. 
Name: skip_whitespace_and_comma; Comment: Skip whitespace and a comma. Error if the comma is not seen. 
Name: obj_coff_seh_32; Comment: Mark current context to use 32-bit instruction (arm). 
Name: obj_coff_seh_eh; Comment: Set for current context the handler and optional data (arm). 
Name: obj_coff_seh_handler; Comment: Set for current context the default handler (x64). 
Name: obj_coff_seh_handlerdata; Comment: Switch to subsection for handler data for exception region (x64). 
Name: do_seh_endproc; Comment: Mark end of current context. 
Name: obj_coff_seh_proc; Comment: Mark begin of new context. 
Name: obj_coff_seh_endprologue; Comment: Mark end of prologue for current context. 
Name: obj_coff_seh_do_final; Comment: End-of-file hook. 
Name: seh_x64_make_prologue_element; Comment: Enter a prologue element into current context (x64). 
Name: seh_x64_read_reg; Comment: Helper to read a register name from input stream (x64). 
Name: obj_coff_seh_pushreg; Comment: Add a register push-unwind token to the current context. 
Name: obj_coff_seh_pushframe; Comment: Add a register frame-unwind token to the current context. 
Name: obj_coff_seh_save; Comment: Add a register save-unwind token to current context. 
Name: obj_coff_seh_stackalloc; Comment: Add a stack-allocation token to current context. 
Name: obj_coff_seh_setframe; Comment: Add a frame-pointer token to current context. 
Name: seh_x64_write_prologue_data; Comment: Write out prologue data for x64. 
Name: seh_x64_write_function_xdata; Comment: Write out the xdata information for one function (x64). 
Name: write_function_xdata; Comment: Write out xdata for one function. 
Name: seh_arm_write_function_pdata; Comment: Write pdata section data for one function (arm). 
Name: write_function_pdata; Comment: Write out pdata for one function. 
Name: stack_init; Comment: Stack stuff. 
Name: obj_coff_bss; Comment: We accept the .bss directive to set the section for backward compatibility with earlier versions of gas. 
Name: obj_coff_common_parse; Comment: Called from read.c:s_comm after we've parsed .comm symbol, size. Parse a possible alignment value. 
Name: fetch_coff_debug_section; Comment: @@ Ick. 
Name: c_symbol_merge; Comment: Merge a debug symbol containing debug information into a normal symbol. 
Name: obj_coff_loc; Comment: .loc is essentially the same as .ln; parse it for assembler compatibility. 
Name: obj_coff_ident; Comment: Handle the .ident pseudo-op. 
Name: weak_is_altname; Comment: Return nonzero if name begins with weak alternate symbol prefix. 
Name: weak_name2altname; Comment: Return the name of the alternate symbol name corresponding to a weak symbol's name. 
Name: weak_altname2name; Comment: Return the name of the weak symbol corresponding to an alternate symbol. 
Name: weak_uniquify; Comment: Make a weak symbol name unique by appending the name of an external symbol. 
Name: obj_coff_weak; Comment: Handle .weak. This is a GNU extension in formats other than PE. 
Name: obj_coff_section; Comment: Implement the .section pseudo op: _.section name {, "flags"} ^ ^ | +--- optional flags: 'b' for bss | 'i' for info +-- section name 'l' for lib 'n' for noload 'o' for over 'w' for data ______ 'd' (apparently m88k for data) ______ 'e' for exclude 'x' for text ______ 'r' for read-only data ______ 's' for shared data (PE) ______ 'y' for noread _____ '0' - '9' for power-of-two alignment (GNU extension). But if the argument is not a quoted string, treat it as a subsegment number. Note the 'a' flag is silently ignored. This allows the same .section directive to be parsed in both ELF and COFF formats. 
Name: coff_pop_insert; Comment: Support for a COFF emulation. 
Name: ecoff_frob_file_before_fix; Comment: Set section VMAs and GP values before reloc processing. 
Name: ecoff_frob_file; Comment: Swap out the symbols and debugging information for BFD. 
Name: obj_ecoff_set_ext; Comment: This is called by the ECOFF code to set the external information for a symbol. We just pass it on to BFD, which expects the swapped information to be stored in the native field of the symbol. 
Name: elf_common_parse; Comment: Called from read.c:s_comm after we've parsed .comm symbol, size. Parse a possible alignment value. 
Name: get_section_by_match; Comment: Return TRUE iff SEC matches the section info INF. 
Name: obj_elf_change_section; Comment: Handle the .section pseudo-op. This code supports two different syntaxes. The first is found on Solaris, and looks like .section ".sec1",#alloc,#execinstr,#write Here the names after '#' are the SHF_ flags to turn on for the section. I'm not sure how it determines the SHT_* type (BFD doesn't really give us control over the type, anyhow). The second format is found on UnixWare, and probably most SVR4 machines, and looks like .section .sec1,"a",@progbits The quoted string may contain any combination of a, w, x, and represents the SHF_* flags to turn on for the section. The string beginning with '@' can be progbits or nobits. There should be other possibilities, but I don't know what they are. In any case, BFD doesn't really let us set the section type. 
Name: obj_elf_section_name; Comment: Get name of section. 
Name: obj_elf_bss; Comment: Change to the .bss section. 
Name: obj_elf_data; Comment: Change to the .data section. 
Name: obj_elf_text; Comment: Change to the .text section. 
Name: obj_elf_struct; Comment: Change to the *ABS* section. 
Name: obj_elf_section_change_hook; Comment: This can be called from the processor backends if they change sections. 
Name: obj_elf_symver; Comment: This handles the .symver pseudo-op, which is used to specify a symbol version. The syntax is ``.symver NAME,SYMVERNAME''. SYMVERNAME may contain ELF_VER_CHR ('@') characters. This pseudo-op causes the assembler to emit a symbol named SYMVERNAME with the same value as the symbol NAME. 
Name: obj_elf_get_vtable_inherit; Comment: This handles the .vtable_inherit pseudo-op, which is used to indicate to the linker the hierarchy in which a particular table resides. The syntax is ".vtable_inherit CHILDNAME, PARENTNAME". 
Name: obj_elf_vtable_inherit; Comment: This is a version of obj_elf_get_vtable_inherit() that is suitable for use in struct _pseudo_type tables. 
Name: obj_elf_get_vtable_entry; Comment: This handles the .vtable_entry pseudo-op, which is used to indicate to the linker that a vtable slot was used. The syntax is ".vtable_entry tablename, offset". 
Name: obj_elf_vtable_entry; Comment: This is a version of obj_elf_get_vtable_entry() that is suitable for use in struct _pseudo_type tables. 
Name: record_attribute; Comment: Record that we have seen an explicit specification of attribute TAG for vendor VENDOR. 
Name: obj_elf_seen_attribute; Comment: Return true if we have seen an explicit specification of attribute TAG for vendor VENDOR. 
Name: obj_elf_vendor_attribute; Comment: Parse an attribute directive for VENDOR. Returns the attribute number read, or zero on error. 
Name: obj_elf_gnu_attribute; Comment: Parse a .gnu_attribute directive. 
Name: elf_obj_symbol_clone_hook; Comment: Deduplicate size expressions. We might get into trouble with multiple freeing or use after free if we leave them pointing to the same expressionS. 
Name: obj_elf_type_name; Comment: Handle the ELF .type pseudo-op. This sets the type of a symbol. There are six syntaxes: The first (used on Solaris) is .type SYM,#function The second (used on UnixWare) is .type SYM,@function The third (reportedly to be used on Irix 6.0) is .type SYM STT_FUNC The fourth (used on NetBSD/Arm and Linux/ARM) is .type SYM,%function The fifth (used on SVR4/860) is .type SYM,"function" The sixth (emitted by recent SunPRO under Solaris) is .type SYM,[0-9] where the integer is the STT_* value. 
Name: obj_elf_init_stab_section; Comment: The first entry in a .stabs section is special. 
Name: adjust_stab_sections; Comment: Fill in the counts in the first entry in a .stabs section. 
Name: elf_get_extr; Comment: This function is called by bfd_ecoff_debug_externals. It is supposed to *EXT to the external symbol information, and return whether the symbol should be used at all. 
Name: elf_set_index; Comment: This function is called by bfd_ecoff_debug_externals. It has nothing to do for ELF. 
Name: elf_fixup_removed_symbol; Comment: Fix up SYMPP which has been marked to be removed by .symver. 
Name: build_additional_section_info; Comment: Called via bfd_map_over_sections. If SEC is a member of a group, add it to a list of sections belonging to the group. INF is a pointer to a struct group_list, which is where we store the head of each list. If its link_to_symbol_name isn't NULL, set up its linked-to section. 
Name: elf_adjust_symtab; Comment: Create symbols for group signature. 
Name: elf_frob_file_before_adjust; Comment: It removes any unneeded versioned symbols from the symbol table. 
Name: elf_frob_file_after_relocs; Comment: It is required that we let write_relocs have the opportunity to optimize away fixups before output has begun, since it is possible to eliminate all fixups for a section and thus we never should have generated the relocation section. 
Name: s_evax_weak; Comment: Handle the weak specific pseudo-op. 
Name: crc32; Comment: Given a string in BUF, calculate a 32-bit CRC for it. This is used as a reasonably unique hash for the given string. 
Name: encode_32; Comment: Encode the lower 32 bits of VALUE as a 5-character string. 
Name: encode_16; Comment: Encode the lower 16 bits of VALUE as a 3-character string. 
Name: decode_16; Comment: Convert the encoded string obtained from encode_16 () back into a 16-bit integer. 
Name: is_truncated_identifier; Comment: Determine whether or not ID is a truncated identifier, and return a non-zero value if it is. 
Name: mach_o_begin; Comment: Start-up: At present, just create the sections we want. 
Name: collect_16char_name; Comment: This will put at most 16 characters (terminated by a ',' or newline) from the input stream into dest. If there are more than 16 chars before the delimiter, a warning is given and the string is truncated. On completion of this function, input_line_pointer will point to the char after the ',' or to the newline. It trims leading and trailing space. 
Name: obj_mach_o_section; Comment: .section The '.section' specification syntax looks like: .section <segment> , <section> [, type [, attribs [, size]]] White space is allowed everywhere between elements. <segment> and <section> may be from 0 to 16 chars in length - they may contain spaces but leading and trailing space will be trimmed. It is mandatory that they be present (or that zero-length names are indicated by ",,"). There is only a single section type for any entry. There may be multiple attributes, they are delimited by `+'. Not all section types and attributes are accepted by the Darwin system assemblers as user-specifiable - although, at present, we do here. 
Name: obj_mach_o_zerofill; Comment: .zerofill segname, sectname [, symbolname, size [, align]] Zerofill switches, temporarily, to a sect of type 'zerofill'. If a variable name is given, it defines that in the section. Otherwise it just creates the section if it doesn't exist. 
Name: obj_mach_o_known_section; Comment: Interface for a known non-optional section directive. 
Name: obj_mach_o_objc_section; Comment: This currently does the same as known_sections, but kept separate for ease of maintenance. 
Name: obj_mach_o_debug_section; Comment: ??? Maybe these should be conditional on gdwarf-*. It`s also likely that we will need to be able to set them from the cfi code. 
Name: obj_mach_o_opt_tgt_section; Comment: Interface for an optional section directive. 
Name: obj_mach_o_base_section; Comment: We don't necessarily have the three 'base' sections on mach-o. Normally, we would start up with only the 'text' section defined. However, even that can be suppressed with (TODO) c/l option "-n". Thus, we have to be able to create all three sections on-demand. 
Name: obj_mach_o_common_parse; Comment: This finishes off parsing a .comm or .lcomm statement, which both can have an (optional) alignment field. It also allows us to create the bss section on demand. 
Name: obj_mach_o_set_symbol_qualifier; Comment: Set Mach-O-specific symbol qualifiers. 
Name: obj_mach_o_sym_qual; Comment: Respond to symbol qualifiers. All of the form: .<qualifier> symbol [, symbol]* a list of symbols is an extension over the Darwin system as. 
Name: obj_mach_o_type_for_symbol; Comment: Determine the default n_type value for a symbol from its section. 
Name: obj_mach_o_frob_label; Comment: Here we pick up the case where symbol qualifiers have been applied that are possibly incompatible with the section etc. that the symbol is defined in. 
Name: obj_mach_o_frob_symbol; Comment: This is the fall-back, we come here when we get to the end of the file and the symbol is not defined - or there are combinations of qualifiers required (e.g. global + weak_def). 
Name: obj_mach_o_process_stab; Comment: Support stabs for mach-o. 
Name: obj_mach_o_check_before_writing; Comment: This is a place to check for any errors that we can't detect until we know what remains undefined at the end of assembly. 
Name: obj_mach_o_pre_output_hook; Comment: Do any checks that we can't complete without knowing what's undefined. 
Name: obj_mach_o_set_subsections; Comment: Here we count up frags in each subsection (where a sub-section is defined as starting with a non-local symbol). Note that, if there are no non-local symbols in a section, all the frags will be attached as one anonymous subsection. 
Name: obj_mach_o_pre_relax_hook; Comment: Handle mach-o subsections-via-symbols counting up frags belonging to each sub-section. 
Name: obj_mach_o_set_section_vma; Comment: We do (possibly) three passes through to set the vma, so that: zerofill sections get VMAs after all others in their segment GB zerofill get VMAs last. As we go, we notice if we see any Zerofill or GB Zerofill sections, so that we can skip the additional passes if there's nothing to do. 
Name: obj_mach_o_post_relax_hook; Comment: (potentially) three passes over the sections, setting VMA. We skip the {gb}zerofill passes if we didn't see any of the relevant sections. 
Name: obj_mach_o_frob_file_after_relocs; Comment: The process of relocation could alter what's externally visible, thus we leave setting the indirect symbols until last. 
Name: obj_mach_o_reorder_section_relocs; Comment: Reverse relocations order to make ld happy. 
Name: obj_mach_o_is_frame_section; Comment: Relocation rules are different in frame sections. 
Name: obj_mach_o_allow_local_subtract; Comment: Unless we're in a frame section, we need to force relocs to be generated for local subtractions. We might eliminate them later (if they are within the same sub-section) but we don't know that at the point that this decision is being made. 
Name: obj_read_begin_hook; Comment: Unused by SOM. 
Name: obj_som_compiler; Comment: Handle a .compiler directive. This is intended to create the compilation unit auxiliary header for MPE such that the linkeditor can handle SOM extraction from archives. The format of the quoted string is "sourcefile language version" and is delimited by blanks. 
Name: obj_som_version; Comment: Handle a .version directive. 
Name: obj_som_copyright; Comment: Handle a .copyright directive. This probably isn't complete, but it's of dubious value anyway and (IMHO) not worth the time to finish. If you care about copyright strings that much, you fix it. 
Name: obj_som_init_stab_section; Comment: Perform any initialization necessary for stabs support. For SOM we need to create the space which will contain the two stabs subspaces. Additionally we need to set up the space/subspace relationships and set space/subspace attributes which BFD does not understand. 
Name: som_frob_file; Comment: Called late in the assembly phase to adjust the special stab entry and to set the starting address for each code subspace. 
Name: reg_xbc; Comment: Convert a "regb" value to a "reg_xbc" value. Error if other registers are passed. Needed to avoid reduce-reduce conflicts. 
Name: find_bit_index; Comment: Return a pointer to the '.' in a bit index expression (like foo.5), or NULL if none is found. 
Name: rx_disp5op0; Comment: Just like the above, but allows a zero displacement. 
Name: get_reg_expected_msg; Comment: Diagnostics used when we don't get a register of the expected type. Note: this has to synchronized with aarch64_reg_type definitions above. 
Name: aarch64_get_expression; Comment: Return TRUE if the string pointed by *STR is successfully parsed as an valid expression; EP will be filled with the information of such an expression. Otherwise return FALSE. If ALLOW_IMMEDIATE_PREFIX is true then skip a '#' at the start. If REJECT_ABSENT is true then trat missing expressions as an error. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type TYPE, and store the appropriate bytes in *LITP. The number of LITTLENUMS emitted is stored in *SIZEP. An error message is returned, or NULL on OK. 
Name: md_operand; Comment: We handle all bad expressions here, so that we can report the faulty instruction in the error message. 
Name: first_error; Comment: Errors may be set multiple times during parsing or bit encoding (particularly in the Neon bits), but usually the earliest error which is set will be the most meaningful. Avoid overwriting it with later (cascading) errors by calling this function. 
Name: first_error_fmt; Comment: Similar to first_error, but this function accepts formatted error message. 
Name: parse_reg; Comment: Generic register parser which is called by other specialized register parsers. CCP points to what should be the beginning of a register name. If it is indeed a valid register name, advance CCP over it and return the reg_entry structure; otherwise return NULL. It does not issue diagnostics. 
Name: aarch64_check_reg_type; Comment: Return TRUE if REG->TYPE is a valid type of TYPE; otherwise return FALSE. 
Name: aarch64_addr_reg_parse; Comment: Try to parse a base or offset register. Allow SVE base and offset registers if REG_TYPE includes SVE registers. Return the register entry on success, setting *QUALIFIER to the register qualifier. Return null otherwise. Note that this function does not issue any diagnostics. 
Name: aarch64_reg_parse_32_64; Comment: Try to parse a base or offset register. Return the register entry on success, setting *QUALIFIER to the register qualifier. Return null otherwise. Note that this function does not issue any diagnostics. 
Name: parse_vector_type_for_operand; Comment: Parse the qualifier of a vector register or vector element of type REG_TYPE. Fill in PARSED_TYPE and return TRUE if the parsing succeeds; otherwise return FALSE. Accept only one occurrence of: 4b 8b 16b 2h 4h 8h 2s 4s 1d 2d b h s d q 
Name: parse_predication_for_operand; Comment: *STR contains an SVE zero/merge predication suffix. Parse it into *PARSED_TYPE and point *STR at the end of the suffix. 
Name: parse_typed_reg; Comment: Parse a register of the type TYPE. Return PARSE_FAIL if the string pointed by *CCP is not a valid register name or the parsed register is not of TYPE. Otherwise return the register number, and optionally fill in the actual type of the register in *RTYPE when multiple alternatives were given, and return the register shape and element index information in *TYPEINFO. IN_REG_LIST should be set with TRUE if the caller is parsing a register list. 
Name: aarch64_reg_parse; Comment: Parse register. Return the register number on success; return PARSE_FAIL otherwise. If RTYPE is not NULL, return in *RTYPE the (possibly restricted) type of the register (e.g. NEON double or quad reg when either has been requested). If this is a NEON vector register with additional type information, fill in the struct pointed to by VECTYPE (if non-NULL). This parser does not handle register list. 
Name: parse_vector_reg_list; Comment: This function parses a list of vector registers of type TYPE. On success, it returns the parsed register list information in the following encoded format: bit 18-22 | 13-17 | 7-11 | 2-6 | 0-1 4th regno | 3rd regno | 2nd regno | 1st regno | num_of_reg The information of the register shape and/or index is returned in *VECTYPE. It returns PARSE_FAIL if the register list is invalid. The list contains one to four registers. Each register can be one of: <Vt>.<T>[<index>] <Vt>.<T> All <T> should be identical. All <index> should be identical. There are restrictions on <Vt> numbers which are checked later (by reg_list_valid_p). 
Name: alpha_before_fix; Comment: Before the relocations are written, reorder them, so that user supplied !lituse relocations follow the appropriate !literal relocations, and similarly for !gpdisp relocations. 
Name: tokenize_arguments; Comment: Parse the arguments to an opcode. 
Name: find_opcode_match; Comment: Search forward through all variants of an opcode looking for a syntax match. 
Name: assemble_tokens_to_insn; Comment: Given an opcode name and a pre-tokenized set of arguments, assemble the insn, but do not emit it. Note that this implies no macros allowed, since we can't store more than one insn in an insn structure. 
Name: create_literal_section; Comment: Build a BFD section with its flags set appropriately for the .lita, .lit8, or .lit4 sections. 
Name: load_expression; Comment: None i.e. "ldq $targ, LIT($gp); addq $targ, $0, $targ". Odd, perhaps, but this is what OSF1 does. If explicit relocations of the form !literal!<number> are allowed, and used, then explicit_reloc with be an expression pointer. Finally, the return value is nonzero if the calling macro may emit a LITUSE reloc if otherwise appropriate; the return value is the sequence number to use. 
Name: emit_lda; Comment: The lda macro differs from the lda instruction in that it handles most simple expressions, particularly symbol address loads and large constants. 
Name: emit_ldah; Comment: The ldah macro differs from the ldah instruction in that it has $31 as an implied base register. 
Name: alpha_align; Comment: Called internally to handle all alignment needs. This takes care of eliding calls to frag_align if'n the cached current alignment says we've already got it, as well as taking care of the auto-align feature wrt labels. 
Name: emit_insn; Comment: Actually output an instruction with its fixup. 
Name: insert_operand; Comment: Insert an operand value into an instruction. 
Name: assemble_insn; Comment: Turn an opcode description and a set of arguments into an instruction and a fixup. 
Name: emit_ir_load; Comment: Handle all "simple" integer register loads -- ldq, ldq_l, ldq_u, etc. They differ from the real instructions in that they do simple expressions like the lda macro. 
Name: emit_loadstore; Comment: Handle fp register loads, and both integer and fp register stores. Again, we handle simple expressions. 
Name: emit_ldXu; Comment: Load a half-word or byte as an unsigned value. 
Name: emit_ldX; Comment: Load a half-word or byte as a signed value. 
Name: emit_uldXu; Comment: Load an integral value from an unaligned address as an unsigned value. 
Name: emit_uldX; Comment: Load an integral value from an unaligned address as a signed value. Note that quads should get funneled to the unsigned load since we don't have to do the sign extension. 
Name: emit_ldil; Comment: Implement the ldil macro. 
Name: emit_stX; Comment: Store a half-word or byte. 
Name: emit_ustX; Comment: Store an integer to an unaligned address. 
Name: emit_sextX; Comment: Sign extend a half-word or byte. The 32-bit sign extend is implemented as "addl $31, $r, $t" in the opcode table. 
Name: emit_division; Comment: Make register usage like in normal procedure call. Don't clobber PV and RA. 
Name: emit_jsrjmp; Comment: The jsr and jmp macros differ from their instruction counterparts in that they can load the target address and default most everything. 
Name: emit_retjcr; Comment: The ret and jcr instructions differ from their instruction counterparts in that everything can be defaulted. 
Name: emit_ldgp; Comment: Implement the ldgp macro. 
Name: arc_find_opcode; Comment: Return a pointer to ARC_OPCODE_HASH_ENTRY that identifies all ARC_OPCODE entries in ARC_OPCODE_HASH that match NAME, or NULL if there are no matching entries in ARC_OPCODE_HASH. 
Name: arc_opcode_hash_entry_iterator_init; Comment: Initialise the iterator ITER. 
Name: arc_opcode_hash_entry_iterator_next; Comment: Return the next ARC_OPCODE from ENTRY, using ITER to hold state between calls to this function. Return NULL when all ARC_OPCODE entries have been returned. 
Name: arc_insert_opcode; Comment: Insert an opcode into opcode hash structure. 
Name: md_number_to_chars_midend; Comment: Like md_number_to_chars but for middle-endian values. The 4-byte limm value, is encoded as 'middle-endian' for a little-endian target. This function is used for regular 4, 6, and 8 byte instructions as well. 
Name: arc_check_feature; Comment: Check if a feature is allowed for a specific CPU. 
Name: arc_select_cpu; Comment: Select an appropriate entry from CPU_TYPES based on ARG and initialise the relevant static global variables. Parameter SEL describes where this selection originated from. 
Name: arc_extra_reloc; Comment: Here ends all the ARCompact extension instruction assembling stuff. 
Name: arc_option; Comment: Select the cpu we're assembling for. 
Name: debug_exp; Comment: Smartly print an expression. 
Name: parse_reloc_symbol; Comment: Helper for parsing an argument, used for sorting out the relocation type. 
Name: tokenize_flags; Comment: Parse the flags to a structure. 
Name: apply_fixups; Comment: Apply the fixups in order. 
Name: emit_insn0; Comment: Actually output an instruction with its fixup. 
Name: contains_register; Comment: Check whether a symbol involves a register. 
Name: get_register; Comment: Returns the register number within a symbol. 
Name: generic_reloc_p; Comment: Return true if a RELOC is generic. A generic reloc is PC-rel of a simple ME relocation (e.g. RELOC_ARC_32_ME, BFD_RELOC_ARC_PC32. 
Name: allocate_tok; Comment: Allocates a tok entry. 
Name: check_cpu_feature; Comment: Check if an particular ARC feature is enabled. 
Name: parse_opcode_flags; Comment: Parse the flags described by FIRST_PFLAG and NFLGS against the flag operands in OPCODE. Stores the matching OPCODES into the FIRST_PFLAG array and returns TRUE if the flag operands all match, otherwise, returns FALSE, in which case the FIRST_PFLAG array may have been modified. 
Name: swap_operand; Comment: Swap operand tokens. 
Name: pseudo_operand_match; Comment: Check if *op matches *tok type. Returns FALSE if they don't match, TRUE if they match. 
Name: find_pseudo_insn; Comment: Find pseudo instruction in array. 
Name: find_special_case_pseudo; Comment: Assumes the expressionS *tok is of sufficient size. 
Name: find_special_case; Comment: Used to find special case opcode. 
Name: autodetect_attributes; Comment: Autodetect cpu attribute list. 
Name: assemble_tokens; Comment: Given an opcode name, pre-tockenized set of argumenst and the opcode flags, take it all the way through emission. 
Name: md_assemble; Comment: The public interface to the instruction assembler. 
Name: declare_register; Comment: Callback to insert a register into the hash table. 
Name: declare_register_set; Comment: Construct symbols for each of the general registers. 
Name: declare_addrtype; Comment: Construct a symbol for an address type. 
Name: md_begin; Comment: Port-specific assembler initialization. This function is called once, at assembler startup time. 
Name: md_number_to_chars; Comment: Write a value out to the object file, using the appropriate endianness. 
Name: md_section_align; Comment: Round up a section size to the appropriate boundary. 
Name: md_pcrel_from_section; Comment: The location from which a PC relative jump should be calculated, given a PC relative reloc. 
Name: find_operand_for_reloc; Comment: Given a BFD relocation find the corresponding operand. 
Name: md_apply_fix; Comment: Apply a fixup to the object code. At this point all symbol values should be fully resolved, and we attempt to completely resolve the reloc. If we can not do that, we determine the correct reloc code and put it back in the fixup. To indicate that a fixup has been eliminated, set fixP->fx_done. 
Name: md_estimate_size_before_relax; Comment: Prepare machine-dependent frags for relaxation. Called just before relaxation starts. Any symbol that is now undefined will not become defined. Return the correct fr_subtype in the frag. Return the initial "guess for fr_var" to caller. The guess for fr_var is *actually* the growth beyond fr_fix. Whatever we do to grow fr_fix or fr_var contributes to our returned value. Although it may not be explicit in the frag, pretend fr_var starts with a value. 
Name: tc_gen_reloc; Comment: Translate internal representation of relocation info to BFD target format. 
Name: md_convert_frag; Comment: Perform post-processing of machine-dependent frags after relaxation. Called after relaxation is finished. In:_Address of frag. fr_type == rs_machine_dependent. fr_subtype is what the address relaxed to. Out: Any fixS:s and constants are set up. 
Name: md_undefined_symbol; Comment: We have no need to default values of symbols. We could catch register names here, but that is handled by inserting them all in the symbol table to begin with. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type type, and store the appropriate bytes in *litP. The number of LITTLENUMS emitted is stored in *sizeP. An error message is returned, or NULL on OK. 
Name: md_operand; Comment: Called for any expression that can not be recognized. When the function is called, `input_line_pointer' will point to the start of the expression. We use it when we have complex operations like @label1 - @label2. 
Name: arc_parse_name; Comment: This function is called from the function 'expression', it attempts to parse special names (in our case register names). It fills in the expression with the identified register. It returns TRUE if it is a register and FALSE otherwise. 
Name: md_parse_option; Comment: md_parse_option Invocation line includes a switch not recognized by the base assembler. See if it's a processor-specific option. New options (supported) are: -mcpu=<cpu name>__ Assemble for selected processor -EB/-mbig-endian__ Big-endian -EL/-mlittle-endian__ Little-endian -mrelax Enable relaxation The following CPU names are recognized: arc600, arc700, arcem, archs, nps400. 
Name: arc_show_cpu_list; Comment: Display the list of cpu names for use in the help text. 
Name: find_reloc; Comment: Find the proper relocation for the given opcode. 
Name: may_relax_expr; Comment: All the symbol types that are allowed to be used for relaxation. 
Name: relaxable_flag; Comment: Checks if flags are in line with relaxable insn. 
Name: relaxable_operand; Comment: Checks if operands are in line with relaxable insn. 
Name: relax_insn_p; Comment: Return TRUE if this OPDCODE is a candidate for relaxation. 
Name: tc_arc_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the dynamic relocations are done correctly, so in some cases we force the original symbol to be used. 
Name: arc_check_reloc; Comment: Compute the reloc type of an expression EXP. 
Name: arc_cons_fix_new; Comment: Add expression EXP of SIZE bytes to offset OFF of fragment FRAG. 
Name: check_zol; Comment: The actual routine that checks the ZOL conditions. 
Name: arc_frob_label; Comment: If ZOL end check the last two instruction for illegals. 
Name: arc_pcrel_adjust; Comment: Used because generic relaxation assumes a pc-rel value whilst we also relax instructions that use an absolute value resolved out of relative values (if that makes any sense). An example: 'add r1, r2, @.L2 - .' The symbols . and @.L2 are relative to the section but if they're in the same section we can subtract the section offset relocation which ends up in a resolved value. So if @.L2 is .text + 0x50 and . is .text + 0x10, we can say that .text + 0x50 - .text + 0x40 = 0x10. 
Name: tc_arc_frame_initial_instructions; Comment: Initialize the DWARF-2 unwind information for this procedure. 
Name: arc_adjust_symtab; Comment: Adjust the symbol table. Delete found AUX register symbols. 
Name: arc_set_ext_seg; Comment: Generate an extension section. 
Name: create_extinst_section; Comment: Create an extension instruction description in the arc extension section of the output file. The structure for an instruction is like this: [0]: Length of the record. [1]: Type of the record. [2]: Major opcode. [3]: Sub-opcode. [4]: Syntax (flags). [5]+ Name instruction. The sequence is terminated by an empty entry. 
Name: arc_extinsn; Comment: Handler .extinstruction pseudo-op. 
Name: create_extcore_section; Comment: Create an extension register/condition description in the arc extension section of the output file. The structure for an instruction is like this: [0]: Length of the record. [1]: Type of the record. For core regs and condition codes: [2]: Value. [3]+ Name. For auxiliary registers: [2..5]: Value. [6]+ Name The sequence is terminated by an empty entry. 
Name: arc_extcorereg; Comment: Handler .extCoreRegister pseudo-op. 
Name: arc_attribute; Comment: Parse a .arc_attribute directive. 
Name: arc_set_attribute_int; Comment: Set an attribute if it has not already been set by the user. 
Name: arc_stralloc; Comment: Allocate and concatenate two strings. s1 can be NULL but not s2. s1 pointer is freed at end of this procedure. 
Name: arc_set_public_attributes; Comment: Set the public ARC object attributes. 
Name: arc_md_finish; Comment: Add the default contents for the .ARC.attributes section. 
Name: out_of_range_p; Comment: Perform range checks on positive and negative overflows by checking if the VALUE given fits within the range of an BITS sized immediate. 
Name: no_cpu_selected; Comment: Return if no cpu was selected on command-line. 
Name: walk_no_bignums; Comment: Return TRUE if anything in the expression is a bignum. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type TYPE, and store the appropriate bytes in *LITP. The number of LITTLENUMS emitted is stored in *SIZEP. An error message is returned, or NULL on OK. Note that fp constants aren't represent in the normal way on the ARM. In big endian mode, things are as expected._However, in little endian mode fp constants are big-endian word-wise, and little-endian byte-wise within the words. For example, (double) 1.1 in big endian mode is the byte sequence 3f f1 99 99 99 99 99 9a, and in little endian mode is the byte sequence 99 99 f1 3f 9a 99 99 99. ??? The format of 12 byte floats is uncertain according to gcc's arm.h. 
Name: immediate_for_directive; Comment: Generic immediate-value read function for use in directives. Accepts anything that 'expression' can fold to a constant. *val receives the number. 
Name: arm_reg_parse_multi; Comment: None otherwise return NULL. Does not issue diagnostics._
Name: arm_reg_parse; Comment: As arm_reg_parse_multi, but the register must be of type TYPE, and the return value is the register number or FAIL. 
Name: parse_neon_type; Comment: Parse a Neon type specifier. *STR should point at the leading '.' character. Does no verification at this stage that the type fits the opcode properly. E.g., .i32.i32.s16 .s32.f32 .u16 Can all be legally parsed by this function. Fills in neon_type struct pointer with parsed information, and updates STR to point after the parsed type specifier. Returns SUCCESS if this was a legal type, FAIL if not. 
Name: parse_neon_operand_type; Comment: Parse a single type, e.g. ".s32", leading period included. 
Name: record_feature_use; Comment: Record a use of the given feature. 
Name: mark_feature_used; Comment: If the given feature available in the selected CPU, mark it as used. Returns TRUE iff feature is available. 
Name: parse_typed_reg_or_scalar; Comment: Parse either a register or a scalar, with an optional type. Return the register number, and optionally fill in the actual type of the register when multiple alternatives were given (NEON_TYPE_NDQ) in *RTYPE, and type/index information in *TYPEINFO. 
Name: arm_typed_reg_parse; Comment: Like arm_reg_parse, but also allow the following extra features: - If RTYPE is non-zero, return the (possibly restricted) type of the register (e.g. Neon double or quad reg when either has been requested). - If this is a Neon vector type with additional type information, fill in the struct pointed to by VECTYPE (if non-NULL). This function will fault on encountering a scalar. 
Name: parse_scalar; Comment: Parse a Neon scalar. Most of the time when we're parsing a scalar, we don't have enough information to be able to do a good job bounds-checking. So, we just do easy checks here, and do further checks later. 
Name: parse_reg_list; Comment: Parse an ARM register list. Returns the bitmask, or FAIL. 
Name: neon_alias_types_same; Comment: True if two alias types are the same. 
Name: if; Comment: Create aliases under the new name as stated; an all-lowercase version of the new name; and an all-uppercase version of the new name. 
Name: if; Comment: Save the mapping symbols for future reference. Also check that we do not place two mapping symbols at the same offset within a frag. We'll handle overlap between frags in check_mapping_symbols. If .fill or other data filling directive generates zero sized data, the mapping symbol for the following code will have the same value as the one generated for the data filling directive. In this case, we replace the old symbol with the new one at the same address. 
Name: if; Comment: If there was already a mapping symbol, remove it. 
Name: if; Comment: If we are not already in thumb mode go into it, EVEN if the target processor does not support thumb instructions. This is used by gcc/config/arm/lib1funcs.asm for example to compile interworking support functions even if the target processor should not support interworking._
Name: if; Comment: New pools, and emptied pools, will have a NULL symbol. 
Name: if; Comment: Do we need to create a new entry?_
Name: if; Comment: Like s_arm_elf_cons but do not use md_cons_align and set the mapping state to MAP_ARM/MAP_THUMB. 
Name: if; Comment: Turn .unwind_movsp ip followed by .unwind_save {..., ip, ...} into .unwind_save {..., sp...}. We aren't bothered about the value of ip because it is clobbered by calls. 
Name: if; Comment: Pop r4-r15. 
Name: if; Comment: Pop r0-r3._ 
Name: if; Comment: Handle pseudo-regs, under assumption these are emitted singly. 
Name: if; Comment: Attempt to combine with a previous opcode._ We do this because gcc likes to output separate unwind directives for a single block of registers._ 
Name: if; Comment: Optional constant._ 
Name: if; Comment: Optional constant._ 
Name: if; Comment: Look for a raw floating point number. 
Name: if; Comment: Accept #0x0 as a synonym for #0. 
Name: ||; Comment: Determine if we have the sequence of characters #: or just : coming next. If we do, then we check for a group relocation. If we don't, punt the whole lot to parse_shifter_operand. 
Name: if; Comment: If at this point neither .preind nor .postind is set, we have a bare [Rn]{!}, which is shorthand for [Rn,#0]{!}. 
Name: if; Comment: Encode a VFP SP or DP register number into inst.instruction. 
Name: if; Comment: register-shifted register. 
Name: if; Comment: inst.operands[i] was set up by parse_address. Encode it into an ARM-format mode 3 load or store instruction._ Reject forms that cannot be used with such instructions. If is_t is true, reject forms that cannot be used with a T instruction (i.e. not post-indexed). 
Name: if; Comment: inst.operands[i] was set up by parse_address. Encode it into an ARM-format instruction. Reject all forms which cannot be encoded into a coprocessor loadstore instruction. If wb_ok is false, reject use of writeback; if unind_ok is false, reject use of unindexed addressing. If reloc_override is not 0, use it instead of BFD_ARM_CP_OFF_IMM, unless the initial relocation is a group one (in which case it is preserved). 
Name: if; Comment: Enforce restrictions on SWP instruction. 
Name: if; Comment: ARM V5 branch-link-exchange instruction (argument parse) BLX <target_addr>__ie BLX(1) BLX{<condition>} <Rm>_ie BLX(2) Unfortunately, there are two different opcodes for this mnemonic. So, the insns[].value is not used, and the code here zaps values _into inst.instruction. Also, the <target_addr> can be 25 bits, hence has its own reloc. 
Name: if; Comment: Only check the MRRC{2} variants. 
Name: if; Comment: ldrt/strt always use post-indexed addressing. Turn [Rn] into [Rn]! and reject [Rn,...]. 
Name: if; Comment: APSR_ sets isvec. All other refs to PC are illegal. 
Name: if; Comment: ARM V6 PKHTB (Argument Parse). 
Name: if; Comment: RIWR_RIWC clears .isreg for a control register. 
Name: if; Comment: THUMB CPY instruction (argument parse). 
Name: if; Comment: If the condition is a negative condition, invert the mask. 
Name: if; Comment: Helper function for do_t_loloop to handle relocations. 
Name: if; Comment: For shifts in MVE. 
Name: if; Comment: Allow modification to be made to types which are constrained to be based on the key element, based on bits set alongside N_EQK. 
Name: switch; Comment: Convert Neon type and size into compact bitmask representation. 
Name: if; Comment: Duplicate inst.vectype elements here as necessary. FIXME: No idea if this is exactly the same as the ARM assembler, particularly when an insn takes one register and one non-register operand. 
Name: if; Comment: We are dealing with a vector predicated block. 
Name: if; Comment: Deal with 'else' conditional MVE's vcmp, it will be parsed as vcmpe. 
Name: if; Comment: Conditions are always legal in Thumb mode (IT blocks). 
Name: if; Comment: Return TRUE if the SIMD instruction is available for the current cpu_variant. FP is set to TRUE if this is a SIMD floating-point instruction. CHECK contains th. CHECK contains the set of bits to pass to vfp_or_neon_is_neon for the NEON specific checks. 
Name: if; Comment: Handle .I8 pseudo-instructions. 
Name: if; Comment: If we are parsing Q registers and the element types match MVE, which NEON also supports, then we must check whether this is an instruction that can be used by both MVE/NEON. This distinction can be made based on whether they are predicated or not. 
Name: if; Comment: Swaps operands 1 and 2. If operand 1 (optional arg) was omitted, we want the result to be: V<op> A,B (A is operand 0, B is operand 2) to mean: V<op> A,B,A not: V<op> A,B,B so handle that case specially. 
Name: if; Comment: VQ{R}SHRN.I<size> <Dd>, <Qm>, #0 is a synonym for VQMOVN.I<size> <Dd>, <Qm>. 
Name: if; Comment: VQSHRUN.I<size> <Dd>, <Qm>, #0 is a synonym for VQMOVUN.I<size> <Dd>, <Qm>. 
Name: if; Comment: If immediate is zero then we are a pseudo-instruction for VMOVN.I<size> <Dd>, <Qm> 
Name: if; Comment: PR11109: Handle round-to-zero for VCVT conversions. 
Name: if; Comment: ARMv8.2 fp16 VCVT conversions. 
Name: if; Comment: VFP rather than Neon conversions. 
Name: if; Comment: vfmal/vfmsl are in three-same D/Q register format or the third operand can be a scalar index register. 
Name: if; Comment: Unlike usually NEON three-same, encoding for Vn and Vm will depend on whether the instruction is in Q form and whether Vm is a scalar indexed operand. 
Name: if; Comment: imm == 0 case is encoded as VMOV for V{R}SHR. 
Name: if; Comment: Use of PC in vstr in ARM mode is deprecated in ARMv7. And is UNPREDICTABLE in thumb mode. 
Name: if; Comment: VLDR/VSTR (System Register). 
Name: if; Comment: Dot Product instructions are in three-same D/Q register format or the third operand can be a scalar index register. 
Name: if; Comment: Re-encode operand2 if it's indexed scalar operand. What has been encoded from inst.operand[2].reg in neon_three_same is GAS's internal encoding, not the instruction encoding. 
Name: if; Comment: Handle a possible width suffix and/or Neon type suffix. 
Name: if; Comment: Align the previous label if needed. 
Name: if; Comment: Note - do not allow local symbols (.Lxxx) to be labelled as Thumb functions. This is because these labels, whilst they exist inside Thumb code, are not the entry points for possible ARM->Thumb calls._ Also, these labels can be used as part of a computed goto or switch statement. eg gcc can generate code that looks like this: __ldr r2, [pc, .Laaa] __lsl r3, r3, #2__ldr r2, [r3, r2] __mov pc, r2 .Lbbb: .word .Lxxx .Lccc: .word .Lyyy ..etc... .Laaa:_.word Lbbb The first instruction loads the address of the jump table. The second instruction converts a table index into a byte offset. The third instruction gets the jump address out of the table. The fourth instruction performs the jump. If the address stored at .Laaa is that of a symbol which has the Thumb_Func bit set, then the linker will arrange for this address to have the bottom bit set, which in turn would mean that the address computation performed by the third instruction would end up with the bottom bit set. Since the ARM is capable of unaligned word loads, the instruction would then load the incorrect address out of the jump table, and chaos would ensue. 
Name: if; Comment: If frag has yet to be reached on this pass, assume it will move by STRETCH just as we did. If this is not so, it will be because some frag between grows, and that will force another pass. 
Name: if; Comment: Freeze wide instructions that are at or before the same location as in the previous pass. This avoids infinite loops. Don't freeze them unconditionally because targets may be artificially misaligned by the expansion of preceding frags. 
Name: if; Comment: We assume that there will never be a requirement to support alignments greater than MAX_MEM_FOR_RS_ALIGN_CODE bytes. 
Name: switch; Comment: Record a mapping symbol for alignment frags. We will delete this later if the alignment ends up empty. 
Name: if; Comment: Handle COMDAT group. 
Name: while; Comment: Pack the opcodes into words (MSB first), reversing the list at the same time. 
Name: if; Comment: Finish off the last word._
Name: if; Comment: PR 18347 - Warn if the user attempts to create a symbol with the same name as an ARM instruction. Whilst strictly speaking it is allowed, it does mean that the resulting code might be very confusing to the reader. Also this warning can be triggered if the user omits an operand before an immediate address, eg: LDR =foo GAS treats this as an assignment of the value of the symbol foo to a symbol LDR, and so (without this code) it will not issue any kind of warning or error message. Note - ARM instructions are case-insensitive but the strings in the hash table are all stored in lower case, so we must first ensure that name is lower case too. 
Name: if; Comment: We usually want to set the low bit on the address of thumb function symbols. In particular .word foo - . should have the low bit set. Generic code tries to fold the difference of two symbols to a constant. Prevent this and force a relocation when the first symbols is a thumb function. 
Name: switch; Comment: Pick a reloc. FIXME: @@ Should look at CPU word size. 
Name: if; Comment: If the destination of the branch is a defined symbol which does not have the THUMB_FUNC attribute, then we must be calling a function which has the (interfacearm) attribute. We look for the Thumb entry point to that function and change the branch to refer to that function instead._
Name: if; Comment: Set the cpu variant based on the command-line options. We prefer -mcpu= over -march= if both are set (as for GCC); and we prefer -mfpu= over any other way of setting the floating point unit. Use of legacy options with new options are faulted. 
Name: if; Comment: Select most featureful architecture with all its extensions if building for -march=all as the feature sets used to set build attributes. 
Name: if; Comment: Autodetection mode, choose the architecture based the instructions actually used. 
Name: if; Comment: Allow the user to override the reported architecture. 
Name: if; Comment: Tag_CPU_name. 
Name: if; Comment: Tag_THUMB_ISA_use. 
Name: if; Comment: Skip the first "all" entry. 
Name: if; Comment: Check the context specific extension table 
Name: &&; Comment: PR 17444: If the local symbol is in a different section then a reloc_ will always be generated for it, so applying the symbol value now _ will result in a double offset being stored in the relocation. 
Name: show_mcu_list; Comment: Display nicely formatted list of known MCU names. 
Name: extract_word; Comment: Extract one word from FROM and copy it to TO. 
Name: avr_undefined_symbol; Comment: If we are in `__gcc_isr' chunk, pop up `__gcc_isr.n_pushed.<NUM>' instead of `__gcc_isr.n_pushed'. This will be resolved by the Done chunk in `avr_patch_gccisr_frag' to the number of PUSHes produced by the Prologue chunk. 
Name: avr_get_constant; Comment: Resolve STR as a constant expression and return the result. If result greater than MAX then error. 
Name: avr_offset_expression; Comment: Parse for ldd/std offset. 
Name: parse_exp; Comment: Parse ordinary expression. 
Name: avr_ldi_expression; Comment: Parse special expressions (needed for LDI command): xx8 (address) xx8 (-address) pm_xx8 (address) pm_xx8 (-address) where xx is: hh, hi, lo. 
Name: avr_operand; Comment: Parse one instruction operand. Return operand bitmask. Also fixups can be generated. 
Name: avr_frag_init; Comment: TC_FRAG_INIT hook 
Name: avr_operands; Comment: Parse instruction operands. Return binary opcode. 
Name: md_section_align; Comment: GAS will call this function for each section at the end of the assembly, to permit the CPU backend to adjust the alignment of a section. 
Name: md_pcrel_from_section; Comment: If you define this macro, it should return the offset between the address of a PC relative fixup and the position from which the PC relative adjustment should be made. On many processors, the base of a PC relative instruction is the next instruction, so this macro would return the length of an instruction. 
Name: avr_validate_fix_sub; Comment: Does whatever the xtensa port does. 
Name: avr_force_relocation; Comment: If linkrelax is turned on, and the symbol to relocate against is in a relaxable segment, don't compute the value - generate a relocation instead. 
Name: md_apply_fix; Comment: GAS will call this for each fixup. It should store the correct value in the object file. 
Name: tc_gen_reloc; Comment: If while processing a fixup, a reloc really needs to be created then it is done here. 
Name: avr_parse_cons_expression; Comment: Parse special CONS expression: pm (expression) or alternatively gs (expression). These are used for addressing program memory. Moreover, define lo8 (expression), hi8 (expression) and hlo8 (expression). 
Name: avr_output_property_section_header; Comment: Write out the header of a .avr.prop section into the area pointed to by DATA. The RECORD_COUNT will be placed in the header as the number of records that are to follow. The area DATA must be big enough the receive the header, which is AVR_PROPERTY_SECTION_HEADER_SIZE bytes long. 
Name: avr_record_size; Comment: Return the number of bytes required to store RECORD into the .avr.prop section. The size returned is the compressed size that corresponds to how the record will be written out in AVR_OUTPUT_PROPERTY_RECORD. 
Name: avr_output_property_record; Comment: Write out RECORD. FRAG_BASE points to the start of the data area setup to hold all of the .avr.prop content, FRAG_PTR points to the next writable location. The data area must be big enough to hold all of the records. The size of the data written out for this RECORD must match the size from AVR_RECORD_SIZE. 
Name: avr_create_property_section; Comment: Create the section to hold the AVR property information. Return the section. 
Name: avr_handle_align; Comment: This hook is called when alignment is performed, and allows us to capture the details of both .org and .align directives. 
Name: exclude_section_from_property_tables; Comment: Return TRUE if this section is not one for which we need to record information in the avr property section. 
Name: create_record_for_frag; Comment: Create a property record for fragment FRAGP from section SEC and place it into an AVR_PROPERTY_RECORD_LINK structure, which can then formed into a linked list by the caller. 
Name: append_records_for_section; Comment: Build a list of AVR_PROPERTY_RECORD_LINK structures for section SEC, and merged them onto the list pointed to by NEXT_PTR. Return a pointer to the last list item created. 
Name: avr_create_and_fill_property_section; Comment: Create the AVR property section and fill it with records of .org and .align directives that were used. The section is only created if it will actually have any content. 
Name: avr_post_relax_hook; Comment: We're using this hook to build up the AVR property section. It's called late in the assembly process which suits our needs. 
Name: avr_update_gccisr; Comment: Accumulate information about instruction sequence to `avr_isr': wheter TMP_REG, ZERO_REG and SREG might be touched. Used during parse. REG1 is either -1 or a register number used by the instruction as input or output operand. Similar for REG2. 
Name: avr_emit_insn; Comment: Emit some 1-word instruction to **PWHERE and advance *PWHERE by the number of octets written. INSN specifies the desired instruction and REG is the register used by it. This function is only used with restricted subset of instructions as might be emit by `__gcc_isr'. IN / OUT will use SREG and LDI loads 0. 
Name: avr_patch_gccisr_frag; Comment: Turn rs_machine_dependent frag *FR into an ordinary rs_fill code frag, using information gathered in `avr_isr'. REG is the register number as supplied by Done chunk "__gcc_isr 0,REG". 
Name: avr_gccisr_operands; Comment: Implements `__gcc_isr' pseudo-instruction. For Prologue and Epilogue chunks, emit a new rs_machine_dependent frag. For Done chunks, traverse the current segment and patch all rs_machine_dependent frags to become appropriate rs_fill code frags. If chunks are seen in an odd ordering, throw an error instead. 
Name: avr_check_gccisr_done; Comment: Callback used by the function below. Diagnose any dangling stuff from `__gcc_isr', i.e. frags of type rs_machine_dependent. Such frags should have been resolved during parse by ISR_CHUNK_Done. If such a frag is seen, report an error and turn it into something harmless. 
Name: avr_pre_output_hook; Comment: Run over all relevant sections and diagnose any dangling `__gcc_isr'. This runs after parsing all inputs but before relaxing and writing. 
Name: avr_fix_adjustable; Comment: Return false if the fixup in fixp should be left alone and not adjusted. 
Name: bfin_pic_ptr; Comment: Blackfin specific function to handle FD-PIC pointer initializations. 
Name: md_begin; Comment: Perform machine-specific initializations. 
Name: md_assemble; Comment: Perform the main parsing, and assembly of the input here. Also, call the required routines for alignment and fixups here. This is called for every line that contains real assembly code. 
Name: parse; Comment: Parse one line of instructions, and generate opcode for it. To parse the line, YACC and LEX are used, because the instruction set syntax doesn't confirm to the AT&T assembly syntax. To call a YACC & LEX generated parser, we must provide the input via a FILE stream, otherwise stdin is used by default. Below the input to the function will be put into a temporary file, then the generated parser uses the temporary file for parsing. 
Name: md_operand; Comment: We need to handle various expressions properly. Such as, [SP--] = 34, concerned by md_assemble(). 
Name: md_undefined_symbol; Comment: Handle undefined symbols. 
Name: md_chars_to_number; Comment: Convert from target byte order to host byte order. 
Name: bfin_fix_adjustable; Comment: Return true if the fix can be handled by GAS, false if it must be passed through to the linker. 
Name: bfin_gen_dsp32mac; Comment: DSP32 instruction generation. 
Name: bfin_gen_loopsetup; Comment: LOOP SETUP. 
Name: bfin_gen_calla; Comment: Call, Link. 
Name: bfin_gen_ldimmhalf; Comment: Load and Store. 
Name: bfin_gen_pseudodbg; Comment: Pseudo Debugging Support. 
Name: bfin_gen_multi_instr; Comment: Multiple instruction generation. 
Name: decode_dspLDST_0; Comment: GOOD 
Name: decode_LDST_0; Comment: GOOD 
Name: pe_lcomm_internal; Comment: Like s_lcomm_internal in gas/read.c but the alignment string is allowed to be optional. 
Name: md_cgen_lookup_reloc; Comment: Return the bfd reloc type for OPERAND of INSN at fixup FIXP. This is called when the operand is an expression that couldn't be fully resolved. Returns BFD_RELOC_NONE if no reloc type can be found. *FIXP may be modified if desired. 
Name: md_convert_frag; Comment: *FRAGP has been relaxed to its final size, and now needs to have the bytes inside it modified to conform to the new size. Called after relaxation is finished. fragP->fr_type == rs_machine_dependent. fragP->fr_subtype is the subtype of what the address relaxed to. 
Name: get_opbits; Comment: Return the bit size for a given operand. 
Name: get_optype; Comment: Return the argument type of a given operand. 
Name: get_opflags; Comment: Return the flags of a given operand. 
Name: get_cc; Comment: Get the cc code. 
Name: get_register; Comment: Get the core processor register 'reg_name'. 
Name: get_register_pair; Comment: Get the core processor register-pair 'reg_name'. 
Name: get_index_register; Comment: Get the index register 'reg_name'. 
Name: get_index_register_pair; Comment: Get the core processor index register-pair 'reg_name'. 
Name: get_pregister; Comment: Get the processor register 'preg_name'. 
Name: get_pregisterp; Comment: Get the processor register 'preg_name 32 bit'. 
Name: md_operand; Comment: Parse an operand that is machine-specific (remove '*'). 
Name: reset_vars; Comment: Reset global variables before parsing a new instruction. 
Name: cr16_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: cr16_cons_fix_new; Comment: Record a fixup for a cons expression. 
Name: tc_gen_reloc; Comment: Generate a relocation entry for a fixup. 
Name: md_estimate_size_before_relax; Comment: Prepare machine-dependent frags for relaxation. 
Name: md_parse_option; Comment: Process machine-dependent command line options. Called once for each option on the command line that the machine-independent part of GAS does not understand. 
Name: md_show_usage; Comment: Machine-dependent usage-output. 
Name: md_apply_fix; Comment: Apply a fixS (fixup of an instruction or data that we didn't have enough info to complete immediately) to the data in a frag. Since linkrelax is nonzero and TC_LINKRELAX_FIXUP is defined to disable relaxation of debug sections, this function is called only when fixuping relocations of debug sections. 
Name: md_pcrel_from; Comment: The location from which a PC relative jump should be calculated, given a PC relative reloc. 
Name: md_begin; Comment: This function is called once, at assembler startup time. This should set up all the tables, etc that the MD part of the assembler needs. 
Name: process_label_constant; Comment: Process constants (immediate/absolute) and labels (jump targets/Memory locations). 
Name: getreg_image; Comment: Retrieve the opcode image of a given register. If the register is illegal for the current instruction, issue an error. 
Name: set_operand; Comment: Parsing different types of operands -> constants Immediate/Absolute/Relative numbers -> Labels Relocatable symbols -> (reg pair base) Register pair base -> (rbase) Register base -> disp(rbase) Register relative -> [rinx]disp(reg pair) Register index with reg pair mode -> disp(rbase,ridx,scl) Register index mode. 
Name: parse_operand; Comment: Parse a single operand. operand - Current operand to parse. cr16_ins - Current assembled instruction. 
Name: parse_operands; Comment: Parse the various operands. Each operand is then analyzed to fillup the fields in the cr16_ins data structure. 
Name: gettrap; Comment: Get the trap index in dispatch table, given its name. This routine is used by assembling the 'excp' instruction. 
Name: parse_insn; Comment: Top level module where instruction parsing starts. cr16_ins - data structure holds some information. operands - holds the operands part of the whole instruction. 
Name: get_b_cc; Comment: bCC instruction requires special handling. 
Name: is_bcc_insn; Comment: bCC instruction requires special handling. 
Name: check_cinv_options; Comment: Cinv instruction requires special handling. 
Name: getregp_image; Comment: Retrieve the opcode image of a given register pair. If the register is illegal for the current instruction, issue an error. 
Name: getidxregp_image; Comment: Retrieve the opcode image of a given index register pair. If the register is illegal for the current instruction, issue an error. 
Name: getprocreg_image; Comment: Retrieve the opcode image of a given processor register. If the register is illegal for the current instruction, issue an error. 
Name: getprocregp_image; Comment: Retrieve the opcode image of a given processor register. If the register is illegal for the current instruction, issue an error. 
Name: getconstant; Comment: Routine used to represent integer X using NBITS bits. 
Name: print_constant; Comment: Print a constant value to 'output_opcode': ARG holds the operand's type and value. SHIFT represents the location of the operand to be print into. NBITS determines the size (in bits) of the constant. 
Name: print_operand; Comment: Print an operand to 'output_opcode', which later on will be printed to the object file: ARG holds the operand's type, size and value. SHIFT represents the printing location of operand. NBITS determines the size (in bits) of a constant operand. 
Name: get_number_of_operands; Comment: Retrieve the number of operands for the current assembled instruction. 
Name: check_range; Comment: Verify that the number NUM can be represented in BITS bits (that is, within its permitted range), based on the instruction's FLAGS. If UPDATE is nonzero, update the value of NUM if necessary. Return OP_LEGAL upon success, actual error type upon failure. 
Name: warn_if_needed; Comment: Bunch of error checking. The checks are made after a matching instruction was found. 
Name: adjust_if_needed; Comment: In some cases, we need to adjust the instruction pointer although a match was already found. Here, we gather all these cases. Returns 1 if instruction pointer was adjusted, otherwise 0. 
Name: assemble_insn; Comment: Assemble a single instruction: INSN is already parsed (that is, all operand values and types are set). For instruction to be assembled, we need to find an appropriate template in the instruction table, meeting the following conditions: 1: Has the same number of operands. 2: Has the same operand types. 3: Each operand size is sufficient to represent the instruction's values. Returns 1 upon success, 0 upon failure. 
Name: print_insn; Comment: Print the instruction. Handle also cases where the instruction is relaxable/relocatable. 
Name: cr16_assemble; Comment: Actually assemble an instruction. 
Name: md_assemble; Comment: This is the guts of the machine-dependent assembler. OP points to a machine dependent instruction. This function is supposed to emit the frags/bytes it assembles to. 
Name: cris_target_format; Comment: Report output format. Small changes in output format (like elf variants below) can happen until all options are parsed, but after that, the output format must remain fixed. 
Name: cris_mach; Comment: Return a bfd_mach_cris... value corresponding to the value of cris_arch. 
Name: cris_relax_frag; Comment: We need a port-specific relaxation function to cope with sym2 - sym1 relative expressions with both symbols in the same segment (but not necessarily in the same frag as this insn), for example: move.d [pc+sym2-(sym1-2)],r10 sym1: The offset can be 8, 16 or 32 bits long. 
Name: md_convert_frag; Comment: Perform post-processing of machine-dependent frags after relaxation. Called after relaxation is finished. In:_Address of frag. _fr_type == rs_machine_dependent. _fr_subtype is what the address relaxed to. Out: Any fixS:s and constants are set up. The caller will turn the frag into a ".space 0". 
Name: md_create_short_jump; Comment: Generate a short jump around a secondary jump table. Also called from md_create_long_jump, when sufficient. 
Name: md_create_long_jump; Comment: Generate a long jump in a secondary jump table. storep Where to store the jump instruction. from_addr Address of the jump instruction. to_addr Destination address of the jump. fragP Which frag the destination address operand _ lies in. to_symbol Destination symbol. 
Name: cris_insn_first_word_frag; Comment: Allocate space for the first piece of an insn, and mark it as the start of the insn for debug-format use. 
Name: md_begin; Comment: Port-specific assembler initialization. 
Name: md_assemble; Comment: Assemble a source line. 
Name: cris_bad; Comment: Helper error-reporting function: calls as_bad for a format string for a single value and zeroes the offending value (zero assumed being a valid value) to avoid repeated error reports in later value checking. 
Name: cris_process_instruction; Comment: Low level text-to-bits assembly. 
Name: get_bwd_size_modifier; Comment: Get a B, W, or D size modifier from the string pointed out by *cPP, which must point to a '.' in front of the modifier._On successful return, *cPP is advanced to the character following the size modifier, and is undefined otherwise. cPP__Pointer to pointer to string starting __with the size modifier. size_bitsp_Pointer to variable to contain the size bits on __successful return. Return 1 iff a correct size modifier is found, else 0. 
Name: get_bw_size_modifier; Comment: Get a B or W size modifier from the string pointed out by *cPP, which must point to a '.' in front of the modifier._On successful return, *cPP is advanced to the character following the size modifier, and is undefined otherwise. cPP__Pointer to pointer to string starting __with the size modifier. size_bitsp_Pointer to variable to contain the size bits on __successful return. Return 1 iff a correct size modifier is found, else 0. 
Name: get_gen_reg; Comment: Get a general register from the string pointed out by *cPP. The variable *cPP is advanced to the character following the general register name on a successful return, and has its initial position otherwise. cPP_ Pointer to pointer to string, beginning with a general _ register name. regnop Pointer to int containing the register number. Return 1 iff a correct general register designator is found, _ else 0. 
Name: get_spec_reg; Comment: Get a special register from the string pointed out by *cPP. The variable *cPP is advanced to the character following the special register name if one is found, and retains its original position otherwise. cPP_ Pointer to pointer to string starting with a special register _ name. sregpp Pointer to Pointer to struct spec_reg, where a pointer to the _ register description will be stored. Return 1 iff a correct special register name is found. 
Name: get_sup_reg; Comment: Get a support register from the string pointed out by *cPP. The variable *cPP is advanced to the character following the support- register name if one is found, and retains its original position otherwise. cPP_ Pointer to pointer to string starting with a support-register _ name. sregpp Pointer to int containing the register number. Return 1 iff a correct support-register name is found. 
Name: get_autoinc_prefix_or_indir_op; Comment: Get an unprefixed or side-effect-prefix operand from the string pointed out by *cPP. The pointer *cPP is advanced to the character following the indirect operand if we have success, else it contains an undefined value. cPP__ Pointer to pointer to string beginning with the first __ character of the supposed operand. prefixp_ Pointer to structure containing an optional instruction __ prefix. is_autoincp_ Pointer to int indicating the indirect or autoincrement __ bits. src_regnop_ Pointer to int containing the source register number in __ the instruction. imm_foundp_ Pointer to an int indicating if an immediate expression __ is found. imm_exprP_ Pointer to a structure containing an immediate __ expression, if success and if *imm_foundp is nonzero. Return 1 iff a correct indirect operand is found. 
Name: get_3op_or_dip_prefix_op; Comment: This function gets an indirect operand in a three-address operand combination from the string pointed out by *cPP. The pointer *cPP is advanced to the character following the indirect operand on success, or has an unspecified value on failure. cPP_ Pointer to pointer to string beginning _ with the operand prefixp Pointer to structure containing an _ instruction prefix Returns 1 iff a correct indirect operand is found. 
Name: cris_get_expression; Comment: Get an expression from the string pointed out by *cPP. The pointer *cPP is advanced to the character following the expression on a success, or retains its original value otherwise. cPP_ Pointer to pointer to string beginning with the expression. exprP Pointer to structure containing the expression. Return 1 iff a correct expression is found. 
Name: get_flags; Comment: Get a sequence of flag characters from *spp. The pointer *cPP is advanced to the character following the expression._The flag characters are consecutive, no commas or spaces. cPP_ Pointer to pointer to string beginning with the expression. flagp Pointer to int to return the flags expression. Return 1 iff a correct flags expression is found. 
Name: gen_bdap; Comment: Generate code and fixes for a BDAP prefix. For v32, this handles ADDOQ because thankfully the opcodes are the same. base_regno_Int containing the base register number. exprP_Pointer to structure containing the offset expression. 
Name: branch_disp; Comment: Encode a branch displacement in the range -256..254 into the form used by CRIS conditional branch instructions. offset The displacement value in bytes. 
Name: gen_cond_branch_32; Comment: Generate code and fixes for a 32-bit conditional branch instruction created by "extending" an existing 8-bit branch instruction. opcodep Pointer to the word containing the original 8-bit branch _ instruction. writep Pointer to "extension area" following the first instruction _ word. fragP Pointer to the frag containing the instruction. add_symP, Parts of the destination address expression. sub_symP, add_num. 
Name: cris_get_specified_reloc_size; Comment: Get the size of an immediate-reloc in bytes. Only valid for specified relocs (TLS, PIC). 
Name: cris_get_reloc_suffix; Comment: Store a reloc type at *RELOCP corresponding to the PIC suffix at *CPP. Adjust *EXPRP with any addend found after the PIC suffix. 
Name: md_atof; Comment: This *could* have been: Turn a string in input_line_pointer into a floating point constant of type TYPE, and store the appropriate bytes in *LITP. The number of LITTLENUMS emitted is stored in *SIZEP. type_ A character from FLTCHARS that describes what kind of _ floating-point number is wanted. litp_ A pointer to an array that the result should be stored in. sizep A pointer to an integer where the size of the result is stored. But we don't support floating point constants in assembly code *at all*, since it's suboptimal and just opens up bug opportunities. GCC emits the bit patterns as hex. All we could do here is to emit what GCC would have done in the first place._*Nobody* writes floating-point code as assembly code, but if they do, they should be able enough to find out the correct bit patterns and use them. 
Name: cris_number_to_imm; Comment: Turn a number as a fixSinto a series of bytes that represents the number on the target machine. The purpose of this procedure is the same as that of md_number_to_chars but this procedure is supposed to handle general bit field fixes and machine-dependent fixups. bufp_ Pointer to an array where the result should be stored. val_ The value to store. n_ The number of bytes in "val" that should be stored. fixP_ The fix to be applied to the bit field starting at bufp. seg_ The segment containing this number. 
Name: md_parse_option; Comment: Processes machine-dependent command line options. Called once for each option on the command line that the machine-independent part of GAS does not understand. 
Name: tc_gen_reloc; Comment: Generate a machine-dependent relocation. 
Name: md_apply_fix; Comment: Apply a fixS (fixup of an instruction or data that we didn't have enough info to complete immediately) to the data in a frag. 
Name: md_pcrel_from; Comment: All relocations are relative to the location just after the fixup; the address of the fixup plus its size. 
Name: md_undefined_symbol; Comment: We have no need to give defaults for symbol-values. 
Name: md_cris_force_relocation; Comment: If this function returns non-zero, it prevents the relocation against symbol(s) in the FIXP from being replaced with relocations against section symbols, and guarantees that a relocation will be emitted even when the value can be resolved locally. 
Name: tc_cris_check_adjusted_broken_word; Comment: Check and emit error if broken-word handling has failed to fix up a case-table._This is called from write.c, after doing everything it knows about how to handle broken words. 
Name: cris_force_reg_prefix; Comment: Make a leading REGISTER_PREFIX_CHAR mandatory for all registers. 
Name: cris_relax_reg_prefix; Comment: Do not demand a leading REGISTER_PREFIX_CHAR for all registers. 
Name: cris_sym_leading_underscore; Comment: Adjust for having a leading '_' on all user symbols. 
Name: cris_sym_no_leading_underscore; Comment: Adjust for not having any particular prefix on user symbols. 
Name: s_syntax; Comment: Handle the .syntax pseudo, which takes an argument that decides what syntax the assembly code has. 
Name: s_cris_file; Comment: Wrapper for dwarf2_directive_file to emit error if this is seen when not emitting ELF. 
Name: s_cris_loc; Comment: Wrapper for dwarf2_directive_loc to emit error if this is seen when not emitting ELF. 
Name: s_cris_dtpoff; Comment: Worker for .dtpoffd: generate a R_CRIS_32_DTPREL reloc, as for expr:DTPREL but for use in debug info. 
Name: cris_arch_from_string; Comment: Translate a <arch> string (as common to --march=<arch> and .arch <arch>) into an enum. If the string *STR is recognized, *STR is updated to point to the end of the string. If the string is not recognized, arch_cris_unknown is returned. 
Name: cris_insn_ver_valid_for_arch; Comment: Return nonzero if architecture version ARCH matches version range in IVER. 
Name: s_cris_arch; Comment: Assert that the .arch ARCHCHOICE1 is compatible with the specified or default --march=<ARCHCHOICE2> option. 
Name: get_copregister; Comment: Get the coprocessor register 'copreg_name'. 
Name: crx_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: exponent2scale; Comment: Get the values of the scale to be encoded - used for the scaled index mode of addressing. 
Name: set_operand; Comment: Parsing different types of operands -> constants__ Immediate/Absolute/Relative numbers -> Labels__ Relocatable symbols -> (rbase)__ Register base -> disp(rbase)_ Register relative -> disp(rbase)+_ Post-increment mode -> disp(rbase,ridx,scl) Register index mode 
Name: parse_operand; Comment: Parse a single operand. operand - Current operand to parse. crx_ins - Current assembled instruction. 
Name: parse_operands; Comment: Parse the various operands. Each operand is then analyzed to fillup the fields in the crx_ins data structure. 
Name: handle_LoadStor; Comment: Post-Increment instructions, as well as Store-Immediate instructions, are a sub-group within load/stor instruction groups. Therefore, when parsing a Post-Increment/Store-Immediate insn, we have to advance the instruction pointer to the start of that sub-group (that is, up to the first instruction of that type). Otherwise, the insn will be mistakenly identified as of type LD_STOR_INS. 
Name: parse_insn; Comment: Top level module where instruction parsing starts. crx_ins - data structure holds some information. operands - holds the operands part of the whole instruction. 
Name: get_cinv_parameters; Comment: Cinv instruction requires special handling. 
Name: mask_reg; Comment: Set the appropriate bit for register 'r' in 'mask'. This indicates that this register is loaded or stored by the instruction. 
Name: preprocess_reglist; Comment: Preprocess register list - create a 16-bit mask with one bit for each of the 16 general purpose registers. If a bit is set, it indicates that this register is loaded or stored by the instruction. 
Name: csky_show_error; Comment: This function is used to show errors or warnings. 
Name: csky_branch_report_error; Comment: Handle errors in branch relaxation. 
Name: parse_cpu; Comment: Set appropriate flags for the cpu matching STR. 
Name: parse_arch; Comment: Set appropriate flags for the arch matching STR. 
Name: elf32_csky_target_format; Comment: Implement the TARGET_FORMAT macro. 
Name: md_number_to_chars; Comment: Turn an integer of n bytes (in val) into a stream of bytes appropriate for use in the a.out file, and stores them in the array pointed to by buf. This knows about the endian-ness of the target machine and does THE RIGHT THING, whatever it is. Possible values for n are 1 (byte) 2 (short) and 4 (long) Floating numbers are put out as a series of LITTLENUMS (shorts, here at least). 
Name: csky_log_2; Comment: Get a log2(val). 
Name: csky_write_insn; Comment: Output one instruction to the buffer at PTR. 
Name: csky_read_insn; Comment: Read an NBYTES instruction from the buffer at PTR. NBYTES should be either 2 or 4. This function is used in branch relaxation. 
Name: make_internal_label; Comment: Construct a label name into S from the 3-character prefix P and number N formatted as a 4-digit hex number. 
Name: md_operand; Comment: md_operand is a no-op on C-SKY; we do everything elsewhere. 
Name: md_undefined_symbol; Comment: Under ELF we need to default _GLOBAL_OFFSET_TABLE. Otherwise we have no need to default values of symbols. 
Name: md_atof; Comment: Use IEEE format for floating-point constants. 
Name: md_show_usage; Comment: Print option help to FP. 
Name: md_begin; Comment: Target-specific initialization and option handling. 
Name: make_mapping_symbol; Comment: The C-SKY assembler emits mapping symbols $t and $d to mark the beginning of a sequence of instructions and data (such as a constant pool), respectively. This is similar to what ARM does. 
Name: mapping_state; Comment: We need to keep track of whether we are emitting code or data; this function switches state and emits a mapping symbol if necessary. 
Name: dump_literals; Comment: Dump the literal pool. 
Name: check_literals; Comment: Check whether we must dump the literal pool here. kind == 0 is any old instruction. kind > 0 means we just had a control transfer instruction. kind == 1 means within a function. kind == 2 means we just left a function. OFFSET is the length of the insn being processed. SPANCLOSE and SPANEXIT are smaller numbers than SPANPANIC. SPANPANIC means that we must dump now. The dump_literals (1) call inserts a branch around the table, so we first look to see if its a situation where we won't have to insert a branch (e.g., the previous instruction was an unconditional branch). SPANPANIC is the point where we must dump a single-entry pool. it accounts for alignments and an inserted branch. the 'poolsize2' accounts for the scenario where we do: lrw r1,lit1; lrw r2,lit2; lrw r3,lit3 Note that the 'lit2' reference is 2 bytes further along but the literal it references will be 4 bytes further along, so we must consider the poolsize into this equation. This is slightly over-cautious, but guarantees that we won't panic because a relocation is too distant. 
Name: lex_got; Comment: Parse operands of the form <symbol>@GOTOFF+<nnn> and similar .plt or .got references. If we find one, set up the correct relocation in RELOC and copy the input string, minus the `@GOTOFF' into a malloc'd buffer for parsing by the calling routine. Return this buffer, and if ADJUST is non-null set it to the length of the string we removed from the input line. Otherwise return NULL. 
Name: parse_exp; Comment: Parse an expression, returning it in E. 
Name: parse_fexp; Comment: Parse a floating-point number from S into its target representation. If ISDOUBLE is true, return the result in DBNUM; otherwise it's returned in E->X_add_number. Returns the result of advancing S past the constant. 
Name: parse_opcode; Comment: Parse the opcode part of an instruction. Fill in the csky_insn state and return true on success, false otherwise. 
Name: get_operand_value; Comment: Main dispatch routine to parse operand OPRND for opcode OP from string *OPER. 
Name: parse_operands_op; Comment: Subroutine of parse_operands. 
Name: parse_operands; Comment: Parse the operands according to operand type. 
Name: generate_masked_value; Comment: Return the bits of VAL shifted according to MASK. The bits of MASK need not be contiguous. 
Name: generate_masked_operand; Comment: Return the result of masking operand number OPRND_IDX into the instruction word according to the information in OPRND. 
Name: md_assemble; Comment: Main entry point for assembling a single instruction. 
Name: md_parse_option; Comment: Attempt to handle option with value C, returning non-zero on success. 
Name: csky_md_finish; Comment: MD interface: Symbol and relocation handling. 
Name: md_pcrel_from_section; Comment: Return the address within the segment that a PC-relative fixup is relative to. 
Name: csky_cons_fix_new; Comment: csky_cons_fix_new is called via the expression parsing code when a reloc is needed. We use this hook to get the correct .got reloc. 
Name: csky_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: csky_fix_adjustable; Comment: Return true if the fix can be handled by GAS, false if it must be passed through to the linker. 
Name: csky_relax_frag; Comment: Relax a fragment by scanning TC_GENERIC_RELAX_TABLE. 
Name: csky_macro_md_assemble; Comment: Parse opcode like: "op oprnd1, oprnd2, oprnd3". 
Name: csky_get_macro_operand; Comment: Get the string of operand. 
Name: csky_idly; Comment: idly 4 -> idly4. 
Name: csky_rolc; Comment: rolc rd, 1 or roltc rd, 1 -> addc rd, rd. 
Name: csky_sxtrb; Comment: sxtrb0(1)(2) r1, rx -> xtbr0(1)(2) r1,rx; sextb r1. 
Name: csky_addc64; Comment: addc64 rx, rx, ry -> cmplt rx, rx, addc rx, ry, addc rx+1, ry+1. 
Name: csky_subc64; Comment: subc64 rx, rx, ry -> cmphs rx, rx, subc rx, ry, subc rx+1, ry+1. 
Name: csky_or64; Comment: or64 rx, rx, ry -> or rx, ry, or rx+1, ry+1. 
Name: csky_xor64; Comment: xor64 rx, rx, ry -> xor rx, ry, xor rx+1, ry+1. 
Name: csky_neg; Comment: neg rd -> not rd, rd; addi rd, 1. 
Name: csky_rsubi; Comment: rsubi rd, imm16 -> not rd; addi rd, imm16 + 1 
Name: csky_arith; Comment: Such as: asrc rd -> asrc rd, rd, 1. 
Name: csky_decne; Comment: decne rd -> if ck802: subi rd, 1; cmpnei rd, 0. else: decne rd, rd, 1 
Name: csky_lrw; Comment: If -mnolrw, lrw rd, imm -> movih rd, imm_hi16; ori rd, imm_lo16. 
Name: v1_work_lrw; Comment: The following are worker functions for C-SKY v1. 
Name: v1_work_jbsr; Comment: The following are for csky pseudo handling. 
Name: v2_work_istack; Comment: For nie/nir/ipush/ipop. 
Name: float_work_fmovi; Comment: Helper function to encode a single/double floating point constant into the instruction word for fmovis and fmovid instructions. The constant is in its IEEE single/double precision representation and is repacked into the internal 13-bit representation for these instructions with a diagnostic for overflow. Note that there is no rounding when converting to the smaller format, just an error if there is excess precision or the number is too small/large to be represented. 
Name: float_work_fpuv3_fmovi; Comment: Like float_work_fmovi, but for FPUV3 fmovi.16, fmovi.32 and fmovi.64 instructions. 
Name: csky_pool_count; Comment: Helper function to adjust constant pool counts when we emit a data directive in the text section. FUNC is one of the standard gas functions to handle these directives, like "stringer" for the .string directive, and ARG is the argument to FUNC. csky_pool_count essentially wraps the call with the constant pool magic. 
Name: csky_s_literals; Comment: Support the .literals directive. 
Name: csky_stringer; Comment: Support the .string, etc directives. 
Name: csky_cons; Comment: Support integer-mode constructors like .word, .byte, etc. 
Name: csky_float_cons; Comment: Support floating-mode constant directives like .float and .double. 
Name: csky_fill; Comment: Support the .fill directive. 
Name: csky_s_text; Comment: Handle the section changing pseudo-ops. These call through to the normal implementations, but they dump the literal pool first. 
Name: csky_noliteraldump; Comment: Handle the .no_literal_dump directive. 
Name: csky_s_align_ptwo; Comment: Handle the .align directive. We must check literals before doing alignment. For example, if '.align n', add (2^n-1) to poolspan and check literals. 
Name: csky_stack_size; Comment: Handle the .stack_size directive. 
Name: csky_cfi_frame_initial_instructions; Comment: Implement tc_cfi_frame_initial_instructions. 
Name: tc_csky_regname_to_dw2regnum; Comment: Implement tc_regname_to_dw2regnum. 
Name: reg_name_search; Comment: Do a binary search of the d10v_predefined_registers array to see if NAME is a valid register name. Return the register number from the array on success, or -1 on failure. 
Name: register_name; Comment: Check the string at input_line_pointer to see if it is a valid register name. 
Name: postfix; Comment: Remove the postincrement or postdecrement operator ( '+' or '-' ) from an expression. 
Name: get_operands; Comment: Parse a string of operands. Return an array of expressions. 
Name: build_insn; Comment: Take a pointer to the opcode entry in the opcode table and the array of operand expressions. Return the instruction. 
Name: write_long; Comment: Write out a long form instruction. 
Name: write_1_short; Comment: Write out a short form instruction by itself. 
Name: check_resource_conflict; Comment: Determine if there are any resource conflicts among two manually parallelized instructions. Some of this was lifted from parallel_ok. 
Name: parallel_ok; Comment: Check 2 instructions and determine if they can be safely executed in parallel. Return 1 if they can be. 
Name: write_2_short; Comment: Expects two short instructions. If possible, writes out both as a single packed instruction. Otherwise, writes out the first one, packed with a NOP. Returns number of instructions not written out. 
Name: find_symbol_matching_register; Comment: Find the symbol which has the same name as the register in exp. 
Name: find_opcode; Comment: Get a pointer to an entry in the opcode table. The function must look at all opcodes with the same name and use the operands to choose the correct opcode. 
Name: do_assemble; Comment: Assemble a single instruction. Return an opcode, or -1 (an invalid opcode) on error. 
Name: tc_gen_reloc; Comment: If while processing a fixup, a reloc really needs to be created. Then it is done here. 
Name: d10v_cleanup; Comment: d10v_cleanup() is called after the assembler has finished parsing the input file, when a label is read from the input file, or when a stab directive is output. Because the D10V assembler sometimes saves short instructions to see if it can package them with the next instruction, there may be a short instruction that still needs to be written. NOTE: accesses a global, etype. NOTE: invoked by various macros such as md_cleanup: see. 
Name: d10v_dot_word; Comment: Like normal .word, except support @word. Clobbers input_line_pointer, checks end-of-line. 
Name: md_operand; Comment: Operands that begin with '#' should fall through to here. From expr.c. 
Name: reg_name_search; Comment: Do a binary search of the pre_defined_registers array to see if NAME is a valid register name. Return the register number from the array on success, or -1 on failure. 
Name: get_operands; Comment: Parse a string of operands and return an array of expressions. 
Name: build_insn; Comment: Generate the instruction. It does everything but write the FM bits. 
Name: write_2_short; Comment: Write out a short form instruction if possible. Return number of instructions not written out. 
Name: find_format; Comment: Get a pointer to an entry in the format table. It must look at all formats for an opcode and use the operands to choose the correct one. Return NULL on error. 
Name: do_assemble; Comment: Assemble a single instruction and return an opcode. Return -1 (an invalid opcode) on error. 
Name: d30v_align; Comment: Called internally to handle all alignment needs. This takes care of eliding calls to frag_align if'n the cached current alignment says we've already got it, as well as taking care of the auto-aligning labels wrt code. 
Name: tc_gen_reloc; Comment: If while processing a fixup, a reloc really needs to be created, then it is done here. 
Name: d30v_cleanup; Comment: Called after the assembler has finished parsing the input file or after a label is defined. Because the D30V assembler sometimes saves short instructions to see if it can package them with the next instruction, there may be a short instruction that still needs written. 
Name: d30v_start_line; Comment: This function is called at the start of every line. It checks to see if the first character is a '.', which indicates the start of a pseudo-op. If it is, then write out any unwritten instructions. 
Name: d30v_frob_label; Comment: d30v_frob_label() is called when after a label is recognized. 
Name: d30v_cons_align; Comment: Hook into cons for capturing alignment changes. 
Name: s_d30v_align; Comment: Handle the .align pseudo-op. This aligns to a power of two. We hook here to latch the current alignment. 
Name: s_d30v_text; Comment: Handle the .text pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_d30v_data; Comment: Handle the .data pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_d30v_section; Comment: Handle the .section pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: define_some_regs; Comment: Install symbol definitions for assorted special registers. See MIPS Assembly Language Programmer's Guide page 1-4 
Name: match_sft_register; Comment: Subroutine check the string to match an register. 
Name: is_ldst_registers; Comment: Subroutine check the string to match an register. 
Name: s_proc; Comment: Subroutine of s_proc so targets can choose a different default prefix. If DEFAULT_PREFIX is NULL, use the target's "leading char". 
Name: md_begin; Comment: This function is called once, at assembler startup time. It should set up all the tables, etc., that the MD part of the assembler will need. 
Name: machine_ip; Comment: Instruction parsing. Takes a string containing the opcode. Operands are at input_line_pointer. Output is in the_insn. Warnings or errors are generated. 
Name: md_assemble; Comment: Assemble a single instruction. Its label has already been handled by the generic front end. We just parse opcode and operands, and produce the bytes of data and relocation. 
Name: md_atof; Comment: This is identical to the md_atof in m68k.c. I think this is right, but I'm not sure. Dlx will not use it anyway, so I just leave it here for now. 
Name: md_number_to_chars; Comment: Write out big-endian. 
Name: dlx_unrecognized_line; Comment: This is called when a line is unrecognized. 
Name: md_undefined_symbol; Comment: Default the values of symbols known that should be "predefined". We don't bother to predefine them unless you actually use one, since there are a lot of them. 
Name: md_operand; Comment: Parse an operand that is machine-specific, the function was called in expr.c by operand() function, when everything failed before it call a quit. 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? On the 29000, they're relative to the address of the instruction, which we have set up as the address of the fixup too. 
Name: tc_gen_reloc; Comment: Translate internal representation of relocation info to BFD target format. FIXME: To what extent can we get all relevant targets to use this? The above FIXME is from a29k, but I think it is also needed here. 
Name: md_pcrel_from; Comment: Functions concerning relocs. 
Name: epiphany_apply_fix; Comment: Perform target dependent relocations that are done at compile time. There aren't very many of these. 
Name: parse_reglist; Comment: Read a comma separated incrementing list of register names and form a bit mask of up to 15 registers 0..14. 
Name: epiphany_assemble; Comment: Assemble an instruction, push and pop pseudo instructions should have already been expanded. 
Name: md_operand; Comment: The syntax in the manual says constants begin with '#'. We just ignore it. 
Name: md_estimate_size_before_relax; Comment: Return an initial guess of the length by which a fragment must grow to hold a branch to reach its destination. Also updates fr_type/fr_subtype as necessary. Called just before doing relaxation. Any symbol that is now undefined will not become defined. The guess for fr_var is ACTUALLY the growth beyond fr_fix. Whatever we do to grow fr_fix or fr_var contributes to our returned value. Although it may not be explicit in the frag, pretend fr_var starts with a 0 value. 
Name: md_convert_frag; Comment: *fragP has been relaxed to its final size, and now needs to have the bytes inside it modified to conform to the new size. Called after relaxation is finished. fragP->fr_type == rs_machine_dependent. fragP->fr_subtype is the subtype of what the address relaxed to. 
Name: md_cgen_lookup_reloc; Comment: Return the bfd reloc type for OPERAND of INSN at fixup FIXP. Returns BFD_RELOC_NONE if no reloc type can be found. *FIXP may be modified if desired. 
Name: restore_colon; Comment: Worker function for fr30_is_colon_insn(). 
Name: fr30_is_colon_insn; Comment: Determines if the symbol starting at START and ending in a colon that was at the location pointed to by INPUT_LINE_POINTER (but which has now been replaced bu a NUL) is in fact an LDI:8, LDI:20, LDI:32, CALL:D. JMP:D, RET:D or Bcc:D instruction. If it is, then it restores the colon, advances INPUT_LINE_POINTER to the real end of the instruction/symbol, saves the char there to NUL_CHAR and pokes a NUL, and returns 1. Otherwise it returns 0. 
Name: frv_find_in_vliw; Comment: Check a vliw insn for an insn of type containing the sym passed in label_sym. 
Name: frv_tomcat_shuffle; Comment: Insert the desired nop combination in the vliw chain before insert_before_insn. Rechain the vliw insn. 
Name: target_implements_insn_p; Comment: Return true if the target implements instruction INSN. 
Name: frv_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: md_apply_fix; Comment: Apply a fixup that could be resolved within the assembler. 
Name: frv_md_number_to_chars; Comment: Write a value out to the object file, using the appropriate endianness. 
Name: frv_set_flags; Comment: Allow user to set flags bits. 
Name: frv_pic_ptr; Comment: Frv specific function to handle 4 byte initializations for pointers that are considered 'safe' for use with pic support. Until frv_frob_file{,_section} is run, we encode it a BFD_RELOC_CTOR, and it is turned back into a normal BFD_RELOC_32 at that time. 
Name: frv_frob_file_section; Comment: Go through a the sections looking for relocations that are problematical for pic. If not pic, just note that this object can't be linked with pic. If it is pic, see if it needs to be marked so that it will be fixed up, or if not possible, issue an error. 
Name: frv_frob_file; Comment: After all of the symbols have been adjusted, go over the file looking for any relocations that pic won't support. 
Name: md_begin; Comment: This function is called once, at assembler startup time. It sets up the hash table with all the opcodes in it, and also initializes some aliases for compatibility with other assemblers. 
Name: parse_exp_save_ilp; Comment: Parse an expression and then restore the input line pointer. 
Name: md_assemble; Comment: This is the guts of the machine-dependent assembler. STR points to a machine dependent instruction. This function is supposed to emit the frags/bytes it assembles to. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type type, and store the appropriate bytes in *LITP. The number of LITTLENUMS emitted is stored in *SIZEP . An error message is returned, or NULL on OK. 
Name: md_parse_option; Comment: We have no target specific options yet, so these next two functions are empty. 
Name: md_apply_fix; Comment: Apply a fixup to the object file. 
Name: relaxable_section; Comment: TC_FORCE_RELOCATION hook 
Name: ft32_validate_fix_sub; Comment: Does whatever the xtensa port does. 
Name: ft32_force_relocation; Comment: If linkrelax is turned on, and the symbol to relocate against is in a relaxable segment, don't compute the value - generate a relocation instead. 
Name: h8300_elf_section; Comment: Like obj_elf_section, but issues a warning for new sections which do not have an attribute specification. 
Name: md_begin; Comment: This function is called once, at assembler startup time. This should set up all the tables, etc. that the MD part of the assembler needs. 
Name: parse_reg; Comment: Try to parse a reg name. Return the number of chars consumed. 
Name: parse_exp; Comment: Parse an immediate or address-related constant and store it in OP. If the user also specifies the operand's size, store that size in OP->MODE, otherwise leave it for later code to decide. 
Name: skip_colonthing; Comment: If SRC starts with an explicit operand size, skip it and store the size in *MODE. Leave *MODE unchanged otherwise. 
Name: constant_fits_width_p; Comment: The many forms of operand: Rn___Register direct @Rn___Register indirect @(exp[:16], Rn)_Register indirect with displacement @Rn+ @-Rn @aa:8__absolute 8 bit @aa:16__absolute 16 bit @aa___absolute 16 bit #xx[:size]__immediate data @(exp:[8], pc)_pc rel @@aa[:8]__memory indirect. 
Name: get_mova_operands; Comment: MOVA has special requirements. Rather than adding twice the amount of addressing modes, we simply special case it a bit. 
Name: get_specific; Comment: Passed a pointer to a list of opcodes which use different addressing modes, return the opcode which matches the opcodes provided. 
Name: do_a_fix_imm; Comment: RELAXMODE has one of 3 values: 0 Output a "normal" reloc, no relaxing possible for this insn/reloc 1 Output a relaxable 24bit absolute mov.w address relocation (may relax into a 16bit absolute address). 2 Output a relaxable 16/24 absolute mov.b address relocation (may relax into an 8bit absolute address). 
Name: build_bytes; Comment: Now we know what sort of opcodes it is, let's build the bytes. 
Name: clever_message; Comment: Try to give an intelligent error message for common and simple to detect errors. 
Name: fix_operand_size; Comment: If OPERAND is part of an address, adjust its size and value given that it addresses SIZE bytes. This function decides how big non-immediate constants are when no size was explicitly given. It also scales down the assembly-level displacement in an @(d:2,ERn) operand. 
Name: md_assemble; Comment: This is the guts of the machine-dependent assembler. STR points to a machine dependent instruction. This function is supposed to emit the frags/bytes it assembles. 
Name: md_atof; Comment: Various routines to kill one day. 
Name: md_number_to_chars; Comment: Put number into target byte order. 
Name: pa_check_eof; Comment: Called before writing the object file. Make sure entry/exit and proc/procend pairs match. 
Name: pa_get_label; Comment: Returns a pointer to the label_symbol_struct for the current space. or NULL if no label_symbol_struct exists for the current space. 
Name: pa_define_label; Comment: Defines a label for the current space. If one is already defined, this function will replace it with the new label. 
Name: pa_undefine_label; Comment: Removes a label definition for the current space. If there is no label_symbol_struct entry, then no action is taken. 
Name: fix_new_hppa; Comment: An HPPA-specific version of fix_new. This is required because the HPPA code needs to keep track of some extra stuff. Each call to fix_new_hppa results in the creation of an instance of an hppa_fix_struct. An hppa_fix_struct stores the extra information along with a pointer to the original fixS. This is attached to the original fixup via the tc_fix_data field. 
Name: cons_fix_new_hppa; Comment: This fix_new is called by cons via TC_CONS_FIX_NEW. hppa_field_selector is set by the parse_cons_expression_hppa. 
Name: get_expression; Comment: Mark (via expr_end) the end of an expression (I think). FIXME. 
Name: pa_parse_nullif; Comment: Parse a PA nullification completer (,n). Return nonzero if the completer was found; return zero if no completer was found. 
Name: md_convert_frag; Comment: Process any machine dependent frag types. 
Name: md_estimate_size_before_relax; Comment: Return the approximate size of a frag before relaxation has occurred. 
Name: md_undefined_symbol; Comment: We have no need to default values of symbols. 
Name: md_apply_fix; Comment: Apply a fixup to an instruction. 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? On the PA, they're relative to the address of the offset. 
Name: is_end_of_statement; Comment: Return nonzero if the input line pointer is at the end of a statement. 
Name: reg_name_search; Comment: Given NAME, find the register number associated with that name, return the integer value associated with the given name or -1 on failure. 
Name: pa_parse_number; Comment: Read a number from S. The number might come in one of many forms, the most common will be a hex or decimal constant, but it could be a pre-defined register (Yuk!), or an absolute symbol. Return 1 on success or 0 on failure. If STRICT, then a missing register prefix will cause a failure. The number itself is returned in `pa_number'. IS_FLOAT indicates that a PA-89 FP register number should be parsed; A `l' or `r' suffix is checked for if but 2 of IS_FLOAT is not set. pa_parse_number can not handle negative constants and will fail horribly if it is passed such a constant. 
Name: need_pa11_opcode; Comment: Return nonzero if the given INSN and L/R information will require a new PA-1.1 opcode. 
Name: pa_parse_fp_cmp_cond; Comment: Parse a condition for a fcmp instruction. Return the numerical code associated with the condition. 
Name: pa_parse_ftest_gfx_completer; Comment: Parse a graphics test complete for ftest. 
Name: pa_parse_fp_cnv_format; Comment: Parse an FP operand format completer returning the completer type. 
Name: pa_parse_fp_format; Comment: Parse an FP operand format completer returning the completer type. 
Name: pa_chk_field_selector; Comment: Convert from a selector string into a selector type. 
Name: parse_cons_expression_hppa; Comment: Parse a .byte, .word, .long expression for the HPPA. Called by cons via the TC_PARSE_CONS_EXPRESSION macro. 
Name: evaluate_absolute; Comment: Evaluate an absolute expression EXP which may be modified by the selector FIELD_SELECTOR. Return the value of the expression. 
Name: pa_get_absolute_expression; Comment: Mark (via expr_end) the end of an absolute expression. FIXME. 
Name: pa_get_number; Comment: Get an absolute number. The input string is terminated at the first whitespace character. 
Name: pa_build_arg_reloc; Comment: Given an argument location specification return the associated argument location number. 
Name: pa_align_arg_reloc; Comment: Encode and return an argument relocation specification for the given register in the location specified by arg_reloc. 
Name: pa_parse_nonneg_cmpsub_cmpltr; Comment: Parse a non-negated compare/subtract completer returning the number (for encoding in instructions) of the given completer. 
Name: pa_parse_neg_cmpsub_cmpltr; Comment: Parse a negated compare/subtract completer returning the number (for encoding in instructions) of the given completer. 
Name: pa_parse_cmpb_64_cmpltr; Comment: Parse a 64 bit compare and branch completer returning the number (for encoding in instructions) of the given completer. Nonnegated comparisons are returned as 0-7, negated comparisons are returned as 8-15. 
Name: pa_parse_cmpib_64_cmpltr; Comment: Parse a 64 bit compare immediate and branch completer returning the number (for encoding in instructions) of the given completer. 
Name: pa_parse_nonneg_add_cmpltr; Comment: Parse a non-negated addition completer returning the number (for encoding in instructions) of the given completer. 
Name: pa_parse_neg_add_cmpltr; Comment: Parse a negated addition completer returning the number (for encoding in instructions) of the given completer. 
Name: pa_parse_addb_64_cmpltr; Comment: Parse a 64 bit wide mode add and branch completer returning the number (for encoding in instructions) of the given completer. 
Name: pa_ip; Comment: Do the real work for assembling a single instruction. Store results into the global "the_insn" variable. 
Name: md_assemble; Comment: Assemble a single instruction storing it into a frag. 
Name: pa_align; Comment: Handle an alignment directive. Special so that we can update the alignment of the subspace if necessary. 
Name: pa_block; Comment: Handle a .BLOCK type pseudo-op. 
Name: pa_brtab; Comment: Handle a .begin_brtab and .end_brtab pseudo-op. 
Name: pa_try; Comment: Handle a .begin_try and .end_try pseudo-op. 
Name: pa_call_args; Comment: Do the dirty work of building a call descriptor which describes where the caller placed arguments to a function call. 
Name: pa_call; Comment: Handle a .CALL pseudo-op. This involves storing away information about where arguments are to be found so the linker can detect (and correct) argument location mismatches between caller and callee. 
Name: pa_build_unwind_subspace; Comment: Build an entry in the UNWIND subspace from the given function attributes in CALL_INFO. This is not needed for SOM as using R_ENTRY and R_EXIT relocations allow the linker to handle building of the unwind spaces. 
Name: pa_callinfo; Comment: Process a .CALLINFO pseudo-op. This information is used later to build unwind descriptors and maybe one day to support .ENTER and .LEAVE. 
Name: pa_text; Comment: Switch to the text space. Like s_text, but delete our label when finished. 
Name: pa_data; Comment: Switch to the data space. As usual delete our label. 
Name: pa_comm; Comment: This is different than the standard GAS s_comm(). On HP9000/800 machines, the .comm pseudo-op has the following syntax: <label> .comm <length> where <label> is optional and is a symbol whose address will be the start of a block of memory <length> bytes long. <length> must be an absolute expression. <length> bytes will be allocated in the current space and subspace. Also note the label may not even be on the same line as the .comm. This difference in syntax means the colon function will be called on the symbol before we arrive in pa_comm. colon will set a number of attributes of the symbol that need to be fixed here. In particular the value, section pointer, fragment pointer, flags, etc. What a pain. This also makes error detection all but impossible. 
Name: pa_end; Comment: Process a .END pseudo-op. 
Name: pa_enter; Comment: Process a .ENTER pseudo-op. This is not supported. 
Name: pa_entry; Comment: Process a .ENTRY pseudo-op. .ENTRY marks the beginning of the procedure. 
Name: pa_equ; Comment: Handle a .EQU pseudo-op. 
Name: hppa_elf_mark_end_of_function; Comment: Mark the end of a function so that it's possible to compute the size of the function in elf_hppa_final_processing. 
Name: process_exit; Comment: Helper function. Does processing for the end of a function. This usually involves creating some relocations or building special symbols to mark the end of the function. 
Name: pa_exit; Comment: Process a .EXIT pseudo-op. 
Name: pa_type_args; Comment: Helper function to process arguments to a .EXPORT pseudo-op. 
Name: pa_export; Comment: Process a .EXPORT directive. This makes functions external and provides information such as argument relocation entries to callers. 
Name: pa_import; Comment: Handle an .IMPORT pseudo-op. Any symbol referenced in a given assembly file must either be defined in the assembly file, or explicitly IMPORTED from another. 
Name: pa_label; Comment: Handle a .LABEL pseudo-op. 
Name: pa_leave; Comment: Handle a .LEAVE pseudo-op. This is not supported yet. 
Name: pa_level; Comment: Handle a .LEVEL pseudo-op. 
Name: pa_origin; Comment: Handle a .ORIGIN pseudo-op. 
Name: pa_param; Comment: Handle a .PARAM pseudo-op. This is much like a .EXPORT, except it is for static functions. FIXME. Should share more code with .EXPORT. 
Name: pa_proc; Comment: Handle a .PROC pseudo-op. It is used to mark the beginning of a procedure from a syntactical point of view. 
Name: pa_procend; Comment: Process the syntactical end of a procedure. Make sure all the appropriate pseudo-ops were found within the procedure. 
Name: exact_log2; Comment: If VALUE is an exact power of two between zero and 2^31, then return log2 (VALUE). Else return -1. 
Name: pa_check_current_space_and_subspace; Comment: Check to make sure we have a valid space and subspace. 
Name: pa_parse_space_stmt; Comment: Parse the parameters to a .SPACE directive; if CREATE_FLAG is nonzero, then create a new space entry to hold the information specified by the parameters to the .SPACE directive. 
Name: pa_space; Comment: Handle a .SPACE pseudo-op; this switches the current space to the given space, creating the new space if necessary. 
Name: pa_spnum; Comment: Switch to a new space. (I think). FIXME. 
Name: pa_subspace; Comment: Handle a .SUBSPACE pseudo-op; this switches the current subspace to the given subspace, creating the new subspace if necessary. FIXME. Should mirror pa_space more closely, in particular how they're broken up into subroutines. 
Name: pa_spaces_begin; Comment: Create default space and subspace dictionaries. 
Name: create_new_space; Comment: Create a new space NAME, with the appropriate flags as defined by the given parameters. 
Name: create_new_subspace; Comment: Create a new subspace NAME, with the appropriate flags as defined by the given parameters. Add the new subspace to the subspace dictionary chain in numerical order as defined by the SORT entries. 
Name: update_subspace; Comment: Update the information for the given subspace based upon the various arguments. Return the modified subspace chain entry. 
Name: is_defined_space; Comment: Return the space chain entry for the space with the name NAME or NULL if no such space exists. 
Name: pa_segment_to_space; Comment: Find and return the space associated with the given seg. If no mapping from the given seg to a space is found, then return NULL. Unlike subspaces, the number of spaces is not expected to grow much, so a linear exhaustive search is OK here. 
Name: is_defined_subspace; Comment: Return the first space chain entry for the subspace with the name NAME or NULL if no such subspace exists. When there are multiple subspaces with the same name, switching to the first (i.e., default) subspace is preferable in most situations. For example, it wouldn't be desirable to merge COMDAT data with non COMDAT data. Uses a linear search through all the spaces and subspaces, this may not be appropriate if we ever being placing each function in its own subspace. 
Name: pa_subsegment_to_subspace; Comment: Find and return the subspace associated with the given seg. If no mapping from the given seg to a subspace is found, then return NULL. If we ever put each procedure/function within its own subspace (to make life easier on the compiler and linker), then this will have to become more efficient. 
Name: pa_find_space_by_number; Comment: Given a number, try and find a space with the name number. Return a pointer to a space dictionary chain entry for the space that was found or NULL on failure. 
Name: pa_subspace_start; Comment: Return the starting address for the given subspace. If the starting address is unknown then return zero. 
Name: pa_stringer_aux; Comment: Helper function for pa_stringer. Used to find the end of a string. 
Name: pa_stringer; Comment: Handle a .STRING type pseudo-op. 
Name: pa_version; Comment: Handle a .VERSION pseudo-op. 
Name: pa_compiler; Comment: Handle a .COMPILER pseudo-op. 
Name: pa_copyright; Comment: Handle a .COPYRIGHT pseudo-op. 
Name: pa_cons; Comment: Just like a normal cons, but when finished we have to undefine the latest space label. 
Name: pa_float_cons; Comment: Like float_cons, but we need to undefine our label. 
Name: pa_fill; Comment: Like s_fill, but delete our label when finished. 
Name: pa_lcomm; Comment: Like lcomm, but delete our label when finished. 
Name: pa_lsym; Comment: Like lsym, but delete our label when finished. 
Name: md_begin; Comment: This function is called once, at assembler startup time. It should set up all the tables, etc. that the MD part of the assembler will need. 
Name: hppa_fix_adjustable; Comment: On the PA relocations which involve function symbols must not be adjusted. This so that the linker can know whenhow to create argument relocation stubs for indirect calls and calls to static functions. "T" field selectors create DLT relative fixups for accessing globals and statics in PIC code; each DLT relative fixup creates an entry in the DLT table. The entries contain the address of the final target (eg accessing "foo" would create a DLT entry with the address of "foo"). Unfortunately, the HP linker doesn't take into account any addend when generating the DLT; so accessing $LIT$+8 puts the address of $LIT$ into the DLT rather than the address of $LIT$+8. The end result is we can't perform relocation symbol reductions for any fixup which creates entries in the DLT (eg they use "T" field selectors). ??? Reject reductions involving symbols with external scope; such reductions make life a living hell for object file editors. 
Name: hppa_force_relocation; Comment: Return nonzero if the fixup in FIXP will require a relocation, even it if appears that the fixup could be completely handled within GAS. 
Name: elf_hppa_final_processing; Comment: For ELF, this function serves one purpose: to setup the st_size field of STT_FUNC symbols. To do this, we need to scan the call_info structure list, determining st_size in by taking the difference in the address of the beginning/end marker symbols. 
Name: i386_output_nops; Comment: Genenerate COUNT bytes of NOPs to WHERE from PATT with the maximum size of a single NOP instruction MAX_SINGLE_NOP_SIZE. 
Name: i386_generate_nops; Comment: Genenerate COUNT bytes of NOPs to WHERE with the maximum size of a single NOP instruction LIMIT. 
Name: cpu_flags_match; Comment: Return CPU flags match bits. 
Name: match_operand_size; Comment: Return 1 if there is no conflict in 8bit/16bit/32bit/64bit/80bit size between operand GIVEN and opeand WANTED for instruction template T. 
Name: match_simd_size; Comment: Return 1 if there is no conflict in SIMD register between operand GIVEN and opeand WANTED for instruction template T. 
Name: match_mem_size; Comment: Return 1 if there is no conflict in any size between operand GIVEN and opeand WANTED for instruction template T. 
Name: operand_type_register_match; Comment: If given types g0 and g1 are registers they must be of the same type unless the expected operand type register overlap is null. Intel syntax sized memory operands are also checked here. 
Name: add_prefix; Comment: Returns a. PREFIX_EXIST if attempting to add a prefix where one from the same class already exists. b. PREFIX_LOCK if lock prefix is added. c. PREFIX_REP if rep/repne prefix is added. d. PREFIX_DS if ds prefix is added. e. PREFIX_OTHER if other prefix is added. 
Name: tc_i386_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the dynamic relocations are done correctly, so in some cases we force the original symbol to be used. 
Name: build_vex_prefix; Comment: Build the VEX prefix. 
Name: build_evex_prefix; Comment: Build the EVEX prefix. 
Name: encode_with_unaligned_vector_move; Comment: Encode aligned vector move as unaligned vector move. 
Name: optimize_encoding; Comment: Try the shortest encoding by shortening operand size. 
Name: load_insn_p; Comment: Return non-zero for load instruction. 
Name: insert_lfence_after; Comment: Output lfence, 0xfaee8, after instruction. 
Name: insert_lfence_before; Comment: Output lfence, 0xfaee8, before instruction. 
Name: may_need_pass2; Comment: Helper for md_assemble() to decide whether to prepare for a possible 2nd parsing pass. Instead of introducing a rarely use new insn attribute this utilizes a common pattern between affected templates. It is deemed acceptable that this will lead to unnecessary pass 2 preparations in a limited set of cases. 
Name: md_assemble; Comment: This is the guts of the machine-dependent assembler. LINE points to a machine dependent instruction. This function is supposed to emit the frags/bytes it assembles to. 
Name: q_suffix_allowed; Comment: The Q suffix is generally valid only in 64-bit mode, with very few exceptions: fild, fistp, fisttp, and cmpxchg8b. Note that for fild and fisttp only one of their two templates is matched below: That's sufficient since other relevant attributes are the same between both respective templates. 
Name: optimize_imm; Comment: Try to ensure constant immediates are represented in the smallest opcode possible. 
Name: optimize_disp; Comment: Try to use the smallest displacement type too. 
Name: match_broadcast_size; Comment: Return 1 if there is a match in broadcast bytes between operand GIVEN and instruction template T. 
Name: check_VecOperands; Comment: Check if operands are valid for the instruction. 
Name: VEX_check_encoding; Comment: Check if encoding requirements are met by the instruction. 
Name: progress; Comment: Helper function for the progress() macro in match_template(). 
Name: need_plt32_p; Comment: Return TRUE iff PLT32 relocation should be used for branching to symbol S. 
Name: maybe_fused_with_jcc_p; Comment: Return 1 for test, and, cmp, add, sub, inc and dec which may be macro-fused with conditional jumps. NB: If TEST/AND/CMP/ADD/SUB/INC/DEC is of RIP relative address, or is one of the following format: cmp m, imm add m, imm sub m, imm test m, imm and m, imm inc m dec m it is unfusible. 
Name: add_fused_jcc_padding_frag_p; Comment: Return 1 if a FUSED_JCC_PADDING frag should be generated. 
Name: add_branch_prefix_frag_p; Comment: Return 1 if a BRANCH_PREFIX frag should be generated. 
Name: add_branch_padding_frag_p; Comment: Return 1 if a BRANCH_PADDING frag should be generated. 
Name: disp_size; Comment: Return the size of the displacement operand N. 
Name: imm_size; Comment: Return the size of the immediate operand N. 
Name: x86_address_bytes; Comment: Export the ABI address size for use by TC_ADDRESS_BYTES for the purpose of the `.dc.a' internal pseudo-op. 
Name: RC_SAE_specifier; Comment: Handle Rounding Control / SAE specifiers. 
Name: check_VecOperations; Comment: Handle Vector operations. 
Name: if; Comment: We do this to make sure that the section symbol is in the symbol table. We will ultimately change the relocation to be relative to the beginning of the section. 
Name: if; Comment: We check for an absolute prefix (differentiating, for example, 'jmp pc_relative_label' from 'jmp *absolute_label'. 
Name: if; Comment: Check if operand is a register. 
Name: if; Comment: i386_generic_table_relax_frag() Handle BRANCH_PADDING, BRANCH_PREFIX and FUSED_JCC_PADDING frags to grow/shrink padding to align branch frags. Hand others to relax_frag(). 
Name: if; Comment: md_estimate_size_before_relax() Called just before relax() for rs_machine_dependent frags. The x86 assembler uses these frags to handle variable size jump instructions. Any symbol that is now undefined will not become defined. Return the correct fr_subtype in the frag. Return the initial "guess for variable size of frag" to caller. The guess is actually the growth beyond the fixed part. Whatever we do to grow the fixed or variable part contributes to our returned value. 
Name: if; Comment: If size if less then four we are sure that the operand fits, but if it's 4, then it could be that the displacement is larger then -/+ 2GB. 
Name: if; Comment: Are we finished with this relocation now? 
Name: if; Comment: Upper 16 vector registers are only available with VREX in 64bit mode, and require EVEX encoding. 
Name: if; Comment: Handle floating point regs, allowing spaces in the (i) part. 
Name: if; Comment: Check if there is any room. 
Name: if; Comment: Pick the target format to use. 
Name: if; Comment: Remember constant directive. 
Name: if; Comment: For ELF on x86-64, add support for SHF_X86_64_LARGE. 
Name: ar_is_only_in_integer_unit; Comment: Determine if application register REGNUM resides only in the integer unit (as opposed to the memory unit). 
Name: ar_is_only_in_memory_unit; Comment: Determine if application register REGNUM resides only in the memory unit (as opposed to the integer unit). 
Name: set_section; Comment: Switch to section NAME and create section if necessary. It's rather ugly that we have to manipulate input_line_pointer but I don't see any other way to accomplish the same thing without changing obj-elf.c (which may be the Right Thing, in the end). 
Name: ia64_elf_section_letter; Comment: Map 's' to SHF_IA_64_SHORT. 
Name: ia64_elf_section_flags; Comment: Map SHF_IA_64_SHORT to SEC_SMALL_DATA. 
Name: obj_elf_vms_common; Comment: .vms_common section, symbol, size, alignment 
Name: check_pending_save; Comment: This function checks whether there are any outstanding .save-s and discards them if so. 
Name: alloc_record; Comment: This function allocates a record list structure, and initializes fields. 
Name: output_endp; Comment: Dummy unwind record used for calculating the length of the last prologue or body region. 
Name: process_one_record; Comment: Given a unw_rec_list process the correct format with the specified function. 
Name: process_unw_records; Comment: Given a unw_rec_list list, process all the records with the specified function. 
Name: calc_record_size; Comment: Determine the size of a record list in bytes. 
Name: set_imask; Comment: Update IMASK bitmask to reflect the fact that one or more registers of type TYPE are saved starting at instruction with index T. If N bits are set in REGMASK, it is assumed that instructions T through T+N-1 save these registers. TYPE values: _0: no save _1: instruction saves next fp reg _2: instruction saves next general reg _3: instruction saves next branch reg 
Name: slot_index; Comment: Return the number of instruction slots from FIRST_ADDR to SLOT_ADDR. SLOT_FRAG is the frag containing SLOT_ADDR, and FIRST_FRAG is the frag containing FIRST_ADDR. If BEFORE_RELAX, then we use worst-case estimates for frag sizes. 
Name: optimize_unw_records; Comment: Optimize unwind record directives. 
Name: fixup_unw_records; Comment: Given a complete record list, process any records which have unresolved fields, (ie length counts for a prologue). After this has been run, all necessary information should be available within each record to generate an image. 
Name: ia64_estimate_size_before_relax; Comment: Estimate the size of a frag before relaxing. We only have one type of frag to handle here, which is the unwind info frag. 
Name: ia64_convert_frag; Comment: This function converts a rs_machine_dependent variant frag into a normal fill frag with the unwind image from the record list. 
Name: dot_loc; Comment: Helper function for .loc directives. If the assembler is not generating line number info, then we need to remember which instructions have a .loc directive, and only call dwarf2_gen_line_info for those instructions. 
Name: dot_special_section; Comment: .sbss, .bss etc. are macros that expand into ".section SECNAME". 
Name: unwind_diagnostic; Comment: Return -1 for warning and 0 for error. 
Name: in_procedure; Comment: Return 1 if a directive is in a procedure, -1 if a directive isn't in a procedure but the unwind directive check is set to warning, 0 if a directive isn't in a procedure and the unwind directive check is set to error. 
Name: in_prologue; Comment: Return 1 if a directive is in a prologue, -1 if a directive isn't in a prologue but the unwind directive check is set to warning, 0 if a directive isn't in a prologue and the unwind directive check is set to error. 
Name: in_body; Comment: Return 1 if a directive is in a body, -1 if a directive isn't in a body but the unwind directive check is set to warning, 0 if a directive isn't in a body and the unwind directive check is set to error. 
Name: stmt_float_cons; Comment: Why doesn't float_cons() call md_cons_align() the way cons() does? 
Name: dot_reg_val; Comment: .reg.val <regname>,value 
Name: dot_serialize; Comment: .serialize.data .serialize.instruction 
Name: dot_dv_mode; Comment: select dv checking mode .auto .explicit .default A stop is inserted when changing modes 
Name: dot_pred_rel; Comment: .pred.rel.clear [p1 [,p2 [,...]]] (also .pred.rel "clear" or @clear) .pred.rel.imply p1, p2 (also .pred.rel "imply" or @imply) .pred.rel.mutex p1, p2 [,...] (also .pred.rel "mutex" or @mutex) .pred.safe_across_calls p1 [, p2 [,...]] 
Name: dot_entry; Comment: .entry label [, label [, ...]] Hint to DV code that the given labels are to be considered entry points. Otherwise, only global labels are considered entry points. 
Name: dot_mem_offset; Comment: .mem.offset offset, base "base" is used to distinguish between offsets from a different base. 
Name: declare_register; Comment: Declare a register by creating a symbol for it and entering it in the symbol table. 
Name: get_next_opcode; Comment: Returns the next entry in the opcode table that matches the one in IDESC, and frees the entry in IDESC. If no matching entry is found, NULL is returned instead. 
Name: parse_operands; Comment: Parse the operands for the opcode and find the opcode variant that matches the specified operands, or NULL if no match is possible. 
Name: match; Comment: Return true if TYPE fits in TEMPL at SLOT. 
Name: md_begin; Comment: This function is called once, at assembler startup time. It sets up all the tables, etc. that the MD part of the assembler will need that can be determined before arguments are parsed. 
Name: ia64_init; Comment: Set the default options in md. Cannot do this in md_begin because that is called after md_parse_option which is where we set the options in md based on command line options. 
Name: ia64_target_format; Comment: Return a string for the target object file format. 
Name: ia64_frob_symbol; Comment: The HP-UX linker will give unresolved symbol errors for symbols that are declared but unused. This routine removes declared, unused symbols from an object. 
Name: ia64_optimize_expr; Comment: Do ia64-specific expression optimization. All that's done here is to transform index expressions that are either due to the indexing of rotating registers or due to the indexing of indirect register sets. 
Name: ia64_canonicalize_symbol_name; Comment: Remove the '#' suffix that indicates a symbol as opposed to a register. 
Name: is_conditional_branch; Comment: Return true if idesc is a conditional branch instruction. This excludes the modulo scheduled branches, and br.ia. Mod-sched branches are excluded because they always read/write resources regardless of the value of the qualifying predicate. br.ia must always use p0, and hence is always taken. Thus this function returns true for branches which can fall through, and which use no resources if they do fall through. 
Name: is_taken_branch; Comment: Return whether the given opcode is a taken branch. If there's any doubt, returns zero. 
Name: is_interruption_or_rfi; Comment: Return whether the given opcode is an interruption or rfi. If there's any doubt, returns zero. 
Name: depends_on; Comment: Returns the index of the given dependency in the opcode's list of chks, or -1 if there is no dependency. 
Name: clear_qp_branch_flag; Comment: Clear branch flags on marked resources. This breaks the link between the QP of the marking instruction and a subsequent branch on the same QP. 
Name: update_qp_mutex; Comment: MASK contains 2 and only 2 PRs which are mutually exclusive. Remove any mutexes which contain one of the PRs and create new ones when needed. 
Name: clear_qp_mutex; Comment: Remove any mutexes which contain any of the PRs indicated in the mask. Any changes to a PR clears the mutex relations which include that PR. 
Name: clear_qp_implies; Comment: Clear implies relations which contain PRs in the given masks. P1_MASK indicates the source of the implies relation, while P2_MASK indicates the implied PR. 
Name: add_qp_imply; Comment: Add the PRs specified to the list of implied relations. 
Name: add_qp_mutex; Comment: Add the PRs specified in the mask to the mutex list; this means that only one of the PRs can be true at any time. PR0 should never be included in the mask. 
Name: note_register_values; Comment: Keep track of register values/changes which affect DV tracking. optimization note: should add a flag to classes of insns where otherwise we have to examine a group of strings to identify them. 
Name: qp_mutex; Comment: Return whether the given predicate registers are currently mutex. 
Name: resources_match; Comment: Return whether the given resource is in the given insn's list of chks Return 1 if the conflict is absolutely determined, 2 if it's a potential conflict. 
Name: insn_group_break; Comment: Indicate an instruction group break; if INSERT_STOP is non-zero, then insert a stop to create the break. Update all resource dependencies appropriately. If QP_REGNO is non-zero, only apply the break to resources which use the same QP_REGNO and have the link_to_qp_branch flag set. If SAVE_CURRENT is non-zero, don't affect resources marked by the current instruction. 
Name: mark_resource; Comment: Add the given resource usage spec to the list of active dependencies. 
Name: remove_marked_resource; Comment: Insert stops and serializations as needed to avoid DVs. 
Name: check_dependencies; Comment: Check the resources used by the given opcode against the current dependency list. The check is run once for each execution path encountered. In this case, a unique execution path is the sequence of instructions following a code entry point, e.g. the following has three execution paths, one starting at L0, one at L1, and one at L2. L0: nop L1: add L2: add br.ret 
Name: mark_resources; Comment: Register new dependencies based on the given opcode. 
Name: update_dependencies; Comment: Remove dependencies when they no longer apply. 
Name: check_dv; Comment: Examine the current instruction for dependency violations. 
Name: md_assemble; Comment: Translate one line of assembly. Pseudo ops and labels do not show here. 
Name: md_undefined_symbol; Comment: Called when symbol NAME cannot be found in the symbol table. Should be used for dynamic valued symbols only. 
Name: md_operand; Comment: Called for any expression that can not be recognized. When the function is called, `input_line_pointer' will point to the start of the expression. 
Name: ia64_fix_adjustable; Comment: Return 1 if it's OK to adjust a reloc by replacing the symbol with a section symbol plus some offset. For relocs involving @fptr(), directives we don't want such adjustments since we need to have the original symbol's name in the reloc. 
Name: ia64_pcrel_from_section; Comment: Decide from what point a pc-relative relocation is relative to, relative to the pc-relative fixup. Er, relatively speaking. 
Name: ia64_dwarf2_emit_offset; Comment: Used to emit section-relative relocs for the dwarf2 debug data. 
Name: ia64_cons_fix_new; Comment: This is called whenever some data item (not an instruction) needs a fixup. We pick the right reloc code depending on the byteorder currently in effect. 
Name: ia64_gen_real_reloc_type; Comment: Return the actual relocation we wish to associate with the pseudo reloc described by SYM and R_TYPE. SYM should be one of the symbols in the pseudo_func array, or NULL. 
Name: ia64_validate_fix; Comment: Here is where generate the appropriate reloc for pseudo relocation functions. 
Name: md_apply_fix; Comment: Attempt to simplify or even eliminate a fixup. The return value is ignored; perhaps it was once meaningful, but now it is historical. To indicate that a fixup has been eliminated, set FIXP->FX_DONE. If fixp->fx_addsy is non-NULL, we'll have to generate a reloc entry (if possible). 
Name: tc_gen_reloc; Comment: Generate the BFD reloc to be stuck in the object file from the fixup used internally in the assembler. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type TYPE, and store the appropriate bytes in *LIT. The number of LITTLENUMS emitted is stored in *SIZE. An error message is returned, or NULL on OK. 
Name: ia64_md_do_align; Comment: Handle ia64 specific semantics of the align directive. 
Name: ia64_handle_align; Comment: This is called from HANDLE_ALIGN in write.c. Fill in the contents of an rs_align_code fragment. 
Name: ia64_check_label; Comment: Check if a label should be made global. 
Name: dot_alias; Comment: Called for .alias and .secalias directives. If SECTION is 1, it is .secalias. Otherwise, it is .alias. 
Name: do_alias; Comment: It renames the original symbol name to its alias. 
Name: ia64_adjust_symtab; Comment: Called from write_object_file. 
Name: do_secalias; Comment: It renames the original section name to its alias. 
Name: ia64_frob_file; Comment: Called from write_object_file. 
Name: get_vms_time; Comment: Manufacture a VMS-like time string. 
Name: ip2k_force_relocation; Comment: See whether we need to force a relocation into the output file. Force most of them, since the linker's bfd relocation engine understands range limits better than gas' cgen fixup engine. Consider the case of a fixup intermediate value being larger than the instruction it will be eventually encoded within. 
Name: md_pcrel_from_section; Comment: Functions concerning relocs. 
Name: iq2000_record_hi16; Comment: Record a HI16 reloc for later matching with its LO16 cousin. 
Name: iq2000_cgen_record_fixup_exp; Comment: Called while parsing an instruction to create a fixup. We need to check for HI16 relocs and queue them up for later sorting. 
Name: iq2000_frob_file; Comment: Sort any unmatched HI16 relocs so that they immediately precede the corresponding LO16 reloc. This is called before md_apply_fix and tc_gen_reloc. 
Name: iq2000_force_relocation; Comment: See whether we need to force a relocation into the output file. 
Name: s_iq2000_set; Comment: Handle the .set pseudo-op. 
Name: s_iq2000_end; Comment: The .end directive. 
Name: s_iq2000_ent; Comment: The .aent and .ent directives. 
Name: s_iq2000_frame; Comment: The .frame directive. If the mdebug section is present (IRIX 5 native) then ecoff.c (ecoff_directive_frame) is used. For embedded targets, s_iq2000_frame is used so that we can set the PDR information correctly. We can't use the ecoff routines because they make reference to the ecoff symbol table (in the mdebug section). 
Name: s_iq2000_mask; Comment: The .fmask and .mask directives. If the mdebug section is present (IRIX 5 native) then ecoff.c (ecoff_directive_mask) is used. For embedded targets, s_iq2000_mask is used so that we can set the PDR information correctly. We can't use the ecoff routines because they make reference to the ecoff symbol table (in the mdebug section). 
Name: md_show_usage; Comment: Display architecture specific options. 
Name: md_parse_option; Comment: Parse command line options. 
Name: md_begin; Comment: Do any architecture specific initialisation. 
Name: md_number_to_chars; Comment: Turn an integer of n bytes (in val) into a stream of bytes appropriate for use in the a.out file, and stores them in the array pointed to by buf. 
Name: md_undefined_symbol; Comment: Called for each undefined symbol. 
Name: md_assemble; Comment: This function assembles the instructions. It emits the frags/bytes to the sections and creates the relocation entries. 
Name: md_pcrel_from; Comment: Return the position from which the PC relative adjustment for a PC relative fixup should be made. 
Name: lm32_fix_adjustable; Comment: Return true if we can partially resolve a relocation now. 
Name: md_estimate_size_before_relax; Comment: Relaxation isn't required/supported on this target. 
Name: s_dtprel; Comment: Handle the .dtprelword and .dtpreldword pseudo-ops. They generate a 32-bit or 64-bit DTP-relative relocation (BYTES says which) for use in DWARF debug information. 
Name: append_fixed_insn; Comment: Add INSN to the end of the output. 
Name: assember_macro_helper; Comment: Ask helper for returning a malloced c_str or NULL. 
Name: loongarch_assemble_INSNs; Comment: Accept instructions separated by ';'assuming 'not starting with space and not ending with space' or pass in empty c_str. 
Name: md_convert_frag; Comment: Convert a machine dependent frag. 
Name: loongarch_cfi_frame_initial_instructions; Comment: Standard calling conventions leave the CFA at SP on entry. 
Name: loongarch_handle_align; Comment: Fill in an rs_align_code fragment. We want to fill 'andi $r0,$r0,0'. 
Name: m32c_indirect_operand; Comment: Process [[indirect-operands]] in instruction str. 
Name: target_address_for; Comment: *fragP has been relaxed to its final size, and now needs to have the bytes inside it modified to conform to the new size. Called after relaxation is finished. fragP->fr_type == rs_machine_dependent. fragP->fr_subtype is the subtype of what the address relaxed to. 
Name: m32c_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type type, and store the appropriate bytes in *litP. The number of LITTLENUMS emitted is stored in *sizeP . An error message is returned, or NULL on OK. 
Name: restore_colon; Comment: Worker function for m32c_is_colon_insn(). 
Name: m32c_is_colon_insn; Comment: Determines if the symbol starting at START and ending in a colon that was at the location pointed to by INPUT_LINE_POINTER (but which has now been replaced bu a NUL) is in fact an :Z, :S, :Q, or :G suffix. If it is, then it restores the colon, advances INPUT_LINE_POINTER to the real end of the instruction/symbol, saves the char there to NUL_CHAR and pokes a NUL, and returns 1. Otherwise it returns 0. 
Name: parallel; Comment: Use parallel execution. 
Name: m32r_handle_align; Comment: This is called from HANDLE_ALIGN in write.c. Fill in the contents of an rs_align_code fragment. 
Name: fill_insn; Comment: If the last instruction was the first of 2 16 bit insns, output a nop to move the PC to a 32 bit boundary. This is done via an alignment specification since branch relaxing may make it unnecessary. Internally, we need to output one of these each time a 32 bit insn is seen after an insn that is relaxable. 
Name: debug_sym; Comment: Record the symbol so that when we output the insn, we can create a symbol that is at the start of the instruction. This is used to emit the label for the start of a breakpoint without causing the assembler to emit a NOP if the previous instruction was a 16 bit instruction. 
Name: expand_debug_syms; Comment: Second pass to expanding the debug symbols, go through linked list of symbols and reassign the address. 
Name: m32r_fill_insn; Comment: Cover function to fill_insn called after a label and at end of assembly. The result is always 1: we're called in a conditional to see if the current line is a label. 
Name: m32r_target_format; Comment: The default target format to use. 
Name: first_writes_to_seconds_operands; Comment: Returns true if an output of instruction 'a' is referenced by an operand of instruction 'b'. If 'check_outputs' is true then b's outputs are checked, otherwise its inputs are examined. 
Name: writes_to_pc; Comment: Returns true if the insn can (potentially) alter the program counter. 
Name: can_make_parallel; Comment: Return NULL if the two 16 bit insns can be executed in parallel. Otherwise return a pointer to an error message explaining why not. 
Name: make_parallel; Comment: Force the top bit of the second 16-bit insn to be set. 
Name: target_make_parallel; Comment: Same as make_parallel except buffer contains the bytes in target order. 
Name: assemble_two_insns; Comment: Assemble two instructions with an explicit parallel operation (||) or sequential operation (->). 
Name: m32r_scomm; Comment: .scomm pseudo-op handler. This is a new pseudo-op to handle putting objects in .scommon. By doing this the linker won't need to do any work, and more importantly it removes the implicit -G arg necessary to correctly link the object file. 
Name: m32r_record_hi16; Comment: Record a HI16 reloc for later matching with its LO16 cousin. 
Name: m32r_cgen_record_fixup_exp; Comment: Called while parsing an instruction to create a fixup. We need to check for HI16 relocs and queue them up for later sorting. 
Name: m32r_frob_file; Comment: Sort any unmatched HI16 relocs so that they immediately precede the corresponding LO16 reloc. This is called before md_apply_fix and tc_gen_reloc. 
Name: m32r_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: m32r_fix_adjustable; Comment: Return true if can adjust the reloc to be relative to its section (such as .data) instead of relative to some symbol. 
Name: m68hc11_arch_format; Comment: Get the target cpu for the assembler. This is based on the configure options and on the -m68hc11/-m68hc12 option. If no option is specified, we must get the default. 
Name: m68hc11_listing_header; Comment: Listing header selected according to cpu. 
Name: get_default_target; Comment: Try to identify the default target based on the BFD library. 
Name: md_begin; Comment: Initialize the assembler. Create the opcode hash table (sorted on the names) with the M6811 opcode table (from opcode library). 
Name: print_opcode_format; Comment: Return a string that represents the operand format for the instruction. When example is true, this generates an example of operand. This is used to give an example and also to generate a test. 
Name: print_opcode_list; Comment: Prints the list of instructions with the possible operands. 
Name: print_insn_format; Comment: Print the instruction format. This operation is called when some instruction is not correct. Instruction format is printed as an error message. 
Name: reg_name_search; Comment: reg_name_search() finds the register number given its name. Returns the register number or REG_NONE on failure. 
Name: get_operand; Comment: Parse a string of operands and return an array of expressions. Operand mode[0] mode[1] exp[0] exp[1] #n M6811_OP_IMM16 - O_ <exp> M6811_OP_DIRECT - O_ .{+-}<exp> M6811_OP_JUMP_REL - O_ <exp> M6811_OP_IND16 - O_* ,r N,r M6812_OP_IDX M6812_OP_REG O_constant O_register n,-r M6812_PRE_DEC M6812_OP_REG O_constant O_register n,+r M6812_PRE_INC " " n,r- M6812_POST_DEC " " n,r+ M6812_POST_INC " " A,r B,r D,r M6811_OP_REG M6812_OP_REG O_register O_register [D,r] M6811_OP_D_IDX M6812_OP_REG O_register O_register [n,r] M6811_OP_D_IDX_2 M6812_OP_REG O_constant O_register 
Name: check_range; Comment: Checks that the number 'num' fits for a given mode. 
Name: fixup8; Comment: Put a 1 byte expression described by 'oper'. If this expression contains unresolved symbols, generate an 8-bit fixup. 
Name: fixup16; Comment: Put a 2 byte expression described by 'oper'. If this expression contains unresolved symbols, generate a 16-bit fixup. 
Name: fixup24; Comment: Put a 3 byte expression described by 'oper'. If this expression contains unresolved symbols, generate a 24-bit fixup. 
Name: fixup8_xg; Comment: XGATE Put a 1 byte expression described by 'oper'. If this expression contains unresolved symbols, generate an 8-bit fixup. 
Name: convert_branch; Comment: Translate the short branch/bsr instruction into a long branch. 
Name: m68hc11_new_insn; Comment: Start a new insn that contains at least 'size' bytes. Record the line information of that insn in the dwarf2 debug sections. 
Name: build_jump_insn; Comment: Builds a jump instruction (bra, bcc, bsr). 
Name: build_dbranch_insn; Comment: Builds a dbne/dbeq/tbne/tbeq instruction. 
Name: build_indexed_byte; Comment: Assemble the post index byte for 68HC12 extended addressing modes. 
Name: build_reg_mode; Comment: Assemble the 68HC12 register mode byte. 
Name: build_insn_xg; Comment: build_insn_xg takes a pointer to the opcode entry in the opcode table, the array of operand expressions and builds the corresponding instruction. 
Name: build_insn; Comment: build_insn takes a pointer to the opcode entry in the opcode table, the array of operand expressions and builds the corresponding instruction. This operation only deals with non relative jumps insn (need special handling). 
Name: find; Comment: find() gets a pointer to an entry in the opcode table. It must look at all opcodes with the same name and use the operands to choose the correct opcode. Returns the opcode pointer if there was a match and 0 if none. 
Name: find_opcode; Comment: Find the real opcode and its associated operands. We use a progressive approach here. On entry, 'opc' points to the first opcode in the table that matches the opcode name in the source line. We try to isolate an operand, find a possible match in the opcode table. We isolate another operand if no match were found. The table 'operands' is filled while operands are recognized. Returns the opcode pointer that matches the opcode name in the source line and the associated operands. 
Name: md_assemble; Comment: This is the main entry point for the machine-dependent assembler. str points to a machine-dependent instruction. This function is supposed to emit the frags/bytes it assembles to. 
Name: s_m68hc11_mode; Comment: Pseudo op to control the ELF flags. 
Name: s_m68hc11_mark_symbol; Comment: Mark the symbols with STO_M68HC12_FAR to indicate the functions are using 'rtc' for returning. It is necessary to use 'call' to invoke them. This is also used by the debugger to correctly find the stack frame. 
Name: md_pcrel_from; Comment: PC-relative offsets are relative to the start of the next instruction. That is, the address of the offset, plus its size, since the offset is always the last part of the insn. 
Name: m68hc11_relax_frag; Comment: We need a port-specific relaxation function to cope with sym2 - sym1 relative expressions with both symbols in the same segment (but not necessarily in the same frag as this insn), for example: ldab sym2-(sym1-2),pc sym1: The offset can be 5, 9 or 16 bits long. 
Name: relaxable_symbol; Comment: On an ELF system, we can't relax a weak symbol. The weak symbol can be overridden at final link time by a non weak symbol. We can relax externally visible symbol because there is no shared library and such symbol can't be overridden (unless they are weak). 
Name: md_estimate_size_before_relax; Comment: Force truly undefined symbols to their maximum size, and generally set up the frag list to be relaxed. 
Name: tc_m68hc11_force_relocation; Comment: See whether we need to force a relocation into the output file. 
Name: tc_m68hc11_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the linker relaxation is done correctly, so in some cases we force the original symbol to be used. 
Name: m68hc11_elf_final_processing; Comment: Set the ELF specific flags. 
Name: s_m68hc11_parse_pseudo_instruction; Comment: Process directives specified via pseudo ops 
Name: insop; Comment: Like addword, but goes BEFORE general operands. 
Name: add_fix; Comment: The numo+1 kludge is so we can hit the low order byte of the prev word. Blecch. 
Name: add_frag; Comment: Cause an extra frag to be generated here, inserting up to 10 bytes (that value is chosen in the frag_var call in md_assemble). TYPE is the subtype of the frag to be generated; its primary type is rs_machine_dependent. The TYPE parameter is also used by md_convert_frag_1 and md_estimate_size_before_relax. The appropriate type of fixup will be emitted by md_convert_frag_1. ADD becomes the FR_SYMBOL field of the frag, and OFF the FR_OFFSET. 
Name: get_reloc_code; Comment: Compute the relocation code for a fixup of SIZE bytes, using pc relative relocation if PCREL is non-zero. PIC says whether a special pic relocation was requested. 
Name: tc_m68k_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the dynamic relocations are done correctly, so in some cases we force the original symbol to be used. 
Name: m68k_ip; Comment: Assemble an m68k instruction. 
Name: install_operand; Comment: Cause an extra frag to be generated here, inserting up to FRAG_VAR_SIZE bytes. TYPE is the subtype of the frag to be generated; its primary type is rs_machine_dependent. The TYPE parameter is also used by md_convert_frag_1 and md_estimate_size_before_relax. The appropriate type of fixup will be emitted by md_convert_frag_1. ADD becomes the FR_SYMBOL field of the frag, and OFF the FR_OFFSET. 
Name: crack_operand; Comment: Verify that we have some number of paren pairs, do m68k_ip_op(), and then deal with the bitfield hack. 
Name: insert_reg; Comment: This is the guts of the machine-dependent assembler. STR points to a machine dependent instruction. This function is supposed to emit the frags/bytes it assembles to. 
Name: m68k_compare_opcode; Comment: Comparison function used by qsort to rank the opcode entries by name. 
Name: m68k_frob_label; Comment: This is called when a label is defined. 
Name: m68k_flush_pending_output; Comment: This is called when a value that is not an instruction is emitted. 
Name: m68k_frob_symbol; Comment: This is called at the end of the assembly, when the final value of the label is known. We warn if this is a text symbol aligned at an odd location. 
Name: m68k_mri_mode_change; Comment: This is called if we go in or out of MRI mode because of the .mri pseudo-op. 
Name: md_convert_frag_1; Comment: *fragP has been relaxed to its final size, and now needs to have the bytes inside it modified to conform to the new size There is UGLY MAGIC here. .. 
Name: md_estimate_size_before_relax; Comment: Force truly undefined symbols to their maximum size, and generally set up the frag list to be relaxed 
Name: get_num; Comment: Different values of OK tell what it's OK to return. Things that aren't OK are an error (what a shock, no?) 0: Everything is OK 10: Absolute 1:8_ only 20: Absolute 0:7_ only 30: absolute 0:15_ only 40: Absolute 0:31_ only 50: absolute 0:127_ only 55: absolute -64:63 only 60: absolute -128:127 only 65: absolute 0:511 only 70: absolute 0:4095_ only 80: absolute -1, 1:7 only 90: No bignums. 
Name: s_data1; Comment: These are the back-ends for the various machine dependent pseudo-ops. 
Name: m68k_conditional_pseudoop; Comment: This function returns non-zero if the argument is a conditional pseudo-op. This is called when checking whether a pending alignment is needed. 
Name: mri_chip; Comment: Handle an MRI style chip specification. 
Name: s_chip; Comment: The MRI CHIP pseudo-op. 
Name: s_fopt; Comment: The MRI FOPT pseudo-op. 
Name: s_opt; Comment: The MRI OPT pseudo-op. 
Name: skip_to_comma; Comment: Skip ahead to a comma. This is used for OPT options which we do not support and which take arguments. 
Name: opt_nest; Comment: Handle the OPT NEST=depth option. 
Name: opt_chip; Comment: Handle the OPT P=chip option. 
Name: opt_list; Comment: Handle the OPT S option. 
Name: opt_list_symbols; Comment: Handle the OPT T option. 
Name: s_reg; Comment: Handle the MRI REG pseudo-op. 
Name: s_save; Comment: The MRI SAVE pseudo-op. 
Name: s_restore; Comment: The MRI RESTORE pseudo-op. 
Name: mri_assemble; Comment: Assemble an instruction for an MRI structured control directive. 
Name: mri_control_label; Comment: Generate a new MRI label structured control directive label name. 
Name: push_mri_control; Comment: Create a new MRI structured control directive. 
Name: pop_mri_control; Comment: Pop off the stack of MRI structured control directives. 
Name: parse_mri_condition; Comment: Recognize a condition code in an MRI structured control expression. 
Name: parse_mri_control_operand; Comment: Parse a single operand in an MRI structured control expression. 
Name: swap_mri_condition; Comment: Swap the sense of a condition. This changes the condition so that it generates the same result when the operands are swapped. 
Name: reverse_mri_condition; Comment: Reverse the sense of a condition. 
Name: build_mri_control_operand; Comment: Build an MRI structured control expression. This generates test and branch instructions. It goes to TRUELAB if the condition is true, and to FALSELAB if the condition is false. Exactly one of TRUELAB and FALSELAB will be NULL, meaning to fall through. QUAL is the size qualifier for the expression. EXTENT is the size to use for the branch. 
Name: parse_mri_control_expression; Comment: Parse an MRI structured control expression. This generates test and branch instructions. STOP is where the expression ends. It goes to TRUELAB if the condition is true, and to FALSELAB if the condition is false. Exactly one of TRUELAB and FALSELAB will be NULL, meaning to fall through. QUAL is the size qualifier for the expression. EXTENT is the size to use for the branch. 
Name: s_mri_if; Comment: Handle the MRI IF pseudo-op. This may be a structured control directive, or it may be a regular assembler conditional, depending on its operands. 
Name: s_mri_else; Comment: Handle the MRI else pseudo-op. If we are currently doing an MRI structured IF, associate the ELSE with the IF. Otherwise, assume it is a conditional else. 
Name: s_mri_endi; Comment: Handle the MRI ENDI pseudo-op. 
Name: s_mri_break; Comment: Handle the MRI BREAK pseudo-op. 
Name: s_mri_next; Comment: Handle the MRI NEXT pseudo-op. 
Name: s_mri_for; Comment: Handle the MRI FOR pseudo-op. 
Name: s_mri_endf; Comment: Handle the MRI ENDF pseudo-op. 
Name: s_mri_repeat; Comment: Handle the MRI REPEAT pseudo-op. 
Name: s_mri_until; Comment: Handle the MRI UNTIL pseudo-op. 
Name: s_mri_while; Comment: Handle the MRI WHILE pseudo-op. 
Name: s_mri_endw; Comment: Handle the MRI ENDW pseudo-op. 
Name: s_m68k_cpu; Comment: Parse a .cpu directive. 
Name: s_m68k_arch; Comment: Parse a .arch directive. 
Name: m68k_lookup_cpu; Comment: Lookup a cpu name in TABLE and return the slot found. Return NULL if none is found, the caller is responsible for emitting an error message. If ALLOW_M is non-zero, we allow an initial 'm' on the cpu name, if it begins with a '6' (possibly skipping an intervening 'c'. We also allow a 'c' in the same place. if NEGATED is non-zero, we accept a leading 'no-' and *NEGATED is set to true, if the option is indeed negated. 
Name: m68k_set_cpu; Comment: Set the cpu, issuing errors if it is unrecognized. 
Name: m68k_set_arch; Comment: Set the architecture, issuing errors if it is unrecognized. 
Name: m68k_set_extension; Comment: Set the architecture extension, issuing errors if it is unrecognized, or invalid 
Name: m68k_init_arch; Comment: Setup tables from the selected arch and/or cpu 
Name: main; Comment: Warning, this routine probably doesn't work anymore. 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? On the 68k, it is relative to the address of the first extension word. The difference between the addresses of the offset and the first extension word is stored in fx_pcrel_adjust. 
Name: m68k_elf_suffix; Comment: Parse @TLSLDO and return the desired relocation. 
Name: m68k_elf_gnu_attribute; Comment: Parse a .gnu_attribute directive. 
Name: tc_m68k_check_adjusted_broken_word; Comment: Check and emit error if broken-word handling has failed to fix up a case-table._This is called from write.c, after doing everything it knows about how to handle broken words. 
Name: mcore_pool_count; Comment: Perform FUNC (ARG), and track number of bytes added to frag. 
Name: mcore_s_text; Comment: Handle the section changing pseudo-ops. These call through to the normal implementations, but they dump the literal pool first. 
Name: mylog2; Comment: Get a log2(val). 
Name: parse_reg; Comment: Try to parse a reg name. 
Name: parse_rt; Comment: Parse a literal specification. -- either new or old syntax. old syntax: the user supplies the label and places the literal. new syntax: we put it into the literal pool. 
Name: md_convert_frag; Comment: Called after relaxing, change the frags so they know how big they are. 
Name: md_apply_fix; Comment: Applies the desired value to the specified location. Also sets up addends for 'rela' type relocations. 
Name: md_estimate_size_before_relax; Comment: Called just before address relaxation, return the length by which a fragment must grow to reach it's destination. 
Name: mcore_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: mcore_fix_adjustable; Comment: Return true if the fix can be handled by GAS, false if it must be passed through to the linker. 
Name: mep_parse_operand; Comment: The MeP version of the cgen parse_operand function. The only difference from the standard version is that we want to avoid treating '$foo' and '($foo...)' as references to a symbol called '$foo'. The chances are that '$foo' is really a misspelled register. 
Name: mep_cgen_assemble_cop_insn; Comment: Variant of mep_cgen_assemble_insn. Assemble insn STR of cpu CD as a coprocessor instruction, if possible, into FIELDS, BUF, and INSN. 
Name: slot_ok; Comment: IVC2 packing is different than other VLIW coprocessors. Many of the COP insns can be placed in any of three different types of slots, and each bundle can hold up to three insns - zero or one core insns and one or two IVC2 insns. The insns in CGEN are tagged with which slots they're allowed in, and we have to decide based on that whether or not the user had given us a possible bundling. 
Name: mep_check_parallel_scheduling; Comment: The scheduling functions are just filters for invalid combinations. If there is a violation, they terminate assembly. Otherwise they just fall through. Successful combinations cause no side effects other than valid nop insertion. 
Name: md_estimate_size_before_relax; Comment: Return an initial guess of the length by which a fragment must grow to hold a branch to reach its destination. Also updates fr_type and fr_subtype as necessary. Called just before doing relaxation. Any symbol that is now undefined will not become defined. The guess for fr_var is ACTUALLY the growth beyond fr_fix. Whatever we do to grow fr_fix or fr_var contributes to our returned value. Although it may not be explicit in the frag, pretend fr_var starts with a 0 value. 
Name: mep_relax_frag; Comment: VLIW does relaxing, but not growth. 
Name: mep_apply_fix; Comment: Functions concerning relocs. 
Name: mep_cgen_record_fixup_exp; Comment: Called while parsing an instruction to create a fixup. We need to check for HI16 relocs and queue them up for later sorting. 
Name: mep_frob_file; Comment: Sort any unmatched HI16 relocs so that they immediately precede the corresponding LO16 reloc. This is called before md_apply_fix and tc_gen_reloc. 
Name: mep_force_relocation; Comment: See whether we need to force a relocation into the output file. 
Name: mep_vtext_section; Comment: In vliw mode, the default section is .vtext. We have to be able to switch into .vtext using only the .vtext directive. 
Name: mep_noregerr; Comment: This is an undocumented pseudo-op used to disable gas's "disabled_registers" check. Used for code which checks for those registers at runtime. 
Name: mep_unrecognized_line; Comment: mep_unrecognized_line: This is called when a line that can't be parsed is encountered. We use it to check for a leading '+' sign which indicates that the current instruction is a coprocessor instruction that is to be parallelized with a previous core insn. This function accepts the '+' and rejects all other characters that might indicate garbage at the beginning of the line. The '+' character gets lost as the calling loop continues, so we need to indicate that we saw it. 
Name: parse_none; Comment: Parse an instruction that takes no operands. 
Name: skip_whitespace; Comment: Return the next non-whitespace character in LINE or NULL. 
Name: skip_space; Comment: Return the next non-space character in LINE or NULL. 
Name: skip_comma; Comment: Return the character after the current one in LINE if the current character is a comma, otherwise NULL. 
Name: parse_gp_reg; Comment: Return the metag_reg struct corresponding to NAME or NULL if no such register exists. 
Name: parse_gp_regs_list; Comment: Parse a list of up to COUNT GP registers from LINE, returning the registers parsed in REGS and the number parsed in REGS_READ. Return a pointer to the next character or NULL. 
Name: parse_gp_regs; Comment: Parse a list of exactly COUNT GP registers from LINE, returning the registers parsed in REGS. Return a pointer to the next character or NULL. 
Name: parse_fpu_regs; Comment: Parse a list of exactly COUNT FPU registers from LINE, returning the registers parsed in REGS. Return a pointer to the next character or NULL. 
Name: is_unit_pair; Comment: Return TRUE if REG1 and REG2 are in paired units. 
Name: is_reg_pair; Comment: Return TRUE if REG1 and REG2 form a register pair. 
Name: parse_pair_gp_regs; Comment: Parse a pair of GP registers from LINE, returning the registers parsed in REGS. Return a pointer to the next character or NULL. 
Name: parse_mov_u2u; Comment: Parse a unit-to-unit MOV instruction. 
Name: parse_mov_port; Comment: Parse a MOV to port instruction. 
Name: parse_movl_ttrec; Comment: Parse a MOVL to TTREC instruction. 
Name: parse_addr_incr_op; Comment: Parse an incrementing or decrementing addressing mode. 
Name: parse_addr_pre_incr_op; Comment: Parse an pre-incrementing or pre-decrementing addressing mode. 
Name: parse_addr_post_incr_op; Comment: Parse an post-incrementing or post-decrementing addressing mode. 
Name: parse_addr_op; Comment: Parse an infix addressing mode. 
Name: parse_imm_addr; Comment: Parse the immediate portion of an addressing mode. 
Name: parse_addr_offset; Comment: Parse the offset portion of an addressing mode (register or immediate). 
Name: parse_addr; Comment: Parse an addressing mode. 
Name: parse_get; Comment: Parse a GET or pipeline MOV instruction. 
Name: parse_set; Comment: Parse a SET instruction. 
Name: within_unsigned_range; Comment: Check an unsigned integer value can be represented in the given number of bits. 
Name: is_short_unit; Comment: Return TRUE if UNIT can be expressed using a short code. 
Name: copy_addr_reloc; Comment: Copy reloc data from ADDR to INSN. 
Name: parse_get_set; Comment: Parse a GET, SET or pipeline MOV instruction. 
Name: parse_get_set_ext; Comment: Parse an extended GET or SET instruction. 
Name: parse_mget_mset_addr; Comment: Parse an MGET or MSET instruction addressing mode. 
Name: parse_mget; Comment: Parse an MGET instruction. 
Name: parse_mset; Comment: Parse an MSET instruction. 
Name: check_rmask; Comment: Take a register list REGS of size REGS_READ and convert it into an rmask value if possible. Return the rmask value in RMASK and the lowest numbered register in LOWEST_REG. Return TRUE if the conversion was successful. 
Name: parse_mget_mset; Comment: Parse an MGET or MSET instruction. 
Name: parse_mmov_prime_list; Comment: Parse a list of registers for MMOV pipeline prime. 
Name: parse_mmov; Comment: Parse a MMOV instruction. 
Name: parse_imm_constant; Comment: Parse an immediate constant. 
Name: parse_mdrd; Comment: Parse an MDRD instruction. 
Name: parse_cond_set; Comment: Parse a conditional SET instruction. 
Name: parse_xfr; Comment: Parse an XFR instruction. 
Name: parse_imm8; Comment: Parse an 8bit immediate value. 
Name: parse_imm16; Comment: Parse a 16bit immediate value. 
Name: parse_mov_ct; Comment: Parse a MOV to control unit instruction. 
Name: parse_swap; Comment: Parse a SWAP instruction. 
Name: parse_jump; Comment: Parse a JUMP instruction. 
Name: parse_imm19; Comment: Parse a 19bit immediate value. 
Name: parse_callr; Comment: Parse a CALLR instruction. 
Name: lookup_o2r; Comment: Return the value for the register field if we apply the O2R modifier to operand 2 REG, combined with UNIT_BIT derived from the destination register or source1. Uses address unit O2R if IS_ADDR is set. 
Name: parse_alu; Comment: Parse GP ALU instruction. 
Name: parse_branch; Comment: Parse a B instruction. 
Name: parse_kick; Comment: Parse a KICK instruction. 
Name: parse_switch; Comment: Parse a SWITCH instruction. 
Name: parse_shift; Comment: Parse a shift instruction. 
Name: parse_min_max; Comment: Parse a MIN or MAX instruction. 
Name: parse_bitop; Comment: Parse a bit operation instruction. 
Name: parse_cmp; Comment: Parse a CMP or TST instruction. 
Name: parse_cachew; Comment: Parse a CACHEW instruction. 
Name: parse_cacher; Comment: Parse a CACHEW instruction. 
Name: parse_icache; Comment: Parse an ICACHE instruction. 
Name: parse_lnkget; Comment: Parse a LNKGET instruction. 
Name: parse_fmov; Comment: Parse an FPU MOV instruction. 
Name: parse_fmmov; Comment: Parse an FPU MMOV instruction. 
Name: parse_fmov_data; Comment: Parse an FPU data unit MOV instruction. 
Name: parse_fmov_i; Comment: Parse an FPU immediate MOV instruction. 
Name: parse_fpack; Comment: Parse an FPU PACK instruction. 
Name: parse_fswap; Comment: Parse an FPU SWAP instruction. 
Name: parse_fcmp; Comment: Parse an FPU CMP instruction. 
Name: parse_fminmax; Comment: Parse an FPU MIN or MAX instruction. 
Name: parse_fconv; Comment: Parse an FPU data conversion instruction. 
Name: parse_fconvx; Comment: Parse an FPU extended data conversion instruction. 
Name: parse_fbarith; Comment: Parse an FPU basic arithmetic instruction. 
Name: parse_acf; Comment: Parse a floating point accumulator name. 
Name: parse_fearith; Comment: Parse an FPU extended arithmetic instruction. 
Name: parse_frec; Comment: Parse an FPU RCP or RSQ instruction. 
Name: parse_fsimd; Comment: Parse an FPU vector arithmetic instruction. 
Name: parse_fget_set_acf; Comment: Parse an FPU accumulator GET or SET instruction. 
Name: strip_reg_name; Comment: Copy the name of the next register in LINE to REG_BUF. 
Name: __parse_dsp_reg; Comment: Parse a DSP register from LINE into REG using only the registers from DSP_REGTAB. Return the next character or NULL. 
Name: parse_dsp_insn_reg; Comment: Parse a DSP register and setup "reg" with a metag_reg whose "no" member is suitable for encoding into a DSP insn register field. 
Name: parse_dsp_template_reg; Comment: Parse a DSP register and setup "reg" with a metag_reg whose "no" member is suitable for encoding into a DSP template definition insn register field. There is a separate table for whether we're doing a load or a store definition. "load" specifies which table to look at. 
Name: parse_dsp_reg; Comment: Parse a single DSP register from LINE. 
Name: is_addr_unit; Comment: Return TRUE if UNIT is an address unit. 
Name: is_same_data_unit; Comment: Return TRUE if UNIT1 and UNIT2 are equivalent units. 
Name: is_quickrot_reg; Comment: Return TRUE if the register NUM is a quickrot control register. 
Name: is_accumulator_reg; Comment: Return TRUE if REG is an accumulator register. 
Name: is_dspram_reg; Comment: Return TRUE if REG is a DSP RAM register. 
Name: parse_dsp_regs_list; Comment: Parse a list of DSP/GP registers. TRY_GP indicates whether we should try to parse the register as a general-purpose register if we fail to parse it as a DSP one. TMPL indicates whether the registers are part of a template definition instruction. If this is a template definition instruction LOAD says whether it's a load template insn. FIRST_DST indicates whether the first register is a destination operand. 
Name: parse_dsp_addr; Comment: Parse the following memory references: - [Ax.r] - [Ax.r++] - [Ax.r--] - [Ax.r+Ax.r++] - [Ax.r-Ax.r--] - [DSPRam] - [DSPRam++] - [DSPRam+DSPRam++] - [DSPRam-DSPRam--] 
Name: parse_dget_set; Comment: Parse a DSP GET or SET instruction. 
Name: parse_dtemplate; Comment: Parse a DSP template instruction. 
Name: template_mem_ref; Comment: Parse a DSP Template definition memory reference, e.g [A0.7+A0.5++]. DSPRAM is set to true by this function if this template definition is a DSP RAM template definition. 
Name: parse_template_regs; Comment: Sets LOAD to TRUE if this is a Template load definition (otherwise it's a store). Fills out ADDR, TEMPLATE_REG and ADDR_UNIT. 
Name: interpret_template_regs; Comment: Parse a template instruction definition. 
Name: units_need_o2r; Comment: Does this combination of units need the O2R bit and can it be encoded? 
Name: is_dsp_data_unit; Comment: Return TRUE if this is a DSP data unit. 
Name: parse_dalu; Comment: Parse a DaOpPaMe load template definition. 
Name: metag_parse_cpu; Comment: Parse a CPU command line option. 
Name: metag_parse_fpu; Comment: Parse an FPU command line option. 
Name: metag_parse_dsp; Comment: Parse a DSP command line option. 
Name: parse_split_condition; Comment: Parse a split condition code prefix. 
Name: parse_prefix; Comment: Parse an instruction prefix - F for float, D for DSP - and associated flags and condition codes. 
Name: find_insn_templates; Comment: Return a list of appropriate instruction parsers for MNEMONIC. 
Name: strupper; Comment: Make an uppercase copy of SRC into DST and return DST. 
Name: hash_templates; Comment: Calculate a hash value for a template. 
Name: eq_templates; Comment: Check if two templates are equal. 
Name: create_mnemonic_htab; Comment: Create the hash table required for parsing instructions. 
Name: hash_regs; Comment: Calculate a hash value for a register. 
Name: eq_regs; Comment: Check if two registers are equal. 
Name: create_reg_htab; Comment: Create the hash table required for parsing registers. 
Name: create_dspreg_htabs; Comment: Create the hash table required for parsing DSP registers. 
Name: hash_scond; Comment: Calculate a hash value for a split condition code. 
Name: eq_scond; Comment: Check if two split condition codes are equal. 
Name: create_scond_htab; Comment: Create the hash table required for parsing split condition codes. 
Name: parse_insn; Comment: Entry point for instruction parsing. 
Name: metag_force_relocation; Comment: If this function returns non-zero, it prevents the relocation against symbol(s) in the FIXP from being replaced with relocations against section symbols, and guarantees that a relocation will be emitted even when the value can be resolved locally. 
Name: metag_handle_align; Comment: This is called from HANDLE_ALIGN in tc-metag.h. 
Name: microblaze_generate_symbol; Comment: Generate a symbol for stabs information. 
Name: microblaze_s_text; Comment: Handle the section changing pseudo-ops. 
Name: microblaze_s_sdata; Comment: Things in the .sdata segment are always considered to be in the small data section. 
Name: microblaze_s_lcomm; Comment: Pseudo op to make file scope bss items. 
Name: microblaze_s_func; Comment: endp_p is always 1 as this func is called only for .end <funcname> This func consumes the <funcname> and calls regular processing s_func(1) with arg 1 (1 for end). 
Name: microblaze_s_weakext; Comment: Handle the .weakext pseudo-op as defined in Kane and Heinrich. 
Name: tc_microblaze_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the dynamic relocations are done correctly, so in some cases we force the original symbol to be used. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type type, and store the appropriate bytes in *litP. The number of LITTLENUMS emitted is stored in *sizeP. An error message is returned, or NULL on OK.
Name: cons_fix_new_microblaze; Comment: Create a fixup for a cons expression. If parse_cons_expression_microblaze found a machine specific op in an expression, then we create relocs accordingly. 
Name: mips_address_bytes; Comment: Export the ABI address size for use by TC_ADDRESS_BYTES for the purpose of the `.dc.a' internal pseudo-op. 
Name: mips_isa_rev; Comment: Return the ISA revision that is currently in use, or 0 if we are generating code for MIPS V or below. 
Name: mips_ase_mask; Comment: Return the mask of all ASEs that are revisions of those in FLAGS. 
Name: mips_check_isa_supports_ase; Comment: Check whether the current ISA supports ASE. Issue a warning if appropriate. 
Name: mips_check_isa_supports_ases; Comment: Check all enabled ASEs to see whether they are supported by the chosen architecture. 
Name: mips_set_ase; Comment: Set the state of ASE to ENABLED_P. Return the mask of ASE_* flags that were affected. 
Name: mips_lookup_ase; Comment: Return the ASE called NAME, or null if none. 
Name: create_insn; Comment: Initialise INSN from opcode entry MO. Leave its position unspecified. 
Name: insn_operands; Comment: Get a list of all the operands in INSN. 
Name: insn_opno; Comment: Get a description of operand OPNO of INSN. 
Name: mips_record_compressed_mode; Comment: Record the current MIPS16/microMIPS mode in now_seg. 
Name: read_insn; Comment: Read a standard MIPS instruction from BUF. 
Name: write_insn; Comment: Write standard MIPS instruction INSN to BUF. Return a pointer to the next byte. 
Name: read_compressed_insn; Comment: Read a microMIPS or MIPS16 opcode from BUF, given that it has length LENGTH. 
Name: write_compressed_insn; Comment: Write microMIPS or MIPS16 instruction INSN to BUF, given that the instruction is LENGTH bytes long. Return a pointer to the next byte. 
Name: install_insn; Comment: Install INSN at the location specified by its "frag" and "where" fields. 
Name: move_insn; Comment: Move INSN to offset WHERE in FRAG. Adjust the fixups accordingly and install the opcode in the new location. 
Name: add_fixed_insn; Comment: Add INSN to the end of the output. 
Name: add_relaxed_insn; Comment: Start a variant frag and move INSN to the start of the variant part, marking it as fixed. The other arguments are as for frag_var. 
Name: insert_into_history; Comment: Insert N copies of INSN into the history buffer, starting at position FIRST. Neither FIRST nor N need to be clipped. 
Name: clear_insn_error; Comment: Clear the error in insn_error. 
Name: set_insn_error_format; Comment: Possibly record error message MSG for the current instruction. If the error is about a particular argument, ARGNUM is the 1-based number of that argument, otherwise it is 0. FORMAT is the format of MSG. Return true if MSG was used, false if the current message was kept. 
Name: set_insn_error; Comment: Record an instruction error with no % format fields. ARGNUM and MSG are as for set_insn_error_format. 
Name: set_insn_error_i; Comment: Record an instruction error with one %d field I. ARGNUM and MSG are as for set_insn_error_format. 
Name: set_insn_error_ss; Comment: Record an instruction error with two %s fields S1 and S2. ARGNUM and MSG are as for set_insn_error_format. 
Name: report_insn_error; Comment: Report the error in insn_error, which is against assembly code STR. 
Name: init_vr4120_conflicts; Comment: Initialize vr4120_conflicts. There is a bit of duplication here: the idea is to make it obvious at a glance that each errata is included. 
Name: mips_prefer_vec_regno; Comment: Register symbols $v0 and $v1 map to GPRs 2 and 3, but they can also be interpreted as vector registers 0 and 1. If SYMVAL is the value of one of these register symbols, return the associated vector register, otherwise return SYMVAL itself. 
Name: mips_parse_register_1; Comment: Return true if string [S, E) is a valid register name, storing its symbol value in *SYMVAL_PTR if so. 
Name: mips_parse_register; Comment: Return true if the string at *SPTR is a valid register name. Allow it to have a VU0-style channel suffix of the form x?y?z?w? if CHANNELS_PTR is nonnull. When returning true, move *SPTR past the register, store the register's symbol value in *SYMVAL_PTR and the channel mask in *CHANNELS_PTR (if nonnull). The symbol value includes the register number (RNUM_MASK) and register type (RTYPE_MASK). The channel mask is a 4-bit value of the form XYZW and is 0 if no suffix was given. 
Name: reg_lookup; Comment: Check if SPTR points at a valid register specifier according to TYPES. If so, then return 1, advance S to consume the specifier and store the register's number in REGNOP, otherwise return 0. 
Name: mips_parse_vu0_channels; Comment: Parse a VU0 "x?y?z?w?" channel mask at S and store the associated mask in *CHANNELS. Return a pointer to the first unconsumed character. 
Name: mips_add_token; Comment: Give TOKEN type TYPE and add it to mips_operand_tokens. 
Name: mips_parse_base_start; Comment: Check whether S is '(' followed by a register name. Add OT_CHAR and OT_REG tokens for them if so, and return a pointer to the first unconsumed character. Return null otherwise. 
Name: mips_parse_argument_token; Comment: Parse one or more tokens from S. Return a pointer to the first unconsumed character on success. Return null if an error was found and store the error text in insn_error. FLOAT_FORMAT is as for mips_parse_arguments. 
Name: mips_parse_arguments; Comment: S points to the operand list for an instruction. FLOAT_FORMAT is 'f' if expressions should be treated as 32-bit floating-point constants, 'd' if they should be treated as 64-bit floating-point constants, or 0 if they should be treated as integer expressions (the usual case). Return a list of tokens on success, otherwise return 0. The caller must obstack_free the list after use. 
Name: is_opcode_valid; Comment: Return TRUE if opcode MO is valid on the currently selected ISA, ASE and architecture. Use is_opcode_valid_16 for MIPS16 opcodes. 
Name: is_opcode_valid_16; Comment: Return TRUE if the MIPS16 opcode MO is valid on the currently selected ISA and architecture. 
Name: is_size_valid; Comment: Return TRUE if the size of the microMIPS opcode MO matches one explicitly requested. Always TRUE in the standard MIPS mode. Use is_size_valid_16 for MIPS16 opcodes. 
Name: is_size_valid_16; Comment: Return TRUE if the size of the MIPS16 opcode MO matches one explicitly requested. 
Name: is_delay_slot_valid; Comment: Return TRUE if the microMIPS opcode MO is valid for the delay slot of the preceding instruction. Always TRUE in the standard MIPS mode. We don't accept macros in 16-bit delay slots to avoid a case where a macro expansion fails because it relies on a preceding 32-bit real instruction to have matched and does not handle the operands correctly. The only macros that may expand to 16-bit instructions are JAL that cannot be placed in a delay slot anyway, and corner cases of BALIGN and BGT (that likewise cannot be placed in a delay slot) that decay to a NOP. In all these cases the macros precede any corresponding real instruction definitions in the opcode table, so they will match in the second pass where the size of the delay slot is ignored and therefore produce correct code. 
Name: validate_mips_insn; Comment: For consistency checking, verify that all bits of OPCODE are specified either by the match/mask part of the instruction definition, or by the operand list. Also build up a list of operands in OPERANDS. INSN_BITS says which bits of the instruction are significant. If OPCODE is a standard or microMIPS instruction, DECODE_OPERAND provides the mips_operand description of each operand. DECODE_OPERAND is null for MIPS16 instructions. 
Name: validate_mips16_insn; Comment: The MIPS16 version of validate_mips_insn. 
Name: validate_micromips_insn; Comment: The microMIPS version of validate_mips_insn. 
Name: check_fpabi; Comment: Check -mabi and register sizes against the specified FP ABI. 
Name: mips_check_options; Comment: Perform consistency checks on the current options. 
Name: file_mips_check_options; Comment: Perform consistency checks on the module level options exactly once. This is a deferred check that happens: at the first .set directive or, at the first pseudo op that generates code (inc .dc.a) or, at the first instruction or, at the end. 
Name: mips_move_labels; Comment: Move all labels in LABELS to the current insertion point. TEXT_P says whether the labels refer to text or data. 
Name: mips_move_text_labels; Comment: Move all labels in insn_labels to the current insertion point and treat them as text labels. 
Name: s_is_linkonce; Comment: Duplicate the test for LINK_ONCE sections as in `adjust_reloc_syms'. 
Name: mips_compressed_mark_label; Comment: Mark MIPS16 or microMIPS instruction label LABEL. This permits the linker to handle them specially, such as generating jalx instructions when needed. We also make them odd for the duration of the assembly, in order to generate the right sort of code. We will make them even in the adjust_symtab routine, while leaving them marked. This is convenient for the debugger and the disassembler. The linker knows to make them odd again. 
Name: mips_compressed_mark_labels; Comment: Mark preceding MIPS16 or microMIPS instruction labels. 
Name: relax_close_frag; Comment: End the current frag. Make it a variant frag and record the relaxation info. 
Name: relax_start; Comment: Start a new relaxation sequence whose expansion depends on SYMBOL. See the comment above RELAX_ENCODE for more details. 
Name: relax_switch; Comment: Start generating the second version of a relaxable sequence. See the comment above RELAX_ENCODE for more details. 
Name: relax_end; Comment: End the current relaxable sequence. 
Name: get_delay_slot_nop; Comment: Return the type of nop that should be used to fill the delay slot of delayed branch IP. 
Name: insn_read_mask; Comment: Return a mask that has bit N set if OPCODE reads the register(s) in operand N. 
Name: insn_write_mask; Comment: Return a mask that has bit N set if OPCODE writes to the register(s) in operand N. 
Name: operand_reg_mask; Comment: Return a mask of the registers specified by operand OPERAND of INSN. Ignore registers of type OP_REG_<t> unless bit OP_REG_<t> of TYPE_MASK is set. 
Name: insn_reg_mask; Comment: Return a mask of the registers specified by operands OPNO_MASK of INSN, where bit N of OPNO_MASK is set if operand N should be included. Ignore registers of type OP_REG_<t> unless bit OP_REG_<t> of TYPE_MASK is set. 
Name: gpr_read_mask; Comment: Return the mask of core registers that IP reads. 
Name: gpr_write_mask; Comment: Return the mask of core registers that IP writes. 
Name: fpr_read_mask; Comment: Return the mask of floating-point registers that IP reads. 
Name: fpr_write_mask; Comment: Return the mask of floating-point registers that IP writes. 
Name: mips_oddfpreg_ok; Comment: Operand OPNUM of INSN is an odd-numbered floating-point register. Check whether that is allowed. 
Name: match_out_of_range; Comment: Record that the argument is out of range. 
Name: match_not_constant; Comment: Record that the argument isn't constant but needs to be. 
Name: match_char; Comment: Try to match an OT_CHAR token for character CH. Consume the token and return true on success, otherwise return false. 
Name: match_expression; Comment: Try to get an expression from the next tokens in ARG. Consume the tokens and return true on success, storing the expression value in VALUE and relocation types in R. 
Name: match_const_int; Comment: Try to get a constant expression from the next tokens in ARG. Consume the tokens and return true on success, storing the constant value in *VALUE. 
Name: convert_reg_type; Comment: Return the RTYPE_* flags for a register operand of type TYPE that appears in instruction OPCODE. 
Name: check_regno; Comment: ARG is register REGNO, of type TYPE. Warn about any dubious registers. 
Name: match_regno; Comment: ARG is a register with symbol value SYMVAL. Try to interpret it as a register of type TYPE. Return true on success, storing the register number in *REGNO and warning about any dubious uses. 
Name: match_reg; Comment: Try to interpret the next token in ARG as a register of type TYPE. Consume the token and return true on success, storing the register number in *REGNO. Return false on failure. 
Name: match_reg_range; Comment: Try to interpret the next token in ARG as a range of registers of type TYPE. Consume the token and return true on success, storing the register numbers in *REGNO1 and *REGNO2. Return false on failure. 
Name: match_int_operand; Comment: OP_INT matcher. 
Name: match_mapped_int_operand; Comment: OP_MAPPED_INT matcher. 
Name: match_msb_operand; Comment: OP_MSB matcher. 
Name: match_reg_operand; Comment: OP_REG matcher. 
Name: match_reg_pair_operand; Comment: OP_REG_PAIR matcher. 
Name: match_pcrel_operand; Comment: OP_PCREL matcher. The caller chooses the relocation type. 
Name: match_perf_reg_operand; Comment: OP_PERF_REG matcher. 
Name: match_addiusp_operand; Comment: OP_ADDIUSP matcher. 
Name: match_clo_clz_dest_operand; Comment: OP_CLO_CLZ_DEST matcher. 
Name: match_check_prev_operand; Comment: OP_CHECK_PREV matcher. 
Name: match_same_rs_rt_operand; Comment: OP_SAME_RS_RT matcher. 
Name: match_lwm_swm_list_operand; Comment: OP_LWM_SWM_LIST matcher. 
Name: match_entry_exit_operand; Comment: OP_ENTRY_EXIT_LIST matcher. 
Name: mips_encode_save_restore; Comment: Encode regular MIPS SAVE/RESTORE instruction operands according to the argument register mask AMASK, the number of static registers saved NSREG, the $ra, $s0 and $s1 register specifiers RA, S0 and S1 respectively, and the frame size FRAME_SIZE. 
Name: mips16_encode_save_restore; Comment: Encode MIPS16 SAVE/RESTORE instruction operands according to the argument register mask AMASK, the number of static registers saved NSREG, the $ra, $s0 and $s1 register specifiers RA, S0 and S1 respectively, and the frame size FRAME_SIZE. 
Name: match_save_restore_list_operand; Comment: OP_SAVE_RESTORE_LIST matcher. 
Name: match_mdmx_imm_reg_operand; Comment: OP_MDMX_IMM_REG matcher. 
Name: match_imm_index_operand; Comment: OP_IMM_INDEX matcher. 
Name: match_reg_index_operand; Comment: OP_REG_INDEX matcher. 
Name: match_pc_operand; Comment: OP_PC matcher. 
Name: match_reg28_operand; Comment: OP_REG28 matcher. 
Name: match_non_zero_reg_operand; Comment: OP_NON_ZERO_REG matcher. 
Name: match_tied_reg_operand; Comment: OP_REPEAT_DEST_REG and OP_REPEAT_PREV_REG matcher. OTHER_REGNO is the register that we need to match. 
Name: match_float_constant; Comment: Try to match a floating-point constant from ARG for LI.S or LI.D. LENGTH is the length of the value in bytes (4 for float, 8 for double) and USING_GPRS says whether the destination is a GPR rather than an FPR. Return the constant in IMM and OFFSET as follows: - If the constant should be loaded via memory, set IMM to O_absent and OFFSET to the memory address. - Otherwise, if the constant should be loaded into two 32-bit registers, set IMM to the O_constant to load into the high register and OFFSET to the corresponding value for the low register. - Otherwise, set IMM to the full O_constant and set OFFSET to O_absent. These constants only appear as the last operand in an instruction, and every instruction that accepts them in any variant accepts them in all variants. This means we don't have to worry about backing out any changes if the instruction does not match. We just match unconditionally and report an error if the constant is invalid. 
Name: match_vu0_suffix_operand; Comment: OP_VU0_SUFFIX and OP_VU0_MATCH_SUFFIX matcher; MATCH_P selects between them. 
Name: match_operand; Comment: Try to match a token from ARG against OPERAND. Consume the token and return true on success, otherwise return false. 
Name: check_completed_insn; Comment: ARG is the state after successfully matching an instruction. Issue any queued-up warnings. 
Name: reg_needs_delay; Comment: Return true if modifying general-purpose register REG needs a delay. 
Name: classify_vr4120_insn; Comment: Classify an instruction according to the FIX_VR4120_* enumeration. Return NUM_FIX_VR4120_CLASSES if the instruction isn't affected by VR4120 errata. 
Name: insns_between; Comment: Return the number of instructions that must separate INSN1 and INSN2, where INSN1 is the earlier instruction. Return the worst-case value for any INSN2 if INSN2 is null. 
Name: nops_for_vr4130; Comment: Return the number of nops that would be needed to work around the VR4130 mflo/mfhi errata if instruction INSN immediately followed the MAX_VR4130_NOPS instructions described by HIST. Ignore hazards that are contained within the first IGNORE instructions of HIST. 
Name: fix_24k_align_to; Comment: Return the minimum alignment for this store instruction. 
Name: fix_24k_sort; Comment: Comparison function used by qsort. 
Name: fix_24k_record_store_info; Comment: INSN is a store instruction. Try to record the store information in STINFO. Return false if the information isn't known. 
Name: nops_for_24k; Comment: Return the number of nops that would be needed to work around the 24k "lost data on stores during refill" errata if instruction INSN immediately followed the 2 instructions described by HIST. Ignore hazards that are contained within the first IGNORE instructions of HIST. Problem: The FSB (fetch store buffer) acts as an intermediate buffer for the data cache refills and store data. The following describes the scenario where the store data could be lost. A data cache miss, due to either a load or a store, causing fill data to be supplied by the memory subsystem The first three doublewords of fill data are returned and written into the cache A sequence of four stores occurs in consecutive cycles around the final doubleword of the fill: Store A Store B Store C Zero, One or more instructions Store D The four stores A-D must be to different doublewords of the line that is being filled. The fourth instruction in the sequence above permits the fill of the final doubleword to be transferred from the FSB into the cache. In the sequence above, the stores may be either integer (sb, sh, sw, swr, swl, sc) or coprocessor (swc1/swc2, sdc1/sdc2, swxc1, sdxc1, suxc1) stores, as long as the four stores are to different doublewords on the line. If the floating point unit is running in 1:2 mode, it is not possible to create the sequence above using only floating point store instructions. In this case, the cache line being filled is incorrectly marked invalid, thereby losing the data from any store to the line that occurs between the original miss and the completion of the five cycle sequence shown above. The workarounds are: Run the data cache in write-through mode. Insert a non-store instruction between Store A and Store B or Store B and Store C. 
Name: nops_for_insn; Comment: Return the number of nops that would be needed if instruction INSN immediately followed the MAX_NOPS instructions given by HIST, where HIST[0] is the most recent instruction. Ignore hazards between INSN and the first IGNORE instructions in HIST. If INSN is null, return the worse-case number of nops for any instruction. 
Name: nops_for_sequence; Comment: The variable arguments provide NUM_INSNS extra instructions that might be added to HIST. Return the largest number of nops that would be needed after the extended sequence, ignoring hazards in the first IGNORE instructions. 
Name: nops_for_insn_or_target; Comment: Like nops_for_insn, but if INSN is a branch, take into account the worst-case delay for the branch target. 
Name: fix_loongson2f_nop; Comment: Fix NOP issue: Replace nops by "or at,at,zero". 
Name: fix_loongson2f_jump; Comment: Fix Jump Issue: Eliminate instruction fetch from outside 256M region jr target pc &= 'hffff_ffff_cfff_ffff. 
Name: fix_loongson3_llsc; Comment: Fix loongson3 llsc errata: Insert sync before ll/lld. 
Name: can_swap_branch_p; Comment: IP is a branch that has a delay slot, and we need to fill it automatically. Return true if we can do that by swapping IP with the previous instruction. ADDRESS_EXPR is an operand of the instruction to be used with RELOC_TYPE. 
Name: get_append_method; Comment: Decide how we should add IP to the instruction stream. ADDRESS_EXPR is an operand of the instruction to be used with RELOC_TYPE. 
Name: find_altered_opcode; Comment: IP is an instruction whose opcode we have just changed, END points to the end of the opcode table processed. Point IP->insn_mo to the new opcode's definition. 
Name: find_altered_mips16_opcode; Comment: IP is a MIPS16 instruction whose opcode we have just changed. Point IP->insn_mo to the new opcode's definition. 
Name: find_altered_micromips_opcode; Comment: IP is a microMIPS instruction whose opcode we have just changed. Point IP->insn_mo to the new opcode's definition. 
Name: micromips_map_reloc; Comment: If assembling microMIPS code, then return the microMIPS reloc corresponding to the requested one if any. Otherwise return the reloc unchanged. 
Name: calculate_reloc; Comment: Try to resolve relocation RELOC against constant OPERAND at assembly time. Return true on success, storing the resolved value in RESULT. 
Name: append_insn; Comment: Output an instruction. IP is the instruction information. ADDRESS_EXPR is an operand of the instruction to be used with RELOC_TYPE. EXPANSIONP is true if the instruction is part of a macro expansion. 
Name: mips_no_prev_insn; Comment: Forget that there was any previous instruction or label. When BRANCH is true, the branch history is also flushed. 
Name: mips_emit_delays; Comment: This function must be called before we emit something other than instructions. It is like mips_no_prev_insn except that it inserts any NOPS that might be needed by previous instructions. 
Name: start_noreorder; Comment: Start a (possibly nested) noreorder block. 
Name: end_noreorder; Comment: End a nested noreorder block. 
Name: normalize_constant_expr; Comment: Sign-extend 32-bit mode constants that have bit 31 set and all higher bits unset. 
Name: normalize_address_expr; Comment: Sign-extend 32-bit mode address offsets that have bit 31 set and all higher bits unset. 
Name: match_insn; Comment: Try to match TOKENS against OPCODE, storing the result in INSN. Return true if the match was successful. OPCODE_EXTRA is a value that should be ORed into the opcode (used for VU0 channel suffixes, etc.). MORE_ALTS is true if there are more alternatives after OPCODE and SOFT_MATCH is as for mips_arg_info. 
Name: match_mips16_insn; Comment: Like match_insn, but for MIPS16. 
Name: match_invalid_for_isa; Comment: Record that the current instruction is invalid for the current ISA. 
Name: match_insns; Comment: Try to match TOKENS against a series of opcode entries, starting at FIRST. Return true if a definite match or failure was found, storing any match in INSN. OPCODE_EXTRA is a value that should be ORed into the opcode (to handle things like VU0 suffixes). LAX_MATCH is true if we have already tried and failed to match under normal conditions and now want to try a more relaxed match. 
Name: match_mips16_insns; Comment: Like match_insns, but for MIPS16. 
Name: macro_start; Comment: Set up global variables for the start of a new macro. 
Name: macro_warning; Comment: Given that a macro is longer than one instruction or of the wrong size, return the appropriate warning for it. Return null if no warning is needed. SUBTYPE is a bitmask of RELAX_DELAY_SLOT, RELAX_DELAY_SLOT_16BIT, RELAX_DELAY_SLOT_SIZE_FIRST, RELAX_DELAY_SLOT_SIZE_SECOND, and RELAX_NOMACRO. 
Name: macro_end; Comment: Finish up a macro. Emit warnings as appropriate. 
Name: macro_read_relocs; Comment: Read a macro's relocation codes from *ARGS and store them in *R. The first argument in *ARGS will be either the code for a single relocation or -1 followed by the three codes that make up a composite relocation. 
Name: macro_build; Comment: Build an instruction created by a macro expansion. This is passed a pointer to the count of instructions created so far, an expression, the name of the instruction to build, an operand format string, and corresponding arguments. 
Name: macro_build_jalr; Comment: Generate a "jalr" instruction with a relocation hint to the called function. This occurs in NewABI PIC code. 
Name: macro_build_lui; Comment: Generate a "lui" instruction. 
Name: macro_build_ldst_constoffset; Comment: Generate a sequence of instructions to do a load or store from a constant offset off of a base register (breg) into/from a target register (treg), using AT if necessary. 
Name: set_at; Comment: ___set_at()Generates code to set the $at register to true (one) if reg is less than the immediate expression. 
Name: load_register; Comment: ___load_register() This routine generates the least number of instructions necessary to load an absolute expression value into a register. 
Name: load_address; Comment: Load an address into a register. 
Name: move_register; Comment: Move the contents of register SOURCE into register DEST. 
Name: load_got_offset; Comment: Emit an SVR4 PIC sequence to load address LOCAL into DEST, where LOCAL is the sum of a symbol and a 16-bit or 32-bit displacement. The two alternatives are: Global symbol__Local symbol -------------__------------ lw DEST,%got(SYMBOL)__lw DEST,%got(SYMBOL + OFFSET) ...____... addiu DEST,DEST,OFFSET_addiu DEST,DEST,%lo(SYMBOL + OFFSET) load_got_offset emits the first instruction and add_got_offset emits the second for a 16-bit offset or add_got_offset_hilo emits a sequence to add a 32-bit offset using a scratch register. 
Name: macro_build_branch_likely; Comment: Emit a sequence of instructions to emulate a branch likely operation. BR is an ordinary branch corresponding to one to be emulated. BRNEG is its complementing branch with the original condition negated. CALL is set if the original branch specified the link operation. EP, FMT, SREG and TREG specify the usual macro_build() parameters. Code like this is produced in the noreorder mode: _BRNEG_<args>, 1f _ nop _b_<sym> _ delay slot (executed only if branch taken) 1: or, if CALL is set: _BRNEG_<args>, 1f _ nop _bal_<sym> _ delay slot (executed only if branch taken) 1: In the reorder mode the delay slot would be filled with a nop anyway, so code produced is simply: _BR_<args>, <sym> _ nop This function is used when producing code for the microMIPS ASE that does not implement branch likely instructions in hardware. 
Name: macro_build_branch_ccl; Comment: Emit a coprocessor branch-likely macro specified by TYPE, using CC as the condition code tested. EP specifies the branch target. 
Name: macro_build_branch_rs; Comment: Emit a two-argument branch macro specified by TYPE, using SREG as the register tested. EP specifies the branch target. 
Name: macro_build_branch_rsrt; Comment: Emit a three-argument branch macro specified by TYPE, using SREG and TREG as the registers tested. EP specifies the branch target. 
Name: offset_high_part; Comment: Return the high part that should be loaded in order to make the low part of VALUE accessible using an offset of OFFBITS bits. 
Name: small_offset_p; Comment: Return true if the value stored in offset_expr and offset_reloc fits into a signed offset of OFFBITS bits. RANGE is the maximum amount that the caller wants to add without inducing overflow and ALIGN is the known alignment of the value in bytes. 
Name: macro; Comment: *___Build macros This routine implements the seemingly endless macro or synthesized instructions and addressing modes in the mips assembly language. Many of these macros are simple and are similar to each other. These could probably be handled by some kind of table or grammar approach instead of this verbose method. Others are not simple macros but are more like optimizing code generation. One interesting optimization is when several store macros appear consecutively that would load AT with the upper half of the same address. The ensuing load upper instructions are omitted. This implies some kind of global optimization. We currently only optimize within a single macro. For many of the load and store macros if the address is specified as a constant expression in the first 64k of memory (ie ld $2,0x4000c) we first load register 'at' with zero and use it as the base register. The mips assembler simply uses register $zero. Just one tiny optimization we're missing. 
Name: mips16_macro; Comment: Implement macros in mips16 mode. 
Name: mips_lookup_insn; Comment: Look up instruction [START, START + LENGTH) in HASH. Record any extra opcode bits in *OPCODE_EXTRA. 
Name: mips_ip; Comment: Assemble an instruction into its binary format. If the instruction is a macro, set imm_expr and offset_expr to the values associated with "I" and "A" operands respectively. Otherwise store the value of the relocatable field (if any) in offset_expr. In both cases set offset_reloc to the relocation operators applied to offset_expr. 
Name: mips16_ip; Comment: As for mips_ip, but used when assembling MIPS16 code. Also set forced_insn_length to the resulting instruction size in bytes if the user explicitly requested a small or extended instruction. 
Name: mips16_immed_extend; Comment: Marshal immediate value VAL for an extended MIPS16 instruction. NBITS is the number of significant bits in VAL. 
Name: mips16_immed_operand; Comment: Like decode_mips16_operand, but require the operand to be defined and require it to be an integer. 
Name: mips16_immed_in_range_p; Comment: Return true if SVAL fits OPERAND. RELOC is as for mips16_immed. 
Name: mips16_immed; Comment: Install immediate value VAL into MIPS16 instruction *INSN, extending it if necessary. The instruction in *INSN may already be extended. RELOC is the relocation that produced VAL, or BFD_RELOC_UNUSED if none. In the former case, VAL is a 16-bit number with no defined signedness. TYPE is the type of the immediate field. USER_INSN_LENGTH is the length that the user requested, or 0 if none. 
Name: parse_relocation; Comment: Return true if *STR points to a relocation operator. When returning true, move *STR over the operator and store its relocation code in *RELOC. Leave both *STR and *RELOC alone when returning false. 
Name: my_getSmallExpression; Comment: Parse string STR as a 16-bit relocatable operand. Store the expression in *EP and the relocations in the array starting at RELOC. Return the number of relocation operators used. On exit, EXPR_END points to the first character after the expression. 
Name: mips_set_option_string; Comment: Set STRING_PTR (either &mips_arch_string or &mips_tune_string) to NEW_VALUE. Warn if another value was already specified. Note: we have to defer parsing the -march and -mtune arguments in order to handle 'from-abi' correctly, since the ABI might be specified in a later argument. 
Name: mips_set_tune; Comment: Set up globals to tune for the ISA or processor described by INFO. 
Name: mips_frob_file_before_adjust; Comment: This is called before the symbol table is processed. In order to work with gcc when using mips-tfile, we must keep all local labels. However, in other cases, we want to discard them. If we were called with -g, but we didn't see any debugging information, it may mean that gcc is smuggling debugging information through to mips-tfile, in which case we must generate all local labels. 
Name: mips_frob_file; Comment: Sort any unmatched HI16 and GOT16 relocs so that they immediately precede the corresponding LO16 reloc. This is called before md_apply_fix and tc_gen_reloc. Unmatched relocs can only be generated by use of explicit relocation operators. For our purposes, a %lo() expression matches a %got() or %hi() expression if: (a) it refers to the same symbol; and (b) the offset applied in the %lo() expression is no lower than _ the offset applied in the %got() or %hi(). (b) allows us to cope with code like: _lui_$4,%hi(foo) _lh_$4,%lo(foo+2)($4) ...which is legal on RELA targets, and has a well-defined behaviour if the user knows that adding 2 to "foo" will not induce a carry to the high 16 bits. When several %lo()s match a particular %got() or %hi(), we use the following rules to distinguish them: (1) %lo()s with smaller offsets are a better match than %lo()s with higher offsets. (2) %lo()s with no matching %got() or %hi() are better than those that already have a matching %got() or %hi(). (3) later %lo()s are better than earlier %lo()s. These rules are applied in order. (1) means, among other things, that %lo()s with identical offsets are chosen if they exist. (2) means that we won't associate several high-part relocations with the same low-part relocation unless there's no alternative. Having several high parts for the same low part is a GNU extension; this rule allows careful users to avoid it. (3) is purely cosmetic. mips_hi_fixup_list is is in reverse order, with the last high-part relocation being at the front of the list. It therefore makes sense to choose the last matching low-part relocation, all other things being equal. It's also easier to code that way. 
Name: mips_force_relocation_abs; Comment: Implement TC_FORCE_RELOCATION_ABS. 
Name: read_reloc_insn; Comment: Read the instruction associated with RELOC from BUF. 
Name: write_reloc_insn; Comment: Write instruction INSN to BUF, given that it has been relocated by RELOC. 
Name: fix_bad_cross_mode_jump_p; Comment: Return TRUE if the instruction pointed to by FIXP is an invalid jump to a symbol in another ISA mode, which cannot be converted to JALX. 
Name: fix_bad_same_mode_jalx_p; Comment: Return TRUE if the instruction pointed to by FIXP is an invalid JALX jump to a symbol in the same ISA mode. 
Name: fix_bad_misaligned_jump_p; Comment: Return TRUE if the instruction pointed to by FIXP is an invalid jump to a symbol whose value plus addend is not aligned according to the ultimate (after linker relaxation) jump instruction's immediate field requirement, either to (1 << SHIFT), or, for jumps from microMIPS to regular MIPS code, to (1 << 2). 
Name: fix_bad_cross_mode_branch_p; Comment: Return TRUE if the instruction pointed to by FIXP is an invalid branch to a symbol whose annotation indicates another ISA mode. For absolute symbols check the ISA bit instead. We accept BFD_RELOC_16_PCREL_S2 relocations against MIPS16 and microMIPS symbols or BFD_RELOC_MICROMIPS_16_PCREL_S1 relocations against regular MIPS symbols and associated with BAL instructions as these instructions may be converted to JALX by the linker. 
Name: fix_bad_misaligned_branch_p; Comment: Return TRUE if the symbol plus addend associated with a regular MIPS branch instruction pointed to by FIXP is not aligned according to the branch instruction's immediate field requirement. We need the addend to preserve the ISA bit and also the sum must not have bit 2 set. We must explicitly OR in the ISA bit from symbol annotation as the bit won't be set in the symbol's value then. 
Name: fix_bad_misaligned_address; Comment: Calculate the relocation target by masking off ISA mode bit before combining symbol and addend. 
Name: fix_validate_branch; Comment: Make the necessary checks on a regular MIPS branch pointed to by FIXP and its calculated value VAL. 
Name: mips_align; Comment: Align the current frag to a given power of two. If a particular fill byte should be used, FILL points to an integer that contains that byte, otherwise FILL is null. This function used to have the comment: The MIPS assembler also automatically adjusts any preceding label. The implementation therefore applied the adjustment to a maximum of one label. However, other label adjustments are applied to batches of labels, and adjusting just one caused problems when new labels were added for the sake of debugging or unwind information. We therefore adjust all preceding labels (given as LABELS) instead. 
Name: s_align; Comment: Align to a given power of two. .align 0 turns off the automatic alignment used by the data creating pseudo-ops. 
Name: s_mips_globl; Comment: Handle .globl. We need to override it because on Irix 5 you are permitted to say .globl foo .text where foo is an undefined symbol, to mean that foo should be considered to be the address of a function. 
Name: mips_frob_symbol; Comment: The Irix 5 and 6 assemblers set the type of any common symbol and any undefined non-function symbol to STT_OBJECT. We try to be compatible, since newer Irix 5 and 6 linkers care. 
Name: parse_code_option; Comment: Handle common .set/.module options. Return status indicating option type. 
Name: s_mipsset; Comment: Handle the .set pseudo-op. 
Name: s_module; Comment: Handle the .module pseudo-op. 
Name: s_abicalls; Comment: Handle the .abicalls pseudo-op. I believe this is equivalent to .option pic2. It means to generate SVR4 PIC calls. 
Name: s_cpload; Comment: Handle the .cpload pseudo-op. This is used when generating SVR4 PIC code. It sets the $gp register for the function based on the function address, which is in the register named in the argument. This uses a relocation against _gp_disp, which is handled specially by the linker. The result is: _lui_$gp,%hi(_gp_disp) _addiu_$gp,$gp,%lo(_gp_disp) _addu_$gp,$gp,.cpload argument The .cpload argument is normally $25 == $t9. The -mno-shared option changes this to: _lui_$gp,%hi(__gnu_local_gp) _addiu_$gp,$gp,%lo(__gnu_local_gp) and the argument is ignored. This saves an instruction, but the resulting code is not position independent; it uses an absolute address for __gnu_local_gp. Thus code assembled with -mno-shared can go into an ordinary executable, but not into a shared library. 
Name: s_cpsetup; Comment: Handle the .cpsetup pseudo-op defined for NewABI PIC code. The syntax is: .cpsetup $reg1, offset|$reg2, label If offset is given, this results in: sd__$gp, offset($sp) lui_$gp, %hi(%neg(%gp_rel(label))) addiu_$gp, $gp, %lo(%neg(%gp_rel(label))) daddu_$gp, $gp, $reg1 If $reg2 is given, this results in: or__$reg2, $gp, $0 lui_$gp, %hi(%neg(%gp_rel(label))) addiu_$gp, $gp, %lo(%neg(%gp_rel(label))) daddu_$gp, $gp, $reg1 $reg1 is normally $25 == $t9. The -mno-shared option replaces the last three instructions with _lui_$gp,%hi(_gp) _addiu_$gp,$gp,%lo(_gp) 
Name: s_cprestore; Comment: Handle the .cprestore pseudo-op. This stores $gp into a given offset from $sp. The offset is remembered, and after making a PIC call $gp is restored from that location. 
Name: s_cpreturn; Comment: Handle the .cpreturn pseudo-op defined for NewABI PIC code. If an offset was given in the preceding .cpsetup, it results in: ld__$gp, offset($sp) If a register $reg2 was given there, it results in: or__$gp, $reg2, $0 
Name: s_tls_rel_directive; Comment: Handle a .dtprelword, .dtpreldword, .tprelword, or .tpreldword pseudo-op; DIRSTR says which. The pseudo-op generates a BYTES-size DTP- or TP-relative relocation of type RTYPE, for use in either DWARF debug information or MIPS16 TLS. 
Name: s_dtprelword; Comment: Handle .dtprelword. 
Name: s_dtpreldword; Comment: Handle .dtpreldword. 
Name: s_tprelword; Comment: Handle .tprelword. 
Name: s_tpreldword; Comment: Handle .tpreldword. 
Name: s_gpvalue; Comment: Handle the .gpvalue pseudo-op. This is used when generating NewABI PIC code. It sets the offset to use in gp_rel relocations. 
Name: s_gpword; Comment: Handle the .gpword pseudo-op. This is used when generating PIC code. It generates a 32 bit GP relative reloc. 
Name: s_ehword; Comment: Handle the .ehword pseudo-op. This is used when generating unwinding tables. It generates a R_MIPS_EH reloc. 
Name: s_cpadd; Comment: Handle the .cpadd pseudo-op. This is used when dealing with switch tables in SVR4 PIC code. 
Name: s_insn; Comment: Handle the .insn pseudo-op. This marks instruction labels in mips16/micromips mode. This permits the linker to handle them specially, such as generating jalx instructions when needed. We also make them odd for the duration of the assembly, in order to generate the right sort of code. We will make them even in the adjust_symtab routine, while leaving them marked. This is convenient for the debugger and the disassembler. The linker knows to make them odd again. 
Name: s_nan; Comment: Handle the .nan pseudo-op. 
Name: s_mips_stab; Comment: Handle a .stab[snd] directive. Ideally these directives would be implemented in a transparent way, so that removing them would not have any effect on the generated instructions. However, s_stab internally changes the section, so in practice we need to decide now whether the preceding label marks compressed code. We do not support changing the compression mode of a label after a .stab* directive, such as in: foo: _.stabs ... _.set mips16 so the current mode wins. 
Name: s_mips_weakext; Comment: Handle the .weakext pseudo-op as defined in Kane and Heinrich. 
Name: tc_get_register; Comment: Parse a register string into a number. Called from the ECOFF code to parse .frame. The argument is non-zero if this is the frame register, so that we can record it in mips_frame_reg. 
Name: nopic_need_relax; Comment: Utility routine, called from above as well. If called while the input file is still being read, it's only an approximation. (For example, a symbol may later become defined which appeared to be undefined earlier.) 
Name: pic_need_relax; Comment: Return true if the given symbol should be considered local for SVR4 PIC. 
Name: mips16_pcrel_val; Comment: Given a MIPS16 variant frag FRAGP and PC-relative operand PCREL_OP convert a section-relative value VAL to the equivalent PC-relative value. 
Name: mips16_extended_frag; Comment: Given a mips16 variant frag FRAGP, return non-zero if it needs an extended opcode. SEC is the section the frag is in. 
Name: mips16_macro_frag; Comment: Given a MIPS16 variant frag FRAGP, return non-zero if it needs macro expansion. SEC is the section the frag is in. We only support PC-relative instructions (LA, DLA, LW, LD) here, in non-PIC code using 32-bit addressing. 
Name: relaxed_branch_length; Comment: Compute the length of a branch sequence, and adjust the RELAX_BRANCH_TOOFAR bit accordingly. If FRAGP is NULL, the worst-case length is computed, with UPDATE being used to indicate whether an unconditional (-1), branch-likely (+1) or regular (0) branch is to be computed. 
Name: frag_branch_delay_slot_size; Comment: Get a FRAG's branch instruction delay slot size, either from the short-delay-slot bit of a branch-and-link instruction if AL is TRUE, or SHORT_INSN_SIZE otherwise. 
Name: relaxed_micromips_32bit_branch_length; Comment: Compute the length of a branch sequence, and adjust the RELAX_MICROMIPS_TOOFAR32 bit accordingly. If FRAGP is NULL, the worst-case length is computed, with UPDATE being used to indicate whether an unconditional (-1), or regular (0) branch is to be computed. 
Name: relaxed_micromips_16bit_branch_length; Comment: Compute the length of a branch, and adjust the RELAX_MICROMIPS_TOOFAR16 bit accordingly. 
Name: md_estimate_size_before_relax; Comment: Estimate the size of a frag before relaxing. Unless this is the mips16, we are not really relaxing here, and the final size is encoded in the subtype information. For the mips16, we have to decide whether we are using an extended opcode or not. 
Name: mips_fix_adjustable; Comment: This is called to see whether a reloc against a defined symbol should be converted into a reloc against a section. 
Name: mips_relax_frag; Comment: Relax a machine dependent frag. This returns the amount by which the current size of the frag should change. 
Name: mips_frob_file_after_relocs; Comment: This function is called after the relocs have been generated. We've been storing mips16 text labels as odd. Here we convert them back to even for the convenience of the debugger. 
Name: mips_record_label; Comment: This function is called whenever a label is defined, including fake labels instantiated off the dot special symbol. It is used when handling branch delays; if a branch has a label, we assume we cannot move it. This also bumps the value of the symbol by 1 in compressed code. 
Name: mips_define_label; Comment: This function is called as tc_frob_label() whenever a label is defined and adds a DWARF-2 record we only want for true labels. 
Name: mips_add_dot_label; Comment: This function is called by tc_new_dot_label whenever a new dot symbol is defined. 
Name: mips_convert_ase_flags; Comment: Converting ASE flags from internal to .MIPS.abiflags values. 
Name: mips_elf_final_processing; Comment: Some special processing for a MIPS ELF file. 
Name: mips_handle_align; Comment: Fill in an rs_align_code fragment. Unlike elsewhere we want to use 32-bit microMIPS NOPs here (if applicable). 
Name: s_mips_file; Comment: The .file directive; just like the usual .file directive, but there is an initial number which is the ECOFF file index. In the non-ECOFF case .file implies DWARF-2. 
Name: s_mips_loc; Comment: The .loc directive, implying DWARF-2. 
Name: s_mips_end; Comment: The .end directive. 
Name: s_mips_ent; Comment: The .aent and .ent directives. 
Name: s_mips_frame; Comment: The .frame directive. If the mdebug section is present (IRIX 5 native) then ecoff.c (ecoff_directive_frame) is used. For embedded targets, s_mips_frame is used so that we can set the PDR information correctly. We can't use the ecoff routines because they make reference to the ecoff symbol table (in the mdebug section). 
Name: s_mips_mask; Comment: The .fmask and .mask directives. If the mdebug section is present (IRIX 5 native) then ecoff.c (ecoff_directive_mask) is used. For embedded targets, s_mips_mask is used so that we can set the PDR information correctly. We can't use the ecoff routines because they make reference to the ecoff symbol table (in the mdebug section). 
Name: mips_strict_matching_cpu_name_p; Comment: Return true if GIVEN is the same as CANONICAL, or if it is CANONICAL with a final "000" replaced by "k". Ignore case. Note: this function is shared between GCC and GAS. 
Name: mips_matching_cpu_name_p; Comment: Return true if GIVEN matches CANONICAL, where GIVEN is a user-supplied CPU name. We've traditionally allowed a lot of variation here. Note: this function is shared between GCC and GAS. 
Name: mips_parse_cpu; Comment: Parse an option that takes the name of a processor as its argument. OPTION is the name of the option and CPU_STRING is the argument. Return the corresponding processor enumeration if the CPU_STRING is recognized, otherwise report an error and return null. A similar function exists in GCC. 
Name: mips_cpu_info_from_isa; Comment: Return the canonical processor information for ISA (a member of the ISA_MIPS* enumeration). 
Name: mips_cfi_frame_initial_instructions; Comment: Standard calling conventions leave the CFA at SP on entry. 
Name: mips_convert_symbolic_attribute; Comment: Implement CONVERT_SYMBOLIC_ATTRIBUTE. Given a symbolic attribute NAME, return the proper integer value. Returns -1 if the attribute is not known. 
Name: mips_cfi_reloc_for_encoding; Comment: Returns the relocation type required for a particular CFI encoding. 
Name: mmix_set_geta_branch_offset; Comment: Fill in the offset-related part of GETA or Bcc. 
Name: mmix_set_jmp_offset; Comment: Fill in the offset-related part of JMP. 
Name: mmix_fill_nops; Comment: Fill in NOP:s for the expanded part of GETA/JMP/Bcc/PUSHJ. 
Name: mmix_current_location; Comment: See macro md_parse_name in tc-mmix.h. 
Name: get_operands; Comment: Get up to three operands, filling them into the exp array. General idea and code stolen from the tic80 port. 
Name: get_spec_regno; Comment: Get the value of a special register, or -1 if the name does not match one. NAME is a null-terminated string. 
Name: get_putget_operands; Comment: For GET and PUT, parse the register names "manually", so we don't use user labels. 
Name: md_parse_option; Comment: Handle MMIX-specific option. 
Name: md_show_usage; Comment: Display MMIX-specific help text. 
Name: mmix_discard_rest_of_line; Comment: Step to end of line, but don't step over the end of the line. 
Name: mmix_handle_rest_of_empty_line; Comment: Act as demand_empty_rest_of_line if we're in strict GNU syntax mode, otherwise just ignore the rest of the line (and skip the end-of-line delimiter). 
Name: mmix_md_begin; Comment: Initialize GAS MMIX specifics. 
Name: md_assemble; Comment: Assemble one insn in STR. 
Name: mmix_assemble_return_nonzero; Comment: For the benefit of insns that start with a digit, we assemble by way of tc_unrecognized_line too, through this function. 
Name: s_prefix; Comment: The PREFIX pseudo. 
Name: mmix_prefix_name; Comment: We implement prefixes by using the tc_canonicalize_symbol_name hook, and store each prefixed name on a (separate) obstack. This means that the name is on the "notes" obstack in non-prefixed form and on the mmix_sym_obstack in prefixed form, but currently it is not worth rewriting the whole GAS symbol handling to improve "hooking" to avoid that. (It might be worth a rewrite for other reasons, though). 
Name: mmix_greg_internal; Comment: The GREG pseudo. At LABEL, we have the name of a symbol that we want to make a register symbol, and which should be initialized with the value in the expression at INPUT_LINE_POINTER (defaulting to 0). Either and (perhaps less meaningful) both may be missing. LABEL must be persistent, perhaps allocated on an obstack. 
Name: s_greg; Comment: The ".greg label,expr" worker. 
Name: s_bspec; Comment: The "BSPEC expr" worker. 
Name: s_espec; Comment: The "ESPEC" worker. 
Name: mmix_s_local; Comment: The " .local expr" and " local expr" worker. We make a BFD_MMIX_LOCAL relocation against the current position against the expression. Implementing this by means of contents in a section lost. 
Name: md_estimate_size_before_relax; Comment: Set fragP->fr_var to the initial guess of the size of a relaxable insn and return it. Sizes of other instructions are not known. This function may be called multiple times. 
Name: md_convert_frag; Comment: Convert variable-sized frags into one or more fixups. 
Name: md_apply_fix; Comment: Applies the desired value to the specified location. Also sets up addends for RELA type relocations. Stolen from tc-mcore.c. Note that this function isn't called when linkrelax != 0. 
Name: cmp_greg_val_greg_symbol_fixes; Comment: A bsearch function for looking up a value against offsets for GREG definitions. 
Name: mmix_handle_mmixal; Comment: Do some reformatting of a line. FIXME: We could transform a mmixal line into traditional (GNU?) format, unless #NO_APP, and get rid of all ugly labels_without_colons etc. 
Name: mmix_fb_label; Comment: Give the value of an fb-label rewritten as in mmix_handle_mmixal, when parsing an expression. On valid calls, input_line_pointer points at a MAGIC_FB_BACKWARD_CHAR or MAGIC_FB_BACKWARD_CHAR, followed by an ascii digit for the label. We fill in the label as an expression. 
Name: mmix_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: mmix_adjust_symtab; Comment: Adjust the symbol table. We make reg_section relative to the real register section. 
Name: mmix_label_without_colon_this_line; Comment: This is the expansion of LABELS_WITHOUT_COLONS. We let md_start_line_hook tweak label_without_colon_this_line, and then this function returns the tweaked value, and sets it to 1 for the next line. FIXME: Very, very brittle. Not sure it works the way I thought at the time I first wrote this. 
Name: mmix_md_relax_frag; Comment: This is the expansion of md_relax_frag. We go through the ordinary relax table function except when the frag is for a GREG. Then we have to check whether there's another GREG by the same value that we can join with. 
Name: mmix_md_finish; Comment: Various things we punt until all input is seen. 
Name: cmp_greg_symbol_fixes; Comment: qsort function for mmix_symbol_gregs. 
Name: mmix_frob_file; Comment: Collect GREG definitions from mmix_gregs and hang them as lists sorted on increasing offsets onto each section symbol or undefined symbol. Also, remove the register convenience section so it doesn't get output as an ELF section. 
Name: mmix_parse_predefined_name; Comment: Provide an expression for a built-in name provided when-used. Either a symbol that is a handler; living in 0x10[1..8] and having name [DVWIOUZX]_Handler, or a mmixal built-in symbol. If the name isn't a built-in name and parsed into *EXPP, return zero. 
Name: mmix_md_elf_section_change_hook; Comment: Just check that we don't have a BSPEC/ESPEC pair active when changing sections "normally", and get knowledge about alignment from the new section. 
Name: s_loc; Comment: The LOC worker. This is like s_org, but we have to support changing section too. 
Name: mmix_byte; Comment: The BYTE worker. We have to support sequences of mixed "strings", numbers and other constant "first-pass" reducible expressions separated by comma. 
Name: mmix_cons; Comment: Like cons_worker, but we have to ignore "naked comments", not barf on them. Implements WYDE, TETRA and OCTA. We're a little bit more lenient than mmix_byte but FIXME: they should eventually merge. 
Name: mmix_md_do_align; Comment: The md_do_align worker. At present, we just record an alignment to nullify the automatic alignment we do for WYDE, TETRA and OCTA, as gcc does not use the unaligned macros when attribute packed is used. Arguably this is a GCC bug. 
Name: reg_name_search; Comment: reg_name_search does a binary search of the given register table to see if "name" is a valid register name. Returns the register number from the array on success, or -1 on failure. 
Name: data_register_name; Comment: Summary of register_name(). in: Input_line_pointer points to 1st char of operand. out: An expressionS. _The operand may have been a register: in this case, X_op == O_register, _X_add_number is set to the register number, and truth is returned. _Input_line_pointer->(next non-blank) char after operand, or is in _its original state. 
Name: address_register_name; Comment: Summary of register_name(). in: Input_line_pointer points to 1st char of operand. out: An expressionS. _The operand may have been a register: in this case, X_op == O_register, _X_add_number is set to the register number, and truth is returned. _Input_line_pointer->(next non-blank) char after operand, or is in _its original state. 
Name: other_register_name; Comment: Summary of register_name(). in: Input_line_pointer points to 1st char of operand. out: An expressionS. _The operand may have been a register: in this case, X_op == O_register, _X_add_number is set to the register number, and truth is returned. _Input_line_pointer->(next non-blank) char after operand, or is in _its original state. 
Name: tc_gen_reloc; Comment: If while processing a fixup, a reloc really needs to be created Then it is done here. 
Name: mn10200_insert_operand; Comment: Insert an operand value into an instruction. 
Name: reg_name_search; Comment: Perform a binary search of the given register table REGS to see if NAME is a valid register name. Returns the register number from the array on success, or -1 on failure. 
Name: get_register_name; Comment: Looks at the current position in the input line to see if it is the name of a register in TABLE. If it is, then the name is converted into an expression returned in EXPRESSIONP (with X_op set to O_register and X_add_number set to the register number), the input pointer is left pointing at the first non-blank character after the name and the function returns TRUE. Otherwise the input pointer is left alone and the function returns FALSE. 
Name: mn10300_insert_operand; Comment: Insert an operand value into an instruction. 
Name: mn10300_fix_adjustable; Comment: Return zero if the fixup in fixp should be left alone and not adjusted. 
Name: mn10300_allow_local_subtract; Comment: Returns FALSE if there is some mn10300 specific reason why the subtraction of two same-section symbols cannot be computed by the assembler. 
Name: mn10300_handle_align; Comment: When relaxing, we need to output a reloc for any .align directive that requests alignment to a two byte boundary or larger. 
Name: md_pcrel_from; Comment: Decide from what point a pc-relative relocation is relative to, relative to the pc-relative fixup. Er, relatively speaking. 
Name: mt_force_relocation; Comment: See whether we need to force a relocation into the output file. 
Name: nds32_after_parse_args; Comment: md_after_parse_args () GAS will call md_after_parse_args whenever it is defined. This function checks any conflicting options specified. 
Name: md_show_usage; Comment: This function is called when printing usage message (--help). 
Name: parse_expression; Comment: This function reads an expression from a C string and returns a pointer past the end of the expression. 
Name: do_pseudo_pushpop_stack; Comment: pv == 0, parsing "push.s" pseudo instruction operands. pv != 0, parsing "pop.s" pseudo instruction operands. 
Name: nds32_parse_arch; Comment: This function will be invoked from function `nds32_after_parse_args'. Thus, if the value of option has been set, keep the value the way it is. 
Name: nds32_parse_baseline; Comment: This function parses "baseline" specified. 
Name: nds32_parse_freg; Comment: This function parses "fpu-freg" specified. 
Name: nds32_parse_abi; Comment: This function parse "abi=" specified. 
Name: nds32_all_ext; Comment: This function turn on all extensions and instructions support. 
Name: nds32_parse_option; Comment: GAS will call md_parse_option whenever getopt returns an unrecognized code, presumably indicating a special code value which appears in md_longopts. This function should return non-zero if it handled the option and zero otherwise. There is no need to print a message about an option not being recognized. This will be handled by the generic code. 
Name: nds32_check_label; Comment: tc_check_label 
Name: trigger_16bit; Comment: These functions toggles the generation of 16-bit. First encounter signals the beginning of not generating 16-bit instructions and next encounter signals the restoring back to default behavior. 
Name: do_nds32_seg; Comment: The following code is borrowed from v850_seg. Revise this is needed. 
Name: add_mapping_symbol_for_align; Comment: Last label for alignment. 
Name: nds32_adjust_label; Comment: This code is referred from D30V for adjust label to be with pending alignment. For example, LBYTE: .byte_0x12 LHALF: .half_0x12 LWORD: .word_0x12 Without this, the above label will not attach to incoming data. 
Name: nds32_aligned_float_cons; Comment: `.double' directive. 
Name: nds32_relax_relocs; Comment: Relax directive to set relocation R_NDS32_RELAX_ENTRY value. 
Name: nds32_set_hint_func_args; Comment: Record which arguments register($r0 ~ $r5) is not used in callee. bit[i] for $ri 
Name: nds32_omit_fp_begin; Comment: Insert relocations to mark the begin and end of a fp-omitted function, for further relaxation use. bit[i] for $ri 
Name: nds32_relax_hint; Comment: Insert a relax hint. 
Name: nds32_vec_size; Comment: Decide the size of vector entries, only accepts 4 or 16 now. 
Name: nds32_flag; Comment: The behavior of ".flag" directive varies depending on the target. In nds32 target, we use it to recognize whether this assembly content is generated by compiler. Other features can also be added in this function in the future. 
Name: nds32_asm_parse_operand; Comment: This is the callback for nds32-asm.c to parse operands. 
Name: md_begin; Comment: GAS will call this function at the start of the assembly, after the command line arguments have been parsed and all the machine independent initializations have been completed. 
Name: nds32_handle_align; Comment: HANDLE_ALIGN in write.c. 
Name: nds32_flush_pending_output; Comment: md_flush_pending_output 
Name: nds32_start_label; Comment: TC_START_LABEL 
Name: nds32_target_format; Comment: TARGET_FORMAT 
Name: nds32_elf_save_pseudo_pattern; Comment: Save pseudo instruction relocation list. 
Name: nds32_elf_record_fixup_exp; Comment: Check X_md to transform relocation. 
Name: nds32_elf_build_relax_relation; Comment: Build instruction pattern to relax. There are two type group pattern including pseudo instruction and relax hint. 
Name: nds32_elf_sethi_range; Comment: Since sethi loadstore relocation has to using next instruction to determine elimination itself or not, we have to return the next instruction range. 
Name: nds32_find_reloc_table; Comment: Find the relaxation pattern according to instructions. 
Name: nds32_elf_append_relax_relocs; Comment: Append relax relocation for link time relaxing. 
Name: nds32_check_insn_available; Comment: Check instruction if it can be used for the baseline. 
Name: md_assemble; Comment: Stub of machine dependent. 
Name: nds32_macro_start; Comment: md_macro_start 
Name: nds32_macro_info; Comment: md_macro_info 
Name: nds32_macro_end; Comment: md_macro_end 
Name: md_operand; Comment: GAS will call this function with one argument, an expressionS pointer, for any expression that can not be recognized. When the function is called, input_line_pointer will point to the start of the expression. 
Name: md_section_align; Comment: GAS will call this function for each section at the end of the assembly, to permit the CPU back end to adjust the alignment of a section. The function must take two arguments, a segT for the section and a valueT for the size of the section, and return a valueT for the rounded size. 
Name: md_undefined_symbol; Comment: GAS will call this function when a symbol table lookup fails, before it creates a new symbol. Typically this would be used to supply symbols whose name or value changes dynamically, possibly in a context sensitive way. Predefined symbols with fixed values, such as register names or condition codes, are typically entered directly into the symbol table when md_begin is called. One argument is passed, a charfor the symbol. 
Name: nds32_elf_get_set_cond; Comment: Set instruction register mask. 
Name: nds32_adjust_relaxable_frag; Comment: Adjust relaxable frag till current frag. 
Name: invalid_prev_frag; Comment: Check the prev_frag is legal. 
Name: nds32_relax_frag; Comment: md_relax_frag 
Name: md_estimate_size_before_relax; Comment: This function returns an initial guess of the length by which a fragment must grow to hold a branch to reach its destination. Also updates fr_type/fr_subtype as necessary. It is called just before doing relaxation. Any symbol that is now undefined will not become defined. The guess for fr_var is ACTUALLY the growth beyond fr_fix. Whatever we do to grow fr_fix or fr_var contributes to our returned value. Although it may not be explicit in the frag, pretend fr_var starts with a 0 value. 
Name: md_convert_frag; Comment: GAS will call this for each rs_machine_dependent fragment. The instruction is completed using the data from the relaxation pass. It may also create any necessary relocations. *FRAGP has been relaxed to its final size, and now needs to have the bytes inside it modified to conform to the new size. It is called after relaxation is finished. fragP->fr_type == rs_machine_dependent. fragP->fr_subtype is the subtype of what the address relaxed to. 
Name: nds32_frob_file_before_fix; Comment: tc_frob_file_before_fix 
Name: nds32_force_relocation; Comment: TC_FORCE_RELOCATION 
Name: nds32_validate_fix_sub; Comment: TC_VALIDATE_FIX_SUB 
Name: md_atof; Comment: This function is called to convert an ASCII string into a floating point value in format used by the CPU. 
Name: nds32_elf_section_change_hook; Comment: md_elf_section_change_hook 
Name: nds32_cleanup; Comment: md_cleanup 
Name: nds32_insert_leb128_fixes; Comment: This function is used to scan leb128 subtraction expressions, and insert fixups for them. e.g., .leb128 .L1 - .L0 These expressions are heavily used in debug information or exception tables. Because relaxation will change code size, we must resolve them in link time. 
Name: nds32_elf_analysis_relax_hint; Comment: Analysis relax hint and insert suitable relocation pattern. 
Name: nds32_allow_local_subtract; Comment: Implement md_allow_local_subtract. 
Name: nds32_post_relax_hook; Comment: md_post_relax_hook () Insert relax entry relocation into sections. 
Name: nds32_fix_adjustable; Comment: tc_fix_adjustable () Return whether this symbol (fixup) can be replaced with section symbols. 
Name: elf_nds32_final_processing; Comment: elf_tc_final_processing 
Name: nds32_apply_fix; Comment: Implement md_apply_fix. Apply the fix-up or transform the fix-up for later relocation generation. 
Name: tc_gen_reloc; Comment: Implement tc_gen_reloc. Generate ELF relocation for a fix-up. 
Name: nds32_parse_name; Comment: Implement md_parse_name. 
Name: tc_nds32_regname_to_dw2regnum; Comment: Implement tc_regname_to_dw2regnum. 
Name: md_chars_to_number; Comment: Function md_chars_to_number takes the sequence of bytes in buf and returns the corresponding value in an int. n must be 1, 2 or 4. 
Name: md_number_to_chars; Comment: This function turns a C long int, short int or char into the series of bytes that represent the number on the target machine. 
Name: nios2_special_relocation_p; Comment: Return true if STR is prefixed with a special relocation operator. 
Name: nios2_align; Comment: Handles all machine-dependent alignment needs. 
Name: nios2_check_assembly; Comment: This function is used to in self-checking mode to check the assembled instruction opcode should be the assembled opcode, and exp_opcode the parsed string representing the expected opcode. 
Name: s_nios2_align; Comment: Handle the .align pseudo-op. This aligns to a power of two. It also adjusts any current instruction label. We treat this the same way the MIPS port does: .align 0 turns off auto alignment. 
Name: s_nios2_text; Comment: Handle the .text pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_nios2_data; Comment: Handle the .data pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_nios2_section; Comment: Handle the .section pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_nios2_ucons; Comment: Explicitly unaligned cons. 
Name: s_nios2_sdata; Comment: Handle the .sdata directive. 
Name: s_nios2_set; Comment: .set sets assembler options eg noat/at and is also used to set symbol values (.equ, .equiv ). 
Name: nios2_relax_subtype_size; Comment: Determine how many bytes are required to represent the sequence indicated by SUBTYPE. 
Name: md_estimate_size_before_relax; Comment: Estimate size of fragp before relaxation. This could also examine the offset in fragp and adjust fragp->fr_subtype, but we will do that in nios2_relax_frag anyway. 
Name: nios2_relax_frag; Comment: Implement md_relax_frag, returning the change in size of the frag. 
Name: md_convert_frag; Comment: Complete fragp using the data from the relaxation pass. 
Name: nios2_check_overflow; Comment: Check a fixup for overflow. 
Name: nios2_diagnose_overflow; Comment: Emit diagnostic for fixup overflow. 
Name: bad_opcode; Comment: General internal error routine. 
Name: nios2_insn_reloc_new; Comment: Creates a new nios2_insn_relocS and returns a pointer to it. 
Name: nios2_parse_reg; Comment: Look up a register name and validate it for the given regtype. Return the register mapping or NULL on failure. 
Name: nios2_parse_base_register; Comment: This function parses the base register and options used by the ldwm/stwm instructions. Returns the base register and sets the option arguments accordingly. On failure, returns NULL. 
Name: nios2_assemble_expression; Comment: The various nios2_assemble_* functions call this function to generate an expression from a string representing an expression. It then tries to evaluate the expression, and if it can, returns its value. If not, it creates a new nios2_insn_relocS and stores the expression and reloc_type for future use. 
Name: nios2_assemble_reg3; Comment: Encode a 3-bit register number, giving an error if this is not possible. 
Name: nios2_assemble_arg_c; Comment: Control register index. 
Name: nios2_assemble_arg_d; Comment: Destination register. 
Name: nios2_assemble_arg_s; Comment: Source register 1. 
Name: nios2_assemble_arg_t; Comment: Source register 2. 
Name: nios2_assemble_arg_D; Comment: Destination register w/3-bit encoding. 
Name: nios2_assemble_arg_S; Comment: Source register w/3-bit encoding. 
Name: nios2_assemble_arg_T; Comment: Source register 2 w/3-bit encoding. 
Name: nios2_assemble_arg_i; Comment: 16-bit signed immediate. 
Name: nios2_assemble_arg_I; Comment: 12-bit signed immediate. 
Name: nios2_assemble_arg_u; Comment: 16-bit unsigned immediate. 
Name: nios2_assemble_arg_U; Comment: 7-bit unsigned immediate with 2-bit shift. 
Name: nios2_assemble_arg_V; Comment: 5-bit unsigned immediate with 2-bit shift. 
Name: nios2_assemble_arg_W; Comment: 4-bit unsigned immediate with 2-bit shift. 
Name: nios2_assemble_arg_X; Comment: 4-bit unsigned immediate with 1-bit shift. 
Name: nios2_assemble_arg_Y; Comment: 4-bit unsigned immediate without shift. 
Name: nios2_assemble_arg_o; Comment: 16-bit signed immediate address offset. 
Name: nios2_assemble_arg_O; Comment: 10-bit signed address offset with 1-bit shift. 
Name: nios2_assemble_arg_P; Comment: 7-bit signed address offset with 1-bit shift. 
Name: nios2_assemble_arg_j; Comment: 5-bit unsigned immediate. 
Name: nios2_assemble_arg_k; Comment: Second 5-bit unsigned immediate field. 
Name: nios2_assemble_arg_l; Comment: 8-bit unsigned immediate. 
Name: nios2_assemble_arg_m; Comment: 26-bit unsigned immediate. 
Name: nios2_assemble_arg_M; Comment: 6-bit unsigned immediate with no shifting. 
Name: nios2_assemble_arg_N; Comment: 6-bit unsigned immediate with 2-bit shift. 
Name: nios2_assemble_arg_e; Comment: Encoded enumeration for addi.n/subi.n. 
Name: nios2_assemble_arg_f; Comment: Encoded enumeration for slli.n/srli.n. 
Name: nios2_assemble_arg_g; Comment: Encoded enumeration for andi.n. 
Name: nios2_assemble_arg_h; Comment: Encoded enumeration for movi.n. 
Name: nios2_assemble_arg_R; Comment: Encoded REGMASK for ldwm/stwm or push.n/pop.n. 
Name: nios2_assemble_arg_B; Comment: Base register for ldwm/stwm. 
Name: nios2_consume_arg; Comment: The function consume_arg takes a pointer into a string of instruction tokens (args) and a pointer into a string representing the expected sequence of tokens and separators. It checks whether the first argument in argstr is of the expected type, throwing an error if it is not, and returns the pointer argstr. 
Name: nios2_consume_separator; Comment: The function consume_separator takes a pointer into a string of instruction tokens (args) and a pointer into a string representing the expected sequence of tokens and separators. It finds the first instance of the character pointed to by separator in argstr, and returns a pointer to the next element of argstr, which is the following token in the sequence. 
Name: nios2_parse_args; Comment: The principal argument parsing function which takes a string argstr representing the instruction arguments for insn, and extracts the argument tokens matching parsestr into parsed_args. 
Name: nios2_modify_arg; Comment: Append the string modifier to the string contained in the argument at parsed_args[ndx]. 
Name: nios2_negate_arg; Comment: Modify parsed_args[ndx] by negating that argument. 
Name: nios2_swap_args; Comment: The function nios2_swap_args swaps the pointers at indices index_1 and index_2 in the array parsed_args[] - this is used for operand swapping for comparison operations. 
Name: nios2_append_arg; Comment: This function appends the string appnd to the array of strings in parsed_args num times starting at index start in the array. 
Name: nios2_insert_arg; Comment: This function inserts the string insert num times in the array parsed_args, starting at the index start. 
Name: nios2_free_arg; Comment: Cleanup function to free malloc'ed arg strings. 
Name: nios2_translate_pseudo_insn; Comment: This function swaps the pseudo-op for a real op. 
Name: nios2_cleanup_pseudo_insn; Comment: Invoke the cleanup handler for pseudo-insn ps_insn on insn. 
Name: output_insn; Comment: Output a normal instruction. 
Name: output_ubranch; Comment: Output an unconditional branch. 
Name: output_cbranch; Comment: Output a conditional branch. 
Name: output_call; Comment: Output a call sequence. Since calls are not pc-relative for NIOS2, but are page-relative, we cannot tell at any stage in assembly whether a call will be out of range since a section may be linked at any address. So if we are relaxing, we convert all call instructions to long call sequences, and rely on the linker to relax them back to short calls. 
Name: output_movia; Comment: Output a movhi/addi pair for the movia pseudo-op. 
Name: nios2_use_arch; Comment: Update the selected architecture based on ARCH, giving an error if ARCH is an invalid value. 
Name: md_parse_option; Comment: The following functions are called by machine-independent parts of the assembler. 
Name: nios2_target_format; Comment: Implement TARGET_FORMAT. We can choose to be big-endian or little-endian at runtime based on a switch. 
Name: md_show_usage; Comment: Machine-dependent usage message. 
Name: md_assemble; Comment: Assembles a single line of Nios II assembly language. 
Name: md_section_align; Comment: Round up section size. 
Name: nios2_force_relocation; Comment: Implement TC_FORCE_RELOCATION. 
Name: nios2_fix_adjustable; Comment: Implement tc_fix_adjustable. 
Name: nios2_frob_symbol; Comment: Implement tc_frob_symbol. This is called in adjust_reloc_syms; it is used to remove *ABS* references from the symbol table. 
Name: tc_gen_reloc; Comment: The function tc_gen_reloc creates a relocation structure for the fixup fixp, and returns a pointer to it. This structure is passed to bfd_install_relocation so that it can be written to the object file for linking. 
Name: md_end; Comment: Called just before the assembler exits. 
Name: nios2_frob_label; Comment: Implement tc_frob_label. 
Name: nios2_cons_align; Comment: Implement md_cons_align. 
Name: nios2_elf_section_letter; Comment: This is from the Alpha code tc-alpha.c. 
Name: nios2_elf_section_flags; Comment: This is from the Alpha code tc-alpha.c. 
Name: nios2_cons; Comment: Implement TC_PARSE_CONS_EXPRESSION to handle %tls_ldo(...) and %gotoff(...). 
Name: nios2_handle_align; Comment: Implement HANDLE_ALIGN. 
Name: nios2_regname_to_dw2regnum; Comment: Implement tc_regname_to_dw2regnum, to convert REGNAME to a DWARF-2 register number. 
Name: nios2_frame_initial_instructions; Comment: Implement tc_cfi_frame_initial_instructions, to initialize the DWARF-2 unwind information for this procedure. 
Name: nios2_elf_final_processing; Comment: Some special processing for a Nios II ELF file. 
Name: addr_mode; Comment: Parse a general operand into an addressing mode struct In: pointer at operand in ascii form pointer at addr_mode struct for result the level of recursion. (always 0 or 1) Out: data in addr_mode struct. 
Name: get_addr_mode; Comment: ptr points at string addr_modeP points at struct with result This routine calls addr_mode to determine the general addr.mode of the operand. When this is ready it parses the displacements for size specifying suffixes and determines size of immediate mode via ns32k-opcode. Also builds index bytes if needed. 
Name: encode_operand; Comment: Convert operands to iif-format and adds bitfields to the opcode. Operands are parsed in such an order that the opcode is updated from its most significant bit, that is when the operand need to alter the opcode. Be careful not to put to objects in the same iif-slot. 
Name: parse; Comment: Build iif of one assembly text line. 
Name: reloc; Comment: This functionality should really be in the bfd library. 
Name: md_number_to_chars; Comment: Convert number to chars in correct order. 
Name: md_number_to_disp; Comment: This is a variant of md_numbers_to_chars. The reason for its existence is the fact that ns32k uses Huffman coded displacements. This implies that the bit order is reversed in displacements and that they are prefixed with a size-tag. binary: msb -> lsb 0xxxxxxx____byte 10xxxxxx xxxxxxxx___word 11xxxxxx xxxxxxxx xxxxxxxx xxxxxxxx_double word This must be taken care of and we do it here! 
Name: md_number_to_field; Comment: Insert bitfield described by field_ptr and val at buf This routine is written for modification of the first 4 bytes pointed to by buf, to yield speed. The ifdef stuff is for selection between a ns32k-dependent routine and a general version. (My advice: use the general version!). 
Name: convert_iif; Comment: GAS for the ns32k has a problem. PC relative displacements are relative to the address of the opcode, not the address of the operand. We used to keep track of the offset between the operand and the opcode in pcrel_adjust for each frag and each fix. However, we get into trouble where there are two or more pc-relative operands and the size of the first one can't be determined. Then in the relax phase, the size of the first operand will change and pcrel_adjust will no longer be correct. The current solution is keep a pointer to the frag with the opcode in it and the offset in that frag for each frag and each fix. Then, when needed, we can always figure out how far it is between the opcode and the pcrel object. See also md_pcrel_adjust and md_fix_pcrel_adjust. For objects not part of an instruction, the pointer to the opcode frag is always zero. 
Name: md_atof; Comment: Turn the string pointed to by litP into a floating point constant of type TYPE, and emit the appropriate bytes. The number of LITTLENUMS emitted is stored in *SIZEP. An error message is returned, or NULL on OK. 
Name: md_apply_fix; Comment: Apply a fixS (fixup of an instruction or data that we didn't have enough info to complete immediately) to the data in a frag. On the ns32k, everything is in a different format, so we have broken out separate functions for each kind of thing we could be fixing. They all get called from here. 
Name: md_convert_frag; Comment: Convert a relaxed displacement to ditto in final output. 
Name: md_estimate_size_before_relax; Comment: This function returns the estimated size a variable object will occupy, one can say that we tries to guess the size of the objects before we actually know it. 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? On the ns32k, they're relative to the start of the instruction. 
Name: md_parse_option; Comment: default 
Name: or1k_cfi_frame_initial_instructions; Comment: Standard calling conventions leave the CFA at SP on entry. 
Name: md_apply_fix; Comment: Fix up some data or instructions after we find out the value of a symbol that they reference. Knows about order of bytes in address. 
Name: md_parse_option; Comment: Invocation line includes a switch not recognized by the base assembler. See if it's a processor-specific option. 
Name: pj_cons_fix_new_pj; Comment: This is called by emit_expr via TC_CONS_FIX_NEW when creating a reloc for a cons. We could use the definition there, except that we want to handle magic pending reloc expressions specially. 
Name: c_to_r; Comment: Turn a reloc description character from the pj-opc.h table into code which BFD can handle. 
Name: ipush_code; Comment: Handler for the ipush fake opcode, turns ipush <foo> into sipush lo16<foo>, sethi hi16<foo>. 
Name: fake_opcode; Comment: Insert names into the opcode table which are really mini macros, not opcodes. The fakeness is indicated with an opcode of -1. 
Name: alias; Comment: Enter another entry into the opcode hash table so the same opcode can have another name. 
Name: md_number_to_chars; Comment: Put number into target byte order. Always put values in an executable section into big endian order. 
Name: md_operand; Comment: Called for a non-symbol, non-number operand. Handles %reg. 
Name: ppc_parse_name; Comment: This function is called for each symbol seen in an expression. It handles the special parsing which PowerPC assemblers are supposed to use for condition codes, and recognises other registers when -mregnames. 
Name: ppc_optimize_expr; Comment: Propagate X_md and check register expressions. This is to support condition codes like 4*cr5+eq. 
Name: ppc_xcoff_section_is_initialized; Comment: Return true if the ppc_xcoff_section structure is already initialized. 
Name: ppc_init_xcoff_section; Comment: Initialize a ppc_xcoff_section. Dummy symbols are used to ensure the position of .text over .data and .tdata. Moreover, they allow all algorithms here to be sure that csects isn't NULL. These symbols won't be output. 
Name: ppc_set_cpu; Comment: Set ppc_cpu if it is not already set. 
Name: ppc_arch; Comment: Figure out the BFD architecture to use. This function and ppc_mach are called well before md_begin, when the output file is opened. 
Name: insn_validate; Comment: Validate one entry in powerpc_opcodes[] or vle_opcodes[]. Return TRUE if there's a problem, otherwise FALSE. 
Name: ppc_setup_opcodes; Comment: Insert opcodes into hash tables. Called at startup and for .machine pseudo. 
Name: md_begin; Comment: This function is called when the assembler starts up. It is called after the options have been parsed and the output file has been opened. 
Name: ppc_insert_operand; Comment: Insert an operand value into an instruction. 
Name: ppc_elf_suffix; Comment: Parse @got, etc. and return the desired relocation. 
Name: ppc_elf_parse_cons; Comment: Support @got, etc. on constants emitted via .short, .int etc. 
Name: ppc_elf_cons_fix_check; Comment: Warn when emitting data to code sections, unless we are emitting a relocation that ld --ppc476-workaround uses to recognise data *and* there was an unconditional branch prior to the data. 
Name: ppc_elf_rdata; Comment: Solaris pseduo op to change to the .rodata section. 
Name: ppc_elf_lcomm; Comment: Pseudo op to make file scope bss items. 
Name: ppc_elf_localentry; Comment: Pseudo op to set symbol local entry point. 
Name: ppc_elf_abiversion; Comment: Pseudo op to set ABI version. 
Name: ppc_elf_gnu_attribute; Comment: Parse a .gnu_attribute directive. 
Name: ppc_elf_md_finish; Comment: Set ABI version in output file. 
Name: ppc_elf_validate_fix; Comment: Validate any relocations emitted for -mrelocatable, possibly adding fixups for word relocations in writable segments, so we can adjust them at runtime. 
Name: ppc_frob_file_before_adjust; Comment: Prevent elf_frob_file_before_adjust removing a weak undefined function descriptor sym if the corresponding code sym is used. 
Name: ppc_elf_adjust_symtab; Comment: .TOC. used in an opd entry as .TOC.@tocbase doesn't need to be emitted. Other uses of .TOC. will cause the symbol to be marked with BSF_KEEP in md_apply_fix. 
Name: ppc_xcoff_suffix; Comment: Parse XCOFF relocations. 
Name: ppc_xcoff_fixup_addis; Comment: Restore XCOFF addis instruction to ELF format. AIX often generates addis instructions using "addis RT,D(RA)" format instead of the ELF "addis RT,RA,SI" one. On entry RT_E is at the comma after RT, D_E is at the open parenthesis after D, and RA_E is at the close parenthesis after RA. 
Name: ppc_xcoff_parse_cons; Comment: Support @ie, etc. on constants emitted via .short, .int etc. 
Name: ppc_is_toc_sym; Comment: See whether a symbol is in the TOC section. 
Name: fixup_size; Comment: Return the field size operated on by RELOC, and whether it is pc-relative in PC_RELATIVE. 
Name: parse_tls_arg; Comment: If we have parsed a call to __tls_get_addr, parse an argument like (gd0@tlsgd). *STR is the leading parenthesis on entry. If an arg is successfully parsed, *STR is updated past the trailing parenthesis and trailing white space, and *TLS_FIX contains the reloc and arg expression. 
Name: md_assemble; Comment: This routine is called for each instruction to be assembled. 
Name: ppc_section_type; Comment: For ELF, add support for SHT_ORDERED. 
Name: ppc_byte; Comment: The .byte pseudo-op. This is similar to the normal .byte pseudo-op, but it can also take a single ASCII string. 
Name: ppc_xcoff_get_visibility; Comment: Retrieve the visiblity input for pseudo-ops having ones. 
Name: ppc_GNU_visibility; Comment: Retrieve visiblity using GNU syntax. 
Name: ppc_comm; Comment: The .comm and .lcomm pseudo-ops for XCOFF. XCOFF puts common symbols in the .bss segment as though they were local common symbols, and uses a different smclas. The native Aix 4.3.3 assembler aligns .comm and .lcomm to 4 bytes. Symbols having a XMC_UL storage class are uninialized thread-local data. 
Name: ppc_csect; Comment: The .csect pseudo-op. This switches us into a different subsegment. The first argument is a symbol whose value is the start of the .csect. In COFF, csect symbols get special aux entries defined by the x_csect field of union internal_auxent. The optional second argument is the alignment (the default is 2). 
Name: ppc_change_csect; Comment: Change to a different csect. 
Name: ppc_dwsect; Comment: The .dwsect pseudo-op. Defines a DWARF section. Syntax is: .dwsect flag [, opt-label ] 
Name: ppc_section; Comment: This function handles the .text and .data pseudo-ops. These pseudo-ops aren't really used by XCOFF; we implement them for the convenience of people who aren't used to XCOFF. 
Name: ppc_named_section; Comment: This function handles the .section pseudo-op. This is mostly to give an error, since XCOFF only supports .text, .data and .bss, but we do permit the user to name the text or data section. 
Name: ppc_extern; Comment: The .extern pseudo-op. We create an undefined symbol. 
Name: ppc_globl; Comment: XCOFF semantic for .globl says that the second parameter is the symbol visibility. 
Name: ppc_weak; Comment: XCOFF semantic for .weak says that the second parameter is the symbol visibility. 
Name: ppc_lglobl; Comment: The .lglobl pseudo-op. Keep the symbol in the symbol table. 
Name: ppc_ref; Comment: The .ref pseudo-op. It takes a list of symbol names and inserts R_REF relocations at the beginning of the current csect. (In principle, there's no reason why the relocations _have_ to be at the beginning. Anywhere in the csect would do. However, inserting at the beginning is what the native assembler does, and it helps to deal with cases where the .ref statements follow the section contents.) ??? .refs don't work for empty .csects. However, the native assembler doesn't report an error in this case, and neither yet do we. 
Name: ppc_rename; Comment: The .rename pseudo-op. The RS/6000 assembler can rename symbols, although I don't know why it bothers. 
Name: ppc_stabx; Comment: The .stabx pseudo-op. This is similar to a normal .stabs pseudo-op, but slightly different. A sample is .stabx "main:F-1",.main,142,0 The first argument is the symbol name to create. The second is the value, and the third is the storage class. The fourth seems to be always zero, and I am assuming it is the type. 
Name: ppc_file; Comment: The .file pseudo-op. On XCOFF, .file can have several parameters which are being added to the symbol table to provide additional information. 
Name: ppc_function; Comment: The .function pseudo-op. This takes several arguments. The first argument seems to be the external name of the symbol. The second argument seems to be the label for the start of the function. gcc uses the same name for both. I have no idea what the third and fourth arguments are meant to be. The optional fifth argument is an expression for the size of the function. In COFF this symbol gets an aux entry like that used for a csect. 
Name: ppc_ef; Comment: The .ef pseudo-op. This is just like a COFF C_FCN symbol named ".ef", except that the line number is absolute, not relative to the most recent ".bf" symbol. 
Name: ppc_biei; Comment: The .bi and .ei pseudo-ops. These take a string argument and generates a C_BINCL or C_EINCL symbol, which goes at the start of the symbol list. The value of .bi will be know when the next .bf is encountered. 
Name: ppc_bs; Comment: The .bs pseudo-op. This generates a C_BSTAT symbol named ".bs". There is one argument, which is a csect symbol. The value of the .bs symbol is the index of this csect symbol. 
Name: ppc_es; Comment: The .es pseudo-op. Generate a C_ESTART symbol named .es. 
Name: ppc_bb; Comment: The .bb pseudo-op. Generate a C_BLOCK symbol named .bb, with a line number. 
Name: ppc_eb; Comment: The .eb pseudo-op. Generate a C_BLOCK symbol named .eb, with a line number. 
Name: ppc_bc; Comment: The .bc pseudo-op. This just creates a C_BCOMM symbol with a specified name. 
Name: ppc_ec; Comment: The .ec pseudo-op. This just creates a C_ECOMM symbol. 
Name: ppc_toc; Comment: The .toc pseudo-op. Switch to the .toc subsegment. 
Name: ppc_xcoff_cons; Comment: The AIX assembler automatically aligns the operands of a .long or .short pseudo-op, and we want to be compatible. 
Name: ppc_tc; Comment: The .tc pseudo-op. This is used when generating either XCOFF or ELF. This takes two or more arguments. When generating XCOFF output, the first argument is the name to give to this location in the toc; this will be a symbol with class TC. The rest of the arguments are N-byte values to actually put at this location in the TOC; often there is just one more argument, a relocatable symbol reference. The size of the value to store depends on target word size. A 32-bit target uses 4-byte values, a 64-bit target uses 8-byte values. When not generating XCOFF output, the arguments are the same, but the first argument is simply ignored. 
Name: ppc_machine; Comment: Pseudo-op .machine. 
Name: ppc_canonicalize_symbol_name; Comment: Canonicalize the symbol name. We use the to force the suffix, if any, to use square brackets, and to be in upper case. 
Name: ppc_symbol_new_hook; Comment: Set the class of a symbol based on the suffix, if any. This is called whenever a new symbol is created. 
Name: ppc_frob_symbol; Comment: Change the name of a symbol just before writing it out. Set the real name if the .rename pseudo-op was used. Otherwise, remove any class suffix. Return 1 if the symbol should not be included in the symbol table. 
Name: ppc_adjust_symtab; Comment: Adjust the symbol table. 
Name: ppc_frob_section; Comment: Set the VMA for a section. This is called on all the sections in turn. 
Name: md_section_align; Comment: Align a section (I don't know why this is machine dependent). 
Name: md_estimate_size_before_relax; Comment: We don't have any form of relaxing. 
Name: md_convert_frag; Comment: Convert a machine dependent frag. We never generate these. 
Name: ppc_get_csect_to_adjust; Comment: Return the surrending csect for sym when possible. 
Name: ppc_fix_adjustable; Comment: This is called to see whether a fixup should be adjusted to use a section symbol. We take the opportunity to change a fixup against a symbol in the TOC subsegment into a reloc against the corresponding .tc symbol. 
Name: ppc_force_relocation; Comment: A reloc from one csect to another must be kept. The assembler will, of course, keep relocs between sections, and it will keep absolute relocs, but we need to force it to keep PC relative relocs between two csects in the same section. 
Name: ppc_force_relocation; Comment: If this function returns non-zero, it guarantees that a relocation will be emitted for a fixup. 
Name: md_apply_fix; Comment: Apply a fixup to the object code. This is called for all the fixups we generated by the calls to fix_new_exp, above. 
Name: tc_gen_reloc; Comment: Generate a reloc for a fixup. 
Name: md_chars_to_number; Comment: Function md_chars_to_number takes the sequence of bytes in buf and returns the corresponding value in an int. n must be 1, 2, 4 or 8. 
Name: pru_align; Comment: Handles all machine-dependent alignment needs. 
Name: pru_check_assembly; Comment: This function is used to in self-checking mode to check the assembled instruction. OPCODE should be the assembled opcode, and exp_opcode the parsed string representing the expected opcode. 
Name: s_pru_align; Comment: Handle the .align pseudo-op. This aligns to a power of two. It also adjusts any current instruction label. We treat this the same way the MIPS port does: .align 0 turns off auto alignment. 
Name: s_pru_text; Comment: Handle the .text pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_pru_data; Comment: Handle the .data pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_pru_section; Comment: Handle the .section pseudo-op. This is like the usual one, but it clears the saved last label and resets known alignment. 
Name: s_pru_ucons; Comment: Explicitly unaligned cons. 
Name: s_pru_set; Comment: .set sets assembler options. 
Name: pru_validate_fix_sub; Comment: Does whatever the xtensa port does. 
Name: pru_force_relocation; Comment: If linkrelax is turned on, and the symbol to relocate against is in a relaxable segment, don't compute the value - generate a relocation instead. 
Name: pru_check_overflow; Comment: Check a fixup for overflow. 
Name: pru_diagnose_overflow; Comment: Emit diagnostic for fixup overflow. 
Name: pru_insn_reloc_new; Comment: Creates a new pru_insn_relocS and returns a pointer to it. 
Name: pru_insn_reloc_destroy; Comment: Frees up memory previously allocated by pru_insn_reloc_new (). 
Name: pru_assemble_expression; Comment: The various pru_assemble_* functions call this function to generate an expression from a string representing an expression. It then tries to evaluate the expression, and if it can, returns its value. If not, it creates a new pru_insn_relocS and stores the expression and reloc_type for future use. 
Name: pru_assemble_noreloc_expression; Comment: Try to parse a non-relocatable expression. 
Name: pru_assemble_arg_d; Comment: Argument assemble functions. All take an instruction argument string, and a pointer to an instruction opcode. Upon return the insn_opcode has the relevant fields filled in to represent the arg string. The return value is NULL if successful, or an error message if an error was detected. 
Name: pru_consume_arg; Comment: The function consume_arg takes a pointer into a string of instruction tokens (args) and a pointer into a string representing the expected sequence of tokens and separators. It checks whether the first argument in argstr is of the expected type, throwing an error if it is not, and returns the pointer argstr. 
Name: pru_consume_separator; Comment: The function consume_separator takes a pointer into a string of instruction tokens (args) and a pointer into a string representing the expected sequence of tokens and separators. It finds the first instance of the character pointed to by separator in argstr, and returns a pointer to the next element of argstr, which is the following token in the sequence. 
Name: pru_parse_args; Comment: The principal argument parsing function which takes a string argstr representing the instruction arguments for insn, and extracts the argument tokens matching parsestr into parsed_args. 
Name: output_insn_ldi32; Comment: Output two LDI instructions from LDI32 macro 
Name: md_assemble; Comment: Assembles a single line of PRU assembly language. 
Name: pru_fix_adjustable; Comment: Implement tc_fix_adjustable. 
Name: pru_md_end; Comment: Called just before the assembler exits. 
Name: pru_frob_label; Comment: Implement tc_frob_label. 
Name: pru_parse_cons_expression; Comment: Parse special CONS expression: pmem (expression). Idea from AVR. Used to catch and mark code (program memory) in constant expression relocations. Return non-zero for program memory. 
Name: pru_cons_fix_new; Comment: Implement TC_CONS_FIX_NEW. 
Name: pru_regname_to_dw2regnum; Comment: Implement tc_regname_to_dw2regnum, to convert REGNAME to a DWARF-2 register number. Return the starting HW byte-register number. 
Name: pru_frame_initial_instructions; Comment: Implement tc_cfi_frame_initial_instructions, to initialize the DWARF-2 unwind information for this procedure. 
Name: riscv_set_default_isa_spec; Comment: Set the default_isa_spec. Return 0 if the spec isn't supported. Otherwise, return 1. 
Name: riscv_set_default_priv_spec; Comment: Set the default_priv_spec. Find the privileged elf attributes when the input string is NULL. Return 0 if the spec isn't supported. Otherwise, return 1. 
Name: riscv_set_rvc; Comment: Enable or disable the rvc flags for riscv_opts. Turn on the rvc flag for elf_flags once we have enabled c extension. 
Name: riscv_set_tso; Comment: Turn on the tso flag for elf_flags once we have enabled ztso extension. 
Name: riscv_reset_subsets_list_arch_str; Comment: Update the architecture string in the subset_list. 
Name: riscv_set_arch; Comment: Set which ISA and extensions are available. 
Name: riscv_set_abi; Comment: Set the abi information. 
Name: riscv_set_abi_by_arch; Comment: If the -mabi option isn't set, then set the abi according to the ISA string. Otherwise, check if there is any conflict. 
Name: make_mapping_symbol; Comment: Create a new mapping symbol for the transition to STATE. 
Name: riscv_mapping_state; Comment: Set the mapping state for frag_now. 
Name: riscv_add_odd_padding_symbol; Comment: Add the odd bytes of paddings for riscv_handle_align. 
Name: riscv_check_mapping_symbols; Comment: Remove any excess mapping symbols generated for alignment frags in SEC. We may have created a mapping symbol before a zero byte alignment; remove it if there's a mapping symbol after the alignment. 
Name: riscv_target_format; Comment: The default target format to use. 
Name: relaxed_branch_length; Comment: Compute the length of a branch sequence, and adjust the stored length accordingly. If FRAGP is NULL, the worst-case length is returned. 
Name: init_opcode_names_hash; Comment: Initialization for hash table of opcode name. 
Name: opcode_name_lookup; Comment: Find `s` is a valid opcode name or not, return the opcode name info if found. 
Name: riscv_init_csr_hash; Comment: Init hash table csr_extra_hash to handle CSR. 
Name: riscv_csr_address; Comment: Return the CSR address after checking the ISA dependency and the privileged spec version. There are one warning and two errors for CSR, Invalid CSR: the CSR was defined, but isn't allowed for the current ISA or the privileged spec, report warning only if -mcsr-check is set. Unknown CSR: the CSR has never been defined, report error. Improper CSR: the CSR number over the range (> 0xfff), report error. 
Name: reg_csr_lookup_internal; Comment: Return -1 if the CSR has never been defined. Otherwise, return the address. 
Name: validate_riscv_insn; Comment: For consistency checking, verify that all bits are specified either by the match/mask part of the instruction definition, or by the operand list. The `length` could be the actual instruction length or 0 for auto-detection. 
Name: init_opcode_hash; Comment: Common hash table initialization function for instruction and .insn directive. 
Name: append_insn; Comment: Output an instruction. IP is the instruction information. ADDRESS_EXPR is an operand of the instruction to be used with RELOC_TYPE. 
Name: md_assemblef; Comment: Build an instruction created by a macro expansion. Like md_assemble but accept a printf-style format string and arguments. 
Name: check_absolute_expr; Comment: Fail if an expression EX is not a constant. IP is the instruction using EX. MAYBE_CSR is true if the symbol may be an unrecognized CSR name. 
Name: pcrel_access; Comment: Load an entry from the GOT. 
Name: riscv_call; Comment: PC-relative function call using AUIPC/JALR, relaxed to JAL. 
Name: load_const; Comment: Load an integer constant into a register. 
Name: riscv_ext; Comment: Zero extend and sign extend byte/half-word/word. 
Name: vector_macro; Comment: Expand RISC-V Vector macros into one or more instructions. 
Name: macro; Comment: Expand RISC-V assembly macros into one or more instructions. 
Name: my_getSmallExpression; Comment: Parse string STR as a 16-bit relocatable operand. Store the expression in *EP and the relocation, if any, in RELOC. Return the number of relocation operators used (0 or 1). On exit, EXPR_END points to the first character after the expression. 
Name: my_getOpcodeExpression; Comment: Parse opcode name, could be an mnemonics or number. 
Name: my_getVsetvliExpression; Comment: Parse string STR as a vsetvli operand. Store the expression in *EP. On exit, EXPR_END points to the first character after the expression. 
Name: riscv_handle_implicit_zero_offset; Comment: Detect and handle implicitly zero load-store offsets. For example, "lw t0, (t1)" is shorthand for "lw t0, 0(t1)". Return true if such an implicit offset was detected. 
Name: riscv_csr_insn_type; Comment: Return which CSR instruction is checking. 
Name: riscv_csr_read_only_check; Comment: CSRRW and CSRRWI always write CSR. CSRRS, CSRRC, CSRRSI and CSRRCI write CSR when RS1 isn't zero. The CSR is read only if the [11:10] bits of CSR address is 0x3. 
Name: riscv_is_priv_insn; Comment: Return true if it is a privileged instruction. Otherwise, return false. uret is actually a N-ext instruction. So it is better to regard it as an user instruction rather than the priv instruction. hret is used to return from traps in H-mode. H-mode is removed since the v1.10 priv spec, but probably be added in the new hypervisor spec. Therefore, hret should be controlled by the hypervisor spec rather than priv spec in the future. dret is defined in the debug spec, so it should be checked in the future, too. 
Name: riscv_ip; Comment: This routine assembles an instruction into its binary format. As a side effect, it sets the global variable imm_reloc to the type of relocation to do if one of the operands is an address expression. 
Name: riscv_ip_hardcode; Comment: Similar to riscv_ip, but assembles an instruction according to the hardcode values of .insn directive. 
Name: riscv_pre_output_hook; Comment: Because the value of .cfi_remember_state may changed after relaxation, we insert a fix to relocate it again in link-time. 
Name: s_riscv_option; Comment: Handle the .option pseudo-op. 
Name: s_bss; Comment: Handle the .bss pseudo-op. 
Name: riscv_frag_align_code; Comment: Called from md_do_align. Used to create an alignment frag in a code section by emitting a worst-case NOP sequence that the linker will later relax to the correct number of NOPs. We can't compute the correct alignment now because of other linker relaxations. 
Name: riscv_handle_align; Comment: Implement HANDLE_ALIGN. 
Name: riscv_init_frag; Comment: This usually called from frag_var. 
Name: md_convert_frag_branch; Comment: Expand far branches to multi-instruction sequences. 
Name: md_convert_frag; Comment: Relax a machine dependent frag. This returns the amount by which the current size of the frag should change. 
Name: riscv_cfi_frame_initial_instructions; Comment: Standard calling conventions leave the CFA at SP on entry. 
Name: s_riscv_leb128; Comment: Parse the .sleb128 and .uleb128 pseudos. Only allow constant expressions, since these directives break relaxation when used with symbol deltas. 
Name: s_riscv_insn; Comment: Parse the .insn directive. There are three formats, Format 1: .insn <type> <operand1>, <operand2>, ... Format 2: .insn <length>, <value> Format 3: .insn <value>. 
Name: riscv_write_out_attrs; Comment: Update architecture and privileged elf attributes. If we don't set them, then try to output the default ones. 
Name: riscv_set_public_attributes; Comment: Add the default contents for the .riscv.attributes section. 
Name: riscv_md_finish; Comment: Called after all assembly has been done. 
Name: riscv_adjust_symtab; Comment: Adjust the symbol table. 
Name: riscv_convert_symbolic_attribute; Comment: Given a symbolic attribute NAME, return the proper integer value. Returns -1 if the attribute is not known. 
Name: s_riscv_attribute; Comment: Parse a .attribute directive. 
Name: s_variant_cc; Comment: Mark symbol that it follows a variant CC convention. 
Name: riscv_elf_copy_symbol_attributes; Comment: Same as elf_copy_symbol_attributes, but without copying st_other. This is needed so RISC-V specific st_other values can be independently specified for an IFUNC resolver (that is called by the dynamic linker) and the symbol it resolves (aliased to the resolver). In particular, if a function symbol has special st_other value set via directives, then attaching an IFUNC resolver to that symbol should not override the st_other setting. Requiring the directive on the IFUNC resolver symbol would be unexpected and problematic in C code, where the two symbols appear as two independent function declarations. 
Name: rl78_field; Comment: This gets complicated when the field spans bytes, because fields are numbered from the MSB of the first byte as zero, and bits are stored LSB towards the LSB of the byte. Thus, a simple four-bit insertion of 12 at position 4 of 0x00 yields: 0x0b. A three-bit insertion of b'MXL at position 7 is like this: - - - - - - - - - - - - - - - - M X L 
Name: rl78_elf_final_processing; Comment: Set the ELF specific flags. 
Name: rl78_handle_align; Comment: When relaxing, we need to output a reloc for any .align directive so that we can retain this alignment as we adjust opcode sizes. 
Name: rl78_opcode_type; Comment: Given the opcode bytes at OP, figure out which opcode it is and return the type of opcode. We use this to re-encode the opcode as a different size later. 
Name: rl78_frag_fix_value; Comment: Returns zero if *addrP has the target address. Else returns nonzero if we cannot compute the target address yet. 
Name: md_estimate_size_before_relax; Comment: Estimate how big the opcode is after this relax pass. The return value is the difference between fr_fix and the actual size. We compute the total size in rl78_relax_frag and store it in fr_subtype, so we only need to subtract fx_fix and return it. 
Name: rl78_relax_frag; Comment: Given the new addresses for this relax pass, figure out how big each opcode must be. We store the total number of bytes needed in fr_subtype. The return value is the difference between the size after the last pass and the size after this pass, so we use the old fr_subtype to calculate the difference. 
Name: md_convert_frag; Comment: Given the opcode stored in fr_opcode and the number of bytes we think we need, encode a new opcode. We stored a pointer to the fixup for this opcode in the tc_frag_data structure. If we can do the fixup here, we change the relocation type to "none" (we test for that in tc_gen_reloc) else we change it to the right type for the new (biggest) opcode. 
Name: tc_gen_reloc; Comment: End of relaxation code. ----------------------------------------------------------------------
Name: rx_rept; Comment: Like the .rept pseudo op, but supports the use of ..MACREP inside the repeated region. 
Name: rx_cons; Comment: Like cons() accept that strings are allowed. 
Name: rx_field; Comment: This gets complicated when the field spans bytes, because fields are numbered from the MSB of the first byte as zero, and bits are stored LSB towards the LSB of the byte. Thus, a simple four-bit insertion of 12 at position 4 of 0x00 yields: 0x0b. A three-bit insertion of b'MXL at position 7 is like this: - - - - - - - - - - - - - - - - M X L 
Name: rx_disp3; Comment: Special case of the above, for 3-bit displacements of 2..9. 
Name: rx_field5s; Comment: ---- -432 1--- 0--- 
Name: rx_field5s2; Comment: ---- ---- 4--- 3210 
Name: rx_equ; Comment: Handle the as100's version of the .equ pseudo-op. It has the syntax: <symbol_name> .equ <expression> 
Name: scan_for_infix_rx_pseudo_ops; Comment: Look for Renesas as100 pseudo-ops that occur after a symbol name rather than at the start of a line. (eg .EQU or .DEFINE). If one is found, process it and return TRUE otherwise return FALSE. 
Name: rx_handle_align; Comment: When relaxing, we need to output a reloc for any .align directive so that we can retain this alignment as we adjust opcode sizes. 
Name: rx_opcode_type; Comment: Given the opcode bytes at OP, figure out which opcode it is and return the type of opcode. We use this to re-encode the opcode as a different size later. 
Name: rx_frag_fix_value; Comment: Returns zero if *addrP has the target address. Else returns nonzero if we cannot compute the target address yet. 
Name: md_estimate_size_before_relax; Comment: Estimate how big the opcode is after this relax pass. The return value is the difference between fr_fix and the actual size. We compute the total size in rx_relax_frag and store it in fr_subtype, so we only need to subtract fx_fix and return it. 
Name: rx_next_opcode; Comment: Given a frag FRAGP, return the "next" frag that contains an opcode. Assumes the next opcode is relaxable, and thus rs_machine_dependent. 
Name: rx_relax_frag; Comment: Given the new addresses for this relax pass, figure out how big each opcode must be. We store the total number of bytes needed in fr_subtype. The return value is the difference between the size after the last pass and the size after this pass, so we use the old fr_subtype to calculate the difference. 
Name: rx_elf_final_processing; Comment: Set the ELF specific flags. 
Name: rx_start_line; Comment: Scan the current input line for occurrences of Renesas local labels and replace them with the GAS version. 
Name: s12z_strtol; Comment: A wrapper around the standard library's strtol. It converts STR into an integral value. This wrapper deals with literal_prefix_dollar_hex. 
Name: s12z_arch_format; Comment: Get the target cpu for the assembler. 
Name: s12z_listing_header; Comment: Listing header selected according to cpu. 
Name: skip_whites; Comment: Builtin help. 
Name: s12z_new_insn; Comment: Start a new insn that contains at least 'size' bytes. Record the line information of that insn in the dwarf2 debug sections. 
Name: lex_imm; Comment: Immediate operand. If EXP_O is non-null, then a symbolic expression is permitted, in which case, EXP_O will be populated with the parsed expression. 
Name: lex_imm_e4; Comment: Short mmediate operand 
Name: lex_reg_name; Comment: Parse a register name. WHICH is a ORwise combination of the registers which are accepted. ~0 accepts all. On success, REG will be filled with the index of the register which was successfully scanned. 
Name: emit_opr; Comment: Emit the code for an OPR address mode operand 
Name: emit_ext24; Comment: Emit the code for a 24 bit direct address operand 
Name: lex_15_bit_offset; Comment: Parse a 15 bit offset, as an expression. LONG_DISPLACEMENT will be set to true if the offset is wider than 7 bits. 
Name: clr_xy; Comment: Special case for CLR X and CLR Y 
Name: size_from_suffix; Comment: Some instructions have a suffix like ".l", ".b", ".w" etc which indicates the size of the operands. 
Name: regx_regy; Comment: Special one byte instruction CMP X, Y 
Name: regd6_regx_regy; Comment: Special one byte instruction SUB D6, X, Y 
Name: regd6_regy_regx; Comment: Special one byte instruction SUB D6, Y, X 
Name: regs_opr_dest; Comment: OP0: S; OP1: destination OPR 
Name: regs_opr_src; Comment: OP0: S; OP1: source OPR 
Name: lex_shift_reg; Comment: None logical = 0; arithmetic = 1; 
Name: shift_two_operand; Comment: Shift instruction with a OPR operand 
Name: shift_opr_imm; Comment: Shift instruction with a OPR operand 
Name: shift_reg; Comment: Shift instruction with a register operand 
Name: s12z_relax_frag; Comment: We need a port-specific relaxation function to cope with sym2 - sym1 relative expressions with both symbols in the same segment (but not necessarily in the same frag as this insn), for example: ldab sym2-(sym1-2),pc sym1: The offset can be 5, 9 or 16 bits long. 
Name: tc_s12z_force_relocation; Comment: See whether we need to force a relocation into the output file. 
Name: tc_s12z_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the linker relaxation is done correctly, so in some cases we force the original symbol to be used. 
Name: s12z_elf_final_processing; Comment: Set the ELF specific flags. 
Name: register_name; Comment: Summary of register_name(). in:_Input_line_pointer points to 1st char of operand. out:_A expressionS. The operand may have been a register: in this case, X_op == O_register, X_add_number is set to the register number, and truth is returned. *_Input_line_pointer->(next non-blank) char after operand, or is in its original state. 
Name: init_default_arch; Comment: Initialize the default opcode arch and word size from the default architecture name if not specified by an option. 
Name: s390_target_format; Comment: Called by TARGET_FORMAT. 
Name: s390_parse_cpu; Comment: Map a cpu string ARG as given with -march= or .machine to the respective enum s390_opcode_cpu_val value. If ALLOW_EXTENSIONS is TRUE, the cpu name can be followed by a list of cpu facility flags each beginning with the character '+'. The active cpu flags are returned through *RET_FLAGS. In case of an error, S390_OPCODE_MAXCPU is returned. 
Name: s390_setup_opcodes; Comment: Generate the hash table mapping mnemonics to struct s390_opcode. This table is built at startup and whenever the CPU level is changed using .machine. 
Name: s390_md_finish; Comment: Called after all assembly has been done. 
Name: s390_insert_operand; Comment: Insert an operand value into an instruction. 
Name: s390_tls_suffix; Comment: Parse tls marker and return the desired relocation. 
Name: s390_elf_suffix; Comment: Parse @got/@plt/@gotoff. and return the desired relocation. 
Name: s390_lit_suffix; Comment: Test for @lit and if it's present make an entry in the literal pool and modify the current expression to be an offset into the literal pool. 
Name: skip_optargs_p; Comment: Return true if all remaining operands in the opcode with OPCODE_FLAGS can be skipped. 
Name: md_gather_operands; Comment: This routine is called for each instruction to be assembled. 
Name: s390_insn; Comment: Pseudo-op handling. 
Name: s390_byte; Comment: The .byte pseudo-op. This is similar to the normal .byte pseudo-op, but it can also take a single ASCII string. 
Name: s390_literals; Comment: The .ltorg pseudo-op.This emits all literals defined since the last .ltorg or the invocation of gas. Literals are defined with the @lit suffix. 
Name: s390_machine; Comment: The .machine pseudo op allows one to switch to a different CPU level in the asm listing. The current CPU setting can be stored on a stack with .machine push and restored with .machine pop. 
Name: s390_machinemode; Comment: The .machinemode pseudo op allows one to switch to a different architecture mode in the asm listing. The current architecture mode setting can be stored on a stack with .machinemode push and restored with .machinemode pop. 
Name: tc_s390_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the dynamic relocations are done correctly, so in some cases we force the original symbol to be used. 
Name: tc_s390_force_relocation; Comment: Return true if we must always emit a reloc for a type and false if there is some hope of resolving it at assembly time. 
Name: md_apply_fix; Comment: Apply a fixup to the object code. This is called for all the fixups we generated by the call to fix_new_exp, above. In the call above we used a reloc code which was the largest legal reloc code plus the operand index. Here we undo that to recover the operand index. At this point all symbol values should be fully resolved, and we attempt to completely resolve the reloc. If we can not do that, we determine the correct reloc code and put it back in the fixup. 
Name: s3_reg_required_here; Comment: If shift <= 0, only return reg. 
Name: s3_validate_immediate; Comment: Check if an immediate is valid. If so, convert it to the right format. 
Name: s3_do_rdsi16; Comment: Handle addi/addi.c/addis.c/cmpi.c/addis.c/ldi. 
Name: s3_do_sub_rdsi16; Comment: Handle subi/subi.c. 
Name: s3_do_sub_rdi16; Comment: Handle subis/subis.c. 
Name: s3_do_rdrsi5; Comment: Handle bitclr.c/bitset.c/bittgl.c/slli.c/srai.c/srli.c/roli.c/rori.c/rolic.c. 0~((2^14)-1) 
Name: s3_do_rdrsi14; Comment: Handle andri/orri/andri.c/orri.c. 0 ~ ((2^14)-1) 
Name: s3_do_xrsi5; Comment: Handle bittst.c. 
Name: s3_do_rdi16; Comment: Handle addis/andi/ori/andis/oris/ldis. 
Name: s3_do_rdi16_pic; Comment: Handle ldis_pic. 
Name: s3_do_addi_s_pic; Comment: Handle addi_s_pic to generate R_SCORE_GOT_LO16 . 
Name: s3_do_addi_u_pic; Comment: Handle addi_u_pic to generate R_SCORE_GOT_LO16 . 
Name: s3_do_rd; Comment: Handle mfceh/mfcel/mtceh/mtchl. 
Name: s3_do_rs; Comment: Handle br{cond},cmpzteq.c ,cmpztmi.c ,cmpz.c 
Name: s3_do_rdcrs; Comment: Handle mfcr/mtcr. 
Name: s3_do_rdsrs; Comment: Handle mfsr/mtsr. 
Name: s3_do_rdxrs; Comment: Handle neg. 
Name: s3_do_rsrs; Comment: Handle cmp.c/cmp<cond>. 
Name: s3_do16_rdrs2; Comment: Handle add!/and!/or!/sub!. 
Name: s3_do16_br; Comment: Handle br!/brl!. 
Name: s3_do16_brr; Comment: Handle brr!. 
Name: s3_do_ltb; Comment: Handle ltbw / ltbh / ltbb 
Name: s3_fix_new_score; Comment: We need to be able to fix up arbitrary expressions in some statements. This is so that we can handle symbols that are an arbitrary distance from the pc. The most common cases are of the form ((+/-sym -/+ . - 8) & mask), which returns part of an address in a form which will be valid for a data instruction. We do this by pushing the expression into a symbol in the expr_section, and creating a fix for that. 
Name: s3_adjust_paritybit; Comment: Type of p-bits: 48-bit instruction: 1, 1, 0. 32-bit instruction: 1, 0. 16-bit instruction: 0. 
Name: s3_do16_rdi5; Comment: Handle bitclr! / bitset! / bittst! / bittgl! 
Name: s3_do16_xi5; Comment: Handle sdbbp!. 
Name: s3_validate_immediate_align; Comment: Check that an immediate is word alignment or half word alignment. If so, convert it to the right format. 
Name: s3_do_cache; Comment: Handle cache. 
Name: s3_do_ldst_cop; Comment: Handle ldc/stc. 
Name: s3_do_ldst_unalign; Comment: Handle lcb/lcw/lce/scb/scw/sce. 
Name: s3_do_ldst_atomic; Comment: Handle alw/asw. 
Name: s3_build_la_pic; Comment: Build a relax frag for la instruction when generating s3_PIC, external symbol first and local symbol second. 
Name: s3_do_macro_la_rdi32; Comment: Handle la. 
Name: s3_do_macro_li_rdi32; Comment: Handle li. 
Name: s3_do_macro_mul_rdrsrs; Comment: Handle mul/mulu/div/divu/rem/remu. 
Name: s3_do_macro_bcmp; Comment: Handle bcmpeq / bcmpne 
Name: s3_do_macro_bcmpz; Comment: Handle bcmpeqz / bcmpnez 
Name: s3_build_lwst_pic; Comment: Build a relax frag for lw/st instruction when generating s3_PIC, external symbol first and local symbol second. 
Name: s3_pic_need_relax; Comment: Return true if the given symbol should be considered local for s3_PIC. 
Name: s3_do16_dsp; Comment: s3: dsp. 
Name: s3_s_score_bss; Comment: If we change section we must dump the literal pool first. 
Name: s3_s_score_ent; Comment: The .aent and .ent directives. 
Name: s3_s_score_end; Comment: The .end directive. 
Name: s3_s_score_set; Comment: Handle the .set pseudo-op. 
Name: s3_s_score_cpload; Comment: Handle the .cpload pseudo-op. This is used when generating s3_PIC code. It sets the $gp register for the function based on the function address, which is in the register named in the argument. This uses a relocation against GP_DISP_LABEL, which is handled specially by the linker. The result is: ldis gp, %hi(GP_DISP_LABEL) ori gp, %low(GP_DISP_LABEL) add gp, gp, .cpload argument The .cpload argument is normally r29. 
Name: s3_s_score_cprestore; Comment: Handle the .cprestore pseudo-op. This stores $gp into a given offset from $sp. The offset is remembered, and after making a s3_PIC call $gp is restored from that location. 
Name: s3_s_score_gpword; Comment: Handle the .gpword pseudo-op. This is used when generating s3_PIC code. It generates a 32 bit s3_GP relative reloc. 
Name: s3_s_score_cpadd; Comment: Handle the .cpadd pseudo-op. This is used when dealing with switch tables in s3_PIC code. 
Name: s3_build_score_ops_hsh; Comment: Iterate over the base tables to create the instruction patterns. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type TYPE, and store the appropriate bytes in *LITP. The number of LITTLENUMS emitted is stored in *SIZEP. An error message is returned, or NULL on OK. Note that fp constants aren't represent in the normal way on the ARM. In big endian mode, things are as expected. However, in little endian mode fp constants are big-endian word-wise, and little-endian byte-wise within the words. For example, (double) 1.1 in big endian mode is the byte sequence 3f f1 99 99 99 99 99 9a, and in little endian mode is the byte sequence 99 99 f1 3f 9a 99 99 99. 
Name: score_validate_fix; Comment: Implementation of TC_VALIDATE_FIX. Called before md_apply_fix() and after md_convert_frag(). 
Name: score_fix_adjustable; Comment: Implementation of md_frag_check. Called after md_convert_frag(). 
Name: md_estimate_size_before_relax; Comment: In this function, we determine whether s3_GP instruction should do relaxation, for the label being against was known now. Doing this here but not in md_relax_frag() can induce iteration times in stage of doing relax. 
Name: s7_reg_required_here; Comment: If shift <= 0, only return reg. 
Name: s7_validate_immediate; Comment: Check if an immediate is valid. If so, convert it to the right format. 
Name: s7_do_rdsi16; Comment: Handle addi/addi.c/addis.c/cmpi.c/addis.c/ldi. 
Name: s7_do_sub_rdsi16; Comment: Handle subi/subi.c. 
Name: s7_do_xrsi5; Comment: Handle bittst.c. 
Name: s7_do_rdi16; Comment: Handle addis/andi/ori/andis/oris/ldis. 
Name: s7_do_rdi16_pic; Comment: Handle ldis_pic. 
Name: s7_do_addi_s_pic; Comment: Handle addi_s_pic to generate R_SCORE_GOT_LO16 . 
Name: s7_do_addi_u_pic; Comment: Handle addi_u_pic to generate R_SCORE_GOT_LO16 . 
Name: s7_do_rd; Comment: Handle mfceh/mfcel/mtceh/mtchl. 
Name: s7_do_rdcrs; Comment: Handle mfcr/mtcr. 
Name: s7_do_rdsrs; Comment: Handle mfsr/mtsr. 
Name: s7_do_rdxrs; Comment: Handle neg. 
Name: s7_do_rsrs; Comment: Handle cmp.c/cmp<cond>. 
Name: s7_do16_rdrs; Comment: Handle addc!/add!/and!/cmp!/neg!/not!/or!/sll!/srl!/sra!/xor!/sub!. 
Name: s7_do16_xrs; Comment: Handle br!/brl!. 
Name: s7_do16_hrdrs; Comment: Handle mhfl!. 
Name: s7_do16_rdhrs; Comment: Handle mlfh!. 
Name: s7_fix_new_score; Comment: We need to be able to fix up arbitrary expressions in some statements. This is so that we can handle symbols that are an arbitrary distance from the pc. The most common cases are of the form ((+/-sym -/+ . - 8) & mask), which returns part of an address in a form which will be valid for a data instruction. We do this by pushing the expression into a symbol in the expr_section, and creating a fix for that. 
Name: s7_number_to_chars; Comment: Turn an integer of n bytes (in val) into a stream of bytes appropriate for use in the a.out file, and stores them in the array pointed to by buf. This knows about the endian-ness of the target machine and does THE RIGHT THING, whatever it is. Possible values for n are 1 (byte) 2 (short) and 4 (long) Floating numbers are put out as a series of LITTLENUMS (shorts, here at least). 
Name: s7_do16_mv_rdrs; Comment: None mv! reg_low, reg_low; 
Name: s7_do16_xi5; Comment: Handle sdbbp. 
Name: s7_validate_immediate_align; Comment: Check that an immediate is word alignment or half word alignment. If so, convert it to the right format. 
Name: s7_do_cache; Comment: Handle cache. 
Name: s7_do_ldst_cop; Comment: Handle ldc/stc. 
Name: s7_do16_ldst_imm_insn; Comment: Handle lbup!/lhp!/ldiu!/lwp!/sbp!/shp!/swp!. 
Name: s7_do_ldst_unalign; Comment: Handle lcb/lcw/lce/scb/scw/sce. 
Name: s7_do_ldst_atomic; Comment: Handle alw/asw. 
Name: s7_build_la_pic; Comment: Build a relax frag for la instruction when generating s7_PIC, external symbol first and local symbol second. 
Name: s7_do_macro_la_rdi32; Comment: Handle la. 
Name: s7_do_macro_li_rdi32; Comment: Handle li. 
Name: s7_do_macro_mul_rdrsrs; Comment: Handle mul/mulu/div/divu/rem/remu. 
Name: s7_build_lwst_pic; Comment: Build a relax frag for lw/st instruction when generating s7_PIC, external symbol first and local symbol second. 
Name: s7_build_score_ops_hsh; Comment: Iterate over the base tables to create the instruction patterns. 
Name: s7_pic_need_relax; Comment: Return true if the given symbol should be considered local for s7_PIC. 
Name: s7_s_score_bss; Comment: If we change section we must dump the literal pool first. 
Name: s7_s_score_ent; Comment: The .aent and .ent directives. 
Name: s7_s_score_end; Comment: The .end directive. 
Name: s7_s_score_set; Comment: Handle the .set pseudo-op. 
Name: s7_s_score_cpload; Comment: Handle the .cpload pseudo-op. This is used when generating s7_PIC code. It sets the $gp register for the function based on the function address, which is in the register named in the argument. This uses a relocation against GP_DISP_LABEL, which is handled specially by the linker. The result is: ldis gp, %hi(GP_DISP_LABEL) ori gp, %low(GP_DISP_LABEL) add gp, gp, .cpload argument The .cpload argument is normally r29. 
Name: s7_s_score_cprestore; Comment: Handle the .cprestore pseudo-op. This stores $gp into a given offset from $sp. The offset is remembered, and after making a s7_PIC call $gp is restored from that location. 
Name: s7_s_score_gpword; Comment: Handle the .gpword pseudo-op. This is used when generating s7_PIC code. It generates a 32 bit s7_GP relative reloc. 
Name: s7_s_score_cpadd; Comment: Handle the .cpadd pseudo-op. This is used when dealing with switch tables in s7_PIC code. 
Name: s7_operand; Comment: We handle all bad expressions here, so that we can report the faulty instruction in the error message. 
Name: s7_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type TYPE, and store the appropriate bytes in *LITP. The number of LITTLENUMS emitted is stored in *SIZEP. An error message is returned, or NULL on OK. Note that fp constants aren't represent in the normal way on the ARM. In big endian mode, things are as expected. However, in little endian mode fp constants are big-endian word-wise, and little-endian byte-wise within the words. For example, (double) 1.1 in big endian mode is the byte sequence 3f f1 99 99 99 99 99 9a, and in little endian mode is the byte sequence 99 99 f1 3f 9a 99 99 99. 
Name: s7_frag_check; Comment: Implementation of md_frag_check. Called after md_convert_frag(). 
Name: s7_validate_fix; Comment: Implementation of TC_VALIDATE_FIX. Called before md_apply_fix() and after md_convert_frag(). 
Name: s7_estimate_size_before_relax; Comment: In this function, we determine whether s7_GP instruction should do relaxation, for the label being against was known now. Doing this here but not in md_relax_frag() can induce iteration times in stage of doing relax. 
Name: s7_section_align; Comment: Round up a section size to the appropriate boundary. 
Name: s7_gen_reloc; Comment: Translate internal representation of relocation info to BFD target format. 
Name: sh_PIC_related_p; Comment: Determine whether the symbol needs any kind of PIC relocation. 
Name: sh_check_fixup; Comment: Determine the relocation type to be used to represent the expression, that may be rearranged. 
Name: sh_cons_fix_new; Comment: Add expression EXP of SIZE bytes to offset OFF of fragment FRAG. 
Name: sh_elf_cons; Comment: NBYTES 1=.byte, 2=.word, 4=.long 
Name: align_test_frag_offset_fixed_p; Comment: The regular frag_offset_fixed_p doesn't work for rs_align_test frags. 
Name: sh_optimize_expr; Comment: Optimize a difference of symbols which have rs_align_test frag if possible. 
Name: parse_reg_without_prefix; Comment: Try to parse a reg name. Return the number of chars consumed. 
Name: parse_reg; Comment: Like parse_reg_without_prefix, but this version supports $-prefixed register names if enabled by the user. 
Name: parse_at; Comment: The many forms of operand: Rn Register direct @Rn Register indirect @Rn+ Autoincrement @-Rn Autodecrement @(disp:4,Rn) @(disp:8,GBR) @(disp:8,PC) @(R0,Rn) @(R0,GBR) disp:8 disp:12 #imm8 pr, gbr, vbr, macl, mach 
Name: insert_loop_bounds; Comment: Insert ldrs & ldre with fancy relocations that relaxation can recognize. 
Name: build_Mytes; Comment: Now we know what sort of opcodes it is, let's build the bytes. 
Name: find_cooked_opcode; Comment: Find an opcode at the start of *STR_P in the hash table, and set *STR_P to the first character after the last one read. 
Name: sh_frob_label; Comment: This routine is called each time a label definition is seen. It emits a BFD_RELOC_SH_LABEL reloc if necessary. 
Name: sh_flush_pending_output; Comment: This routine is called when the assembler is about to output some data. It emits a BFD_RELOC_SH_DATA reloc if necessary. 
Name: s_uses; Comment: Handle the .uses pseudo-op. This pseudo-op is used just before a call instruction. It refers to a label of the instruction which loads the register which the call uses. We use it to generate a special reloc for the linker. 
Name: sh_count_relocs; Comment: Count the number of fixups in a section which refer to a particular symbol. This is called via bfd_map_over_sections. 
Name: sh_frob_section; Comment: Handle the count relocs for a particular section. This is called via bfd_map_over_sections. 
Name: sh_frob_file; Comment: This function is called after the symbol table has been completed, but before the relocs or section contents have been written out. If we have seen any .uses pseudo-ops, they point to an instruction which loads a register with the address of a function. We look through the fixups to find where the function address is being loaded from. We then generate a COUNT reloc giving the number of times that function address is referred to. The linker uses this information when doing relaxing, to decide when it can eliminate the stored function address entirely. 
Name: md_convert_frag; Comment: Called after relaxing. Set the correct sizes of the fragments, and create relocs so that md_apply_fix will fill in the correct values. 
Name: s_uacons; Comment: This handles the unaligned space allocation pseudo-ops, such as .uaword. .uaword is just like .word, but the value does not need to be aligned. 
Name: sh_cons_align; Comment: If a .word, et. al., pseud-op is seen, warn if the value is not aligned correctly. Note that this can cause warnings to be issued when assembling initialized structured which were declared with the packed attribute. FIXME: Perhaps we should require an option to enable this warning? 
Name: sh_handle_align; Comment: When relaxing, we need to output a reloc for any .align directive that requests alignment to a four byte boundary or larger. This is also where we check for misaligned data. 
Name: sh_local_pcrel; Comment: See whether the relocation should be resolved locally. 
Name: sh_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: sh_uclinux_target_format; Comment: Return the target format for uClinux. 
Name: apply_full_field_fix; Comment: Apply fixup FIXP to SIZE-byte field BUF given that VAL is its assembly-time value. If we're generating a reloc for FIXP, see whether the addend should be stored in-place or whether it should be in an ELF r_addend field. 
Name: md_estimate_size_before_relax; Comment: Called just before address relaxation. Return the length by which a fragment must grow to reach it's destination. 
Name: md_pcrel_from; Comment: This version is used in obj-coff.c eg. for the sh-hms target. 
Name: tc_gen_reloc; Comment: Create a reloc. 
Name: init_default_arch; Comment: Initialize the default opcode arch and word size from the default architecture name. 
Name: sparc_mach; Comment: Called by TARGET_MACH. 
Name: sparc_target_format; Comment: Called by TARGET_FORMAT. 
Name: sparc_md_finish; Comment: Called after all assembly has been done. 
Name: BSR; Comment: Implement big shift right. 
Name: synthetize_setuw; Comment: Handle the set and setuw synthetic instructions. 
Name: synthetize_setsw; Comment: Handle the setsw synthetic instruction. 
Name: synthetize_setx; Comment: Handle the setx synthetic instruction. 
Name: md_assemble; Comment: Main entry point to assemble one instruction. 
Name: sparc_ip; Comment: Subroutine of md_assemble to do the actual parsing. 
Name: parse_keyword_arg; Comment: Parse an argument that can be expressed as a keyword. (eg: #StoreStore or %ccfr). The result is a boolean indicating success. If successful, INPUT_POINTER is updated. 
Name: parse_const_expr_arg; Comment: Parse an argument that is a constant expression. The result is a boolean indicating success. 
Name: get_expression; Comment: Subroutine of sparc_ip to parse an expression. 
Name: output_insn; Comment: Subroutine of md_assemble to output one insn. 
Name: md_apply_fix; Comment: Apply a fixS to the frags, now that we know the value it ought to hold. 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? On the sparc, they're relative to the address of the offset, plus its size. This gets us to the following instruction. (??? Is this right? FIXME-SOON) 
Name: mylog2; Comment: Return log2 (VALUE), or -1 if VALUE is not an exact positive power of two. 
Name: s_reserve; Comment: Sort of like s_lcomm. 
Name: s_empty; Comment: Handle the .empty pseudo-op. This suppresses the warnings about invalid delay slot usage. 
Name: s_ncons; Comment: This handles the native word allocation pseudo-op .nword. For sparc_arch_size 32 it is equivalent to .word, for sparc_arch_size 64 it is equivalent to .xword. 
Name: s_register; Comment: Handle the SPARC ELF .register pseudo-op. This sets the binding of a global register. The syntax is: .register %g[2367],{#scratch|symbolname|#ignore}
Name: sparc_adjust_symtab; Comment: Adjust the symbol table. We set undefined sections for STT_REGISTER symbols which need it. 
Name: sparc_cons_align; Comment: If the --enforce-aligned-data option is used, we require .word, et. al., to be aligned correctly. We do it by setting up an rs_align_code frag, and checking in HANDLE_ALIGN to make sure that no unexpected alignment was introduced. The SunOS and Solaris native assemblers enforce aligned data by default. We don't want to do that, because gcc can deliberately generate misaligned data if the packed attribute is used. Instead, we permit misaligned data by default, and permit the user to set an option to check for it. 
Name: sparc_handle_align; Comment: This is called from HANDLE_ALIGN in tc-sparc.h. 
Name: sparc_elf_final_processing; Comment: Some special processing for a Sparc ELF file. 
Name: cons_fix_new_sparc; Comment: This is called by emit_expr via TC_CONS_FIX_NEW when creating a reloc for a cons. We could use the definition there, except that we want to handle little endian relocs specially. 
Name: spu_brinfo; Comment: Handle .brinfo <priority>,<lrlive>. 
Name: spu_cons; Comment: Support @ppu on symbols referenced in .int/.long/.word/.quad. 
Name: md_section_align; Comment: Round up a section's size to the appropriate boundary. 
Name: md_pcrel_from; Comment: Where a PC relative offset is calculated from. On the spu they are calculated from the beginning of the branch instruction. 
Name: spu_handle_align; Comment: Fill in rs_align_code fragments. 
Name: tic30_unrecognized_line; Comment: In order to get gas to ignore any | chars at the start of a line, this function returns true if a | is found in a line. 
Name: tic4x_gen_to_words; Comment: Turn generic_floating_point_number into a real short/float/double. 
Name: tic4x_atof; Comment: Returns pointer past text consumed. 
Name: tic4x_asg; Comment: .asg ["]character-string["], symbol 
Name: tic4x_bss; Comment: .bss symbol, size 
Name: tic4x_cons; Comment: Handle .byte, .word. .int, .long 
Name: tic4x_stringer; Comment: Handle .ascii, .asciz, .string 
Name: tic4x_eval; Comment: .eval expression, symbol 
Name: tic4x_newblock; Comment: Reset local labels. 
Name: tic4x_sect; Comment: .sect ["]section-name[:subsection-name]["] [, value] 
Name: tic4x_set; Comment: symbol[:] .set value or .set symbol, value 
Name: tic4x_usect; Comment: [symbol] .usect ["]section-name["], size-in-words [, alignment-flag] 
Name: tic4x_version; Comment: .version cpu-version. 
Name: tic4x_inst_insert; Comment: Insert a new instruction template into hash table. 
Name: tic4x_inst_make; Comment: Make a new instruction template. 
Name: tic4x_inst_add; Comment: Add instruction template, creating dynamic templates as required. 
Name: tic4x_operands_parse; Comment: Parse the operands. 
Name: md_assemble; Comment: Assemble a single instruction. Its label has already been handled by the generic front end. We just parse mnemonic and operands, and produce the bytes of data and relocation. 
Name: md_atof; Comment: Turn a string in input_line_pointer into a floating point constant of type type, and store the appropriate bytes in *litP. The number of chars emitted is stored in *sizeP. An error message is returned, or NULL on OK. 
Name: md_convert_frag; Comment: Should never be called for tic4x. 
Name: md_create_short_jump; Comment: Should never be called for tic4x. 
Name: md_create_long_jump; Comment: Should never be called for tic4x. 
Name: md_estimate_size_before_relax; Comment: Should never be called for tic4x. 
Name: tic4x_unrecognized_line; Comment: This is called when a line is unrecognized. This is used to handle definitions of TI C3x tools style local labels $n where n is a single decimal digit. 
Name: md_undefined_symbol; Comment: Handle local labels peculiar to us referred to in an expression. 
Name: md_operand; Comment: Parse an operand that is machine-specific. 
Name: md_section_align; Comment: Round up a section size to the appropriate boundary---do we need this? 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? With the C3x we have the following: DBcond, Bcond disp + PC + 1 => PC DBcondD, BcondD disp + PC + 3 => PC 
Name: tic4x_do_align; Comment: Fill the alignment area with NOP's on .text, unless fill-data was specified. 
Name: tic4x_start_line; Comment: Look for and remove parallel instruction operator ||. 
Name: tic54x_emit_char; Comment: Output a single character (upper octet is zero). 
Name: frag_prev; Comment: Walk backwards in the frag chain. 
Name: frag_bit_offset; Comment: Return the number of bits allocated in the most recent word, or zero if none. .field/.space/.bes may leave words partially allocated. 
Name: parse_expression; Comment: Read an expression from a C string; returns a pointer past the end of the expression. 
Name: tic54x_asg; Comment: .asg "character-string"|character-string, symbol .eval is the only pseudo-op allowed to perform arithmetic on substitution symbols. all other use of symbols defined with .asg are currently unsupported. 
Name: tic54x_eval; Comment: .eval expression, symbol There's something screwy about this. The other assembler sometimes does and sometimes doesn't substitute symbols defined with .eval. We'll put the symbols into the subsym table as well as the normal symbol table, since that's what works best. 
Name: tic54x_bss; Comment: .bss symbol, size [, [blocking flag] [, alignment flag] alignment is to a longword boundary; blocking is to 128-word boundary. 1) if there is a hole in memory, this directive should attempt to fill it (not yet implemented). 2) if the blocking flag is not set, allocate at the current SPC otherwise, check to see if the current SPC plus the space to be allocated crosses the page boundary (128 words). if there's not enough space, create a hole and align with the next page boundary. (not yet implemented). 
Name: stag_add_field; Comment: Keep track of stag fields so that when structures are nested we can add the complete dereferencing symbols to the symbol table. 
Name: tic54x_struct; Comment: [STAG] .struct [OFFSET] Start defining structure offsets (symbols in absolute section). 
Name: tic54x_endstruct; Comment: [LABEL] .endstruct finish defining structure offsets; optional LABEL's value will be the size of the structure. 
Name: tic54x_tag; Comment: [LABEL] .tag STAG Reference a structure within a structure, as a sized field with an optional label. If used outside of a .struct/.endstruct, overlays the given structure format on the existing allocated space. 
Name: tic54x_struct_field; Comment: Handle all .byte, .char, .double, .field, .float, .half, .int, .long, .short, .string, .ubyte, .uchar, .uhalf, .uint, .ulong, .ushort, .uword, and .word. 
Name: tic54x_cons; Comment: Handle .byte, .word. .int, .long and all variants. 
Name: tic54x_global; Comment: .global <symbol>[,...,<symbolN>] .def <symbol>[,...,<symbolN>] .ref <symbol>[,...,<symbolN>] These all identify global symbols. .def means the symbol is defined in the current module and can be accessed by other files. The symbol should be placed in the symbol table. .ref means the symbol is used in the current module but defined in another module. The linker is to resolve this symbol's definition at link time. .global should act as a .ref or .def, as needed. global, def and ref all have symbol storage classes of C_EXT. I can't identify any difference in how the "other" c54x assembler treats these, so we ignore the type here. 
Name: tic54x_clear_local_labels; Comment: Reset all local labels. 
Name: tic54x_sect; Comment: .text .data .sect "section name" Initialized section make sure local labels get cleared when changing sections ARG is 't' for text, 'd' for data, or '*' for a named section For compatibility, '*' sections are SEC_CODE if instructions are encountered, or SEC_DATA if not. 
Name: tic54x_space; Comment: [symbol] .space space_in_bits [symbol] .bes space_in_bits BES puts the symbol at the *last* word allocated cribbed from s_space. 
Name: tic54x_usect; Comment: [symbol] .usect "section-name", size-in-words__ [, [blocking-flag] [, alignment-flag]] Uninitialized section. Non-zero blocking means that if the section would cross a page (128-word) boundary, it will be page-aligned. Non-zero alignment aligns on a longword boundary. Has no effect on the current section. 
Name: tic54x_float_cons; Comment: 'f' = float, 'x' = xfloat, 'd' = double, 'l' = ldouble. 
Name: tic54x_stringer; Comment: The argument is capitalized if it should be zero-terminated 's' is normal string with upper 8-bits zero-filled, 'p' is packed. Code copied from stringer, and slightly modified so that strings are packed and encoded into the correct octets. 
Name: tic54x_field; Comment: Initialize multiple-bit fields within a single word of memory. 
Name: tic54x_initialized_section; Comment: Ideally, we want to check SEC_LOAD and SEC_HAS_CONTENTS, but those aren't available yet. seg_info ()->bss is the next best thing. 
Name: tic54x_clink; Comment: .clink ["section name"] Marks the section as conditionally linked (link only if contents are referenced elsewhere. Without a name, refers to the current initialized section. Name is required for uninitialized sections. 
Name: tic54x_set_default_include; Comment: Change the default include directory to be the current source file's directory, instead of the current working directory. If DOT is non-zero, set to "." instead. 
Name: tic54x_include; Comment: .include "filename" | filename .copy "filename" | filename FIXME 'include' file should be omitted from any output listing, 'copy' should be included in any output listing FIXME -- prevent any included files from changing listing (compat only) FIXME -- need to include source file directory in search path; what's a good way to do this? Entering/exiting included/copied file clears all local labels. 
Name: tic54x_label; Comment: .label <symbol> Define a special symbol that refers to the loadtime address rather than the runtime address within the current section. This symbol gets a special storage class so that when it is resolved, it is resolved relative to the load address (lma) of the section rather than the run address (vma). 
Name: tic54x_register_mmregs; Comment: .mmregs Install all memory-mapped register names into the symbol table as absolute local symbols. 
Name: tic54x_loop; Comment: .loop [count] Count defaults to 1024. 
Name: tic54x_endloop; Comment: Normally, endloop gets eaten by the preceding loop. 
Name: tic54x_break; Comment: .break [condition]. 
Name: tic54x_sblock; Comment: .sblock "section"|section [,...,"section"|section] Designate initialized sections for blocking. 
Name: tic54x_set; Comment: symbol .set value symbol .equ value value must be defined externals; no forward-referencing allowed symbols assigned with .set/.equ may not be redefined. 
Name: tic54x_fclist; Comment: .fclist .fcnolist List false conditional blocks. 
Name: tic54x_var; Comment: .var SYM[,...,SYMN] Define a substitution string to be local to a macro. 
Name: tic54x_mlib; Comment: .mlib <macro library filename> Macro libraries are archived (standard AR-format) text macro definitions Expand the file and include it. FIXME need to try the source file directory as well. 
Name: tic54x_macro_start; Comment: Create a "local" substitution string hash table for a new macro level Some docs imply that macros have to use .newblock in order to be able to re-use a local label. We effectively do an automatic .newblock by deleting the local label hash between macro invocations. 
Name: tic54x_macro_end; Comment: Get rid of this macro's .var's, arguments, and local labels. 
Name: subsym_symcmp; Comment: Compare symbol A to string B. 
Name: subsym_firstch; Comment: Return the index of the first occurrence of B in A, or zero if none assumes b is an integer char value as a string. Index is one-based. 
Name: subsym_lastch; Comment: Similar to firstch, but returns index of last occurrence of B in A. 
Name: subsym_isdefed; Comment: Returns 1 if string A is defined in the symbol table (NOT the substitution symbol table). 
Name: subsym_ismember; Comment: Assign first member of comma-separated list B (e.g. "1,2,3") to the symbol A, or zero if B is a null string. Both arguments *must* be substitution symbols, unsubstituted. 
Name: subsym_iscons; Comment: Return zero if not a constant; otherwise: 1 if binary 2 if octal 3 if hexadecimal 4 if character 5 if decimal. 
Name: subsym_isname; Comment: Return 1 if A is a valid symbol name. Expects string input. 
Name: subsym_isreg; Comment: Return whether the string is a register; accepts ar0-7, unless .mmregs has been seen; if so, recognize any memory-mapped register. Note this does not recognize "A" or "B" accumulators. 
Name: subsym_structsz; Comment: Return the structure size, given the stag. 
Name: subsym_structacc; Comment: If anybody actually uses this, they can fix it :) FIXME I'm not sure what the "reference point" of a structure is. It might be either the initial offset given .struct, or it may be the offset of the structure within another structure, or it might be something else altogether. since the TI assembler doesn't seem to ever do anything but return zero, we punt and return zero. 
Name: math_ldexp; Comment: expr12^expr2. 
Name: get_operands; Comment: Return the number of operands found, or -1 on error, copying the operands into the given array and the accompanying expressions into the next array. 
Name: is_immediate; Comment: Predicates for different operand types. 
Name: is_absolute; Comment: This is distinguished from immediate because some numbers must be constants and must *not* have the '#' prefix. 
Name: is_indirect; Comment: Is this an indirect operand? 
Name: is_dual; Comment: Is this a valid dual-memory operand? 
Name: encode_dmad; Comment: 16-bit direct memory address Explicit dmad operands are always in last word of insn (usually second word, but bumped to third if lk addressing is used) We allow *(dmad) notation because the TI assembler allows it. XPC_CODE: 0 for 16-bit addresses 1 for full 23-bit addresses 2 for the upper 7 bits of a 23-bit address (LDX). 
Name: encode_address; Comment: 7-bit direct address encoding. 
Name: build_insn; Comment: Convert the operand strings into appropriate opcode values return the total number of words used by the instruction. 
Name: tic54x_parse_insn; Comment: Find a matching template if possible, and get the operand strings. 
Name: next_line_shows_parallel; Comment: See if this is part of a parallel instruction Look for a subsequent line starting with "||". 
Name: tic54x_parse_parallel_insn_lastline; Comment: Parse the second line of a two-line parallel instruction. 
Name: subsym_get_arg; Comment: If quotes found, return copy of line up to closing quote; otherwise up until terminator. If it's a string, pass as-is; otherwise attempt substitution symbol replacement on the value. 
Name: subsym_create_or_replace; Comment: Replace the given substitution string. We start at the innermost macro level, so that existing locals remain local Note: we're treating macro args identically to .var's; I don't know if that's compatible w/TI's assembler. 
Name: subsym_lookup; Comment: Look up the substitution string replacement for the given symbol. Start with the innermost macro substitution table given and work outwards. 
Name: subsym_substitute; Comment: Do substitution-symbol replacement on the given line (recursively). return the argument if no substitution was done Also look for built-in functions ($func (arg)) and local labels. If FORCED is set, look for forced substitutions of the form ':SYMBOL:'. 
Name: tic54x_start_line_hook; Comment: We use this to handle substitution symbols hijack input_line_pointer, replacing it with our substituted string. .sslist should enable listing the line after replacements are made... returns the new buffer limit. 
Name: tic54x_adjust_symtab; Comment: Do a final adjustment on the symbol table; in this case, make sure we have a ".file" symbol. 
Name: tic54x_unrecognized_line; Comment: In order to get gas to ignore any | chars at the start of a line, this function returns true if a | is found in a line. This lets us process parallel instructions, which span two lines. 
Name: tic54x_define_label; Comment: Watch for local labels of the form $[0-9] and [_a-zA-Z][_a-zA-Z0-9]*? Encode their names so that only we see them and can map them to the appropriate places. FIXME -- obviously this isn't done yet. These locals still show up in the symbol table. 
Name: tic54x_undefined_symbol; Comment: Try to parse something that normal parsing failed at. 
Name: tic54x_parse_name; Comment: Parse a name in an expression before the expression parser takes a stab at it. 
Name: tic54x_cons_fix_new; Comment: Handle cons expressions. 
Name: md_apply_fix; Comment: Attempt to simplify or even eliminate a fixup. To indicate that a fixup has been eliminated, set fixP->fx_done. If fixp->fx_addsy is non-NULL, we'll have to generate a reloc entry. 
Name: md_section_align; Comment: This is our chance to record section alignment don't need to do anything here, since BFD does the proper encoding. 
Name: tic54x_number_to_chars; Comment: Mostly little-endian, but longwords (4 octets) get MS word stored first. 
Name: tic54x_relax_frag; Comment: We use this to handle bit allocations which we couldn't handle before due to symbols being in different frags. return number of octets added. 
Name: tic54x_start_label; Comment: We need to avoid having labels defined for certain directives/pseudo-ops since once the label is defined, it's in the symbol table for good. TI syntax puts the symbol *before* the pseudo (which is kinda like MRI syntax, I guess, except I've never seen a definition of MRI syntax). Don't allow labels to start with '.' 
Name: tic6x_get_unwind; Comment: Return the frame unwind state for the current function, allocating as necessary. 
Name: tic6x_use_arch; Comment: Update the selected architecture based on ARCH, giving an error if ARCH is an invalid value. Does not call tic6x_update_features; the caller must do that if necessary. 
Name: tic6x_use_pid; Comment: Handle -mpid=ARG. 
Name: md_parse_option; Comment: Parse a target-specific option. 
Name: tic6x_update_features; Comment: Update enabled features based on the current architecture and related settings. 
Name: tic6x_after_parse_args; Comment: Do configuration after all options have been parsed. 
Name: s_tic6x_cantunwind; Comment: Parse a .cantunwind directive. 
Name: s_tic6x_handlerdata; Comment: Parse a .handlerdata directive. 
Name: s_tic6x_endp; Comment: Parse a .endp directive. 
Name: s_tic6x_personalityindex; Comment: Parse a .personalityindex directive. 
Name: s_tic6x_arch; Comment: Parse a .arch directive. 
Name: s_tic6x_ehtype; Comment: Parse a .ehtype directive. 
Name: s_tic6x_nocmp; Comment: Parse a .nocmp directive. 
Name: s_tic6x_scomm; Comment: .scomm pseudo-op handler. This is a new pseudo-op to handle putting objects in .scommon. By doing this the linker won't need to do any work, and more importantly it removes the implicit -G arg necessary to correctly link the object file. 
Name: s_tic6x_c6xabi_attribute; Comment: Parse a .c6xabi_attribute directive. 
Name: tic6x_convert_symbolic_attribute; Comment: Convert an attribute name to a number. 
Name: md_begin; Comment: Initialize the assembler (called once at assembler startup). 
Name: tic6x_unrecognized_line; Comment: Return 1 (updating input_line_pointer as appropriate) if the line starting with C (immediately before input_line_pointer) starts with pre-opcode text appropriate for this target, 0 otherwise. 
Name: tic6x_frob_label; Comment: Do any target-specific handling of a label required. 
Name: tic6x_end_of_line; Comment: At end-of-line, give errors for start-of-line decorations that needed an instruction but were not followed by one. 
Name: tic6x_start_line_hook; Comment: Do any target-specific handling of the start of a logical line. 
Name: tic6x_cleanup; Comment: Do target-specific handling immediately after an input file from the command line, and any other inputs it includes, have been read. 
Name: tic6x_init_after_args; Comment: Do target-specific initialization after arguments have been processed and the output file created. 
Name: tic6x_free_label_list; Comment: Free LIST of labels (possibly NULL). 
Name: tic6x_cons_align; Comment: Handle a data alignment of N bytes. 
Name: tic6x_do_align; Comment: Handle an alignment directive. Return TRUE if the machine-independent frag generation should be skipped. 
Name: tic6x_parse_register; Comment: Parse a register operand, or part of an operand, starting at *P. If syntactically OK (including that the number is in the range 0 to 31, but not necessarily in range for this architecture), return TRUE, putting the register side and number in REG and update P to point immediately after the register number; otherwise return FALSE without changing *P (but possibly changing *REG). Do not print any diagnostics. 
Name: tic6x_parse_func_unit_base; Comment: Parse the initial two characters of a functional unit name starting at P. If OK, set BASE and SIDE and return true; otherwise, return FALSE. 
Name: tic6x_parse_operand; Comment: Parse an operand starting at *P. If the operand parses OK, return TRUE and store the value in OP; otherwise return FALSE (possibly changing *OP). In any case, update *P to point to the following comma or end of line. The possible operand forms are given by OP_FORMS. For diagnostics, this is operand OPNO of an opcode starting at STR, length OPC_LEN. 
Name: tic6x_parse_name; Comment: Parse a name in some machine-specific way. Used on C6X to handle assembler operators. 
Name: tic6x_fix_new_exp; Comment: Create a fixup for an expression. Same arguments as fix_new_exp, plus FIX_ADDA which is TRUE for ADDA instructions (to indicate that fixes resolving to constants should have those constants implicitly shifted) and FALSE otherwise, but look for C6X-specific expression types and adjust the relocations or give errors accordingly. 
Name: tic6x_cons_fix_new; Comment: Generate a fix for a constant (.word etc.). Needed to ensure these go through the error checking in tic6x_fix_new_exp. 
Name: tic6x_init_fix_data; Comment: Initialize target-specific fix data. 
Name: tic6x_fix_adjustable; Comment: Return true if the fix can be handled by GAS, false if it must be passed through to the linker. 
Name: tic6x_coarse_operand_form; Comment: Given the fine-grained form of an operand, return the coarse (bit-mask) form. 
Name: tic6x_operand_matches_form; Comment: Return whether an operand matches the given fine-grained form and readwrite usage, and, if it does not match, how it fails to match. The main functional unit side is SIDE; the cross-path side is CROSS (the same as SIDE if a cross path not used); the data side is DATA_SIDE. 
Name: tic6x_dpr_shift; Comment: Return the number of bits shift used with DP-relative coding method CODING. 
Name: tic6x_dpr_reloc; Comment: Return the relocation used with DP-relative coding method CODING. 
Name: tic6x_default_mem_ref; Comment: Given a memory reference *MEM_REF as originally parsed, fill in defaults for missing offsets. 
Name: tic6x_encode_spmask; Comment: Return the encoding in the 8-bit field of an SPMASK or SPMASKR instruction of the specified UNIT, side SIDE. 
Name: tic6x_try_encode; Comment: None SPLOOP_II is the ii value from the previous SPLOOP-family instruction, or 0 if not in such a loop; the only possible problems are operands being out of range (they already match the fine-grained form), and inappropriate predication. If this succeeds, return the encoding and set OK to true; otherwise return 0 and set OK to FALSE. If a fix is needed, set FIX_NEEDED to true and fill in FIX_EXP, FIX_PCREL, FX_R_TYPE and FIX_ADDA. Print error messages for failure if PRINT_ERRORS is true; the opcode starts at STR and has length OPC_LEN. 
Name: md_chars_to_number; Comment: Convert the target integer stored in N bytes in BUF to a host integer, returning that value. 
Name: md_assemble; Comment: Assemble the instruction starting at STR (an opcode, with the opcode name all-lowercase). 
Name: md_atof; Comment: Convert a floating-point number to target (IEEE) format. 
Name: tic6x_adjust_section; Comment: Adjust the frags in SECTION (see tic6x_md_finish). 
Name: tic6x_frag_init; Comment: Initialize the machine-dependent parts of a frag. 
Name: tic6x_set_attribute_int; Comment: Set an attribute if it has not already been set by the user. 
Name: tic6x_set_attributes; Comment: Set object attributes deduced from the input file and command line rather than given explicitly. 
Name: tic6x_md_finish; Comment: Do machine-dependent manipulations of the frag chains after all input has been read and before the machine-independent sizing and relaxing. 
Name: md_convert_frag; Comment: No machine-dependent frags at this stage; all converted in tic6x_md_finish. 
Name: md_estimate_size_before_relax; Comment: No machine-dependent frags at this stage; all converted in tic6x_md_finish. 
Name: md_number_to_chars; Comment: Put a number into target byte order. 
Name: md_operand; Comment: Machine-dependent operand parsing not currently needed. 
Name: tic6x_pcrel_from_section; Comment: PC-relative operands are relative to the start of the fetch packet. 
Name: md_undefined_symbol; Comment: No special undefined symbol handling needed for now. 
Name: tic6x_regname_to_dw2regnum; Comment: Convert REGNAME to a DWARF-2 register number. 
Name: tic6x_frame_initial_instructions; Comment: Initialize the DWARF-2 unwind information for this procedure. 
Name: tic6x_start_unwind_section; Comment: Start an exception table entry. If idx is nonzero this is an index table entry. 
Name: tic6x_unwind_reg_from_dwarf; Comment: Map from dwarf register number to unwind frame register number. 
Name: tic6x_unwind_byte; Comment: Add a single byte of unwinding data. 
Name: tic6x_unwind_2byte; Comment: Add a two-byte unwinding opcode. 
Name: tic6x_cfi_endproc; Comment: FIXME: This will get horribly confused if cfi directives are emitted for function epilogue. 
Name: check_illegal_reg_writes; Comment: Detects and complains if two instructions in current_bundle write to the same register, either implicitly or explicitly, or if a read-only register is written. 
Name: tilegx_parse_name; Comment: Extend the expression parser to handle hw0(label), etc. as well as SPR names when in the context of parsing an SPR. 
Name: parse_reg_expression; Comment: Parses an expression which must be a register name. 
Name: parse_operands; Comment: Parses and type-checks comma-separated operands in input_line_pointer. 
Name: tilegx_fix_adjustable; Comment: Return 1 if it's OK to adjust a reloc by replacing the symbol with a section symbol plus some offset. 
Name: tilegx_handle_align; Comment: This is called from HANDLE_ALIGN in write.c. Fill in the contents of an rs_align_code fragment. 
Name: tilegx_cfi_frame_initial_instructions; Comment: Standard calling conventions leave the CFA at SP on entry. 
Name: tilepro_parse_name; Comment: Extend the expression parser to handle hi16(label), etc. as well as SPR names when in the context of parsing an SPR. 
Name: tilepro_fix_adjustable; Comment: Return 1 if it's OK to adjust a reloc by replacing the symbol with a section symbol plus some offset. 
Name: tilepro_handle_align; Comment: This is called from HANDLE_ALIGN in write.c. Fill in the contents of an rs_align_code fragment. 
Name: tilepro_cfi_frame_initial_instructions; Comment: Standard calling conventions leave the CFA at SP on entry. 
Name: v850_comm; Comment: Copied from obj_elf_common() in gas/config/obj-elf.c. 
Name: reg_name_search; Comment: Do a binary search of the given register table to see if NAME is a valid register name. Return the register number from the array on success, or -1 on failure. 
Name: register_name; Comment: Summary of register_name(). in: Input_line_pointer points to 1st char of operand. out: An expressionS. _The operand may have been a register: in this case, X_op == O_register, _X_add_number is set to the register number, and truth is returned. _Input_line_pointer->(next non-blank) char after operand, or is in _its original state. 
Name: system_register_name; Comment: Summary of system_register_name(). in: INPUT_LINE_POINTER points to 1st char of operand. _EXPRESSIONP points to an expression structure to be filled in. _ACCEPT_NUMBERS is true iff numerical register names may be used. out: An expressionS structure in expressionP. _The operand may have been a register: in this case, X_op == O_register, _X_add_number is set to the register number, and truth is returned. _Input_line_pointer->(next non-blank) char after operand, or is in _its original state. 
Name: cc_name; Comment: Summary of cc_name(). in: INPUT_LINE_POINTER points to 1st char of operand. out: An expressionS. _The operand may have been a register: in this case, X_op == O_register, _X_add_number is set to the register number, and truth is returned. _Input_line_pointer->(next non-blank) char after operand, or is in _its original state. 
Name: parse_register_list; Comment: Summary of parse_register_list (). in: INPUT_LINE_POINTER points to 1st char of a list of registers. INSN__ is the partially constructed instruction. OPERAND__ is the operand being inserted. out: NULL if the parse completed successfully, otherwise a _pointer to an error message is returned. If the parse _completes the correct bit fields in the instruction _will be filled in. Parses register lists with the syntax: { rX } { rX, rY } { rX - rY } { rX - rY, rZ } etc and also parses constant expressions whose bits indicate the registers in the lists. The LSB in the expression refers to the lowest numbered permissible register in the register list, and so on upwards. System registers are considered to be very high numbers. 
Name: md_convert_frag; Comment: Very gross. 
Name: v850_reloc_prefix; Comment: Warning: The code in this function relies upon the definitions in the v850_operands[] array (defined in opcodes/v850-opc.c) matching the hard coded values contained herein. 
Name: v850_insert_operand; Comment: Insert an operand value into an instruction. 
Name: md_estimate_size_before_relax; Comment: Return current size of variable part of frag. 
Name: parse_cons_expression_v850; Comment: Parse a cons expression. We have to handle hi(), lo(), etc on the v850. 
Name: cons_fix_new_v850; Comment: Create a fixup for a cons expression. If parse_cons_expression_v850 found a reloc prefix, then we use that reloc, else we choose an appropriate one based on the size of the expression. 
Name: v850_md_finish; Comment: Create a v850 note section. 
Name: md_apply_fix; Comment: Knows about order of bytes in address. 
Name: md_chars_to_number; Comment: Convert a number from VAX byte order (little endian) into host byte order. con__is the buffer to convert, nbytes_is the length of the given buffer. 
Name: md_estimate_size_before_relax; Comment: md_estimate_size_before_relax(), called just before relax(). Any symbol that is now undefined will not become defined. Return the correct fr_subtype in the frag and the growth beyond fr_fix. 
Name: md_convert_frag; Comment: Called after relax() is finished. In:_Address of frag. _fr_type == rs_machine_dependent. _fr_subtype is what the address relaxed to. Out:_Any fixSs and constants are set up. _Caller will turn frag into a ".space 0". 
Name: vip_op_defaults; Comment: Can be called any time. More arguments may appear in future. 
Name: vax_reg_parse; Comment: Returns the register number of something like '%r15' or 'ap', supplied in four single chars. Returns -1 if the register isn't recognized, 0..15 otherwise. 
Name: vip_op; Comment: Dissect user-input 'optext' (which is something like "@B^foo@bar(AP)[FP]:") using the vop in vopP. vopP's vop_access and vop_width. We fill _ndx, _reg, _mode, _short, _warn, _error, _expr_begin, _expr_end and _nbytes. 
Name: md_pcrel_from; Comment: Exactly what point is a PC-relative offset relative TO? On the vax, they're relative to the address of the offset, plus its size. 
Name: md_assemble; Comment: vax:md_assemble() emit frags for 1 instruction given in textual form. 
Name: vax_cons_fix_new; Comment: This is called by emit_expr via TC_CONS_FIX_NEW when creating a reloc for a cons. 
Name: md_section_align; Comment: Align a section. 
Name: md_estimate_size_before_relax; Comment: Return the estimate of the size of a machine dependent frag before any relaxing is done. It may also create any necessary relocations. 
Name: relaxed_symbol_addr; Comment: Get the address of a symbol during relaxation. From tc-arm.c. 
Name: visium_relax_frag; Comment: Relax a machine dependent frag. This returns the amount by which the current size of the frag should change. 
Name: visium_pcrel_from_section; Comment: The location from which a PC relative jump should be calculated, given a PC relative jump reloc. 
Name: visium_fix_adjustable; Comment: Indicate whether a fixup against a locally defined symbol should be adjusted to be against the section symbol. 
Name: visium_update_parity_bit; Comment: Update the parity bit of the 4-byte instruction in BUF. 
Name: visium_handle_align; Comment: This is called from HANDLE_ALIGN in write.c. Fill in the contents of an rs_align_code fragment. 
Name: get_opcode; Comment: If the given string is a Visium opcode mnemonic return the code otherwise return -1. Use binary chop to find matching entry. 
Name: md_atof; Comment: This is identical to the md_atof in m68k.c. I think this is right, but I'm not sure. Turn a string in input_line_pointer into a floating point constant of type type, and store the appropriate bytes in *litP. The number of LITTLENUMS emitted is stored in *sizeP . An error message is returned, or NULL on OK. 
Name: md_assemble; Comment: This is the main function in this file. It takes a line of assembly language source code and assembles it. Note, labels and pseudo ops have already been removed, so too has leading white space. 
Name: md_estimate_size_before_relax; Comment: No relaxation/no machine-dependent frags. 
Name: md_parse_option; Comment: No machine-dependent options. 
Name: md_undefined_symbol; Comment: No machine-dependent symbols. 
Name: md_atof; Comment: IEEE little-endian floats. 
Name: md_convert_frag; Comment: No machine-dependent frags. 
Name: md_begin; Comment: Build opcode hash table, set some flags. 
Name: md_section_align; Comment: Do the normal thing for md_section_align. 
Name: apply_full_field_fix; Comment: Apply a fixup, return TRUE if done (and no relocation is needed). 
Name: md_apply_fix; Comment: Apply a fixup (potentially PC-relative), set the fx_done flag if done. 
Name: extract_opcode; Comment: Extract an opcode. 
Name: wasm32_put_long_uleb128; Comment: Produce an unsigned LEB128 integer padded to the right number of bytes to store BITS bits, of value VALUE. Uses FRAG_APPEND_1_CHAR to write. 
Name: wasm32_put_sleb128; Comment: Produce a signed LEB128 integer, using FRAG_APPEND_1_CHAR to write. 
Name: wasm32_put_uleb128; Comment: Produce an unsigned LEB128 integer, using FRAG_APPEND_1_CHAR to write. 
Name: wasm32_leb128; Comment: Read an integer expression. Produce an LEB128-encoded integer if it's a constant, a padded LEB128 plus a relocation if it's a symbol, or a special relocation for <expr>@got, <expr>@gotcode, and <expr>@plt{__sigchar_<signature>}. 
Name: md_apply_fix; Comment: Patch the instruction with the resolved operand. Elf relocation info will also be generated to take care of linker/loader fixups. The XGATE addresses only 16-bit addresses.The BFD_RELOC_32 is necessary for the support of --gstabs. 
Name: tc_xgate_force_relocation; Comment: See whether we need to force a relocation into the output file. 
Name: tc_xgate_fix_adjustable; Comment: Here we decide which fixups can be adjusted to make them relative to the beginning of the section instead of the symbol. Basically we need to make sure that the linker relaxation is done correctly, so in some cases we force the original symbol to be used. 
Name: xgate_elf_final_processing; Comment: Set the ELF specific flags. 
Name: extract_word; Comment: Extract a word (continuous alpha-numeric chars) from the input line. 
Name: xgate_parse_exp; Comment: Parse ordinary expression. 
Name: xgate_frob_symbol; Comment: Because we are dealing with two different core that view the system memory with different offsets, we must differentiate what core a symbol belongs to, in order for the linker to cross-link. 
Name: xgate_determine_modifiers; Comment: Parse operand modifiers such as inc/dec/hi/low. 
Name: xgate_scan_operands; Comment: Parse instruction operands. 
Name: xstormy16_cons_fix_new; Comment: Called while parsing data to create a fixup. Create BFD_RELOC_XSTORMY16_FPTR16 relocations. 
Name: xstormy16_cgen_record_fixup_exp; Comment: Called while parsing an instruction to create a fixup. Create BFD_RELOC_XSTORMY16_FPTR16 relocations. 
Name: xstormy16_force_relocation; Comment: See whether we need to force a relocation into the output file. This is used to force out switch and PC relative relocations when relaxing. 
Name: xstormy16_fix_adjustable; Comment: Return true if a relocation against a symbol may be replaced with a relocation against section+offset. 
Name: xstormy16_md_apply_fix; Comment: This is a copy of gas_cgen_md_apply_fix, with some enhancements to do various things that would not be valid for all ports. 
Name: xtensa_add_insn_label; Comment: Functions related to the list of current label symbols. 
Name: xtensa_literal_position; Comment: Place an aligned literal fragment at the current location. 
Name: xtensa_literal_pseudo; Comment: Support .literal label, expr, ... 
Name: xtensa_frequency_pseudo; Comment: Support ".frequency branch_target_frequency fall_through_frequency". 
Name: xtensa_elf_cons; Comment: Like normal .long/.short/.word, except support @plt, etc. Clobbers input_line_pointer, checks end-of-line. 
Name: xtensa_elf_suffix; Comment: Parse @plt, etc. and return the desired relocation. 
Name: map_suffix_reloc_to_operator; Comment: Find the matching operator type. 
Name: map_operator_to_reloc; Comment: Find the matching reloc type. 
Name: tokenize_arguments; Comment: Split up the arguments for an opcode or pseudo-op. 
Name: parse_arguments; Comment: Parse the arguments to an opcode. Return TRUE on error. 
Name: xg_arg_is_constant; Comment: If "arg" is a constant expression, return non-zero with the value in *valp. 
Name: xg_translate_sysreg_op; Comment: If the register is not specified as part of the opcode, then get it from the operand and move it to the opcode. 
Name: xg_translate_idioms; Comment: If the instruction is an idiom (i.e., a built-in macro), translate it. Returns non-zero if an error was found. 
Name: get_relaxable_immed; Comment: Currently the assembler only allows us to use a single target per fragment. Because of this, only one operand for a given instruction may be symbolic. If there is a PC-relative operand, the last one is chosen. Otherwise, the result is the number of the last immediate operand, and if there are none of those, we fail and return -1. 
Name: xtensa_print_insn_table; Comment: For debugging, print out the mapping of opcode numbers to opcodes. 
Name: decode_reloc; Comment: Convert from BFD relocation type code to slot and operand number. Returns non-zero on failure. 
Name: encode_reloc; Comment: Convert from slot number to BFD relocation type code for the standard PC-relative relocations. Return BFD_RELOC_NONE on failure. 
Name: encode_alt_reloc; Comment: Convert from slot numbers to BFD relocation type code for the "alternate" relocations. Return BFD_RELOC_NONE on failure. 
Name: xg_instruction_matches_option_term; Comment: The routine xg_instruction_matches_option_term must return TRUE when a given option term is true. The meaning of all of the option terms is given interpretation by this function. 
Name: xg_instruction_matches_rule; Comment: Return the transition rule that matches or NULL if none matches. 
Name: is_unique_insn_expansion; Comment: Various Other Internal Functions. 
Name: xg_is_single_relaxable_insn; Comment: Check if there is exactly one relaxation for INSN that converts it to another instruction of equal or larger size. If so, and if TARG is non-null, go ahead and generate the relaxed instruction into TARG. If NARROW_ONLY is true, then only consider relaxations that widen a narrow instruction, i.e., ignore relaxations that convert to an instruction of equal size. In some contexts where this function is used, only a single widening is allowed and the NARROW_ONLY argument is used to exclude cases like ADDI being "widened" to an ADDMI, which may later be relaxed to an ADDMI/ADDI pair. 
Name: xg_get_max_insn_widen_size; Comment: Return the maximum number of bytes this opcode can expand to. 
Name: xg_get_max_insn_widen_literal_size; Comment: Return the maximum number of literal bytes this opcode can generate. 
Name: xg_check_operand; Comment: This will check to see if the value can be converted into the operand type. It will return TRUE if it does not fit. 
Name: xg_immeds_fit; Comment: Assumes: All immeds are constants. Check that all constants fit into their immeds; return FALSE if not. 
Name: xg_symbolic_immeds_fit; Comment: This should only be called after we have an initial estimate of the addresses. 
Name: xg_build_to_insn; Comment: Return TRUE on success. 
Name: xg_build_to_stack; Comment: Return TRUE on success. 
Name: xg_expand_to_stack; Comment: Return TRUE on valid expansion. 
Name: is_next_frag_target; Comment: Return TRUE if the target frag is one of the next non-empty frags. 
Name: xg_build_token_insn; Comment: Return FALSE if no error. 
Name: xg_simplify_insn; Comment: Return TRUE if it was simplified. 
Name: xg_expand_assembly_insn; Comment: xg_expand_assembly_insn: (1) Simplify the instruction, i.e., l32i -> l32i.n. (2) Check the number of operands. (3) Place the instruction tokens into the stack or relax it and place multiple instructions/literals onto the stack. Return FALSE if no error. 
Name: xg_add_opcode_fix; Comment: Put in a fixup record based on the opcode. Return TRUE on success. 
Name: is_register_writer; Comment: Return TRUE if the instruction can write to the specified integer register. 
Name: is_unaligned_label; Comment: Labels that begin with ".Ln" or ".LM" are unaligned. This allows the debugger to add unaligned labels. Also, the assembler generates stabs labels that need not be aligned: FAKE_LABEL_NAME . {"F", "L", "endfunc"}. 
Name: get_loop_align_size; Comment: In early Xtensa Processors, for reasons that are unclear, the ISA required two-byte instructions to be treated as three-byte instructions for loop instruction alignment. This restriction was removed beginning with Xtensa LX. Now the only requirement on loop instruction alignment is that the first instruction of the loop must appear at an address that does not cross a fetch boundary. 
Name: update_next_frag_state; Comment: If the next legit fragment is an end-of-loop marker, switch its state so it will instantiate a NOP. 
Name: next_frag_pre_opcode_bytes; Comment: As specified in the relaxation table, when a loop instruction is relaxed, there are 24 bytes between the loop instruction itself and the first instruction in the loop. 
Name: xtensa_mark_literal_pool_location; Comment: Mark a location where we can later insert literal frags. Update the section's literal_pool_loc, so subsequent literals can be placed nearest to their use. 
Name: build_nop; Comment: Build a nop of the correct size into tinsn. 
Name: assemble_nop; Comment: Assemble a NOP of the requested size in the buffer. User must have allocated "buf" with at least "size" bytes. 
Name: get_expanded_loop_offset; Comment: Return the number of bytes for the offset of the expanded loop instruction. This should be incorporated into the relaxation specification but is hard-coded here. This is used to auto-align the loop instruction. It is invalid to call this function if the configuration does not have loops or if the opcode is not a loop opcode. 
Name: xtensa_set_frag_assembly_state; Comment: Set frag assembly state should be called when a new frag is opened and after a frag has been closed. 
Name: xtensa_target_format; Comment: External Functions and Other GAS Hooks. 
Name: xtensa_init_fix_data; Comment: TC_INIT_FIX_DATA hook 
Name: xtensa_frob_label; Comment: tc_frob_label hook 
Name: xtensa_unrecognized_line; Comment: tc_unrecognized_line hook 
Name: xtensa_flush_pending_output; Comment: md_flush_pending_output hook 
Name: error_reset_cur_vinsn; Comment: We had an error while parsing an instruction. The string might look like this: "insn arg1, arg2 }". If so, we need to see the closing brace and reset some fields. Otherwise, the vinsn never gets closed and the num_slots field will grow past the end of the array of slots, and bad things happen. 
Name: xtensa_handle_align; Comment: For a .align directive, we mark the previous block with the alignment information. This will be placed in the object file in the property section corresponding to this section. 
Name: xtensa_frag_init; Comment: TC_FRAG_INIT hook 
Name: xtensa_force_relocation; Comment: TC_FORCE_RELOCATION hook 
Name: xtensa_validate_fix_sub; Comment: TC_VALIDATE_FIX_SUB hook 
Name: xtensa_check_inside_bundle; Comment: This function has nothing to do with pseudo dots, but this is the nearest macro to where the check needs to take place. FIXME: This seems wrong. 
Name: xtensa_elf_section_change_hook; Comment: md_elf_section_change_hook 
Name: xtensa_fix_adjustable; Comment: tc_fix_adjustable hook 
Name: new_resource_table; Comment: The func unit stuff could be implemented as bit-vectors rather than the iterative approach here. If it ends up being too slow, we will switch it. 
Name: resize_resource_table; Comment: We never shrink it, just fake it into thinking so. 
Name: opcode_funcUnit_use_unit; Comment: Wrapper functions make parameterized resource reservation more convenient. 
Name: resources_conflict; Comment: Note that this function does not check issue constraints, but solely whether the hardware is available to execute the given instructions together. It also doesn't check if the tinsns write the same state, or access the same tieports. That is checked by check_t1_t2_reads_and_writes. 
Name: finish_vinsn; Comment: We have reached the end of a bundle; emit into the frag. 
Name: check_t1_t2_reads_and_writes; Comment: Check how the state used by t1 and t2 relate. Cases found are: case A: t1 reads a register t2 writes (an antidependency within a bundle) case B: no relationship between what is read and written (both could read the same reg though) case C: t1 writes a register t2 writes (a register conflict within a bundle) case D: t1 writes a state that t2 also writes case E: t1 writes a tie queue that t2 also writes case F: two volatile queue accesses 
Name: relaxation_requirements; Comment: Return the additional space needed in a frag for possible relaxations of any ops in a VLIW insn. Also fill out the relaxations that might be required of each tinsn in the vinsn. 
Name: xg_assemble_vliw_tokens; Comment: Emit a vliw instruction to the current fragment. 
Name: xg_find_chain_entry; Comment: Find entry index in the given chain with maximal address <= source. 
Name: xg_get_best_chain_entry; Comment: Find the best jump target for the source in the given trampoline chain. The best jump target is the one that results in the shortest path to the final target, it's the location of the jump closest to the final target, but within the J_RANGE - J_MARGIN from the source. 
Name: xg_find_best_eq_target; Comment: Find trampoline chain in the given trampoline segment that is going to the *sym + *offset. If found, replace *sym and *offset with the best jump target in that chain. 
Name: xtensa_fix_target_frags; Comment: Re-process all of the fragments looking to convert all of the RELAX_DESIRE_ALIGN_IF_TARGET fragments. If there is a branch target in the next fragment, convert this to RELAX_DESIRE_ALIGN. Otherwise, convert to a .fill 0. 
Name: xtensa_mark_difference_of_two_symbols; Comment: When a difference-of-symbols expression is encoded as a uleb128 or sleb128 value, the linker is unable to adjust that value to account for link-time relaxation. Mark all the code between such symbols so that its size cannot be changed by linker relaxation. 
Name: is_empty_loop; Comment: Return TRUE if the loop target is the next non-zero fragment. 
Name: get_text_align_power; Comment: Alignment Functions. 
Name: get_text_align_fill_size; Comment: Calculate the minimum bytes of fill needed at "address" to align a target instruction of size "target_size" so that it does not cross a power-of-two boundary specified by "align_pow". If "use_nops" is FALSE, the fill can be an arbitrary number of bytes. Otherwise, the space must be filled by NOP instructions. 
Name: get_text_align_nop_count; Comment: This will assert if it is not possible. 
Name: get_noop_aligned_address; Comment: For the given fragment, find the appropriate address for it to begin at if we are using NOPs to align it. 
Name: get_aligned_diff; Comment: 3 mechanisms for relaxing an alignment: Align to a power of 2. Align so the next fragment's instruction does not cross a word boundary. Align the current instruction so that if the next instruction were 3 bytes, it would not cross a word boundary. We can align with: zeros - This is easy; always insert zeros. nops - 3-byte and 2-byte instructions 2 - 2-byte nop 3 - 3-byte nop 4 - 2 2-byte nops >=5 : 3-byte instruction + fn (n-3) widening - widen previous instructions. 
Name: xg_get_fulcrum; Comment: Get projected address for the first fulcrum on a path from source to target. 
Name: xg_find_best_trampoline; Comment: Given trampoline index, source and target of a jump find the best candidate trampoline for the first fulcrum. The best trampoline is the one in the reach of "j' instruction from the source, closest to the projected fulcrum address, and preferrably w/o a jump around or with already initialized jump around. 
Name: xg_relax_trampoline; Comment: Given a trampoline frag relax all jumps that might want to use this trampoline. Only do real work once per relaxation cycle, when xg_relax_trampoline is called for the first trampoline in the now_seg. Don't use stretch, don't update new_stretch: place fulcrums with a slack to tolerate code movement. In the worst case if a jump between two trampolines wouldn't reach the next relaxation pass will fix it. 
Name: xtensa_relax_frag; Comment: Return the number of bytes added to this fragment, given that the input has been stretched already by "stretch". 
Name: relax_frag_add_nop; Comment: Add a NOP instruction. 
Name: find_address_of_next_align_frag; Comment: Return the address of the next frag that should be aligned. By "address" we mean the address it _would_ be at if there is no action taken to align it between here and the target frag. In other words, if no narrows and no fill nops are used between here and the frag to align, _even_if_ some of the frags we use to align targets have already expanded on a previous relaxation pass. Also, count each frag that may be used to help align the target. Return 0 if there are no frags left in the chain that need to be aligned. 
Name: bytes_to_stretch; Comment: The idea: widen everything you can to get a target or loop aligned, then start using NOPs. wide_nops = the number of wide NOPs available for aligning narrow_nops = the number of narrow NOPs available for aligning __ (a subset of wide_nops) widens = the number of narrow instructions that should be widened 
Name: xg_append_jump; Comment: Append jump to sym + offset to the end of the trampoline frag fragP. Adjust fragP's jump around if it's present. Adjust fragP's fr_fix/fr_var and finish the frag if it's full (but don't remove it from the trampoline frag index). Return fixup for the newly created jump. 
Name: fix_new_exp_in_seg; Comment: Add a new fix expression into the desired segment. We have to switch to that segment to do this. 
Name: xtensa_move_seg_list_to_beginning; Comment: Segment Lists and emit_state Stuff. 
Name: mark_literal_frags; Comment: Walk over all the frags for segments in a list and mark them as containing literals. As clunky as this is, we can't rely on frag_var and frag_variant to get called in all situations. 
Name: xtensa_reorder_segments; Comment: Push all the literal segments to the end of the gnu list. 
Name: xtensa_switch_to_literal_fragment; Comment: Change the emit state (seg, subseg, and frag related stuff) to the correct location. Return a emit_state which can be passed to xtensa_restore_emit_state to return to current fragment. 
Name: xtensa_switch_section_emit_state; Comment: Call this function before emitting data into the literal section. This is a helper function for xtensa_switch_to_literal_fragment. This is similar to a .section new_now_seg subseg. 
Name: xtensa_restore_emit_state; Comment: Use to restore the emitting into the normal place. 
Name: cache_literal_section; Comment: Get the literal section to be used for the current text section. The result may be cached in the default_lit_sections structure. 
Name: xtensa_post_relax_hook; Comment: Set up property tables after relaxation. 
Name: get_frag_is_literal; Comment: This function is only meaningful after xtensa_move_literals. 
Name: add_xt_block_frags; Comment: Two types of block sections exist right now: literal and insns. 
Name: xtensa_frag_flags_is_empty; Comment: Break the encapsulation of add_xt_prop_frags here. 
Name: init_op_placement_info_table; Comment: op_placement_info makes it easier to determine which ops can go in which slots. 
Name: xg_get_single_size; Comment: If the opcode is available in a single slot format, return its size. 
Name: istack_init; Comment: Instruction Stack Functions (from "xtensa-istack.h"). 
Name: istack_top; Comment: Return a pointer to the top IStack entry. It is an error to call this if istack_empty () is TRUE. 
Name: istack_push; Comment: Add a new TInsn to an IStack. It is an error to call this if istack_full () is TRUE. 
Name: istack_push_space; Comment: Clear space for the next TInsn on the IStack and return a pointer to it. It is an error to call this if istack_full () is TRUE. 
Name: istack_pop; Comment: Remove the last pushed instruction. It is an error to call this if istack_empty () returns TRUE. 
Name: tinsn_init; Comment: TInsn functions. 
Name: tinsn_has_symbolic_operands; Comment: Return TRUE if ANY of the operands in the insn are symbolic. 
Name: tinsn_has_complex_operands; Comment: For assembly code with complex expressions (e.g. subtraction), we have to build them in the literal pool so that their results are calculated correctly after relaxation. The relaxation only handles expressions that boil down to SYMBOL + OFFSET. 
Name: tinsn_to_slotbuf; Comment: Encode a TInsn opcode and its constant operands into slotbuf. Return TRUE if there is a symbol in the immediate field. This function assumes that: 1) The number of operands are correct. 2) The insn_type is ITYPE_INSN. 3) The opcode can be encoded in the specified format and slot. 4) Operands are either O_constant or O_symbol, and all constants fit. 
Name: tinsn_to_insnbuf; Comment: Encode a single TInsn into an insnbuf. If the opcode can only be encoded into a multi-slot instruction, fill the other slots with NOPs. Return TRUE if there is a symbol in the immediate field. See also the assumptions listed for tinsn_to_slotbuf. 
Name: tinsn_check_arguments; Comment: Check the instruction arguments. Return TRUE on failure. 
Name: tinsn_from_chars; Comment: Load an instruction from its encoded form. 
Name: tinsn_immed_from_frag; Comment: Read the value of the relaxable immed from the fr_symbol and fr_offset. 
Name: xg_init_vinsn; Comment: vliw_insn functions. 
Name: vinsn_to_insnbuf; Comment: Encode a vliw_insn into an insnbuf. Return TRUE if there are any symbolic operands. See also the assumptions listed for tinsn_to_slotbuf. 
Name: expr_is_const; Comment: Return TRUE if the expression is an integer constant. 
Name: get_expr_const; Comment: Get the expression constant. Calling this is illegal if expr_is_const () returns TRUE. 
Name: set_expr_const; Comment: Set the expression to a constant value. 
Name: get_expr_register; Comment: Get the expression constant. Calling this is illegal if expr_is_const () returns TRUE. 
Name: set_expr_symbol_offset; Comment: Set the expression to a symbol + constant offset. 
Name: expr_is_equal; Comment: Return TRUE if the two expressions are equal. 
Name: build_section_rename; Comment: Parse the string "oldname=new_name(:oldname2=new_name2)*" and add entries to the section_rename list. Note: Specifying multiple renamings separated by colons is not documented and is retained only for backward compatibility. 
Name: md_begin; Comment: Large enough for any keyword. 
Name: z80_elf_final_processing; Comment: nothing to do, all is done by BFD itself 
Name: z80_start_line_hook; Comment: A non-zero return-value causes a continue in the function read_a_source_file () in ../read.c. 
Name: key_cmp; Comment: Compares the key for structs that start with a charto the key. 
Name: is_indir; Comment: Check whether an expression is indirect. 
Name: parse_exp_not_indexed; Comment: Parse general expression, not looking for indexed addressing. 
Name: parse_exp; Comment: Parse expression, change operator to O_md1 for indexed addressing. 
Name: parse_cc; Comment: Parse condition code. 
Name: emit_m; Comment: The operand m may be r, (hl), (ix+d), (iy+d), if 0 = prefix m may also be ixl, ixh, iyl, iyh. 
Name: emit_mr; Comment: The operand m may be as above or one of the undocumented combinations (ix+d),r and (iy+d),r (if unportable instructions are allowed). 
Name: emit_s; Comment: The operand s may be r, (hl), (ix+d), (iy+d), n. 
Name: emit_incdec; Comment: Operand may be rr, r, (hl), (ix+d), (iy+d). 
Name: emit_bshft; Comment: BSLA DE,B; BSRA DE,B; BSRL DE,B; BSRF DE,B; BRLC DE,B (Z80N only) 
Name: emit_ld_m_n; Comment: For 8-bit indirect load to memory instructions like: LD (HL),n or LD (ii+d),n. 
Name: emit_ld_m_r; Comment: For 8-bit load register to memory instructions: LD (<expression>),r. 
Name: emit_ld_m_rr; Comment: For 16-bit load register to memory instructions: LD (<expression>),rr. 
Name: emit_ld_r_m; Comment: for 8-bit memory load to register: LD r,(xxx) 
Name: emit_ld_r_n; Comment: for 8-bit immediate value load to register: LD r,n 
Name: emit_ld_r_r; Comment: mostly 8-bit load register from register instructions: LD r,r 
Name: emit_ld_rr_m; Comment: for 16-bit indirect load from memory to register: LD rr,(xxx) 
Name: emit_ld_rr_nn; Comment: mostly load imediate value to multibyte register instructions: LD rr,nn 
Name: emit_mul; Comment: MUL D,E (Z80N only) 
Name: set_cpu_mode; Comment: next functions were commented out because it is difficult to mix both ADL and Z80 mode instructions within one COFF file: objdump cannot recognize point of mode switching. 
Name: str_to_float48; Comment: Math48 by Anders Hejlsberg support. Mantissa is 39 bits wide, exponent 8 bit wide. Format is: bit 47: sign bit 46-8: normalized mantissa (bits 38-0, bit39 assumed to be 1) bit 7-0: exponent+128 (0 - value is null) MIN: 2.938735877e-39 MAX: 1.701411835e+38 
Name: z80_tc_frame_initial_instructions; Comment: Initialize the DWARF-2 unwind information for this procedure. 
Name: z80_dwarf2_addr_size; Comment: Implement DWARF2_ADDR_SIZE. 
Name: whatreg; Comment: Determine register number. src points to the ascii number (after "rl", "rh", "r", "rr", or "rq"). If a character outside the set of {0,',',')','('} follows the number, return NULL to indicate that it's not a valid register number. 
Name: parse_reg; Comment: Try to parse a reg name. Return a pointer to the first character in SRC after the reg name. 
Name: checkfor; Comment: The many forms of operand: <rb> <r> <rr> <rq> @r #exp exp exp(r) r(#exp) r(r) 
Name: regword; Comment: Make sure the mode supplied is the size of a word. 
Name: regaddr; Comment: Make sure the mode supplied is the size of an address. 
Name: get_specific; Comment: Passed a pointer to a list of opcodes which use different addressing modes. Return the opcode which matches the opcodes provided. 
Name: build_bytes; Comment: Now we know what sort of opcodes it is. Let's build the bytes. 
Name: tc_gen_reloc; Comment: Generate a machine dependent reloc from a fixup. 
Name: md_apply_fix; Comment: Attempt to simplify or eliminate a fixup. To indicate that a fixup has been eliminated, set fix->fx_done. If fix->fx_addsy is non-NULL, we will have to generate a reloc entry. 
Name: md_pcrel_from; Comment: On the Z8000, a PC-relative offset is relative to the address of the instruction plus its size. 
Name: translate_unix; Comment: Callback function for filespec style conversion. 
Name: to_vms_file_spec; Comment: Wrapper for DECC function that converts a Unix filespec to VMS style filespec. 
Name: vms_file_stats_name; Comment: Return VMS file date, size, format, version given a name. 
Name: vms_dwarf2_file_name; Comment: Longest filename on VMS is 255 characters. Largest version is 32768. 
Name: append_user_fn_field_op; Comment: These could be generated but are not currently. 
Name: operand_function_HI24S; Comment: These operand functions are the semantics of user-defined operand functions. 
Name: enter_opname_n; Comment: Generate a transition table. 
Name: parse_constant; Comment: Convert a string to a number. E.G.: parse_constant("10", &num) 
Name: split_string; Comment: Split a string into component strings where "c" is the delimiter. Place the result in the split_rec. 
Name: init_split_rec; Comment: Initialize a split record. The split record must be initialized before split_string is called. 
Name: parse_insn_templ; Comment: Parse an instruction template like "insn op1, op2, op3". 
Name: parse_insn_pattern; Comment: Parse a string like: "insn op1, op2, op3, op4 | op1 != op2 | op2 == op3 | op4 == 1". I.E., instruction "insn" with 4 operands where operand 1 and 2 are not the same and operand 2 and 3 are the same and operand 4 is 1. or: "insn op1 | op1 == 1 / density + boolean / no-useroption". i.e. instruction "insn" with 1 operands where operand 1 is 1 when "density" or "boolean" options are available and "useroption" is not available. Because the current implementation of this parsing scheme uses split_string, it requires that '|' and '?' are only used as delimiters for predicates and required options. 
Name: skip_insn; Comment: Given an insn name, check whether it should be skipped or not, depending on skip_list. Return non-zero if the insn is to be skipped. 
Name: ulen; Comment: This function computes the number of digits needed to represent a given number. 
Name: output_insns; Comment: Given a NULL-terminated array of insns-definitions (pointers to arrays of funcs), output test code for the insns to as_in (assembly input) and dis_out (expected disassembler output). 
Name: output_groups; Comment: For each group, output an asm label and the insns of the group. 
Name: foo; Comment: This file isn't directly used by the test suite; it uses elf_e_flags.s. However, I figured it would be nice to provide the source code from which the .s file was generated. It was compiled as follows: mips64-elf-gcc -m4650 -S -O elf_e_flags.c We use the -m4650 flag to get the 4650-specific 'mul' instruction in there; the test suite wants to be sure that GAS's -m4650 flag will indeed cause it to generate the 4650 mul instruction, and not expand it as a macro. Ian 10 June 1999: I tweaked the resulting assembler file so that it would generate the same code when gas was configured for mips-elf and for mips64-elf. 18 October 2000: Chris Demetriou <cgd@sibyte.com> tweaked the code so that it would always generate enough zero-padding at the end to make objdump print "...", so that the test would be successful even on machines that pad results to cache line or other boundaries (e.g. mips-linux). 
Name: ffsll; Comment: This file implements ffsll for systems which don't have it. We use ffsll if possible because gcc supports it as a builtin which will use a machine instruction if there is one. 
Name: ftruncate; Comment: not F_CHSIZE nor F_FREESP nor HAVE_CHSIZE 
Name: yypcontext_expected_tokens; Comment: Put in YYARG at most YYARGN of the expected tokens given the current YYCTX, and return the number of tokens stored in YYARG. If YYARG is null, return the number of expected tokens (guaranteed to be less than YYNTOKENS). Return YYENOMEM on memory exhaustion. Return 0 if there are more than YYARGN expected tokens, yet fill YYARG up to YYARGN. 
Name: yystpcpy; Comment: Copy YYSRC to YYDEST, returning the address of the terminating '_0' in YYDEST. 
Name: yysyntax_error; Comment: Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message about the unexpected token YYTOKEN for the state stack whose top is YYSSP. Return 0 if *YYMSG was successfully written. Return -1 if *YYMSG is not large enough to hold the message. In that case, also set *YYMSG_ALLOC to the required number of bytes. Return YYENOMEM if the required number of bytes is too large to store. 
Name: main; Comment: right value.
Name: void; Comment: The .ctors section is run in reverse order, the .dtors section in run in forward order. We give these arrays the "aligned" attribute because the x86_64 ABI would otherwise give them a 16-byte alignment, which may leave a hole in the section. 
Name: onload; Comment: Plugin entry point. 
Name: new_input_hook; Comment: This function is called by the linker when new files are added by a plugin. We can now tell the linker the desired function order since we have a file handle for the newly added file. 
Name: claim_file_hook; Comment: This function is called by the linker for every new object it encounters. 
Name: all_symbols_read_hook; Comment: This function is called by the linker after all the symbols have been read. At this stage, it is fine to tell the linker the desired function order. 
Name: main; Comment: Since we don't use any of the arguments to main, we give it a void prototype, so as to quiet gcc -Wstrict-prototypes. 
Name: alpha_find_call; Comment: On the Alpha we can only detect PC relative calls, which are usually generated for calls to functions within the same object file only. This is still better than nothing, however. (In particular it should be possible to find functions that potentially call integer division routines, for example.) 
Name: cmp_bb; Comment: Helper for sorting. Compares two symbols and returns result such that sorting will be increasing according to filename, line number, and address (in that order). 
Name: cmp_ncalls; Comment: Helper for sorting. Order basic blocks in decreasing number of calls, ties are broken in increasing order of line numbers. 
Name: fskip_string; Comment: Skip over variable length string. 
Name: bb_read_rec; Comment: Read a basic-block record from file IFP. FILENAME is the name of file IFP and is provided for formatting error-messages only. 
Name: bb_write_blocks; Comment: Write all basic-blocks with non-zero counts to file OFP. FILENAME is the name of OFP and is provided for producing error-messages only. 
Name: print_exec_counts; Comment: Output basic-block statistics in a format that is easily parseable. Current the format is: _<filename>:<line-number>: (<function-name>:<bb-addr): <ncalls> 
Name: annotate_with_count; Comment: Helper for bb_annotated_source: format annotation containing number of line executions. Depends on being called on each line of a file in sequential order. Global variable bb_annotate_all_lines enables execution count compression (counts are suppressed if identical to the last one) and prints counts on all executed lines. Otherwise, print all basic-block execution counts exactly once on the line that starts the basic-block. 
Name: print_annotated_source; Comment: Annotate the files named in SOURCE_FILES with basic-block statistics (execution counts). After each source files, a few statistics regarding that source file are printed. 
Name: cg_read_rec; Comment: Read a record from file IFP describing an arc in the function call-graph and the count of how many times the arc has been traversed. FILENAME is the name of file IFP and is provided for formatting error-messages only. 
Name: cg_write_arcs; Comment: Write all the arcs in the call-graph to file OFP. FILENAME is the name of OFP and is provided for formatting error-messages only. 
Name: arc_lookup; Comment: Return TRUE iff PARENT has an arc to covers the address range covered by CHILD. 
Name: arc_add; Comment: Add (or just increment) an arc: 
Name: cycle_time; Comment: Compute the time of a cycle as the sum of the times of all its members. 
Name: inherit_flags; Comment: Check if any parent of this child (or outside parents of this cycle) have their print flags on and set the print flag of the child (cycle) appropriately. Similarly, deal with propagation fractions from parents. 
Name: propagate_flags; Comment: In one top-to-bottom pass over the topologically sorted symbols propagate: cg.print_flag as the union of parents' print_flags propfraction as the sum of fractional parents' propfractions and while we're here, sum time for functions. 
Name: cmp_total; Comment: Compare by decreasing propagated time. If times are equal, but one is a cycle header, say that's first (e.g. less, i.e. -1). If one's name doesn't have an underscore and the other does, say that one is first. All else being equal, compare by names. 
Name: cg_assemble; Comment: Topologically sort the graph (collapsing cycles), and propagates time bottom up and flags top down. 
Name: is_numbered; Comment: Is CHILD already numbered? 
Name: is_busy; Comment: Is CHILD already busy? 
Name: find_cycle; Comment: CHILD is part of a cycle. Find the top caller into this cycle that is not part of the cycle and make all functions in cycle members of that cycle (top caller == caller with smallest depth-first number). 
Name: pre_visit; Comment: Prepare for visiting the children of PARENT. Push a parent onto the stack and mark it busy. 
Name: post_visit; Comment: Done with visiting node PARENT. Pop PARENT off dfn_stack and number functions if PARENT is head of a cycle. 
Name: cg_dfn; Comment: Given this PARENT, depth first number its children. 
Name: print_cycle; Comment: Print a cycle header. 
Name: cmp_member; Comment: Compare LEFT and RIGHT membmer. Major comparison key is CG.PROP.SELF+CG.PROP.CHILD, secondary key is NCALLS+CG.SELF_CALLS. 
Name: sort_members; Comment: Sort members of a cycle. 
Name: print_members; Comment: Print the members of a cycle. 
Name: cmp_arc; Comment: Compare two arcs to/from the same child/parent._- if one arc is a self arc, it's least. _- if one arc is within a cycle, it's less than. _- if both arcs are within a cycle, compare arc counts. _- if neither arc is within a cycle, compare with __time + child_time as major key __arc count as minor key. 
Name: cg_print; Comment: Print dynamic call graph. 
Name: cmp_arc_count; Comment: Compare two arcs based on their usage counts. We want to sort in descending order. 
Name: cmp_fun_nuses; Comment: Compare two funtions based on their usage counts. We want to sort in descending order. 
Name: cg_print_function_ordering; Comment: None_size in particular is important on the PA (long calls). Placing _many small functions onto their own page may be wise. _ Use better profiling information; many published algorithms_are based on call sequences through time, rather than just _arc counts. _ Prodecure cloning could improve performance when a small number _of arcs account for most of the calls to a particular function. _ Use relocation information to avoid moving unused functions _completely out of the code stream; this would avoid severe lossage_when the profile data bears little resemblance to actual runs. _* Propagation of arc usages should also improve .o link line _ordering which shares the same arc placement algorithm with _the function ordering code (in fact it is a degenerate case _of function ordering). 
Name: order_and_dump_functions_by_arcs; Comment: Place functions based on the arcs in THE_ARCS with ARC_COUNT entries; place unused arcs into UNPLACED_ARCS/UNPLACED_ARC_COUNT. If ALL is nonzero, then place all functions referenced by THE_ARCS, else only place those referenced in the top 99% of the arcs in THE_ARCS. 
Name: cmp_symbol_map; Comment: Compare two function_map structs based on file name. We want to sort in ascending order. 
Name: cg_print_file_ordering; Comment: Print a suggested .o ordering for files on a link line based on profiling information. This uses the function placement code for the bulk of its work. 
Name: cmp_symbol_map; Comment: Compare two function_map structs based on function name. We want to sort in ascending order. 
Name: core_get_text_space; Comment: Read in the text space of an a.out file. 
Name: core_sym_class; Comment: Return class of symbol SYM. The returned class can be any of:_0 -> symbol is not interesting to us _'T' -> symbol is a global name _'t' -> symbol is a local (static) name. 
Name: get_src_info; Comment: Get whatever source info we can get regarding address ADDR. 
Name: num_of_syms_in; Comment: Return number of symbols in a symbol-table file. 
Name: core_create_syms_from; Comment: Read symbol table from a file. 
Name: core_create_function_syms; Comment: Read in symbol table from core. One symbol per function is entered. 
Name: core_create_line_syms; Comment: Read in symbol table from core. One symbol per line of source code is entered. 
Name: gmon_get_ptr_size; Comment: 0 == old (non-versioned) file format. 
Name: read_histogram_header; Comment: Reads just the header part of histogram record into *RECORD from IFP. FILENAME is the name of IFP and is provided for formatting error messages only. If FIRST is non-zero, sets global variables HZ, HIST_DIMENSION, HIST_DIMENSION_ABBREV, HIST_SCALE. If FIRST is zero, checks that the new histogram is compatible with already-set values of those variables and emits an error if that's not so. 
Name: hist_read_rec; Comment: Read the histogram from file IFP. FILENAME is the name of IFP and is provided for formatting error messages only. 
Name: hist_write_hist; Comment: Write all execution histograms file OFP. FILENAME is the name of OFP and is provided for formatting error-messages only. 
Name: scale_and_align_entries; Comment: Calculate scaled entry point addresses (to save time in hist_assign_samples), and, on architectures that have procedure entry masks at the start of a function, possibly push the scaled entry points over the procedure entry mask, if it turns out that the entry point is in one bin and the code for a routine is in the next bin. 
Name: hist_assign_samples_1; Comment: Assign samples to the symbol to which they belong. Histogram bin I covers some address range [BIN_LOWPC,BIN_HIGH_PC) which may overlap one more symbol address ranges. If a symbol overlaps with the bin's address range by O percent, then O percent of the bin's count is credited to that symbol. There are three cases as to where BIN_LOW_PC and BIN_HIGH_PC can be with respect to the symbol's address range [SYM_LOW_PC, SYM_HIGH_PC) as shown in the following diagram. OVERLAP computes the distance (in UNITs) between the arrows, the fraction of the sample that is to be credited to the symbol which starts at SYM_LOW_PC. _ sym_low_pc sym_high_pc _ | | _ v v _ +-----------------------------------------------+ _ | | _ | ->| |<- ->| |<- ->| |<- | _ | | | | | | _ +---------+ +---------+ +---------+ _ ^ ^ ^ ^ ^ ^ _ | | | | | | bin_low_pc bin_high_pc bin_low_pc bin_high_pc bin_low_pc bin_high_pc For the VAX we assert that samples will never fall in the first two bytes of any routine, since that is the entry mask, thus we call scale_and_align_entries() to adjust the entry points if the entry mask falls in one bin but the code for the routine doesn't start until the next bin. In conjunction with the alignment of routine addresses, this should allow us to have only one sample for every four bytes of text space and never have any overlap (the two end cases, above). 
Name: hist_assign_samples; Comment: Calls 'hist_assign_sampes_1' for all histogram records read so far. 
Name: print_header; Comment: Print header for flag histogram profile. 
Name: cmp_time; Comment: Compare LP and RP. The primary comparison key is execution time, the secondary is number of invocation, and the tertiary is the lexicographic order of the function names. 
Name: hist_print; Comment: Print the flat histogram profile. 
Name: find_histogram; Comment: Find and return exising histogram record having the same lowpc and highpc as passed via the parameters. Return NULL if nothing is found. The return value is valid until any new histogram is read. 
Name: find_histogram_for_pc; Comment: Given a PC, return histogram record which address range include this PC. Return NULL if there's no such record. 
Name: sym_init; Comment: Initialize a symbol (so it's empty). 
Name: cmp_addr; Comment: Compare the function entry-point of two symbols and return <0, =0, or >0 depending on whether the left value is smaller than, equal to, or greater than the right value. If two symbols are equal but one has is_func set and the other doesn't, we make the non-function symbol one "bigger" so that the function symbol will survive duplicate removal. Finally, if both symbols have the same is_func value, we discriminate against is_static such that the global symbol survives. 
Name: sym_lookup; Comment: Look up an address in the symbol-table that is sorted by address. If address does not hit any symbol, 0 is returned. 
Name: parse_spec; Comment: A spec has the syntax FILENAME:(FUNCNAME|LINENUM). As a convenience to the user, a spec without a colon is interpreted as: _(i) a FILENAME if it contains a dot _(ii) a FUNCNAME if it starts with a non-digit character _(iii) a LINENUM if it starts with a digit A FUNCNAME containing a dot can be specified by :FUNCNAME, a FILENAME not containing a dot can be specified by FILENAME. 
Name: parse_id; Comment: A symbol id has the syntax SPEC[/SPEC], where SPEC is is defined by parse_spec(). 
Name: match; Comment: Return TRUE iff PATTERN matches SYM. 
Name: sym_id_parse; Comment: Go through sym_id list produced by option processing and fill in the various symbol tables indicating what symbols should be displayed or suppressed for the various kinds of outputs. This can potentially produce huge tables and in particulars tons of arcs, but this happens only if the user makes silly requests---you get what you ask for! 
Name: sym_id_arc_is_present; Comment: Symbol tables storing the FROM symbols of arcs do not necessarily have distinct address ranges. For example, somebody might request -k /_mcount to suppress any arcs into _mcount, while at the same time requesting -k a/b. Fortunately, those symbol tables don't get very big (the user has to type them!), so a linear search is probably tolerable. 
Name: print_name_only; Comment: Print name of symbol. Return number of characters printed. 
Name: hwcdrv_assign_all_regnos; Comment: utils for drivers 
Name: reset_buf; Comment: perf_event buffer formatting and handling 
Name: hwcdrv_lwp_init; Comment: HWCDRV_API for thread-specific actions 
Name: hdrv_pcl_internal_open; Comment: open 
Name: hwcdrv_init; Comment: HWCDRV_API 
Name: hwcdrv_create_counters; Comment: create counters based on hwcdef[] 
Name: hwcdrv_init; Comment: default driver
Name: ctrdefprint; Comment: print a counter definition (for debugging) 
Name: hwcfuncs_errmsg_get; Comment: errmsg buffering is needed only because the most descriptive error messages from CPC are delivered using a callback mechanism. hwcfuncs_errmsg_get() should only be used during initialization, and ideally, only to provide feedback to an end user when his counters can't be bound to HW. 
Name: hwcfuncs_int_capture_errmsg; Comment: used by cpc to log an error 
Name: hwcfuncs_int_logerr; Comment: Log an internal error to the CPC error buffer.Note: only call this during init functions. Note: when most cpc calls fail, they will call cpcN_capture_errmsg() directly, so only call logerr() when a non-cpc function fails. 
Name: clear_hwcdefs; Comment: utils to parse counter strings 
Name: process_data_descriptor; Comment: initialize hwcdef[] based on user's counter definitions 
Name: process_hwcentrylist; Comment: initialize hwcdef[] based on user's counter definitions 
Name: hwcfuncs_parse_attrs; Comment: see hwcfuncs.h 
Name: hwcfuncs_bind_descriptor; Comment: create counters 
Name: hwcfuncs_bind_hwcentry; Comment: see hwcfuncs.h 
Name: hwcfuncs_get_ctrs; Comment: see hwcfuncs.h 
Name: regno_is_valid; Comment: return 1 if <regno> is in Hwcentry's list 
Name: hwcfuncs_assign_regnos; Comment: supplied by hwcdrv_api drivers 
Name: ptr_list_add; Comment: ptr must be freeable
Name: ptr_list_free; Comment: includes shallow free of all elements
Name: get_regnolist; Comment: style e x a m p l e s 0 NONE 2 {0|1|2|3} 1 NONE 2 : 0, 1, 2, or 3 2 0 1 2 3 6 
Name: if; Comment: shallow copy 
Name: if; Comment: update reg_num 
Name: if; Comment: table's regno is a wildcard 
Name: if; Comment: update val 
Name: if; Comment: update the name 
Name: if; Comment: If s3 is empty, push the boundary over to s4.
Name: if; Comment: If there's enough room to fit s1 and s2, do so.
Name: collector_module_init; Comment: __collector_module_init is an alternate method to initialize dynamic collector modules (er_heap, er_sync, er_iotrace, er_mpi, tha). Every module that needs to register itself with libcollector before the experiment is open implements its own global __collector_module_init and makes sure the next one is called. 
Name: __collector_writeDataRecord; Comment: check that the header fields are filled-in, and then call __collector_writeDataPacket 
Name: __collector_open_experiment; Comment: real routine to open an experimentcalled by collector_init from libcollector init section called by __collector_start_experiment when a child is forked 
Name: collector_create_expr_dir; Comment: return 0 if successful 
Name: collector_exp_dir_append_x; Comment: return 0 if successful 
Name: collector_create_expr_dir_lineage; Comment: return 0 if successful 
Name: collector_tail_init; Comment: return COL_ERROR_NONE if successful 
Name: __collector_terminate_expt; Comment: __collector_terminate_expt called by user, or from dbx 
Name: __collector_SIGCHLD_signal_handler; Comment: __collector_SIGCHLD_signal_handler called when er_archive exits 
Name: __collector_close_experiment; Comment: __collector_close_experiment may be called either from __collector_terminate_expt() or the .fini section 
Name: __collector_clean_state; Comment: void __collector_clean_state() *_Perform all necessary cleanup steps in child process after fork(). 
Name: __collector_suspend_experiment; Comment: modelled on __collector_close_experiment 
Name: __collector_ext_usage_sample; Comment: __collector_ext_usage_sample Handle taking a process usage sample and recording it. Common to all different types of sample: libcollector master samples at initiation and close, programmatic samples via libcollector API calls, periodic samples originating in the dispatcher, manual samples originating in the signal sample handler, manual samples originating from the debugger Differentiating type and name information is currently not recorded. 
Name: sample_set_interval; Comment: set the sample period from the parameter 
Name: set_duration; Comment: parameter is of the form nnn:mmm, where nnn is the start delay in seconds, _and mmm is the terminate time in seconds; if nnn is zero, *_data collection starts when the run starts. If mmm is zero, *_data collection terminates when the run terminates. Otherwise, *_nnn must be less than mmm 
Name: sample_handler; Comment: signal handler for sample signal 
Name: pause_handler; Comment: signal handler for pause/resume signal 
Name: __collector_log_write; Comment: __collector_log_write -- write a line to the log file *_return value: *_ 0 if OK *_ 1 if error (in creating or extending the log file) 
Name: ovw_open; Comment: Routines for handling the overview file 
Name: collector_pause; Comment: C API 
Name: collector_pause_; Comment: Fortran API 
Name: collector_sigprof_dispatcher; Comment: void collector_sigprof_dispatcher() Common SIGPROF event handler which dispatches events to appropriate module handlers, if they are active for this collection and due. Dispatch sequence, logic and handlers currently hardcoded in dispatcher. 
Name: __collector_sigprof_install; Comment: __collector_sigprof_install 
Name: __collector_ext_dispatcher_tsd_create_key; Comment: void __collector_ext_dispatcher_tsd_create_key() create tsd key for dispatcher 
Name: __collector_ext_dispatcher_install; Comment: int __collector_ext_dispatcher_install() installs a common handler/dispatcher (and itimer) for SIGPROF events 
Name: __collector_SIGDFL_handler; Comment: We have special dispatchers for SIGPROF and HWCFUNCS_SIGNAL to decide whether the signal was intended for us or for the user. One special case is SIGDFL, in which case we don't have a user-function address to call. If the user did indeed set default disposition for one of these signals and sent that signal, we honor that action, even though it will lead to termination. 
Name: __collector_ext_dispatcher_thread_timer_suspend; Comment: suspend/resume timer per thread 
Name: __collector_ext_dispatcher_deinstall; Comment: void __collector_ext_dispatcher_deinstall() If installed, disables SIGPROF dispatch and interval timer. Includes checks for last SIGPROF dispatch time, interval timer period, and currently installed SIGPROF handler, with appropriate warnings logged. The dispatcher remains installed to handle pending collector SIGPROFs and forward non-collector SIGPROFs to the application's handler(s). If the decision is ever made actually to deinstall the dispatcher, consider bug 4183714 and what to do about any possible pending SIGPROFs. 
Name: __collector_ext_dispatcher_fork_child_cleanup; Comment: void __collector_ext_dispatcher_fork_child_cleanup() delete timer, clear timer interval 
Name: __collector_ext_itimer_set; Comment: int __collector_ext_itimer_set (int rperiod) set itimer period, if not yet set to a positive number of microseconds, (after rounding to sys_resolution if necessary) and return its value 
Name: sigaction; Comment: NB: need a global interposing function called "sigaction" 
Name: signal; Comment: In addition to interposing on sigaction(), should we also interpose on other important signal functions like signal() or sigset()? - On Solaris, those other functions apparently call sigaction(). So, we only have to interpose on it. - On Linux, we should perhaps interpose on these other functions, but they are less portable than sigaction() and deprecated or even obsolete. So, we interpose, but don't overly worry about doing a good job. 
Name: _setitimer; Comment: ------------------------------------------------------------- setitimer 
Name: __collector_sigprocmask; Comment: --------------------------------------------------------------- sigprocmask 
Name: __collector_thr_sigsetmask; Comment: ------------------------------------------------------------ thr_sigsetmask 
Name: pthread_sigmask; Comment: ----------------------------------------------------------- pthread_sigmask 
Name: __collector_env_backup_free; Comment: free the memory involved in backing up the environment 
Name: env_prepend; Comment: function: env_prepend() given an <old_str>, check to see if <str> is already defined by it. If not, allocate a new string and concat <envvar>=<str><separator><old_str> params: old_str: original string str: substring to prepend return: pointer to updated string or NULL if string was not updated. 
Name: putenv_prepend; Comment: function: putenv_prepend() get environment variable <envvar>, check to see if <str> is already defined by it. If not prepend <str> and put it back to environment. params: envvar: environment variable str: substring to find return: 0==success, nonzero on failure. 
Name: env_strip; Comment: function: env_strip() Finds substr in origstr; Removes all characters from previous ':' or ' ' up to and including any trailing ':' or ' '. params: env: environment variable contents str: substring to find return: count of instances removed from env 
Name: env_ld_preload_strip; Comment: function: env_ld_preload_strip() Removes known libcollector shared objects from envv. params: var: shared object name (leading characters don't have to match) return: 0 = so's removed, non-zero = so's not found. 
Name: env_match; Comment: match collector environment variable 
Name: __collector_env_allocate; Comment: __collector__env_update() need be called after this to set LD_ENV
Name: __collector_env_unset; Comment: Not mt safe 
Name: __collector_env_update; Comment: not mt safe 
Name: linux_gethrtime; Comment: CLOCK_MONOTONIC Clock that cannot be set and represents monotonic time since some unspecified starting point. 
Name: init_heap_intf; Comment: Flag that we are in init_heap_intf()
Name: malloc; Comment: ------------------------------------------------------------- malloc 
Name: free; Comment: ------------------------------------------------------------- free 
Name: realloc; Comment: ------------------------------------------------------------- realloc 
Name: memalign; Comment: ------------------------------------------------------------- memalign 
Name: valloc; Comment: ------------------------------------------------------------- valloc 
Name: calloc; Comment: ------------------------------------------------------------- calloc 
Name: __collector_heap_record; Comment: __collector_heap_record is used to record java allocations/deallocations.It uses the same facilities as regular heap tracing for now. 
Name: get_hwc_driver; Comment: Initialization routines 
Name: init_ucontexts; Comment: initialize some structures 
Name: hwc_initialize_handlers; Comment: initialize the signal handler 
Name: collector_record_counter_internal; Comment: <value> should already be adjusted to be "zero-based" (counting up from 0).
Name: collector_sigemt_handler; Comment: Generates the appropriate event or events, and resets the counters 
Name: collector_sigemt_sigaction; Comment: ---------------------------------------------------------------------------
Name: set_hwc_mode; Comment: utilities 
Name: init; Comment: Common buffer management routines 
Name: allocateChunk; Comment: Allocate a chunk (nflow blocks) contiguously in virtual memory. Its blocks will be mmapped to the file individually. 
Name: getBlock; Comment: Get the address for block (iflow,ichunk). 
Name: remapBlock; Comment: Map block (iflow,ichunk) to the next part of the file. 
Name: is_not_the_log_file; Comment: IO_TXT files IO_TXT covers the case where many threads are trying to write text messages sequentially (atomically) to a file. Examples include SP_LOG_FILE and SP_MAP_FILE. The file is not written directly, but by writing to mmapped virtual memory. The granularity of the mapping is a "Buffer". There may be as many as NBUFS buffers at any one time. The current position of the file is handled via hndl->curpos. It is accessed atomically with 64-bit CAS instructions. This 64-bit word encapsulates: - busy: a bit to lock access to hndl->curpos - indx: an index indicating which Buffer to use for the current position - foff: the file offset The contents are accessed with: - unpack macros: CUR_BUSY CUR_INDX CUR_FOFF - pack macro : CUR_MAKE Conceptually, what happens when a thread wants to write a message is: - acquire the hndl->curpos "busy" lock . acquire and map new Buffers if needed to complete the message . update the file offset . release the lock - write to the corresponding buffers Each Buffer has a buf->left field that tracks how many more bytes need to be written to the Buffer. After a thread writes to a Buffer, it decrements buf->left atomically. When buf->left reaches 0, the Buffer (mapping) is deleted, freeing the Buffer for a new mapping. The actual implementation has some twists: If the entire text message fits into the current Buffer -- that is, no new Buffers are needed -- the thread does not acquire the lock. It simply updates hndl->curpos atomically to the new file offset. There are various timeouts to prevent hangs in case of abnormalities. 
Name: open; Comment: ------------------------------------------------------------- open 
Name: fcntl; Comment: ------------------------------------------------------------- fcntl 
Name: openat; Comment: ------------------------------------------------------------- openat 
Name: creat; Comment: ------------------------------------------------------------- creat 
Name: mkstemp; Comment: ------------------------------------------------------------- mkstemp 
Name: mkstemps; Comment: ------------------------------------------------------------- mkstemps 
Name: close; Comment: ------------------------------------------------------------- close 
Name: fflush; Comment: ------------------------------------------------------------- fflush 
Name: dup; Comment: ------------------------------------------------------------- dup 
Name: dup2; Comment: ------------------------------------------------------------- dup2 
Name: pipe; Comment: ------------------------------------------------------------- pipe 
Name: socket; Comment: ------------------------------------------------------------- socket 
Name: read; Comment: ------------------------------------------------------------- read 
Name: write; Comment: ------------------------------------------------------------- write 
Name: readv; Comment: ------------------------------------------------------------- readv 
Name: writev; Comment: ------------------------------------------------------------- writev 
Name: fread; Comment: ------------------------------------------------------------- fread 
Name: fwrite; Comment: ------------------------------------------------------------- fwrite 
Name: SYMVER_ATTRIBUTE; Comment: map interposed symbol versions
Name: fgets; Comment: ------------------------------------------------------------- fgets 
Name: fputs; Comment: ------------------------------------------------------------- fputs 
Name: fputc; Comment: ------------------------------------------------------------- fputc 
Name: fprintf; Comment: ------------------------------------------------------------- fprintf 
Name: vfprintf; Comment: ------------------------------------------------------------- vfprintf 
Name: lseek; Comment: ------------------------------------------------------------- lseek 
Name: llseek; Comment: ------------------------------------------------------------- llseek 
Name: chmod; Comment: ------------------------------------------------------------- chmod 
Name: access; Comment: ------------------------------------------------------------- access 
Name: rename; Comment: ------------------------------------------------------------- rename 
Name: mkdir; Comment: ------------------------------------------------------------- mkdir 
Name: getdents; Comment: ------------------------------------------------------------- getdents 
Name: unlink; Comment: ------------------------------------------------------------- unlink 
Name: fseek; Comment: ------------------------------------------------------------- fseek 
Name: rewind; Comment: ------------------------------------------------------------- rewind 
Name: ftell; Comment: ------------------------------------------------------------- ftell 
Name: fsync; Comment: ------------------------------------------------------------- fsync 
Name: readdir; Comment: ------------------------------------------------------------- readdir 
Name: flock; Comment: ------------------------------------------------------------- flock 
Name: lockf; Comment: ------------------------------------------------------------- lockf 
Name: __collector_jprofile_enable_synctrace; Comment: routine called from the syntrace module to enable Java-API synctrace 
Name: Agent_OnLoad; Comment: This is currently just a placeholder 
Name: jvmti_VMInit; Comment: JVMTI code 
Name: jvmti_ClassLoad; Comment: The CLASS_LOAD event is enabled to enable AsyncGetCallTrace 
Name: Java_com_sun_forte_st_collector_CollectorAPI__1sample; Comment: *_Collector Java API implementation 
Name: __collector_ext_line_init; Comment: must be called for potentially live experiment 
Name: __collector_ext_line_install; Comment: int __collector_ext_line_install(args) Check args to determine which line events to follow. Create tsd key for combo flag. 
Name: __collector_line_cleanup; Comment: void __collector_line_cleanup (void) Disable logging. Clear backup ENV. 
Name: __collector_ext_line_close; Comment: void __collector_ext_line_close (void) *_Disable logging. Cleans ENV vars. Clear backup ENV. 
Name: linetrace_dormant; Comment: void linetrace_dormant(void) *_Disable logging. Preserve ENV vars. 
Name: linetrace_ext_fork_prologue; Comment: Notes on MT from Solaris 10 man pthread_atfork: All multithreaded applications that call fork() in a POSIX threads program and do more than simply call exec(2) in the child of the fork need to ensure that the child is protected from deadlock. Since the "fork-one" model results in duplicating only the thread that called fork(), it is possible that at the time of the call another thread in the parent owns a lock. This thread is not duplicated in the child, so no thread will unlock this lock in the child. Deadlock occurs if the sin- gle thread in the child needs this lock. The problem is more serious with locks in libraries. Since a library writer does not know if the application using the library calls fork(), the library must protect itself from such a deadlock scenario. If the application that links with this library calls fork() and does not call exec() in the child, and if it needs a library lock that may be held by some other thread in the parent that is inside the library at the time of the fork, the application deadlocks inside the library. 
Name: __collector_posix_spawnp_2_15; Comment: Common interposition
Name: linetrace_follow_experiment; Comment: ------------------------------------------------------- selective following 
Name: __collector_mmgr_init_mutex_locks; Comment: void __collector_mmgr_init_mutex_locks( Heap *heap ) Iinitialize mmgr mutex locks. 
Name: alloc_chunk; Comment: alloc_chunk( unsigned sz ) allocates a chunk of at least sz bytes. If sz == 0, allocates a chunk of the default size. 
Name: __collector_reallocVSize; Comment: reallocVSize( Heap *heap, void *ptr, unsigned newsz ) Changes the size of memory pointed by ptr to newsz. If ptr == NULL, allocates new memory of size newsz. If newsz == 0, frees ptr and returns NULL. 
Name: __collector_mmap_init_mutex_locks; Comment: void __collector_mmap_init_mutex_locks() Iinitialize mmap mutex locks. 
Name: __collector_ext_update_map_segments; Comment: __collector_ext_update_map_segments called by the audit agentIs is also called by dbx/collector when a (possible) map update is intimated, such as after dlopen/dlclose. Required when libcollector.so is not preloaded and interpositions inactive. 
Name: __collector_ext_mmap_install; Comment: int __collector_ext_mmap_install() Install and initialise mmap tracing. 
Name: __collector_ext_mmap_deinstall; Comment: int __collector_ext_mmap_deinstall() *_Optionally update final map and stop tracing mmap events. 
Name: __collector_mmap_fork_child_cleanup; Comment: void __collector_mmap_fork_child_cleanup() *_Perform all necessary cleanup steps in child process after fork(). 
Name: __collector_check_segment_internal; Comment: Map addr to a segment. Cope with split segments. 
Name: __collector_check_segment; Comment: *Check if address belongs to a readable and executable segment @param addr @param base @param end @param maxnretries @return 1 - yes, 0 - no 
Name: __collector_check_readable_segment; Comment: *Check if address belongs to a readable segment @param addr @param base @param end @param maxnretries @return 1 - yes, 0 - no 
Name: rwrite; Comment: routines for handling dynamic functions 
Name: init_mmap_intf; Comment: int init_mmap_intf() Set up interposition (if not already done). 
Name: mmap; Comment: ------------------------------------------------------------- mmap 
Name: munmap; Comment: ------------------------------------------------------------- munmap 
Name: __collector_dlopen_symver; Comment: ------------------------------------------------------------- dlopen 
Name: dlclose; Comment: ------------------------------------------------------------- dlclose 
Name: detach_experiment; Comment: fork child. Clean up state but don't write to experiment 
Name: __collector_ext_profile_handler; Comment: void __collector_ext_profile_handler( siginfo_t *info, ucontext_t *context ) Handle real profile events to collect profile data. 
Name: __collector_jsync_begin; Comment: These next two routines are used from jprofile to record Java synctrace data 
Name: pthread_mutex_lock; Comment: -------------------------------------------------------- pthread_mutex_lock 
Name: pthread_join; Comment: ------------------------------------------------------------- pthread_join 
Name: read_memory_func; Comment: Get LENGTH bytes from info's buffer, at target address memaddr. Transfer them to myaddr. 
Name: __collector_get_frame_info; Comment: Collector interface method getFrameInfo 
Name: SPARC_no_fault_load_int; Comment: if the address is illegal, return a 0 
Name: process_sigreturn; Comment: detect signal handler
Name: stack_unwind; Comment: int stack_unwind( char *buf, int size, ucontext_t *context ) *_This routine looks into the mcontext and *_trace stack frames to record return addresses. 
Name: cache_get; Comment: *Look for pc in AddrTable_RA_FROMFP and in AddrTable_RA_EOSTCK @param wctx @return 
Name: cache_put; Comment: *Save pc in RA_FROMFP or RA_EOSTCK cache depending on val @param wctx 
Name: is_after_ret; Comment: See bug 17166877 - malloc_internal unwind failure. Sometimes there are several calls right after ret, like: leave ret call xxx call xxxx call xxxxx If they are also jump targets, we should better not create new jump context for those, since they may end up into some other function. 
Name: adjust_ret_addr; Comment: We have the return address, but we would like to report to the user the calling PC, which is the instruction immediately preceding the return address. Unfortunately, x86 instructions can have variable length. So we back up 8 bytes and try to figure out where the calling PC starts. (FWIW, call instructions are often 5-bytes long.) 
Name: parse_x86_AVX_instruction; Comment: Parses AVX instruction and returns its length. Returns 0 if parsing failed. https:www.intel.comcontentdamwwwpublicusendocumentsmanuals64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf 
Name: stack_unwind; Comment: In the Intel world, a stack frame looks like this: %fp0->| | |-------------------------------| | Args to next subroutine | |-------------------------------|- %sp0->| One word struct-ret address | | |-------------------------------| > minimum stack frame (8 bytes) | Previous frame pointer (%fp0)| | %fp1->|-------------------------------|-/ | Local variables | %sp1->|-------------------------------| 
Name: ccm_vis_index; Comment: map COMPMSG_ID to table indices 
Name: ccm_num_params; Comment: Return # parameters for this message; MAXINT for messages withparameter lists. 
Name: err_out_of_memory; Comment: Report Out of Memory error and exit 
Name: malloc; Comment: Allocate memory and make sure we got some 
Name: calloc; Comment: Implement a workaround for a libdl recursion problem 
Name: free; Comment: Free the storage associated with data 
Name: realloc; Comment: Reallocate buffer 
Name: gethrvtime; Comment: gethrvtime -- generic solution, getting user time fromclock_gettime(CLOCK_THREAD_CPUTIME_ID,..), and reformatting. need -lrt to compile.
Name: gethrtime; Comment: CLOCK_MONOTONIC Clock that cannot be set and represents monotonic time since some unspecified starting point. 
Name: gethrpxtime; Comment: does not include the child user and system CPU time 
Name: gethrustime; Comment: gethrustime -- per-process user+system CPU time from getrusage() 
Name: gethrtcputime; Comment: Below this are the Linux versions of gethrvtime and gethrtime 
Name: gethrvtime; Comment: generic gethrvtime -- uses gethrtcputime 
Name: gethrtime_; Comment: define underscore-appended wrappers for Fortran usage 
Name: do_work; Comment: do_work: process array's data with locking, based on array->strategy 
Name: nothreads; Comment: nothreads: process array's data with no locking; called without threads 
Name: lock_none; Comment: lock_none: process array's data with no locking 
Name: cache_trash_even; Comment: cache_trash_even: called for even numbered l1 cache lines 
Name: cache_trash_odd; Comment: cache_trash_odd: called for odd numbered l1 cache lines 
Name: cache_trash; Comment: cache_trash: multiple threads refer to adjacent words, *_causing false sharing of cache lines, and trashing 
Name: lock_global; Comment: lock_global: use a global lock to process array's data 
Name: trylock_global; Comment: trylock_global: busy-wait on a global lock to process array's data 
Name: lock_local; Comment: lock_local: use a local lock to process array's data 
Name: cond_global; Comment: cond_global: use a global condition variable to process array's data 
Name: cond_timeout_global; Comment: cond_timeout_global: use a global condition time wait variable to process array's data 
Name: read_write; Comment: read_write: use a global Reader/Writer lock to process array's data 
Name: sema_global; Comment: sema_global: use a global semaphore to process array's data 
Name: s5sem; Comment: s5sema: use a global UNIX System V semaphore to process array's data 
Name: calladd; Comment: lock_local: use a local lock to process array's data 
Name: computeF; Comment: note that this one is different from the others, in that it calls *_a function to do the add 
Name: prtime; Comment: prtime (ttime) returns a pointer to a static string in the form: Thu 01 Jan 00 00:00:00_0 01234567890122345678901234 ttime is a pointer to a UNIX time in seconds since epoch library routine localtime() is used 
Name: closeso; Comment: closeso -- close a DSO 
Name: closesx; Comment: closesx -- close a DSO 
Name: xinline_code; Comment: spend time in a inline locally-defined 
Name: s_inline_code; Comment: spend time in a static inline locally-defined 
Name: macro_code; Comment: spend time in a macro locally-defined 
Name: ioerror; Comment: _ioerror - do some erroneous file IO operations 
Name: iofile; Comment: iofile - do some file io operations 
Name: iotest; Comment: iotest - do various io syscalls 
Name: pagethrash; Comment: pagethrash - allocate some memory, and thrash around in it 
Name: so_burncpu; Comment: _so_burncpu - loop to use a bunch of user time 
Name: sx_burncpu; Comment: sx_burncpu - loop to use a bunch of user time 
Name: stpwtch_calibrate; Comment: stopwatch routines 
Name: whrlog; Comment: hrtime routines 
Name: whrvlog; Comment: hrtime routines 
Name: prhrdelta; Comment: prhrdelta (hrtime_t delta) returns a pointer to a static string in the form: sec.micros 1.123456 0123456789 prhrvdelta is the same, but uses a different static buffer 
Name: snaptod; Comment: delta of last-rec'd timestamp 
Name: prtime; Comment: prtime (ttime) returns a pointer to a static string in the form: Thu 01 Jan 90 00:00:00_0 01234567890122345678901234 ttime is a pointer to a UNIX time in seconds since epoch library routine localtime() is used 
Name: acct_init; Comment: acct_init: initialize accounting 
Name: iotrace_init; Comment: iotrace_init: initialize IO trace accounting 
Name: commandline; Comment: commandline -- process a command line string: _verbs are separated by a . character; each verb is looked-up *_in a table, and the routine to process it, and argument fetched. *_the routine is called. 
Name: forkcopy; Comment: forkcopy -- fork a copy to run a script 
Name: reapchild; Comment: reap a child process, called in response to SIGCLD 
Name: reapchildren; Comment: reap all child processes prior to exit 
Name: doabort; Comment: doabort -- force a SEGV 
Name: dousleep; Comment: _dousleep -- loop with a usleep 
Name: cputime; Comment: cputime -- loop to use a bunch of user time (f.p.) 
Name: icputime; Comment: icputime -- loop to use a bunch of user time (long) 
Name: hrv; Comment: hrv -- loop to do lots of gethrvtime calls 
Name: ldso; Comment: _ldso -- use up time in ld.so 
Name: masksignals; Comment: masksignals -- debug aid -- call routine to mask SIGPROF and SIGEMT 
Name: naptime; Comment: naptime -- spend time in the system sleeping 
Name: recurse; Comment: real routine to do recursion 
Name: sched; Comment: _sched -- spend time calling sched_yield() 
Name: synccall; Comment: synccall -- spend time calling sync() 
Name: systime; Comment: systime -- spend time in a few system calls 
Name: are_names_equal; Comment: Helper routine to check for identity of string pointers, which might be NULL. 
Name: find_export_in_list; Comment: Search the position of the identical element, or returns the position of the next higher element. If last valid element is smaller, then MAX is returned. The max parameter indicates the number of elements in the array. On return, *is_ident indicates whether the returned array index points at an element which is identical to the one searched for. 
Name: find_import_in_list; Comment: Search the position of the identical element, or returns the position of the next higher element. If last valid element is smaller, then MAX is returned. The max parameter indicates the number of elements in the array. On return, *is_ident indicates whether the returned array index points at an element which is identical to the one searched for. 
Name: find_exclude_in_list; Comment: Search the position of the identical element, or returns the position of the next higher element. If last valid element is smaller, then MAX is returned. The max parameter indicates the number of elements in the array. On return, *is_ident indicates whether the returned array index points at an element which is identical to the one searched for. 
Name: def_image_name; Comment: Parser Callbacks. 
Name: cref_hash_newfunc; Comment: Create an entry in a cref hash table. 
Name: add_cref; Comment: Add a symbol to the cref hash table. This is called for every global symbol that is seen during the link. 
Name: handle_asneeded_cref; Comment: Called before loading an as-needed library to take a snapshot of the cref hash table, and after we have loaded or found that the library was not needed. 
Name: cref_fill_array; Comment: Copy the addresses of the hash table entries into an array. This is called via cref_hash_traverse. We also fill in the demangled name. 
Name: cref_sort_array; Comment: Sort an array of cref hash table entries by name. 
Name: output_cref; Comment: Write out the cref table. 
Name: output_one_cref; Comment: Output one entry in the cross reference table. 
Name: check_nocrossrefs; Comment: Check for prohibited cross references. 
Name: check_local_sym_xref; Comment: Check for prohibited cross references to local and section symbols. 
Name: check_nocrossref; Comment: Check one symbol to see if it is a prohibited cross reference. 
Name: check_refs; Comment: This function is called for each symbol defined in a section which prohibits cross references. We need to look through all references to this symbol, and ensure that the references are not from prohibited sections. 
Name: check_reloc_refs; Comment: This is called via bfd_map_over_sections. INFO->SYM_NAME is a symbol defined in INFO->DEFSECNAME. If this section maps into any of the sections listed in INFO->NCRS, other than INFO->DEFSECNAME, then we look through the relocations. If any of the relocations are to INFO->SYM_NAME, then we report a prohibited cross reference error. 
Name: ldctor_add_set_entry; Comment: Add an entry to a set. H is the entry in the linker hash table. RELOC is the relocation to use for an entry in the set. SECTION and VALUE are the value to add. This is called during the first phase of the link, when we are still gathering symbols together. We just record the information now. The ldctor_build_sets function will construct the sets. 
Name: ctor_prio; Comment: Get the priority of a g++ global constructor or destructor from the symbol name. 
Name: ctor_cmp; Comment: This function is used to sort constructor elements by priority. It is called via qsort. 
Name: ldctor_build_sets; Comment: This function is called after the first phase of the link and before the second phase. At this point all set information has been gathered. We now put the statements to build the sets themselves into constructor_list. 
Name: ldelf_load_symbols; Comment: Handle the generation of DT_NEEDED tags. 
Name: ldelf_vercheck; Comment: On Linux, it's possible to have different versions of the same shared library linked against different versions of libc. The dynamic linker somehow tags which libc version to use in /etc/ld.so.cache, and, based on the libc that it sees in the executable, chooses which version of the shared library to use. We try to do a similar check here by checking whether this shared library needs any other shared libraries which may conflict with libraries we have already included in the link. If it does, we skip it, and try to find another shared library farther on down the link path. This is called via lang_for_each_input_file. GLOBAL_VERCHECK_NEEDED is the list of objects needed by the object which we are checking. This sets GLOBAL_VERCHECK_FAILED if we find a conflicting version. 
Name: ldelf_stat_needed; Comment: See if an input file matches a DT_NEEDED entry by running stat on the file. 
Name: ldelf_try_needed; Comment: This function is called for each possible name for a dynamic object named by a DT_NEEDED entry. The FORCE parameter indicates whether to skip the check for a conflicting version. 
Name: ldelf_search_needed; Comment: Search for a needed file in a path. 
Name: while; Comment: Normally this would use getline(3), but we need to be portable. 
Name: if; Comment: As-needed libs specified on the command line (or linker script)_ take priority over libs found in search dirs. 
Name: if; Comment: PR 10555: If there are no ELF input files do not try to_ create a .note.gnu-build-id section. 
Name: if; Comment: We call record_link_assignment even if the symbol is defined._ This is because if it is defined by a dynamic object, we _ actually want to use the value defined by the linker script, _ not the value from the dynamic object (because we are setting _ symbols like etext). If the symbol is defined by a regular _ object, then, as it happens, calling record_link_assignment _ will do no harm. 
Name: if; Comment: Make __ehdr_start hidden if it has been referenced, to_ prevent the symbol from being dynamic. 
Name: 	if; Comment: If the input bfd contains an audit entry, we need to add it as_ a dep audit entry. 
Name: LANG_FOR_EACH_INPUT_STATEMENT; Comment: Look for any sections named .gnu.warning. As a GNU extensions, we treat such sections as containing warning messages. We print out the warning message, and then zero out the section size so that it does not get copied into the output file. 
Name: 	if; Comment: Check to see if we already have an output section statement_ with this name, and its bfd section has compatible flags. _ If the section already exists but does not have any flags _ set, then it has been created by the linker, possibly as a _ result of a --section-start command line switch. 
Name: add_link_order_input_section; Comment: Add IS to data kept for OS. 
Name: link_order_scan; Comment: Run over the linker's statement list, extracting info about input sections attached to each output section. 
Name: compare_link_order; Comment: Compare two sections based on the locations of the sections they are linked to. Used by fixup_link_order. 
Name: fixup_link_order; Comment: Rearrange sections with SHF_LINK_ORDER into the same order as their linked sections. 
Name: ldelf_emit_ctf_early; Comment: We want to emit CTF early if and only if we are not targetting ELF with this invocation. 
Name: ldelf_ctf_strtab_iter_cb; Comment: Return strings from the strtab to libctf, one by one. Returns NULL when iteration is complete. 
Name: ldemul_unrecognized_file; Comment: Let the emulation code handle an unrecognized file. 
Name: ldemul_recognized_file; Comment: Let the emulation code handle a recognized file. 
Name: ldemul_default_target; Comment: The default choose_target function. 
Name: after_parse_default; Comment: If the entry point was not specified as an address, then add the symbol as undefined. This will cause ld to extract an archive element defining the entry if ld is linking against such an archive. We don't do this when generating shared libraries unless given -e on the command line, because most shared libs are not designed to be run as an executable. However, some are, eg. glibc ld.so and may rely on the default linker script supplying ENTRY. So we can't remove the ENTRY from the script, but would rather not insert undefined _start syms. 
Name: exp_print_token; Comment: Print the string representation of the given token. Surround it with spaces if INFIX_P is TRUE. 
Name: exp_relop; Comment: Build an expression representing an unnamed relocatable value. 
Name: definedness_newfunc; Comment: New-function for the definedness hash table. 
Name: symbol_defined; Comment: Called during processing of linker script script expressions. For symbols assigned in a linker script, return a struct describing where the symbol is defined relative to the current expression, otherwise return NULL. 
Name: update_definedness; Comment: Update the definedness state of NAME. Return FALSE if script symbol is multiply defining a strong symbol in an object. 
Name: arith_result_section; Comment: Arithmetic operators, bitwise AND, bitwise OR and XOR keep the section of one of their operands only when the other operand is a plain number. Losing the section when operating on two symbols, ie. a result of a plain number, is required for subtraction and XOR. It's justifiable for the other operations on the grounds that adding, multiplying etc. two section relative values does not really make sense unless they are just treated as numbers. The same argument could be made for many expressions involving one symbol and a number. For example, "1 << x" and "100 / x" probably should not be given the section of x. The trouble is that if we fuss about such things the rules become complex and it is onerous to document ld expression evaluation. 
Name: is_dot; Comment: Return true if TREE is '.'. 
Name: is_value; Comment: Return true if TREE is a constant equal to VAL. 
Name: is_sym_value; Comment: Return true if TREE is an absolute symbol equal to VAL defined in a linker script. 
Name: is_dot_ne_0; Comment: Return true if TREE is ". != 0". 
Name: is_dot_plus_0; Comment: Return true if TREE is ". = . + 0" or ". = . + sym" where sym is an absolute constant with value 0 defined in a linker script. 
Name: is_align_conditional; Comment: Return true if TREE is "ALIGN (. != 0 ? some_expression : 1)". 
Name: exp_assign; Comment: Handle linker script assignments and HIDDEN. 
Name: exp_defsym; Comment: Handle --defsym command-line option. 
Name: exp_provide; Comment: Handle PROVIDE. 
Name: exp_assert; Comment: Handle ASSERT. 
Name: exp_get_power; Comment: Return the smallest non-negative integer such that two raised to that power is at least as large as the vma evaluated at TREE, if TREE is a non-NULL expression that can be resolved. If TREE is NULL or cannot be resolved, return -1. 
Name: set_sym_sections; Comment: Convert absolute symbols defined by a script from "dot" (also SEGMENT_START or ORIGIN) outside of an output section statement, to section relative. 
Name: ldexp_is_final_sym_absolute; Comment: Determine whether a symbol is going to remain absolute even after ldexp_finalize_syms() has run. 
Name: is_sysrooted_pathname; Comment: Test whether a pathname, after canonicalization, is the same or a sub-directory of the sysroot directory. 
Name: ldfile_add_library_path; Comment: Adds NAME to the library search path. Makes a copy of NAME using xmalloc(). 
Name: ldfile_try_open_bfd; Comment: Try to open a BFD for a lang_input_statement. 
Name: ldfile_open_file_search; Comment: Search for and open the file specified by ENTRY. If it is an archive, use ARCH, LIB and SUFFIX to modify the file name. 
Name: ldfile_open_file; Comment: Open the input file specified by ENTRY. PR 4437: Do not stop on the first missing file, but continue processing other input files in case there are more errors to report. 
Name: try_open; Comment: Try to open NAME. 
Name: check_for_scripts_dir; Comment: Return TRUE iff directory DIR contains an "ldscripts" subdirectory. 
Name: find_scripts_dir; Comment: Return the default directory for finding script files. We look for the "ldscripts" directory in: SCRIPTDIR (passed from Makefile) _ (adjusted according to the current location of the binary) the dir where this program is (for using it from the build tree). 
Name: ldfile_find_command_file; Comment: If DEFAULT_ONLY is false, try to open NAME; if that fails, look for it in directories specified with -L, then in the default script directory. If DEFAULT_ONLY is true, the search is restricted to the default script location. 
Name: ldfile_open_command_file_1; Comment: Open command file NAME. 
Name: ldfile_open_command_file; Comment: Open command file NAME in the current directory, -L directories, the default script location, in that order. 
Name: ldfile_open_default_command_file; Comment: Open command file NAME at the default script location. 
Name: ldfile_set_output_arch; Comment: Set the output architecture. 
Name: is_simple_wild; Comment: A simple wild is a literal string followed by a single '*', where the literal part is at least 4 characters long. 
Name: spec_match; Comment: Given an analyzed wildcard_spec SPEC, match it against NAME, returns zero on a match, non-zero if there's no match. 
Name: archive_path; Comment: If PATTERN is of the form archive:file, return a pointer to the separator. If not, return NULL. 
Name: input_statement_is_archive_path; Comment: Given that FILE_SPEC results in a non-NULL SEP result from archive_path, return whether F matches FILE_SPEC. 
Name: walk_wild_file_in_exclude_list; Comment: Return true if FILE matches a pattern in EXCLUDE_LIST, otherwise return false. 
Name: add_matching_section; Comment: Add SECTION (from input FILE) to the list of matching sections within PTR (the matching wildcard is SEC). 
Name: walk_wild_section_match; Comment: Process section S (from input file FILE) in relation to wildcard statement PTR. We already know that a prefix of the name of S matches some wildcard in PTR's wildcard list. Here we check if the filename matches as well (if it's specified) and if any of the wildcards in fact does match. 
Name: get_init_priority; Comment: Return the numerical value of the init_priority attribute from section name NAME. 
Name: compare_section; Comment: Compare sections ASEC and BSEC according to SORT. 
Name: sort_filename; Comment: PE puts the sort key in the input statement. 
Name: wild_sort; Comment: Handle wildcard sorting. This returns the place in a binary search tree where this FILE:SECTION should be inserted for wild statement WILD where the spec SEC was the matching one. The tree is later linearized. 
Name: output_section_callback_sort; Comment: Use wild_sort to build a BST to sort sections. 
Name: output_section_callback_tree_to_list; Comment: Convert a sorted sections' BST back to list form. 
Name: get_prefix_tree; Comment: Given a prefix tree in *TREE, corresponding to prefix P, find or INSERT the tree node corresponding to prefix P+C. 
Name: pt_add_stmt; Comment: Add STMT to the set of statements that can be matched by the prefix corresponding to prefix tree T. 
Name: insert_prefix_tree; Comment: Insert STMT into the global prefix tree. 
Name: debug_prefix_tree_rec; Comment: Dump T indented by INDENT spaces. 
Name: debug_prefix_tree; Comment: Dump the global prefix tree. 
Name: rstrcspn; Comment: Like strcspn() but start to look from the end to beginning of S. Returns the length of the suffix of S consisting entirely of characters not in REJECT. 
Name: analyze_walk_wild_section_handler; Comment: Analyze the wildcards in wild statement PTR to setup various things for quick matching. 
Name: resolve_wild_sections; Comment: Match all sections from FILE against the global prefix tree, and record them into each wild statement that has a match. 
Name: resolve_wilds; Comment: Match all sections from all input files against the global prefix tree. 
Name: walk_wild; Comment: For each input section that matches wild statement S calls CALLBACK with DATA. 
Name: lang_for_each_statement_worker; Comment: lang_for_each_statement walks the parse tree and calls the provided function for each node, except those inside output section statements with constraint set to -1. 
Name: lang_list_init; Comment: ----------------------------------------------------------------------
Name: new_statement; Comment: Build a new statement node for the parse tree. 
Name: new_afile; Comment: None they may, for example be split over several lines like foo.o(.text) foo.o(.data) etc, so when asked for a file we check that we haven't got it already so we don't duplicate the bfd. 
Name: output_section_statement_newfunc; Comment: Support routines for the hash table used by lang_output_section_find, initialize the table, fill in an entry and remove the table. 
Name: lang_init; Comment: Build enough state so that the parser can build its tree. 
Name: lang_output_section_get; Comment: Get the output section statement directly from the userdata. 
Name: lang_output_section_statement_lookup; Comment: Find or create an output_section_statement with the given NAME. If CONSTRAINT is non-zero match one with that constraint, otherwise match any non-negative constraint. If CREATE is 0 return NULL when no match exists. If CREATE is 1, create an output_section_statement when no match exists or if CONSTRAINT is SPECIAL. If CREATE is 2, always make a new output_section_statement. 
Name: next_matching_output_section_statement; Comment: Find the next output_section_statement with the same name as OS. If CONSTRAINT is non-zero, find one with that constraint otherwise match any non-negative constraint. 
Name: lang_output_section_find_by_flags; Comment: A variant of lang_output_section_find used by place_orphan. Returns the output statement that should precede a new output statement for SEC. If an exact match is found on certain flags, sets *EXACT too. 
Name: output_prev_sec_find; Comment: Find the last output section before given output statement. Used by place_orphan. 
Name: insert_os_after; Comment: Look for a suitable place for a new output section statement. The idea is to skip over anything that might be inside a SECTIONS {} statement in a script, before we find another output section statement. Assignments to "dot" before an output section statement are assumed to belong to it, except in two cases; The first assignment to dot, and assignments before non-alloc sections. Otherwise we might put an orphan before . = . + SIZEOF_HEADERS or similar assignments that set the initial address, or we might insert non-alloc note sections among assignments setting end of image symbols. 
Name: init_os; Comment: Initialize an output section. 
Name: exp_init_os; Comment: Make sure that all output sections mentioned in an expression are initialized. 
Name: lang_discard_section_p; Comment: Returns true if SECTION is one we know will be discarded based on its section flags, otherwise returns false. 
Name: lang_add_section; Comment: Add SECTION to the output section OUTPUT. Do this by creating a lang_input_section statement which is placed at PTR. 
Name: output_section_callback_nosort; Comment: Expand a wild statement for a particular FILE. SECTION may be NULL, in which case it is a wild card. This assumes that the wild statement doesn't need any sorting (of filenames or sections). 
Name: check_section_callback; Comment: Check if all sections in a wild statement for a particular FILE are readonly. 
Name: lookup_name; Comment: This is passed a file name which must have been seen already and added to the statement tree. We will see if it has been opened already and had its symbols read. If not then we'll read it. 
Name: load_symbols; Comment: Get the symbols for an input file. 
Name: wild; Comment: Handle a wild statement. S->FILENAME or S->SECTION_LIST or both may be NULL, indicating that it is a wildcard. Separate lang_input_section statements are created for each part of the expansion; they are added after the wild statement S. OUTPUT is the output section. 
Name: get_target; Comment: Return TRUE iff target is the sought target. 
Name: stricpy; Comment: Like strcpy() but convert to lower case as well. 
Name: strcut; Comment: Remove the first occurrence of needle (if any) in haystack from haystack. 
Name: name_compare; Comment: Compare two target format name strings. Return a value indicating how "similar" they are. 
Name: closest_target_match; Comment: Scan all the valid bfd targets looking for one that has the endianness requirement that was specified on the command line, and is the nearest match to the original output target. 
Name: get_first_input_target; Comment: Return the BFD target format of the first input file. 
Name: open_output; Comment: Open the output file. 
Name: lang_ctf_errs_warnings; Comment: Emit CTF errors and warnings. fp can be NULL to report errors/warnings that happened specifically at CTF open time. 
Name: ldlang_open_ctf; Comment: Open the CTF sections in the input files with libctf: if any were opened, create a fake input file that we'll write the merged CTF data to later on. 
Name: lang_merge_ctf; Comment: Merge together CTF sections. After this, only the symtab-dependent function and data object sections need adjustment. 
Name: ldlang_ctf_acquire_strings; Comment: Let the emulation acquire strings from the dynamic strtab to help it optimize the CTF, if supported. 
Name: ldlang_ctf_new_dynsym; Comment: Inform the emulation about the addition of a new dynamic symbol, in BFD internal format. 
Name: lang_write_ctf; Comment: Write out the CTF section. Called early, if the emulation isn't going to need to dedup against the strtab and symtab, then possibly called from the target linker code if the dedup has happened. 
Name: ldlang_write_ctf_late; Comment: Write out the CTF section late, if the emulation needs that. 
Name: insert_undefined; Comment: Insert NAME as undefined in the symbol table. 
Name: lang_place_undefineds; Comment: Run through the list of undefineds created above and place them into the linker hash table as undefined symbols belonging to the script file. 
Name: lang_mark_undefineds; Comment: Mark -u symbols against garbage collection. 
Name: ldlang_add_require_defined; Comment: Add a new symbol NAME to the list of symbols that are required to be defined. 
Name: ldlang_check_require_defined_symbols; Comment: Check that all symbols the user required to be defined, are defined, raise an error if we find a symbol that is not defined. 
Name: ; Comment: Check for all readonly or some readwrite sections. 
Name: update_wild_statements; Comment: Update wildcard statements if needed. 
Name: ; Comment: Open input files and attach to output sections. 
Name: process_insert_statements; Comment: An insert statement snips out all the linker statements from the start of the list and places them after the output section statement specified by the insert. This operation is complicated by the fact that we keep a doubly linked list of output section statements as well as the singly linked list of all statements. FIXME someday: Twiddling with the list not only moves statements from the user's script but also input and group statements that are built from command line object files and --start-group. We only get away with this because the list pointers used by file_chain and input_file_chain are not reordered, and processing via statement_list after this point mostly ignores input statements. One exception is the map file, where LOAD and START GROUP/END GROUP can end up looking odd. 
Name: strip_excluded_output_sections; Comment: An output section might have been removed after its statement was added. For example, ldemul_before_allocation can remove dynamic sections if they turn out to be not needed. Clean them up here. 
Name: lang_clear_os_map; Comment: Called from ldwrite to clear out asection.map_head and asection.map_tail for use as link_orders in ldwrite. 
Name: print_one_symbol; Comment: Print all symbols defined in a particular section. This is called via bfd_link_hash_traverse, or by print_all_symbols. 
Name: print_input_section; Comment: Print information about an input section to the map file. 
Name: print_address_statement; Comment: Print an address statement. These are generated by options like -Ttext. 
Name: print_reloc_statement; Comment: Print a reloc statement. 
Name: print_group; Comment: Print a group statement. 
Name: print_statement_list; Comment: Print the list of statements in S. This can be called for any statement type. 
Name: print_statement; Comment: Print the first statement in statement list S. This can be called for any statement type. 
Name: dprint_statement; Comment: Print the first N statements in statement list S to STDERR. If N == 0, nothing is printed. If N < 0, the entire list is printed. Intended to be called from GDB. 
Name: ; Comment: Work out how much this section will move the dot point. 
Name: lang_check_section_addresses; Comment: Check to see if any allocated sections overlap with other allocated sections. This can happen if a linker script specifies the output section addresses of the two sections. Also check whether any memory region has overflowed. 
Name: os_region_check; Comment: Make sure the new address is within the region. We explicitly permit the current address to be at the exact end of the region when the address is non-zero, in case the region is at the end of addressable memory and the calculation wraps around. 
Name: ; Comment: Set the sizes for all the output sections. 
Name: ldlang_override_segment_assignment; Comment: Callback routine that is used in _bfd_elf_map_sections_to_segments. The BFD library has set NEW_SEGMENT to TRUE iff it thinks that CURRENT_SECTION and PREVIOUS_SECTION ought to be placed into different segments. We are allowed an opportunity to override this decision. 
Name: lang_do_assignments_1; Comment: Worker function for lang_do_assignments. Recursiveness goes here. 
Name: section_for_dot; Comment: For an assignment statement outside of an output section statement, choose the best of neighbouring output sections to use for values of "dot". 
Name: lang_define_start_stop; Comment: Give start/stop SYMBOL for SEC a preliminary definition, and add it to start_stop_syms. 
Name: lang_init_start_stop; Comment: Check for input sections whose names match references to __start_SECNAME or __stop_SECNAME symbols. Give the symbols preliminary definitions. 
Name: foreach_start_stop; Comment: Iterate over start_stop_syms. 
Name: undef_start_stop; Comment: __start and __stop symbols are only supposed to be defined by the linker for orphan sections, but we now extend that to sections that map to an output section of the same name. The symbols were defined early for --gc-sections, before we mapped input to output sections, so undo those that don't satisfy this rule. 
Name: lang_init_startof_sizeof; Comment: Check for output sections whose names match references to .startof.SECNAME or .sizeof.SECNAME symbols. Give the symbols preliminary definitions. 
Name: set_start_stop; Comment: Set .startof., .sizeof., __start and __stop symbols final values. 
Name: ignore_bfd_errors; Comment: This is a small function used when we want to ignore errors from BFD. 
Name: lang_check; Comment: Check that the architecture of all the input files is compatible with the output file. Also call the backend to let it do any other checking that is needed. 
Name: lang_common; Comment: Look through all the global common symbols and attach them to the correct section. The -sort-common command line switch may be used to roughly sort the entries by alignment. 
Name: lang_one_common; Comment: Place one common symbol in the correct section. 
Name: ldlang_place_orphan; Comment: Handle a single orphan section S, placing the orphan into an appropriate output section. The effects of the --orphan-handling command line option are handled here. 
Name: lang_place_orphans; Comment: Run through the input files and ensure that every input section has somewhere to go. If one is found without a destination then create an input request and place it into the statement tree. 
Name: lang_for_each_input_file; Comment: Call a function on each real input file. This function will be called on an archive, but not on the elements. 
Name: lang_for_each_file; Comment: Call a function on each real file. The function will be called on all the elements of an archive which are included in the link, but will not be called on the archive file itself. 
Name: lang_reset_memory_regions; Comment: Reset the current counters in the regions. 
Name: gc_section_callback; Comment: Worker for lang_gc_sections_1. 
Name: lang_gc_sections_1; Comment: Iterate over sections marking them against GC. 
Name: find_relro_section_callback; Comment: Worker for lang_find_relro_sections_1. 
Name: lang_find_relro_sections_1; Comment: Iterate over sections for relro sections. 
Name: lang_relax_sections; Comment: Relax all sections until bfd_relax_section gives up. 
Name: find_replacements_insert_point; Comment: Find the insert point for the plugin's replacement files. We place them after the first claimed real object file, or if the first claimed object is an archive member, after the last real object file immediately preceding the archive. In the event no objects have been claimed at all, we return the first dummy object file on the list as the insert point; that works, but the callee must be careful when relinking the file_chain as it is not actually on that chain, only the statement_list and the input_file list; in that case, the replacement files must be inserted at the head of the file_chain. 
Name: find_rescan_insertion; Comment: Find where to insert ADD, an archive element or shared library added during a rescan. 
Name: lang_list_insert_after; Comment: Insert SRCLIST into DESTLIST after given element by chaining on FIELD as the next-pointer. (Counterintuitively does not need a pointer to the actual after-node itself, just its chain field.) 
Name: lang_list_remove_tail; Comment: Detach new nodes added to DESTLIST since the time ORIGLIST was taken as a copy of it and leave them in ORIGLIST. 
Name: lang_add_gc_name; Comment: Add NAME to the list of garbage collection entry points. 
Name: lang_check_relocs; Comment: Check relocations. 
Name: lang_propagate_lma_regions; Comment: Look through all output sections looking for places where we can propagate forward the lma region. 
Name: lang_add_wild; Comment: EXPORTED TO YACC 
Name: lang_add_entry; Comment: Set the start symbol to NAME. CMDLINE is nonzero if this is called because of a -e argument on the command line, or zero if this is called by ENTRY in a linker script. Command line arguments take precedence. 
Name: lang_default_entry; Comment: Set the default start symbol to NAME. .em files should use this, not lang_add_entry, to override the use of "start" if neither the linker script nor the command line specifies an entry point. NAME must be permanently allocated. 
Name: lang_add_reloc; Comment: Create a new reloc statement. RELOC is the BFD relocation type to generate. HOWTO is the corresponding howto structure (we could look this up, but the caller has already done so). SECTION is the section to generate a reloc against, or NAME is the name of the symbol to generate a reloc against. Exactly one of SECTION and NAME must be NULL. ADDEND is an expression for the addend. 
Name: lang_get_regions; Comment: Work out the load- and run-time regions from a script statement, and store them in *LMA_REGION and *REGION respectively. MEMSPEC is the name of the run-time region, or the value of DEFAULT_MEMORY_REGION if the statement didn't specify one. LMA_MEMSPEC is the name of the load-time region, or null if the statement didn't specify one.HAVE_LMA_P is TRUE if the statement had an explicit load address. It is an error to specify both a load region and a load address. 
Name: lang_add_output_format; Comment: Set the output format type. -oformat overrides scripts. 
Name: lang_enter_group; Comment: Enter a group. This creates a new lang_group_statement, and sets stat_ptr to build new statements within the group. 
Name: lang_leave_group; Comment: Leave a group. This just resets stat_ptr to start writing to the regular list of statements again. Note that this will not work if groups can occur inside anything else which can adjust stat_ptr, but currently they can't. 
Name: lang_new_phdr; Comment: Add a new program header. This is called for each entry in a PHDRS command in a linker script. 
Name: lang_record_phdrs; Comment: Record the program header information in the output BFD. FIXME: We should not be calling an ELF specific function here. 
Name: lang_add_nocrossref; Comment: Record a list of sections which may not be cross referenced. 
Name: lang_add_nocrossref_to; Comment: Record a section that cannot be referenced from a list of sections. 
Name: lang_enter_overlay; Comment: Start handling an overlay. 
Name: lang_enter_overlay_section; Comment: Start a section in an overlay. We handle this by calling lang_enter_output_section_statement with the correct VMA. lang_leave_overlay sets up the LMA and memory regions. 
Name: lang_leave_overlay_section; Comment: Finish a section in an overlay. There isn't any special to do here. 
Name: lang_leave_overlay; Comment: Finish an overlay. If there are any overlay wide settings, this looks through all the sections in the overlay and sets them. 
Name: lang_vers_match; Comment: If PREV is NULL, return first version pattern matching particular symbol. If PREV is non-NULL, return first version pattern matching particular symbol after PREV (previously returned by lang_vers_match). 
Name: realsymbol; Comment: Return NULL if the PATTERN argument is a glob pattern, otherwise, return a pointer to the symbol name with any backslash quotes removed. 
Name: lang_new_vers_pattern; Comment: This is called for each variable name or match expression. NEW_NAME is the name of the symbol to match, or, if LITERAL_P is FALSE, a glob pattern to be matched against symbol names. 
Name: lang_new_vers_node; Comment: This is called for each set of variable names and match expressions. 
Name: lang_register_vers_node; Comment: This is called when we know the name and dependencies of the version. 
Name: lang_add_vers_depend; Comment: This is called when we see a version dependency. 
Name: lang_do_memory_regions; Comment: Evaluate LENGTH and ORIGIN parts of MEMORY spec. This is initially called with UPDATE_REGIONS_P set to FALSE, in this case no errors are thrown, however, references to symbols in the origin and length fields will be pushed into the symbol table, this allows PROVIDE statements to then provide these symbols. This function is called a second time with UPDATE_REGIONS_P set to TRUE, this time the we update the actual region data structures, and throw errors if missing symbols are encountered. 
Name: lang_append_dynamic_list; Comment: Append the list of dynamic symbols to the existing one. 
Name: lang_append_dynamic_list_cpp_typeinfo; Comment: Append the list of C++ typeinfo dynamic symbols to the existing one. 
Name: lang_append_dynamic_list_cpp_new; Comment: Append the list of C++ operator new and delete dynamic symbols to the existing one. 
Name: lang_ld_feature; Comment: Scan a space and/or comma separated string of features. 
Name: lang_print_memory_size; Comment: Pretty print memory amount. 
Name: lang_print_memory_usage; Comment: Implement --print-memory-usage: disply per region memory usage. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: lex_push_file; Comment: Switch flex to reading script file NAME, open on FILE, saving the current input info on the include stack. 
Name: yy_create_string_buffer; Comment: Return a newly created flex input buffer containing STRING, which is SIZE bytes long. 
Name: lex_redirect; Comment: Switch flex to reading from STRING, saving the current input info on the include stack. 
Name: ldlex_backup; Comment: In cases where the parser needs to look ahead and the context changes from expression to script or vice-versa, throw away a NAME. What constitutes a NAME depends on context. 
Name: ldlex_filename; Comment: Return the current file name, or the previous file if no file is current. 
Name: yy_input; Comment: Place up to MAX_SIZE characters in BUF and return either the number of characters read, or 0 to indicate EOF. 
Name: comment; Comment: Eat the rest of a C-style comment. 
Name: lex_warn_invalid; Comment: Warn the user about a garbage character WHAT in the input in context WHERE. 
Name: ld_bfd_assert_handler; Comment: Hook to notice BFD assertions. 
Name: ld_bfd_error_handler; Comment: Hook the bfd error/warning handler for --fatal-warnings. 
Name: get_relative_sysroot; Comment: If the configured sysroot is relocatable, try relocating it based on default prefix FROM. Return the relocated directory if it exists, otherwise return null. 
Name: get_sysroot; Comment: Return the sysroot directory. Return "" if no sysroot is being used. 
Name: get_emulation; Comment: We need to find any explicitly given emulation in order to initialize the state that's needed by the lex&yacc argument parser (parse_args). 
Name: add_wrap; Comment: Record a symbol to be wrapped, from the --wrap option. 
Name: add_keepsyms_file; Comment: Handle the -retain-symbols-file option. 
Name: add_archive_element; Comment: This is called when BFD has decided to include an archive member in a link. 
Name: multiple_definition; Comment: This is called when BFD has discovered a symbol which is defined multiple times. 
Name: multiple_common; Comment: This is called when there is a definition of a common symbol, or when a common symbol is found for a symbol that is already defined, or when two common symbols are found. We only do something if -warn-common was used. 
Name: add_to_set; Comment: This is called when BFD has discovered a set element. H is the entry in the linker hash table for the set. SECTION and VALUE represent a value which should be added to the set. 
Name: constructor_callback; Comment: This is called when BFD has discovered a constructor. This is only called for some object file formats--those which do not handle constructors in some more clever fashion. This is similar to adding an element to a set, but less general. 
Name: symbol_warning; Comment: Look through the relocs to see if we can find a plausible address for SYMBOL in ABFD. Return TRUE if found. Otherwise return FALSE. 
Name: warning_callback; Comment: This is called when there is a reference to a warning symbol. 
Name: warning_find_reloc; Comment: This is called by warning_callback for each section. It checks the relocs of the section to see if it can find a reference to the symbol which triggered the warning. If it can, it uses the reloc to give an error message with a file and line number. 
Name: undefined_symbol; Comment: This is called when an undefined symbol is found. 
Name: reloc_overflow; Comment: This is called when a reloc overflows. 
Name: reloc_dangerous; Comment: This is called when a dangerous relocation is made. 
Name: unattached_reloc; Comment: This is called when a reloc is being generated attached to a symbol that is not being output. 
Name: notice; Comment: This is called if link_info.notice_all is set, or when a symbol in link_info.notice_hash is found. Symbols are put in notice_hash using the -y option, while notice_all is set if the --cref option has been supplied, or if there are any NOCROSSREFS sections in the linker script; and if plugins are active, since they need to monitor all references from non-IR files. 
Name: vfinfo; Comment: %% literal % %C clever filename:linenumber with function %D like %C, but no function name %E current bfd error or errno %F error is fatal %G like %D, but only function name %H like %C but in addition emit section+offset %P print program name %V hex bfd_vma %W hex bfd_vma with 0x with no leading zeros taking up 10 spaces %X no object output, fail return %d integer, like printf %ld long, like printf %lu unsigned long, like printf %p native (host) void* pointer, like printf %pA section name from a section %pB filename from a bfd %pI filename from a lang_input_statement_type %pR info about a relent %pS print script file and linenumber from etree_type. %pT symbol name %pU print script file without linenumber from etree_type. %s arbitrary string, like printf %u integer, like printf %v hex bfd_vma, no leading zeros 
Name: info_msg; Comment: (You would think this should be called just "info", but then you would be hosed by LynxOS, which defines that name in its libc.) 
Name: einfo; Comment: ('e' for error.) Format info message and print on stderr. 
Name: minfo; Comment: ('m' for map) Format info message and print on map. 
Name: print_spaces; Comment: Functions to print the link map. 
Name: ld_abort; Comment: A more or less friendly abort message. In ld.h abort is defined to call this function. 
Name: build_link_order; Comment: Build link_order structures for the BFD linker. 
Name: unsplittable_name; Comment: Return true if NAME is the name of an unsplittable section. These are the stabs strings, dwarf strings. 
Name: ldwrite; Comment: Call BFD to write out the linked file. 
Name: set_default_dirlist; Comment: Add the (colon-separated) elements of DIRLIST_PTR to the library search path. 
Name: help; Comment: Print help messages for the options. 
Name: parse_tv_tag; Comment: Handle/record information received in a transfer vector entry. 
Name: str2vec; Comment: Turn a string into an argvec. 
Name: onclaim_file; Comment: Standard plugin API registerable hook. 
Name: onall_symbols_read; Comment: Standard plugin API registerable hook. 
Name: oncleanup; Comment: Standard plugin API registerable hook. 
Name: onload; Comment: Standard plugin API entry point. 
Name: mri_only_load; Comment: If any ABSOLUTE <name> are in the script, only load those files marked thus. 
Name: add_stream; Comment: Add a new stream to the PDB archive, and return its BFD. 
Name: create_old_directory_stream; Comment: Stream 0 ought to be a copy of the MSF directory from the last time the PDB file was written. Because we don't do incremental writes this isn't applicable to us, but we fill it with a dummy value so as not to confuse radare. 
Name: calc_hash; Comment: Calculate the hash of a given string. 
Name: populate_info_stream; Comment: Stream 1 is the PDB info stream - see https://llvm.org/docs/PDB/PdbStream.html. 
Name: crc32; Comment: Calculate the CRC32 used for type hashes. 
Name: populate_type_stream; Comment: Stream 2 is the type information (TPI) stream, and stream 4 is the ID information (IPI) stream. They differ only in which records go in which stream. 
Name: get_arch_number; Comment: Return the PE architecture number for the image. 
Name: copy_filechksms; Comment: Validate the DEBUG_S_FILECHKSMS entry within a module's .debug$S section, and copy it to the module's symbol stream. 
Name: add_string; Comment: Add a string to the strings table, if it's not already there. Returns its offset within the string table. 
Name: hash_string_table_entry; Comment: Return the hash of an entry in the string table. 
Name: eq_string_table_entry; Comment: Compare an entry in the string table with a string. 
Name: parse_string_table; Comment: Parse the string table within the .debug$S section. 
Name: remap_symbol_type; Comment: Remap a type reference within a CodeView symbol. 
Name: add_globals_ref; Comment: Add an entry into the globals stream. If it already exists, increase the refcount. 
Name: find_end_of_scope; Comment: Find the end of the current scope within symbols data. 
Name: extended_value_len; Comment: Return the size of an extended value parameter, as used in LF_ENUMERATE etc. 
Name: parse_symbols; Comment: Parse the symbols in a .debug$S section, and copy them to the module's symbol stream. 
Name: calculate_symbols_size; Comment: For a given symbol subsection, work out how much space to allocate in the result module stream. This is different because we don't copy certain symbols, such as S_CONSTANT, and we skip over any procedures or data that have been GC'd out. 
Name: handle_debugs_section; Comment: Parse the .debug$S section within an object file. 
Name: remap_type; Comment: Remap the type number stored in data from the per-module numbering to that of the deduplicated output list. 
Name: is_name_anonymous; Comment: Determines whether the name of a struct, class, or union counts as "anonymous". Non-anonymous types have a hash based on just the name, rather than the whole structure. 
Name: handle_udt_src_line; Comment: Handle LF_UDT_SRC_LINE type entries, which are a special case. These give the source file and line number for each user-defined type that is declared. We parse these and emit instead an LF_UDT_MOD_SRC_LINE entry, which also includes the module number. 
Name: handle_type; Comment: Parse a type definition in the .debug$T section. We remap the numbers of any referenced types, and if the type is not a duplicate of one already seen add it to types (for TPI types) or ids (for IPI types). 
Name: handle_debugt_section; Comment: Parse the .debug$T section of a module, and pass any type definitions found to handle_type. 
Name: create_linker_symbols; Comment: Create the symbols that go in "* Linker *", the dummy module created for the linker itself. 
Name: populate_module_stream; Comment: Populate the module stream, which consists of the transformed .debug$S data for each object file. 
Name: create_module_info_substream; Comment: Create the module info substream within the DBI. 
Name: find_section_number; Comment: Return the index of a given output section. 
Name: create_section_contrib_substream; Comment: Create the substream which maps addresses in the image file to locations in the original object files. 
Name: create_source_info_substream; Comment: The source info substream lives within the DBI stream, and lists the source files for each object file (i.e. it's derived from the DEBUG_S_FILECHKSMS parts of the .debug$S sections). This is a bit superfluous, as the filenames are also available in the C13 parts of the module streams, but MSVC relies on it to work properly. 
Name: global_compare_hash; Comment: Used as parameter to qsort, to sort globals by hash. 
Name: create_globals_stream; Comment: Create the globals stream, which contains the unmangled symbol names. 
Name: hash_global_entry; Comment: Hash an entry in the globals list. 
Name: eq_global_entry; Comment: Compare an entry in the globals list with a symbol. 
Name: populate_dbi_stream; Comment: Stream 4 is the debug information (DBI) stream. 
Name: public_compare_hash; Comment: Used as parameter to qsort, to sort publics by hash. 
Name: public_compare_addr; Comment: Used as parameter to qsort, to sort publics by address. 
Name: populate_publics_stream; Comment: The publics stream is a hash map of S_PUB32 records, which are stored in the symbol record stream. Each S_PUB32 entry represents a symbol from the point of view of the linker: a section index, an offset within the section, and a mangled name. Compare with S_GDATA32 and S_GPROC32, which are the same thing but generated by the compiler. 
Name: create_section_header_stream; Comment: The section header stream contains a copy of the section headers from the PE file, in the same format. 
Name: populate_names_stream; Comment: Populate the "/names" named stream, which contains the string table. 
Name: hash_type_entry; Comment: Calculate the hash of a type_entry. 
Name: eq_type_entry; Comment: Compare a type_entry with a type. 
Name: create_pdb_file; Comment: Create a PDB debugging file for the PE image file abfd with the build ID guid, stored at pdb_name. 
Name: libnamencmp; Comment: Regardless of the suffix issue mentioned above, we must ensure that we do not falsely match on a leading substring, such as when libtool builds libstdc++ as a DLL using libsupc++convenience.a as an intermediate. This routine ensures that the leading part of the name matches and that it is followed by only an optional version suffix and a file extension, returning zero if so or -1 if not. 
Name: auto_export; Comment: abfd is a bfd containing n (or NULL) It can be used for contextual checks. 
Name: build_filler_bfd; Comment: Build the bfd that will contain .edata and .reloc sections. 
Name: generate_edata; Comment: Gather all the exported symbols and build the .edata section. 
Name: fill_exported_offsets; Comment: Fill the exported symbol offsets. The preliminary work has already been done in process_def_file_and_drectve(). 
Name: generate_reloc; Comment: Gather all the relocations and build the .reloc section. 
Name: quoteput; Comment: Given the exiting def_file structure, print out a .DEF file that corresponds to it. 
Name: make_head; Comment: _.section_.idata$2_.global____head_my_dll __head_my_dll: _.rva__hname _.long__0 _.long__0 _.rva____my_dll_iname _.rva__fthunk _.section_.idata$5 _.long__0 fthunk: _.section_.idata$4 _.long__0 hname: 
Name: make_tail; Comment: _.section_.idata$4_.long__0 _[.long__0] for PE+ _.section_.idata$5 _.long__0 _[.long__0] for PE+ _.section_idata$7 _.global____my_dll_iname __my_dll_iname: _.asciz__"my.dll" 
Name: make_import_fixup_entry; Comment: _.section_.idata$2_.rva____nm_thnk_SYM (singleton thunk with name of func) _.long__0 _.long__0 _.rva____my_dll_iname (name of dll) _.rva____fuNN_SYM (pointer to reference (address) in text) 
Name: make_runtime_pseudo_reloc; Comment: _.section_.rdata_runtime_pseudo_reloc_.long__addend _.rva____fuNN_SYM (pointer to reference (address) in text) 
Name: pe_create_runtime_relocator_reference; Comment: _.section_.rdata_.rva____pei386_runtime_relocator 
Name: pe_get16; Comment: We were handed a *.DLL file. Parse it and turn it into a set of IMPORTS directives in the def file. Return TRUE if the file was handled, FALSE if not. 
Name: pe_dll_build_sections; Comment: These are the main functions, called from the emulation. The first is called after the bfds are read, so we can guess at how much space we need. The second is called after everything is placed, so we can put the right values in place. 
Name: set_plugin_error; Comment: Helper function for exiting with error status. 
Name: plugin_error_p; Comment: Test if an error occurred. 
Name: plugin_error_plugin; Comment: Return name of plugin which caused an error if any. 
Name: plugin_opt_plugin; Comment: Handle -plugin arg: find and load plugin, or return error. 
Name: plugin_opt_plugin_arg; Comment: Accumulate option arguments for last-loaded plugin, or return error if none. 
Name: plugin_get_ir_dummy_bfd; Comment: Generate a dummy BFD to represent an IR file, for any callers of plugin_call_claim_file to use as the handle in the ld_plugin_input_file struct that they build to pass in. The BFD is initially writable, so that symbols can be added to it; it must be made readable after the add_symbols hook has been called so that it can be read when linking. 
Name: asymbol_from_plugin_symbol; Comment: Helpers to convert between BFD and GOLD symbol formats. 
Name: register_all_symbols_read; Comment: Register an all-symbols-read handler. 
Name: register_cleanup; Comment: Register a cleanup handler. 
Name: add_symbols; Comment: Add symbols from a plugin-claimed input file. 
Name: get_input_file; Comment: Get the input file information with an open (possibly re-opened) file descriptor. 
Name: get_view; Comment: Get view of the input file. 
Name: release_plugin_file_descriptor; Comment: Release plugin file descriptor. 
Name: release_input_file; Comment: Release the input file. 
Name: get_lto_kind; Comment: Return LTO kind string name that corresponds to IDX enum value. 
Name: get_lto_resolution; Comment: Return LTO resolution string name that corresponds to IDX enum value. 
Name: get_lto_visibility; Comment: Return LTO visibility string name that corresponds to IDX enum value. 
Name: get_symbols; Comment: Get the symbol resolution info for a plugin-claimed input file. 
Name: add_input_file; Comment: Add a new (real) input file generated by a plugin. 
Name: add_input_library; Comment: Add a new (real) library required by a plugin. 
Name: set_extra_library_path; Comment: Set the extra library path to be used by libraries added via add_input_library. 
Name: message; Comment: Issue a diagnostic message from a plugin. 
Name: set_tv_header; Comment: Helper to size leading part of tv array and set it up. 
Name: set_tv_plugin_args; Comment: Append the per-plugin args list and trailing LDPT_NULL to tv. 
Name: plugin_load_plugins; Comment: Load up and initialise all plugins after argument parsing. 
Name: plugin_call_claim_file; Comment: Call 'claim file' hook for all plugins. 
Name: plugin_strdup; Comment: Duplicates a character string with memory attached to ABFD. 
Name: plugin_call_all_symbols_read; Comment: Call 'all symbols read' hook for all plugins. 
Name: plugin_call_cleanup; Comment: Call 'cleanup' hook for all plugins at exit. 
Name: plugin_notice; Comment: To determine which symbols should be resolved LDPR_PREVAILING_DEF and which LDPR_PREVAILING_DEF_IRONLY, we notice all the symbols as the linker adds them to the linker hash table. Mark those referenced from a non-IR file with non_ir_ref_regular or non_ir_ref_dynamic as appropriate. We have to notice_all symbols, because we won't necessarily know until later which ones will be contributed by IR files. 
Name: record_claim_file; Comment: Add a new claimfile on the end of the chain. 
Name: record_read_length; Comment: How many bytes to read before claiming (or not) an input file. 
Name: record_add_file; Comment: Add a new addfile on the end of the chain. 
Name: parse_symdefstr; Comment: Parse a command-line argument string into a symbol definition. Symbol-strings follow the colon-separated format: _NAME:VERSION:def:vis:size:COMDATKEY where the fields in capitals are strings and those in lower case are integers. We don't allow to specify a resolution as doing so is not meaningful when calling the add symbols hook. 
Name: record_claimed_file_symbol; Comment: Record a symbol to be added for the last-added claimfile. 
Name: set_ret_val; Comment: Records the status to return from one of the registered hooks. 
Name: set_register_hook; Comment: Records hooks which should be registered. 
Name: parse_option; Comment: Determine type of plugin option and pass to individual parsers. 
Name: dump_tv_tag; Comment: Output contents of transfer vector array entry in human-readable form. 
Name: parse_and_dump_tv_tag; Comment: Record any useful information in transfer vector entry and display it in human-readable form using the plugin API message() callback. 
Name: parse_symdefstr; Comment: Parse a command-line argument string into a symbol definition. Symbol-strings follow the colon-separated format: _NAME:VERSION:def:vis:size:COMDATKEY where the fields in capitals are strings and those in lower case are integers. We don't allow to specify a resolution as doing so is not meaningful when calling the add symbols hook. 
Name: parse_symdefstr; Comment: Parse a command-line argument string into a symbol definition. Symbol-strings follow the colon-separated format: _NAME:VERSION:def:vis:size:COMDATKEY where the fields in capitals are strings and those in lower case are integers. We don't allow to specify a resolution as doing so is not meaningful when calling the add symbols hook. 
Name: parse_symdefstr; Comment: Parse a command-line argument string into a symbol definition. Symbol-strings follow the colon-separated format: _NAME:VERSION:def:vis:size:COMDATKEY where the fields in capitals are strings and those in lower case are integers. We don't allow to specify a resolution as doing so is not meaningful when calling the add symbols hook. 
Name: check_ptr_eq; Comment: Since GCC 5 folds symbol address comparison, assuming each symbol has different address, &foo == &bar is always false for GCC 5. Use check_ptr_eq to check if two functions are the same. 
Name: hide_original_foo; Comment: The 'hide' prefix is something so that we can automatically search the symbol table and verify that none of these symbols were actually exported. 
Name: hide_new_bogus_foo; Comment: In test 10, we try and define a non-existant version node. The linkershould catch this and complain. 
Name: xyzzz; Comment: This test is designed to catch a couple of syntactic errors. The assembler should complain about both of the directives below. 
Name: show; Comment: Test for default versioning. 
Name: implementation; Comment: { dg-options "" } 
Name: main_called; Comment: This function is called by the shared library. 
Name: shlib_overriddencall2; Comment: This function overrides a function in the shared library. 
Name: shlib_mainvar; Comment: These functions return the values of the above variables as seen in the shared library. 
Name: int; Comment: This function returns a pointer to shlib_mainvar. 
Name: int; Comment: This function returns a pointer to main_called. 
Name: shlib_shlibcalled; Comment: This function is called by another file in the shared library. 
Name: ctf_arc_write_fd; Comment: Write out a CTF archive to the start of the file referenced by the passed-in fd. The entries in CTF_DICTS are referenced by name: the names are passed in the names array, which must have CTF_DICTS entries. Returns 0 on success, or an errno, or an ECTF_* value. 
Name: ctf_arc_write; Comment: Write out a CTF archive. The entries in CTF_DICTS are referenced by name: the names are passed in the names array, which must have CTF_DICTS entries. If the filename is NULL, create a temporary file and return a pointer to it. Returns 0 on success, or an errno, or an ECTF_* value. 
Name: arc_write_one_ctf; Comment: Write one CTF file out. Return the file position of the written file (or rather, of the file-size uint64_t that precedes it): negative return is a negative errno or ctf_errno value. On error, the file position may no longer be at the end of the file. 
Name: sort_modent_by_name; Comment: qsort() function to sort the array of struct ctf_archive_modents into ascending name order. 
Name: search_modent_by_name; Comment: bsearch_r() function to search for a given name in the sorted array of struct ctf_archive_modents. 
Name: ctf_new_archive_internal; Comment: Make a new struct ctf_archive_internal wrapper for a ctf_archive or a ctf_dict. Closes ARC and/or FP on error. Arrange to free the SYMSECT or STRSECT, as needed, on close. Possibly do not unmap on close. 
Name: ctf_arc_symsect_endianness; Comment: Set the symbol-table endianness of an archive (defaulting the symtab endianness of all ctf_file_t's opened from that archive). 
Name: ctf_arc_bufpreamble; Comment: Get the CTF preamble from data in a buffer, which may be either an archive or a CTF dict. If multiple dicts are present in an archive, the preamble comes from an arbitrary dict. The preamble is a pointer into the ctfsect passed in. 
Name: ctf_arc_bufopen; Comment: Open a CTF archive or dictionary from data in a buffer (which the caller must preserve until ctf_arc_close() time). Returns the archive, or NULL and an error in *err (if not NULL). 
Name: ctf_arc_open_internal; Comment: Open a CTF archive. Returns the archive, or NULL and an error in *err (if not NULL). 
Name: ctf_arc_close_internal; Comment: Close an archive. 
Name: ctf_arc_close; Comment: Public entry point: close an archive, or CTF file. 
Name: ctf_dict_open_internal; Comment: Return the ctf_dict_t with the given name, or NULL if none, setting 'err' if non-NULL. A name of NULL means to open the default file. 
Name: ctf_dict_open_sections; Comment: Return the ctf_dict_t with the given name, or NULL if none, setting 'err' if non-NULL. A name of NULL means to open the default file. Use the specified string and symbol table sections. Public entry point. 
Name: ctf_dict_open; Comment: Return the ctf_dict_t with the given name, or NULL if none, setting 'err' if non-NULL. A name of NULL means to open the default file. Public entry point. 
Name: ctf_dict_open_cached; Comment: Return the ctf_dict_t with the given name and cache it in the archive's ctfi_dicts. If this is the first cached dict, designate it the crossdict_cache. 
Name: ctf_arc_flush_caches; Comment: Flush any caches the CTF archive may have open. 
Name: ctf_dict_open_by_offset; Comment: Return the ctf_dict_t at the given ctfa_ctfs-relative offset, or NULL if none, setting 'err' if non-NULL. 
Name: ctf_arc_open_by_name; Comment: Backward compatibility. 
Name: ctf_arc_import_parent; Comment: Import the parent into a ctf archive, if this is a child, the parent is not already set, and a suitable archive member exists. No error is raised if this is not possible: this is just a best-effort helper operation to give people useful dicts to start with. 
Name: ctf_archive_count; Comment: Return the number of members in an archive. 
Name: ctf_arc_lookup_sym_or_name; Comment: Look up a symbol in an archive by name or index (if the name is set, a lookup by name is done). Return the dict in the archive that the symbol is found in, and (optionally) the ctf_id_t of the symbol in that dict (so you don't have to look it up yourself). The dict is cached, so repeated lookups are nearly free. As usual, you should ctf_dict_close() the returned dict once you are done with it. Returns NULL on error, and an error in errp (if set). 
Name: ctf_arc_lookup_symbol; Comment: The public API for looking up a symbol by index. 
Name: ctf_arc_lookup_symbol_name; Comment: The public API for looking up a symbol by name. 
Name: ctf_archive_raw_iter_internal; Comment: Raw iteration over all CTF files in an archive. We pass the raw data for all CTF files in turn to the specified callback function. 
Name: ctf_archive_raw_iter; Comment: Raw iteration over all CTF files in an archive: public entry point. Returns -EINVAL if not supported for this sort of archive. 
Name: ctf_archive_iter; Comment: Iterate over all CTF files in an archive: public entry point. We pass all CTF files in turn to the specified callback function. 
Name: ctf_archive_next; Comment: Iterate over all CTF files in an archive, returning each dict in turn as a ctf_dict_t, and NULL on error or end of iteration. It is the caller's responsibility to close it. Parent dicts may be skipped. The archive member is cached for rapid return on future calls. We identify parents by name rather than by flag value: for now, with the linker only emitting parents named _CTF_SECTION, this works well enough. 
Name: arc_mmap_header; Comment: Map the header in. Only used on new, empty files. 
Name: arc_mmap_file; Comment: mmap() the whole file, for reading only. (Map it writably, but privately: we need to modify the region, but don't need anyone else to see the modifications.) 
Name: arc_mmap_writeout; Comment: Persist the header to disk. 
Name: arc_mmap_unmap; Comment: Unmap the region. 
Name: arc_mmap_file; Comment: Pull in the whole file, for reading only. We assume the current file position is at the start of the file. 
Name: ctf_grow_ptrtab; Comment: Make sure the ptrtab has enough space for at least one more type. We start with 4KiB of ptrtab, enough for a thousand types, then grow it 25% at a time. 
Name: ctf_grow_vlen; Comment: Make sure a vlen has enough space: expand it otherwise. Unlike the ptrtab, which grows quite slowly, the vlen grows in big jumps because it is quite expensive to expand: the caller has to scan the old vlen for string refs first and remove them, then re-add them afterwards. The initial size is more or less arbitrary. 
Name: ctf_create; Comment: To create an empty CTF dict, we just declare a zeroed header and call ctf_bufopen() on it. If ctf_bufopen succeeds, we mark the new dict r/w and initialize the dynamic members. We start assigning type IDs at 1 because type ID 0 is used as a sentinel and a not-found indicator. 
Name: ctf_update; Comment: Compatibility: just update the threshold for ctf_discard. 
Name: ctf_discard; Comment: Discard all of the dynamic type definitions and variable definitions that have been added to the dict since the last call to ctf_update(). We locate such types by scanning the dtd list and deleting elements that have type IDs greater than ctf_dtoldid, which is set by ctf_update(), above, and by scanning the variable list and deleting elements that have update IDs equal to the current value of the last-update snapshot count (indicating that they were added after the most recent call to ctf_update()). 
Name: ctf_rollback; Comment: Like ctf_discard(), only discards everything after a particular ID. 
Name: ctf_add_generic; Comment: Note: vlen is the amount of space *allocated* for the vlen. It may well not be the amount of space used (yet): the space used is declared in per-kind fashion in the dtd_data's info word. 
Name: clp2; Comment: When encoding integer sizes, we want to convert a byte count in the range 1-8 to the closest power of 2 (e.g. 3->4, 5->8, etc). The clp2() function is a clever implementation from "Hacker's Delight" by Henry Warren, Jr. 
Name: ctf_add_type_mapping; Comment: Record the correspondence between a source and ctf_add_type()-added destination type: both types are translated into parent type IDs if need be, so they relate to the actual dictionary they are in. Outside controlled circumstances (like linking) it is probably not useful to do more than compare these pointers, since there is nothing stopping the user closing the source dict whenever they want to. Our OOM handling here is just to not do anything, because this is called deep enough in the call stack that doing anything useful is painfully difficult: the worst consequence if we do OOM is a bit of type duplication anyway. 
Name: ctf_type_mapping; Comment: Look up a type mapping: return 0 if none. The DST_FP is modified to point to the parent if need be. The ID returned is from the dst_fp's perspective. 
Name: ctf_add_type_internal; Comment: The ctf_add_type routine is used to copy a type from a source CTF dictionary to a dynamic destination dictionary. This routine operates recursively by following the source type's links and embedded member types. If the destination dict already contains a named type which has the same attributes, then we succeed and return this type but no changes occur. 
Name: id_to_packed_id; Comment: This is the 32-bit path, which stores GIDs in a pool and returns a pointer into the pool. It is notably less efficient than the 64-bit direct storage approach, but with a smaller key, this is all we can do. 
Name: make_set_element; Comment: Make an element in a dynhash-of-dynsets, or return it if already present. 
Name: ctf_dedup_atoms_init; Comment: Initialize the dedup atoms table. 
Name: intern; Comment: Intern things in the dedup atoms table. 
Name: ctf_decorate_type_name; Comment: Add an indication of the namespace to a type name in a way that is not valid for C identifiers. Used to maintain hashes of type names to other things while allowing for the four C namespaces (normal, struct, union, enum). Return a new dynamically-allocated string. 
Name: ctf_dedup_is_stub; Comment: Determine whether this type is being hashed as a stub (in which case it is unsafe to cache it). 
Name: ctf_dedup_record_origin; Comment: Populate struct_origin if need be (not already populated, or populated with a different origin), in which case it must go to -1, "shared".) Only called for forwards or forwardable types with names, when the link mode is CTF_LINK_SHARE_DUPLICATED. 
Name: ctf_dedup_rhash_type; Comment: Do the underlying hashing and recursion for ctf_dedup_hash_type (which it calls, recursively). 
Name: ctf_dedup_hash_type; Comment: Hash a TYPE in the INPUT: FP is the eventual output, where the ctf_dedup state is stored. INPUT_NUM is the number of this input in the set of inputs. Record its hash in FP's cd_type_hashes once it is known. PARENTS is described in the comment above ctf_dedup. (The flags argument currently accepts only the flag CTF_DEDUP_HASH_INTERNAL_CHILD, an implementation detail used to prevent struct/union hashing in recursive traversals below the TYPE.) We use the CTF API rather than direct access wherever possible, because types that appear identical through the API should be considered identical, with one exception: slices should only be considered identical to other slices, not to the corresponding unsliced type. The POPULATE_FUN is a mandatory hook that populates other mappings with each type we see (excepting types that are recursively hashed as stubs). The caller should not rely on the order of calls to this hook, though it will be called at least once for every non-stub reference to every type. Returns a hash value (an atom), or NULL on error. 
Name: ctf_dedup_populate_mappings; Comment: Populate a number of useful mappings not directly used by the hashing machinery: the output mapping, the cd_name_counts mapping from name -> hash -> count of hashval deduplication state for a given hashed type, and the cd_output_first_tu mapping. 
Name: ctf_dedup_mark_conflicting_hash; Comment: Mark a single hash as corresponding to a conflicting type. Mark all types that cite it as conflicting as well, terminating the recursive walk only when types that are already conflicted or types do not cite other types are seen. (Tagged structures and unions do not appear in the cd_citers graph, so the walk also terminates there, since any reference to a conflicting structure is just going to reference an unconflicting forward instead: see ctf_dedup_maybe_synthesize_forward.) 
Name: ctf_dedup_hash_kind; Comment: Look up a type kind from the output mapping, given a type hash value. 
Name: ctf_dedup_count_types; Comment: Add to the type counter for one name entry from the cd_name_counts. 
Name: ctf_dedup_detect_name_ambiguity; Comment: Detect name ambiguity and mark ambiguous names as conflicting, other than the most common. 
Name: ctf_dedup_init; Comment: Initialize the deduplication machinery. 
Name: ctf_dedup_fini; Comment: No ctf_dedup calls are allowed after this call other than starting a new deduplication via ctf_dedup (not even ctf_dedup_type_mapping lookups). 
Name: ctf_dedup_multiple_input_dicts; Comment: Return 1 if this type is cited by multiple input dictionaries. 
Name: ctf_dedup_conflictify_unshared; Comment: Demote unconflicting types which reference only one input, or which reference two inputs where one input is the parent of the other, into conflicting types. Only used if the link mode is CTF_LINK_SHARE_DUPLICATED. 
Name: ctf_dedup; Comment: The core deduplicator. Populate cd_output_mapping in the output ctf_dedup with a mapping of all types that belong in this dictionary and where they come from, and cd_conflicting_types with an indication of whether each type is conflicted or not. OUTPUT is the top-level output: INPUTS is the array of input dicts; NINPUTS is the size of that array; PARENTS is an NINPUTS-element array with each element corresponding to a input which is a child dict set to the number in the INPUTS array of that input's parent. If CU_MAPPED is set, this is a first pass for a link with a non-empty CU mapping: only one output will result. Only deduplicates: does not emit the types into the output. Call ctf_dedup_emit afterwards to do that. 
Name: ctf_dedup_rwalk_one_output_mapping; Comment: Like ctf_dedup_rwalk_output_mapping (which see), only takes a single target type and visits it. 
Name: ctf_dedup_rwalk_output_mapping; Comment: Recursively traverse the output mapping, and do something with each type visited, from leaves to root. VISIT_FUN, called as recursion unwinds, returns a negative error code or zero. Type hashes may be visited more than once, but are not recursed through repeatedly: ALREADY_VISITED tracks whether types have already been visited. 
Name: sort_output_mapping; Comment: Sort the output mapping into order: types first appearing in earlier inputs first, parents preceding children: if types first appear in the same input, sort those with earlier ctf_id_t's first. 
Name: ctf_dedup_walk_output_mapping; Comment: The public entry point to ctf_dedup_rwalk_output_mapping, above. 
Name: ctf_dedup_maybe_synthesize_forward; Comment: Possibly synthesise a synthetic forward in TARGET to subsitute for a conflicted per-TU type ID in INPUT with hash HVAL. Return its CTF ID, or 0 if none was needed. 
Name: ctf_dedup_id_to_target; Comment: Map a GID in some INPUT dict, in the form of an input number and a ctf_id_t, into a GID in a target output dict. If it returns 0, this is the unimplemented type, and the input type must have been 0. The OUTPUT dict is assumed to be the parent of the TARGET, if it is not the TARGET itself. Returns CTF_ERR on failure. Responds to an incoming CTF_ERR as an 'id' by returning CTF_ERR, to simplify callers. Errors are always propagated to the input, even if they relate to the target, for the same reason. (Target errors are expected to be very rare.) If the type in question is a citation of a conflicted type in a different TU, emit a forward of the right type in its place (if not already emitted), and record that forward in cd_output_emission_conflicted_forwards. This avoids the need to replicate the entire type graph below this point in the current TU (an appalling waste of space). TODO: maybe replace forwards in the same TU with their referents? Might make usability a bit better. 
Name: ctf_dedup_emit_type; Comment: Emit a single deduplicated TYPE with the given HVAL, located in a given INPUT, with the given (G)ID, into the shared OUTPUT or a possibly-newly-created per-CU dict. All the types this type depends upon have already been emitted. (This type itself may also have been emitted.) If the ARG is 1, this is a CU-mapped deduplication round mapping many ctf_dict_t's into precisely one: conflicting types should be marked non-root-visible. If the ARG is 0, conflicting types go into per-CU dictionaries stored in the input's ctf_dedup.cd_output: otherwise, everything is emitted directly into the output. No struct/union members are emitted. Optimization opportunity: trace the ancestry of non-root-visible types and elide all that neither have a root-visible type somewhere towards their root, nor have the type visible via any other route (the function info section, data object section, backtrace section etc). 
Name: ctf_dedup_emit_struct_members; Comment: Traverse the cd_emission_struct_members and emit the members of all structures and unions. All other types are emitted and complete by this point. 
Name: ctf_dedup_emit; Comment: Emit deduplicated types into the outputs. The shared type repository is OUTPUT, on which the ctf_dedup function must have already been called. The PARENTS array contains the INPUTS index of the parent dict for every child dict at the corresponding index in the INPUTS (for non-child dicts, the value is undefined). Return an array of fps with content emitted into them (starting with OUTPUT, which is the parent of all others, then all the newly-generated outputs). If CU_MAPPED is set, this is a first pass for a link with a non-empty CU mapping: only one output will result. 
Name: ctf_dedup_type_mapping; Comment: Determine what type SRC_FP / SRC_TYPE was emitted as in the FP, which must be the shared dict or have it as a parent: return 0 if none. The SRC_FP must be a past input to ctf_dedup. 
Name: ctf_dump_header_strfield; Comment: Dump one string field from the file header into the cds_items. 
Name: ctf_dump_header_sectfield; Comment: Dump one section-offset field from the file header into the cds_items. 
Name: ctf_dump_header; Comment: Dump the file header into the cds_items. 
Name: ctf_dump_label; Comment: Dump a single label into the cds_items. 
Name: ctf_dump_objts; Comment: Dump all the object or function entries into the cds_items. 
Name: ctf_dump_var; Comment: Dump a single variable into the cds_items. 
Name: ctf_dump_member; Comment: Dump a single struct/union member into the string in the membstate. 
Name: type_hex_digits; Comment: Report the number of digits in the hexadecimal representation of a type ID. 
Name: ctf_dump_type; Comment: Dump a single type into the cds_items. 
Name: ctf_dump_str; Comment: Dump the string table into the cds_items. 
Name: ctf_dump; Comment: Dump a particular section of a CTF file, in textual form. Call with a pointer to a NULL STATE: each call emits a dynamically allocated string containing a description of one entity in the specified section, in order. Only the first call (with a NULL state) may vary SECT. Once the CTF section has been entirely dumped, the call returns NULL and frees and annuls the STATE, ready for another section to be dumped. The returned textual content may span multiple lines: between each call the FUNC is called with one textual line at a time, and should return a suitably decorated line (it can allocate a new one and return it if it likes). 
Name: ctf_hash_integer; Comment: Hash and eq functions for the dynhash and hash. 
Name: ctf_hash_type_key; Comment: Hash a type_key. 
Name: ctf_hash_type_id_key; Comment: Hash a type_id_key. 
Name: ctf_dynhash_item_free; Comment: Free a single ctf_helem with arbitrary key/value functions. 
Name: ctf_dynhash_lookup_kv; Comment: TRUE/FALSE return. 
Name: ctf_dynhash_next; Comment: Traverse a dynhash in arbitrary order, in _next iterator form. Mutating the dynhash while iterating is not supported (just as it isn't for htab_traverse). Note: unusually, this returns zero on success and a *positive* value on error, because it does not take an fp, taking an error pointer would be incredibly clunky, and nearly all error-handling ends up stuffing the result of this into some sort of errno or ctf_errno, which is invariably positive. So doing this simplifies essentially all callers. 
Name: ctf_dynhash_next_sorted; Comment: Traverse a sorted dynhash, in _next iterator form. See ctf_dynhash_next for notes on error returns, etc. Sort keys before iterating over them using the SORT_FUN and SORT_ARG. If SORT_FUN is null, thunks to ctf_dynhash_next. 
Name: ctf_dynset_create; Comment: The dynset, used for sets of keys with no value. The implementation of this can be much simpler, because without a value the slot can simply be the stored key, which means we don't need to store the freeing functions and the dynset itself is just a htab. 
Name: ctf_dynset_exists; Comment: TRUE/FALSE return. 
Name: ctf_dynset_lookup_any; Comment: Look up a completely random value from the set, if any exist. Keys with value zero cannot be distinguished from a nonexistent key. 
Name: ctf_dynset_next; Comment: Traverse a dynset in arbitrary order, in _next iterator form. Otherwise, just like ctf_dynhash_next. 
Name: ctf_hash_create; Comment: ctf_hash, used for fixed-size maps from const char-> ctf_id_t without removal. This is a straight cast of a hashtab. 
Name: ctf_hash_define_type; Comment: if the key is already in the hash, override the previous definition with this new official definition. If the key is not present, then call ctf_hash_insert_type and hash it in. 
Name: ctf_label_topmost; Comment: Returns the topmost label, or NULL if any errors are encountered. 
Name: ctf_label_iter; Comment: Iterate over all labels. We pass the label string and the lblinfo_t struct to the specified callback function. 
Name: ctf_label_info; Comment: Retrieve information about the label with name "lname". 
Name: ctf_link_input_name; Comment: Return the name of the compilation unit this CTF dict or its parent applies to, or a non-null string otherwise: prefer the parent. Used in debugging output. Sometimes used for outputs too. 
Name: ctf_unnamed_cuname; Comment: Return the cuname of a dict, or the string "unnamed-CU" if none. 
Name: ctf_link_add_ctf_internal; Comment: Like ctf_link_add_ctf, below, but with no error-checking, so it can be called in the middle of an ongoing link. 
Name: ctf_link_add; Comment: Add a file, memory buffer, or unopened file (by name) to a link. You can call this with: CTF and NAME: link the passed ctf_archive_t, with the given NAME. NAME alone: open NAME as a CTF file when needed. BUF and NAME: open the BUF (of length N) as CTF, with the given NAME. (Not yet implemented.) Passed in CTF args are owned by the dictionary and will be freed by it. The BUF arg is not owned by the dictionary, and the user should not free its referent until the link is done. The order of calls to this function influences the order of types in the final link output, but otherwise is not important. Repeated additions of the same NAME have no effect; repeated additions of different dicts with the same NAME add all the dicts with unique NAMEs derived from NAME. Private for now, but may in time become public once support for BUF is implemented. 
Name: ctf_link_add_ctf; Comment: Add an opened CTF archive or unopened file (by name) to a link. If CTF is NULL and NAME is non-null, an unopened file is meant: otherwise, the specified archive is assumed to have the given NAME. Passed in CTF args are owned by the dictionary and will be freed by it. The order of calls to this function influences the order of types in the final link output, but otherwise is not important. 
Name: ctf_link_lazy_open; Comment: Lazily open a CTF archive for linking, if not already open. Returns the number of files contained within the opened archive (0 for none), or -1 on error, as usual. 
Name: ctf_new_per_cu_name; Comment: Find a non-clashing unique name for a per-CU output dict, to prevent distinct members corresponding to inputs with identical cunames from overwriting each other. The name should be something like NAME. 
Name: ctf_create_per_cu; Comment: Return a per-CU output CTF dictionary suitable for the given INPUT or CU, creating and interning it if need be. 
Name: ctf_link_add_cu_mapping; Comment: Add a mapping directing that the CU named FROM should have its conflicting/non-duplicate types (depending on link mode) go into a dict named TO. Many FROMs can share a TO. We forcibly add a dict named TO in every case, even though it may well wind up empty, because clients that use this facility usually expect to find every TO dict present, even if empty, and malfunction otherwise. 
Name: ctf_link_set_memb_name_changer; Comment: Set a function which is called to transform the names of archive members. This is useful for applying regular transformations to many names, where ctf_link_add_cu_mapping applies arbitrarily irregular changes to single names. The member name changer is applied at ctf_link_write time, so it cannot conflate multiple CUs into one the way ctf_link_add_cu_mapping can. The changer function accepts a name and should return a new dynamically-allocated name, or NULL if the name should be left unchanged. 
Name: ctf_link_set_variable_filter; Comment: Set a function which is used to filter out unwanted variables from the link. 
Name: check_variable; Comment: Check if we can safely add a variable with the given type to this dict. 
Name: ctf_link_one_variable; Comment: Link one variable named NAME of type TYPE found in IN_FP into FP. 
Name: ctf_link_sort_inputs; Comment: Sort the inputs by N (the link order). For CU-mapped links, this is a mapping of input to output name, not a mapping of input name to input ctf_link_input_t: compensate accordingly. 
Name: ctf_link_deduplicating_count_inputs; Comment: Count the number of input dicts in the ctf_link_inputs, or that subset of the ctf_link_inputs given by CU_NAMES if set. Return the number of input dicts, and optionally the name and ctf_link_input_t of the single input archive if only one exists (no matter how many dicts it contains). 
Name: ctf_link_deduplicating_open_inputs; Comment: Allocate and populate an inputs array big enough for a given set of inputs: either a specific set of CU names (those from that set found in the ctf_link_inputs), or the entire ctf_link_inputs (if cu_names is not set). The number of inputs (from ctf_link_deduplicating_count_inputs, above) is passed in NINPUTS: an array of uint32_t containing parent pointers (corresponding to those members of the inputs that have parents) is allocated and returned in PARENTS. The inputs are *archives*, not files: the archive can have multiple members if it is the result of a previous incremental link. We want to add every one in turn, including the shared parent. (The dedup machinery knows that a type used by a single dictionary and its parent should not be shared in CTF_LINK_SHARE_DUPLICATED mode.) If no inputs exist that correspond to these CUs, return NULL with the errno set to ECTF_NOCTFDATA. 
Name: ctf_link_deduplicating_close_inputs; Comment: Close INPUTS that have already been linked, first the passed array, and then that subset of the ctf_link_inputs archives they came from cited by the CU_NAMES. If CU_NAMES is not specified, close all the ctf_link_inputs in one go, leaving it empty. 
Name: ctf_link_deduplicating_variables; Comment: Do a deduplicating link of all variables in the inputs. Also, if we are not omitting the variable section, integrate all symbols from the symtypetabs into the variable section too. (Duplication with the symtypetab section in the output will be eliminated at serialization time.) 
Name: check_sym; Comment: Check for symbol conflicts during linking. Three possibilities: already exists, conflicting, or nonexistent. We don't have a dvd structure we can use as a flag like check_variable does, so we use a tristate return value instead: -1: conflicting; 1: nonexistent: 0: already exists. 
Name: ctf_link_deduplicating_one_symtypetab; Comment: Do a deduplicating link of one symtypetab (function info or data object) in one input dict. 
Name: ctf_link_deduplicating_syms; Comment: Do a deduplicating link of the function info and data objects in the inputs. 
Name: ctf_link_deduplicating_per_cu; Comment: Do the per-CU part of a deduplicating link. 
Name: ctf_link_empty_outputs; Comment: Empty all the ctf_link_outputs. 
Name: ctf_link_deduplicating; Comment: Do a deduplicating link using the ctf-dedup machinery. 
Name: ctf_link; Comment: Merge types and variable sections in all dicts added to the link together. The result of any previous link is discarded. 
Name: ctf_link_intern_extern_string; Comment: Intern a string in the string table of an output per-CU CTF file. 
Name: ctf_link_add_strtab; Comment: Repeatedly call ADD_STRING to acquire strings from the external string table, adding them to the atoms table for this CU and all subsidiary CUs. If ctf_link is also called, it must be called first if you want the new CTF files ctf_link can create to get their strings dedupped against the ELF strtab properly. 
Name: ctf_link_add_linker_symbol; Comment: Inform the ctf-link machinery of a new symbol in the target symbol table (which must be some symtab that is not usually stripped, and which is in agreement with ctf_bfdopen_ctfsect). May be called either before or after ctf_link_add_strtab. 
Name: ctf_link_shuffle_syms; Comment: Impose an ordering on symbols. The ordering takes effect immediately, but since the ordering info does not include type IDs, lookups may return nothing until such IDs are added by calls to ctf_add_*_sym. Must be called after ctf_link_add_strtab and ctf_link_add_linker_symbol. 
Name: ctf_accumulate_archive_names; Comment: Accumulate the names and a count of the names in the link output hash. 
Name: ctf_change_parent_name; Comment: Change the name of the parent CTF section, if the name transformer has got to it. 
Name: ctf_link_warn_outdated_inputs; Comment: Warn if we may suffer information loss because the CTF input files are too old. Usually we provide complete backward compatibility, but compiler changes etc which never hit a release may have a flag in the header that simply prevents those changes from being used. 
Name: ctf_link_write; Comment: Write out a CTF archive (if there are per-CU CTF files) or a CTF file (otherwise) into a new dynamically-allocated string, and return it. Members with sizes above THRESHOLD are compressed. 
Name: grow_pptrtab; Comment: Grow the pptrtab so that it is at least NEW_LEN long. 
Name: refresh_pptrtab; Comment: Update entries in the pptrtab that relate to types newly added in the child. 
Name: isqualifier; Comment: Compare the given input string and length against a table of known C storage qualifier keywords. We just ignore these in ctf_lookup_by_name, below. To do this quickly, we use a pre-computed Perfect Hash Function similar to the technique originally described in the classic paper: R.J. Cichelli, "Minimal Perfect Hash Functions Made Simple", Communications of the ACM, Volume 23, Issue 1, January 1980, pp. 17-19. For an input string S of length N, we use hash H = S[N - 1] + N - 105, which for the current set of qualifiers yields a unique H in the range [0 .. 20]. The hash can be modified when the keyword set changes as necessary. We also store the length of each keyword and check it prior to the final strcmp(). TODO: just use gperf. 
Name: ctf_lookup_by_name_internal; Comment: Attempt to convert the given C type name into the corresponding CTF type ID. It is not possible to do complete and proper conversion of type names without implementing a more full-fledged parser, which is necessary to handle things like types that are function pointers to functions that have arguments that are function pointers, and fun stuff like that. Instead, this function implements a very simple conversion algorithm that finds the things that we actually care about: structs, unions, enums, integers, floats, typedefs, and pointers to any of these named types. 
Name: ctf_lookup_by_id; Comment: Return the pointer to the internal CTF type data corresponding to the given type ID. If the ID is invalid, the function returns NULL. This function is not exported outside of the library. 
Name: ctf_lookup_var; Comment: A bsearch function for variable names. 
Name: ctf_lookup_variable; Comment: Given a variable name, return the type of the variable with that name. 
Name: ctf_symidx_sort; Comment: Sort a symbol index section by name. Takes a 1:1 mapping of names to the corresponding symbol table. Returns a lexicographically sorted array of idx indexes (and thus, of indexes into the corresponding func info / data object section). 
Name: ctf_lookup_symbol_name; Comment: Given a symbol index, return the name of that symbol from the table provided by ctf_link_shuffle_syms, or failing that from the secondary string table, or the null string. 
Name: ctf_lookup_symbol_idx; Comment: Given a symbol name, return the index of that symbol, or -1 on error or if not found. 
Name: ctf_symbol_next; Comment: Iterate over all symbols with types: if FUNC, function symbols, otherwise, data symbols. The name argument is not optional. The return order is arbitrary, though is likely to be in symbol index or name order. You can change the value of 'functions' in the middle of iteration over non-dynamic dicts, but doing so on dynamic dicts will fail. (This is probably not very useful, but there is no reason to prohibit it.) 
Name: ctf_lookup_idx_name; Comment: A bsearch function for function and object index names. 
Name: ctf_try_lookup_indexed; Comment: Given a symbol name or (failing that) number, look up that symbol in the function or object index table (which must exist). Return 0 if not found there (or pad). 
Name: ctf_lookup_by_sym_or_name; Comment: Given a symbol name or (if NULL) symbol index, return the type of the function or data object described by the corresponding entry in the symbol table. We can only return symbols in read-only dicts and in dicts for which ctf_link_shuffle_syms has been called to assign symbol indexes to symbol names. 
Name: ctf_lookup_by_symbol; Comment: Given a symbol table index, return the type of the function or data object described by the corresponding entry in the symbol table. 
Name: ctf_lookup_by_symbol_name; Comment: Given a symbol name, return the type of the function or data object described by the corresponding entry in the symbol table. 
Name: ctf_func_info; Comment: Given a symbol table index, return the info for the function described by the corresponding entry in the symbol table, which may be a function symbol or may be a data symbol that happens to be a function pointer. 
Name: ctf_func_args; Comment: Given a symbol table index, return the arguments for the function described by the corresponding entry in the symbol table. 
Name: ctf_bfdclose; Comment: Free the BFD bits of a CTF file on ctf_arc_close(). 
Name: ctf_bfdopen; Comment: Open a CTF file given the specified BFD. 
Name: ctf_bfdopen_ctfsect; Comment: Open a CTF file given the specified BFD and CTF section (which may contain a CTF archive or a file). 
Name: ctf_fdopen; Comment: Open the specified file descriptor and return a pointer to a CTF archive that contains one or more CTF dicts. The file can be an ELF file, a file containing raw CTF, or a CTF archive. The caller is responsible for closing the file descriptor when it is no longer needed. If this is an ELF file, TARGET, if non-NULL, should be the name of a suitable BFD target. 
Name: ctf_open; Comment: Open the specified file and return a pointer to a CTF dict. The file can be either an ELF file or raw CTF file. This is just a convenient wrapper around ctf_fdopen() for callers. 
Name: ctf_arc_open; Comment: Public entry point: open a CTF archive, or CTF file. Returns the archive, or NULL and an error in *err. Despite the fact that this uses CTF archives, it must be in this file to avoid dragging in BFD into non-BFD-using programs. 
Name: get_kind_v1; Comment: Version-sensitive accessors. 
Name: get_ctt_size_v2_unconverted; Comment: Return the size that a v1 will be once it is converted to v2. 
Name: init_symtab; Comment: Initialize the symtab translation table as appropriate for its indexing state. For unindexed symtypetabs, fill each entry with the offset of the CTF type or function data corresponding to each STT_FUNC or STT_OBJECT entry in the symbol table. For indexed symtypetabs, do nothing: the needed initialization for indexed lookups may be quite expensive, so it is done only as needed, when lookups happen. (In particular, the majority of indexed symtypetabs come from the compiler, and all the linker does is iteration over all entries, which doesn't need this initialization.) The SP symbol table section may be NULL if there is no symtab. If init_symtab works on one call, it cannot fail on future calls to the same fp: ctf_symsect_endianness relies on this. 
Name: ctf_set_base; Comment: Reset the CTF base pointer and derive the buf pointer from it, initializing everything in the ctf_dict that depends on the base or buf pointers. The original gap between the buf and base pointers, if any -- the original, unconverted CTF header -- is kept, but its contents are not specified and are never used. 
Name: ctf_set_version; Comment: When this is reset, LCTF_* changes behaviour, but there is no guarantee that the variable data list associated with each type has been upgraded: the caller must ensure this has been done in advance. 
Name: upgrade_header; Comment: Upgrade the header to CTF_VERSION_3. The upgrade is done in-place. 
Name: upgrade_types_v1; Comment: Upgrade the type table to CTF_VERSION_3 (really CTF_VERSION_1_UPGRADED_3) from CTF_VERSION_1. The upgrade is not done in-place: the ctf_base is moved. ctf_strptr() must not be called before reallocation is complete. Sections not checked here due to nonexistence or nonpopulated state in older formats: objtidx, funcidx. Type kinds not checked here due to nonexistence in older formats: CTF_K_SLICE. 
Name: upgrade_types; Comment: Upgrade from any earlier version. 
Name: init_types; Comment: Initialize the type ID translation table with the byte offset of each type, and initialize the hash tables of each named type. Upgrade the type table to the latest supported representation in the process, if needed, and if this recension of libctf supports upgrading. 
Name: ctf_flip_header; Comment: Flip the endianness of the CTF header. 
Name: flip_lbls; Comment: Flip the endianness of the label section, an array of ctf_lblent_t. 
Name: flip_objts; Comment: Flip the endianness of the data-object or function sections or their indexes, all arrays of uint32_t. 
Name: flip_vars; Comment: Flip the endianness of the variable section, an array of ctf_varent_t. 
Name: flip_types; Comment: Flip the endianness of the type section, a tagged array of ctf_type or ctf_stype followed by variable data. 
Name: ctf_flip; Comment: Flip the endianness of BUF, given the offsets in the (already endian- converted) CTH. If TO_FOREIGN is set, flip to foreign-endianness; if not, flip away. All of this stuff happens before the header is fully initialized, so the LCTF_*() macros cannot be used yet. Since we do not try to endian-convert v1 data, this is no real loss. 
Name: ctf_set_ctl_hashes; Comment: Set up the ctl hashes in a ctf_dict_t. Called by both writable and non-writable dictionary initialization. 
Name: ctf_simple_open; Comment: Open a CTF file, mocking up a suitable ctf_sect. 
Name: ctf_simple_open_internal; Comment: Open a CTF file, mocking up a suitable ctf_sect and overriding the external strtab with a synthetic one. 
Name: ctf_bufopen; Comment: Decode the specified CTF buffer and optional symbol table, and create a new CTF dict representing the symbolic debugging information. This code can be used directly by the debugger, or it can be used as the engine for ctf_fdopen() or ctf_open(), below. 
Name: ctf_bufopen_internal; Comment: Like ctf_bufopen, but overriding the external strtab with a synthetic one. 
Name: ctf_ref; Comment: Bump the refcount on the specified CTF dict, to allow export of ctf_dict_t's from iterators that open and close the ctf_dict_t around the loop. (This does not extend their lifetime beyond that of the ctf_archive_t in which they are contained.) 
Name: ctf_dict_close; Comment: Close the specified CTF dict and free associated data structures. Note that ctf_dict_close() is a reference counted operation: if the specified file is the parent of other active dict, its reference count will be greater than one and it will be freed later when no active children exist. 
Name: ctf_file_close; Comment: Backward compatibility. 
Name: ctf_close; Comment: The converse of ctf_open(). ctf_open() disguises whatever it opens as an archive, so closing one is just like closing an archive. 
Name: ctf_get_arc; Comment: Get the CTF archive from which this ctf_dict_t is derived. 
Name: ctf_getdatasect; Comment: Return the ctfsect out of the core ctf_impl. Useful for freeing the ctfsect's dataafter ctf_dict_close(), which is why we return the actual structure, not a pointer to it, since that is likely to become a pointer to freed data before the return value is used under the expected use case of ctf_getsect()/ ctf_dict_close()/free(). 
Name: ctf_symsect_endianness; Comment: Set the endianness of the symbol table attached to FP. 
Name: ctf_parent_dict; Comment: Return the CTF handle for the parent CTF dict, if one exists. Otherwise return NULL to indicate this dict has no imported parent. 
Name: ctf_parent_file; Comment: Backward compatibility. 
Name: ctf_parent_name; Comment: Return the name of the parent CTF dict, if one exists, or NULL otherwise. 
Name: ctf_parent_name_set; Comment: Set the parent name. It is an error to call this routine without calling ctf_import() at some point. 
Name: ctf_cuname; Comment: Return the name of the compilation unit this CTF file applies to. Usually non-NULL only for non-parent dicts. 
Name: ctf_cuname_set; Comment: Set the compilation unit name. 
Name: ctf_import; Comment: Import the types from the specified parent dict by storing a pointer to it in ctf_parent and incrementing its reference count. Only one parent is allowed: if a parent already exists, it is replaced by the new parent. The pptrtab is wiped, and will be refreshed by the next ctf_lookup_by_name call. 
Name: ctf_import_unref; Comment: Like ctf_import, but does not increment the refcount on the imported parent or close it at any point: as a result it can go away at any time and the caller must do all freeing itself. Used internally to avoid refcount loops. 
Name: ctf_setmodel; Comment: Set the data model constant for the CTF dict. 
Name: ctf_getmodel; Comment: Return the data model constant for the CTF dict. 
Name: ctf_setspecific; Comment: The caller can hang an arbitrary pointer off each ctf_dict_t using this function. 
Name: ctf_getspecific; Comment: Retrieve the arbitrary pointer again. 
Name: _quicksort; Comment: Order size using quicksort. This implementation incorporates four optimizations discussed in Sedgewick: 1. Non-recursive, using an explicit stack of pointer that store the next array partition to sort. To save time, this maximum amount of space required to store an array of SIZE_MAX is allocated on the stack. Assuming a 32-bit (64 bit) integer for size_t, this needs only 32sizeof(stack_node) == 256 bytes (for 64 bit: 1024 bytes). Pretty cheap, actually. 2. Chose the pivot element using a median-of-three decision tree. This reduces the probability of selecting a bad pivot value and eliminates certain extraneous comparisons. 3. Only quicksorts TOTAL_ELEMS / MAX_THRESH partitions, leaving insertion sort to order the MAX_THRESH items within each partition. This is a big win, since insertion sort is faster for small, mostly sorted array segments. 4. The larger of the two sub-partitions is always pushed onto the stack first, with the algorithm then concentrating on the smaller partition. This *guarantees* no more than log (total_elems) stack size is needed (actually O(1) in this case)! 
Name: ctf_symtab_skippable; Comment: Determine if a symbol is "skippable" and should never appear in the symtypetab sections. 
Name: _libctf_nonnull_; Comment: Get the number of symbols in a symbol hash, the count of symbols, the maximum seen, the eventual size, without any padding elements, of the func/data and (if generated) index sections, and the size of accumulated padding elements. The linker-reported set of symbols is found in SYMFP: it may be NULL if symbol filtering is not desired, in which case CTF_SYMTYPETAB_FORCE_INDEXED will always be set in the flags. Also figure out if any symbols need to be moved to the variable section, and add them (if not already present). 
Name: emit_symtypetab; Comment: Emit an objt or func symtypetab into DP in a particular order defined by an array of ctf_link_sym_t or symbol names passed in. The index has NIDX elements in it: unindexed output would terminate at symbol OUTMAX and is in any case no larger than SIZE bytes. Some index elements are expected to be skipped: see symtypetab_density. The linker-reported set of symbols (if any) is found in SYMFP. 
Name: emit_symtypetab_index; Comment: Emit an objt or func symtypetab index into DP in a paticular order defined by an array of symbol names passed in. Stop at NIDX. The linker-reported set of symbols (if any) is found in SYMFP. 
Name: symtypetab_delete_nonstatics; Comment: Delete symbols that have been assigned names from the variable section. Must be called from within ctf_serialize, because that is the only place you can safely delete variables without messing up ctf_rollback. 
Name: ctf_symtypetab_sect_sizes; Comment: Figure out the sizes of the symtypetab sections, their indexed state, etc. 
Name: ctf_type_sect_size; Comment: Iterate through the dynamic type definition list and compute the size of the CTF type section. 
Name: ctf_emit_type_sect; Comment: Take a final lap through the dynamic type definition list and copy the appropriate type records to the output buffer, noting down the strings as we go. 
Name: ctf_serialize; Comment: If the specified CTF dict is writable and has been modified, reload this dict with the updated type definitions, ready for serialization. In order to make this code and the rest of libctf as simple as possible, we perform updates by taking the dynamic type definitions and creating an in-memory CTF dict containing the definitions, and then call ctf_simple_open_internal() on it. We perform one extra trick here for the benefit of callers and to keep our code simple: ctf_simple_open_internal() will return a new ctf_dict_t, but we want to keep the fp constant for the caller, so after ctf_simple_open_internal() returns, we use memcpy to swap the interior of the old and new ctf_dict_t's, and then free the old. 
Name: ctf_gzwrite; Comment: Write the compressed CTF data stream to the specified gzFile descriptor. The whole stream is compressed, and cannot be read by CTF opening functions in this library until it is decompressed. (The functions below this one leave the header uncompressed, and the CTF opening functions work on them without manual decompression.) No support for (testing-only) endian-flipping. 
Name: ctf_write_mem; Comment: Optionally compress the specified CTF data stream and return it as a new dynamically-allocated string. Possibly write it with reversed endianness. 
Name: ctf_compress_write; Comment: Compress the specified CTF data stream and write it to the specified file descriptor. 
Name: ctf_write; Comment: Write the uncompressed CTF data stream to the specified file descriptor. 
Name: ctf_strraw_explicit; Comment: Convert an encoded CTF string name into a pointer to a C string, using an explicit internal strtab rather than the fp-based one. 
Name: ctf_strraw; Comment: Convert an encoded CTF string name into a pointer to a C string by looking up the appropriate string table buffer and then adding the offset. 
Name: ctf_strptr; Comment: Return a guaranteed-non-NULL pointer to the string with the given CTF name. 
Name: ctf_str_purge_atom_refs; Comment: Remove all refs to a given atom. 
Name: ctf_str_free_atom; Comment: Free an atom (only called on ctf_close().) 
Name: ctf_str_create_atoms; Comment: Create the atoms table. There is always at least one atom in it, the null string. 
Name: ctf_str_free_atoms; Comment: Destroy the atoms table. 
Name: ctf_str_add_ref_internal; Comment: Add a string to the atoms table, copying the passed-in string. Return the atom added. Return NULL only when out of memory (and do not touch the passed-in string in that case). Possibly augment the ref list with the passed-in ref. Possibly add a provisional entry for this string to the provisional strtab. 
Name: ctf_str_add; Comment: Add a string to the atoms table, without augmenting the ref list for this string: return a 'provisional offset' which can be used to return this string until ctf_str_write_strtab is called, or 0 on failure. (Everywhere the provisional offset is assigned to should be added as a ref using ctf_str_add_ref() as well.) 
Name: ctf_str_add_ref; Comment: Like ctf_str_add(), but additionally augment the atom's refs list with the passed-in ref, whether or not the string is already present. There is no attempt to deduplicate the refs list (but duplicates are harmless). 
Name: ctf_str_add_pending; Comment: Like ctf_str_add_ref(), but notes that this memory location must be added as a ref by a later serialization phase, rather than adding it itself. 
Name: ctf_str_move_pending; Comment: Note that a pending ref now located at NEW_REF has moved by BYTES bytes. 
Name: ctf_str_add_external; Comment: Add an external strtab reference at OFFSET. Returns zero if the addition failed, nonzero otherwise. 
Name: ctf_str_remove_ref; Comment: Remove a single ref. 
Name: ctf_str_rollback_atom; Comment: A ctf_dynhash_iter_remove() callback that removes atoms later than a given snapshot ID. External atoms are never removed, because they came from the linker string table and are still present even if you roll back type additions. 
Name: ctf_str_rollback; Comment: Roll back, deleting all (internal) atoms created after a particular ID. 
Name: ctf_str_purge_one_atom_refs; Comment: An adaptor around ctf_purge_atom_refs. 
Name: ctf_str_purge_refs; Comment: Remove all the recorded refs from the atoms table. 
Name: ctf_str_update_refs; Comment: Update a list of refs to the specified value. 
Name: ctf_str_count_strtab; Comment: Count the number of entries in the strtab, and its length. 
Name: ctf_str_populate_sorttab; Comment: Populate the sorttab with pointers to the strtab atoms. 
Name: ctf_str_sort_strtab; Comment: Sort the strtab. 
Name: ctf_str_write_strtab; Comment: Write out and return a strtab containing all strings with recorded refs, adjusting the refs to refer to the corresponding string. The returned strtab may be NULL on error. Also populate the synthetic strtab with mappings from external strtab offsets to names, so we can look them up with ctf_strptr(). Only external strtab offsets with references are added. 
Name: ctf_mmap; Comment: Private, read-only mmap from a file, with fallback to copying. No handling of page-offset issues at all: the caller must allow for that. 
Name: ctf_version; Comment: Set the CTF library client version to the specified version. If version is zero, we just return the default library version number. 
Name: _libctf_printflike_; Comment: Errors and warnings. Report the warning or error to the list in FP (or the open errors list if NULL): if ERR is nonzero it is the errno to report to the debug stream instead of that recorded on fp. 
Name: ctf_err_warn_to_open; Comment: Move all the errors/warnings from an fp into the open_errors. 
Name: ctf_errwarning_next; Comment: Error-warning reporting: an 'iterator' that returns errors and warnings from the error/warning list, in order of emission. Errors and warnings are popped after return: the caller must free the returned error-text pointer. An fp of NULL returns CTF-open-time errors from the open_errors variable above. The treatment of errors from this function itself is somewhat unusual: it will often be called on an error path, so we don't want to overwrite the ctf_errno unless we have no choice. So, like ctf_bufopen et al, this function takes an errp pointer where errors are reported. The pointer is optional: if not set, errors are reported via the fp (if non-NULL). Calls with neither fp nor errp set are mildly problematic because there is no clear way to report end-of-iteration: you just have to assume that a NULL return means the end, and not an iterator error. 
Name: ctf_type_isparent; Comment: Determine whether a type is a parent or a child. 
Name: ctf_struct_member; Comment: Expand a structure element into the passed-in ctf_lmember_t. 
Name: ctf_member_iter; Comment: Iterate over the members of a STRUCT or UNION. We pass the name, member type, and offset of each member to the specified callback function. 
Name: ctf_member_next; Comment: Iterate over the members of a STRUCT or UNION, returning each member's offset and optionally name and member type in turn. On end-of-iteration, returns -1. If FLAGS is CTF_MN_RECURSE, recurse into unnamed members. 
Name: ctf_enum_iter; Comment: Iterate over the members of an ENUM. We pass the string name and associated integer value of each enum element to the specified callback function. 
Name: ctf_enum_next; Comment: Iterate over the members of an enum TYPE, returning each enumerand's NAME or NULL at end of iteration or error, and optionally passing back the enumerand's integer VALue. 
Name: ctf_type_iter; Comment: Iterate over every root (user-visible) type in the given CTF dict. We pass the type ID of each type to the specified callback function. Does not traverse parent types: you have to do that explicitly. This is by design, to avoid traversing them more than once if traversing many children of a single parent. 
Name: ctf_type_iter_all; Comment: Iterate over every type in the given CTF dict, user-visible or not. We pass the type ID of each type to the specified callback function. Does not traverse parent types: you have to do that explicitly. This is by design, to avoid traversing them more than once if traversing many children of a single parent. 
Name: ctf_type_next; Comment: Iterate over every type in the given CTF dict, optionally including non-user-visible types, returning each type ID and hidden flag in turn. Returns CTF_ERR on end of iteration or error. Does not traverse parent types: you have to do that explicitly. This is by design, to avoid traversing them more than once if traversing many children of a single parent. 
Name: ctf_variable_iter; Comment: Iterate over every variable in the given CTF dict, in arbitrary order. We pass the name of each variable to the specified callback function. 
Name: ctf_variable_next; Comment: Iterate over every variable in the given CTF dict, in arbitrary order, returning the name and type of each variable in turn. The name argument is not optional. Returns CTF_ERR on end of iteration or error. 
Name: ctf_type_resolve; Comment: Follow a given type through the graph for TYPEDEF, VOLATILE, CONST, and RESTRICT nodes until we reach a "base" type node. This is useful when we want to follow a type ID to a node that has members or a size. To guard against infinite loops, we implement simplified cycle detection and check each link against itself, the previous node, and the topmost node. Does not drill down through slices to their contained type. Callers of this function must not presume that a type it returns must have a valid ctt_size: forwards do not, and must be separately handled. 
Name: ctf_type_resolve_unsliced; Comment: Like ctf_type_resolve(), but traverse down through slices to their contained type. 
Name: ctf_get_dict; Comment: Return the native dict of a given type: if called on a child and the type is in the parent, return the parent. Needed if you plan to access the type directly, without using the API. 
Name: ctf_lookup_by_rawname; Comment: Look up a name in the given name table, in the appropriate hash given the kind of the identifier. The name is a raw, undecorated identifier. 
Name: ctf_lookup_by_rawhash; Comment: Look up a name in the given name table, in the appropriate hash given the readability state of the dictionary. The name is a raw, undecorated identifier. 
Name: ctf_type_aname; Comment: Lookup the given type ID and return its name as a new dynamically-allocated string. 
Name: ctf_type_lname; Comment: Lookup the given type ID and print a string name for it into buf. Return the actual number of bytes (not including _0) needed to format the name. 
Name: ctf_type_name; Comment: Lookup the given type ID and print a string name for it into buf. If buf is too small, return NULL: the ECTF_NAMELEN error is set on 'fp' for us. 
Name: ctf_type_name_raw; Comment: Lookup the given type ID and return its raw, unadorned, undecorated name. The name will live as long as its ctf_dict_t does. The only decoration is that a NULL return always means an error: nameless types return a null string. 
Name: ctf_type_aname_raw; Comment: Lookup the given type ID and return its raw, unadorned, undecorated name as a new dynamically-allocated string. 
Name: ctf_type_size; Comment: Resolve the type down to a base type node, and then return the size of the type storage in bytes. 
Name: ctf_type_align; Comment: Resolve the type down to a base type node, and then return the alignment needed for the type storage in bytes. XXX may need arch-dependent attention. 
Name: ctf_type_kind_unsliced; Comment: Return the kind (CTF_K_* constant) for the specified type ID. 
Name: ctf_type_kind; Comment: Return the kind (CTF_K_* constant) for the specified type ID. Slices are considered to be of the same kind as the type sliced. 
Name: ctf_type_kind_forwarded; Comment: Return the kind of this type, except, for forwards, return the kind of thing this is a forward to. 
Name: ctf_type_reference; Comment: If the type is one that directly references another type (such as POINTER), then return the ID of the type to which it refers. 
Name: ctf_type_pointer; Comment: Find a pointer to type by looking in fp->ctf_ptrtab. If we can't find a pointer to the given type, see if we can compute a pointer to the type resulting from resolving the type down to its base type and use that instead. This helps with cases where the CTF data includes "struct foo *" but not "foo_t *" and the user accesses "foo_t *" in the debugger. XXX what about parent dicts? 
Name: ctf_type_encoding; Comment: Return the encoding for the specified INTEGER, FLOAT, or ENUM. 
Name: ctf_type_compat; Comment: Return a boolean value indicating if two types are compatible. This function returns true if the two types are the same, or if they (or their ultimate base type) have the same encoding properties, or (for structs / unions / enums / forward declarations) if they have the same name and (for structs / unions) member count. 
Name: ctf_member_count; Comment: Return the number of members in a STRUCT or UNION, or the number of enumerators in an ENUM. The count does not include unnamed sub-members. 
Name: ctf_member_info; Comment: Return the type and offset for a given member of a STRUCT or UNION. 
Name: ctf_array_info; Comment: Return the array type, index, and size information for the specified ARRAY. 
Name: ctf_enum_name; Comment: Convert the specified value to the corresponding enum tag name, if a matching name can be found. Otherwise NULL is returned. 
Name: ctf_enum_value; Comment: Convert the specified enum tag name to the corresponding value, if a matching name can be found. Otherwise CTF_ERR is returned. 
Name: ctf_func_type_info; Comment: Given a type ID relating to a function type, return info on return types and arg counts for that function. 
Name: ctf_func_type_args; Comment: Given a type ID relating to a function type, return the arguments for the function. 
Name: ctf_type_rvisit; Comment: Recursively visit the members of any type. This function is used as the engine for ctf_type_visit, below. We resolve the input type, recursively invoke ourself for each type member if the type is a struct or union, and then invoke the callback function on the current type. If any callback returns non-zero, we abort and percolate the error code back up to the top. 
Name: ctf_type_visit; Comment: Recursively visit the members of any type. We pass the name, member type, and offset of each member to the specified callback function. 
Name: ctf_list_append; Comment: Simple doubly-linked list append routine. This implementation assumes that each list element contains an embedded ctf_list_t as the first member. An additional ctf_list_t is used to store the head (l_next) and tail (l_prev) pointers. The current head and tail list elements have their previous and next pointers set to NULL, respectively. 
Name: ctf_list_prepend; Comment: Prepend the specified existing element to the given ctf_list_t. The existing pointer should be pointing at a struct with embedded ctf_list_t. 
Name: ctf_list_delete; Comment: Delete the specified existing element from the given ctf_list_t. The existing pointer should be pointing at a struct with embedded ctf_list_t. 
Name: ctf_list_empty_p; Comment: Return 1 if the list is empty. 
Name: ctf_list_splice; Comment: Splice one entire list onto the end of another one. The existing list is emptied. 
Name: ctf_elf32_to_link_sym; Comment: Convert a 32-bit ELF symbol to a ctf_link_sym_t. 
Name: ctf_elf64_to_link_sym; Comment: Convert a 64-bit ELF symbol to a ctf_link_sym_t. 
Name: ctf_str_append; Comment: A string appender working on dynamic strings. Returns NULL on OOM. 
Name: ctf_str_append_noerr; Comment: A version of ctf_str_append that returns the old string on OOM. 
Name: ctf_realloc; Comment: A realloc() that fails noisily if called with any ctf_str_num_users. 
Name: ctf_set_open_errno; Comment: Store the specified error code into errp if it is non-NULL, and then return NULL for the benefit of the caller. 
Name: ctf_set_errno; Comment: Store the specified error code into the CTF dict, and then return CTF_ERR / -1 for the benefit of the caller. 
Name: ctf_next_create; Comment: Create a ctf_next_t. 
Name: ctf_next_destroy; Comment: Destroy a ctf_next_t, for early exit from iterators. 
Name: ctf_next_copy; Comment: Copy a ctf_next_t. 
Name: main; Comment: This is sometimes linked as a main program, sometimes via ld -r, and sometimes via ld -shared. 
Name: C_alloca; Comment: @undocumented C_alloca 
Name: dupargv; Comment: @deftypefn Extension char dupargv (char const @var{vector}) Duplicate an argument vector. Simply scans through @var{vector},duplicating each argument until the terminating @code{NULL} is found.Returns a pointer to the argument vector if successful. Returns @code{NULL} if there is insufficient memory to complete building theargument vector. @end deftypefn 
Name: freeargv; Comment: @deftypefn Extension void freeargv (char @var{vector}) Free an argument vector that was built using @code{buildargv}. Simplyscans through @var{vector}, freeing the memory for each argument untilthe terminating @code{NULL} is found, and then frees @var{vector}itself. @end deftypefn 
Name: buildargv; Comment: @deftypefn Extension char buildargv (char @var{sp}) Given a pointer to a string, parse the string extracting fields separated by whitespace and optionally enclosed within either single or double quotes (which are stripped off), and build a vector of pointers to copies of the string for each field. The input string remains unchanged. The last element of the vector is followed by a @code{NULL} element. All of the memory for the pointer array and copies of the string is obtained from @code{xmalloc}. All of the memory can be returned to thesystem with the single function call @code{freeargv}, which takes thereturned result of @code{buildargv}, as it's argument. Returns a pointer to the argument vector if successful. Returns @code{NULL} if @var{sp} is @code{NULL} or if there is insufficientmemory to complete building the argument vector. If the input is a null string (as opposed to a @code{NULL} pointer),then buildarg returns an argument vector that has one arg, a null string. @end deftypefn The memory for the argv array is dynamically expanded as necessary. In order to provide a working buffer for extracting arguments into, with appropriate stripping of quotes and translation of backslash sequences, we allocate a working buffer at least as long as the input string. This ensures that we always have enough space in which to work, since the extracted arg is never larger than the input string. The argument vector is always kept terminated with a @code{NULL} argpointer, so it can be passed to @code{freeargv} at any time, orreturned, as appropriate. 
Name: writeargv; Comment: @deftypefn Extension int writeargv (char const @var{argv}, FILE @var{file}) Write each member of ARGV, handling all necessary quoting, to the file named by FILE, separated by whitespace. Return 0 on success, non-zero if an error occurred while writing to FILE. @end deftypefn 
Name: expandargv; Comment: Noneeach such string is taken as a command-line option. The new options are inserted in place of the option naming the response file, and @code{argcp} and @code{argvp} will be updated. If the value of@code{argvp} is modified by this function, then the new value hasbeen dynamically allocated and can be deallocated by the caller with @code{freeargv}. However, most callers will simply call@code{expandargv} near the beginning of @code{main} and allow theoperating system to free the memory when the program exits. @end deftypefn 
Name: countargv; Comment: @deftypefn Extension int countargv (char const @var{argv}) Return the number of elements in @var{argv}.Returns zero if @var{argv} is NULL. @end deftypefn 
Name: asprintf; Comment: @deftypefn Extension int asprintf (char @var{resptr}, const char @var{format}, ...) Like @code{sprintf}, but instead of passing a pointer to a buffer, youpass a pointer to a pointer. This function will compute the size of the buffer needed, allocate memory with @code{malloc}, and store apointer to the allocated memory in @code{@var{resptr}}. The valuereturned is the same as @code{sprintf} would return. If memory couldnot be allocated, minus one is returned and @code{NULL} is stored in@code{@var{resptr}}. @end deftypefn 
Name: bcopy; Comment: bcopy -- copy memory regions of arbitary length @deftypefn Supplemental void bcopy (char @var{in}, char @var{out}, int @var{length}) Copies @var{length} bytes from memory region @var{in} to region@var{out}. The use of @code{bcopy} is deprecated in new programs. @end deftypefn 
Name: bsearch; Comment: Perform a binary search. The code below is a bit sneaky. After a comparison fails, we divide the work in half by moving either left or right. If lim is odd, moving left simply involves halving lim: e.g., when lim is 5 we look at item 2, so we change lim to 2 so that we will look at items 0 & 1. If lim is even, the same applies. If lim is odd, moving right again involes halving lim, this time moving the base up one item past p: e.g., when lim is 5 we change base to item 3 and make lim 2 so that we will look at items 3 and 4. If lim is even, however, we have to shrink it by one before halving: e.g., when lim is 4, we still looked at item 2, so we have to make lim 3, then halve, obtaining 1, so that we will only look at item 3. 
Name: bsearch_r; Comment: Perform a binary search. The code below is a bit sneaky. After a comparison fails, we divide the work in half by moving either left or right. If lim is odd, moving left simply involves halving lim: e.g., when lim is 5 we look at item 2, so we change lim to 2 so that we will look at items 0 & 1. If lim is even, the same applies. If lim is odd, moving right again involes halving lim, this time moving the base up one item past p: e.g., when lim is 5 we change base to item 3 and make lim 2 so that we will look at items 3 and 4. If lim is even, however, we have to shrink it by one before halving: e.g., when lim is 4, we still looked at item 2, so we have to make lim 3, then halve, obtaining 1, so that we will only look at item 3. 
Name: choose_temp_base; Comment: @deftypefn Extension char choose_temp_base (void) Return a prefix for temporary file names or @code{NULL} if unable tofind one. The current directory is chosen if all else fails so the program is exited if a temporary directory can't be found (@code{mktemp}fails). The buffer for the result is obtained with @code{xmalloc}. This function is provided for backwards compatibility only. Its use is not recommended. @end deftypefn 
Name: clock; Comment: FIXME: should be able to declare as clock_t. 
Name: concat_length; Comment: @undocumented concat_length 
Name: concat_copy; Comment: @undocumented concat_copy 
Name: concat_copy2; Comment: @undocumented concat_copy2 
Name: reconcat; Comment: None@end example @end deftypefn 
Name: main; Comment: Simple little test driver. 
Name: is_fnqual_component_type; Comment: True iff TYPE is a demangling component representing a function-type-qualifier. 
Name: cplus_demangle_fill_name; Comment: Fill in a DEMANGLE_COMPONENT_NAME. 
Name: cplus_demangle_fill_extended_operator; Comment: Fill in a DEMANGLE_COMPONENT_EXTENDED_OPERATOR. 
Name: cplus_demangle_fill_ctor; Comment: Fill in a DEMANGLE_COMPONENT_CTOR. 
Name: cplus_demangle_fill_dtor; Comment: Fill in a DEMANGLE_COMPONENT_DTOR. 
Name: d_make_empty; Comment: Add a new component. 
Name: d_make_comp; Comment: Add a new generic component. 
Name: d_make_demangle_mangled_name; Comment: Add a new demangle mangled name component. 
Name: d_make_name; Comment: Add a new name component. 
Name: d_make_builtin_type; Comment: Add a new builtin type component. 
Name: d_make_extended_builtin_type; Comment: Add a new extended builtin type component. 
Name: d_make_operator; Comment: Add a new operator component. 
Name: d_make_extended_operator; Comment: Add a new extended operator component. 
Name: d_make_ctor; Comment: Add a new constructor component. 
Name: d_make_dtor; Comment: Add a new destructor component. 
Name: d_make_template_param; Comment: Add a new template parameter. 
Name: d_make_function_param; Comment: Add a new function parameter. 
Name: d_make_sub; Comment: Add a new standard substitution component. 
Name: cplus_demangle_mangled_name; Comment: <mangled-name> ::= _Z <encoding> [<clone-suffix>]* TOP_LEVEL is non-zero when called at the top level. 
Name: has_return_type; Comment: Return whether a function should have a return type. The argument is the function name, which may be qualified in various ways. The rules are that template functions have return types with some exceptions, function types which are not part of a function name mangling have return types with some exceptions, and non-template function names do not have return types. The exceptions are that constructors, destructors, and conversion operators do not have return types. 
Name: is_ctor_dtor_or_conversion; Comment: Return whether a name is a constructor, a destructor, or a conversion operator. 
Name: d_encoding; Comment: <encoding> ::= <(function) name> <bare-function-type> ::= <(data) name> ::= <special-name> TOP_LEVEL is non-zero when called at the top level, in which case if DMGL_PARAMS is not set we do not demangle the function parameters. We only set this at the top level, because otherwise we would not correctly demangle names in local scopes. 
Name: d_abi_tags; Comment: <tagged-name> ::= <name> B <source-name> 
Name: d_name; Comment: <name> ::= <nested-name> ::= <unscoped-name> ::= <unscoped-template-name> <template-args> ::= <local-name> <unscoped-name> ::= <unqualified-name> ::= St <unqualified-name> <unscoped-template-name> ::= <unscoped-name> ::= <substitution> 
Name: d_nested_name; Comment: <nested-name> ::= N [<CV-qualifiers>] [<ref-qualifier>] <prefix> <unqualified-name> E ::= N [<CV-qualifiers>] [<ref-qualifier>] <template-prefix> <template-args> E 
Name: d_prefix; Comment: <prefix> ::= <prefix> <unqualified-name> ::= <template-prefix> <template-args> ::= <template-param> ::= <decltype> ::= ::= <substitution> <template-prefix> ::= <prefix> <(template) unqualified-name> ::= <template-param> ::= <substitution> SUBST is true if we should add substitutions (as normal), false if not (in an unresolved-name). 
Name: d_unqualified_name; Comment: <unqualified-name> ::= [<module-name>] <operator-name> [<abi-tags>] ::= [<module-name>] <ctor-dtor-name> [<abi-tags>] ::= [<module-name>] <source-name> [<abi-tags>] __ ::= [<module-name>] <local-source-name> [<abi-tags>] ::= [<module-name>] DC <source-name>+ E [<abi-tags>] <local-source-name>_::= L <source-name> <discriminator> [<abi-tags>] 
Name: d_source_name; Comment: <source-name> ::= <(positive length) number> <identifier> 
Name: d_number; Comment: number ::= [n] <(non-negative decimal integer)> 
Name: d_number_component; Comment: Like d_number, but returns a demangle_component. 
Name: d_identifier; Comment: identifier ::= <(unqualified source code identifier)> 
Name: d_special_name; Comment: <special-name> ::= TV <type> ::= TT <type> ::= TI <type> ::= TS <type> __ ::= TA <template-arg> ::= GV <(object) name> ::= T <call-offset> <(base) encoding> ::= Tc <call-offset> <call-offset> <(base) encoding> Also g++ extensions: ::= TC <type> <(offset) number> _ <(base) type> ::= TF <type> ::= TJ <type> ::= GR <name> __ ::= GA <encoding> __ ::= Gr <resource name> __ ::= GTt <encoding> __ ::= GTn <encoding> 
Name: d_call_offset; Comment: <call-offset> ::= h <nv-offset> _ ::= v <v-offset> _ <nv-offset> ::= <(offset) number> <v-offset> ::= <(offset) number> _ <(virtual offset) number> The C parameter, if not '_0', is a character we just read which is the start of the <call-offset>. We don't display the offset information anywhere. FIXME: We should display it in verbose mode. 
Name: d_ctor_dtor_name; Comment: <ctor-dtor-name> ::= C1 ::= C2 ::= C3 ::= D0 ::= D1 ::= D2 
Name: next_is_type_qual; Comment: True iff we're looking at an order-insensitive type-qualifier, including function-type-qualifiers. 
Name: d_cv_qualifiers; Comment: <CV-qualifiers> ::= [r] [V] [K] [Dx] 
Name: d_ref_qualifier; Comment: <ref-qualifier> ::= R ::= O 
Name: d_function_type; Comment: <function-type> ::= F [Y] <bare-function-type> [<ref-qualifier>] [T] E 
Name: d_parmlist; Comment: <type>+ 
Name: d_bare_function_type; Comment: <bare-function-type> ::= [J]<type>+ 
Name: d_class_enum_type; Comment: <class-enum-type> ::= <name> 
Name: d_array_type; Comment: <array-type> ::= A <(positive dimension) number> _ <(element) type> ::= A [<(dimension) expression>] _ <(element) type> 
Name: d_vector_type; Comment: <vector-type> ::= Dv <number> _ <type> ::= Dv _ <expression> _ <type> 
Name: d_pointer_to_member_type; Comment: <pointer-to-member-type> ::= M <(class) type> <(member) type> 
Name: d_compact_number; Comment: <non-negative number> _ 
Name: d_template_param; Comment: <template-param> ::= T_ ::= T <(parameter-2 non-negative) number> _ 
Name: d_template_args; Comment: <template-args> ::= I <template-arg>+ E 
Name: d_template_args_1; Comment: <template-arg>* E 
Name: d_template_arg; Comment: <template-arg> ::= <type> ::= X <expression> E ::= <expr-primary> 
Name: d_exprlist; Comment: Parse a sequence of expressions until we hit the terminator character. 
Name: op_is_new_cast; Comment: Returns nonzero iff OP is an operator for a C++ cast: const_cast, dynamic_cast, static_cast or reinterpret_cast. 
Name: d_unresolved_name; Comment: <unresolved-name> ::= [gs] <base-unresolved-name> # x or (with "gs") ::x ::= sr <unresolved-type> <base-unresolved-name> # T::x decltype(p)::x # T::N::x decltype(p)::N::x ::= srN <unresolved-type> <unresolved-qualifier-level>+ E <base-unresolved-name> # A::x, N::y, A<T>::z; "gs" means leading "::" ::= [gs] sr <unresolved-qualifier-level>+ E <base-unresolved-name> "gs" is handled elsewhere, as a unary operator. 
Name: d_expression_1; Comment: <expression> ::= <(unary) operator-name> <expression> ::= <(binary) operator-name> <expression> <expression> ::= <(trinary) operator-name> <expression> <expression> <expression> __::= cl <expression>+ E ::= st <type> ::= <template-param> __::= u <source-name> <template-arg> E # vendor extended expression__::= <unresolved-name> ::= <expr-primary> <braced-expression> ::= <expression> __ ::= di <field source-name> <braced-expression>_# .name = expr__ ::= dx <index expression> <braced-expression>_# [expr] = expr__ ::= dX <range begin expression> <range end expression> <braced-expression> _________# [expr ... expr] = expr
Name: d_expr_primary; Comment: <expr-primary> ::= L <type> <(value) number> E ::= L <type> <(value) float> E ::= L <mangled-name> E 
Name: d_local_name; Comment: <local-name> ::= Z <(function) encoding> E <(entity) name> [<discriminator>] ::= Z <(function) encoding> E s [<discriminator>] ::= Z <(function) encoding> E d [<parameter> number>] _ <entity name> 
Name: d_discriminator; Comment: <discriminator> ::= _ <number> # when number < 10 ::= __ <number> _ # when number >= 10 <discriminator> ::= _ <number> # when number >=10 is also accepted to support gcc versions that wrongly mangled that way. We demangle the discriminator, but we don't print it out. FIXME: We should print it out in verbose mode. 
Name: d_template_parm; Comment: <template-parm> ::= Ty ::= Tn <type> __ ::= Tt <template-head> E __ ::= Tp <template-parm> 
Name: d_template_head; Comment: <template-head> ::= <template-head>? <template-parm> 
Name: d_lambda; Comment: <closure-type-name> ::= Ul <template-head>? <lambda-sig> E [ <nonnegative number> ] _ 
Name: d_unnamed_type; Comment: <unnamed-type-name> ::= Ut [ <nonnegative number> ] _ 
Name: d_clone_suffix; Comment: <clone-suffix> ::= [ . <clone-type-identifier> ] [ . <nonnegative number> ]*
Name: d_add_substitution; Comment: Add a new substitution. 
Name: d_growable_string_init; Comment: Initialize a growable string. 
Name: d_growable_string_callback_adapter; Comment: Bridge growable strings to the callback mechanism. 
Name: d_count_templates_scopes; Comment: Walk the tree, counting the number of templates encountered, and the number of times a scope might be saved. These counts will be used to allocate data structures for d_print_comp, so the logic here must mirror the logic d_print_comp will use. It is not important that the resulting numbers are exact, so long as they are larger than the actual numbers encountered. 
Name: d_print_init; Comment: Initialize a print information structure. 
Name: cplus_demangle_print_callback; Comment: Turn components into a human readable string. OPTIONS is the options bits passed to the demangler. DC is the tree to print. CALLBACK is a function to call to flush demangled string segments as they fill the intermediate buffer, and OPAQUE is a generalized callback argument. On success, this returns 1. On failure, it returns 0, indicating a bad parse. It does not use heap memory to build an output string, so cannot encounter memory allocation failure. 
Name: cplus_demangle_print; Comment: Turn components into a human readable string. OPTIONS is the options bits passed to the demangler. DC is the tree to print. ESTIMATE is a guess at the length of the result. This returns a string allocated by malloc, or NULL on error. On success, this sets *PALC to the size of the allocated buffer. On failure, this sets *PALC to 0 for a bad parse, or to 1 for a memory allocation failure. 
Name: d_index_template_argument; Comment: Returns the I'th element of the template arglist ARGS, or NULL on failure. If I is negative, return the entire arglist. 
Name: d_lookup_template_argument; Comment: Returns the template argument from the current context indicated by DC, which is a DEMANGLE_COMPONENT_TEMPLATE_PARAM, or NULL. 
Name: d_find_pack; Comment: Returns a template argument pack used in DC (any will do), or NULL. 
Name: d_pack_length; Comment: Returns the length of the template argument pack DC. 
Name: d_args_length; Comment: Returns the number of template args in DC, expanding any pack expansions found there. 
Name: d_print_subexpr; Comment: DC is a component of a mangled expression. Print it, wrapped in parens if needed. 
Name: d_save_scope; Comment: Save the current scope. 
Name: d_get_saved_scope; Comment: Attempt to locate a previously saved scope. Returns NULL if no corresponding saved scope was found. 
Name: d_maybe_print_fold_expression; Comment: If DC is a C++17 fold-expression, print it and return true; otherwise return false. 
Name: is_designated_init; Comment: True iff DC represents a C99-style designated initializer. 
Name: d_maybe_print_designated_init; Comment: If DC represents a C99-style designated initializer, print it and return true; otherwise, return false. 
Name: d_print_comp_inner; Comment: Subroutine to handle components. 
Name: cplus_demangle_fill_component; Comment: Fill in most component types. 
Name: cplus_demangle_fill_builtin_type; Comment: Fill in a DEMANGLE_COMPONENT_BUILTIN_TYPE. 
Name: cplus_demangle_fill_operator; Comment: Fill in a DEMANGLE_COMPONENT_OPERATOR. 
Name: cplus_demangle_v3_components; Comment: Translate a mangled name into components. 
Name: cplus_demangle_set_style; Comment: Add a routine to set the demangling style to be sure it is valid and allow for any demangler initialization that maybe necessary. 
Name: cplus_demangle_name_to_style; Comment: Do string name to style translation 
Name: cplus_demangle; Comment: char *cplus_demangle (const char *mangled, int options) If MANGLED is a mangled function name produced by GNU C++, then a pointer to a @code{malloc}ed string giving a C++ representation of the name will be returned; otherwise NULL will be returned. It is the caller's responsibility to free the string which is returned. Note that any leading underscores, or other such characters prepended by the compilation system, are presumed to have already been stripped from MANGLED. 
Name: ada_demangle; Comment: Demangle ada names. The encoding is documented in gcc/ada/exp_dbug.ads. 
Name: xcrc32; Comment: @deftypefn Extension {unsigned int} crc32 (const unsigned char @var{buf}, @ int @var{len}, unsigned int @var{init}) Compute the 32-bit CRC of @var{buf} which has length @var{len}. Thestarting value is @var{init}; this may be used to compute the CRC ofdata split across multiple buffers by passing the return value of each call as the @var{init} parameter of the next. This is used by the @command{gdb} remote protocol for the @samp{qCRC}command. In order to get the same results as gdb for a block of data, you must pass the first CRC parameter as @code{0xffffffff}. This CRC can be specified as: Width : 32 Poly : 0x04c11db7 Init : parameter, typically 0xffffffff RefIn : false RefOut : false XorOut : 0 This differs from the "standard" CRC-32 algorithm in that the values are not reflected, and there is no final XOR value. These differences make it easy to compose the values of multiple blocks. @end deftypefn 
Name: dlang_number; Comment: Extract the number from MANGLED, and assign the result to RET. Return the remaining string on success or NULL on failure. A result larger than UINT_MAX is considered a failure. 
Name: dlang_hexdigit; Comment: Extract the hex-digit from MANGLED, and assign the result to RET. Return the remaining string on success or NULL on failure. 
Name: dlang_call_convention_p; Comment: Extract the function calling convention from MANGLED and return 1 on success or 0 on failure. 
Name: dlang_decode_backref; Comment: Extract the back reference position from MANGLED, and assign the result to RET. Return the remaining string on success or NULL on failure. A result <= 0 is a failure. 
Name: dlang_backref; Comment: Extract the symbol pointed at by the back reference and assign the result to RET. Return the remaining string on success or NULL on failure. 
Name: dlang_symbol_backref; Comment: Demangle a back referenced symbol from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_type_backref; Comment: Demangle a back referenced type from MANGLED and append it to DECL. IS_FUNCTION is 1 if the back referenced type is expected to be a function. Return the remaining string on success or NULL on failure. 
Name: dlang_symbol_name_p; Comment: Extract the beginning of a symbol name from MANGLED and return 1 on success or 0 on failure. 
Name: dlang_call_convention; Comment: Demangle the calling convention from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_type_modifiers; Comment: Extract the type modifiers from MANGLED and append them to DECL. Returns the remaining signature on success or NULL on failure. 
Name: dlang_attributes; Comment: Demangle the D function attributes from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_function_type_noreturn; Comment: Demangle the function type from MANGLED without the return type. The arguments are appended to ARGS, the calling convention is appended to CALL and attributes are appended to ATTR. Any of these can be NULL to throw the information away. Return the remaining string on success or NULL on failure. 
Name: dlang_function_type; Comment: Demangle the function type from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_function_args; Comment: Demangle the argument list from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_type; Comment: Demangle the type from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_identifier; Comment: Extract the identifier from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_lname; Comment: Extract the plain identifier from MANGLED and prepend/append it to DECL with special treatment for some magic compiler generted symbols. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_integer; Comment: Extract the integer value from MANGLED and append it to DECL, where TYPE is the type it should be represented as. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_real; Comment: Extract the floating-point value from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_string; Comment: Extract the string value from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_arrayliteral; Comment: Extract the static array value from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_assocarray; Comment: Extract the associative array value from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_structlit; Comment: Extract the struct literal value for NAME from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_value; Comment: Extract the value from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_mangle; Comment: Extract and demangle the symbol in MANGLED and append it to DECL. Returns the remaining signature on success or NULL on failure. 
Name: dlang_parse_qualified; Comment: Extract and demangle the qualified symbol in MANGLED and append it to DECL. SUFFIX_MODIFIERS is 1 if we are printing modifiers on this after the symbol. Returns the remaining signature on success or NULL on failure. 
Name: dlang_parse_tuple; Comment: Demangle the tuple from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_template_symbol_param; Comment: Demangle the template symbol parameter from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_template_args; Comment: Demangle the argument list from MANGLED and append it to DECL. Return the remaining string on success or NULL on failure. 
Name: dlang_parse_template; Comment: Extract and demangle the template symbol in MANGLED, expected to be made up of LEN characters (-1 if unknown), and append it to DECL. Returns the remaining signature on success or NULL on failure. 
Name: dlang_demangle_init_info; Comment: Initialize the information structure we use to pass around information. 
Name: dlang_demangle; Comment: Extract and demangle the symbol in MANGLED. Returns the demangled signature on success or NULL on failure. 
Name: dyn_string_init; Comment: Performs in-place initialization of a dyn_string struct. This function can be used with a dyn_string struct on the stack or embedded in another object. The contents of of the string itself are still dynamically allocated. The string initially is capable of holding at least SPACE characeters, including the terminating NUL. If SPACE is 0, it will silently be increated to 1. If RETURN_ON_ALLOCATION_FAILURE is defined and memory allocation fails, returns 0. Otherwise returns 1. 
Name: dyn_string_new; Comment: Create a new dynamic string capable of holding at least SPACE characters, including the terminating NUL. If SPACE is 0, it will be silently increased to 1. If RETURN_ON_ALLOCATION_FAILURE is defined and memory allocation fails, returns NULL. Otherwise returns the newly allocated string. 
Name: dyn_string_delete; Comment: Free the memory used by DS. 
Name: dyn_string_release; Comment: Returns the contents of DS in a buffer allocated with malloc. It is the caller's responsibility to deallocate the buffer using free. DS is then set to the empty string. Deletes DS itself. 
Name: dyn_string_resize; Comment: Increase the capacity of DS so it can hold at least SPACE characters, plus the terminating NUL. This function will not (at present) reduce the capacity of DS. Returns DS on success. If RETURN_ON_ALLOCATION_FAILURE is defined and a memory allocation operation fails, deletes DS and returns NULL. 
Name: dyn_string_clear; Comment: Sets the contents of DS to the empty string. 
Name: dyn_string_copy; Comment: Makes the contents of DEST the same as the contents of SRC. DEST and SRC must be distinct. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_copy_cstr; Comment: Copies SRC, a NUL-terminated string, into DEST. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_prepend; Comment: Inserts SRC at the beginning of DEST. DEST is expanded as necessary. SRC and DEST must be distinct. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_prepend_cstr; Comment: Inserts SRC, a NUL-terminated string, at the beginning of DEST. DEST is expanded as necessary. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_insert; Comment: Inserts SRC into DEST starting at position POS. DEST is expanded as necessary. SRC and DEST must be distinct. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_insert_cstr; Comment: Inserts SRC, a NUL-terminated string, into DEST starting at position POS. DEST is expanded as necessary. Returns 1 on success. On failure, RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_insert_char; Comment: Inserts character C into DEST starting at position POS. DEST is expanded as necessary. Returns 1 on success. On failure, RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_append; Comment: Append S to DS, resizing DS if necessary. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_append_cstr; Comment: Append the NUL-terminated string S to DS, resizing DS if necessary. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_append_char; Comment: Appends C to the end of DEST. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_substring; Comment: Sets the contents of DEST to the substring of SRC starting at START and ending before END. START must be less than or equal to END, and both must be between zero and the length of SRC, inclusive. Returns 1 on success. On failure, if RETURN_ON_ALLOCATION_FAILURE, deletes DEST and returns 0. 
Name: dyn_string_eq; Comment: Returns non-zero if DS1 and DS2 have the same contents. 
Name: ffs; Comment: ffs -- Find the first bit set in the parameter @deftypefn Supplemental int ffs (int @var{valu}) Find the first (least significant) bit set in @var{valu}. Bits arenumbered from right to left, starting with bit 1 (corresponding to the value 1). If @var{valu} is zero, zero is returned. @end deftypefn 
Name: fibheap_new; Comment: Create a new fibonacci heap. 
Name: fibnode_new; Comment: Create a new fibonacci heap node. 
Name: fibheap_insert; Comment: Insert DATA, with priority KEY, into HEAP. 
Name: fibheap_min; Comment: Return the data of the minimum node (if we know it). 
Name: fibheap_min_key; Comment: Return the key of the minimum node (if we know it). 
Name: fibheap_union; Comment: Union HEAPA and HEAPB into a new heap. 
Name: fibheap_extract_min; Comment: Extract the data of the minimum node from HEAP. 
Name: fibheap_replace_key_data; Comment: Replace both the KEY and the DATA associated with NODE. 
Name: fibheap_replace_data; Comment: Replace the DATA associated with NODE. 
Name: fibheap_replace_key; Comment: Replace the KEY associated with NODE. 
Name: fibheap_delete_node; Comment: Delete NODE from HEAP. 
Name: fibheap_delete; Comment: Delete HEAP. 
Name: fibheap_empty; Comment: Determine if HEAP is empty. 
Name: fibheap_extr_min_node; Comment: Extract the minimum node of the heap. 
Name: fibheap_ins_root; Comment: Insert NODE into the root list of HEAP. 
Name: fibheap_rem_root; Comment: Remove NODE from the rootlist of HEAP. 
Name: fibheap_consolidate; Comment: Consolidate the heap. 
Name: fibheap_link; Comment: Make NODE a child of PARENT. 
Name: fibheap_cut; Comment: Remove NODE from PARENT's child list. 
Name: is_valid_fd; Comment: Return true when FD file descriptor exists. 
Name: filename_cmp; Comment: @deftypefn Extension int filename_cmp (const char @var{s1}, const char @var{s2}) Return zero if the two file names @var{s1} and @var{s2} are equivalent.If not equivalent, the returned value is similar to what @code{strcmp}would return. In other words, it returns a negative value if @var{s1}is less than @var{s2}, or a positive value if @var{s2} is greater than@var{s2}. This function does not normalize file names. As a result, this function will treat filenames that are spelled differently as different even in the case when the two filenames point to the same underlying file. However, it does handle the fact that on DOS-like file systems, forward and backward slashes are equal. @end deftypefn 
Name: filename_ncmp; Comment: @deftypefn Extension int filename_ncmp (const char @var{s1}, const char @var{s2}, size_t @var{n}) Return zero if the two file names @var{s1} and @var{s2} are equivalentin range @var{n}.If not equivalent, the returned value is similar to what @code{strncmp}would return. In other words, it returns a negative value if @var{s1}is less than @var{s2}, or a positive value if @var{s2} is greater than@var{s2}. This function does not normalize file names. As a result, this function will treat filenames that are spelled differently as different even in the case when the two filenames point to the same underlying file. However, it does handle the fact that on DOS-like file systems, forward and backward slashes are equal. @end deftypefn 
Name: filename_hash; Comment: @deftypefn Extension hashval_t filename_hash (const void @var{s}) Return the hash value for file name @var{s} that will be comparedusing filename_cmp. This function is for use with hashtab.c hash tables. @end deftypefn 
Name: filename_eq; Comment: @deftypefn Extension int filename_eq (const void @var{s1}, const void @var{s2}) Return non-zero if file names @var{s1} and @var{s2} are equivalent.This function is for use with hashtab.c hash tables. @end deftypefn 
Name: canonical_filename_eq; Comment: @deftypefn Extension int canonical_filename_eq (const char @var{a}, const char @var{b}) Return non-zero if file names @var{a} and @var{b} are equivalent.This function compares the canonical versions of the filenames as returned by @code{lrealpath()}, so that so that different file names pointing to the sameunderlying file are treated as being identical. @end deftypefn 
Name: mant_bits_set; Comment: Return 1 if any bits are explicitly set in the mantissa of UFROM, format FMT, 0 otherwise. 
Name: get_field; Comment: Extract a field which starts at START and is LEN bits long. DATA and TOTAL_LEN are the thing we are extracting it from, in byteorder ORDER. 
Name: floatformat_to_double; Comment: Convert from FMT to a double. FROM is the address of the extended float. Store the double in *TO. 
Name: put_field; Comment: Set a field which starts at START and is LEN bits long. DATA and TOTAL_LEN are the thing we are extracting it from, in byteorder ORDER. 
Name: floatformat_from_double; Comment: The converse: convert the double *FROM to an extended float and store where TO points. Neither FROM nor TO have any alignment restrictions. 
Name: floatformat_is_valid; Comment: Return non-zero iff the data at FROM is a valid number in format FMT. 
Name: ieee_test; Comment: This is to be run on a host which uses IEEE floating point. 
Name: fnmatch; Comment: Match STRING against the filename pattern PATTERN, returning zero if it matches, nonzero if not. 
Name: __attribute__; Comment: Make sure the environment variable bash 2.0 puts in the environment is valid for the getopt call we must make sure that the ARGV passed to getopt is that one passed to the process. 
Name: _getopt_internal; Comment: Scan elements of ARGV (whose length is ARGC) for option characters given in OPTSTRING. If an element of ARGV starts with '-', and is not exactly "-" or "--", then it is an option element. The characters of this element (aside from the initial '-') are option characters. If `getopt' is called repeatedly, it returns successively each of the option characters from each of the option elements. If `getopt' finds another option character, it returns that character, updating `optind' and `nextchar' so that the next call to `getopt' can resume the scan with the following option character or ARGV-element. If there are no more option characters, `getopt' returns -1. Then `optind' is the index in ARGV of the first ARGV-element that is not an option. (The ARGV-elements have been permuted so that those that are not options now come last.) OPTSTRING is a string containing the legitimate option characters. If an option character is seen that is not listed in OPTSTRING, return '?' after printing an error message. If you set `opterr' to zero, the error message is suppressed but we still return '?'. If a char in OPTSTRING is followed by a colon, that means it wants an arg, so the following text in the same ARGV-element, or the text of the following ARGV-element, is returned in `optarg'. Two colons mean an option that wants an optional arg; if there is text in the current ARGV-element, it is returned in `optarg', otherwise `optarg' is set to zero. If OPTSTRING starts with `-' or `+', it requests different methods of handling the non-option ARGV-elements. See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above. Long-named options begin with `--' instead of `-'. Their names may be abbreviated as long as the abbreviation is unique or is an exact match for some defined option. If they have an argument, it follows the option name in the same ARGV-element, separated from the option name by a `=', or else the in next ARGV-element. When `getopt' finds a long-named option, it returns 0 if that option's `flag' field is nonzero, the value of the option's `val' field if the `flag' field is zero. The elements of ARGV aren't really const, because we permute them. But we pretend they're const in the prototype to be compatible with other systems. LONGOPTS is a vector of `struct option' terminated by an element containing a name which is zero. LONGIND returns the index in LONGOPT of the long-named option found. It is only valid when a long-named option has been found by the most recent call. If LONG_ONLY is nonzero, '-' as well as '--' can introduce long-named options. 
Name: main; Comment: Compile with -DTEST to make an executable for use in testing the above definition of `getopt'. 
Name: getopt_long_only; Comment: Like getopt_long, but '-' as well as '--' can indicate a long option. If an option that starts with '-' (not '--') doesn't match a long option, but does match a short option, it is parsed as a short option instead. 
Name: getpwd; Comment: Get the working directory. Use the PWD environment variable if it's set correctly, since this is faster and gives more uniform answers to the user. Yield the working directory if successful; otherwise, yield 0 and set errno. 
Name: get_run_time; Comment: @deftypefn Replacement long get_run_time (void) Returns the time used so far, in microseconds. If possible, this is the time used by this process, else it is the elapsed time since the process started. @end deftypefn 
Name: gettimeofday; Comment: @deftypefn Supplemental int gettimeofday (struct timeval @var{tp}, void @var{tz}) Writes the current time to @var{tp}. This implementation requiresthat @var{tz} be NULL. Returns 0 on success, -1 on failure. @end deftypefn 
Name: higher_prime_index; Comment: The following function returns an index into the above table of the nearest prime number which is greater than N, and near a power of two. 
Name: eq_pointer; Comment: Returns non-zero if P1 and P2 are equal. 
Name: size_t; Comment: Return the current size of given hash table. 
Name: size_t; Comment: Return the current number of elements in given hash table. 
Name: htab_create_alloc; Comment: This function creates table with length slightly longer than given source length. Created hash table is initiated as empty (all the hash table entries are HTAB_EMPTY_ENTRY). The function returns the created hash table, or NULL if memory allocation fails. 
Name: htab_create_alloc_ex; Comment: As above, but uses the variants of ALLOC_F and FREE_F which accept an extra argument. 
Name: htab_create_typed_alloc; Comment: @deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size}, @htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f}, @htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f}, @htab_free @var{free_f}) This function creates a hash table that uses two different allocators @var{alloc_tab_f} and @var{alloc_f} to use for allocating the table itselfand its entries respectively. This is useful when variables of different types need to be allocated with different allocators. The created hash table is slightly larger than @var{size} and it isinitially empty (all the hash table entries are @code{HTAB_EMPTY_ENTRY}).The function returns the created hash table, or @code{NULL} if memoryallocation fails. @end deftypefn 
Name: htab_set_functions_ex; Comment: Update the function pointers and allocation parameter in the htab_t. 
Name: htab_create; Comment: These functions exist solely for backward compatibility. 
Name: htab_delete; Comment: This function frees all memory allocated for given hash table. Naturally the hash table must already exist. 
Name: htab_empty; Comment: This function clears all entries in the given hash table. 
Name: find_empty_slot_for_expand; Comment: Similar to htab_find_slot, but without several unwanted side effects: - Does not call htab->eq_f when it finds an existing entry. - Does not change the count of elements/searches/collisions in the hash table. This function also assumes there are no deleted entries in the table. HASH is the hash value for the element to be inserted. 
Name: htab_expand; Comment: The following function changes size of memory allocated for the entries and repeatedly inserts the table elements. The occupancy of the table after the call will be about 50%. Naturally the hash table must already exist. Remember also that the place of the table entries is changed. If memory allocation failures are allowed, this function will return zero, indicating that the table could not be expanded. If all goes well, it will return a non-zero value. 
Name: htab_find_with_hash; Comment: This function searches for a hash table entry equal to the given element. It cannot be used to insert or delete an element. 
Name: htab_find; Comment: Like htab_find_slot_with_hash, but compute the hash value from the element. 
Name: htab_find_slot_with_hash; Comment: This function searches for a hash table slot containing an entry equal to the given element. To delete an entry, call this with insert=NO_INSERT, then call htab_clear_slot on the slot returned (possibly after doing some checks). To insert an entry, call this with insert=INSERT, then write the value you want into the returned slot. When inserting an entry, NULL may be returned if memory allocation fails. 
Name: htab_find_slot; Comment: Like htab_find_slot_with_hash, but compute the hash value from the element. 
Name: htab_remove_elt; Comment: This function deletes an element with the given value from hash table (the hash is computed from the element). If there is no matching element in the hash table, this function does nothing. 
Name: htab_remove_elt_with_hash; Comment: This function deletes an element with the given value from hash table. If there is no matching element in the hash table, this function does nothing. 
Name: htab_clear_slot; Comment: This function clears a specified slot in a hash table. It is useful when you've already done the lookup and don't want to do it again. 
Name: htab_traverse_noresize; Comment: This function scans over the entire hash table calling CALLBACK for each live entry. If CALLBACK returns false, the iteration stops. INFO is passed as CALLBACK's second argument. 
Name: htab_traverse; Comment: Like htab_traverse_noresize, but does resize the table when it is too empty to improve effectivity of subsequent calls. 
Name: htab_collisions; Comment: Return the fraction of fixed collisions during all work with given hash table. 
Name: htab_hash_string; Comment: Hash P as a null-terminated string. Copied from gcchashtable.c. Zack had the following to say with respect to applicability, though note that unlike hashtable.c, this hash table implementation re-hashes rather than chain buckets. http:gcc.gnu.orgmlgcc-patches2001-08msg01021.html From: Zack Weinberg <zackw@panix.com> Date: Fri, 17 Aug 2001 02:15:56 -0400 I got it by extracting all the identifiers from all the source code I had lying around in mid-1999, and testing many recurrences of the form "H_n = H_{n-1} K + c_n L + M" where K, L, M were either prime numbers or the appropriate identity. This was the best one. I don't remember exactly what constituted "best", except I was looking at bucket-length distributions mostly. So it should be very good at hashing identifiers, but might not be as good at arbitrary strings. I'll add that it thoroughly trounces the hash functions recommended for this use at http:burtleburtle.netbobhashindex.html, both on speed and bucket distribution. I haven't tried it against the function they just started using for Perl's hashes. 
Name: htab_eq_string; Comment: An equality function for null-terminated strings. 
Name: hash_pointer; Comment: Returns a hash code for pointer P. Simplified version of evahash 
Name: split_directories; Comment: Split a filename into component directories. 
Name: free_split_directories; Comment: Release storage held by split directories. 
Name: make_relative_prefix_1; Comment: Given three strings PROGNAME, BIN_PREFIX, PREFIX, return a string that gets to PREFIX starting with the directory portion of PROGNAME and a relative pathname of the difference between BIN_PREFIX and PREFIX. For example, if BIN_PREFIX is /alpha/beta/gamma/gcc/delta, PREFIX is /alpha/beta/gamma/omega/, and PROGNAME is /red/green/blue/gcc, then this function will return /red/green/blue/../../omega/. If no relative prefix can be found, return NULL. 
Name: make_relative_prefix; Comment: Do the full job, including symlink resolution. This path will find files installed in the same place as the program even when a soft link has been made to the program from somwhere else. 
Name: make_relative_prefix_ignore_links; Comment: Make the relative pathname without attempting to resolve any links. '..' etc may also be left in the pathname. This will find the files the user meant the program to find if the installation is patched together with soft links. 
Name: choose_tmpdir; Comment: @deftypefn Replacement const char* choose_tmpdir () Returns a pointer to a directory path suitable for creating temporary files in. @end deftypefn 
Name: make_temp_file_with_prefix; Comment: @deftypefn Replacement char make_temp_file (const char @var{suffix}) Return a temporary file name (as a string) or @code{NULL} if unable tocreate one. @var{suffix} is a suffix to append to the file name. Thestring is @code{malloc}ed, and the temporary file has been created. @end deftypefn 
Name: md5_init_ctx; Comment: Initialize structure containing state of computation. (RFC 1321, 3.3: Step 3) 
Name: md5_read_ctx; Comment: Put result from CTX in first 16 bytes following RESBUF. The result must be in little endian byte order. IMPORTANT: RESBUF may not be aligned as strongly as MD5_UNIT32 so we put things in a local (aligned) buffer first, then memcpy into RESBUF. 
Name: md5_finish_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. IMPORTANT: On some systems it is required that RESBUF is correctly aligned for a 32 bits value. 
Name: md5_stream; Comment: Compute MD5 message digest for bytes read from STREAM. The resulting message digest number will be written into the 16 bytes beginning at RESBLOCK. 
Name: md5_buffer; Comment: Compute MD5 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: md5_process_block; Comment: Process LEN bytes of BUFFER, accumulating context into CTX. It is assumed that LEN % 64 == 0. 
Name: memmem; Comment: Return the first occurrence of NEEDLE in HAYSTACK. 
Name: mkstemps; Comment: @deftypefn Replacement int mkstemps (char @var{pattern}, int @var{suffix_len}) Generate a unique temporary file name from @var{pattern}.@var{pattern} has the form: @example @var{path}ccXXXXXX@var{suffix}@end example @var{suffix_len} tells us how long @var{suffix} is (it can be zerolength). The last six characters of @var{pattern} before @var{suffix}must be @samp{XXXXXX}; they are replaced with a string that makes thefilename unique. Returns a file descriptor open on the file for reading and writing. @end deftypefn 
Name: objalloc_create; Comment: Create an objalloc structure. 
Name: _objalloc_alloc; Comment: Allocate space from an objalloc structure. 
Name: objalloc_free; Comment: Free an entire objalloc structure. 
Name: objalloc_free_block; Comment: Free a block from an objalloc structure. This also frees all more recently allocated blocks. 
Name: call_chunkfun; Comment: Call functions with either the traditional malloc/free calling interface, or the mmalloc/mfree interface (that adds an extra first argument), based on the value of use_extra_arg. 
Name: _obstack_begin_worker; Comment: Initialize an obstack H for use. Specify chunk size SIZE (0 means default). Objects start on multiples of ALIGNMENT (0 means use default). Return nonzero if successful, calls obstack_alloc_failed_handler if allocation fails. 
Name: _obstack_newchunk; Comment: Allocate a new current chunk for the obstack *H on the assumption that LENGTH bytes need to be added to the current object, or a new object of length LENGTH allocated. Copies any partial object from the end of the old chunk to the beginning of the new one. 
Name: _obstack_free; Comment: Free objects in obstack H, including OBJ and everything allocate more recently than OBJ. If OBJ is zero, free everything in H. 
Name: partition_new; Comment: Creates a partition of NUM_ELEMENTS elements. Initially each element is in a class by itself. 
Name: partition_delete; Comment: Freeds a partition. 
Name: partition_union; Comment: Unites the classes containing ELEM1 and ELEM2 into a single class of partition PART. If ELEM1 and ELEM2 are already in the same class, does nothing. Returns the canonical element of the resulting union class. 
Name: elem_compare; Comment: Compare elements ELEM1 and ELEM2 from array of integers, given a pointer to each. Used to qsort such an array. 
Name: partition_print; Comment: Prints PART to the file pointer FP. The elements of each class are sorted. 
Name: pex_init_common; Comment: Initialize a pex_obj structure. 
Name: pex_add_remove; Comment: Add a file to be removed when we are done. 
Name: temp_file; Comment: Generate a temporary file name based on OBJ, FLAGS, and NAME. Return NULL if we were unable to reserve a temporary filename. If non-NULL, the result is either allocated with malloc, or the same pointer as NAME. 
Name: pex_run_in_environment; Comment: As for pex_run (), but permits the environment for the child process to be specified. 
Name: pex_run; Comment: Run a program. 
Name: pex_input_file; Comment: Return a FILE pointer for a temporary file to fill with input for the pipeline. 
Name: pex_input_pipe; Comment: Return a stream for a pipe connected to the standard input of the first stage of the pipeline. 
Name: pex_read_output; Comment: Return a FILE pointer for the output of the last program executed. 
Name: pex_get_status_and_time; Comment: Get the exit status and, if requested, the resource time for all the child processes. Return 0 on failure, 1 on success. 
Name: pex_get_status; Comment: Get exit status of executed programs. 
Name: pex_get_times; Comment: Get process times of executed programs. 
Name: pex_free; Comment: Free a pex_obj structure. 
Name: pex_init; Comment: Return a newly initialized pex_obj structure. 
Name: pex_djgpp_open_read; Comment: Open a file for reading. 
Name: pex_djgpp_open_write; Comment: Open a file for writing. 
Name: pex_djgpp_close; Comment: Close a file. 
Name: pex_djgpp_exec_child; Comment: Execute a child. 
Name: pex_djgpp_wait; Comment: Wait for a child process to complete. Actually the child process has already completed, and we just need to return the exit status. 
Name: pex_msdos_open; Comment: Open a file. FIXME: We ignore the binary argument, since we have no way to handle it. 
Name: pex_msdos_fdindex; Comment: Get the index into msdos->files associated with an open file descriptor. 
Name: pex_msdos_close; Comment: Close a file. 
Name: pex_msdos_exec_child; Comment: Execute a child. 
Name: pex_msdos_wait; Comment: Wait for a child process to complete. Actually the child process has already completed, and we just need to return the exit status. 
Name: pex_msdos_cleanup; Comment: Clean up the pex_msdos structure. 
Name: to_ptr32; Comment: Return a 32 bit pointer to an array of 32 bit pointers given a 64 bit pointer to an array of 64 bit pointers. 
Name: pex_unix_open_read; Comment: Open a file for reading. 
Name: pex_unix_open_write; Comment: Open a file for writing. 
Name: pex_unix_close; Comment: Close a file. 
Name: save_and_install_fd; Comment: Subroutine of pex_unix_exec_child. Move OLD_FD to a new file descriptor to be stored in *PNEW_FD, save the flags in *PFLAGS, and arrange for the saved copy to be close-on-exec. Move CHILD_FD into OLD_FD. If CHILD_FD is -1, OLD_FD is to be closed. Return -1 on error. 
Name: restore_fd; Comment: Subroutine of pex_unix_exec_child. Move SAVE_FD back to OLD_FD restoring FLAGS. If SAVE_FD < 0, OLD_FD is to be closed. 
Name: pex_unix_exec_child; Comment: Implementation of pex->exec_child using standard vfork + exec. 
Name: pex_unix_wait; Comment: Wait for a child process to complete. 
Name: pex_unix_pipe; Comment: Create a pipe. 
Name: pex_unix_fdopenr; Comment: Get a FILE pointer to read from a file descriptor. 
Name: backslashify; Comment: Ensure that the executable pathname uses Win32 backslashes. This is not necessary on NT, but on W9x, forward slashes causes failure of spawn* and exec* functions (and probably any function that calls CreateProcess) *iff* the executable pathname (argv[0]) is a quoted string. And quoting is necessary in case a pathname contains embedded white space. You can't win. 
Name: pex_win32_open_read; Comment: Open a file for reading. 
Name: pex_win32_open_write; Comment: Open a file for writing. 
Name: pex_win32_close; Comment: Close a file. 
Name: tack_on_executable; Comment: Tack the executable on the end of a (possibly slash terminated) buffer and convert everything to _. 
Name: openkey; Comment: Walk down a registry hierarchy until the end. Return the key. 
Name: mingw_rootify; Comment: Return the "mingw root" as derived from the mingw uninstall information. 
Name: msys_rootify; Comment: Read the install location of msys from it's installation file and rootify the executable based on that. 
Name: argv_to_argc; Comment: Return the number of arguments in an argv array, not including the null terminating argument. 
Name: argv_to_cmdline; Comment: Return a Windows command-line from ARGV. It is the caller's responsibility to free the string returned. 
Name: find_executable; Comment: Returns the full path to PROGRAM. If SEARCH is true, look for PROGRAM in each directory in PATH. 
Name: env_compare; Comment: Low-level process creation function and helper. 
Name: spawn_script; Comment: Spawn a script. This simulates the Unix script execution mechanism. This function is called as a fallback if win32_spawn fails. 
Name: pex_win32_exec_child; Comment: Execute a child. 
Name: pex_win32_wait; Comment: Wait for a child process to complete. MS CRTDLL doesn't return enough information in status to decide if the child exited due to a signal or not, rather it simply returns an integer with the exit code of the child; eg., if the child exited with an abort() call and didn't have a handler for SIGABRT, it simply returns with status == 3. We fix the status code to conform to the usual WIF* macros. Note that WIFSIGNALED will never be true under CRTDLL. 
Name: pex_win32_pipe; Comment: Create a pipe. 
Name: pex_win32_fdopenr; Comment: Get a FILE pointer to read from a file descriptor. 
Name: physmem_total; Comment: Return the total amount of physical memory. 
Name: physmem_available; Comment: Return the amount of physical memory available. 
Name: putenv; Comment: Put STRING, which is of the form "NAME=VALUE", in the environment. 
Name: srandom; Comment: Initialize the random number generator based on the given seed. If the type is the trivial no-state-information type, just remember the seed. Otherwise, initializes state[] based on the given "seed" via a linear congruential generator. Then, the pointers are set to known locations that are exactly rand_sep places apart. Lastly, it cycles the state information a given number of times to get rid of any initial dependencies introduced by the L.C.R.N.G. Note that the initialization of randtbl[] for default usage relies on values produced by this routine. 
Name: initstate; Comment: Initialize the state information in the given array of N bytes for future random number generation. Based on the number of bytes we are given, and the break values for the different R.N.G.'s, we choose the best (largest) one we can and set things up for it. srandom is then called to initialize the state information. Note that on return from srandom, we set state[-1] to be the type multiplexed with the current value of the rear pointer; this is so successive calls to initstate won't lose this information and will be able to restart with setstate. Note: The first thing we do is save the current state, if any, just like setstate so that it doesn't matter when initstate is called. Returns a pointer to the old state. 
Name: setstate; Comment: Restore the state from the given state array. Note: It is important that we also remember the locations of the pointers in the current state information, and restore the locations of the pointers from the old state information. This is done by multiplexing the pointer location into the zeroeth word of the state information. Note that due to the order in which things are done, it is OK to call setstate with the same state as the current state Returns a pointer to the old state information. 
Name: random; Comment: If we are using the trivial TYPE_0 R.N.G., just do the old linear congruential bit. Otherwise, we do our fancy trinomial stuff, which is the same in all ther other cases due to all the global variables that have been set up. The basic operation is to add the number at the rear pointer into the one at the front pointer. Then both pointers are advanced to the next location cyclically in the table. The value returned is the sum generated, reduced to 31 bits by throwing away the "least random" low bit. Note: The code takes advantage of the fact that both the front and rear pointers can't wrap on the same call by not testing the rear pointer if the front one has wrapped. Returns a 31-bit random number. 
Name: print_fastmap; Comment: Print the fastmap in human-readable form. 
Name: PREFIX; Comment: Print a compiled pattern string in human-readable form, starting at the START pointer into it and ending just before the pointer END. 
Name: re_set_syntax; Comment: Specify the precise syntax of regexps for compilation. This provides for compatibility for various utilities which historically have different, incompatible syntaxes. The argument SYNTAX is a bit mask comprised of the various bits defined in regex.h. We return the old syntax. 
Name: peek; Comment: Parsing functions. 
Name: print_str; Comment: Printing functions. 
Name: decode_lower_hex_nibble; Comment: Return a 0x0-0xf value if the char is 0-9a-f, and -1 otherwise. 
Name: decode_legacy_escape; Comment: Return the unescaped character for a "$...$" escape, or 0 if invalid. 
Name: print_lifetime_from_index; Comment: Print the lifetime according to the previously decoded index. An index of `0` always refers to `'_`, but starting with `1`, indices refer to late-bound lifetimes introduced by a binder. 
Name: demangle_binder; Comment: Optionally enter a binder ('G') for late-bound lifetimes, printing e.g. `for<'a, 'b> `, and make those lifetimes visible to the caller (via depth level, which the caller should reset). 
Name: demangle_path_maybe_open_generics; Comment: A trait in a trait object may have some "existential projections" (i.e. associated type bindings) after it, which should be printed in the `<...>` of the trait, e.g. `dyn Trait<T, U, Assoc=X>`. To this end, this method will keep the `<...>` of an 'I' path open, by omitting the `>`, and return `Ok(true)` in that case. 
Name: is_legacy_prefixed_hash; Comment: A legacy hash is the prefix "h" followed by 16 lowercase hex digits. The hex digits must contain at least 5 distinct digits. 
Name: setproctitle; Comment: @deftypefn Supplemental void setproctitle (const char @var{fmt}, ...) Set the title of a process to @var{fmt}. va args not supported for now,but defined for compatibility with BSD. @end deftypefn 
Name: sha1_init_ctx; Comment: Take a pointer to a 160 bit block of data (five 32 bit ints) and initialize it to the start constants of the SHA1 algorithm. This must be called before using hash in the call to sha1_hash. 
Name: sha1_read_ctx; Comment: Put result from CTX in first 20 bytes following RESBUF. The result must be in little endian byte order. IMPORTANT: On some systems it is required that RESBUF is correctly aligned for a 32-bit value. 
Name: sha1_finish_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. IMPORTANT: On some systems it is required that RESBUF is correctly aligned for a 32-bit value. 
Name: sha1_stream; Comment: Compute SHA1 message digest for bytes read from STREAM. The resulting message digest number will be written into the 16 bytes beginning at RESBLOCK. 
Name: sha1_buffer; Comment: Compute SHA1 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: sha1_process_block; Comment: Process LEN bytes of BUFFER, accumulating context into CTX. It is assumed that LEN % 64 == 0. Most of this code comes from GnuPG's cipher/sha1.c. 
Name: simple_object_coff_match; Comment: See if we have a COFF file. 
Name: simple_object_coff_read_strtab; Comment: Read the string table in a COFF file. 
Name: simple_object_coff_find_sections; Comment: Find all sections in a COFF file. 
Name: simple_object_coff_fetch_attributes; Comment: Fetch the attributes for an simple_object_read. 
Name: simple_object_coff_release_read; Comment: Release the private data for an simple_object_read. 
Name: simple_object_coff_attributes_merge; Comment: Compare two attributes structures. 
Name: simple_object_coff_release_attributes; Comment: Release the private data for an attributes structure. 
Name: simple_object_coff_start_write; Comment: Prepare to write out a file. 
Name: simple_object_coff_write_filehdr; Comment: Write out a COFF filehdr. 
Name: simple_object_coff_write_scnhdr; Comment: Write out a COFF section header. 
Name: simple_object_coff_write_to_file; Comment: Write out a complete COFF file. 
Name: simple_object_coff_release_write; Comment: Release the private data for an simple_object_write structure. 
Name: simple_object_elf_match; Comment: See if we have an ELF file. 
Name: simple_object_elf_find_sections; Comment: Find all sections in an ELF file. 
Name: simple_object_elf_fetch_attributes; Comment: Fetch the attributes for an simple_object_read. 
Name: simple_object_elf_release_read; Comment: Release the privata data for an simple_object_read. 
Name: simple_object_elf_attributes_merge; Comment: Compare two attributes structures. 
Name: simple_object_elf_release_attributes; Comment: Release the private data for an attributes structure. 
Name: simple_object_elf_start_write; Comment: Prepare to write out a file. 
Name: simple_object_elf_write_ehdr; Comment: Write out an ELF ehdr. 
Name: simple_object_elf_write_shdr; Comment: Write out an ELF shdr. 
Name: simple_object_elf_write_to_file; Comment: Write out a complete ELF file. Ehdr initial dummy Shdr user-created Shdrs .shstrtab Shdr user-created section data .shstrtab data 
Name: simple_object_elf_release_write; Comment: Release the private data for an simple_object_write structure. 
Name: simple_object_elf_copy_lto_debug_sections; Comment: Copy all sections in an ELF file. 
Name: simple_object_mach_o_match; Comment: See if we have a Mach-O MH_OBJECT file: A standard MH_OBJECT (from as) will have three load commands: 0 - LC_SEGMENT/LC_SEGMENT64 1 - LC_SYMTAB 2 - LC_DYSYMTAB The LC_SEGMENT/LC_SEGMENT64 will introduce a single anonymous segment containing all the sections. Files written by simple-object will have only the segment command (no symbol tables). 
Name: simple_object_mach_o_section_info; Comment: Get the file offset and size from a section header. 
Name: simple_object_mach_o_find_sections; Comment: Find all sections in a Mach-O file. 
Name: simple_object_mach_o_fetch_attributes; Comment: Fetch the attributes for an simple_object_read. 
Name: simple_object_mach_o_release_read; Comment: Release the private data for an simple_object_read. 
Name: simple_object_mach_o_attributes_merge; Comment: Compare two attributes structures. 
Name: simple_object_mach_o_release_attributes; Comment: Release the private data for an attributes structure. 
Name: simple_object_mach_o_start_write; Comment: Prepare to write out a file. 
Name: simple_object_mach_o_write_header; Comment: Write out the header of a Mach-O file. 
Name: simple_object_mach_o_write_section_header; Comment: Write a Mach-O section header. 
Name: simple_object_mach_o_write_segment; Comment: Write out the single (anonymous) segment containing the sections of a Mach-O Object file. As a GNU extension to mach-o, when the caller specifies a segment name in sobj->segment_name, all the sections passed will be output under a single mach-o section header. The caller's sections are indexed within this 'wrapper' section by a table stored in a second mach-o section. Finally, arbitrary length section names are permitted by the extension and these are stored in a table in a third mach-o section. Note that this is only likely to make any sense for the __GNU_LTO segment at present. If the wrapper extension is not in force, we assume that the section name is in the form __SEGMENT_NAME,__section_name as per Mach-O asm. 
Name: simple_object_mach_o_write_to_file; Comment: Write out a complete Mach-O file. 
Name: simple_object_mach_o_release_write; Comment: Release the private data for an simple_object_write structure. 
Name: simple_object_xcoff_match; Comment: See if we have a XCOFF file. 
Name: simple_object_xcoff_read_strtab; Comment: Read the string table in a XCOFF file. 
Name: simple_object_xcoff_find_sections; Comment: Find all sections in a XCOFF file. 
Name: simple_object_xcoff_fetch_attributes; Comment: Fetch the attributes for an simple_object_read. 
Name: simple_object_xcoff_release_read; Comment: Release the private data for an simple_object_read. 
Name: simple_object_xcoff_attributes_merge; Comment: Compare two attributes structures. 
Name: simple_object_xcoff_release_attributes; Comment: Release the private data for an attributes structure. 
Name: simple_object_xcoff_start_write; Comment: Prepare to write out a file. 
Name: simple_object_xcoff_write_filehdr; Comment: Write out a XCOFF filehdr. 
Name: simple_object_xcoff_write_scnhdr; Comment: Write out a XCOFF section header. 
Name: simple_object_xcoff_write_to_file; Comment: Write out a complete XCOFF file. 
Name: simple_object_xcoff_release_write; Comment: Release the private data for an simple_object_write structure. 
Name: simple_object_internal_read; Comment: Read data from a file using the simple_object error reporting conventions. 
Name: simple_object_internal_write; Comment: Write data to a file using the simple_object error reporting conventions. 
Name: simple_object_start_read; Comment: Open for read. 
Name: simple_object_find_sections; Comment: Find all sections. 
Name: find_one_section; Comment: Internal function passed to find_sections. 
Name: simple_object_find_section; Comment: Find a section. 
Name: handle_lto_debug_sections; Comment: Callback to identify and rename LTO debug sections by name. Returns non-NULL if NAME is a LTO debug section, NULL if not. If RENAME is true it will rename LTO debug sections to non-LTO ones. 
Name: handle_lto_debug_sections_rename; Comment: Wrapper for handle_lto_debug_sections. 
Name: handle_lto_debug_sections_norename; Comment: Wrapper for handle_lto_debug_sections. 
Name: simple_object_copy_lto_debug_sections; Comment: Copy LTO debug sections. 
Name: simple_object_fetch_attributes; Comment: Fetch attributes. 
Name: simple_object_release_read; Comment: Release an simple_object_read. 
Name: simple_object_attributes_merge; Comment: Merge attributes. 
Name: simple_object_release_attributes; Comment: Release an attributes structure. 
Name: simple_object_start_write; Comment: Start creating an object file. 
Name: simple_object_write_create_section; Comment: Start creating a section. 
Name: simple_object_write_add_data; Comment: Add data to a section. 
Name: simple_object_write_to_file; Comment: Write the complete object file. 
Name: simple_object_release_write; Comment: Release an simple_object_write. 
Name: sort_pointers; Comment: POINTERS and WORK are both arrays of N pointers. When this function returns POINTERS will be sorted in ascending order. 
Name: splay_tree_delete_helper; Comment: Deallocate NODE (a member of SP), and all its sub-trees. 
Name: splay_tree_splay; Comment: Bottom up splay of key. 
Name: splay_tree_foreach_helper; Comment: Call FN, passing it the DATA, for every node below NODE, all of which are from SP, following an in-order traversal. If FN every returns a non-zero value, the iteration ceases immediately, and the value is returned. Otherwise, this function returns 0. 
Name: splay_tree_xmalloc_allocate; Comment: An allocator and deallocator based on xmalloc. 
Name: splay_tree_new; Comment: Allocate a new splay tree, using COMPARE_FN to compare nodes, DELETE_KEY_FN to deallocate keys, and DELETE_VALUE_FN to deallocate values. Use xmalloc to allocate the splay tree structure, and any nodes added. 
Name: splay_tree_new_with_allocator; Comment: Allocate a new splay tree, using COMPARE_FN to compare nodes, DELETE_KEY_FN to deallocate keys, and DELETE_VALUE_FN to deallocate values. 
Name: splay_tree_new_typed_alloc; Comment: @deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc @ (splay_tree_compare_fn @var{compare_fn}, @splay_tree_delete_key_fn @var{delete_key_fn}, @splay_tree_delete_value_fn @var{delete_value_fn}, @splay_tree_allocate_fn @var{tree_allocate_fn}, @splay_tree_allocate_fn @var{node_allocate_fn}, @splay_tree_deallocate_fn @var{deallocate_fn}, @void @var{allocate_data}) This function creates a splay tree that uses two different allocators @var{tree_allocate_fn} and @var{node_allocate_fn} to use for allocating thetree itself and its nodes respectively. This is useful when variables of different types need to be allocated with different allocators. The splay tree will use @var{compare_fn} to compare nodes,@var{delete_key_fn} to deallocate keys, and @var{delete_value_fn} todeallocate values. Keys and values will be deallocated when the tree is deleted using splay_tree_delete or when a node is removed using splay_tree_remove. splay_tree_insert will release the previously inserted key and value using @var{delete_key_fn} and @var{delete_value_fn}if the inserted key is already found in the tree. @end deftypefn 
Name: splay_tree_delete; Comment: Deallocate SP. 
Name: splay_tree_insert; Comment: Insert a new node (associating KEY with DATA) into SP. If a previous node with the indicated KEY exists, its data is replaced with the new value. Returns the new node. 
Name: splay_tree_remove; Comment: Remove KEY from SP. It is not an error if it did not exist. 
Name: splay_tree_lookup; Comment: Lookup KEY in SP, returning VALUE if present, and NULL otherwise. 
Name: splay_tree_max; Comment: Return the node in SP with the greatest key. 
Name: splay_tree_min; Comment: Return the node in SP with the smallest key. 
Name: splay_tree_predecessor; Comment: Return the immediate predecessor KEY, or NULL if there is no predecessor. KEY need not be present in the tree. 
Name: splay_tree_successor; Comment: Return the immediate successor KEY, or NULL if there is no successor. KEY need not be present in the tree. 
Name: splay_tree_foreach; Comment: Call FN, passing it the DATA, for every node in SP, following an in-order traversal. If FN every returns a non-zero value, the iteration ceases immediately, and the value is returned. Otherwise, this function returns 0. 
Name: splay_tree_compare_ints; Comment: Splay-tree comparison function, treating the keys as ints. 
Name: splay_tree_compare_pointers; Comment: Splay-tree comparison function, treating the keys as pointers. 
Name: splay_tree_compare_strings; Comment: Splay-tree comparison function, treating the keys as strings. 
Name: splay_tree_delete_pointers; Comment: Splay-tree delete function, simply using free. 
Name: strchr; Comment: @deftypefn Supplemental char strchr (const char @var{s}, int @var{c}) Returns a pointer to the first occurrence of the character @var{c} inthe string @var{s}, or @code{NULL} if not found. If @var{c} is itself thenull character, the results are undefined. @end deftypefn 
Name: init_error_tables; Comment: None DESCRIPTION _Using the error_table, which is initialized at compile time, generate _the error_names and the sys_errlist (if needed) tables, which are _indexed at runtime by a specific errno value. BUGS _The initialization of the tables may fail under low memory conditions, _in which case we don't do anything particularly useful, but we don't _bomb either. Who knows, it might succeed at a later point if we free _some memory in the meantime. In any case, the other routines know _how to deal with lack of a table after trying to initialize it. This _may or may not be considered to be a bug, that we don't specifically _warn about this particular failure mode. 
Name: errno_max; Comment: @deftypefn Extension int errno_max (void) Returns the maximum @code{errno} value for which a correspondingsymbolic name or message is available. Note that in the case where we use the @code{sys_errlist} supplied by the system, it is possible forthere to be more symbolic names than messages, or vice versa. In fact, the manual page for @code{perror(3C)} explicitly warns that oneshould check the size of the table (@code{sys_nerr}) before indexingit, since new error codes may be added to the system before they are added to the table. Thus @code{sys_nerr} might be smaller than valueimplied by the largest @code{errno} value defined in @code{<errno.h>}. We return the maximum value that can be used to obtain a meaningful symbolic name or message. @end deftypefn 
Name: strerror; Comment: @deftypefn Supplemental char strerror (int @var{errnoval}) Maps an @code{errno} number to an error message string, the contentsof which are implementation defined. On systems which have the external variables @code{sys_nerr} and @code{sys_errlist}, thesestrings will be the same as the ones used by @code{perror}. If the supplied error number is within the valid range of indices for the @code{sys_errlist}, but no message is available for the particularerror number, then returns the string @samp{Error @var{num}}, where@var{num} is the error number. If the supplied error number is not a valid index into @code{sys_errlist}, returns @code{NULL}. The returned string is only guaranteed to be valid only until the next call to @code{strerror}. @end deftypefn 
Name: strerrno; Comment: @deftypefn Replacement {const char} strerrno (int @var{errnum}) Given an error number returned from a system call (typically returned in @code{errno}), returns a pointer to a string containing thesymbolic name of that error number, as found in @code{<errno.h>}. If the supplied error number is within the valid range of indices for symbolic names, but no name is available for the particular error number, then returns the string @samp{Error @var{num}}, where @var{num}is the error number. If the supplied error number is not within the range of valid indices, then returns @code{NULL}. The contents of the location pointed to are only guaranteed to be valid until the next call to @code{strerrno}. @end deftypefn 
Name: strtoerrno; Comment: @deftypefn Extension int strtoerrno (const char @var{name}) Given the symbolic name of a error number (e.g., @code{EACCES}), map itto an errno value. If no translation is found, returns 0. @end deftypefn 
Name: strnlen; Comment: @deftypefn Supplemental size_t strnlen (const char @var{s}, size_t @var{maxlen}) Returns the length of @var{s}, as with @code{strlen}, but never lookspast the first @var{maxlen} characters in the string. If there is no'_0' character in the first @var{maxlen} characters, returns@var{maxlen}. @end deftypefn 
Name: strrchr; Comment: @deftypefn Supplemental char strrchr (const char @var{s}, int @var{c}) Returns a pointer to the last occurrence of the character @var{c} inthe string @var{s}, or @code{NULL} if not found. If @var{c} is itself thenull character, the results are undefined. @end deftypefn 
Name: init_signal_tables; Comment: None DESCRIPTION _Using the signal_table, which is initialized at compile time, generate _the signal_names and the sys_siglist (if needed) tables, which are _indexed at runtime by a specific signal value. BUGS _The initialization of the tables may fail under low memory conditions, _in which case we don't do anything particularly useful, but we don't _bomb either. Who knows, it might succeed at a later point if we free _some memory in the meantime. In any case, the other routines know _how to deal with lack of a table after trying to initialize it. This _may or may not be considered to be a bug, that we don't specifically _warn about this particular failure mode. 
Name: signo_max; Comment: @deftypefn Extension int signo_max (void) Returns the maximum signal value for which a corresponding symbolic name or message is available. Note that in the case where we use the @code{sys_siglist} supplied by the system, it is possible for there tobe more symbolic names than messages, or vice versa. In fact, the manual page for @code{psignal(3b)} explicitly warns that one shouldcheck the size of the table (@code{NSIG}) before indexing it, sincenew signal codes may be added to the system before they are added to the table. Thus @code{NSIG} might be smaller than value implied bythe largest signo value defined in @code{<signal.h>}. We return the maximum value that can be used to obtain a meaningful symbolic name or message. @end deftypefn 
Name: strsigno; Comment: @deftypefn Extension {const char} strsigno (int @var{signo}) Given an signal number, returns a pointer to a string containing the symbolic name of that signal number, as found in @code{<signal.h>}. If the supplied signal number is within the valid range of indices for symbolic names, but no name is available for the particular signal number, then returns the string @samp{Signal @var{num}}, where@var{num} is the signal number. If the supplied signal number is not within the range of valid indices, then returns @code{NULL}. The contents of the location pointed to are only guaranteed to be valid until the next call to @code{strsigno}. @end deftypefn 
Name: strtosigno; Comment: @deftypefn Extension int strtosigno (const char @var{name}) Given the symbolic name of a signal, map it to a signal number. If no translation is found, returns 0. @end deftypefn 
Name: strtod; Comment: Disclaimer: this is currently just used by CHILL in GDB and therefore has not been tested well. It may have been tested for nothing except that it compiles. 
Name: strtol; Comment: Convert a string to a long integer. Ignores `locale' stuff. Assumes that the upper and lower case alphabets and digits are each contiguous. 
Name: strtoll; Comment: Convert a string to a long long integer. Ignores `locale' stuff. Assumes that the upper and lower case alphabets and digits are each contiguous. 
Name: strtoul; Comment: Convert a string to an unsigned long integer. Ignores `locale' stuff. Assumes that the upper and lower case alphabets and digits are each contiguous. 
Name: strtoull; Comment: Convert a string to an unsigned long long integer. Ignores `locale' stuff. Assumes that the upper and lower case alphabets and digits are each contiguous. 
Name: strverscmp; Comment: Compare S1 and S2 as strings holding indices/version numbers, returning less than, equal to or greater than zero if S1 is less than, equal to or greater than S2 (for more info, see the Glibc texinfo doc). 
Name: timeval_add; Comment: @deftypefn Extension void timeval_add (struct timeval @var{a}, @ struct timeval @var{b}, struct timeval @var{result}) Adds @var{a} to @var{b} and stores the result in @var{result}. @end deftypefn 
Name: timeval_sub; Comment: @deftypefn Extension void timeval_sub (struct timeval @var{a}, @ struct timeval @var{b}, struct timeval @var{result}) Subtracts @var{b} from @var{a} and stores the result in @var{result}. @end deftypefn 
Name: vsnprintf; Comment: This implementation relies on a working vasprintf. 
Name: xasprintf; Comment: @deftypefn Replacement char xasprintf (const char @var{format}, ...) Print to allocated string without fail. If @code{xasprintf} fails,this will print a message to @code{stderr} (using the name set by@code{xmalloc_set_program_name}, if any) and then call @code{xexit}. @end deftypefn 
Name: xatexit; Comment: Register function FN to be run by xexit. Return 0 if successful, -1 if not. 
Name: xatexit_cleanup; Comment: Call any cleanup functions. 
Name: xstrerror; Comment: Like strerror, but result is never a null pointer. 
Name: _doprnt; Comment: Copy the type specifier. 
Name: fatal_error; Comment: Print a fatal error and exit. LINE is the line number where we detected the error, ERRMSG is the error message to print, and ERR is 0 or an errno value to print. 
Name: hook_char_replace; Comment: hook_char_replace: Replace 'replacethis' with 'withthis' 
Name: run_replaces; Comment: run_replaces: Hook here all the character for character replaces. Be warned that expanding the string or contracting the string should be handled with care. 
Name: writeout_test; Comment: write_test: Write test datafile 
Name: erase_test; Comment: erase_test: Erase the test file 
Name: run_tests; Comment: run_tests: Run expandargv Compare argv before and after. Return number of fails 
Name: main; Comment: main: Run tests. Check result and exit with appropriate code. 
Name: error; Comment: Print an error message and bump the error count. LINE is the line number where we detected the error, ERRMSG is the error to print. 
Name: check_line; Comment: Check a line in a file. 
Name: main; Comment: Main function for the pexecute tester. Run the tests. 
Name: do_cmd; Comment: Execute one of the special testing commands. 
Name: run_tests; Comment: run_tests: Run conversion function Compare results Return number of fails 
Name: is_sframe_abi_arch_aarch64; Comment: Return TRUE if the SFrame section is associated with the aarch64 ABIs. 
Name: sframe_set_errno; Comment: Store the specified error code into errp if it is non-NULL. Return SFRAME_ERR. 
Name: sframe_ret_set_errno; Comment: Store the specified error code into errp if it is non-NULL. Return NULL. 
Name: sframe_get_hdr_size; Comment: Get the SFrame header size. 
Name: sframe_fre_get_offset_count; Comment: Access functions for frame row entry data. 
Name: sframe_get_fre_type; Comment: Access functions for info from function descriptor entry. 
Name: need_swapping; Comment: Check if flipping is needed, based on ENDIAN. 
Name: flip_header; Comment: Flip the endianness of the SFrame header. 
Name: sframe_header_sanity_check_p; Comment: Check if SFrame header has valid data. 
Name: flip_fre_start_address; Comment: Flip the start address pointed to by FP. 
Name: sframe_fre_start_addr_size; Comment: Get the FRE start address size, given the FRE_TYPE. 
Name: sframe_fre_sanity_check_p; Comment: Check if the FREP has valid data. 
Name: sframe_fre_offset_bytes_size; Comment: Get FRE_INFO's offset size in bytes. 
Name: sframe_fre_entry_size; Comment: Get total size in bytes to represent FREP in the binary format. This includes the starting address, FRE info, and all the offsets. 
Name: flip_sframe; Comment: Endian flip the contents of FRAME_BUF of size BUF_SIZE. The SFrame header in the FRAME_BUF must be endian flipped prior to calling flip_sframe. Endian flipping at decode time vs encode time have different needs. At encode time, the frame_buf is in host endianness, and hence, values should be read up before the buffer is changed to foreign endianness. This change of behaviour is specified via TO_FOREIGN arg. If an error code is returned, the buffer should not be used. 
Name: sframe_decoder_get_header; Comment: Get DECODER's SFrame header. 
Name: fde_func; Comment: Compare function for qsort'ing the FDE table. 
Name: sframe_get_fre_offset; Comment: Get IDX'th offset from FRE. Set errp as applicable. 
Name: sframe_decoder_free; Comment: Free the decoder context. 
Name: sframe_fde_create_func_info; Comment: FIXME API for linker. Revisit if its better placed somewhere else? 
Name: sframe_calc_fre_type; Comment: FIXME API for linker. Revisit if its better placed somewhere else? 
Name: sframe_fre_get_base_reg_id; Comment: Get the base reg id from the FRE info. Set errp if failure. 
Name: sframe_fre_get_cfa_offset; Comment: Get the CFA offset from the FRE. If the offset is invalid, sets errp. 
Name: sframe_fre_get_fp_offset; Comment: Get the FP offset from the FRE. If the offset is invalid, sets errp. 
Name: sframe_fre_get_ra_offset; Comment: Get the RA offset from the FRE. If the offset is invalid, sets errp. 
Name: sframe_fre_get_ra_mangled_p; Comment: Get whether the RA is mangled. 
Name: sframe_decode_fre_start_address; Comment: Decode the SFrame FRE start address offset value from FRE_BUF in on-disk binary format, given the FRE_TYPE. Updates the FRE_START_ADDR. Returns 0 on success, SFRAME_ERR otherwise. 
Name: sframe_decode_fre; Comment: Decode a frame row entry FRE which starts at location FRE_BUF. The function updates ESZ to the size of the FRE as stored in the binary format. This function works closely with the SFrame binary format. Returns SFRAME_ERR if failure. 
Name: sframe_decode; Comment: Decode the specified SFrame buffer CF_BUF of size CF_SIZE and return the new SFrame decoder context. Sets ERRP for the caller if any error. Frees up the allocated memory in case of error. 
Name: sframe_decoder_get_hdr_size; Comment: Get the size of the SFrame header from the decoder context CTX. 
Name: sframe_decoder_get_abi_arch; Comment: Get the SFrame's abi/arch info given the decoder context CTX. 
Name: sframe_decoder_get_fixed_fp_offset; Comment: Get the SFrame's fixed FP offset given the decoder context CTX. 
Name: sframe_decoder_get_fixed_ra_offset; Comment: Get the SFrame's fixed RA offset given the decoder context CTX. 
Name: sframe_get_funcdesc_with_addr; Comment: Find the function descriptor entry starting which contains the specified address ADDR. 
Name: sframe_find_fre; Comment: Find the SFrame Row Entry which contains the PC. Returns SFRAME_ERR if failure. 
Name: sframe_decoder_get_num_fidx; Comment: Return the number of function descriptor entries in the SFrame decoder DCTX. 
Name: sframe_decoder_get_funcdesc; Comment: FIXME - consolidate the args and return a sframe_func_desc_index_elem rather? 
Name: sframe_decoder_get_funcdesc_at_index; Comment: Get the function descriptor entry at index FUNC_IDX in the decoder context CTX. 
Name: sframe_decoder_get_fre; Comment: Get the FRE_IDX'th FRE of the function at FUNC_IDX'th function descriptor entry in the SFrame decoder CTX. Returns error code as applicable. 
Name: sframe_encoder_get_header; Comment: Get a reference to the ENCODER's SFrame header. 
Name: sframe_encode; Comment: Create an encoder context with the given SFrame format version VER, FLAGS and ABI information. Sets errp if failure. 
Name: sframe_encoder_free; Comment: Free the encoder context. 
Name: sframe_encoder_get_hdr_size; Comment: Get the size of the SFrame header from the encoder ctx ENCODER. 
Name: sframe_encoder_get_abi_arch; Comment: Get the abi/arch info from the SFrame encoder context ENCODER. 
Name: sframe_encoder_get_num_fidx; Comment: Return the number of function descriptor entries in the SFrame encoder ENCODER. 
Name: sframe_encoder_add_fre; Comment: Add an FRE to function at FUNC_IDX'th function descriptor entry in the encoder context. 
Name: sframe_encoder_add_funcdesc; Comment: Add a new function descriptor entry with START_ADDR, FUNC_SIZE and NUM_FRES to the encoder. 
Name: sframe_encoder_write_fre_start_addr; Comment: Write the SFrame FRE start address from the in-memory FRE_START_ADDR to the buffer CONTENTS (on-disk format), given the FRE_TYPE and FRE_START_ADDR_SZ. 
Name: sframe_encoder_write_fre; Comment: Write a frame row entry pointed to by FREP into the buffer CONTENTS. The size in bytes written out are updated in ESZ. This function works closely with the SFrame binary format. Returns SFRAME_ERR if failure. 
Name: sframe_encoder_write_sframe; Comment: Serialize the core contents of the SFrame section and write out to the output buffer held in the ENCODER. Return SFRAME_ERR if failure. 
Name: sframe_encoder_write; Comment: Serialize the contents of the encoder and return the buffer. ENCODED_SIZE is updated to the size of the buffer. 
Name: insert_all_fields; Comment: Insert a raw field value VALUE into all fields in SELF->fields. The least significant bit goes in the final field. 
Name: aarch64_ins_none; Comment: Insert nothing. 
Name: aarch64_ins_regno; Comment: Insert register number. 
Name: aarch64_ins_reglane; Comment: Insert register number, index and/or other data for SIMD register element operand, e.g. the last source operand in SQDMLAL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]. 
Name: aarch64_ins_reglist; Comment: Insert regno and len field of a register list operand, e.g. Vn in TBL. 
Name: aarch64_ins_ldst_reglist; Comment: Insert Rt and opcode fields for a register list operand, e.g. Vt in AdvSIMD load/store instructions. 
Name: aarch64_ins_ldst_reglist_r; Comment: Insert Rt and S fields for a register list operand, e.g. Vt in AdvSIMD load single structure to all lanes instructions. 
Name: aarch64_ins_ldst_elemlist; Comment: Insert Q, opcode<2:1>, S, size and Rt fields for a register element list operand e.g. Vt in AdvSIMD load/store single element instructions. 
Name: aarch64_ins_advsimd_imm_shift; Comment: Insert fields immh:immb and/or Q for e.g. the shift immediate in SSHR <Vd>.<T>, <Vn>.<T>, #<shift> or SSHR <V><d>, <V><n>, #<shift>. 
Name: aarch64_ins_imm; Comment: Insert fields for e.g. the immediate operands in BFM <Wd>, <Wn>, #<immr>, #<imms>. 
Name: aarch64_ins_imm_half; Comment: Insert immediate and its shift amount for e.g. the last operand in MOVZ <Wd>, #<imm16>{, LSL #<shift>}. 
Name: aarch64_ins_advsimd_imm_modified; Comment: Insert cmode and "a:b:c:d:e:f:g:h" fields for e.g. the last operand in MOVI <Vd>.<T>, #<imm8> {, LSL #<amount>}. 
Name: aarch64_ins_fpimm; Comment: Insert fields for an 8-bit floating-point immediate. 
Name: aarch64_ins_imm_rotate1; Comment: Insert 1-bit rotation immediate (#90 or #270). 
Name: aarch64_ins_imm_rotate2; Comment: Insert 2-bit rotation immediate (#0, #90, #180 or #270). 
Name: aarch64_ins_fbits; Comment: Insert #<fbits> for the immediate operand in fp fix-point instructions, e.g. SCVTF <Dd>, <Wn>, #<fbits>. 
Name: aarch64_ins_aimm; Comment: Insert arithmetic immediate for e.g. the last operand in SUBS <Wd>, <Wn|WSP>, #<imm> {, <shift>}. 
Name: aarch64_ins_limm_1; Comment: Common routine shared by aarch64_ins{,_inv}_limm. INVERT_P says whether the operand should be inverted before encoding. 
Name: aarch64_ins_limm; Comment: Insert logical/bitmask immediate for e.g. the last operand in ORR <Wd|WSP>, <Wn>, #<imm>. 
Name: aarch64_ins_inv_limm; Comment: Insert a logical/bitmask immediate for the BIC alias of AND (etc.). 
Name: aarch64_ins_ft; Comment: Encode Ft for e.g. STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}] or LDP <Qt1>, <Qt2>, [<Xn|SP>], #<imm>. 
Name: aarch64_ins_addr_simple; Comment: Encode the address operand for e.g. STXRB <Ws>, <Wt>, [<Xn|SP>{,#0}]. 
Name: aarch64_ins_addr_regoff; Comment: Encode the address operand for e.g. STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]. 
Name: aarch64_ins_addr_offset; Comment: Encode the address operand for e.g. stlur <Xt>, [<Xn|SP>{, <amount>}]. 
Name: aarch64_ins_addr_simm; Comment: Encode the address operand for e.g. LDRSW <Xt>, [<Xn|SP>, #<simm>]!. 
Name: aarch64_ins_addr_simm10; Comment: Encode the address operand for e.g. LDRAA <Xt>, [<Xn|SP>{, #<simm>}]. 
Name: aarch64_ins_addr_uimm12; Comment: Encode the address operand for e.g. LDRSW <Xt>, [<Xn|SP>{, #<pimm>}]. 
Name: aarch64_ins_simd_addr_post; Comment: Encode the address operand for e.g. LD1 {<Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>}, [<Xn|SP>], <Xm|#<amount>>. 
Name: aarch64_ins_cond; Comment: Encode the condition operand for e.g. CSEL <Xd>, <Xn>, <Xm>, <cond>. 
Name: aarch64_ins_sysreg; Comment: Encode the system register operand for e.g. MRS <Xt>, <systemreg>. 
Name: aarch64_ins_pstatefield; Comment: Encode the PSTATE field operand for e.g. MSR <pstatefield>, #<imm>. 
Name: aarch64_ins_sysins_op; Comment: Encode the system instruction op operand for e.g. AT <at_op>, <Xt>. 
Name: aarch64_ins_barrier; Comment: Encode the memory barrier option operand for e.g. DMB <option>|#<imm>. 
Name: aarch64_ins_barrier_dsb_nxs; Comment: Encode the memory barrier option operand for DSB <option>nXS|#<imm>. 
Name: aarch64_ins_prfop; Comment: Encode the prefetch operation option operand for e.g. PRFM <prfop>, [<Xn|SP>{, #<pimm>}]. 
Name: aarch64_ins_hint; Comment: Encode the hint number for instructions that alias HINT but take an operand. 
Name: aarch64_ins_reg_extended; Comment: Encode the extended register operand for e.g. STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]. 
Name: aarch64_ins_reg_shifted; Comment: Encode the shifted register operand for e.g. SUBS <Xd>, <Xn>, <Xm> {, <shift> #<amount>}. 
Name: aarch64_ins_sve_addr_ri_s4xvl; Comment: Encode an SVE address [<base>, #<simm4>*<factor>, MUL VL], where <simm4> is a 4-bit signed value and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. <simm4> is encoded in the SVE_imm4 field. 
Name: aarch64_ins_sve_addr_ri_s6xvl; Comment: Encode an SVE address [<base>, #<simm6>*<factor>, MUL VL], where <simm6> is a 6-bit signed value and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. <simm6> is encoded in the SVE_imm6 field. 
Name: aarch64_ins_sve_addr_ri_s9xvl; Comment: Encode an SVE address [<base>, #<simm9>*<factor>, MUL VL], where <simm9> is a 9-bit signed value and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. <simm9> is encoded in the concatenation of the SVE_imm6 and imm3 fields, with imm3 being the less-significant part. 
Name: aarch64_ins_sve_addr_ri_s4; Comment: Encode an SVE address [X<n>, #<SVE_imm4> << <shift>], where <SVE_imm4> is a 4-bit signed number and where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field. 
Name: aarch64_ins_sve_addr_ri_u6; Comment: Encode an SVE address [X<n>, #<SVE_imm6> << <shift>], where <SVE_imm6> is a 6-bit unsigned number and where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field. 
Name: aarch64_ins_sve_addr_rr_lsl; Comment: Encode an SVE address [X<n>, X<m>{, LSL #<shift>}], where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ins_sve_addr_rz_xtw; Comment: Encode an SVE address [X<n>, Z<m>.<T>, (S|U)XTW {#<shift>}], where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field, fields[1] specifies the offset register field and fields[2] is a single-bit field that selects SXTW over UXTW. 
Name: aarch64_ins_sve_addr_zi_u5; Comment: Encode an SVE address [Z<n>.<T>, #<imm5> << <shift>], where <imm5> is a 5-bit unsigned number and where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field. 
Name: aarch64_ext_sve_addr_zz; Comment: Encode an SVE address [Z<n>.<T>, Z<m>.<T>{, <modifier> {#<msz>}}], where <modifier> is fixed by the instruction and where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ins_sve_addr_zz_lsl; Comment: Encode an SVE address [Z<n>.<T>, Z<m>.<T>{, LSL #<msz>}], where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ins_sve_addr_zz_sxtw; Comment: Encode an SVE address [Z<n>.<T>, Z<m>.<T>, SXTW {#<msz>}], where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ins_sve_addr_zz_uxtw; Comment: Encode an SVE address [Z<n>.<T>, Z<m>.<T>, UXTW {#<msz>}], where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ins_sve_aimm; Comment: Encode an SVE ADD/SUB immediate. 
Name: aarch64_ins_sve_asimm; Comment: Encode an SVE CPY/DUP immediate. 
Name: aarch64_ins_sve_index; Comment: Encode Zn[MM], where MM has a 7-bit triangular encoding. The fields array specifies which field to use for Zn. MM is encoded in the concatenation of imm5 and SVE_tszh, with imm5 being the less significant part. 
Name: aarch64_ins_sve_limm_mov; Comment: Encode a logical/bitmask immediate for the MOV alias of SVE DUPM. 
Name: aarch64_ins_sve_quad_index; Comment: Encode Zn[MM], where Zn occupies the least-significant part of the field and where MM occupies the most-significant part. The operand-dependent value specifies the number of bits in Zn. 
Name: aarch64_ins_sve_reglist; Comment: Encode {Zn.<T> - Zm.<T>}. The fields array specifies which field to use for Zn. 
Name: aarch64_ins_sve_scale; Comment: Encode <pattern>{, MUL #<amount>}. The fields array specifies which fields to use for <pattern>. <amount> - 1 is encoded in the SVE_imm4 field. 
Name: aarch64_ins_sve_shlimm; Comment: Encode an SVE shift left immediate. 
Name: aarch64_ins_sve_shrimm; Comment: Encode an SVE shift right immediate. 
Name: aarch64_ins_sve_float_half_one; Comment: Encode a single-bit immediate that selects between #0.5 and #1.0. The fields array specifies which field to use. 
Name: aarch64_ins_sve_float_half_two; Comment: Encode a single-bit immediate that selects between #0.5 and #2.0. The fields array specifies which field to use. 
Name: aarch64_ins_sve_float_zero_one; Comment: Encode a single-bit immediate that selects between #0.0 and #1.0. The fields array specifies which field to use. 
Name: aarch64_ins_sme_za_hv_tiles; Comment: Encode in SME instruction such as MOVA ZA tile vector register number, vector indicator, vector selector and immediate. 
Name: aarch64_ins_sme_za_list; Comment: Encode in SME instruction ZERO list of up to eight 64-bit element tile names separated by commas, encoded in the "imm8" field. For programmer convenience an assembler must also accept the names of 32-bit, 16-bit and 8-bit element tiles which are converted into the corresponding set of 64-bit element tiles. 
Name: aarch64_ins_sme_sm_za; Comment: Encode in SMSTART and SMSTOP {SM | ZA } mode. 
Name: aarch64_ins_sme_pred_reg_with_index; Comment: Encode source scalable predicate register (Pn), name of the index base register W12-W15 (Rm), and optional element index, defaulting to 0, in the range 0 to one less than the number of vector elements in a 128-bit vector register, encoded in "i1:tszh:tszl". 
Name: aarch64_ins_x0_to_x30; Comment: Insert X0-X30. Register 31 is unallocated. 
Name: encode_asimd_fcvt; Comment: Encode size[0], i.e. bit 22, for e.g. FCVTN<Q> <Vd>.<Tb>, <Vn>.<Ta>. 
Name: encode_asisd_fcvtxn; Comment: Encode size[0], i.e. bit 22, for e.g. FCVTXN <Vb><d>, <Va><n>. 
Name: encode_fcvt; Comment: Encode the 'opc' field for e.g. FCVT <Dd>, <Sn>. 
Name: aarch64_get_variant; Comment: Return the index in qualifiers_list that INST is using. Should only be called once the qualifiers are known to be valid. 
Name: do_misc_encoding; Comment: Do miscellaneous encodings that are not common enough to be driven by flags. 
Name: encode_sizeq; Comment: Encode the 'size' and 'Q' field for e.g. SHADD. 
Name: do_special_encoding; Comment: Opcodes that have fields shared by multiple operands are usually flagged with flags. In this function, we detect such flags and use the information in one of the related operands to do the encoding. The 'one' operand is not any operand but one of the operands that has the enough information for such an encoding. 
Name: aarch64_encode_variant_using_iclass; Comment: Some instructions (including all SVE ones) use the instruction class to describe how a qualifiers_list index is represented in the instruction encoding. If INST is such an instruction, encode the chosen qualifier variant. 
Name: convert_ror_to_extr; Comment: ROR <Wd>, <Ws>, #<shift> is equivalent to: EXTR <Wd>, <Ws>, <Ws>, #<shift>. 
Name: convert_xtl_to_shll; Comment: UXTL<Q> <Vd>.<Ta>, <Vn>.<Tb> is equivalent to: USHLL<Q> <Vd>.<Ta>, <Vn>.<Tb>, #0. 
Name: convert_sr_to_bfm; Comment: Convert LSR <Xd>, <Xn>, #<shift> to UBFM <Xd>, <Xn>, #<shift>, #63. 
Name: convert_mov_to_orr; Comment: Convert MOV to ORR. 
Name: convert_bfx_to_bfm; Comment: When <imms> >= <immr>, the instruction written: SBFX <Xd>, <Xn>, #<lsb>, #<width> is equivalent to: SBFM <Xd>, <Xn>, #<lsb>, #(<lsb>+<width>-1). 
Name: convert_bfi_to_bfm; Comment: When <imms> < <immr>, the instruction written: SBFIZ <Xd>, <Xn>, #<lsb>, #<width> is equivalent to: SBFM <Xd>, <Xn>, #((64-<lsb>)&0x3f), #(<width>-1). 
Name: convert_bfc_to_bfm; Comment: The instruction written: BFC <Xd>, #<lsb>, #<width> is equivalent to: BFM <Xd>, XZR, #((64-<lsb>)&0x3f), #(<width>-1). 
Name: convert_lsl_to_ubfm; Comment: The instruction written: LSL <Xd>, <Xn>, #<shift> is equivalent to: UBFM <Xd>, <Xn>, #((64-<shift>)&0x3f), #(63-<shift>). 
Name: convert_to_csel; Comment: CINC <Wd>, <Wn>, <cond> is equivalent to: CSINC <Wd>, <Wn>, <Wn>, invert(<cond>). 
Name: convert_cset_to_csinc; Comment: CSET <Wd>, <cond> is equivalent to: CSINC <Wd>, WZR, WZR, invert(<cond>). 
Name: convert_mov_to_movewide; Comment: MOV <Wd>, #<imm> is equivalent to: MOVZ <Wd>, #<imm16>, LSL #<shift>. 
Name: convert_mov_to_movebitmask; Comment: MOV <Wd>, #<imm> is equivalent to: ORR <Wd>, WZR, #<imm>. 
Name: convert_to_real; Comment: Some alias opcodes are assembled by being converted to their real-form. 
Name: aarch64_opcode_encode; Comment: Encode *INST_ORI of the opcode code OPCODE. Return the encoded result in *CODE and if QLF_SEQ is not NULL, return the matched operand qualifier sequence in *QLF_SEQ. 
Name: aarch64_opcode_lookup_1; Comment: Called by aarch64_opcode_lookup. 
Name: aarch64_opcode_lookup; Comment: Lookup opcode WORD in the opcode table. N.B. all alias opcodes are ignored here. 
Name: extract_fields; Comment: The unnamed arguments consist of the number of fields and information about these fields where the VALUE will be extracted from CODE and returned. MASK can be zero or the base mask of the opcode. N.B. the fields are required to be in such an order than the most signficant field for VALUE comes the first, e.g. the <index> in SQDMLAL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>] is encoded in H:L:M in some cases, the fields H:L:M should be passed in the order of H, L, M. 
Name: extract_all_fields; Comment: Extract the value of all fields in SELF->fields from instruction CODE. The least significant bit comes from the final field. 
Name: get_expected_qualifier; Comment: Given the instruction in *INST which is probably half way through the decoding and our caller wants to know the expected qualifier for operand I. Return such a qualifier if we can establish it; otherwise return AARCH64_OPND_QLF_NIL. 
Name: aarch64_ext_none; Comment: Operand extractors. 
Name: aarch64_ext_regrt_sysins; Comment: e.g. IC <ic_op>{, <Xt>}. 
Name: aarch64_ext_reglane; Comment: e.g. SQDMLAL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]. 
Name: aarch64_ext_ldst_reglist; Comment: Decode Rt and opcode fields of Vt in AdvSIMD load/store instructions. 
Name: aarch64_ext_ldst_reglist_r; Comment: Decode Rt and S fields of Vt in AdvSIMD load single structure to all lanes instructions. 
Name: aarch64_ext_ldst_elemlist; Comment: Decode Q, opcode<2:1>, S, size and Rt fields of Vt in AdvSIMD load/store single element instructions. 
Name: aarch64_ext_advsimd_imm_shift; Comment: Decode fields immh:immb and/or Q for e.g. SSHR <Vd>.<T>, <Vn>.<T>, #<shift> or SSHR <V><d>, <V><n>, #<shift>. 
Name: aarch64_ext_shll_imm; Comment: Decode shift immediate for e.g. sshr (imm). 
Name: aarch64_ext_imm; Comment: Decode imm for e.g. BFM <Wd>, <Wn>, #<immr>, #<imms>. value in the field(s) will be extracted as unsigned immediate value. 
Name: aarch64_ext_imm_half; Comment: Decode imm and its shifter for e.g. MOVZ <Wd>, #<imm16>{, LSL #<shift>}. 
Name: aarch64_ext_advsimd_imm_modified; Comment: Decode cmode and "a:b:c:d:e:f:g:h" for e.g. MOVI <Vd>.<T>, #<imm8> {, LSL #<amount>}. 
Name: aarch64_ext_fpimm; Comment: Decode an 8-bit floating-point immediate. 
Name: aarch64_ext_imm_rotate1; Comment: Decode a 1-bit rotate immediate (#90 or #270). 
Name: aarch64_ext_imm_rotate2; Comment: Decode a 2-bit rotate immediate (#0, #90, #180 or #270). 
Name: aarch64_ext_fbits; Comment: Decode scale for e.g. SCVTF <Dd>, <Wn>, #<fbits>. 
Name: aarch64_ext_aimm; Comment: Decode arithmetic immediate for e.g. SUBS <Wd>, <Wn|WSP>, #<imm> {, <shift>}. 
Name: decode_limm; Comment: Return true if VALUE is a valid logical immediate encoding, storing the decoded value in *RESULT if so. ESIZE is the number of bytes in the decoded immediate. 
Name: aarch64_ext_limm; Comment: Decode a logical immediate for e.g. ORR <Wd|WSP>, <Wn>, #<imm>. 
Name: aarch64_ext_inv_limm; Comment: Decode a logical immediate for the BIC alias of AND (etc.). 
Name: aarch64_ext_ft; Comment: Decode Ft for e.g. STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}] or LDP <Qt1>, <Qt2>, [<Xn|SP>], #<imm>. 
Name: aarch64_ext_addr_simple; Comment: Decode the address operand for e.g. STXRB <Ws>, <Wt>, [<Xn|SP>{,#0}]. 
Name: aarch64_ext_addr_offset; Comment: Decode the address operand for e.g. stlur <Xt>, [<Xn|SP>{, <amount>}]. 
Name: aarch64_ext_addr_regoff; Comment: Decode the address operand for e.g. STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]. 
Name: aarch64_ext_addr_simm; Comment: Decode the address operand for e.g. LDRSW <Xt>, [<Xn|SP>], #<simm>. 
Name: aarch64_ext_addr_uimm12; Comment: Decode the address operand for e.g. LDRSW <Xt>, [<Xn|SP>{, #<simm>}]. 
Name: aarch64_ext_addr_simm10; Comment: Decode the address operand for e.g. LDRAA <Xt>, [<Xn|SP>{, #<simm>}]. 
Name: aarch64_ext_simd_addr_post; Comment: Decode the address operand for e.g. LD1 {<Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>}, [<Xn|SP>], <Xm|#<amount>>. 
Name: aarch64_ext_cond; Comment: Decode the condition operand for e.g. CSEL <Xd>, <Xn>, <Xm>, <cond>. 
Name: aarch64_ext_sysreg; Comment: Decode the system register operand for e.g. MRS <Xt>, <systemreg>. 
Name: aarch64_ext_pstatefield; Comment: Decode the PSTATE field operand for e.g. MSR <pstatefield>, #<imm>. 
Name: aarch64_ext_sysins_op; Comment: Decode the system instruction op operand for e.g. AT <at_op>, <Xt>. 
Name: aarch64_ext_barrier; Comment: Decode the memory barrier option operand for e.g. DMB <option>|#<imm>. 
Name: aarch64_ext_barrier_dsb_nxs; Comment: Decode the memory barrier option operand for DSB <option>nXS|#<imm>. 
Name: aarch64_ext_prfop; Comment: Decode the prefetch operation option operand for e.g. PRFM <prfop>, [<Xn|SP>{, #<pimm>}]. 
Name: aarch64_ext_hint; Comment: Decode the hint number for an alias taking an operand. Set info->hint_option to the matching name/value pair in aarch64_hint_options. 
Name: aarch64_ext_reg_extended; Comment: Decode the extended register operand for e.g. STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]. 
Name: aarch64_ext_reg_shifted; Comment: Decode the shifted register operand for e.g. SUBS <Xd>, <Xn>, <Xm> {, <shift> #<amount>}. 
Name: aarch64_ext_sve_addr_reg_mul_vl; Comment: Decode an SVE address [<base>, #<offset>*<factor>, MUL VL], where <offset> is given by the OFFSET parameter and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. 
Name: aarch64_ext_sve_addr_ri_s4xvl; Comment: Decode an SVE address [<base>, #<simm4>*<factor>, MUL VL], where <simm4> is a 4-bit signed value and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. <simm4> is encoded in the SVE_imm4 field. 
Name: aarch64_ext_sve_addr_ri_s6xvl; Comment: Decode an SVE address [<base>, #<simm6>*<factor>, MUL VL], where <simm6> is a 6-bit signed value and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. <simm6> is encoded in the SVE_imm6 field. 
Name: aarch64_ext_sve_addr_ri_s9xvl; Comment: Decode an SVE address [<base>, #<simm9>*<factor>, MUL VL], where <simm9> is a 9-bit signed value and where <factor> is 1 plus SELF's operand-dependent value. fields[0] specifies the field that holds <base>. <simm9> is encoded in the concatenation of the SVE_imm6 and imm3 fields, with imm3 being the less-significant part. 
Name: aarch64_ext_sve_addr_reg_imm; Comment: Decode an SVE address [<base>, #<offset> << <shift>], where <offset> is given by the OFFSET parameter and where <shift> is SELF's operand- dependent value. fields[0] specifies the base register field <base>. 
Name: aarch64_ext_sve_addr_ri_s4; Comment: Decode an SVE address [X<n>, #<SVE_imm4> << <shift>], where <SVE_imm4> is a 4-bit signed number and where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field. 
Name: aarch64_ext_sve_addr_ri_u6; Comment: Decode an SVE address [X<n>, #<SVE_imm6> << <shift>], where <SVE_imm6> is a 6-bit unsigned number and where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field. 
Name: aarch64_ext_sve_addr_rr_lsl; Comment: Decode an SVE address [X<n>, X<m>{, LSL #<shift>}], where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ext_sve_addr_rz_xtw; Comment: Decode an SVE address [X<n>, Z<m>.<T>, (S|U)XTW {#<shift>}], where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field, fields[1] specifies the offset register field and fields[2] is a single-bit field that selects SXTW over UXTW. 
Name: aarch64_ext_sve_addr_zi_u5; Comment: Decode an SVE address [Z<n>.<T>, #<imm5> << <shift>], where <imm5> is a 5-bit unsigned number and where <shift> is SELF's operand-dependent value. fields[0] specifies the base register field. 
Name: aarch64_ext_sve_addr_zz; Comment: Decode an SVE address [Z<n>.<T>, Z<m>.<T>{, <modifier> {#<msz>}}], where <modifier> is given by KIND and where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ext_sve_addr_zz_lsl; Comment: Decode an SVE address [Z<n>.<T>, Z<m>.<T>{, LSL #<msz>}], where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ext_sve_addr_zz_sxtw; Comment: Decode an SVE address [Z<n>.<T>, Z<m>.<T>, SXTW {#<msz>}], where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: aarch64_ext_sve_addr_zz_uxtw; Comment: Decode an SVE address [Z<n>.<T>, Z<m>.<T>, UXTW {#<msz>}], where <msz> is a 2-bit unsigned number. fields[0] specifies the base register field and fields[1] specifies the offset register field. 
Name: decode_sve_aimm; Comment: Finish decoding an SVE arithmetic immediate, given that INFO already has the raw field value and that the low 8 bits decode to VALUE. 
Name: aarch64_ext_sve_aimm; Comment: Decode an SVE ADD/SUB immediate. 
Name: aarch64_ext_sve_asimm; Comment: Decode an SVE CPY/DUP immediate. 
Name: aarch64_ext_sve_float_half_one; Comment: Decode a single-bit immediate that selects between #0.5 and #1.0. The fields array specifies which field to use. 
Name: aarch64_ext_sve_float_half_two; Comment: Decode a single-bit immediate that selects between #0.5 and #2.0. The fields array specifies which field to use. 
Name: aarch64_ext_sve_float_zero_one; Comment: Decode a single-bit immediate that selects between #0.0 and #1.0. The fields array specifies which field to use. 
Name: aarch64_ext_sme_za_hv_tiles; Comment: Decode ZA tile vector, vector indicator, vector selector, qualifier and immediate on numerous SME instruction fields such as MOVA. 
Name: aarch64_ext_sme_za_list; Comment: Decode in SME instruction ZERO list of up to eight 64-bit element tile names separated by commas, encoded in the "imm8" field. For programmer convenience an assembler must also accept the names of 32-bit, 16-bit and 8-bit element tiles which are converted into the corresponding set of 64-bit element tiles. 
Name: aarch64_ext_sme_za_array; Comment: Decode ZA array vector select register (Rv field), optional vector and memory offset (imm4 field). 
Name: aarch64_ext_sme_sm_za; Comment: Decode {SM|ZA} filed for SMSTART and SMSTOP instructions. 
Name: aarch64_ext_sve_index; Comment: Decode Zn[MM], where MM has a 7-bit triangular encoding. The fields array specifies which field to use for Zn. MM is encoded in the concatenation of imm5 and SVE_tszh, with imm5 being the less significant part. 
Name: aarch64_ext_sve_limm_mov; Comment: Decode a logical immediate for the MOV alias of SVE DUPM. 
Name: aarch64_ext_sve_quad_index; Comment: Decode Zn[MM], where Zn occupies the least-significant part of the field and where MM occupies the most-significant part. The operand-dependent value specifies the number of bits in Zn. 
Name: aarch64_ext_sve_reglist; Comment: Decode {Zn.<T> - Zm.<T>}. The fields array specifies which field to use for Zn. The opcode-dependent value specifies the number of registers in the list. 
Name: aarch64_ext_sve_scale; Comment: Decode <pattern>{, MUL #<amount>}. The fields array specifies which fields to use for <pattern>. <amount> - 1 is encoded in the SVE_imm4 field. 
Name: get_top_bit; Comment: Return the top set bit in VALUE, which is expected to be relatively small. 
Name: aarch64_ext_sve_shlimm; Comment: Decode an SVE shift-left immediate. 
Name: aarch64_ext_sve_shrimm; Comment: Decode an SVE shift-right immediate. 
Name: aarch64_ext_x0_to_x30; Comment: Decode X0-X30. Register 31 is unallocated. 
Name: get_qualifier_from_partial_encoding; Comment: Bitfields that are commonly used to encode certain operands' information may be partially used as part of the base opcode in some instructions. For example, the bit 1 of the field 'size' in FCVTXN <Vb><d>, <Va><n> is actually part of the base opcode, while only size<0> is available for encoding the register type. Another example is the AdvSIMD instruction ORR (register), in which the field 'size' is also used for the base opcode, leaving only the field 'Q' available to encode the vector register arrangement specifier '8B' or '16B'. This function tries to deduce the qualifier from the value of partially constrained field(s). Given the VALUE of such a field or fields, the qualifiers CANDIDATES and the MASK (indicating which bits are valid for operand encoding), the function returns the matching qualifier or AARCH64_OPND_QLF_NIL if nothing matches. N.B. CANDIDATES is a group of possible qualifiers that are valid for one operand; it has a maximum of AARCH64_MAX_QLF_SEQ_NUM qualifiers and may end with AARCH64_OPND_QLF_NIL. 
Name: get_operand_possible_qualifiers; Comment: Given a list of qualifier sequences, return all possible valid qualifiers for operand IDX in QUALIFIERS. Assume QUALIFIERS is an array whose length is large enough. 
Name: decode_sizeq; Comment: None whether the qualifier is valid for this opcode or not, it is the duty of the semantic checking. 
Name: decode_asimd_fcvt; Comment: Decode size[0]:Q, i.e. bit 22 and bit 30, for e.g. FCVTN<Q> <Vd>.<Tb>, <Vn>.<Ta>. 
Name: decode_asisd_fcvtxn; Comment: Decode size[0], i.e. bit 22, for e.g. FCVTXN <Vb><d>, <Va><n>. 
Name: decode_fcvt; Comment: Decode the 'opc' field for e.g. FCVT <Dd>, <Sn>. 
Name: do_misc_decoding; Comment: Do miscellaneous decodings that are not common enough to be driven by flags. 
Name: do_special_decoding; Comment: Opcodes that have fields shared by multiple operands are usually flagged with flags. In this function, we detect such flags, decode the related field(s) and store the information in one of the related operands. The 'one' operand is not any operand but one of the operands that can accommadate all the information that has been decoded. 
Name: convert_extr_to_ror; Comment: ROR <Wd>, <Ws>, #<shift> is equivalent to: EXTR <Wd>, <Ws>, <Ws>, #<shift>. 
Name: convert_shll_to_xtl; Comment: UXTL<Q> <Vd>.<Ta>, <Vn>.<Tb> is equivalent to: USHLL<Q> <Vd>.<Ta>, <Vn>.<Tb>, #0. 
Name: convert_bfm_to_sr; Comment: Convert UBFM <Xd>, <Xn>, #<shift>, #63. to LSR <Xd>, <Xn>, #<shift>. 
Name: convert_orr_to_mov; Comment: Convert MOV to ORR. 
Name: convert_bfm_to_bfx; Comment: When <imms> >= <immr>, the instruction written: SBFX <Xd>, <Xn>, #<lsb>, #<width> is equivalent to: SBFM <Xd>, <Xn>, #<lsb>, #(<lsb>+<width>-1). 
Name: convert_bfm_to_bfi; Comment: When <imms> < <immr>, the instruction written: SBFIZ <Xd>, <Xn>, #<lsb>, #<width> is equivalent to: SBFM <Xd>, <Xn>, #((64-<lsb>)&0x3f), #(<width>-1). 
Name: convert_bfm_to_bfc; Comment: The instruction written: BFC <Xd>, #<lsb>, #<width> is equivalent to: BFM <Xd>, XZR, #((64-<lsb>)&0x3f), #(<width>-1). 
Name: convert_ubfm_to_lsl; Comment: The instruction written: LSL <Xd>, <Xn>, #<shift> is equivalent to: UBFM <Xd>, <Xn>, #((64-<shift>)&0x3f), #(63-<shift>). 
Name: convert_from_csel; Comment: CINC <Wd>, <Wn>, <cond> is equivalent to: CSINC <Wd>, <Wn>, <Wn>, invert(<cond>) where <cond> is not AL or NV. 
Name: convert_csinc_to_cset; Comment: CSET <Wd>, <cond> is equivalent to: CSINC <Wd>, WZR, WZR, invert(<cond>) where <cond> is not AL or NV. 
Name: convert_movewide_to_mov; Comment: MOV <Wd>, #<imm> is equivalent to: MOVZ <Wd>, #<imm16>, LSL #<shift>. A disassembler may output ORR, MOVZ and MOVN as a MOV mnemonic, except when ORR has an immediate that could be generated by a MOVZ or MOVN instruction, or where a MOVN has an immediate that could be encoded by MOVZ, or where MOVZMOVN #0 have a shift amount other than LSL #0, in which case the machine-instruction mnemonic must be used. 
Name: convert_movebitmask_to_mov; Comment: MOV <Wd>, #<imm> is equivalent to: ORR <Wd>, WZR, #<imm>. A disassembler may output ORR, MOVZ and MOVN as a MOV mnemonic, except when ORR has an immediate that could be generated by a MOVZ or MOVN instruction, or where a MOVN has an immediate that could be encoded by MOVZ, or where MOVZMOVN #0 have a shift amount other than LSL #0, in which case the machine-instruction mnemonic must be used. 
Name: convert_to_alias; Comment: Some alias opcodes are disassembled by being converted from their real-form. N.B. INST->OPCODE is the real opcode rather than the alias. 
Name: determine_disassembling_preference; Comment: None if the decoding of such a machine instruction succeeds (and -Mno-aliases is not specified), the disassembler will check whether there is any alias instruction exists for this real instruction. If there is, the disassembler will try to disassemble the 32-bit binary again using the alias's rule, or try to convert the IR to the form of the alias. In the case of the multiple aliases, the aliases are tried one by one from the highest priority (currently the flag F_P3) to the lowest priority (no priority flag), and the first succeeds first adopted. You may ask why there is a need for the conversion of IR from one form to another in handling certain aliases. This is because on one hand it avoids adding more operand code to handle unusual encodingdecoding; on other hand, during the disassembling, the conversion is an effective approach to check the condition of an alias (as an alias may be adopted only if certain conditions are met). In order to speed up the alias opcode lookup, aarch64-gen has preprocessed aarch64_opcode_table and generated aarch64_find_alias_opcode and aarch64_find_next_alias_opcode (in opcodes/aarch64-dis-2.c) to help. 
Name: aarch64_decode_variant_using_iclass; Comment: Some instructions (including all SVE ones) use the instruction class to describe how a qualifiers_list index is represented in the instruction encoding. If INST is such an instruction, decode the appropriate fields and fill in the operand qualifiers accordingly. Return true if no problems are found. 
Name: aarch64_opcode_decode; Comment: Decode the CODE according to OPCODE; fill INST. Return 0 if the decoding fails, which meanes that CODE is not an instruction of OPCODE; otherwise return 1. If OPCODE has alias(es) and NOALIASES_P is 0, an alias opcode may be determined and used to disassemble CODE; this is done just before the return. 
Name: user_friendly_fixup; Comment: This does some user-friendly fix-up to *INST. It is currently focus on the adjustment of qualifiers to help the printed instruction recognized/understood more easily. 
Name: aarch64_decode_insn; Comment: Decode INSN and fill in *INST the instruction information. An alias opcode may be filled in *INSN if NOALIASES_P is FALSE. Return zero on success. 
Name: get_style_text; Comment: Return a short string to indicate a switch to STYLE. These strings will be embedded into the disassembled operand text (as produced by aarch64_print_operand), and then spotted in the print_operands function so that the disassembler output can be split by style. 
Name: aarch64_apply_style; Comment: Callback used by aarch64_print_operand to apply STYLE to the disassembler output created from FMT and ARGS. The STYLER object holds any required state. Must return a pointer to a string (created from FMT and ARGS) that will continue to be valid until the complete disassembled instruction has been printed. We return a string that includes two embedded style markers, the first, places at the start of the string, indicates a switch to STYLE, and the second, placed at the end of the string, indicates a switch back to the default text style. Later, when we print the operand text we take care to collapse any adjacent style markers, and to ignore any style markers that appear at the very end of a complete operand string. 
Name: print_operands; Comment: Print operands. 
Name: remove_dot_suffix; Comment: Set NAME to a copy of INST's mnemonic with the "." suffix removed. 
Name: print_mnemonic_name; Comment: Print the instruction mnemonic name. 
Name: print_comment; Comment: Decide whether we need to print a comment after the operands of instruction INST. 
Name: print_verifier_notes; Comment: Build notes from verifiers into a string for printing. 
Name: print_aarch64_insn; Comment: Print the instruction according to *INST. 
Name: print_insn_aarch64_word; Comment: Entry-point of the instruction disassembler and printer. 
Name: aarch64_symbol_is_valid; Comment: Disallow mapping symbols ($x, $d etc) from being displayed in symbol relative addresses. 
Name: print_insn_data; Comment: Print data bytes on INFO->STREAM. 
Name: get_sym_code_type; Comment: Try to infer the code or data type from a symbol. Returns nonzero if *MAP_TYPE was set. 
Name: select_aarch64_variant; Comment: Set the feature bits in arch_variant in order to get the correct disassembly for the chosen architecture variant. Currently we only restrict disassembly for Armv8-R and otherwise enable all non-R-profile features. 
Name: print_insn_aarch64; Comment: Entry-point of the AArch64 disassembler. 
Name: new_opcode_node; Comment: Allocate and initialize an opcode_node. 
Name: initialize_index; Comment: Use top 2 bits to indiate which table. 
Name: get_aarch64_opcode; Comment: Given OPCODE_NODE, return the corresponding aarch64_opcode*. 
Name: print_opcode_nodes; Comment: As an internal debugging utility, print out the list of nodes pointed by opcode_nodes_head. 
Name: divide_table_1; Comment: Given a list of opcodes headed by *OPCODE, try to establish one bit that is shared by all the opcodes in the list as one of base opcode bits. If such a bit is found, divide the list of the opcodes into two based on the value of the bit. Store the bit number in BITTREE->BITNO if the division succeeds. If unable to determine such a bit or there is only one opcode in the list, the list is decided to be undividable and OPCODE will be assigned to BITTREE->LIST. The function recursively call itself until OPCODE is undividable. N.B. the nature of this algrithm determines that given any value in the 32-bit space, the computed decision tree will always be able to find one or more opcodes entries for it, regardless whether there is a valid instruction defined for this value or not. In order to detect the undefined values, when the caller obtains the opcode entryentries, it should at least compare the bit-wise AND result of the value and the mask with the base opcode value; if the two are different, it means that the value is undefined (although the value may be still undefined when the comparison is the same, in which case call aarch64_opcode_decode to carry out further checks). 
Name: divide_table; Comment: Call divide_table_1 to divide the all the opcodes and thus create the decoding decision tree. 
Name: initialize_decoder_tree; Comment: Read in all of the tables, create the decoding decision tree and return the tree root. 
Name: print_decision_tree_1; Comment: N.B. read the comment above divide_table_1 for the reason why the generated decision tree function never returns NULL. 
Name: print_decision_tree; Comment: Generate aarch64_opcode_lookup in C code to the standard output. 
Name: print_find_next_opcode; Comment: Generate aarch64_find_next_opcode in C code to the standard output. 
Name: release_resource_decoder_tree; Comment: Release the dynamic memory resource allocated for the generation of the decoder tree. 
Name: print_find_real_opcode; Comment: Generate aarch64_find_real_opcode in C code to the standard output. TABLE points to the alias info table, while NUM indicates the number of entries in the table. 
Name: print_find_alias_opcode; Comment: Generate aarch64_find_alias_opcode in C code to the standard output. TABLE points to the alias info table, while NUM indicates the number of entries in the table. 
Name: print_find_next_alias_opcode; Comment: Generate aarch64_find_next_alias_opcode in C code to the standard output. TABLE points to the alias info table, while NUM indicates the number of entries in the table. 
Name: find_alias_opcode; Comment: Given OPCODE, establish and return a link list of alias nodes in the preferred order. 
Name: create_alias_info; Comment: Create and return alias information. Return the address of the created alias info table; return the number of table entries in *NUM_PTR. 
Name: release_resource_alias_info; Comment: Release the dynamic memory resource allocated for the generation of the alias information. 
Name: print_divide_result; Comment: As a debugging utility, print out the result of the table division, although it is not doing much this moment. 
Name: print_operand_table; Comment: Generate aarch64_operands in C to the standard output. 
Name: print_operand_inserter; Comment: Generate aarch64_insert_operand in C to the standard output. 
Name: print_operand_extractor; Comment: Generate aarch64_extract_operand in C to the standard output. 
Name: print_get_opcode; Comment: Print out the routine which, given the opcode enumerator, returns the corresponding opcode entry pointer. 
Name: print_table; Comment: Print out the content of an opcode table (not in use). 
Name: aarch64_get_opcode; Comment: Given the opcode enumerator OP, return the pointer to the corresponding opcode entry. 
Name: get_data_pattern; Comment: Given a sequence of qualifiers in QUALIFIERS, determine and return the data pattern. N.B. QUALIFIERS is a possible sequence of qualifiers each of which corresponds to one of a sequence of operands. 
Name: aarch64_select_operand_for_sizeq_field_coding; Comment: N.B. it is possible to do some optimization that doesn't call get_data_pattern each time when we need to select an operand. We can either buffer the caculated the result or statically generate the data, however, it is not obvious that the optimization will bring significant benefit. 
Name: aarch64_get_operand_desc; Comment: Get operand description string. This is usually for the diagnosis purpose. 
Name: aarch64_stack_pointer_p; Comment: Return 1 if OPERAND is SP or WSP. 
Name: aarch64_zero_register_p; Comment: Return 1 if OPERAND is XZR or WZP. 
Name: aarch64_get_expected_qualifier; Comment: Given qualifier sequence list QSEQ_LIST and the known qualifier KNOWN_QLF for operand KNOWN_IDX, return the expected qualifier for operand IDX. Return NIL if more than one expected qualifiers are found. 
Name: aarch64_get_qualifier_esize; Comment: Given an operand qualifier, return the expected data element size of a qualified operand. 
Name: aarch64_is_destructive_by_operands; Comment: This function checks if the given instruction INSN is a destructive instruction based on the usage of the registers. It does not recognize unary destructive instructions. 
Name: aarch64_num_of_operands; Comment: TODO improve this, we can have an extra field at the runtime to store the number of operands rather than calculating it every time. 
Name: aarch64_find_best_match; Comment: Find the best matched qualifier sequence in *QUALIFIERS_LIST for INST. If succeeds, fill the found sequence in RET, return 1; otherwise return 0. N.B. on the entry, it is very likely that only some operands in INST have had their qualifiers been established. If STOP_AT is not -1, the function will only try to match the qualifier sequence for operands before and including the operand of index STOP_AT; and on success RET will only be filled with the first (STOP_AT+1) qualifiers. A couple examples of the matching algorithm: X,W,NIL should match X,W,NIL NIL,NIL should match X ,NIL Apart from serving the main encoding routine, this can also be called during or after the operand decoding. 
Name: match_operands_qualifier; Comment: Operand qualifier matching and resolving. Return 1 if the operand qualifier(s) in INST match one of the qualifier sequences in INST->OPCODE->qualifiers_list; otherwise return 0. if UPDATE_P, update the qualifier(s) in *INST after the matching succeeds. 
Name: aarch64_wide_constant_p; Comment: Return TRUE if VALUE is a wide constant that can be moved into a general register by MOVZ. IS32 indicates whether value is a 32-bit immediate or not. If SHIFT_AMOUNT is not NULL, on the return of TRUE, the logical left shift amount will be returned in *SHIFT_AMOUNT. 
Name: aarch64_logical_immediate_p; Comment: Return TRUE if VALUE is a valid logical immediate, i.e. bitmask, that can be accepted by logical (immediate) instructions e.g. ORR <Xd|SP>, <Xn>, #<imm>. ESIZE is the number of bytes in the decoded immediate value. If ENCODING is not NULL, on the return of TRUE, the standard encoding for VALUE will be returned in *ENCODING. 
Name: aarch64_shrink_expanded_imm8; Comment: If 64-bit immediate IMM is in the format of "aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhh", where a, b, c, d, e, f, g and h are independently 0 or 1, return an integer of value "abcdefgh". Otherwise return -1. 
Name: operand_general_constraint_met_p; Comment: General constraint checking based on operand code. Return 1 if OPNDS[IDX] meets the general constraint of operand code TYPE as the IDXth operand of opcode OPCODE. Otherwise return 0. This function has to be called after the qualifiers for all operands have been resolved. Mismatching error message is returned in MISMATCH_DETAIL upon request, i.e. when MISMATCH_DETAIL is non-NULL. This avoids the generation of error message during the disassembling where error message is not wanted. We avoid the dynamic construction of strings of error messages here (i.e. in libopcodes), as it is costly and complicated; instead, we use a combination of error code, static string and some integer data to represent an error. 
Name: aarch64_match_operands_constraint; Comment: Main entrypoint for the operand constraint checking. Return 1 if operands of INST meet the constraint applied by the operand codes and operand qualifiers; otherwise return 0 and if MISMATCH_DETAIL is not NULL, return the detail of the error in *MISMATCH_DETAIL. N.B. when adding more constraint checking, make sure MISMATCH_DETAIL->KIND is set with a proper error kind rather than AARCH64_OPDE_NIL (GAS asserts non-NIL error kind when it is notified that an instruction does not pass the check). Un-determined operand qualifiers may get established during the process. 
Name: aarch64_replace_opcode; Comment: Replace INST->OPCODE with OPCODE and return the replaced OPCODE. Also updates the TYPE of each INST->OPERANDS with the corresponding value of OPCODE->OPERANDS. Note that some operand qualifiers may need to be manually cleared by the caller before it further calls the aarch64_opcode_encode; by doing this, it helps the qualifier matching facilities work properly. 
Name: expand_fp_imm; Comment: IMM8 is an 8-bit floating-point constant with sign, 3-bit exponent and normalized 4 bits of precision, encoded in "a:b:c:d:e:f:g:h" or FLD_imm8 (depending on the type of the instruction). IMM8 will be expanded to a single-precision floating-point value (SIZE == 4) or a double-precision floating-point value (SIZE == 8). A half-precision floating-point value (SIZE == 2) is expanded to a single-precision floating-point value. The expanded value is returned. 
Name: style_reg; Comment: Return a string based on FMT with the register style applied. 
Name: style_imm; Comment: Return a string based on FMT with the immediate style applied. 
Name: style_sub_mnem; Comment: Return a string based on FMT with the sub-mnemonic style applied. 
Name: style_addr; Comment: Return a string based on FMT with the address style applied. 
Name: print_register_list; Comment: Produce the string representation of the register list operand *OPND in the buffer pointed by BUF of size SIZE. PREFIX is the part of the register name that comes before the register number, such as "v". 
Name: print_immediate_offset_address; Comment: Print the register+immediate address in OPND to BUF, which has SIZE characters. BASE is the name of the base register. 
Name: print_register_offset_address; Comment: Produce the string representation of the register offset address operand *OPND in the buffer pointed by BUF of size SIZE. BASE and OFFSET are the names of the base and offset registers. 
Name: print_sme_za_list; Comment: Print ZA tiles from imm8 in ZERO instruction. The preferred disassembly of this instruction uses the shortest list of tile names that represent the encoded immediate mask. For example: An all-ones immediate is disassembled as {ZA}. An all-zeros immediate is disassembled as an empty list { }.
Name: aarch64_print_operand; Comment: Generate the string representation of the operand OPNDS[IDX] for OPCODE in BUF. The caller should pass in the maximum size of BUF in SIZE. PC, PCREL_P and ADDRESS are used to pass in and return information about the PC-relative address calculation, where the PC value is passed in PC. If the operand is pc-relative related, PCREL_P (if PCREL_P non-NULL) will return 1 and ADDRESS (if ADDRESS non-NULL) will return the calculated address; otherwise, PCREL_P (if PCREL_P non-NULL) returns 0. The function serves both the disassembler and the assembler diagnostics issuer, which is the reason why it lives in this file. 
Name: verify_elem_sd; Comment: Verifier for vector by element 3 operands functions where the conditions `if sz:L == 11 then UNDEFINED` holds. 
Name: verify_three_different_regs; Comment: Check an instruction that takes three register operands and that requires the register numbers to be distinct from one another. 
Name: add_insn_to_sequence; Comment: Add INST to the end of INSN_SEQUENCE. 
Name: init_insn_sequence; Comment: Initialize an instruction sequence insn_sequence with the instruction INST. If INST is NULL the given insn_sequence is cleared and the sequence is left uninitialized. 
Name: verify_mops_pme_sequence; Comment: Subroutine of verify_constraints. Check whether the instruction is part of a MOPS P/M/E sequence and, if so, whether sequencing expectations are met. Return true if the check passes, otherwise describe the problem in MISMATCH_DETAIL. IS_NEW_SECTION is true if INST is assumed to start a new section. The other arguments are as for verify_constraints. 
Name: verify_constraints; Comment: This function verifies that the instruction INST adheres to its specified constraints. If it does then ERR_OK is returned, if not then ERR_VFI is returned and MISMATCH_DETAIL contains the reason why verification failed. The function is called both during assembly and disassembly. If assembling then ENCODING will be TRUE, else FALSE. If dissassembling PC will be set and will contain the PC of the current instruction w.r.t to the section. If ENCODING and PC=0 then you are at a start of a section. The constraints are verified against the given state insn_sequence which is updated as it transitions through the verification. 
Name: aarch64_sve_dupm_mov_immediate_p; Comment: Return true if VALUE cannot be moved into an SVE register using DUP (with any element size, not just ESIZE) and if using DUPM would therefore be OK. ESIZE is the number of bytes in the immediate. 
Name: print_insn_alpha; Comment: Disassemble Alpha instructions. 
Name: insert_rba; Comment: The RB field when it is the same as the RA field in the same insn. This operand is marked fake. The insertion function just copies the RA field into the RB field, and the extraction function just checks that the fields are the same. 
Name: insert_rca; Comment: The same for the RC field. 
Name: insert_za; Comment: Fake arguments in which the registers must be set to ZERO. 
Name: insert_bdisp; Comment: The displacement field of a Branch format insn. 
Name: insert_jhint; Comment: The hint field of a JMP/JSR insn. 
Name: insert_ev6hwjhint; Comment: The hint field of an EV6 HW_JMP/JSR insn. 
Name: init_arc_disasm_info; Comment: Initialize private data. 
Name: add_to_decodelist; Comment: Add a new element to the decode list. 
Name: skip_this_opcode; Comment: Return TRUE if we need to skip the opcode from being disassembled. 
Name: find_format_from_table; Comment: Find opcode from ARC_TABLE given the instruction described by INSN and INSNLEN. The ISA_MASK restricts the possible matches in ARC_TABLE. 
Name: find_format; Comment: Find opcode for INSN, trying various different sources. The instruction length in INSN_LEN will be updated if the instruction requires a LIMM extension. A pointer to the opcode is placed into OPCODE_RESULT, and ITER is initialised, ready to iterate over the operands of the found opcode. If the found opcode requires a LIMM then the LIMM value will be loaded into a field of ITER. This function returns TRUE in almost all cases, FALSE is reserved to indicate an error (failing to find an opcode is not an error) a returned result of FALSE would indicate that the disassembler can't continue. If no matching opcode is found then the returned result will be TRUE, the value placed into OPCODE_RESULT will be NULL, ITER will be undefined, and INSN_LEN will be unchanged. If a matching opcode is found, then the returned result will be TRUE, the opcode pointer is placed into OPCODE_RESULT, INSN_LEN will be increased by 4 if the instruction requires a LIMM, and the LIMM value will have been loaded into a field of ITER. Finally, ITER will have been initialised so that calls to OPERAND_ITERATOR_NEXT will iterate over the opcode's operands. 
Name: get_addrtype; Comment: Convert a value representing an address type to a string used to refer to the address type in assembly code. 
Name: arc_insn_length; Comment: Calculate the instruction length for an instruction starting with MSB and LSB, the most and least significant byte. The ISA_MASK is used to filter the instructions considered to only those that are part of the current architecture. The instruction lengths are calculated from the ARC_OPCODE table, and cached for later use. 
Name: extract_operand_value; Comment: Extract and return the value of OPERAND from the instruction whose value is held in the array INSN. 
Name: operand_iterator_next; Comment: Find the next operand, and the operands value from ITER. Return TRUE if there is another operand, otherwise return FALSE. If there is an operand returned then the operand is placed into OPERAND, and the value into VALUE. If there is no operand returned then OPERAND and VALUE are unchanged. 
Name: parse_option; Comment: Helper for parsing the options. 
Name: parse_cpu_option; Comment: Helper for parsing the CPU options. Accept any of the ARC architectures values. OPTION should be a value passed to cpu=. 
Name: parse_disassembler_options; Comment: Go over the options list and parse it. 
Name: arc_opcode_to_insn_type; Comment: Return the instruction type for an instruction described by OPCODE. 
Name: print_insn_arc; Comment: Disassemble ARC instructions. 
Name: disassembler_options_arc; Comment: Populate the structure for representing ARC's disassembly options. Such a dynamic initialization is desired, because it makes the maintenance easier and also gdb uses this to enable the "disassembler-option". 
Name: create_map; Comment: Local functions. 
Name: destroy_map; Comment: Free memory that has been allocated for the extensions. 
Name: arcExtMap_insn; Comment: Get the name of an extension instruction. 
Name: arcExtMap_coreRegName; Comment: Get the name of an extension core register. 
Name: arcExtMap_coreReadWrite; Comment: Get the access mode of an extension core register. 
Name: arcExtMap_condCodeName; Comment: Get the name of an extension condition code. 
Name: arcExtMap_auxRegName; Comment: Get the name of an extension auxiliary register. 
Name: build_ARC_extmap; Comment: Load extensions described in .arcextmap and .gnu.linkonce.arcextmap.* ELF section. 
Name: dump_ARC_extmap; Comment: Debug function used to dump the ARC information fount in arcextmap sections. 
Name: arcExtMap_genOpcode; Comment: For a given extension instruction generate the equivalent arc opcode structure. 
Name: insert_ra_chk; Comment: Insert RA register into a 32-bit opcode, with checks. 
Name: insert_rb; Comment: Insert RB register into a 32-bit opcode. 
Name: insert_rb_chk; Comment: Insert RB register with checks. 
Name: insert_za; Comment: Dummy insert ZERO operand function. 
Name: insert_Ybit; Comment: Insert Y-bit in bbit/br instructions. This function is called only when solving fixups. 
Name: insert_NYbit; Comment: Insert Y-bit in bbit/br instructions. This function is called only when solving fixups. 
Name: insert_rhv1; Comment: Insert H register into a 16-bit opcode. 
Name: insert_rhv2; Comment: Insert H register into a 16-bit opcode. 
Name: insert_w6; Comment: mask = 00000000000000000000111111000000 insn = 00011bbb000000000BBBwwwwwwDaaZZ1. 
Name: extract_w6; Comment: mask = 00000000000000000000111111000000. 
Name: insert_g_s; Comment: mask = 0000011100022000 insn = 01000ggghhhGG0HH. 
Name: extract_g_s; Comment: mask = 0000011100022000. 
Name: arc_opcode_len; Comment: Return length of an opcode in bytes. 
Name: mve_extract_pred_mask; Comment: Extract the predicate mask for a VPT or VPST instruction. The mask is composed of bits 13-15 (Mkl) and bit 22 (Mkh). 
Name: num_instructions_vpt_block; Comment: Return the number of instructions in a MVE predicate block. 
Name: arm_decode_bitfield; Comment: Decode a bitfield of the form matching regexp (N(-N)?,)*N(-N)?. Returns pointer to following character of the format string and fills in *VALUEP and *WIDTHP with the extracted value and number of bits extracted. WIDTHP can be NULL. 
Name: is_mve_okay_in_it; Comment: Return TRUE if the MATCHED_INSN can be inside an IT block. 
Name: arm_decode_field; Comment: Decode a bitfield from opcode GIVEN, with starting bitfield = START and ending bitfield = END. END must be greater than START. 
Name: arm_decode_field_multiple; Comment: Decode a bitfield from opcode GIVEN, with multiple bitfields: START:END and START2:END2. END/END2 must be greater than START/START2. 
Name: is_mve_encoding_conflict; Comment: Return TRUE if the GIVEN encoding should not be decoded as MATCHED_INSN. This helps us decode instructions that change mnemonic depending on specific operand values/encodings. 
Name: is_mve_undefined; Comment: Return FALSE if GIVEN is not an undefined encoding for MATCHED_INSN. Otherwise, return TRUE and set UNDEFINED_CODE to give a reason as to why this encoding is undefined. 
Name: is_mve_unpredictable; Comment: Return FALSE if GIVEN is not an unpredictable encoding for MATCHED_INSN. Otherwise, return TRUE and set UNPREDICTABLE_CODE to give a reason as to why this encoding is unpredictable. 
Name: print_simd_imm8; Comment: Print neon and mve 8-bit immediate that can be a 8, 16, 32, or 64-bits in length and integer of floating-point type. 
Name: print_mve_register_blocks; Comment: Print register block operand for mve vld2/vld4/vst2/vld4. 
Name: decode_base_style; Comment: The assembler string for an instruction can include %{X:...%} patterns, where the 'X' is one of the characters understood by this function. This function takes the X character, and returns a new style. This new style will be used by the caller to temporarily change the current base style. 
Name: print_insn_coprocessor_1; Comment: Print one coprocessor instruction on INFO->STREAM. Return TRUE if the instuction matched, FALSE if this is not a recognised coprocessor instruction. 
Name: print_arm_address; Comment: Decodes and prints ARM addressing modes. Returns the offset used in the address, if any, if it is worthwhile printing the offset as a hexadecimal value in a comment at the end of the line of disassembly. 
Name: print_insn_cde; Comment: Print one cde instruction on INFO->STREAM. Return TRUE if the instuction matched, FALSE if this is not a recognised cde instruction. 
Name: print_insn_neon; Comment: Print one neon instruction on INFO->STREAM. Return TRUE if the instuction matched, FALSE if this is not a recognised neon instruction. 
Name: print_insn_mve; Comment: Print one mve instruction on INFO->STREAM. Return TRUE if the instuction matched, FALSE if this is not a recognised mve instruction. 
Name: banked_regname; Comment: Return the name of a v7A special register. 
Name: data_barrier_option; Comment: Return the name of the DMB/DSB option. 
Name: print_insn_arm; Comment: Print one ARM instruction from PC on INFO->STREAM. 
Name: print_insn_thumb16; Comment: Print one 16-bit Thumb instruction from PC on INFO->STREAM. 
Name: psr_name; Comment: Return the name of an V7M special register. 
Name: print_insn_thumb32; Comment: Print one 32-bit Thumb instruction from PC on INFO->STREAM. 
Name: arm_symbol_is_valid; Comment: Disallow mapping symbols ($a, $b, $d, $t etc) from being displayed in symbol relative addresses. Also disallow private symbol, with __tagsym$$ prefix, from ARM RVCT toolchain being displayed. 
Name: parse_arm_disassembler_options; Comment: Parse the string of disassembler options. 
Name: find_ifthen_state; Comment: Search back through the insn stream to determine if this instruction is conditionally executed. 
Name: is_mapping_symbol; Comment: Returns nonzero and sets *MAP_TYPE if the N'th symbol is a mapping symbol. 
Name: get_map_sym_type; Comment: Try to infer the code type (ARM or Thumb) from a mapping symbol. Returns nonzero if *MAP_TYPE was set. 
Name: get_sym_code_type; Comment: Try to infer the code type (ARM or Thumb) from a non-mapping symbol. Returns nonzero if *MAP_TYPE was set. 
Name: mapping_symbol_for_insn; Comment: Search the mapping symbol state for instruction at pc. This is only applicable for elf target. There is an assumption Here, info->private_data contains the correct AND up-to-date information about current scan process. The information will be used to speed this search process. Return TRUE if the mapping state can be determined, and map_symbol will be updated accordingly. Otherwise, return FALSE. 
Name: select_arm_features; Comment: Given a bfd_mach_arm_XXX value, this function fills in the fields of the supplied arm_feature_set structure with bitmasks indicating the supported base architectures and coprocessor extensions. FIXME: This could more efficiently implemented as a constant array, although it would also be less robust. 
Name: print_insn; Comment: NOTE: There are no checks in these routines that the relevant number of data bytes exist. 
Name: avrdis_opcode; Comment: Read the opcode from ADDR. Return 0 in success and save opcode in *INSN, otherwise, return -1. 
Name: parse_imm64; Comment: Parse a signed 64-bit immediate. 
Name: parse_endsize; Comment: Endianness size operands are integer immediates whose values can be 16, 32 or 64. 
Name: bpf_cgen_insn_supported; Comment: Special check to ensure that the right instruction variant is used for the given endianness induced by the ISA selected in the CPU. See bpf.cpu for a discussion on how eBPF is really two instruction sets. 
Name: bpf_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: bpf_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by bpf_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: parse_insn_normal; Comment: Default insn parser. The syntax string is scanned and operands are parsed and stored in FIELDS. Relocs are queued as we go via other callbacks. ??? Note that this is currently an all-or-nothing parser. If we fail to parse the instruction, we return 0 and the caller will start over from the beginning. Backtracking will be necessary in parsing subexpressions, but that can be handled there. Not handling backtracking here may get expensive in the case of the m68k. Deal with later. Returns NULL for success, an error message for failure. 
Name: bpf_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: init_tables; Comment: Initialize anything needed to be done once, before any cpu_open call. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of bpf_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of bpf_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of bpf_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of bpf_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of bpf_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: bpf_cgen_rebuild_tables; Comment: Subroutine of bpf_cgen_cpu_open to rebuild the tables. 
Name: bpf_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: bpf_cgen_cpu_open_1; Comment: Cover fn to bpf_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: bpf_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: bpf_print_insn; Comment: We need to customize the disassembler a bit: - Use 8 bytes per line by default. 
Name: print_immediate; Comment: Signed immediates should be printed in hexadecimal. 
Name: print_endsize; Comment: Endianness bit sizes should be printed in decimal. 
Name: bpf_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: print_normal; Comment: Default print handler. 
Name: print_address; Comment: Default address handler. 
Name: print_keyword; Comment: Keyword print handler. 
Name: print_insn_normal; Comment: Default insn printer. DIS_INFO is defined as `void *' so the disassembler needn't know anything about disassemble_info. 
Name: read_insn; Comment: Subroutine of print_insn. Reads an insn into the given buffers and updates the extract info. Returns 0 if all is well, non-zero otherwise. 
Name: print_insn; Comment: Utility to print an insn. BUF is the base part of the insn, target byte order, BUFLEN bytes long. The result is the size of the insn in bytes or zero for an unknown insn or -1 if an error occurs fetching data (memory_error_func will have been called). 
Name: insert_1; Comment: Subroutine of insert_normal. 
Name: insert_normal; Comment: ??? This doesn't handle bfd_vma's. Create another function when necessary. 
Name: insert_insn_normal; Comment: Default insn builder (insert handler). The instruction is recorded in CGEN_INT_INSN_P byte order (meaning that if CGEN_INSN_BYTES_PTR is an intand thus, the value is recorded in host byte order, otherwise BUFFER is an array of bytes and the value is recorded in target byte order). The result is an error message or NULL if success. 
Name: put_insn_int_value; Comment: Cover function to store an insn value into an integral insn. Must go here because it needs <prefix>-desc.h for CGEN_INT_INSN_P. 
Name: fill_cache; Comment: Subroutine of extract_normal. Ensure sufficient bytes are cached in EX_INFO. OFFSET is the offset in bytes from the start of the insn of the value. BYTES is the length of the needed value. Returns 1 for success, 0 for failure. 
Name: extract_1; Comment: Subroutine of extract_normal. 
Name: extract_insn_normal; Comment: Default insn extractor. INSN_VALUE is the first base_insn_bitsize bits, translated to host order. The extracted fields are stored in FIELDS. EX_INFO is used to handle reading variable length insns. Return the length of the insn in bits, or 0 if no match, or -1 if an error occurs fetching data (memory_error_func will have been called). 
Name: bpf_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: bpf_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: bpf_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: bpf_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: bpf_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: asm_hash_insn_p; Comment: Return non-zero if INSN is to be added to the hash table. Targets are free to override CGEN_{ASM,DIS}_HASH_P in the .opc file. 
Name: asm_hash_insn; Comment: The result is the hash value of the insn. Targets are free to override CGEN_{ASM,DIS}_HASH in the .opc file. 
Name: dis_hash_insn; Comment: BUF is a pointer to the bytes of the insn, target order. VALUE is the first base_insn_bitsize bits as an int in host order. 
Name: set_fields_bitsize; Comment: Set the recorded length of the insn in the CGEN_FIELDS struct. 
Name: bpf_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: cgen_set_parse_operand_fn; Comment: Set the cgen_parse_operand_fn callback. 
Name: cgen_init_parse_operand; Comment: Called whenever starting to parse an insn. 
Name: hash_insn_array; Comment: Subroutine of build_asm_hash_table to add INSNS to the hash table. COUNT is the number of elements in INSNS. ENTSIZE is sizeof (CGEN_IBASE) for the target. ??? No longer used but leave in for now. HTABLE points to the hash table. HENTBUF is a pointer to sufficiently large buffer of hash entries. The result is a pointer to the next entry to use. The table is scanned backwards as additions are made to the front of the list and we want earlier ones to be preferred. 
Name: hash_insn_list; Comment: Subroutine of build_asm_hash_table to add INSNS to the hash table. This function is identical to hash_insn_array except the insns are in a list. 
Name: build_asm_hash_table; Comment: Build the assembler instruction hash table. 
Name: cgen_asm_lookup_insn; Comment: Return the first entry in the hash list for INSN. 
Name: cgen_parse_keyword; Comment: Keyword parser. The result is NULL upon success or an error message. If successful, *STRP is updated to point passed the keyword. ??? At present we have a static notion of how to pick out a keyword. Later we can allow a target to customize this if necessary [say by recording something in the keyword table]. 
Name: cgen_parse_signed_integer; Comment: Parse a small signed integer parser. ??? VALUEP is not a bfd_vmaon purpose, though this is confusing. Note that if the caller expects a bfd_vma result, it should call cgen_parse_address. 
Name: cgen_parse_unsigned_integer; Comment: Parse a small unsigned integer parser. ??? VALUEP is not a bfd_vmaon purpose, though this is confusing. Note that if the caller expects a bfd_vma result, it should call cgen_parse_address. 
Name: cgen_parse_address; Comment: Address parser. 
Name: cgen_validate_signed_integer; Comment: Signed integer validation routine. 
Name: cgen_validate_unsigned_integer; Comment: Unsigned integer validation routine. Supplying `min' here may seem unnecessary, but we also want to handle cases where min != 0 (and max > LONG_MAX). 
Name: cgen_bitset_create; Comment: Create a bit mask. 
Name: cgen_bitset_init; Comment: Initialize an existing bit mask. 
Name: cgen_bitset_clear; Comment: Clear the bits of a bit mask. 
Name: cgen_bitset_add; Comment: Add a bit to a bit mask. 
Name: cgen_bitset_set; Comment: Set a bit mask. 
Name: cgen_bitset_contains; Comment: Test for a bit in a bit mask. Returns 1 if the bit is found 
Name: cgen_bitset_compare; Comment: Compare two bit masks for equality. Returns 0 if they are equal. 
Name: cgen_bitset_intersect_p; Comment: Test two bit masks for common bits. Returns 1 if a common bit is found. 
Name: cgen_bitset_copy; Comment: Make a copy of a bit mask. 
Name: cgen_bitset_union; Comment: Combine two bit masks. 
Name: count_decodable_bits; Comment: Return the number of decodable bits in this insn. 
Name: add_insn_to_hash_chain; Comment: Add an instruction to the hash chain. 
Name: hash_insn_array; Comment: Subroutine of build_dis_hash_table to add INSNS to the hash table. COUNT is the number of elements in INSNS. ENTSIZE is sizeof (CGEN_IBASE) for the target. ??? No longer used but leave in for now. HTABLE points to the hash table. HENTBUF is a pointer to sufficiently large buffer of hash entries. The result is a pointer to the next entry to use. The table is scanned backwards as additions are made to the front of the list and we want earlier ones to be preferred. 
Name: hash_insn_list; Comment: Subroutine of build_dis_hash_table to add INSNS to the hash table. This function is identical to hash_insn_array except the insns are in a list. 
Name: build_dis_hash_table; Comment: Build the disassembler instruction hash table. 
Name: cgen_dis_lookup_insn; Comment: Return the first entry in the hash list for INSN. 
Name: cgen_keyword_lookup_name; Comment: Look up *NAMEP in the keyword table KT. The result is the keyword entry or NULL if not found. 
Name: cgen_keyword_lookup_value; Comment: Look up VALUE in the keyword table KT. The result is the keyword entry or NULL if not found. 
Name: cgen_keyword_add; Comment: Add an entry to a keyword table. 
Name: cgen_keyword_search_init; Comment: Initialize a keyword table search. SPEC is a specification of what to search for. A value of NULL means to find every keyword. Currently NULL is the only acceptable value [further specification deferred]. The result is an opaque data item used to record the search status. It is passed to each call to cgen_keyword_search_next. 
Name: cgen_keyword_search_next; Comment: Return the next keyword specified by SEARCH. The result is the next entry or NULL if there are no more. 
Name: hash_keyword_name; Comment: Return first entry in hash chain for NAME. If CASE_SENSITIVE_P is non-zero, return a case sensitive hash. 
Name: hash_keyword_value; Comment: Return first entry in hash chain for VALUE. 
Name: build_keyword_hash_tables; Comment: Build a keyword table's hash tables. We probably needn't build the value hash table for the assembler when we're using the disassembler, but we keep things simple. 
Name: cgen_hw_lookup_by_name; Comment: Lookup a hardware element by its name. Returns NULL if NAME is not supported by the currently selected mach/isa. 
Name: cgen_hw_lookup_by_num; Comment: Lookup a hardware element by its number. Hardware elements are enumerated, however it may be possible to add some at runtime, thus HWNUM is not an enum type but rather an int. Returns NULL if HWNUM is not supported by the currently selected mach. 
Name: cgen_operand_lookup_by_name; Comment: Lookup an operand by its name. Returns NULL if NAME is not supported by the currently selected mach/isa. 
Name: cgen_operand_lookup_by_num; Comment: Lookup an operand by its number. Operands are enumerated, however it may be possible to add some at runtime, thus OPNUM is not an enum type but rather an int. Returns NULL if OPNUM is not supported by the currently selected mach/isa. 
Name: cgen_insn_count; Comment: Return number of instructions. This includes any added at runtime. 
Name: cgen_macro_insn_count; Comment: Return number of macro-instructions. This includes any added at runtime. 
Name: cgen_get_insn_value; Comment: Cover function to read and properly byteswap an insn value. 
Name: cgen_put_insn_value; Comment: Cover function to store an insn value properly byteswapped. 
Name: cgen_get_insn_operands; Comment: Fill in the operand instances used by INSN whose operands are FIELDS. INDICES is a pointer to a buffer of MAX_OPERAND_INSTANCES ints to be filled in. 
Name: cgen_set_signed_overflow_ok; Comment: Allow signed overflow of instruction fields. 
Name: cgen_clear_signed_overflow_ok; Comment: Generate an error message if a signed field in an instruction overflows. 
Name: cgen_signed_overflow_ok_p; Comment: Will an error message be generated if a signed field in an instruction overflows ? 
Name: print_exp_len; Comment: Print the constant expression length. 
Name: getbits; Comment: Return the bit size for a given operand. 
Name: getargtype; Comment: Return the argument type of a given operand. 
Name: getccstring; Comment: Given a 'CC' instruction constant operand, return its corresponding string. This routine is used when disassembling the 'CC' instruction. 
Name: getcinvstring; Comment: Given a 'cinv' instruction constant operand, return its corresponding string. This routine is used when disassembling the 'cinv' instruction. 
Name: gettrapstring; Comment: Given the trap index in dispatch table, return its name. This routine is used when disassembling the 'excp' instruction. 
Name: getregname; Comment: Given a register enum value, retrieve its name. 
Name: getregpname; Comment: Given a register pair enum value, retrieve its name. 
Name: getidxregpname; Comment: Given a index register pair enum value, retrieve its name. 
Name: getprocregname; Comment: Getting a processor register name. 
Name: getprocpregname; Comment: Getting a processor register name - 32 bit size. 
Name: build_mask; Comment: Build a mask of the instruction's 'constant' opcode, based on the instruction's printing flags. 
Name: cr16_match_opcode; Comment: Search for a matching opcode. Return 1 for success, 0 for failure. 
Name: make_argument; Comment: Set the proper parameter value for different type of arguments. 
Name: print_arg; Comment: Print a single argument. 
Name: print_arguments; Comment: Print all the arguments of CURRINSN instruction. 
Name: cr16_make_instruction; Comment: Build the instruction's arguments. 
Name: get_word_at_PC; Comment: Retrieve a single word from a given memory address. 
Name: get_words_at_PC; Comment: Retrieve multiple words (3) from a given memory address. 
Name: print_insn_cr16; Comment: Prints the instruction by calling print_arguments after proper matching. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of cris_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of cris_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of cris_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of cris_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of cris_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: cris_cgen_rebuild_tables; Comment: Subroutine of cris_cgen_cpu_open to rebuild the tables. 
Name: cris_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: cris_cgen_cpu_open_1; Comment: Cover fn to cris_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: cris_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: cris_parse_disassembler_options; Comment: Parse disassembler options and store state in info. FIXME: For the time being, we abuse static variables. 
Name: number_of_bits; Comment: Return the number of bits in the argument. 
Name: get_opcode_entry; Comment: Get an entry in the opcode-table. 
Name: cris_constraint; Comment: Return -1 if the constraints of a bitwise-matched instruction say that there is no match. Otherwise return a nonnegative number indicating the confidence in the match (higher is better). 
Name: format_hex; Comment: Format number as hex with a leading "0x" into outbuffer. 
Name: format_dec; Comment: Format number as decimal into outbuffer. Parameter signedp says whether the number should be formatted as signed (!= 0) or unsigned (== 0). 
Name: format_reg; Comment: Format the name of the general register regno into outbuffer. 
Name: format_sup_reg; Comment: Format the name of a support register into outbuffer. 
Name: bytes_to_skip; Comment: Return the length of an instruction. 
Name: print_flags; Comment: Print condition code flags. 
Name: print_insn_cris_generic; Comment: Print the CRIS instruction at address memaddr on stream. Returns length of the instruction, in bytes. Prefix register names with `$' if WITH_REG_PREFIX. 
Name: print_insn_cris_with_register_prefix; Comment: Disassemble, prefixing register names with `$'. CRIS v0..v10. 
Name: print_insn_crisv32_with_register_prefix; Comment: Disassemble, prefixing register names with `$'. CRIS v32. 
Name: print_insn_crisv10_v32_with_register_prefix; Comment: Disassemble, prefixing register names with `$'. Common v10 and v32 subset. 
Name: print_insn_cris_without_register_prefix; Comment: Disassemble, no prefixes on register names. CRIS v0..v10. 
Name: print_insn_crisv32_without_register_prefix; Comment: Disassemble, no prefixes on register names. CRIS v32. 
Name: print_insn_crisv10_v32_without_register_prefix; Comment: Disassemble, no prefixes on register names. Common v10 and v32 subset. 
Name: cris_get_disassembler; Comment: Return a disassembler-function that prints registers with a `$' prefix, or one that prints registers without a prefix. FIXME: We should improve the solution to avoid the multitude of functions seen above. 
Name: getcopregname; Comment: Given a coprocessor register enum value, retrieve its name. 
Name: powerof2; Comment: Get the power of two for a given integer. 
Name: getregliststring; Comment: Transform a register bit mask to a register list. 
Name: while; Comment: Loop over instruction table until a full match is found. 
Name: if; Comment: If found, print the instruction's mnemonic and arguments. 
Name: csky_symbol_is_valid; Comment: Suppress printing of mapping symbols emitted by the assembler to mark the beginning of code and data sequences. 
Name: parse_csky_dis_options; Comment: Parse the string of disassembler options. 
Name: get_gr_name; Comment: Get general register name. 
Name: get_cr_name; Comment: Get control register name. 
Name: lookup_opcode; Comment: Return 0 if lookup fails, 1 if found and only one form, 2 if found and there are short and long forms. 
Name: buffer_read_memory; Comment: Get LENGTH bytes from info's buffer, at target address memaddr. Transfer them to myaddr. 
Name: perror_memory; Comment: Print an error message. We can assume that this is in response to an error return from buffer_read_memory. 
Name: generic_print_address; Comment: Just print the address is hex. This is included for completeness even though both GDB and objdump provide their own (to print symbolic addresses). 
Name: generic_symbol_at_address; Comment: Just return NULL. 
Name: generic_symbol_is_valid; Comment: Just return TRUE. 
Name: remove_whitespace_and_extra_commas; Comment: Remove whitespace and consecutive commas from OPTIONS. 
Name: disassembler_options_cmp; Comment: Like STRCMP, but treat ',' the same as '_0' so that we match strings like "foobar" against "foobar,xxyyzz,...". 
Name: disassemble_set_printf; Comment: Set the stream, and the styled and unstyled printf functions within INFO. 
Name: dlx_get_opcode; Comment: Print one instruction from MEMADDR on INFO->STREAM. Return the size of the instruction (always 4 on dlx). 
Name: operand_deliminator; Comment: Fill the opcode to the max length. 
Name: dlx_r_type; Comment: Process the R-type opcode. 
Name: dlx_load_type; Comment: Process the memory read opcode. 
Name: dlx_store_type; Comment: Process the memory store opcode. 
Name: dlx_aluI_type; Comment: Process the Arithmetic and Logical I-TYPE opcode. 
Name: dlx_br_type; Comment: Process the branch instruction. 
Name: dlx_jmp_type; Comment: Process the jump instruction. 
Name: dlx_jr_type; Comment: Process the jump register instruction. 
Name: print_insn_dlx; Comment: This is the main DLX insn handling routine. 
Name: parse_shortregs; Comment: -- asm.c 
Name: parse_simm_not_reg; Comment: Handle simm3/simm11/imm3/imm12. 
Name: epiphany_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: epiphany_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by epiphany_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: epiphany_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of epiphany_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of epiphany_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of epiphany_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of epiphany_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of epiphany_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: epiphany_cgen_rebuild_tables; Comment: Subroutine of epiphany_cgen_cpu_open to rebuild the tables. 
Name: epiphany_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: epiphany_cgen_cpu_open_1; Comment: Cover fn to epiphany_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: epiphany_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: epiphany_print_insn; Comment: -- dis.c 
Name: epiphany_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: epiphany_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: epiphany_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: epiphany_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: epiphany_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: epiphany_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: epiphany_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: parse_register_number; Comment: Handle register lists for LDMx and STMx. 
Name: fr30_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: fr30_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by fr30_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: fr30_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of fr30_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of fr30_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of fr30_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of fr30_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of fr30_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: fr30_cgen_rebuild_tables; Comment: Subroutine of fr30_cgen_cpu_open to rebuild the tables. 
Name: fr30_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: fr30_cgen_cpu_open_1; Comment: Cover fn to fr30_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: fr30_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: fr30_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: fr30_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: fr30_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: fr30_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: fr30_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: fr30_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: fr30_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: parse_symbolic_address; Comment: -- asm.c 
Name: frv_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: frv_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by frv_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: frv_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of frv_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of frv_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of frv_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of frv_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of frv_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: frv_cgen_rebuild_tables; Comment: Subroutine of frv_cgen_cpu_open to rebuild the tables. 
Name: frv_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: frv_cgen_cpu_open_1; Comment: Cover fn to frv_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: frv_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: print_at; Comment: -- dis.c 
Name: frv_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: frv_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: frv_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: frv_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: frv_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: frv_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: frv_is_branch_major; Comment: Returns TRUE if {MAJOR,MACH} is a major branch of the FRV development tree. 
Name: frv_is_float_major; Comment: Returns TRUE if {MAJOR,MACH} supports floating point insns. 
Name: frv_is_media_major; Comment: Returns TRUE if {MAJOR,MACH} supports media insns. 
Name: match_unit; Comment: Return TRUE if unit1 is a match for unit2. Unit1 comes from the insn's UNIT attribute. unit2 comes from one of the *_allowed_vliw tables above. 
Name: match_vliw; Comment: Return TRUE if the vliws match, FALSE otherwise. 
Name: add_next_to_vliw; Comment: Find the next vliw vliw in the table that can accomodate the new insn. If one is found then return it. Otherwise return NULL. 
Name: find_major_in_vliw; Comment: Look for the given major insn type in the given vliw. Returns TRUE if found, FALSE otherwise. 
Name: fr400_check_insn_major_constraints; Comment: Check for constraints between the insns in the vliw due to major insn types. 
Name: frv_vliw_add_insn; Comment: Add in insn to the VLIW vliw if possible. Return 0 if successful, non-zero otherwise. 
Name: frv_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: bfd_h8_disassemble_init; Comment: Run through the opcodes and sort them into order to make them easy to disassemble. 
Name: fput_reg; Comment: Utility function to print registers. Put these first, so gcc's function inlining can do its stuff. 
Name: fput_const; Comment: Print constants with sign. 
Name: extract_3; Comment: Extract a 3-bit space register number from a be, ble, mtsp or mfsp. 
Name: extract_5_store; Comment: Extract the immediate field from a st{bhw}s instruction. 
Name: extract_5r_store; Comment: Extract the immediate field from a break instruction. 
Name: extract_5R_store; Comment: Extract the immediate field from a {sr}sm instruction. 
Name: extract_10U_store; Comment: Extract the 10 bit immediate field from a {sr}sm instruction. 
Name: extract_5Q_store; Comment: Extract the immediate field from a bb instruction. 
Name: extract_11; Comment: Extract an 11 bit immediate field. 
Name: extract_14; Comment: Extract a 14 bit immediate field. 
Name: extract_16; Comment: Extract a 16 bit immediate field (PA2.0 wide only). 
Name: extract_21; Comment: Extract a 21 bit constant. 
Name: extract_12; Comment: Extract a 12 bit constant from branch instructions. 
Name: extract_17; Comment: Extract a 17 bit constant from branch instructions, returning the 19 bit signed value. 
Name: print_insn_hppa; Comment: Print one instruction. 
Name: remove_leading_whitespaces; Comment: Remove leading white spaces. 
Name: remove_trailing_whitespaces; Comment: Remove trailing white spaces. 
Name: next_field; Comment: Find next field separated by SEP and terminate it. Return a pointer to the one after it. 
Name: get_element_size; Comment: Returns LOG2 of element size. 
Name: opcode_hash_hash; Comment: Calculate the hash value of an opcode hash entry P. 
Name: opcode_hash_eq; Comment: Compare a string Q against an opcode hash entry P. 
Name: unit_to_type; Comment: Return the instruction type for OPCODE found in unit UNIT. 
Name: insert_resource; Comment: Add NAME to the resource table, where TYPE is RAW or WAW. 
Name: deplist_equals; Comment: Are the lists of dependency indexes equivalent? 
Name: insert_deplist; Comment: Add the list of dependencies to the list of dependency lists. 
Name: insert_dependencies; Comment: Add the given pair of dependency lists to the opcode dependency list. 
Name: fetch_insn_class; Comment: Look up an instruction class; if CREATE make a new one if none found; returns the index into the insn class array. 
Name: sub_compare; Comment: For sorting a class's sub-class list only; make sure classes appear before terminals. 
Name: parse_resource_users; Comment: Extract the insn classes from the given line. 
Name: irf_operand; Comment: Is the given operand an indirect register file operand? 
Name: in_iclass_mov_x; Comment: Handle mov_ar, mov_br, mov_cr, move_dahr, mov_indirect, mov_ip, mov_pr,mov_psr, and mov_um insn classes. 
Name: in_iclass; Comment: Is the given opcode in the given insn class? 
Name: insert_string; Comment: Add STR to the string table. 
Name: compact_distree; Comment: This optimization pass combines multiple "don't care" nodes. 
Name: gen_dis_table; Comment: Generate the disassembler state machine corresponding to the tree in ENT. 
Name: completer_entries_eq; Comment: If the completer trees ENT1 and ENT2 are equal, return 1. 
Name: insert_gclist; Comment: Insert ENT into the global list of completers and return it. If an equivalent entry (according to completer_entries_eq) already exists, it is returned instead. 
Name: collapse_redundant_completers; Comment: Find identical completer trees that are used in different instructions and collapse their entries. 
Name: insert_opcode_dependencies; Comment: Attach two lists of dependencies to each opcode. 1) all resources which, when already marked in use, conflict with this opcode (chks) 2) all resources which must be marked in use when this opcode is used (regs). 
Name: get_opc_prefix; Comment: Copy the prefix contained in *PTR (up to a '.' or a NUL) to DEST. PTR will be adjusted to point to the start of the next portion of the opcode, or at the NUL character. 
Name: find_string_ent; Comment: Find the index of the entry in the string table corresponding to STR; return -1 if one does not exist. 
Name: find_main_ent; Comment: Find the opcode in the main opcode table whose name is STRINGINDEX, or return -1 if one does not exist. 
Name: find_completer; Comment: Find the index of the entry in the completer table that is part of MAIN_ENT (starting from PREV_COMPLETER) that matches NAME, or return -1 if one does not exist. 
Name: apply_completer; Comment: Apply the completer referred to by COMPLETER_INDEX to OPCODE, and return the result. 
Name: extract_op_bits; Comment: Extract BITS number of bits starting from OP_POINTER + BITOFFSET in the dis_table array, and return its value. (BITOFFSET is numbered starting from MSB to LSB, so a BITOFFSET of 0 indicates the MSB of the first byte in OP_POINTER.) 
Name: extract_op; Comment: Examine the state machine entry at OP_POINTER in the dis_table array, and extract its values into OPVAL and OP. The length of the state entry in bits is returned. 
Name: opcode_verify; Comment: Returns a non-zero value if the opcode in the main_table list at PLACE matches OPCODE and is of type TYPE. 
Name: locate_opcode_ent; Comment: Find an instruction entry in the ia64_dis_names array that matches opcode OPCODE and is of type TYPE. Returns either a positive index into the array, or a negative value if an entry for OPCODE could not be found. Checks all matches and returns the one with the highest priority. 
Name: make_ia64_opcode; Comment: Construct an ia64_opcode entry based on OPCODE, NAME and PLACE. 
Name: ia64_dis_opcode; Comment: Determine the ia64_opcode entry for the opcode specified by INSN and TYPE. If a valid entry is not found, return NULL. 
Name: ia64_find_matching_opcode; Comment: Search the main_opcode table starting from PLACE for an opcode that matches NAME. Return NULL if one is not found. 
Name: ia64_find_next_opcode; Comment: Find the next opcode after PREV_ENT that matches PREV_ENT, or return NULL if one does not exist. It is the caller's responsibility to invoke ia64_free_opcode () to release any resources used by the returned entry. 
Name: ia64_find_opcode; Comment: Find the first opcode that matches NAME, or return NULL if it does not exist. It is the caller's responsibility to invoke ia64_free_opcode () to release any resources used by the returned entry. 
Name: ia64_free_opcode; Comment: Free any resources used by ENT. 
Name: parse_fr; Comment: -- asm.c 
Name: ip2k_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: ip2k_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by ip2k_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: ip2k_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of ip2k_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of ip2k_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of ip2k_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of ip2k_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of ip2k_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: ip2k_cgen_rebuild_tables; Comment: Subroutine of ip2k_cgen_cpu_open to rebuild the tables. 
Name: ip2k_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: ip2k_cgen_cpu_open_1; Comment: Cover fn to ip2k_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: ip2k_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: print_fr; Comment: -- dis.c 
Name: ip2k_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: ip2k_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: ip2k_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: ip2k_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: ip2k_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: ip2k_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: ip2k_asm_hash; Comment: A better hash function for instruction mnemonics. 
Name: ip2k_cgen_insn_supported; Comment: Special check to ensure that instruction exists for given machine. 
Name: ip2k_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: iq2000_cgen_insn_supported; Comment: Special check to ensure that instruction exists for given machine. 
Name: parse_mimm; Comment: Handle negated literal. 
Name: parse_imm; Comment: Handle signed/unsigned literal. 
Name: parse_jtargq10; Comment: Handle iq10 21-bit jmp offset. 
Name: parse_hi16; Comment: Handle high(). 
Name: parse_lo16; Comment: Handle %lo in a signed context. The signedness of the value doesn't matter to %lo(), but this also handles the case where %lo() isn't present. 
Name: parse_mlo16; Comment: Handle %lo in a negated signed context. The signedness of the value doesn't matter to %lo(), but this also handles the case where %lo() isn't present. 
Name: iq2000_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: iq2000_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by iq2000_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: iq2000_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of iq2000_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of iq2000_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of iq2000_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of iq2000_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of iq2000_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: iq2000_cgen_rebuild_tables; Comment: Subroutine of iq2000_cgen_cpu_open to rebuild the tables. 
Name: iq2000_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: iq2000_cgen_cpu_open_1; Comment: Cover fn to iq2000_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: iq2000_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: iq2000_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: iq2000_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: iq2000_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: iq2000_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: iq2000_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: iq2000_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: iq2000_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: parse_hi16; Comment: Handle hi() 
Name: parse_lo16; Comment: Handle lo() 
Name: parse_gp16; Comment: Handle gp() 
Name: parse_got16; Comment: Handle got() 
Name: parse_gotoff_hi16; Comment: Handle gotoffhi16() 
Name: parse_gotoff_lo16; Comment: Handle gotofflo16() 
Name: lm32_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: lm32_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by lm32_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: lm32_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of lm32_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of lm32_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of lm32_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of lm32_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of lm32_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: lm32_cgen_rebuild_tables; Comment: Subroutine of lm32_cgen_cpu_open to rebuild the tables. 
Name: lm32_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: lm32_cgen_cpu_open_1; Comment: Cover fn to lm32_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: lm32_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: lm32_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: lm32_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: lm32_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: lm32_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: lm32_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: lm32_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: lm32_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: lm32_cgen_init_opinst_table; Comment: Function to call before using the operand instance table. 
Name: loongarch_parse_format; Comment: Parse such FORMAT "" "u" "v0:5,r5:5,s10:10<<2" "r0:5,r5:5,r10:5,u15:2+1" "r,r,u0:5+32,u0:5+1" 
Name: m32c_cgen_isa_register; Comment: Must match md_begin. 
Name: parse_unsigned6; Comment: Don't successfully parse literals beginning with '['. 
Name: parse_signed24; Comment: This should only be used for #imm->reg. 
Name: parse_suffix; Comment: Parse the suffix as :<char> or as nothing followed by a whitespace. 
Name: parse_X; Comment: Parse an empty suffix. Fail if the next char is ':'. 
Name: parse_size; Comment: Accept .b or .w in any case. 
Name: m32c_cgen_insn_supported; Comment: Special check to ensure that instruction exists for given machine. 
Name: parse_regset; Comment: Parse a set of registers, R0,R1,A0,A1,SB,FB. 
Name: m32c_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: m32c_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by m32c_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: m32c_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of m32c_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of m32c_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of m32c_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of m32c_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of m32c_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: m32c_cgen_rebuild_tables; Comment: Subroutine of m32c_cgen_cpu_open to rebuild the tables. 
Name: m32c_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: m32c_cgen_cpu_open_1; Comment: Cover fn to m32c_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: m32c_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: print_suffix; Comment: Always print the short insn format suffix as ':<char>'. 
Name: print_X; Comment: Print the empty suffix. 
Name: print_regset; Comment: Print a set of registers, R0,R1,A0,A1,SB,FB. 
Name: m32c_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: m32c_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: m32c_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: m32c_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: m32c_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: m32c_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: m32c_asm_hash; Comment: -- opc.c 
Name: m32c_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: parse_hash; Comment: Handle '#' prefixes (i.e. skip over them). 
Name: parse_hi16; Comment: Handle shigh(), high(). 
Name: parse_slo16; Comment: Handle low() in a signed context. Also handle sda(). The signedness of the value doesn't matter to low(), but this also handles the case where low() isn't present. 
Name: parse_ulo16; Comment: Handle low() in an unsigned context. The signedness of the value doesn't matter to low(), but this also handles the case where low() isn't present. 
Name: m32r_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: m32r_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by m32r_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: m32r_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of m32r_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of m32r_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of m32r_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of m32r_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of m32r_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: m32r_cgen_rebuild_tables; Comment: Subroutine of m32r_cgen_cpu_open to rebuild the tables. 
Name: m32r_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: m32r_cgen_cpu_open_1; Comment: Cover fn to m32r_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: m32r_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: print_signed_with_hash_prefix; Comment: Print signed operands with '#' prefixes. 
Name: print_unsigned_with_hash_prefix; Comment: Print unsigned operands with '#' prefixes. 
Name: print_hash; Comment: Handle '#' prefixes as operands. 
Name: m32r_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: m32r_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: m32r_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: m32r_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: m32r_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: m32r_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: m32r_cgen_dis_hash; Comment: -- opc.c 
Name: m32r_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: m32r_cgen_init_opinst_table; Comment: Function to call before using the operand instance table. 
Name: print_indexed_operand; Comment: Read the 68HC12 indexed operand byte and print the corresponding mode. Returns the number of bytes read or -1 if failure. 
Name: print_insn; Comment: Disassemble one instruction at address 'memaddr'. Returns the number of bytes used by that instruction. 
Name: print_insn_m68hc11; Comment: Disassemble one instruction at address 'memaddr'. Returns the number of bytes used by that instruction. 
Name: dummy_printer; Comment: This function is used to print to the bit-bucket. 
Name: fetch_arg; Comment: Fetch BITS bits from a position in the instruction specified by CODE. CODE is a "place to put an argument", or 'x' for a destination that is a general address (mode and register). BUFFER contains the instruction. Returns -1 on failure. 
Name: m68k_valid_ea; Comment: Check if an EA is valid for a particular code. This is required for the EMAC instructions since the type of source address determines if it is a EMAC-load instruciton if the EA is mode 2-5, otherwise it is a non-load EMAC instruction and the bits mean register Ry. A similar case exists for the movem instructions where the register mask is interpreted differently for different EAs. 
Name: print_base; Comment: Print a base register REGNO and displacement DISP, on INFO->STREAM. REGNO = -1 for pc, -2 for none (suppressed). 
Name: print_indexed; Comment: Print an indexed argument. The base register is BASEREG (-1 for pc). P points to extension word, in buffer. ADDR is the nominal core address of that extension word. Returns NULL upon error. 
Name: print_insn_arg; Comment: Returns number of bytes "eaten" by the operand, or return enum print_insn_arg_error. ADDR is the pc for this arg to be relative to. 
Name: match_insn_m68k; Comment: Try to match the current instruction to best and if so, return the number of bytes consumed from the instruction stream, else zero. Return -1 on memory error. 
Name: m68k_scan_mask; Comment: Try to interpret the instruction at address MEMADDR as one that can execute on a processor with the features given by ARCH_MASK. If successful, print the instruction to INFO->STREAM and return its length in bytes. Return 0 otherwise. Return -1 on memory error. 
Name: print_insn_m68k; Comment: Print the m68k instruction at address MEMADDR in debugged memory, on INFO->STREAM. Returns length of the instruction, in bytes. 
Name: parse_tpreg; Comment: end-cop-ip-parse-handlers 
Name: parse_signed16; Comment: Handle %lo(), %tpoff(), %sdaoff(), %hi(), and other signed constants in a signed context. 
Name: parse_zero; Comment: A special case of parse_signed16 which accepts only the value zero. 
Name: mep_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: mep_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by mep_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: mep_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of mep_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of mep_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of mep_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of mep_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of mep_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: mep_cgen_rebuild_tables; Comment: Subroutine of mep_cgen_cpu_open to rebuild the tables. 
Name: mep_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: mep_cgen_cpu_open_1; Comment: Cover fn to mep_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: mep_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: mep_examine_vliw32_insns; Comment: The two functions mep_examine_vliw[32,64]_insns are used find out which vliw combinaion (16 bit core with 48 bit copro, 32 bit core with 32 bit copro, etc.) is present. Later on, when internally parallel coprocessors are handled, only these functions should need to be changed. At this time only the following combinations are supported: VLIW32 Mode: 16 bit core insn (core) and 16 bit coprocessor insn (cop1) 32 bit core insn (core) 32 bit coprocessor insn (cop1) Note: As of this time, I do not believe we have enough information to distinguish a 32 bit core insn from a 32 bit cop insn. Also, no 16 bit coprocessor insns have been specified. VLIW64 Mode: 16 bit core insn (core) and 48 bit coprocessor insn (cop1) 32 bit core insn (core) and 32 bit coprocessor insn (cop1) 64 bit coprocessor insn (cop1) The framework for an internally parallel coprocessor is also present (2nd coprocessor insn is cop2), but at this time it is not used. This only appears to be valid in VLIW64 mode. 
Name: mep_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: mep_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: mep_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: mep_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: mep_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: mep_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: mep_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: metag_get_set_size_bytes; Comment: Return the size of a GET or SET instruction. 
Name: metag_get_set_ext_size_bytes; Comment: Return the size of an extended GET or SET instruction. 
Name: metag_cond_set_size_bytes; Comment: Return the size of a conditional SET instruction. 
Name: sign_extend; Comment: Return a value sign-extended. 
Name: short_unit; Comment: Return the short interpretation of UNIT. 
Name: lookup_reg; Comment: Return the register corresponding to UNIT and NUMBER or NULL. 
Name: lookup_reg_name; Comment: Return the register name corresponding to UNIT and NUMBER or NULL. 
Name: get_pair_unit; Comment: Return the unit that is the pair of UNIT. 
Name: lookup_pair_reg_name; Comment: Return the name of the pair register for UNIT and NUMBER or NULL. 
Name: lookup_acf_name; Comment: Return the name of the accumulator register for PART. 
Name: lookup_o2r; Comment: Return the register name for the O2R register for UNIT and NUMBER. 
Name: lookup_scc_flags; Comment: Return the string for split condition code CODE. 
Name: lookup_fpu_scc_flags; Comment: Return the string for FPU split condition code CODE. 
Name: print_insn; Comment: Print an instruction with PREFIX, NAME and OPERANDS. 
Name: print_none; Comment: Print an instruction with no operands. 
Name: print_mov_u2u; Comment: Print a unit to unit MOV instruction. 
Name: print_mov_port; Comment: Print a MOV to port instruction. 
Name: hweight; Comment: Return the number of bits set in rmask. 
Name: print_movl_ttrec; Comment: Print a MOVL to TTREC instruction. 
Name: get_set_addr_str; Comment: Format a GET or SET address mode string from INSN_WORD into BUF. 
Name: get_set_ext_addr_str; Comment: Format an extended GET or SET address mode string from INSN_WORD into BUF. 
Name: mget_mset_addr_str; Comment: Format an MGET or MSET address mode string from INSN_WORD into BUF. 
Name: cond_set_addr_str; Comment: Format a conditional SET address mode string from INSN_WORD into BUF. 
Name: cache_addr_str; Comment: Format a cache instruction address mode string from INSN_WORD into BUF. 
Name: lookup_reg_list; Comment: Format a list of registers starting at REG_UNIT and REG_NO and conforming to RMASK into BUF. 
Name: print_get; Comment: Print a GET instruction. 
Name: print_set; Comment: Print a SET instruction. 
Name: print_get_set; Comment: Print a GET or SET instruction. 
Name: print_get_set_ext; Comment: Print an extended GET or SET instruction. 
Name: print_mget_mset; Comment: Print an MGET or MSET instruction. 
Name: print_cond_set; Comment: Print a conditional SET instruction. 
Name: print_mmov; Comment: Print a MMOV instruction. 
Name: print_mdrd; Comment: Print an MDRD instruction. 
Name: print_xfr; Comment: Print an XFR instruction. 
Name: print_mov_ct; Comment: Print a MOV to control unit instruction. 
Name: print_swap; Comment: Print a SWAP instruction. 
Name: print_jump; Comment: Print a SWAP instruction. 
Name: print_callr; Comment: Print a CALLR instruction. 
Name: print_alu; Comment: Print a GP ALU instruction. 
Name: print_branch; Comment: Print a B instruction. 
Name: print_switch; Comment: Print a SWITCH instruction. 
Name: print_shift; Comment: Print a shift instruction. 
Name: print_min_max; Comment: Print a MIN or MAX instruction. 
Name: print_bitop; Comment: Print a bit operation instruction. 
Name: print_cmp; Comment: Print a CMP or TST instruction. 
Name: print_cacher; Comment: Print a CACHER instruction. 
Name: print_cachew; Comment: Print a CACHEW instruction. 
Name: print_icache; Comment: Print an ICACHE instruction. 
Name: print_lnkget; Comment: Print a LNKGET instruction. 
Name: print_fmov; Comment: Print an FPU MOV instruction. 
Name: convert_fx_rmask; Comment: Convert an FPU rmask into a compatible form. 
Name: print_fmmov; Comment: Print an FPU MMOV instruction. 
Name: print_fmov_data; Comment: Print an FPU data unit MOV instruction. 
Name: print_fmov_i; Comment: Print an FPU MOV immediate instruction. 
Name: print_fpack; Comment: Print an FPU PACK instruction. 
Name: print_fswap; Comment: Print an FPU SWAP instruction. 
Name: print_fcmp; Comment: Print an FPU CMP instruction. 
Name: print_fminmax; Comment: Print an FPU MIN or MAX instruction. 
Name: print_fconv; Comment: Print an FPU data conversion instruction. 
Name: print_fconvx; Comment: Print an FPU extended data conversion instruction. 
Name: print_fbarith; Comment: Print an FPU basic arithmetic instruction. 
Name: print_fearith; Comment: Print an FPU extended arithmetic instruction. 
Name: print_frec; Comment: Print an FPU RCP or RSQ instruction. 
Name: print_fget_set_acf; Comment: Print an FPU accumulator GET or SET instruction. 
Name: __lookup_dsp_name; Comment: Return the name of the DSP register or accumulator for NUM and UNIT. 
Name: lookup_dsp_name; Comment: Return the name of the DSP register for NUM and UNIT. 
Name: lookup_dspram_name; Comment: Return the name of the DSP RAM register for NUM and UNIT. 
Name: lookup_any_reg_name; Comment: This lookup function looks up the corresponding name for a register number in a DSP instruction. SOURCE indicates whether this register is a source or destination operand. 
Name: print_dget_set; Comment: Print a DSP GET or SET instruction. 
Name: print_dtemplate; Comment: Print a DSP template instruction. 
Name: decode_template_definition; Comment: Format template definition from INSN_WORD into BUF. 
Name: print_dalu; Comment: Print a DSP ALU instruction. 
Name: print_insn_metag; Comment: Entry point for instruction printing. 
Name: decode_micromips_operand; Comment: Return the mips_operand structure for the operand at the beginning of P. 
Name: choose_abi_by_name; Comment: If set disassemble as most general inst. 
Name: is_newabi; Comment: Check if the object uses NewABI conventions. 
Name: is_micromips; Comment: Check if the object has microMIPS ASE code. 
Name: mips_convert_abiflags_ases; Comment: Convert ASE flags from .MIPS.abiflags to internal values. 
Name: mips_calculate_combination_ases; Comment: Calculate combination ASE flags from regular ASE flags. 
Name: parse_mips_ase_option; Comment: Parse an ASE disassembler option and set the corresponding global ASE flag(s). Return TRUE if successful, FALSE otherwise. 
Name: print_reg; Comment: Print register REGNO, of type TYPE, for instruction OPCODE. 
Name: print_vu0_channel; Comment: Print OP_VU0_SUFFIX or OP_VU0_MATCH_SUFFIX operand OPERAND, whose value is given by UVAL. 
Name: mips_seen_register; Comment: Record information about a register operand. 
Name: mips_print_save_restore; Comment: Print SAVE/RESTORE instruction operands according to the argument register mask AMASK, the number of static registers saved NSREG, the $ra, $s0 and $s1 register specifiers RA, S0 and S1 respectively, and the frame size FRAME_SIZE. 
Name: print_insn_arg; Comment: Print operand OPERAND of OPCODE, using STATE to track inter-operand state. UVAL is the encoding of the operand (shifted into bit 0) and BASE_PC is the base address for OP_PCREL operands. 
Name: validate_insn_args; Comment: Validate the arguments for INSN, which is described by OPCODE. Use DECODE_OPERAND to get the encoding of each operand. 
Name: print_insn_args; Comment: Print the arguments for INSN, which is described by OPCODE. Use DECODE_OPERAND to get the encoding of each operand. Use BASE_PC as the base of OP_PCREL operands, adjusting by LENGTH if the OP_PCREL operand is for a branch or jump. 
Name: print_insn_mips; Comment: Print the mips instruction at address MEMADDR in debugged memory, on using INFO. Returns length of the instruction, in bytes, which is always INSNLEN. BIGENDIAN must be 1 if this is big-endian code, 0 if this is little-endian code. 
Name: print_mips16_insn_arg; Comment: Disassemble an operand for a mips16 instruction. 
Name: is_mips16_plt_tail; Comment: Check if the given address is the last word of a MIPS16 PLT entry. This word is data and depending on the value it may interfere with disassembly of further PLT entries. We make use of the fact PLT symbols are marked BSF_SYNTHETIC. 
Name: print_insn_mips16; Comment: Disassemble mips16 instructions. 
Name: print_insn_micromips; Comment: Disassemble microMIPS instructions. 
Name: is_compressed_mode_p; Comment: Return 1 if a symbol associated with the location being disassembled indicates a compressed mode, either MIPS16 or microMIPS, according to MICROMIPS_P. We iterate over all the symbols at the address being considered assuming if at least one of them indicates code compression, then such code has been genuinely produced here (other symbols could have been derived from function symbols defined elsewhere or could define data). Otherwise, return 0. 
Name: _print_insn_mips; Comment: In an environment where we do not know the symbol type of the instruction we are forced to assume that the low order bit of the instructions' address may mark it as a mips16 instruction. If we are single stepping, or the pc is within the disassembled function, this works. Otherwise, we need a clue. Sometimes. 
Name: disassembler_options_mips; Comment: Build the structure representing valid MIPS disassembler options. This is done dynamically for maintenance ease purpose; a static initializer would be unreadable. 
Name: decode_mips_operand; Comment: Return the mips_operand structure for the operand at the beginning of P. 
Name: decode_mips16_operand; Comment: Return the meaning of operand character TYPE, or null if it isn't recognized. If the operand is affected by the EXTEND instruction, EXTENDED_P selects between the extended and unextended forms. The extended forms all have an lsb of 0. 
Name: initialize_mmix_dis_info; Comment: Initialize a target-specific array in INFO. 
Name: get_opcode; Comment: A table indexed by the first byte is constructed as we disassemble each tetrabyte. The contents is a pointer into mmix_insns reflecting the first found entry with matching match-bits and lose-bits. Further entries are considered one after one until the operand constraints match or the match-bits and lose-bits do not match. Normally a "further entry" will just show that there was no other match. 
Name: print_insn_mmix; Comment: The main disassembly function. 
Name: immediate; Comment: The chip is little-endian, but GETBYTE byte-swaps words because the decoder is based on 16-bit "words" so *this* logic is big-endian. 
Name: encode_ad; Comment: __PC_SP_SR_CG As 00_Rn_-_-_R2_#0 01_X(Rn)_Sym_-_X(abs)_#1 10_(Rn)_-_-_#4_#2 11_(Rn++)_#imm_-_#8_#-1 Ad 0_Rn_-_-_-_- 1_X(Rn)_Sym_-_X(abs)_- 
Name: signed_out_of_bounds; Comment: Range checking for signed numbers. Returns 0 if acceptable and 1 if the value is out of bounds for a signed quantity. 
Name: mt_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: mt_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by mt_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: mt_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of mt_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of mt_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of mt_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of mt_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of mt_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: mt_cgen_rebuild_tables; Comment: Subroutine of mt_cgen_cpu_open to rebuild the tables. 
Name: mt_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: mt_cgen_cpu_open_1; Comment: Cover fn to mt_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: mt_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: print_dollarhex; Comment: -- dis.c 
Name: mt_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: mt_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: mt_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: mt_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: mt_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: mt_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: mt_cgen_insn_supported; Comment: Special check to ensure that instruction exists for given machine. 
Name: mt_asm_hash; Comment: A better hash function for instruction mnemonics. 
Name: mt_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: build_opcode_syntax; Comment: Build the syntax for a given opcode OPC. It parses the string pointed by INSTRUCTION and store the result on SYNTAX, so when we assemble an instruction, we don't have to parse the syntax again. 
Name: nds32_asm_init; Comment: Initialize the assembler. It must be called before assembling. 
Name: parse_to_delimiter; Comment: Parse the input and store operand keyword string in ODSTR. This function is only used for parsing keywords, HW_INT/HW_UINT are parsed parse_operand callback handler. 
Name: parse_re; Comment: Parse the operand of lmw/smw/lmwa/smwa. 
Name: parse_re2; Comment: Parse the operand of push25/pop25. 
Name: parse_fe5; Comment: Parse the operand of lwi45.fe. 
Name: parse_pi5; Comment: Parse the operand of movpi45. 
Name: parse_aext_reg; Comment: Parse the operand of audio ext. 
Name: parse_operand; Comment: Generic operand parse base on the information provided by the field. 
Name: parse_insn; Comment: Try to parse an instruction string based on opcode syntax. 
Name: nds32_find_reg_keyword; Comment: Find the value map register name. 
Name: match_field; Comment: Match instruction opcode with keyword table. 
Name: nds32_parse_opcode; Comment: Dump instruction. If the opcode is unknown, return FALSE. 
Name: nds32_filter_unknown_insn; Comment: Filter instructions with some bits must be fixed. 
Name: nds32_mask_opcode; Comment: Get the format of instruction. 
Name: nds32_special_opcode; Comment: Check the subset of opcode. 
Name: nds32_symbol_is_valid; Comment: Ignore disassembling unnecessary name. 
Name: nfp_me_print_opnd10; Comment: Print an unrestricted/10-bit operand. This can mostly be generic across NFP families at the moment. 
Name: nfp_me_print_opnd8; Comment: Print a restricted/8-bit operand. This can mostly be generic across NFP families at the moment. 
Name: nfp_me27_print_cmd; Comment: NFP-32xx (ME Version 2.7). 
Name: nfp_me28_print_cmd; Comment: NFP-6xxx/4xxx (ME Version 2.8). 
Name: init_nfp_priv; Comment: Called on first disassembly attempt so that dinfo->section is valid so that we can get the bfd owner to find ME configs. 
Name: nios2_r1_extract_opcode; Comment: Extract the opcode from an instruction word. 
Name: nios2_init_opcode_hash; Comment: Function to initialize the opcode hash table. 
Name: nios2_find_opcode_hash; Comment: Return a pointer to an nios2_opcode struct for a given instruction word OPCODE for bfd machine MACH, or NULL if there is an error. 
Name: nios2_coprocessor_regs; Comment: Return a pointer to the base of the coprocessor register name array. 
Name: nios2_control_regs; Comment: Return a pointer to the base of the control register name array. 
Name: bad_opcode; Comment: Helper routine to report internal errors. 
Name: nios2_print_insn_arg; Comment: The function nios2_print_insn_arg uses the character pointed to by ARGPTR to determine how it print the next token or separator character in the arguments to an instruction. 
Name: nios2_disassemble; Comment: nios2_disassemble does all the work of disassembling a Nios II instruction opcode. 
Name: print_insn_nios2; Comment: print_insn_nios2 is the main disassemble function for Nios II. The function diassembler(abfd) (source in disassemble.c) returns a pointer to this either print_insn_big_nios2 or print_insn_little_nios2, which in turn call this function when the bfd machine type is Nios II. print_insn_nios2 reads the instruction word at the address given, and prints the disassembled instruction on the stream info->stream using info->fprintf_func. 
Name: print_insn_big_nios2; Comment: These two functions are the main entry points, accessed from disassemble.c. 
Name: optlist; Comment: Figure out which options are present. 
Name: bit_extract; Comment: Extract "count" bits starting "offset" bits into buffer. 
Name: bit_extract_simple; Comment: Like bit extract but the buffer is valid and doen't need to be fetched. 
Name: print_insn_arg; Comment: Print an instruction operand of category given by d. IOFFSET is the bit position below which small (<1 byte) parts of the operand can be found (usually in the basic instruction, but for indexed addressing it can be in the index byte). AOFFSETP is a pointer to the bit position of the addressing extension. BUFFER contains the instruction. ADDR is where BUFFER was read from. Put the disassembled version of the operand in RESULT. INDEX_OFFSET is the bit position of the index byte (it contains -1 if this operand is not a general operand using scaled indexed addressing mode). 
Name: print_insn_ns32k; Comment: Print the 32000 instruction at address MEMADDR in debugged memory, on STREAM. Returns length of the instruction, in bytes. 
Name: parse_regpair; Comment: Parse register pairs with syntax rA,rB to a flag + rA value. 
Name: or1k_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: or1k_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by or1k_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: or1k_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of or1k_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of or1k_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of or1k_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of or1k_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of or1k_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: or1k_cgen_rebuild_tables; Comment: Subroutine of or1k_cgen_cpu_open to rebuild the tables. 
Name: or1k_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: or1k_cgen_cpu_open_1; Comment: Cover fn to or1k_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: or1k_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: print_regpair; Comment: -- dis.c 
Name: or1k_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: or1k_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: or1k_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: or1k_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: or1k_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: or1k_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: or1k_cgen_insn_supported; Comment: Special check to ensure that instruction exists for given machine. 
Name: or1k_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: or1k_cgen_init_opinst_table; Comment: Function to call before using the operand instance table. 
Name: print_insn_pdp11; Comment: Print the PDP-11 instruction at address MEMADDR in debugged memory, on INFO->STREAM. Returns length of the instruction, in bytes. 
Name: get_powerpc_dialect; Comment: Switch between Booke and VLE dialects for interlinked dumps. 
Name: ppc_parse_cpu; Comment: Handle -m and -M options that set cpu type, and .machine arg. 
Name: powerpc_init_dialect; Comment: Determine which set of machines to disassemble for. 
Name: disassemble_init_powerpc; Comment: Calculate opcode table indices to speed up disassembly, and init dialect. 
Name: print_insn_big_powerpc; Comment: Print a big endian PowerPC instruction. 
Name: print_insn_little_powerpc; Comment: Print a little endian PowerPC instruction. 
Name: operand_value_powerpc; Comment: Extract the operand value from the PowerPC or POWER instruction. 
Name: skip_optional_operands; Comment: Determine whether the optional operand(s) should be printed. 
Name: lookup_powerpc; Comment: Find a match for INSN in the opcode table, given machine DIALECT. 
Name: lookup_prefix; Comment: Find a match for INSN in the PREFIX opcode table. 
Name: lookup_vle; Comment: Find a match for INSN in the VLE opcode table. 
Name: lookup_lsp; Comment: Find a match for INSN in the LSP opcode table. 
Name: lookup_spe2; Comment: Find a match for INSN in the SPE2 opcode table. 
Name: print_insn_powerpc; Comment: Print a PowerPC or POWER instruction. 
Name: insert_arx; Comment: The ARX, ARY, RX and RY operands are alternate encodings of GPRs. 
Name: insert_bab; Comment: The BA and BB fields in an XL form instruction or the RA and RB fields or VRA and VRB fields in a VX form instruction when they must be the same. This is used for extended mnemonics like crclr. The extraction function enforces that the fields are the same. 
Name: insert_btab; Comment: The BT, BA and BB fields in an XL form instruction when they must all be the same. This is used for extended mnemonics like crclr. The extraction function enforces that the fields are the same. 
Name: insert_bdm; Comment: The BD field in a B form instruction when the - modifier is used. This modifier means that the branch is not expected to be taken. For chips built to versions of the architecture prior to version 2 (ie. not Power4 compatible), we set the y bit of the BO field to 1 if the offset is negative. When extracting, we require that the y bit be 1 and that the offset be positive, since if the y bit is 0 we just want to print the normal form of the instruction. Power4 compatible targets use two bits, "a", and "t", instead of the "y" bit. "at" == 00 => no hint, "at" == 01 => unpredictable, "at" == 10 => not taken, "at" == 11 => taken. The "t" bit is 00001 in BO field, the "a" bit is 00010 for branch on CR(BI) and 01000 for branch on CTR. We only handle the taken/not-taken hint here. Note that we don't relax the conditions tested here when disassembling with -Many because insns using extract_bdm and extract_bdp always occur in pairs. One or the other will always be valid. 
Name: insert_bdp; Comment: The BD field in a B form instruction when the + modifier is used. This is like BDM, above, except that the branch is expected to be taken. 
Name: valid_bo; Comment: Check for legal values of a BO field. 
Name: insert_bo; Comment: The BO field in a B form instruction. Warn about attempts to set the field to an illegal value. 
Name: get_bo_hint_mask; Comment: For the given BO value, return a bit mask detailing which bits define the branch hints. 
Name: insert_boe; Comment: The BO field in a B form instruction when the + or - modifier is used. 
Name: insert_bom; Comment: The BO field in a B form instruction when the - modifier is used. 
Name: insert_bop; Comment: The BO field in a B form instruction when the + modifier is used. 
Name: insert_dcmxs; Comment: The DCMX field in a X form instruction when the field is split into separate DC, DM and DX fields. 
Name: insert_dw; Comment: The DW field in a X form instruction when the field is split into separate D and DX fields. 
Name: insert_dxd; Comment: The D field in a DX form instruction when the field is split into separate D0, D1 and D2 fields. 
Name: insert_d34; Comment: The D field in a 64-bit D form prefix instruction when the field is split into separate D0 and D1 fields. 
Name: insert_nsi34; Comment: The NSI34 field in an 8-byte D form prefix instruction. This is the same as the SI34 field, only negated. The extraction function always marks it as invalid, since we never want to recognize an instruction which uses a field of this type. 
Name: insert_imm32; Comment: The split IMM32 field in a vector splat insn. 
Name: insert_pcrel; Comment: The R field in an 8-byte prefix instruction when there are restrictions between R's value and the RA value (ie, they cannot both be non zero). 
Name: extract_pcrel1; Comment: Variant of extract_pcrel that sets invalid for R bit clear. Used to disassemble "paddi rt,0,offset,1" as "pla rt,offset". 
Name: insert_fxm; Comment: FXM mask in mfcr and mtcrf instructions. 
Name: insert_l1opt; Comment: L field in the paste. instruction. 
Name: insert_ls; Comment: The 2-bit/3-bit L or 2-bit WC field in a SYNC, DCBF or WAIT instruction. For SYNC, some L values are reserved: Values 6 and 7 are reserved on newer server cpus. Value 3 is reserved on all server cpus. Value 2 is reserved on all other cpus. For DCBF, some L values are reserved: Values 2, 5 and 7 are reserved on all cpus. For WAIT, some WC values are reserved: Value 3 is reserved on all server cpus. Values 1 and 2 are reserved on older server cpus. 
Name: insert_esync; Comment: The 4-bit E field in a sync instruction that accepts 2 operands. If ESYNC is non-zero, then the L field must be either 0 or 1 and the complement of ESYNC-bit2. 
Name: insert_crwn; Comment: The n operand of clrrwi, which sets the ME field to 31 - n. 
Name: insert_elwn; Comment: The n operand of extlwi, which sets the ME field to n - 1. 
Name: insert_erwn; Comment: The n operand of extrwi, sets MB = 32 - n. 
Name: insert_erwb; Comment: The b operand of extrwi, sets SH = b + n. 
Name: insert_cslwn; Comment: The n and b operands of clrlslwi. 
Name: insert_ilwb; Comment: The n and b operands of inslwi. 
Name: insert_irwb; Comment: The n and b operands of insrwi. 
Name: insert_mbe; Comment: The MB and ME fields in an M form instruction expressed as a single operand which is itself a bitmask. The extraction function always marks it as invalid, since we never want to recognize an instruction which uses a field of this type. 
Name: insert_mb6; Comment: The MB or ME field in an MD or MDS form instruction. The high bit is wrapped to the low end. 
Name: insert_erdn; Comment: The n operand of extrdi, which sets MB field. 
Name: insert_eldn; Comment: The n operand of extldi, which sets ME field. 
Name: insert_crdn; Comment: The n operand of clrrdi, which set ME field. 
Name: extract_nb; Comment: The NB field in an X form instruction. The value 32 is stored as 0. 
Name: insert_nbi; Comment: The NB field in an lswi instruction, which has special value restrictions. The value 32 is stored as 0. 
Name: insert_nsi; Comment: The NSI field in a D form instruction. This is the same as the SI field, only negated. The extraction function always marks it as invalid, since we never want to recognize an instruction which uses a field of this type. 
Name: insert_pl; Comment: The 2-bit SC field in a SYNC or PL field in a WAIT instruction. For WAIT, some PL values are reserved: Values 1, 2 and 3 are reserved. 
Name: insert_p2; Comment: The 2-bit P field in a MMA XX2-form instruction. This is split. 
Name: insert_ral; Comment: The RA field in a D or X form instruction which is an updating load, which means that the RA field may not be zero and may not equal the RT field. 
Name: insert_ram; Comment: The RA field in an lmw instruction, which has special value restrictions. 
Name: insert_raq; Comment: The RA field in the DQ form lq or an lswx instruction, which have special value restrictions. 
Name: insert_ras; Comment: The RA field in a D or X form instruction which is an updating store or an updating floating point load, which means that the RA field may not be zero. 
Name: insert_rsb; Comment: The RS and RB fields in an X form instruction when they must be the same. This is used for extended mnemonics like mr. The extraction function enforces that the fields are the same. 
Name: insert_rbx; Comment: The RB field in an lswx instruction, which has special value restrictions. 
Name: insert_sci8; Comment: The SCI8 field is made up of SCL and {U,N}I8 fields. 
Name: insert_rrwn; Comment: The n operand of rotrwi, sets SH = 32 - n. 
Name: insert_slwn; Comment: The n operand of slwi, sets SH = n and ME = 31 - n. 
Name: insert_srwn; Comment: The n operand of srwi, sets SH = 32 - n and MB = n. 
Name: insert_sh6; Comment: The SH field in an MD form instruction. This is split. 
Name: insert_rrdn; Comment: The n operand of rotrdi, which writes to SH field. 
Name: insert_sldn; Comment: The n operand of sldi, which writes to SH and ME fields. 
Name: insert_srdn; Comment: The n operand of srdi, which writes to SH and MB fields. 
Name: insert_erdb; Comment: The b operand of extrdi, which sets SH field. 
Name: insert_csldn; Comment: The b and n operands of clrlsldi. 
Name: insert_irdb; Comment: The b and n operands of insrdi. 
Name: insert_spr; Comment: The SPR field in an XFX form instruction. This is flipped--the lower 5 bits are stored in the upper 5 and vice- versa. 
Name: insert_tbr; Comment: The TBR field in an XFX instruction. This is just like SPR, but it is optional. 
Name: insert_xt6; Comment: The XT and XS fields in an XX1 or XX3 form instruction. This is split. 
Name: insert_xtq6; Comment: The XT and XS fields in an DQ form VSX instruction. This is split. 
Name: insert_xa5; Comment: The 5-bit XAp field in an XX3 form instruction. This is split. 
Name: insert_xa6; Comment: The XA field in an XX3 form instruction. This is split. 
Name: insert_xa6a; Comment: The XA field in an MMA XX3 form instruction. This is split and must not overlap with the ACC operand. 
Name: insert_xb5; Comment: The 5-bit XB field in an XX3 form instruction. This is split. 
Name: insert_xb6; Comment: The XB field in an XX3 form instruction. This is split. 
Name: insert_xb6a; Comment: The XB field in an MMA XX3 form instruction. This is split and must not overlap with the ACC operand. 
Name: insert_xab6; Comment: The XA and XB fields in an XX3 form instruction when they must be the same. This is used for extended mnemonics like xvmovdp. The extraction function enforces that the fields are the same. 
Name: insert_xc6; Comment: The XC field in an XX4 form instruction. This is split. 
Name: insert_xtp; Comment: The split XTp and XSp field in a vector paired insn. 
Name: insert_xts; Comment: The split XT field in a vector splat insn. 
Name: insert_vlesi; Comment: The VLESIMM field in an I16A form instruction. This is split. 
Name: insert_vleui; Comment: The VLEUIMM field in an I16A form instruction. This is split. 
Name: insert_vleil; Comment: The VLEUIMML field in an I16L form instruction. This is split. 
Name: insert_thct; Comment: ISA 2.03 and later specify extended mnemonics dcbtct, dcbtds, and dcbtstct, dcbtstds with a note saying these should be used in new programs rather than the base mnemonics "so that it can be coded with TH as the last operand for all categories". For that reason the extended mnemonics are enabled in the assembler for the embedded processors, but not for the disassembler so as to display the embedded dcbt or dcbtst expected form with TH first for embedded programmers. 
Name: pru_find_opcode; Comment: Return a pointer to an pru_opcode struct for a given instruction opcode, or NULL if there is an error. 
Name: pru_print_insn_arg; Comment: The function pru_print_insn_arg uses the character pointed to by ARGPTR to determine how it print the next token or separator character in the arguments to an instruction. 
Name: pru_disassemble; Comment: pru_disassemble does all the work of disassembling a PRU instruction opcode. 
Name: print_insn_pru; Comment: print_insn_pru is the main disassemble function for PRU. 
Name: set_default_riscv_dis_options; Comment: Set default RISC-V disassembler options. 
Name: parse_riscv_dis_option_without_args; Comment: Parse RISC-V disassembler option (without arguments). 
Name: parse_riscv_dis_option; Comment: Parse RISC-V disassembler option (possibly with arguments). 
Name: parse_riscv_dis_options; Comment: Parse RISC-V disassembler options. 
Name: arg_print; Comment: Print one argument from an array. 
Name: maybe_print_address; Comment: If we need to print an address, set its value and state. 
Name: print_insn_args; Comment: Print insn arguments for 32/64-bit code. 
Name: riscv_disassemble_insn; Comment: Print the RISC-V instruction at address MEMADDR in debugged memory, on using INFO. Returns length of the instruction, in bytes. BIGENDIAN must be 1 if this is big-endian code, 0 if this is little-endian code. 
Name: riscv_get_map_state; Comment: Return true if we find the suitable mapping symbol, and also update the STATE. Otherwise, return false. 
Name: riscv_search_mapping_symbol; Comment: Check the sorted symbol table (sorted by the symbol value), find the suitable mapping symbols. 
Name: riscv_data_length; Comment: Decide which data size we should print. 
Name: riscv_disassemble_data; Comment: Dump the data contents. 
Name: riscv_symbol_is_valid; Comment: Prevent use of the fake labels that are generated as part of the DWARF and for relaxable relocations in the assembler. 
Name: disassembler_options_riscv; Comment: Build the structure representing valid RISCV disassembler options. This is done dynamically for maintenance ease purpose; a static initializer would be unreadable. 
Name: match_c_add_with_hint; Comment: We don't allow mv zero,X to become a c.mv hint, so we need a separate matching function for this. 
Name: match_c_lui_with_hint; Comment: We don't allow lui zero,X to become a c.lui hint, so we need a separate matching function for this. 
Name: match_c_slli; Comment: This requires a non-zero shift. A zero rd is a hint, so is allowed. 
Name: match_slli_as_c_slli; Comment: This requires a non-zero rd, and a non-zero shift. 
Name: match_c_slli64; Comment: This requires a zero shift. A zero rd is a hint, so is allowed. 
Name: match_srxi_as_c_srxi; Comment: This is used for both srli and srai. This requires a non-zero shift. A zero rd is not possible. 
Name: decode_possible_symbol; Comment: Render the symbol name whose value is ADDR + BASE or the adddress itself if there is no symbol. If BASE is non zero, then the a PC relative adddress is assumend (ie BASE is the value in the PC. 
Name: opr_emit_disassembly; Comment: Emit the disassembled text for OPR 
Name: x_opr_n_bytes; Comment: Return the number of bytes in a OPR operand, including the XB postbyte. It does not include any preceeding opcodes. 
Name: imm1_decode; Comment: An eight bit immediate operand. 
Name: reg_s_imm; Comment: Special case of LD and CMP with register S and IMM operand 
Name: reg_s_opr; Comment: Special case of LD, CMP and ST with register S and OPR operand 
Name: rel_15_7; Comment: PC Relative offsets of size 15 or 7 bits 
Name: decode_rel_15_7; Comment: PC Relative offsets of size 15 or 7 bits 
Name: decode_operation; Comment: Decode the next instruction at MRA, according to OPC. The operation to be performed is returned. The number of operands, will be placed in N_OPERANDS. The operands themselved into OPERANDS. 
Name: disassemble_init_s390; Comment: Set up index table for first opcode byte. 
Name: s390_print_insn_with_opcode; Comment: Print the S390 instruction in BUFFER, assuming that it matches the given OPCODE. 
Name: opcode_mask_more_specific; Comment: Check whether opcode A's mask is more specific than that of B. 
Name: print_insn_s390; Comment: Print a S390 instruction. 
Name: insertOpcode; Comment: `insertOpcode': insert an op_struct into sorted opcode array. 
Name: insertExpandedMnemonic; Comment: As with insertOpcode instructions are added to the sorted opcode array. Additionally mnemonics containing the '*<number>' tag are expanded to the set of conditional instructions described by s390_cond_extensions with the tag replaced by the respective mnemonic extensions. 
Name: print_insn_score48; Comment: Print one instruction from PC on INFO->STREAM. Return the size of the instruction. 
Name: print_insn_score32; Comment: Print one instruction from PC on INFO->STREAM. Return the size of the instruction. 
Name: print_insn_score16; Comment: Print one instruction from PC on INFO->STREAM. Return the size of the instruction. 
Name: s3_print_insn; Comment: NOTE: There are no checks in these routines that the relevant number of data bytes exist. 
Name: s7_print_insn; Comment: NOTE: There are no checks in these routines that the relevant number of data bytes exist. 
Name: print_insn_ddt; Comment: Print a double data transfer insn. INSN is just the lower three nibbles of the insn, i.e. field a and the bit that indicates if a parallel processing insn follows. 
Name: print_insn_sh; Comment: FIXME mvs: movx insns print as ".word 0x%03x", insn & 0xfff (ie. the upper nibble is missing). 
Name: is_delayed_branch; Comment: Nonzero if INSN is the opcode for a delayed branch. 
Name: compute_arch_mask; Comment: Given BFD mach number, return a mask of SPARC_OPCODE_ARCH_FOO values. 
Name: compare_opcodes; Comment: Compare opcodes A and B. 
Name: build_hash_table; Comment: Build a hash table from the opcode table. OPCODE_TABLE is a sorted list of pointers into the opcode table. 
Name: print_insn_sparc; Comment: Print one instruction from MEMADDR on INFO->STREAM. We suffix the instruction with a comment that gives the absolute address involved, as well as its symbolic form, if the instruction is preceded by a findable `sethi' and it either adds an immediate displacement to that register, or it is an `add' or `or' instruction on that register. 
Name: sparc_opcode_lookup_arch; Comment: Given NAME, return it's architecture entry. 
Name: get_index_for_opcode; Comment: Determine the instruction from the 10 least significant bits. 
Name: print_insn_spu; Comment: Print a Spu instruction. 
Name: tic4x_print_ftoa; Comment: FIXME: make the floating point stuff not rely on host floating point arithmetic. 
Name: tic4x_disassemble; Comment: Disassemble the instruction in 'instruction'. 'pc' should be the address of this instruction, it will be used to print the target address if this is a relative jump or call the disassembled instruction is written to 'info'. The function returns the length of this instruction in words. 
Name: print_insn_tic4x; Comment: The entry point from objdump and gdb. 
Name: tic54x_get_insn; Comment: always returns 1 (whether an insn template was found) since we provide an "unknown instruction" template 
Name: tic6x_field_from_fmt; Comment: If instruction format FMT has a field FIELD, return a pointer to the description of that field; otherwise return NULL. 
Name: tic6x_field_width; Comment: Extract the field width. 
Name: tic6x_field_bits; Comment: Extract the bits corresponding to FIELD from OPCODE. 
Name: tic6x_extract_32; Comment: Extract a 32-bit value read from the instruction stream. 
Name: tic6x_extract_16; Comment: Extract a 16-bit value read from the instruction stream. 
Name: tic6x_check_fetch_packet_header; Comment: FP points to a fetch packet. Return whether it is header-based; if it is, fill in HEADER. 
Name: print_insn_tic6x; Comment: Disassemble the instruction at ADDR and print it using INFO->FPRINTF_FUNC and INFO->STREAM, returning the number of bytes consumed. 
Name: find_opcode; Comment: Given a set of bundle bits and the lookup FSM for a specific pipe, returns which instruction the bundle contains in that pipe. 
Name: find_opcode; Comment: Given a set of bundle bits and a specific pipe, returns which instruction the bundle contains in that pipe. 
Name: parse_disassembler_options; Comment: Parse the VAX specific disassembler options. These contain function entry addresses, which can be useful to disassemble ROM images, since there's no symbol table. Returns TRUE upon success, FALSE otherwise. 
Name: free_entry_array; Comment: Free memory allocated to our entry array. 
Name: is_function_entry; Comment: Check if the given address is a known function entry point. This is the case if there is a symbol of the function type at this address. We also check for synthetic symbols as these are used for PLT entries (weak undefined symbols may not have the function type set). Finally the address may have been forced to be treated as an entry point. The latter helps in disassembling ROM images, because there's no symbol table at all. Forced entry points can be given by supplying several -M options to objdump: -M entry:0xffbb7730. 
Name: is_plt_tail; Comment: Check if the given address is the last longword of a PLT entry. This longword is data and depending on the value it may interfere with disassembly of further PLT entries. We make use of the fact PLT symbols are marked BSF_SYNTHETIC. 
Name: print_insn_vax; Comment: Print the vax instruction at address MEMADDR in debugged memory, on INFO->STREAM. Returns length of the instruction, in bytes. 
Name: disassem_class0; Comment: Disassemble non-storage relative instructions. 
Name: disassem_class1; Comment: Disassemble non-storage register class instructions. 
Name: disassem_class2; Comment: Disassemble storage immediate class instructions. 
Name: disassem_class3; Comment: Disassemble storage register class instructions. 
Name: print_insn_visium; Comment: Print the visium instruction at address addr in debugged memory, on info->stream. Return length of the instruction, in bytes. 
Name: parse_wasm32_disassembler_options; Comment: Parse the disassembler options in OPTS and initialize INFO. 
Name: wasm32_symbol_is_valid; Comment: Check whether SYM is valid. Special-case absolute symbols, which are unhelpful to print, and arguments to a "call" insn, which we want to be in a section matching a given prefix. 
Name: disassemble_init_wasm32; Comment: Initialize the disassembler structures for INFO. 
Name: wasm_read_leb128; Comment: Read an LEB128-encoded integer from INFO at address PC, reading one byte at a time. Set ERROR_RETURN if no complete integer could be read, LENGTH_RETURN to the number oof bytes read (including bytes in incomplete numbers). SIGN means interpret the number as SLEB128. Unfortunately, this is a duplicate of wasm-module.c's wasm_read_leb128 (). 
Name: read_f32; Comment: Read a 32-bit IEEE float from PC using INFO, convert it to a host double, and store it at VALUE. 
Name: read_f64; Comment: Read a 64-bit IEEE float from PC using INFO, convert it to a host double, and store it at VALUE. 
Name: print_insn_wasm32; Comment: Main disassembly routine. Disassemble insn at PC using INFO. 
Name: print_wasm32_disassembler_options; Comment: Print valid disassembler options to STREAM. 
Name: parse_mem8; Comment: The machine-independent code doesn't know how to disambiguate mov (foo),r3 and mov (r2),r3 where 'foo' is a label. This helps it out. 
Name: parse_small_immediate; Comment: For the add and subtract instructions, there are two immediate forms, one for small operands and one for large ones. We want to use the small one when possible, but we do not want to generate relocs of the small size. This is somewhat tricky. 
Name: parse_immediate16; Comment: Literal scan be either a normal literal, a @hi() or @lo relocation. 
Name: xstormy16_cgen_parse_operand; Comment: Main entry point for operand parsing. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. 
Name: xstormy16_cgen_build_insn_regex; Comment: Regex construction routine. This translates an opcode syntax string into a regex string, by replacing any non-character syntax element (such as an opcode) with the pattern '.*' It then compiles the regex and stores it in the opcode, for later use by xstormy16_cgen_assemble_insn Returns NULL for success, an error message for failure. 
Name: xstormy16_cgen_assemble_insn; Comment: Main entry point. This routine is called for each instruction to be assembled. STR points to the insn to be assembled. We assume all necessary tables have been initialized. The assembled instruction, less any fixups, is stored in BUF. Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value still needs to be converted to target byte order, otherwise BUF is an array of bytes in target byte order. The result is a pointer to the insn's entry in the opcode table, or NULL if an error occured (an error message will have already been printed). Note that when processing (non-alias) macro-insns, this function recurses. ??? It's possible to make this cpu-independent. One would have to deal with a few minor things. At this point in time doing so would be more of a curiosity than useful [for example this file isn't _that_ big], but keeping the possibility in mind helps keep the design clean. 
Name: lookup_mach_via_bfd_name; Comment: Subroutine of xstormy16_cgen_cpu_open to look up a mach via its bfd name. 
Name: build_hw_table; Comment: Subroutine of xstormy16_cgen_cpu_open to build the hardware table. 
Name: build_ifield_table; Comment: Subroutine of xstormy16_cgen_cpu_open to build the hardware table. 
Name: build_operand_table; Comment: Subroutine of xstormy16_cgen_cpu_open to build the hardware table. 
Name: build_insn_table; Comment: Subroutine of xstormy16_cgen_cpu_open to build the hardware table. ??? This could leave out insns not supported by the specified mach/isa, but that would cause errors like "foo only supported by bar" to become "unknown insn", so for now we include all insns and require the app to do the checking later. ??? On the other hand, parsing of such insns may require their hardware or operand elements to be in the table [which they mightn't be]. 
Name: xstormy16_cgen_rebuild_tables; Comment: Subroutine of xstormy16_cgen_cpu_open to rebuild the tables. 
Name: xstormy16_cgen_cpu_open; Comment: Initialize a cpu table and return a descriptor. It's much like opening a file, and must be the first function called. The arguments are a set of (type/value) pairs, terminated with CGEN_CPU_OPEN_END. Currently supported values: CGEN_CPU_OPEN_ISAS: bitmap of values in enum isa_attr CGEN_CPU_OPEN_MACHS: bitmap of values in enum mach_attr CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name CGEN_CPU_OPEN_ENDIAN: specify endian choice CGEN_CPU_OPEN_INSN_ENDIAN: specify instruction endian choice CGEN_CPU_OPEN_END: terminates arguments ??? Simultaneous multiple isas might not make sense, but it's not (yet) precluded. 
Name: xstormy16_cgen_cpu_open_1; Comment: Cover fn to xstormy16_cgen_cpu_open to handle the simple case of 1 isa, 1 mach. MACH_NAME is the bfd name of the mach. 
Name: xstormy16_cgen_cpu_close; Comment: Close a cpu table. ??? This can live in a machine independent file, but there's currently no place to put this file (there's no libcgen). libopcodes is the wrong place as some simulator ports use this but they don't use libopcodes. 
Name: xstormy16_cgen_print_operand; Comment: Main entry point for printing operands. XINFO is a `void *' and not a `disassemble_info *' to not put a requirement of dis-asm.h on cgen.h. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: xstormy16_cgen_insert_operand; Comment: Main entry point for operand insertion. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `parse_insn_normal', but keeping it separate makes clear the interface between `parse_insn_normal' and each of the handlers. It's also needed by GAS to insert operands that couldn't be resolved during parsing. 
Name: xstormy16_cgen_extract_operand; Comment: Main entry point for operand extraction. The result is <= 0 for error, >0 for success. ??? Actual values aren't well defined right now. This function is basically just a big switch statement. Earlier versions used tables to look up the function to use, but - if the table contains both assembler and disassembler functions then the disassembler contains much of the assembler and vice-versa, - there's a lot of inlining possibilities as things grow, - using a switch statement avoids the function call overhead. This function could be moved into `print_insn_normal', but keeping it separate makes clear the interface between `print_insn_normal' and each of the handlers. 
Name: xstormy16_cgen_get_int_operand; Comment: Getting values from cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they return. TODO: floating point, inlining support, remove cases where result type not appropriate. 
Name: xstormy16_cgen_set_int_operand; Comment: Stuffing values in cgen_fields is handled by a collection of functions. They are distinguished by the type of the VALUE argument they accept. TODO: floating point, inlining support, remove cases where argument type not appropriate. 
Name: xstormy16_cgen_init_ibld_table; Comment: Function to call before using the instruction builder tables. 
Name: xstormy16_cgen_init_opcode_table; Comment: Function to call before using the operand instance table. This plugs the opcode entries and macro instructions into the cpu table. 
Name: xtensa_instruction_fits; Comment: Check whether an instruction crosses an instruction block boundary (according to property tables). If it does, return 0 (doesn't fit), else return 1. 
Name: print_insn_xtensa; Comment: Print the Xtensa instruction at address MEMADDR on info->stream. Returns length of the instruction in bytes. 
Name: print_type; Comment: #define WORK_TYPE
Name: make_crc_table; Comment: Generate tables for a byte-wise 32-bit CRC calculation on the polynomial: x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1. Polynomials over GF(2) are represented in binary, one bit per coefficient, with the lowest powers in the most significant bit. Then adding polynomials is just exclusive-or, and multiplying a polynomial by x is a right shift by one. If we call the above polynomial p, and represent a byte as the polynomial q, also with the lowest power in the most significant bit (so the byte 0xb1 is the polynomial x^7+x^3+x^2+1), then the CRC is (q*x^32) mod p, where a mod b means the remainder after dividing a by b. This calculation is done using the shift-register method of multiplying and taking the remainder. The register is initialized to zero, and for each incoming bit, x^32 is added mod p to the register if the bit is a one (where x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by x (which is shifting right by one and adding x^32 mod p if the bit shifted out is a one). We start with the highest power (least significant bit) of q and repeat for all eight bits of q. The table is simply the CRC of all possible eight bit values. This is all the information needed to generate CRCs on data a byte at a time for all combinations of CRC register values and incoming bytes. 
Name: main; Comment: Actually do the deed. 
Name: get_crc_table; Comment: =========================================================================This function can be used by asm versions of crc32(), and to force the generation of the CRC tables in a threaded application. 
Name: gz_intmax; Comment: portably return maximum value for an int (when limits.h presumed not available) -- we need to do this to cover cases where 2's complement not used, since C standard permits 1's complement and sign-bit representations, otherwise we could just use ((unsigned)-1) >> 1 
Name: gzvprintf; Comment: -- see zlib.h -- 
Name: makefixed; Comment: None } Then that can be linked with zlib built with MAKEFIXED defined and run: a.out > inffixed.h 
Name: tr_static_init; Comment: ===========================================================================Initialize the various 'constant' tables. 
Name: zcalloc; Comment: This table is used to remember the original form of pointersto large buffers (64K). Such pointers are normalized with a zero offset. Since MSDOS is not a preemptive multitasking OS, this table is not protected from concurrent access. This hack doesn't work anyway on a protected system like OS/2. Use Microsoft C instead. 
Name: bits; Comment: Return need bits from the input stream. This always leaves less than eight bits in the buffer. bits() works properly for need == 0. Format notes: - Bits are stored in bytes from the least significant bit to the most significant bit. Therefore bits are dropped from the bottom of the bit buffer, using shift right, and new bytes are appended to the top of the bit buffer, using shift left. 
Name: decode; Comment: Decode a code from the stream s using huffman table h. Return the symbol or a negative value if there is an error. If all of the lengths are zero, i.e. an empty code, or if the code is incomplete and an invalid code is received, then -9 is returned after reading MAXBITS bits. Format notes: - The codes as stored in the compressed data are bit-reversed relative to a simple integer ordering of codes of the same lengths. Hence below the bits are pulled from the compressed data one at a time and used to build the code value reversed from what is in the stream in order to permit simple integer comparisons for decoding. - The first code for the shortest length is all ones. Subsequent codes of the same length are simply integer decrements of the previous code. When moving up a length, a one bit is appended to the code. For a complete code, the last code of the longest length will be all zeros. To support this ordering, the bits pulled during decoding are inverted to apply the more "natural" ordering starting with all zeros and incrementing. 
Name: construct; Comment: Given a list of repeated code lengths rep[0..n-1], where each byte is a count (high four bits + 1) and a code length (low four bits), generate the list of code lengths. This compaction reduces the size of the object code. Then given the list of code lengths length[0..n-1] representing a canonical Huffman code for n symbols, construct the tables required to decode those codes. Those tables are the number of codes of each length, and the symbols sorted by length, retaining their original order within each length. The return value is zero for a complete code set, negative for an over- subscribed code set, and positive for an incomplete code set. The tables can be used if the return value is zero or positive, but they cannot be used if the return value is negative. If the return value is zero, it is not possible for decode() using that table to return an error--any stream of enough bits will resolve to a symbol. If the return value is positive, then it is possible for decode() using that table to return an error for received codes past the end of the incomplete lengths. 
Name: decomp; Comment: Decode PKWare Compression Library stream. Format notes: - First byte is 0 if literals are uncoded or 1 if they are coded. Second byte is 4, 5, or 6 for the number of extra bits in the distance code. This is the base-2 logarithm of the dictionary size minus six. - Compressed data is a combination of literals and length/distance pairs terminated by an end code. Literals are either Huffman coded or uncoded bytes. A length/distance pair is a coded length followed by a coded distance to represent a string that occurs earlier in the uncompressed data that occurs again at the current location. - A bit preceding a literal or length/distance pair indicates which comes next, 0 for literals, 1 for length/distance. - If literals are uncoded, then the next eight bits are the literal, in the normal bit order in the stream, i.e. no bit-reversal is needed. Similarly, no bit reversal is needed for either the length extra bits or the distance extra bits. - Literal bytes are simply written to the output. A length/distance pair is an instruction to copy previously uncompressed bytes to the output. The copy is from distance bytes back in the output stream, copying for length bytes. - Distances pointing before the beginning of the output data are not permitted. - Overlapped copies, where the length is greater than the distance, are allowed and common. For example, a distance of one and a length of 518 simply copies the last byte 518 times. A distance of four and a length of twelve copies the last four bytes three times. A simple forward copy ignoring whether the length is greater than the distance or not implements this correctly. 
Name: blast; Comment: See comments in blast.h 
Name: main; Comment: Decompress a PKWare Compression Library stream from stdin to stdout 
Name: getFileCrc; Comment: calculate the CRC32 of a file, because to encrypt a file, we need known the CRC32 of the file before 
Name: strcmpcasenosensitive_internal; Comment: My own strcmpi / strcasecmp 
Name: unzStringFileNameCompare; Comment: Compare two filename (fileName1,fileName2). If iCaseSenisivity = 1, comparision is case sensitivity (like strcmp) If iCaseSenisivity = 2, comparision is not case sensitivity (like strcmpi or strcasecmp) If iCaseSenisivity = 0, case sensitivity is defaut of your operating system (like 1 on Unix, 2 on Windows) 
Name: unzOpenInternal; Comment: Open a Zip file. path contain the full pathname (by example, on a Windows NT computer "c:__test__zlib114.zip" or on an Unix computer "zlib/zlib114.zip". If the zipfile cannot be opened (file doesn't exist or in not valid), the return value is NULL. Else, the return value is a unzFile Handle, usable with other function of this unzip package. 
Name: unzClose; Comment: Close a ZipFile opened with unzOpen. If there is files inside the .Zip opened with unzOpenCurrentFile (see later), these files MUST be closed with unzCloseCurrentFile before call unzClose. return UNZ_OK if there is no problem. 
Name: unzGetGlobalInfo64; Comment: Write info about the ZipFile in the *pglobal_info structure. No preparation of the structure is needed return UNZ_OK if there is no problem. 
Name: unz64local_DosDateToTmuDate; Comment: Translate date/time from Dos format to tm_unz (readable more easilty) 
Name: unzGetCurrentFileInfo64; Comment: Write info about the ZipFile in the *pglobal_info structure. No preparation of the structure is needed return UNZ_OK if there is no problem. 
Name: unzGoToFirstFile; Comment: Set the current file of the zipfile to the first file. return UNZ_OK if there is no problem 
Name: unzGoToNextFile; Comment: Set the current file of the zipfile to the next file. return UNZ_OK if there is no problem return UNZ_END_OF_LIST_OF_FILE if the actual file was the latest. 
Name: unzLocateFile; Comment: Try locate the file szFileName in the zipfile. For the iCaseSensitivity signification, see unzStringFileNameCompare return value : UNZ_OK if the file is found. It becomes the current file. UNZ_END_OF_LIST_OF_FILE if the file is not found 
Name: unz64local_CheckCurrentFileCoherencyHeader; Comment: Read the local header of the current zipfile Check the coherency of the local header and info in the end of central directory about this file store in *piSizeVar the size of extra info in local header (filename and size of extra field data) 
Name: unzOpenCurrentFile3; Comment: Open for reading data the current file in the zipfile. If there is no error and the file is opened, the return value is UNZ_OK. 
Name: unzGetCurrentFileZStreamPos64; Comment: * Addition for GDAL : START 
Name: unzReadCurrentFile; Comment: Read bytes from the current file. buf contain buffer where data must be copied len the size of buf. return the number of byte copied if somes bytes are copied return 0 if the end of file was reached return <0 with error code if there is an error (UNZ_ERRNO for IO error, or zLib error for uncompress error) 
Name: unztell; Comment: Give the current position in uncompressed data 
Name: unzeof; Comment: return 1 if the end of file was reached, 0 elsewhere 
Name: unzGetLocalExtrafield; Comment: Read extra field from the current file (opened by unzOpenCurrentFile) This is the local-header version of the extra field (sometimes, there is more info in the local-header version than in the central-header) if buf==NULL, it return the size of the local extra field that can be read if buf!=NULL, len is the size of the buffer, the extra header is copied in buf. the return value is the number of bytes copied in buf, or (if <0) the error code 
Name: unzCloseCurrentFile; Comment: Close the file in zip opened with unzOpenCurrentFile Return UNZ_CRCERROR if all the file was read but the CRC is not good 
Name: unzGetGlobalComment; Comment: Get the global comment string of the ZipFile, in the szComment buffer. uSizeBuf is the size of the szComment buffer. return the number of byte copied or an error code <0 
Name: unzGetOffset64; Comment: Additions by RX '2004 
Name: zip64local_TmzDateToDosDate; Comment: **************************************************************************
Name: zipOpen3; Comment: **********************************************************
Name: zipOpenNewFileInZip4_64; Comment: NOTE. When writing RAW the ZIP64 extended information in extrafield_local and extrafield_global needs to be stripped before calling this function it can be done with zipRemoveExtraInfoBlock It is not done here because then we need to realloc a new buffer since parameters are 'const' and I want to minimize unnecessary allocations. 
Name: stored; Comment: Process a stored block. Format notes: - After the two-bit stored block type (00), the stored block length and stored bytes are byte-aligned for fast copying. Therefore any leftover bits in the byte that has the last bit of the type, as many as seven, are discarded. The value of the discarded bits are not defined and should not be checked against any expectation. - The second inverted copy of the stored block length does not have to be checked, but it's probably a good idea to do so anyway. - A stored block can have zero length. This is sometimes used to byte-align subsets of the compressed data for random access or partial recovery. 
Name: construct; Comment: Given the list of code lengths length[0..n-1] representing a canonical Huffman code for n symbols, construct the tables required to decode those codes. Those tables are the number of codes of each length, and the symbols sorted by length, retaining their original order within each length. The return value is zero for a complete code set, negative for an over- subscribed code set, and positive for an incomplete code set. The tables can be used if the return value is zero or positive, but they cannot be used if the return value is negative. If the return value is zero, it is not possible for decode() using that table to return an error--any stream of enough bits will resolve to a symbol. If the return value is positive, then it is possible for decode() using that table to return an error for received codes past the end of the incomplete lengths. Not used by decode(), but used for error checking, h->count[0] is the number of the n symbols not in the code. So n - h->count[0] is the number of codes. This is useful for checking for incomplete codes that have more than one symbol, which is an error in a dynamic block. Assumption: for all i in 0..n-1, 0 <= length[i] <= MAXBITS This is assured by the construction of the length arrays in dynamic() and fixed() and is not verified by construct(). Format notes: - Permitted and expected examples of incomplete codes are one of the fixed codes and any code with a single symbol which in deflate is coded as one bit instead of zero bits. See the format notes for fixed() and dynamic(). - Within a given code length, the symbols are kept in ascending order for the code bits definition. 
Name: codes; Comment: Decode literal/length and distance codes until an end-of-block code. Format notes: - Compressed data that is after the block type if fixed or after the code description if dynamic is a combination of literals and length/distance pairs terminated by and end-of-block code. Literals are simply Huffman coded bytes. A length/distance pair is a coded length followed by a coded distance to represent a string that occurs earlier in the uncompressed data that occurs again at the current location. - Literals, lengths, and the end-of-block code are combined into a single code of up to 286 symbols. They are 256 literals (0..255), 29 length symbols (257..285), and the end-of-block symbol (256). - There are 256 possible lengths (3..258), and so 29 symbols are not enough to represent all of those. Lengths 3..10 and 258 are in fact represented by just a length symbol. Lengths 11..257 are represented as a symbol and some number of extra bits that are added as an integer to the base length of the length symbol. The number of extra bits is determined by the base length symbol. These are in the static arrays below, lens[] for the base lengths and lext[] for the corresponding number of extra bits. - The reason that 258 gets its own symbol is that the longest length is used often in highly redundant files. Note that 258 can also be coded as the base value 227 plus the maximum extra value of 31. While a good deflate should never do this, it is not an error, and should be decoded properly. - If a length is decoded, including its extra bits if any, then it is followed a distance code. There are up to 30 distance symbols. Again there are many more possible distances (1..32768), so extra bits are added to a base value represented by the symbol. The distances 1..4 get their own symbol, but the rest require extra bits. The base distances and corresponding number of extra bits are below in the static arrays dist[] and dext[]. - Literal bytes are simply written to the output. A length/distance pair is an instruction to copy previously uncompressed bytes to the output. The copy is from distance bytes back in the output stream, copying for length bytes. - Distances pointing before the beginning of the output data are not permitted. - Overlapped copies, where the length is greater than the distance, are allowed and common. For example, a distance of one and a length of 258 simply copies the last byte 258 times. A distance of four and a length of twelve copies the last four bytes three times. A simple forward copy ignoring whether the length is greater than the distance or not implements this correctly. You should not use memcpy() since its behavior is not defined for overlapped arrays. You should not use memmove() or bcopy() since though their behavior -is- defined for overlapping arrays, it is defined to do the wrong thing in this case. 
Name: fixed; Comment: Process a fixed codes block. Format notes: - This block type can be useful for compressing small amounts of data for which the size of the code descriptions in a dynamic block exceeds the benefit of custom codes for that block. For fixed codes, no bits are spent on code descriptions. Instead the code lengths for literal/length codes and distance codes are fixed. The specific lengths for each symbol can be seen in the "for" loops below. - The literal/length code is complete, but has two symbols that are invalid and should result in an error if received. This cannot be implemented simply as an incomplete code since those two symbols are in the "middle" of the code. They are eight bits long and the longest literal/length code is nine bits. Therefore the code must be constructed with those symbols, and the invalid symbols must be detected after decoding. - The fixed distance codes also have two invalid symbols that should result in an error if received. Since all of the distance codes are the same length, this can be implemented as an incomplete code. Then the invalid codes are detected while decoding. 
Name: dynamic; Comment: Process a dynamic codes block. Format notes: - A dynamic block starts with a description of the literal/length and distance codes for that block. New dynamic blocks allow the compressor to rapidly adapt to changing data with new codes optimized for that data. - The codes used by the deflate format are "canonical", which means that the actual bits of the codes are generated in an unambiguous way simply from the number of bits in each code. Therefore the code descriptions are simply a list of code lengths for each symbol. - The code lengths are stored in order for the symbols, so lengths are provided for each of the literal/length symbols, and for each of the distance symbols. - If a symbol is not used in the block, this is represented by a zero as as the code length. This does not mean a zero-length code, but rather that no code should be created for this symbol. There is no way in the deflate format to represent a zero-length code. - The maximum number of bits in a code is 15, so the possible lengths for any code are 1..15. - The fact that a length of zero is not permitted for a code has an interesting consequence. Normally if only one symbol is used for a given code, then in fact that code could be represented with zero bits. However in deflate, that code has to be at least one bit. So for example, if only a single distance base symbol appears in a block, then it will be represented by a single code of length one, in particular one 0 bit. This is an incomplete code, since if a 1 bit is received, it has no meaning, and should result in an error. So incomplete distance codes of one symbol should be permitted, and the receipt of invalid codes should be handled. - It is also possible to have a single literal/length code, but that code must be the end-of-block code, since every dynamic block has one. This is not the most efficient way to create an empty block (an empty fixed block is fewer bits), but it is allowed by the format. So incomplete literal/length codes of one symbol should also be permitted. - If there are only literal codes and no lengths, then there are no distance codes. This is represented by one distance code with zero bits. - The list of up to 286 length/literal lengths and up to 30 distance lengths are themselves compressed using Huffman codes and run-length encoding. In the list of code lengths, a 0 symbol means no code, a 1..15 symbol means that length, and the symbols 16, 17, and 18 are run-length instructions. Each of 16, 17, and 18 are follwed by extra bits to define the length of the run. 16 copies the last length 3 to 6 times. 17 represents 3 to 10 zero lengths, and 18 represents 11 to 138 zero lengths. Unused symbols are common, hence the special coding for zero lengths. - The symbols for 0..18 are Huffman coded, and so that code must be described first. This is simply a sequence of up to 19 three-bit values representing no code (0) or the code length for that symbol (1..7). - A dynamic block starts with three fixed-size counts from which is computed the number of literal/length code lengths, the number of distance code lengths, and the number of code length code lengths (ok, you come up with a better name!) in the code descriptions. For the literal/length and distance codes, lengths after those provided are considered zero, i.e. no code. The code length code lengths are received in a permuted order (see the order[] array below) to make a short code length code length list more likely. As it turns out, very short and very long codes are less likely to be seen in a dynamic code description, hence what may appear initially to be a peculiar ordering. - Given the number of literal/length code lengths (nlen) and distance code lengths (ndist), then they are treated as one long list of nlen + ndist code lengths. Therefore run-length coding can and often does cross the boundary between the two sets of lengths. - So to summarize, the code description at the start of a dynamic block is three counts for the number of code lengths for the literal/length codes, the distance codes, and the code length codes. This is followed by the code length code lengths, three bits each. This is used to construct the code length code which is used to read the remainder of the lengths. Then the literal/length code lengths and distance lengths are read as a single set of lengths using the code length codes. Codes are constructed from the resulting two sets of lengths, and then finally you can start decoding actual compressed data in the block. - For reference, a "typical" size for the code description in a dynamic block is around 80 bytes. 
Name: bythirds; Comment: Return size times approximately the cube root of 2, keeping the result as 1, 3, or 5 times a power of 2 -- the result is always > size, until the result is the maximum value of an unsigned long, where it remains. This is useful to keep reallocations less than ~33% over the actual data. 
Name: load; Comment: Read the input file *name, or stdin if name is NULL, into allocated memory. Reallocate to larger buffers until the entire file is read in. Return a pointer to the allocated data, or NULL if there was a memory allocation failure. *len is the number of bytes of data read from the input file (even if load() returns NULL). If the input file was empty or could not be opened or read, *len is zero. 
Name: TGZfname; Comment: or NULL if it does not exist 
Name: TGZnotfound; Comment: error message for the filename 
Name: getoct; Comment: on error return -1 
Name: strtime; Comment: use the "YYYY/MM/DD hh:mm:ss" format 
Name: setfiletime; Comment: set file time 
Name: push_attr; Comment: push file attributes 
Name: restore_attr; Comment: restore file attributes 
Name: ExprMatch; Comment: match regular expression 
Name: makedir; Comment: 0 on error 
Name: tar; Comment: tar file list or extract 
Name: help; Comment: ============================================================ 
Name: string_clear; Comment: Clear a string_t.
Name: string_init; Comment: Initialize a string_t.
Name: string_free; Comment: Release the allocation of a string_t.
Name: string_printf; Comment: Each call appends to s. The allocated space for s is increased as needed.
Name: cleanup; Comment: Free allocated space in globals.
Name: count; Comment: record of previous results in num to prevent repeating the same calculation.
Name: been_here; Comment: as needed to allow setting the (mem,rem) bit.
Name: examine; Comment: the current sub-table is rem.
Name: enough; Comment: require that maximum.
Name: main; Comment: code, use "enough 30 6".
Name: quit; Comment: print nastygram and leave 
Name: partcompress; Comment: compress from file to def until provided buffer is full or end of input reached; return last deflate() return value, or Z_ERRNO if there was read error on the file 
Name: recompress; Comment: None return last deflate() return value, or Z_MEM_ERROR if inflate() was not able to allocate enough memory when it needed to 
Name: main; Comment: compress from stdin to fixed-size block on stdout 
Name: in; Comment: Load input buffer, assumed to be empty, and return bytes loaded and a pointer to them. read() is called until the buffer is full, or until it returns end-of-file or error. Return 0 on error. 
Name: out; Comment: Write output buffer and update the CRC-32 and total bytes written. write() is called until all of the output is written or an error is encountered. On success out() returns 0. For a write failure, out() returns 1. If the output file descriptor is -1, then nothing is written. 
Name: lunpipe; Comment: Decompress a compress (LZW) file from indp to outfile. The compress magic header (two bytes) has already been read and verified. There are have bytes of buffered input at next. strm is used for passing error information back to gunpipe(). lunpipe() will return Z_OK on success, Z_BUF_ERROR for an unexpected end of file, read error, or write error (a write error indicated by strm->next_in not equal to Z_NULL), or Z_DATA_ERROR for invalid input. 
Name: gunpipe; Comment: Decompress a gzip file from infile to outfile. strm is assumed to have been successfully initialized with inflateBackInit(). The input file may consist of a series of gzip streams, in which case all of them will be decompressed to the output file. If outfile is -1, then the gzip stream(s) integrity is checked and nothing is written. The return value is a zlib error code: Z_MEM_ERROR if out of memory, Z_DATA_ERROR if the header or the compressed data is invalid, or if the trailer CRC-32 check or length doesn't match, Z_BUF_ERROR if the input ends prematurely or a write error occurs, or Z_ERRNO if junk (not a another gzip stream) follows a valid gzip stream. 
Name: copymeta; Comment: Copy file attributes, from -> to, as best we can. This is best effort, so no errors are reported. The mode bits, including suid, sgid, and the sticky bit are copied (if allowed), the owner's user id and group id are copied (again if allowed), and the access and modify times are copied. 
Name: gunzip; Comment: Decompress the file inname to the file outnname, of if test is true, just decompress without writing and check the gzip trailer for integrity. If inname is NULL or an empty string, read from stdin. If outname is NULL or an empty string, write to stdout. strm is a pre-initialized inflateBack structure. When appropriate, copy the file attributes from inname to outname. gunzip() returns 1 if there is an out-of-memory error or an unexpected return code from gunpipe(). Otherwise it returns 0. 
Name: main; Comment: Process the gun command line arguments. See the command syntax near the beginning of this source file. 
Name: bye; Comment: print an error message and terminate with extreme prejudice 
Name: gcd; Comment: return the greatest common divisor of a and b using Euclid's algorithm, modified to be fast when one argument much greater than the other, and coded to avoid unnecessary swapping 
Name: rotate; Comment: rotate list[0..len-1] left by rot positions, in place 
Name: readin; Comment: reload buffer 
Name: readmore; Comment: read from file in, exit if end-of-file 
Name: skip; Comment: skip over n bytes of in 
Name: read4; Comment: read a four-byte unsigned integer, little-endian, from in 
Name: gzheader; Comment: skip over gzip header 
Name: gzscan; Comment: decompress gzip file "name", return strm with a deflate stream ready to continue compression of the data in the gzip file, and return a file descriptor pointing to where to write the compressed data -- the deflate stream is initialized to compress using level "level" 
Name: gztack; Comment: append file "name" to gzip file gd using deflate stream strm -- if last is true, then finish off the deflate stream at the end 
Name: main; Comment: process the compression level option if present, scan the gzip file, and append the specified files, or append the data from stdin if no other file names are provided on the command line -- the gzip file must be writable and seekable 
Name: bail; Comment: exit with an error (return a value to allow use in an expression) 
Name: bclose; Comment: close a buffered file and free allocated memory 
Name: bopen; Comment: open a buffered file for input, return a pointer to type bin, or NULL on failure 
Name: bload; Comment: load buffer from file, return -1 on read error, 0 or 1 on success, with 1 indicating that end-of-file was reached 
Name: bget4; Comment: get a four-byte little-endian unsigned integer from file 
Name: bskip; Comment: skip bytes in file 
Name: gzhead; Comment: skip the gzip header from file in 
Name: put4; Comment: write a four-byte little-endian unsigned integer to out 
Name: zpull; Comment: Load up zlib stream from buffered input, bail if end of file 
Name: gzinit; Comment: Write header for gzip file to out and initialize trailer. 
Name: gzcopy; Comment: Copy the compressed data from name, zeroing the last block bit of the last block if clr is true, and adding empty blocks as needed to get to a byte boundary. If clr is false, then the last block becomes the last block of the output, and the gzip trailer is written. crc and tot maintains the crc and length (modulo 2^32) of the output for the trailer. The resulting gzip file is written to out. gzinit() must be called before the first call of gzcopy() to write the gzip header and to initialize crc and tot. 
Name: main; Comment: join the gzip files on the command line, write result to stdout 
Name: log_lock; Comment: Exclusively create foo.lock in order to negotiate exclusive access to the foo.* files. If the modify time of an existing lock file is greater than PATIENCE seconds in the past, then consider the lock file to have been abandoned, delete it, and try the exclusive create again. Save the lock file modify time for verification of ownership. Return 0 on success, or -1 on failure, usually due to an access restriction or invalid path. Note that if stat() or unlink() fails, it may be due to another process noticing the abandoned lock file a smidge sooner and deleting it, so those are not flagged as an error. 
Name: log_touch; Comment: Update the modify time of the lock file to now, in order to prevent another task from thinking that the lock is stale. Save the lock file modify time for verification of ownership. 
Name: log_check; Comment: Check the log file modify time against what is expected. Return true if this is not our lock. If it is our lock, touch it to keep it. 
Name: log_unlock; Comment: Unlock a previously acquired lock, but only if it's ours. 
Name: log_head; Comment: Check the gzip header and read in the extra field, filling in the values in the log structure. Return op on success or -1 if the gzip header was not as expected. op is the current operation in progress last written to the extra field. This assumes that the gzip file has already been opened, with the file descriptor log->fd. 
Name: log_mark; Comment: Write over the extra field contents, marking the operation as op. Use fsync to assure that the device is written to, and in the requested order. This operation, and only this operation, is assumed to be atomic in order to assure that the log is recoverable in the event of an interruption at any point in the process. Return -1 if the write to foo.gz failed. 
Name: log_last; Comment: Rewrite the last block header bits and subsequent zero bits to get to a byte boundary, setting the last block bit if last is true, and then write the remainder of the stored block header (length and one's complement). Leave the file pointer after the end of the last stored block data. Return -1 if there is a read or write failure on the foo.gz file 
Name: log_append; Comment: Append len bytes from data to the locked and open log file. len may be zero if recovering and no .add file was found. In that case, the previous state of the foo.gz file is restored. The data is appended uncompressed in deflate stored blocks. Return -1 if there was an error reading or writing the foo.gz file. 
Name: log_replace; Comment: Replace the foo.dict file with the foo.temp file. Also delete the foo.add file, since the compress operation may have been interrupted before that was done. Returns 1 if memory could not be allocated, or -1 if reading or writing foo.gz fails, or if the rename fails for some reason other than foo.temp not existing. foo.temp not existing is a permitted error, since the replace operation may have been interrupted after the rename is done, but before foo.gz is marked as complete. 
Name: log_compress; Comment: Compress the len bytes at data and append the compressed data to the foo.gz deflate data immediately after the previous compressed data. This overwrites the previous uncompressed data, which was stored in foo.add and is the data provided in data[0..len-1]. If this operation is interrupted, it picks up at the start of this routine, with the foo.add file read in again. If there is no data to compress (len == 0), then we simply terminate the foo.gz file after the previously compressed data, appending a final empty stored block and the gzip trailer. Return -1 if reading or writing the log.gz file failed, or -2 if there was a memory allocation failure. 
Name: log_log; Comment: log a repair record to the .repairs file 
Name: log_recover; Comment: Recover the interrupted operation op. First read foo.add for recovering an append or compress operation. Return -1 if there was an error reading or writing foo.gz or reading an existing foo.add, or -2 if there was a memory allocation failure. 
Name: log_close; Comment: Close the foo.gz file (if open) and release the lock. 
Name: log_open; Comment: Open foo.gz, verify the header, and load the extra field contents, after first creating the foo.lock file to gain exclusive access to the foo.* files. If foo.gz does not exist or is empty, then write the initial header, extra, and body content of an empty foo.gz log file. If there is an error creating the lock file due to access restrictions, or an error reading or writing the foo.gz file, or if the foo.gz file is not a proper log file for this object (e.g. not a gzip file or does not contain the expected extra field), then return true. If there is an error, the lock is released. Otherwise, the lock is left in place. 
Name: gzlog_open; Comment: See gzlog.h for the description of the external methods below 
Name: gzlog_compress; Comment: gzlog_compress() return values: 0: all good -1: file i/o error (usually access issue) -2: memory allocation failure -3: invalid log pointer argument 
Name: gzlog_write; Comment: gzlog_write() return values: 0: all good -1: file i/o error (usually access issue) -2: memory allocation failure -3: invalid log pointer argument 
Name: gzlog_close; Comment: gzlog_close() return values: 0: ok -3: invalid log pointer argument 
Name: aprintf; Comment: allocation fails.
Name: gzip_normalize; Comment: block are all forced to zeros.
Name: main; Comment: Normalize the gzip stream on stdin, writing the result to stdout.
Name: def; Comment: Compress from file source to file dest until EOF on source. def() returns Z_OK on success, Z_MEM_ERROR if memory could not be allocated for processing, Z_STREAM_ERROR if an invalid compression level is supplied, Z_VERSION_ERROR if the version of zlib.h and the version of the library linked do not match, or Z_ERRNO if there is an error reading or writing the files. 
Name: inf; Comment: Decompress from file source to file dest until stream ends or EOF. inf() returns Z_OK on success, Z_MEM_ERROR if memory could not be allocated for processing, Z_DATA_ERROR if the deflate data is invalid or incomplete, Z_VERSION_ERROR if the version of zlib.h and the version of the library linked do not match, or Z_ERRNO if there is an error reading or writing the files. 
Name: zerr; Comment: report a zlib or i/o error 
Name: main; Comment: compress or decompress from stdin to stdout 
Name: deflate_index_free; Comment: See comments in zran.h. 
Name: addpoint; Comment: Add an entry to the access point list. If out of memory, deallocate the existing list and return NULL. index->gzip is the allocated size of the index in point entries, until it is time for deflate_index_build() to return, at which point gzip is set to indicate a gzip file or not. 
Name: deflate_index_build; Comment: See comments in zran.h. 
Name: deflate_index_extract; Comment: See comments in zran.h. 
Name: main; Comment: Demonstrate the use of deflate_index_build() and deflate_index_extract() by processing the file provided on the command line, and extracting LEN bytes from 2/3rds of the way through the uncompressed output, writing that to stdout. An offset can be provided as the second argument, in which case the data is extracted from there instead. 
Name: mem_alloc; Comment: memory allocation routine to pass to zlib 
Name: mem_free; Comment: memory free routine to pass to zlib 
Name: mem_setup; Comment: set up a controlled memory allocation space for monitoring, set the stream parameters to the controlled routines, with opaque pointing to the space 
Name: mem_limit; Comment: set a limit on the total memory allocation, or 0 to remove the limit 
Name: mem_used; Comment: show the current total requested allocations in bytes 
Name: mem_high; Comment: show the high water allocation in bytes 
Name: mem_done; Comment: release the memory allocation zone -- if there are any surprises, notify 
Name: h2b; Comment: Decode a hexadecimal string, set *len to length, in[] to the bytes. This decodes liberally, in that hex digits can be adjacent, in which case two in a row writes a byte. Or they can be delimited by any non-hex character, where the delimiters are ignored except when a single hex digit is followed by a delimiter, where that single digit writes a byte. The returned data is allocated and must eventually be freed. NULL is returned if out of memory. If the length is not needed, then len can be NULL. 
Name: inf; Comment: generic inflate() run, where hex is the hexadecimal input data, what is the text to include in an error message, step is how much input data to feed inflate() on each call, or zero to feed it all, win is the window bits parameter to inflateInit2(), len is the size of the output buffer, and err is the error code expected from the first inflate() call (the second inflate() call is expected to return Z_STREAM_END). If win is 47, then header information is collected with inflateGetHeader(). If a zlib stream is looking for a dictionary, then an empty dictionary is provided. inflate() is run until all of the input data is consumed. 
Name: cover_support; Comment: cover all of the lines in inflate.c up to inflate() 
Name: cover_wrap; Comment: cover all inflate() header and trailer cases and code after inflate() 
Name: pull; Comment: input and output functions for inflateBack() 
Name: cover_back; Comment: cover inflateBack() up to common deflate data cases and after those 
Name: try; Comment: do a raw inflate of data in hexadecimal with both inflate and inflateBack 
Name: cover_inflate; Comment: cover deflate data cases in both inflate() and inflateBack() 
Name: cover_trees; Comment: cover remaining lines in inftrees.c 
Name: cover_fast; Comment: cover remaining inffast.c decoding and window copying 
Name: AT_FUNC_NAME; Comment: None call AT_FUNC_F2 if FLAG is 0 or fail if FLAG contains more bits than AT_FUNC_USE_F1_COND. Return int and fail with -1 unless AT_FUNC_RESULT or AT_FUNC_FAIL are defined. If possible, do it without changing the working directory. Otherwise, resort to using save_cwd/fchdir, then AT_FUNC_F?/restore_cwd. If either the save_cwd or the restore_cwd fails, then give a diagnostic and exit nonzero. 
Name: inet_pton; Comment: intinet_pton(af, src, dst) convert from presentation format (which usually means ASCII printable) to network format (which is usually some kind of binary format). return: 1 if the address was valid for the specified address family 0 if the address wasn't valid ('dst' is untouched in this case) -1 if some other error occurred ('dst' is untouched in this case, too) author: Paul Vixie, 1996. 
Name: inet_pton4; Comment: intinet_pton4(src, dst) like inet_aton() but without all the hexadecimal, octal (with the exception of 0) and shorthand. return: 1 if 'src' is a valid dotted quad, else 0. notice: does not touch 'dst' unless it's returning 1. author: Paul Vixie, 1996. 
Name: inet_pton6; Comment: intinet_pton6(src, dst) convert presentation level address to network order binary form. return: 1 if 'src' is a valid [RFC1884 2.2] address, else 0. notice: (1) does not touch 'dst' unless it's returning 1. (2) :: in a full address is silently ignored. credit: inspired by Mark Andrews. author: Paul Vixie, 1996. 
Name: enum_locales_fn; Comment: Callback function for EnumLocales. 
Name: get_lcid; Comment: Return the Locale ID (LCID) number given the locale's name, a string, in LOCALE_NAME. This works by enumerating all the locales supported by the system, until we find one whose name matches LOCALE_NAME. 
Name: string_hash; Comment: A hash function for NUL-terminated char* strings using the method described by Bruno Haible. See http://www.haible.de/bruno/hashfunc.html. 
Name: struniq; Comment: Store a copy of the given string in a string pool with indefinite extent. Return a pointer to this copy. 
Name: gl_locale_name; Comment: Determine the current locale's name, and canonicalize it into XPG syntax language[_territory][.codeset][@modifier] The codeset part in the result is not reliable; the locale_charset() should be used for codeset information instead. The result must not be freed; it is statically allocated. 
Name: category_to_name; Comment: Return string representation of locale category CATEGORY. 
Name: setlocale_unixlike; Comment: Like setlocale, but accept also locale names in the form ll or ll_CC, where ll is an ISO 639 language code and CC is an ISO 3166 country code. 
Name: setlocale_single; Comment: Like setlocale, but support also LC_MESSAGES. 
Name: rpl_sleep; Comment: Guarantee unlimited sleep and a reasonable return value. Cygwin 1.5.x rejects attempts to sleep more than 49.7 days (2**32 milliseconds), but uses uninitialized memory which results in a garbage answer. Similarly, Linux 2.6.9 with glibc 2.3.4 has a too small return value when asked to sleep more than 24.85 days. 
Name: safe_copy; Comment: Copy as much of MSG into BUF as possible, without corrupting errno. Return 0 if MSG fit in BUFLEN, otherwise return ERANGE. 
Name: rpl_symlinkat; Comment: Create a symlink, but reject trailing slash. 
Name: symlinkat; Comment: Mingw lacks symlink, and it is more efficient to provide a trivial wrapper than to go through at-func.c to call rpl_symlink. 
Name: symlink_reversed; Comment: Like symlink, but with arguments reversed. 
Name: symlinkat; Comment: Create a symlink FILE, in the directory open on descriptor FD, holding CONTENTS. If possible, do it without changing the working directory. Otherwise, resort to using save_cwd/fchdir, then symlink/restore_cwd. If either the save_cwd or the restore_cwd fails, then give a diagnostic and exit nonzero. 
Name: do_areadlink; Comment: Wrapper for testing areadlink. 
Name: do_areadlinkat; Comment: Wrapper for testing areadlinkat. 
Name: main; Comment: Written by Bruno Haible <bruno@clisp.org>, 2007. 
Name: main; Comment: Written by Simon Josefsson <simon@josefsson.org>, 2008. 
Name: main; Comment: Test of calloc function. Copyright (C) 2010-2016 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: is_inheritable; Comment: Return non-zero if FD is open and inheritable across exec/spawn. 
Name: is_mode; Comment: Return non-zero if FD is open in the given MODE, which is either O_TEXT or O_BINARY. 
Name: main; Comment: With no arguments, do nothing. With arguments, attempt to consume first 6 bytes of stdin. In either case, let exit() take care of closing std streams and changing exit status if ferror(stdin). 
Name: main; Comment: Written by Eric Blake <ebb9@byu.net>, 2009. 
Name: main; Comment: Written by Jim Meyering. 
Name: is_open; Comment: Return true if FD is open. 
Name: is_inheritable; Comment: Return true if FD is open and inheritable across exec/spawn. 
Name: is_mode; Comment: Return true if FD is open in the given MODE, which is either O_TEXT or O_BINARY. 
Name: is_open; Comment: Return non-zero if FD is open. 
Name: main; Comment: Written by Bruno Haible <bruno@clisp.org>, 2008. 
Name: main; Comment: Don't verify that these errno values are all different, except for possibly EWOULDBLOCK == EAGAIN. Even Linux/x86 does not pass this check: it has ENOTSUP == EOPNOTSUPP. 
Name: main; Comment: We ignore any errors as these hints are only advisory.There is the chance one can pass invalid ADVICE, which will not be indicated, but given the simplicity of the interface this is unlikely. Also not returning errors allows the unconditional passing of descriptors to non standard files, which will just be ignored if unsupported. 
Name: do_chown; Comment: Wrapper around fchownat to test chown behavior. 
Name: do_lchown; Comment: Wrapper around fchownat to test lchown behavior. 
Name: check_flags; Comment: Ensure that all supported fcntl actions are distinct, and usable in preprocessor expressions. 
Name: do_futimens; Comment: Wrap fdutimensat to behave like futimens. 
Name: do_fdutimens; Comment: Test the use of file descriptors alongside a name. 
Name: do_lutimens; Comment: Wrap lutimensat to behave like lutimens. 
Name: do_lutimens1; Comment: Wrap fdutimensat to behave like lutimens. 
Name: do_utimens; Comment: Wrap fdutimensat to behave like utimens. 
Name: pow2f; Comment: Return 2^n. 
Name: pow2d; Comment: Return 2^n. 
Name: pow2l; Comment: Return 2^n. 
Name: main; Comment: Ensure that __fpending works. Copyright (C) 2004, 2007-2016 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http:www.gnu.orglicenses>. Written by Jim Meyering. 
Name: main; Comment: Written by Eric Blake <eblake@redhat.com>, 2011. 
Name: do_stat; Comment: Wrapper around fstatat to test stat behavior. 
Name: do_lstat; Comment: Wrapper around fstatat to test lstat behavior. 
Name: test_abort_bug; Comment: Keep this test in sync with m4/getcwd-abort-bug.m4. 
Name: test_long_name; Comment: Keep this test in sync with m4/getcwd-path-max.m4. 
Name: main; Comment: This program can also be used as a manual test, by invoking it with an argument; it then prints the load average. If the argument is nonzero, the manual test repeats forever, sleeping for the stated interval between each iteration. 
Name: main; Comment: written by Jim Meyering 
Name: do_link; Comment: Wrapper to test linkat like link. 
Name: check_same_link; Comment: Wrapper to see if two symlinks act the same. 
Name: test_locale_name; Comment: Test the gl_locale_name() function. 
Name: test_locale_name_thread; Comment: Test the gl_locale_name_thread() function. 
Name: test_locale_name_posix; Comment: Test the gl_locale_name_posix() function. 
Name: test_locale_name_environ; Comment: Test the gl_locale_name_environ() function. 
Name: test_locale_name_default; Comment: Test the gl_locale_name_default() function. 
Name: main; Comment: -------------------------------------------------------------------------- 
Name: main; Comment: No multithreading available. 
Name: main; Comment: ARGC must be 2; *ARGV[1] is '0' if stdin and stdout are files, '1' if they are pipes, and '2' if they are closed. Check for proper semantics of lseek. 
Name: do_lstat; Comment: Wrapper around lstat, which works even if lstat is a function-like macro, where test_lstat_func(lstat) would do the wrong thing. 
Name: main; Comment: Test of malloc function. Copyright (C) 2010-2016 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: do_allocation; Comment: Written by Bruno Haible <bruno@clisp.org>, 2005. 
Name: numeric_equalf; Comment: Compare two numbers with ==. This is a separate function because IRIX 6.5 "cc -O" miscompiles an 'x == x' test. 
Name: main; Comment: Written by Simon Josefsson. 
Name: main; Comment: Copyright (C) 2008-2016 Free Software Foundation, Inc. Written by Simon Josefsson and Bruno Haible This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: do_mknod; Comment: Wrapper around mknod, to create fifos. 
Name: do_open; Comment: Wrapper around openat to test open behavior. 
Name: tm_diff; Comment: None see src/strftime.c. 
Name: is_cloexec; Comment: Return true if FD is not inherited to child processes. 
Name: is_nonblocking; Comment: Return true if FD is in non-blocking mode. 
Name: my_ldexp; Comment: Written by Bruno Haible <bruno@clisp.org>, 2007. 
Name: handler; Comment: It is safe to use _Noreturn here: exit() never returns, and GCC knows that exit() is a non-returning function, even on platforms where its declaration in <stdlib.h> does not have the 'noreturn' attribute. 
Name: main; Comment: Test of realloc function. Copyright (C) 2010-2016 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: main; Comment: Copyright (C) 2005, 2008-2016 Free Software Foundation, Inc. Written by Simon Josefsson This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: handler; Comment: This test is unsafe in the presence of an asynchronous SIGABRT, because we install a signal-handler that is intentionally not async-safe. Hopefully, this does not lead to too many reports of false failures, since people don't generally use 'kill -s SIGABRT' to end a runaway program. 
Name: main; Comment: On native Windows, getpid() values and the arguments that are passed to the (Cygwin?) 'kill' program are not necessarily related. 
Name: main; Comment: Copyright (C) 2008-2016 Free Software Foundation, Inc. Written by Simon Josefsson. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: do_stat; Comment: Wrapper around stat, which works even if stat is a function-like macro, where test_stat_func(stat) would do the wrong thing. 
Name: main; Comment: Written by Bruno Haible <bruno@clisp.org>, 2009. 
Name: main; Comment: Written by Simon Josefsson <simon@josefsson.org>, 2009. 
Name: main; Comment: This program can be called with no arguments, then it performs a unit test. Or it can be called with 1 argument, then it prints the uname contents to standard output. 
Name: rmdirat; Comment: Wrapper around unlinkat to test rmdir behavior. 
Name: unlinker; Comment: Wrapper around unlinkat to test unlink behavior. 
Name: do_futimens; Comment: Wrap fdutimens to behave like futimens. 
Name: do_utimensat; Comment: Wrap utimensat to behave like utimens. 
Name: do_lutimensat; Comment: Wrap utimensat to behave like lutimens. 
Name: have_minus_zero; Comment: The SGI MIPS floating-point format does not distinguish 0.0 and -0.0. 
Name: strisnan; Comment: Test whether string[start_index..end_index-1] is a valid textual representation of NaN. 
Name: main; Comment: Test suite for version-etc. Copyright (C) 2009-2016 Free Software Foundation, Inc. This file is part of the GNUlib Library. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
Name: check_character; Comment: Check the multibyte character s[0..n-1]. 
Name: print_no_progname; Comment: Don't show the program name in error messages. 
Name: main; Comment: Test yesno. Without arguments, read one line. If first argument is zero, close stdin before attempting to read one line. Otherwise, read the number of lines specified by first argument. 
Name: cannot_unlink_dir; Comment: Return true if we cannot unlink directories, false if we might be able to unlink directories. 
Name: do_init_self_key; Comment: Initializes self_key. This function must only be called once. 
Name: init_self_key; Comment: Initializes self_key. 
Name: get_current_thread_handle; Comment: Return a real HANDLE object for the current thread. 
Name: wrapper_func; Comment: The main function of a freshly creating thread. It's a wrapper around the FUNC and ARG arguments passed to glthread_create_func. 
Name: main; Comment: Written by Bruno Haible <bruno@clisp.org>, 2010. 
Name: acl_errno_valid; Comment: Return true if errno value ERRNUM indicates that ACLs are well supported on this system. ERRNUM should be an errno value obtained after an ACL-related system call fails. 
Name: acl_extended_nontrivial; Comment: ACL is an ACL, from a file, stored as type ACL_TYPE_EXTENDED. Return 1 if the given ACL is non-trivial. Return 0 if it is trivial. 
Name: acl_access_nontrivial; Comment: ACL is an ACL, from a file, stored as type ACL_TYPE_ACCESS. Return 1 if the given ACL is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. Return -1 and set errno upon failure to determine it. 
Name: acl_nontrivial; Comment: Test an ACL retrieved with GETACL. Return 1 if the given ACL, consisting of COUNT entries, is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. 
Name: acl_ace_nontrivial; Comment: Test an ACL retrieved with ACE_GETACL. Return 1 if the given ACL, consisting of COUNT entries, is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. 
Name: acl_nontrivial; Comment: Return 1 if the given ACL is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. 
Name: aclv_nontrivial; Comment: Return 1 if the given ACL is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. 
Name: acl_nfs4_nontrivial; Comment: Return 1 if the given ACL is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. 
Name: acl_nontrivial; Comment: Test an ACL retrieved with ACL_GET. Return 1 if the given ACL, consisting of COUNT entries, is non-trivial. Return 0 if it is trivial, i.e. equivalent to a simple stat() mode. 
Name: acl_entries; Comment: Return the number of entries in ACL. Return -1 and set errno upon failure to determine it. 
Name: alloca; Comment: Return a pointer to at least SIZE bytes of storage, which will be automatically reclaimed upon exit from the procedure that called alloca. Originally, this space was supposed to be taken from the current stack frame of the caller, but that method cannot be made to work for some implementations of C, for example under Gould's UTX/32. 
Name: anytostr; Comment: Convert I to a printable string in BUF, which must be at least INT_BUFSIZE_BOUND (INTTYPE) bytes long. Return the address of the printable string, which need not start at BUF. 
Name: areadlink_with_size; Comment: None typically it is taken from st_size. It need not be correct. Return a pointer to that NUL-terminated string in malloc'd storage. If readlink fails, malloc fails, or if the link value is longer than SSIZE_MAX, return NULL (caller may use errno to diagnose). 
Name: careadlinkatcwd; Comment: Get the symbolic link value of FILENAME and put it into BUFFER, with size BUFFER_SIZE. This function acts like readlink but has readlinkat's signature. 
Name: areadlink; Comment: Call readlink to get the symbolic link value of FILENAME. Return a pointer to that NUL-terminated string in malloc'd storage. If readlink fails, return NULL and set errno. If allocation fails, or if the link value is longer than SIZE_MAX :-), return NULL and set errno to ENOMEM. 
Name: areadlinkat; Comment: Call readlinkat to get the symbolic link value of FILENAME relative to FD. Return a pointer to that NUL-terminated string in malloc'd storage. If readlinkat fails, return NULL and set errno (although failure to change directory will issue a diagnostic and exit). If allocation fails, or if the link value is longer than SIZE_MAX :-), return NULL and set errno to ENOMEM. 
Name: argmatch; Comment: If ARG is an unambiguous match for an element of the NULL-terminated array ARGLIST, return the index in ARGLIST of the matched element, else -1 if it does not match any element or -2 if it is ambiguous (is a prefix of more than one element). If VALLIST is none null, use it to resolve ambiguities limited to synonyms, i.e., for "yes", "yop" -> 0 "no", "nope" -> 1 "y" is a valid argument, for 0, and "n" for 1. 
Name: argmatch_invalid; Comment: Error reporting for argmatch. CONTEXT is a description of the type of entity that was being matched. VALUE is the invalid value that was given. PROBLEM is the return value from argmatch. 
Name: argmatch_valid; Comment: List the valid arguments for argmatch. ARGLIST is the same as in argmatch. VALLIST is a pointer to an array of values. VALSIZE is the size of the elements of VALLIST 
Name: __xargmatch_internal; Comment: Never failing versions of the previous functions. CONTEXT is the context for which argmatch is called (e.g., "--version-control", or "$VERSION_CONTROL" etc.). Upon failure, calls the (supposed never to return) function EXIT_FN. 
Name: argmatch_to_argument; Comment: Look for VALUE in VALLIST, an array of objects of size VALSIZE and return the first corresponding argument in ARGLIST 
Name: argv_iter_init_stream; Comment: Initialize to read from the stream, FP. The input is expected to contain a list of NUL-delimited tokens. 
Name: at_func2; Comment: Call FUNC to operate on a pair of files, where FILE1 is relative to FD1, and FILE2 is relative to FD2. If possible, do it without changing the working directory. Otherwise, resort to using save_cwd/fchdir, FUNC, restore_cwd (up to two times). If either the save_cwd or the restore_cwd fails, then give a diagnostic and exit nonzero. 
Name: check_extension; Comment: If FILE (which was of length FILELEN before an extension was appended to it) is too long, replace the extension with the single char E. If the result is still too long, remove the char just before E. 
Name: numbered_backup; Comment: *BUFFER contains a file name. Store into *BUFFER the next backup name for the named file, with a version number greater than all the existing numbered backups. Reallocate BUFFER as necessary; its initial allocated size is BUFFER_SIZE, which must be at least 4 bytes longer than the file name to make room for the initially appended ".~1". FILELEN is the length of the original file name. The returned value indicates what kind of backup was found. If an I/O or other read error occurs, use the highest backup number that was found. 
Name: find_backup_file_name; Comment: Return the name of the new backup file for the existing file FILE, allocated with malloc. Report an error and fail if out of memory. Do not call this function if backup_type == no_backups. 
Name: get_version; Comment: Return the type of backup specified by VERSION. If VERSION is NULL or the empty string, return numbered_existing_backups. If VERSION is invalid or ambiguous, fail with a diagnostic appropriate for the specified CONTEXT. Unambiguous abbreviations are accepted. 
Name: xget_version; Comment: Return the type of backup specified by VERSION. If VERSION is NULL, use the value of the envvar VERSION_CONTROL. If the specified string is invalid or ambiguous, fail with a diagnostic appropriate for the specified CONTEXT. Unambiguous abbreviations are accepted. 
Name: to_uchar; Comment: C89 compliant way to cast 'char' to 'unsigned char'. 
Name: base32_encode; Comment: Base32 encode IN array of size INLEN into OUT array of size OUTLEN. If OUTLEN is less than BASE32_LENGTH(INLEN), write as many bytes as possible. If OUTLEN is larger than BASE32_LENGTH(INLEN), also zero terminate the output buffer. 
Name: base32_encode_alloc; Comment: Allocate a buffer and store zero terminated base32 encoded data from array IN of size INLEN, returning BASE32_LENGTH(INLEN), i.e., the length of the encoded data, excluding the terminating zero. On return, the OUT variable will hold a pointer to newly allocated memory that must be deallocated by the caller. If output string length would overflow, 0 is returned and OUT is set to NULL. If memory allocation failed, OUT is set to NULL, and the return value indicates length of the requested memory block, i.e., BASE32_LENGTH(inlen) + 1. 
Name: isbase32; Comment: Return true if CH is a character from the Base32 alphabet, and false otherwise. Note that '=' is padding and not considered to be part of the alphabet. 
Name: base32_decode_ctx_init; Comment: Initialize decode-context buffer, CTX. 
Name: get_8; Comment: If CTX->i is 0 or 8, there are eight or more bytes in [*IN..IN_END), and none of those eight is a newline, then return *IN. Otherwise, copy up to 4 - CTX->i non-newline bytes from that range into CTX->buf, starting at index CTX->i and setting CTX->i to reflect the number of bytes copied, and return CTX->buf. In either case, advance *IN to point to the byte after the last one processed, and set *N_NON_NEWLINE to the number of verified non-newline bytes accessible through the returned pointer. 
Name: decode_8; Comment: Decode eight bytes of base32-encoded data, IN, of length INLEN into the output buffer, *OUT, of size *OUTLEN bytes. Return true if decoding is successful, false otherwise. If *OUTLEN is too small, as many bytes as possible are written to *OUT. On return, advance *OUT to point to the byte after the last one written, and decrement *OUTLEN to reflect the number of bytes remaining in *OUT. 
Name: base32_decode_ctx; Comment: Decode base32-encoded input array IN of length INLEN to output array OUT that can hold *OUTLEN bytes. The input data may be interspersed with newlines. Return true if decoding was successful, i.e. if the input was valid base32 data, false otherwise. If *OUTLEN is too small, as many bytes as possible will be written to OUT. On return, *OUTLEN holds the length of decoded bytes in OUT. Note that as soon as any non-alphabet, non-newline character is encountered, decoding is stopped and false is returned. If INLEN is zero, then process only whatever data is stored in CTX. Initially, CTX must have been initialized via base32_decode_ctx_init. Subsequent calls to this function must reuse whatever state is recorded in that buffer. It is necessary for when a octuple of base32 input bytes spans two input buffers. If CTX is NULL then newlines are treated as garbage and the input buffer is processed as a unit. 
Name: base32_decode_alloc_ctx; Comment: Allocate an output buffer in *OUT, and decode the base32 encoded data stored in IN of size INLEN to the *OUT buffer. On return, the size of the decoded data is stored in *OUTLEN. OUTLEN may be NULL, if the caller is not interested in the decoded length. *OUT may be NULL to indicate an out of memory error, in which case *OUTLEN contains the size of the memory block needed. The function returns true on successful decoding and memory allocation errors. (Use the *OUT and *OUTLEN parameters to differentiate between successful decoding and memory error.) The function returns false if the input was invalid, in which case *OUT is NULL and *OUTLEN is undefined. 
Name: base64_encode_fast; Comment: Base64 encode IN array of size INLEN into OUT array. OUT needs to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be a multiple of 3. 
Name: base64_encode; Comment: Base64 encode IN array of size INLEN into OUT array of size OUTLEN. If OUTLEN is less than BASE64_LENGTH(INLEN), write as many bytes as possible. If OUTLEN is larger than BASE64_LENGTH(INLEN), also zero terminate the output buffer. 
Name: base64_encode_alloc; Comment: Allocate a buffer and store zero terminated base64 encoded data from array IN of size INLEN, returning BASE64_LENGTH(INLEN), i.e., the length of the encoded data, excluding the terminating zero. On return, the OUT variable will hold a pointer to newly allocated memory that must be deallocated by the caller. If output string length would overflow, 0 is returned and OUT is set to NULL. If memory allocation failed, OUT is set to NULL, and the return value indicates length of the requested memory block, i.e., BASE64_LENGTH(inlen) + 1. 
Name: isbase64; Comment: Return true if CH is a character from the Base64 alphabet, and false otherwise. Note that '=' is padding and not considered to be part of the alphabet. 
Name: base64_decode_ctx_init; Comment: Initialize decode-context buffer, CTX. 
Name: get_4; Comment: If CTX->i is 0 or 4, there are four or more bytes in [*IN..IN_END), and none of those four is a newline, then return *IN. Otherwise, copy up to 4 - CTX->i non-newline bytes from that range into CTX->buf, starting at index CTX->i and setting CTX->i to reflect the number of bytes copied, and return CTX->buf. In either case, advance *IN to point to the byte after the last one processed, and set *N_NON_NEWLINE to the number of verified non-newline bytes accessible through the returned pointer. 
Name: decode_4; Comment: Decode up to four bytes of base64-encoded data, IN, of length INLEN into the output buffer, *OUT, of size *OUTLEN bytes. Return true if decoding is successful, false otherwise. If *OUTLEN is too small, as many bytes as possible are written to *OUT. On return, advance *OUT to point to the byte after the last one written, and decrement *OUTLEN to reflect the number of bytes remaining in *OUT. 
Name: base64_decode_ctx; Comment: Decode base64-encoded input array IN of length INLEN to output array OUT that can hold *OUTLEN bytes. The input data may be interspersed with newlines. Return true if decoding was successful, i.e. if the input was valid base64 data, false otherwise. If *OUTLEN is too small, as many bytes as possible will be written to OUT. On return, *OUTLEN holds the length of decoded bytes in OUT. Note that as soon as any non-alphabet, non-newline character is encountered, decoding is stopped and false is returned. If INLEN is zero, then process only whatever data is stored in CTX. Initially, CTX must have been initialized via base64_decode_ctx_init. Subsequent calls to this function must reuse whatever state is recorded in that buffer. It is necessary for when a quadruple of base64 input bytes spans two input buffers. If CTX is NULL then newlines are treated as garbage and the input buffer is processed as a unit. 
Name: base64_decode_alloc_ctx; Comment: Allocate an output buffer in *OUT, and decode the base64 encoded data stored in IN of size INLEN to the *OUT buffer. On return, the size of the decoded data is stored in *OUTLEN. OUTLEN may be NULL, if the caller is not interested in the decoded length. *OUT may be NULL to indicate an out of memory error, in which case *OUTLEN contains the size of the memory block needed. The function returns true on successful decoding and memory allocation errors. (Use the *OUT and *OUTLEN parameters to differentiate between successful decoding and memory error.) The function returns false if the input was invalid, in which case *OUT is NULL and *OUTLEN is undefined. 
Name: last_component; Comment: Return the address of the last file name component of NAME. If NAME has no relative file name components because it is a file system root, return the empty string. 
Name: base_len; Comment: Return the length of the basename NAME. Typically NAME is the value returned by base_name or last_component. Act like strlen (NAME), except omit all trailing slashes. 
Name: buffer_lcm; Comment: Return a buffer size suitable for doing I/O with files whose block sizes are A and B. However, never return a value greater than LCM_MAX. 
Name: c_locale; Comment: Return the C locale object, or (locale_t) 0 with errno set if it cannot be created. 
Name: rpl_calloc; Comment: Allocate and zero-fill an NxS-byte block of memory from the heap. If N or S is zero, allocate and zero-fill a 1-byte block. 
Name: canon_host; Comment: Single-threaded of wrapper for canon_host_r. After a NULL return, error messages may be retrieved via ch_strerror(). 
Name: canon_host_r; Comment: Return a malloc'd string containing the canonical hostname associated with HOST, or NULL if a canonical name cannot be determined. On NULL return, if CHERROR is not NULL, set CHERROR to an error code as returned by getaddrinfo(). Use ch_strerror_r() or gai_strerror() to convert a CHERROR value to a string suitable for error messages. WARNINGS HOST must be a string representation of a resolvable name for this host. Strings containing an IP address in dotted decimal notation will be returned as-is, without further resolution. The use of the word "canonical" in this context is unfortunate but entrenched. The value returned by this function will be the end result of the resolution of any CNAME chains in the DNS. There may only be one such value for any given hostname, though the actual IP address referenced by this value and the device using that IP address may each actually have any number of such "canonical" hostnames. See the POSIX getaddrinfo spec <http:www.opengroup.orgsusv3xshgetaddrinfo.html">, RFC 1034 <http:www.faqs.orgrfcsrfc1034.html>, & RFC 2181 <http:www.faqs.orgrfcsrfc2181.html> for more on what this confusing term really refers to. 
Name: ch_strerror; Comment: Return a string describing the last error encountered by canon_host. 
Name: canonicalize_file_name; Comment: Return the canonical absolute name of file NAME. A canonical name does not contain any ".", ".." components nor any repeated file name separators ('/') or symlinks. All components must exist. The result is malloc'd. 
Name: seen_triple; Comment: Return true if we've already seen the triple, <FILENAME, dev, ino>. If *HT is not initialized, initialize it. 
Name: canonicalize_filename_mode; Comment: Return the canonical absolute name of file NAME, while treating missing elements according to CAN_MODE. A canonical name does not contain any ".", ".." components nor any repeated file name separators ('/') or, depending on other CAN_MODE flags, symlinks. Whether components must exist or not depends on canonicalize mode. The result is malloc'd. 
Name: careadlinkat; Comment: Assuming the current directory is FD, get the symbolic link value of FILENAME as a null-terminated string and put it into a buffer. If FD is AT_FDCWD, FILENAME is interpreted relative to the current working directory, as in openat. If the link is small enough to fit into BUFFER put it there. BUFFER's size is BUFFER_SIZE, and BUFFER can be null if BUFFER_SIZE is zero. If the link is not small, put it into a dynamically allocated buffer managed by ALLOC. It is the caller's responsibility to free the returned value if it is nonnull and is not BUFFER. A null ALLOC stands for the standard allocator. The PREADLINKAT function specifies how to read links. It operates like POSIX readlinkat() <http:pubs.opengroup.orgonlinepubs9699919799functionsreadlink.html> but can assume that its first argument is the same as FD. If successful, return the buffer address; otherwise return NULL and set errno. 
Name: cdb_advance_fd; Comment: Given a file descriptor of an open directory (or AT_FDCWD), CDB->fd, try to open the CDB->fd-relative directory, DIR. If the open succeeds, update CDB->fd with the resulting descriptor, close the incoming file descriptor, and return zero. Upon failure, return -1 and set errno. 
Name: find_non_slash; Comment: Return a pointer to the first non-slash in S. 
Name: chdir_long; Comment: This is a function much like chdir, but without the PATH_MAX limitation on the length of the directory name. A significant difference is that it must be able to modify (albeit only temporarily) the directory name. It handles an arbitrarily long directory name by operating on manageable portions of the name. On systems without the openat syscall, this means changing the working directory to more and more "distant" points along the long directory name and then restoring the working directory. If any of those attempts to save or restore the working directory fails, this function exits nonzero. Note that this function may still fail with errno == ENAMETOOLONG, but only if the specified directory name contains a component that is long enough to provoke such a failure all by itself (e.g. if the component has length PATH_MAX or greater on systems that define PATH_MAX). 
Name: chown; Comment: Simple stub that always fails with ENOSYS, for mingw. 
Name: rpl_chown; Comment: Provide a more-closely POSIX-conforming version of chown on systems with one or both of the following problems: - chown doesn't treat an ID of -1 as meaning "don't change the corresponding ID". - chown doesn't dereference symlinks. 
Name: set_cloexec_flag; Comment: Set the 'FD_CLOEXEC' flag of DESC if VALUE is true, or clear the flag if VALUE is false. Return 0 on success, or -1 on error with 'errno' set. Note that on MingW, this function does NOT protect DESC from being inherited into spawned children. Instead, either use dup_cloexec followed by closing the original DESC, or use interfaces such as open or pipe2 that accept flags like O_CLOEXEC to create DESC non-inheritable in the first place. 
Name: dup_cloexec; Comment: Duplicates a file handle FD, while marking the copy to be closed prior to exec or spawn. Returns -1 and sets errno if FD could not be duplicated. 
Name: close_stream; Comment: Close STREAM. Return 0 if successful, EOF (setting errno) otherwise. A failure might set errno to 0 if the error number cannot be determined. A failure with errno set to EPIPE may or may not indicate an error situation worth signaling to the user. See the documentation of the close_stdout_set_ignore_EPIPE function for details. If a program writes *anything* to STREAM, that program should close STREAM and make sure that it succeeds before exiting. Otherwise, suppose that you go to the extreme of checking the return status of every function that does an explicit write to STREAM. The last printf can succeed in writing to the internal stream buffer, and yet the fclose(STREAM) could still fail (due e.g., to a disk full error) when it tries to write out that buffered data. Thus, you would be left with an incomplete output file and the offending program would exit successfully. Even calling fflush is not always sufficient, since some file systems (NFS and CODA) buffer written/flushed data until an actual close call. Besides, it's wasteful to check the return value from every call that writes to STREAM -- just let the internal stream state record the failure. That's what the ferror test is checking below. 
Name: rpl_close; Comment: Override close() to call into other gnulib modules. 
Name: close_stdin_set_file_name; Comment: Set the file name to be reported in the event an error is detected on stdin by close_stdin. See also close_stdout_set_file_name, if an error is detected when closing stdout. 
Name: close_stdin; Comment: Close standard input, rewinding any unused input if stdin is seekable. On error, issue a diagnostic and _exit with status 'exit_failure'. Then call close_stdout. Most programs can get by with close_stdout. close_stdin is only needed when a program wants to guarantee that partially read input from seekable stdin is not consumed, for any subsequent clients. For example, POSIX requires that these two commands behave alike: (sed -ne 1q; cat) < file tail -n +2 file Since close_stdin is commonly registered via 'atexit', POSIX and the C standard both say that it should not call 'exit', because the behavior is undefined if 'exit' is called more than once. So it calls '_exit' instead of 'exit'. If close_stdin is registered via atexit before other functions are registered, the other functions can act before this _exit is invoked. Applications that use close_stdout should flush any streams other than stdin, stdout, and stderr before exiting, since the call to _exit will bypass other buffer flushing. Applications should be flushing and closing other streams anyway, to check for I/O errors. Also, applications should not use tmpfile, since _exit can bypass the removal of these files. It's important to detect such failures and exit nonzero because many tools (most notably 'make' and other build-management systems) depend on being able to detect failure in other tools via their exit status. 
Name: close_stdout_set_file_name; Comment: Set the file name to be reported in the event an error is detected by close_stdout. 
Name: close_stdout_set_ignore_EPIPE; Comment: Specify the reaction to an EPIPE error during the closing of stdout: - If ignore = true, it shall be ignored. - If ignore = false, it shall evoke a diagnostic, along with a nonzero exit status. The default is ignore = false. This setting matters only if the SIGPIPE signal is ignored (i.e. its handler set to SIG_IGN) or blocked. Only particular programs need to temporarily ignore SIGPIPE. If SIGPIPE is ignored or blocked because it was ignored or blocked in the parent process when it created the child process, it usually is a bug in the parent process: It is bad practice to have SIGPIPE ignored or blocked while creating a child process. EPIPE occurs when writing to a pipe or socket that has no readers now, when SIGPIPE is ignored or blocked. The ignore = false setting is suitable for a scenario where it is normally guaranteed that the pipe writer terminates before the pipe reader. In this case, an EPIPE is an indication of a premature termination of the pipe reader and should lead to a diagnostic and a nonzero exit status. The ignore = true setting is suitable for a scenario where you don't know ahead of time whether the pipe writer or the pipe reader will terminate first. In this case, an EPIPE is an indication that the pipe writer can stop doing useless write() calls; this is what close_stdout does anyway. EPIPE is part of the normal pipe/socket shutdown protocol in this case, and should not lead to a diagnostic message. 
Name: close_stdout; Comment: Close standard output. On error, issue a diagnostic and _exit with status 'exit_failure'. Also close standard error. On error, _exit with status 'exit_failure'. Since close_stdout is commonly registered via 'atexit', POSIX and the C standard both say that it should not call 'exit', because the behavior is undefined if 'exit' is called more than once. So it calls '_exit' instead of 'exit'. If close_stdout is registered via atexit before other functions are registered, the other functions can act before this _exit is invoked. Applications that use close_stdout should flush any streams other than stdout and stderr before exiting, since the call to _exit will bypass other buffer flushing. Applications should be flushing and closing other streams anyway, to check for I/O errors. Also, applications should not use tmpfile, since _exit can bypass the removal of these files. It's important to detect such failures and exit nonzero because many tools (most notably 'make' and other build-management systems) depend on being able to detect failure in other tools via their exit status. 
Name: copy_acl; Comment: Copy access control lists from one file to another. If SOURCE_DESC is a valid file descriptor, use file descriptor operations, else use filename based operations on SRC_NAME. Likewise for DEST_DESC and DST_NAME. If access control lists are not available, fchmod the target file to MODE. Also sets the non-permission bits of the destination file (S_ISUID, S_ISGID, S_ISVTX) to those from MODE if any are set. Return 0 if successful, otherwise output a diagnostic and return a negative error code. 
Name: is_zero_or_power_of_two; Comment: Return true if I is a power of 2, or is zero. 
Name: cycle_check; Comment: In traversing a directory hierarchy, call this function once for each descending chdir call, with SB corresponding to the chdir operand. If SB corresponds to a directory that has already been seen, return true to indicate that there is a directory cycle. Note that this is done "lazily", which means that some of the directories in the cycle may be processed twice before the cycle is detected. 
Name: di_ent_hash; Comment: Hash a device-inode-set entry. 
Name: di_ent_compare; Comment: Return true if two device-inode-set entries are the same. 
Name: di_ent_free; Comment: Free a device-inode-set entry. 
Name: di_set_alloc; Comment: Create a set of device-inode pairs. Return NULL on allocation failure. 
Name: di_set_free; Comment: Free a set of device-inode pairs. 
Name: di_ino_hash; Comment: Hash an encoded inode number I. 
Name: map_device; Comment: Using the DIS table, map a device to a hash table that represents a set of inode numbers. Return NULL on error. 
Name: map_inode_number; Comment: Using the DIS table, map an inode number to a mapped value. Return INO_MAP_INSERT_FAILURE on error. 
Name: di_set_insert; Comment: Attempt to insert the DEV,INO pair into the set DIS. If it matches a pair already in DIS, keep that pair and return 0. Otherwise, if insertion is successful, return 1. Upon any failure return -1. 
Name: di_set_lookup; Comment: Look up the DEV,INO pair in the set DIS. If found, return 1; if not found, return 0. Upon any failure return -1. 
Name: dirchownmod; Comment: Change the ownership and mode bits of a directory. If FD is nonnegative, it should be a file descriptor associated with the directory; close it before returning. DIR is the name of the directory. If MKDIR_MODE is not (mode_t) -1, mkdir (DIR, MKDIR_MODE) has just been executed successfully with umask zero, so DIR should be a directory (not a symbolic link). First, set the file's owner to OWNER and group to GROUP, but leave the owner alone if OWNER is (uid_t) -1, and similarly for GROUP. Then, set the file's mode bits to MODE, except preserve any of the bits that correspond to zero bits in MODE_BITS. In other words, MODE_BITS is a mask that specifies which of the file's mode bits should be set or cleared. MODE should be a subset of MODE_BITS, which in turn should be a subset of CHMOD_MODE_BITS. This implementation assumes the current umask is zero. Return 0 if successful, -1 (setting errno) otherwise. Unsuccessful calls may do the chown but not the chmod. 
Name: _gl_register_dirp_fd; Comment: Register fd associated with dirp to dirp_fd_list. 
Name: _gl_unregister_dirp_fd; Comment: Unregister fd from dirp_fd_list with closing it 
Name: dir_len; Comment: Return the length of the prefix of FILE that will be used by dir_name. If FILE is in the working directory, this returns zero even though 'dir_name (FILE)' will return ".". Works properly even if there are trailing slashes (by effectively ignoring them). 
Name: mdir_name; Comment: None rename (base_name (FILE), "foo"); } succeeds, you have renamed FILE to "foo" in the same directory FILE was in. 
Name: dir_name; Comment: Just like mdir_name (dirname-lgpl.c), except, rather than returning NULL upon malloc failure, here, we report the "memory exhausted" condition and exit. 
Name: dtotimespec; Comment: Convert the double value SEC to a struct timespec. Round toward positive infinity. On overflow, return an extremal value. 
Name: dup_safer_flag; Comment: Like dup, but do not return STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. If FLAG contains O_CLOEXEC, behave like fcntl(F_DUPFD_CLOEXEC) rather than fcntl(F_DUPFD). 
Name: dup_safer; Comment: Like dup, but do not return STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. 
Name: dupfd; Comment: On older platforms, dup2 did not exist. 
Name: error; Comment: Print the program name and error message MESSAGE, which is a printf-style format string with optional args. If ERRNUM is nonzero, print its corresponding system error message. Exit with status STATUS if it is nonzero. 
Name: euidaccess; Comment: Return 0 if the user has permission of type MODE on FILE; otherwise, return -1 and set 'errno'. Like access, except that it uses the effective user and group id's instead of the real ones, and it does not always check for read-only file system, text busy, etc. 
Name: exclude_add_pattern_buffer; Comment: Register BUF in the pattern buffer list of EX. ADD_FUNC (see add_exclude_file and add_exclude_fp below) can use this function if it modifies the pattern, to ensure the allocated memory will be properly reclaimed upon calling free_exclude. 
Name: fnmatch_pattern_has_wildcards; Comment: Return true if STR has or may have wildcards, when matched with OPTIONS. Return false if STR definitely does not have wildcards. 
Name: new_exclude; Comment: Return a newly allocated and empty exclude list. 
Name: string_hasher; Comment: Calculate the hash of string. 
Name: string_hasher_ci; Comment: Ditto, for case-insensitive hashes 
Name: string_compare; Comment: compare two strings for equality 
Name: string_compare_ci; Comment: compare two strings for equality, case-insensitive 
Name: new_exclude_segment; Comment: Create new exclude segment of given TYPE and OPTIONS, and attach it to the head of EX. 
Name: free_exclude_segment; Comment: Free a single exclude segment 
Name: free_exclude; Comment: Free the storage associated with an exclude list. 
Name: fnmatch_no_wildcards; Comment: Return zero if PATTERN matches F, obeying OPTIONS, except that (unlike fnmatch) wildcards are disabled in PATTERN. 
Name: file_pattern_matches; Comment: Return true if the exclude_pattern segment SEG matches F. 
Name: file_name_matches; Comment: Return true if the exclude_hash segment SEG matches F. BUFFER is an auxiliary storage of the same length as F (with nul terminator included) 
Name: excluded_file_name; Comment: Return true if EX excludes F. 
Name: add_exclude; Comment: Append to EX the exclusion PATTERN with OPTIONS. 
Name: add_exclude_fp; Comment: Use ADD_FUNC to append to EX the patterns in FILE_NAME, each with OPTIONS. LINE_END terminates each pattern in the file. If LINE_END is a space character, ignore trailing spaces and empty lines in FP. Return -1 on failure, 0 on success. 
Name: ensure_dirs_slot; Comment: Try to ensure dirs has enough room for a slot at index fd; free any contents already in that slot. Return false and set errno to ENOMEM on allocation failure. 
Name: get_name; Comment: Return an absolute name of DIR in malloc'd storage. 
Name: _gl_unregister_fd; Comment: Close FD, cleaning up any fd to name mapping if fd was visiting a directory. 
Name: _gl_register_fd; Comment: Mark FD as visiting FILENAME. FD must be non-negative, and refer to an open file descriptor. If REPLACE_OPEN_DIRECTORY is non-zero, this should only be called if FD is visiting a directory. Close FD and return -1 if there is insufficient memory to track the directory name; otherwise return FD. 
Name: _gl_register_dup; Comment: Mark NEWFD as a duplicate of OLDFD; useful from dup, dup2, dup3, and fcntl. Both arguments must be valid and distinct file descriptors. Close NEWFD and return -1 if OLDFD is tracking a directory, but there is insufficient memory to track the same directory in NEWFD; otherwise return NEWFD. 
Name: _gl_directory_name; Comment: If FD is currently visiting a directory, then return the name of that directory. Otherwise, return NULL and set errno. 
Name: fchdir; Comment: Implement fchdir() in terms of chdir(). 
Name: fchown; Comment: A trivial substitute for 'fchown'. DJGPP 2.03 and earlier (and perhaps later) don't have 'fchown', so we pretend no-one has permission for this operation. 
Name: rpl_fchownat; Comment: Work around bugs with trailing slash, using the same workarounds as chown and lchown. 
Name: rpl_fclose; Comment: Override fclose() to call the overridden fflush() or close(). 
Name: dupfd; Comment: Duplicate OLDFD into the first available slot of at least NEWFD, which must be positive, with FLAGS determining whether the duplicate will be inheritable. 
Name: fd_reopen; Comment: Open a file to a particular file descriptor. This is like standard 'open', except it always returns DESIRED_FD if successful. 
Name: fd_safer_flag; Comment: Return FD, unless FD would be a copy of standard input, output, or error; in that case, return a duplicate of FD, closing FD. If FLAG contains O_CLOEXEC, the returned FD will have close-on-exec semantics. On failure to duplicate, close FD, set errno, and return -1. Preserve errno if FD is negative, so that the caller can always inspect errno when the returned value is negative. This function is usefully wrapped around functions that return file descriptors, e.g., fd_safer_flag (open ("file", O_RDONLY | flag), flag). 
Name: fd_safer; Comment: Return FD, unless FD would be a copy of standard input, output, or error; in that case, return a duplicate of FD, closing FD. On failure to duplicate, close FD, set errno, and return -1. Preserve errno if FD is negative, so that the caller can always inspect errno when the returned value is negative. This function is usefully wrapped around functions that return file descriptors, e.g., fd_safer (open ("file", O_RDONLY)). 
Name: fdopendir_with_dup; Comment: Like fdopendir, except that if OLDER_DUPFD is not -1, it is known to be a dup of FD which is less than FD - 1 and which will be closed by the caller and not otherwise used by the caller. This function makes sure that FD is closed and all file descriptors less than FD are open, and then calls fd_clone_opendir on a dup of FD. That way, barring race conditions, fd_clone_opendir returns a stream whose file descriptor is FD. If REPLACE_FCHDIR or CWD is null, use opendir ("/proc/self/fd/...", falling back on fchdir metadata. Otherwise, CWD is a saved version of the working directory; use fchdir/opendir(".")/restore_cwd(CWD). 
Name: fd_clone_opendir; Comment: Like fdopendir, except the result controls a clone of FD. It is the caller's responsibility both to close FD and (if the result is not null) to closedir the result. 
Name: rpl_fdopendir; Comment: Like fdopendir, but work around GNU/Hurd bug by validating FD. 
Name: fdutimensat; Comment: Set the access and modification time stamps of FD (a.k.a. FILE) to be TIMESPEC[0] and TIMESPEC[1], respectively; relative to directory DIR. FD must be either negative -- in which case it is ignored -- or a file descriptor that is open on FILE. If FD is nonnegative, then FILE can be NULL, which means use just futimes (or equivalent) instead of utimes (or equivalent), and fail if on an old system without futimes (or equivalent). If TIMESPEC is null, set the time stamps to the current time. ATFLAG is passed to utimensat if FD is negative or futimens was unsupported, which can allow operation on FILE as a symlink. Return 0 on success, -1 (setting errno) on failure. 
Name: clear_ungetc_buffer_preserving_position; Comment: Clear the stream's ungetc buffer, preserving the value of ftello (fp). 
Name: clear_ungetc_buffer; Comment: Clear the stream's ungetc buffer. May modify the value of ftello (fp). 
Name: disable_seek_optimization; Comment: FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin, Android 
Name: rpl_fflush; Comment: Flush all pending data on STREAM according to POSIX rules. Both output and seekable input streams are supported. 
Name: file_has_acl; Comment: Return 1 if NAME has a nontrivial access control list, 0 if ACLs are not supported, or if NAME has no or only a base ACL, and -1 (setting errno) on error. Note callers can determine if ACLs are not supported as errno is set in that case also. SB must be set to the stat buffer of NAME, obtained through stat() or lstat(). 
Name: record_file; Comment: Record file, FILE, and dev/ino from *STATS, in the hash table, HT. If HT is NULL, return immediately. If memory allocation fails, exit immediately. 
Name: seen_file; Comment: Return true if there is an entry in hash table, HT, for the file described by FILE and STATS. 
Name: st_blocks; Comment: Return the number of 512-byte blocks in a file of SIZE bytes. 
Name: ftypelet; Comment: Return a character indicating the type of file described by file mode BITS: '-' regular file 'b' block special file 'c' character special file 'C' high performance ("contiguous data") file 'd' directory 'D' door 'l' symbolic link 'm' multiplexed file (7th edition Unix; obsolete) 'n' network special file (HP-UX) 'p' fifo (named pipe) 'P' port 's' socket 'w' whiteout (4.4BSD) '?' some other file type 
Name: strmode; Comment: Like filemodestring, but rely only on MODE. 
Name: filemodestring; Comment: filemodestring - fill in string STR with an ls-style ASCII representation of the st_mode field of file stats block STATP. 12 characters are stored in STR. The characters stored in STR are: 0 File type, as in ftypelet above, except that other letters are used for files whose type cannot be determined solely from st_mode: 'F' semaphore 'M' migrated file (Cray DMF) 'Q' message queue 'S' shared memory object 'T' typed memory object 1 'r' if the owner may read, '-' otherwise. 2 'w' if the owner may write, '-' otherwise. 3 'x' if the owner may execute, 's' if the file is set-user-id, '-' otherwise. 'S' if the file is set-user-id, but the execute bit isn't set. 4 'r' if group members may read, '-' otherwise. 5 'w' if group members may write, '-' otherwise. 6 'x' if group members may execute, 's' if the file is set-group-id, '-' otherwise. 'S' if it is set-group-id but not executable. 7 'r' if any user may read, '-' otherwise. 8 'w' if any user may write, '-' otherwise. 9 'x' if any user may execute, 't' if the file is "sticky" (will be retained in swap space after execution), '-' otherwise. 'T' if the file is sticky but not executable. 10 ' ' for compatibility with 4.4BSD strmode, since this interface does not support ACLs. 11 '_0'. 
Name: longest_relative_suffix; Comment: Return the longest suffix of F that is a relative file name. If it has no such suffix, return the empty string. 
Name: mfile_name_concat; Comment: Concatenate two file name components, DIR and ABASE, in newly-allocated storage and return the result. The resulting file name F is such that the commands "ls F" and "(cd DIR; ls BASE)" refer to the same file, where BASE is ABASE with any file system prefixes and leading separators removed. Arrange for a directory separator if necessary between DIR and BASE in the result, removing any redundant separators. In any case, if BASE_IN_RESULT is non-NULL, set *BASE_IN_RESULT to point to the copy of ABASE in the returned concatenation. However, if ABASE begins with more than one slash, set *BASE_IN_RESULT to point to the sole corresponding slash that is copied into the result buffer. Return NULL if malloc fails. 
Name: file_name_concat; Comment: Just like mfile_name_concat (filenamecat-lgpl.c), except, rather than returning NULL upon malloc failure, here, we report the "memory exhausted" condition and exit. 
Name: match_suffix; Comment: Match a file suffix defined by this regular expression: /(_.[A-Za-z~][A-Za-z0-9~]*)*$/ Scan the string *STR and return a pointer to the matching suffix, or NULL if not found. Upon return, *STR points to terminating NUL. 
Name: order; Comment: verrevcmp helper function 
Name: verrevcmp; Comment: slightly modified verrevcmp function from dpkg S1, S2 - compared string S1_LEN, S2_LEN - length of strings to be scanned This implements the algorithm for comparison of version strings specified by Debian and now widely adopted. The detailed specification can be found in the Debian Policy Manual in the section on the 'Version' control field. This version of the code implements that from s5.6.12 of Debian Policy v3.8.0.1 http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version 
Name: filevercmp; Comment: Compare version strings S1 and S2. See filevercmp.h for function description. 
Name: is_char_class; Comment: We have to convert the wide character string in a multibyte string. But we know that the character class names consist of alphanumeric characters from the portable character set, and since the wide character encoding for a member of the portable character set is the same code point as its single-byte encoding, we can use a simplified method to convert the string to a multibyte character string. 
Name: fopen_safer; Comment: Like fopen, but do not return stdin, stdout, or stderr. 
Name: __fpending; Comment: Return the number of pending (aka buffered, unflushed) bytes on the stream, FP, that is open for writing. 
Name: freadptrinc; Comment: Increment the in-memory pointer. INCREMENT must be at most the buffer size returned by freadptr(). This is very cheap (no system calls). 
Name: protect_fd; Comment: Guarantee that FD is open; all smaller FDs must already be open. Return true if successful. 
Name: freopen_safer; Comment: Like freopen, but guarantee that reopening stdin, stdout, or stderr preserves the invariant that STDxxx_FILENO==fileno(stdxxx), and that no other stream will interfere with the standard streams. This is necessary because most freopen implementations will change the associated fd of a stream to the lowest available slot. 
Name: rpl_fstatat; Comment: fstatat should always follow symbolic links that end in /, but on Solaris 9 it doesn't if AT_SYMLINK_NOFOLLOW is specified. Likewise, trailing slash on a non-directory should be an error. These are the same problems that lstat.c and stat.c address, so solve it in a similar way. AIX 7.1 fstatat (AT_FDCWD, ..., 0) always fails, which is a bug. Work around this bug if FSTATAT_AT_FDCWD_0_BROKEN is nonzero. 
Name: stat_func; Comment: On mingw, the gnulib <sys/stat.h> defines 'stat' as a function-like macro; but using it in AT_FUNC_F2 causes compilation failure because the preprocessor sees a use of a macro that requires two arguments but is only given one. Hence, we need an inline forwarder to get past the preprocessor. 
Name: get_fs_usage; Comment: Fill in the fields of FSP with information about space usage for the file system on which FILE resides. DISK is the device on which FILE is mounted, for space-getting methods that need to know it. Return 0 if successful, -1 if not. When returning -1, ensure that ERRNO is either a system error value, or zero if DISK is NULL on a system that requires a non-NULL value. 
Name: statfs; Comment: AIX PS/2 does not supply statfs. 
Name: setup_dir; Comment: Set up the cycle-detection machinery. 
Name: enter_dir; Comment: Enter a directory during a file tree walk. 
Name: leave_dir; Comment: Leave a directory during a file tree walk. 
Name: free_dir; Comment: Free any memory used for cycle detection. 
Name: fts_set_stat_required; Comment: Overload the fts_statp->st_size member (otherwise unused, when fts_info is FTS_NSOK) to indicate whether fts_read should stat this entry or not. 
Name: opendirat; Comment: FIXME: if others need this function, move it into lib/openat.c 
Name: cwd_advance_fd; Comment: Virtual fchdir. Advance SP's working directory file descriptor, SP->fts_cwd_fd, to FD, and push the previous value onto the fd_ring. CHDIR_DOWN_ONE is true if FD corresponds to an entry in the directory open on sp->fts_cwd_fd; i.e., to move the working directory one level down. 
Name: restore_initial_cwd; Comment: Restore the initial, pre-traversal, "working directory". In FTS_CWDFD mode, we merely call cwd_advance_fd, otherwise, we may actually change the working directory. Return 0 upon success. Upon failure, set errno and return nonzero. 
Name: diropen; Comment: Open the directory DIR if possible, and return a file descriptor. Return -1 and set errno on failure. It doesn't matter whether the file descriptor has read or write access. 
Name: full_rw; Comment: Write(read) COUNT bytes at BUF to(from) descriptor FD, retrying if interrupted or if a partial write(read) occurs. Return the number of bytes transferred. When writing, set errno if fewer than COUNT bytes are written. When reading, if fewer than COUNT bytes are read, you must examine errno to distinguish failure from EOF (errno == 0). 
Name: futimens; Comment: Set the access and modification time stamps of FD to be TIMESPEC[0] and TIMESPEC[1], respectively. Fail with ENOSYS on systems without futimes (or equivalent). If TIMESPEC is null, set the time stamps to the current time. Return 0 on success, -1 (setting errno) on failure. 
Name: get_permissions; Comment: Read the permissions of a file into CTX. If DESC is a valid file descriptor, use file descriptor operations, else use filename based operations on NAME. MODE is the file mode obtained from a previous stat call. Return 0 if successful. Return -1 and set errno upon failure. 
Name: getaddrinfo; Comment: Translate name of a service location and/or a service name to set of socket addresses. 
Name: freeaddrinfo; Comment: Free 'addrinfo' structure AI including associated storage. 
Name: rpl_getcwd; Comment: Get the name of the current working directory, and put it in SIZE bytes of BUF. Returns NULL if the directory couldn't be determined (perhaps because the absolute name was longer than PATH_MAX, or because of missing readsearch permissions on parent directories) or SIZE was too small. If successful, returns BUF. If BUF is NULL, an array is allocated with 'malloc'; the array is SIZE bytes long, unless SIZE == 0, in which case it is as big as necessary. 
Name: __getcwd; Comment: Get the name of the current working directory, and put it in SIZE bytes of BUF. Returns NULL if the directory couldn't be determined or SIZE was too small. If successful, returns BUF. In GNU, if BUF is NULL, an array is allocated with 'malloc'; the array is SIZE bytes long, unless SIZE == 0, in which case it is as big as necessary. 
Name: getdelim; Comment: Read up to (and including) a DELIMITER from FP into *LINEPTR (and NUL-terminate it). *LINEPTR is a pointer returned from malloc (or NULL), pointing to *N characters of space. It is realloc'ed as necessary. Returns the number of characters read (not including the null terminator), or -1 on error or EOF. 
Name: map_to_failure; Comment: getfilecon, lgetfilecon, and fgetfilecon can all misbehave, be it via an old version of libselinux where these would return 0 and set the result context to NULL, or via a modern kernel+lib operating on a file from a disk whose attributes were set by a kernel from around 2006. In that latter case, the functions return a length of 10 for the "unlabeled" context. Map both failures to a return value of -1, and set errno to ENOTSUP in the first case, and ENODATA in the latter. 
Name: getgroups; Comment: Provide a stub that fails with ENOSYS, since there is no group information available on mingw. 
Name: rpl_getgroups; Comment: On at least Ultrix 4.3 and NextStep 3.2, getgroups (0, NULL) always fails. On other systems, it returns the number of supplemental groups for the process. This function handles that special case and lets the system-provided function handle all others. However, it can fail with ENOMEM if memory is tight. It is unspecified whether the effective group id is included in the list. 
Name: gethostname; Comment: Put up to LEN chars of the host name into NAME. Null terminate it if the name is shorter than LEN. Return 0 if ok, -1 if error. 
Name: gethrxtime; Comment: Get the current time, as a count of the number of nanoseconds since an arbitrary epoch (e.g., the system boot time). Prefer a high-resolution clock that is not subject to resetting or drifting. 
Name: getline; Comment: Written by Simon Josefsson. 
Name: getloadavg; Comment: Put the 1 minute, 5 minute and 15 minute load averages into the first NELEM elements of LOADAVG. Return the number written (never more than 3, but may be less than NELEM), or -1 (setting errno) if an error occurred. 
Name: exchange; Comment: Exchange two adjacent subsequences of ARGV. One subsequence is elements [first_nonopt,last_nonopt) which contains all the non-options that have been skipped so far. The other is elements [last_nonopt,optind), which contains all the options processed since those non-options were skipped. 'first_nonopt' and 'last_nonopt' are relocated so that they describe the new indices of the non-options in ARGV after they are moved. 
Name: _getopt_initialize; Comment: Initialize the internal data when the first call is made. 
Name: _getopt_internal_r; Comment: Scan elements of ARGV (whose length is ARGC) for option characters given in OPTSTRING. If an element of ARGV starts with '-', and is not exactly "-" or "--", then it is an option element. The characters of this element (aside from the initial '-') are option characters. If 'getopt' is called repeatedly, it returns successively each of the option characters from each of the option elements. If 'getopt' finds another option character, it returns that character, updating 'optind' and 'nextchar' so that the next call to 'getopt' can resume the scan with the following option character or ARGV-element. If there are no more option characters, 'getopt' returns -1. Then 'optind' is the index in ARGV of the first ARGV-element that is not an option. (The ARGV-elements have been permuted so that those that are not options now come last.) OPTSTRING is a string containing the legitimate option characters. If an option character is seen that is not listed in OPTSTRING, return '?' after printing an error message. If you set 'opterr' to zero, the error message is suppressed but we still return '?'. If a char in OPTSTRING is followed by a colon, that means it wants an arg, so the following text in the same ARGV-element, or the text of the following ARGV-element, is returned in 'optarg'. Two colons mean an option that wants an optional arg; if there is text in the current ARGV-element, it is returned in 'optarg', otherwise 'optarg' is set to zero. If OPTSTRING starts with '-' or '+', it requests different methods of handling the non-option ARGV-elements. See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above. Long-named options begin with '--' instead of '-'. Their names may be abbreviated as long as the abbreviation is unique or is an exact match for some defined option. If they have an argument, it follows the option name in the same ARGV-element, separated from the option name by a '=', or else the in next ARGV-element. When 'getopt' finds a long-named option, it returns 0 if that option's 'flag' field is nonzero, the value of the option's 'val' field if the 'flag' field is zero. The elements of ARGV aren't really const, because we permute them. But we pretend they're const in the prototype to be compatible with other systems. LONGOPTS is a vector of 'struct option' terminated by an element containing a name which is zero. LONGIND returns the index in LONGOPT of the long-named option found. It is only valid when a long-named option has been found by the most recent call. If LONG_ONLY is nonzero, '-' as well as '--' can introduce long-named options. 
Name: main; Comment: Compile with -DTEST to make an executable for use in testing the above definition of 'getopt'. 
Name: gettime; Comment: Get the system time into *TS. 
Name: rpl_localtime; Comment: This is a wrapper for localtime. It is used only on systems for which gettimeofday clobbers the static buffer used for localtime's result. On the first call, record the address of the static buffer that localtime uses for its result. 
Name: rpl_gmtime; Comment: Same as above, since gmtime and localtime use the same buffer. 
Name: rpl_tzset; Comment: This is a wrapper for tzset, for systems on which tzset may clobber the static buffer used for localtime's result. 
Name: gettimeofday; Comment: This is a wrapper for gettimeofday. It is used only on systems that lack this function, or whose implementation of this function causes problems. 
Name: getugroups; Comment: Mingw lacks all things related to group management. The best we can do is fail with ENOSYS. Bionic declares e.g. getgrent() in <grp.h> but it isn't actually defined in the library. 
Name: getugroups; Comment: Like 'getgroups', but for user USERNAME instead of for the current process. Store at most MAXCOUNT group IDs in the GROUPLIST array. If GID is not -1, store it first (if possible). GID should be the group ID (pw_gid) obtained from getpwuid, in case USERNAME is not listed in /etc/groups. Upon failure, set errno and return -1. Otherwise, return the number of IDs we've written into GROUPLIST. 
Name: getusershell; Comment: Return an entry from the shells file, ignoring comment lines. If the file doesn't exist, use the list in DEFAULT_SHELLS (above). In any case, the returned string is in memory allocated through malloc. Return NULL if there are no more entries. 
Name: setusershell; Comment: Rewind the shells file. 
Name: endusershell; Comment: Close the shells file. 
Name: readname; Comment: Read a line from STREAM, removing any newline at the end. Place the result in *NAME, which is malloc'd and/or realloc'd as necessary and can start out NULL, and whose size is passed and returned in *SIZE. Return the number of bytes placed in *NAME if some nonempty sequence was found, otherwise 0. 
Name: group_member; Comment: Return non-zero if GID is one that we have in our groups list. Note that the groups list is not guaranteed to contain the current or effective group ID, so they should generally be checked separately. 
Name: hard_locale; Comment: Return true if the current CATEGORY locale is hard, i.e. if you can't get away with assuming traditional C or POSIX behavior. 
Name: hash_pjw; Comment: A hash function for NUL-terminated char* strings using the method described by Bruno Haible. See http://www.haible.de/bruno/hashfunc.html. 
Name: triple_hash; Comment: Hash an F_triple, and *do* consider the file name. 
Name: triple_hash_no_name; Comment: Hash an F_triple, without considering the file name. 
Name: triple_compare; Comment: Compare two F_triple structs. 
Name: triple_free; Comment: Free an F_triple. 
Name: hash_get_n_buckets; Comment: Return the number of buckets in the hash table. The table size, the total number of buckets (used plus unused), or the maximum number of slots, are the same quantity. 
Name: hash_get_n_buckets_used; Comment: Return the number of slots in use (non-empty buckets). 
Name: hash_get_n_entries; Comment: Return the number of active entries. 
Name: hash_get_max_bucket_length; Comment: Return the length of the longest chain (bucket). 
Name: hash_table_ok; Comment: Do a mild validation of a hash table, by traversing it and checking two statistics. 
Name: safe_hasher; Comment: Hash KEY and return a pointer to the selected bucket. If TABLE->hasher misbehaves, abort. 
Name: hash_lookup; Comment: If ENTRY matches an entry already in the hash table, return the entry from the table. Otherwise, return NULL. 
Name: hash_get_first; Comment: Return the first data in the table, or NULL if the table is empty. 
Name: hash_get_next; Comment: Return the user data for the entry following ENTRY, where ENTRY has been returned by a previous call to either 'hash_get_first' or 'hash_get_next'. Return NULL if there are no more entries. 
Name: hash_get_entries; Comment: Fill BUFFER with pointers to active user entries in the hash table, then return the number of pointers copied. Do not copy more than BUFFER_SIZE pointers. 
Name: hash_do_for_each; Comment: Call a PROCESSOR function for each entry of a hash table, and return the number of entries for which the processor function returned success. A pointer to some PROCESSOR_DATA which will be made available to each call to the processor function. The PROCESSOR accepts two arguments: the first is the user entry being walked into, the second is the value of PROCESSOR_DATA as received. The walking continue for as long as the PROCESSOR function returns nonzero. When it returns zero, the walking is interrupted. 
Name: hash_string; Comment: About hashings, Paul Eggert writes to me (FP), on 1994-01-01: "Please see B. J. McKenzie, R. Harries & T. Bell, Selecting a hashing algorithm, Software--practice & experience 20, 2 (Feb 1990), 209-224. Good hash algorithms tend to be domain-specific, so what's good for [diffutils'] io.c may not be good for your application." 
Name: hash_string; Comment: This one comes from 'recode', and performs a bit better than the above as per a few experiments. It is inspired from a hashing routine found in the very old Cyber 'snoop', itself written in typical Greg Mansfield style. (By the way, what happened to this excellent man? Is he still alive?) 
Name: is_prime; Comment: Return true if CANDIDATE is a prime number. CANDIDATE should be an odd number at least equal to 11. 
Name: next_prime; Comment: Round a given CANDIDATE number up to the nearest prime, and return that prime. Primes lower than 10 are merely skipped. 
Name: raw_hasher; Comment: If the user passes a NULL hasher, we hash the raw pointer. 
Name: raw_comparator; Comment: If the user passes a NULL comparator, we use pointer comparison. 
Name: check_tuning; Comment: For the given hash TABLE, check the user supplied tuning structure for reasonable values, and return true if there is no gross error with it. Otherwise, definitively reset the TUNING field to some acceptable default in the hash table (that is, the user loses the right of further modifying tuning arguments), and return false. 
Name: compute_bucket_size; Comment: Compute the size of the bucket array for the given CANDIDATE and TUNING, or return 0 if there is no possible way to allocate that many entries. 
Name: hash_initialize; Comment: Allocate and return a new hash table, or NULL upon failure. The initial number of buckets is automatically selected so as to _guarantee_ that you may insert at least CANDIDATE different user entries before any growth of the hash table size occurs. So, if have a reasonably tight a-priori upper bound on the number of entries you intend to insert in the hash table, you may save some table memory and insertion time, by specifying it here. If the IS_N_BUCKETS field of the TUNING structure is true, the CANDIDATE argument has its meaning changed to the wanted number of buckets. TUNING points to a structure of user-supplied values, in case some fine tuning is wanted over the default behavior of the hasher. If TUNING is NULL, the default tuning parameters are used instead. If TUNING is provided but the values requested are out of bounds or might cause rounding errors, return NULL. The user-supplied HASHER function, when not NULL, accepts two arguments ENTRY and TABLE_SIZE. It computes, by hashing ENTRY contents, a slot number for that entry which should be in the range 0..TABLE_SIZE-1. This slot number is then returned. The user-supplied COMPARATOR function, when not NULL, accepts two arguments pointing to user data, it then returns true for a pair of entries that compare equal, or false otherwise. This function is internally called on entries which are already known to hash to the same bucket index, but which are distinct pointers. The user-supplied DATA_FREER function, when not NULL, may be later called with the user data as an argument, just before the entry containing the data gets freed. This happens from within 'hash_free' or 'hash_clear'. You should specify this function only if you want these functions to free all of your 'data' data. This is typically the case when your data is simply an auxiliary struct that you have malloc'd to aggregate several values. 
Name: hash_clear; Comment: Make all buckets empty, placing any chained entries on the free list. Apply the user-specified function data_freer (if any) to the datas of any affected entries. 
Name: hash_free; Comment: Reclaim all storage associated with a hash table. If a data_freer function has been supplied by the user when the hash table was created, this function applies it to the data of each entry before freeing that entry. 
Name: allocate_entry; Comment: Get a new hash entry for a bucket overflow, possibly by recycling a previously freed one. If this is not possible, allocate a new one. 
Name: free_entry; Comment: Free a hash entry which was part of some bucket overflow, saving it for later recycling. 
Name: hash_find_entry; Comment: This private function is used to help with insertion and deletion. When ENTRY matches an entry in the table, return a pointer to the corresponding user data and set *BUCKET_HEAD to the head of the selected bucket. Otherwise, return NULL. When DELETE is true and ENTRY matches an entry in the table, unlink the matching entry. 
Name: transfer_entries; Comment: Internal helper, to move entries from SRC to DST. Both tables must share the same free entry list. If SAFE, only move overflow entries, saving bucket heads for later, so that no allocations will occur. Return false if the free entry list is exhausted and an allocation fails. 
Name: hash_rehash; Comment: For an already existing hash table, change the number of buckets through specifying CANDIDATE. The contents of the hash table are preserved. The new number of buckets is automatically selected so as to _guarantee_ that the table may receive at least CANDIDATE different user entries, including those already in the table, before any other growth of the hash table size occurs. If TUNING->IS_N_BUCKETS is true, then CANDIDATE specifies the exact number of buckets desired. Return true iff the rehash succeeded. 
Name: hash_insert_if_absent; Comment: Insert ENTRY into hash TABLE if there is not already a matching entry. Return -1 upon memory allocation failure. Return 1 if insertion succeeded. Return 0 if there is already a matching entry in the table, and in that case, if MATCHED_ENT is non-NULL, set *MATCHED_ENT to that entry. This interface is easier to use than hash_insert when you must distinguish between the latter two cases. More importantly, hash_insert is unusable for some types of ENTRY values. When using hash_insert, the only way to distinguish those cases is to compare the return value and ENTRY. That works only when you can have two different ENTRY values that point to data that compares "equal". Thus, when the ENTRY value is a simple scalar, you must use hash_insert_if_absent. ENTRY must not be NULL. 
Name: hash_insert; Comment: If ENTRY matches an entry already in the hash table, return the pointer to the entry from the table. Otherwise, insert ENTRY and return ENTRY. Return NULL if the storage required for insertion cannot be allocated. This implementation does not support duplicate entries or insertion of NULL. 
Name: hash_delete; Comment: If ENTRY is already in the table, remove it and return the just-deleted data (the user may want to deallocate its storage). If ENTRY is not in the table, don't modify the table and return NULL. 
Name: heap_alloc; Comment: Allocate memory for the heap. 
Name: heap_insert; Comment: Insert element into heap. 
Name: heap_remove_top; Comment: Pop top element off heap. 
Name: heapify_down; Comment: Move element down into appropriate position in heap. 
Name: heapify_up; Comment: Move element up into appropriate position in heap. 
Name: adjust_value; Comment: If INEXACT_STYLE is not human_round_to_nearest, and if easily possible, adjust VALUE according to the style. 
Name: group_number; Comment: Group the digits of NUMBER according to the grouping rules of the current locale. NUMBER contains NUMBERLEN digits. Modify the bytes pointed to by NUMBER in place, subtracting 1 from NUMBER for each byte inserted. Return the starting address of the modified number. To group the digits, use GROUPING and THOUSANDS_SEP as in 'struct lconv' from <locale.h>. 
Name: human_readable; Comment: Convert N to a human readable format in BUF, using the options OPTS. N is expressed in units of FROM_BLOCK_SIZE. FROM_BLOCK_SIZE must be nonnegative. Use units of TO_BLOCK_SIZE in the output number. TO_BLOCK_SIZE must be positive. Use (OPTS & (human_round_to_nearest | human_floor | human_ceiling)) to determine whether to take the ceiling or floor of any result that cannot be expressed exactly. If (OPTS & human_group_digits), group the thousands digits according to the locale, e.g., "1,000,000" in an American English locale. If (OPTS & human_autoscale), deduce the output block size automatically; TO_BLOCK_SIZE must be 1 but it has no effect on the output. Use powers of 1024 if (OPTS & human_base_1024), and powers of 1000 otherwise. For example, assuming powers of 1024, 8500 would be converted to 8.3, 133456345 to 127, 56990456345 to 53, and so on. Numbers smaller than the power aren't modified. human_autoscale is normally used together with human_SI. If (OPTS & human_space_before_unit), use a space to separate the number from any suffix that is appended as described below. If (OPTS & human_SI), append an SI prefix indicating which power is being used. If in addition (OPTS & human_B), append "B" (if base 1000) or "iB" (if base 1024) to the SI prefix. When ((OPTS & human_SI) && ! (OPTS & human_autoscale)), TO_BLOCK_SIZE must be a power of 1024 or of 1000, depending on (OPTS & human_base_1024). 
Name: utf16be_mbtowc; Comment: Specification: RFC 2781 
Name: utf16le_mbtowc; Comment: Specification: RFC 2781 
Name: utf32be_mbtowc; Comment: Specification: Unicode 3.1 Standard Annex #19 
Name: utf32le_mbtowc; Comment: Specification: Unicode 3.1 Standard Annex #19 
Name: getuser; Comment: Translate UID to a login name, with cache, or NULL if unresolved. 
Name: getuidbyname; Comment: Translate USER to a UID, with cache. Return NULL if there is no such user. (We also cache which user names have no passwd entry, so we don't keep looking them up.) 
Name: getgroup; Comment: Translate GID to a group name, with cache, or NULL if unresolved. 
Name: getgidbyname; Comment: Translate GROUP to a GID, with cache. Return NULL if there is no such group. (We also cache which group names have no group entry, so we don't keep looking them up.) 
Name: inet_ntop; Comment: char* inet_ntop(af, src, dst, size) convert a network format address to presentation format. return: pointer to presentation format address ('dst'), or NULL (see errno). author: Paul Vixie, 1996. 
Name: inet_ntop4; Comment: const char* inet_ntop4(src, dst, size) format an IPv4 address return: 'dst' (as a const) notes: (1) uses no statics (2) takes a u_char* not an in_addr as input author: Paul Vixie, 1996. 
Name: inet_ntop6; Comment: const char* inet_ntop6(src, dst, size) convert IPv6 binary address into presentation (printable) format author: Paul Vixie, 1996. 
Name: ino_hash; Comment: Hash an inode map entry. 
Name: ino_compare; Comment: Return true if two inode map entries are the same. 
Name: ino_map_alloc; Comment: Allocate an inode map that will hand out integers starting with NEXT_MAPPED_INO. Return NULL if memory is exhausted. 
Name: ino_map_free; Comment: Free an inode map. 
Name: ino_map_insert; Comment: Insert into MAP the inode number INO if it's not there already, and return its nonnegative mapped inode number. If INO is already in MAP, return the existing mapped inode number. Return INO_MAP_INSERT_FAILURE on memory or counter exhaustion. 
Name: isapipe; Comment: Return 1 if FD is a pipe, 0 if not, -1 (setting errno) on error. Test fairly strictly whether FD is a pipe. lseek and checking for ESPIPE does not suffice, since many non-pipe files cause lseek to fail with errno == ESPIPE. 
Name: isatty; Comment: Determine whether FD refers to a console device. Return 1 if yes. Return 0 and set errno if no. (ptsname_r relies on the errno value.) 
Name: FUNC; Comment: Most hosts nowadays use IEEE floating point, so they use IEC 60559 representations, have infinities and NaNs, and do not trap on exceptions. Define IEEE_FLOATING_POINT if this host is one of the typical ones. The C11 macro __STDC_IEC_559__ is close to what is wanted here, but is not quite right because this file does not require all the features of C11 Annex F (and does not require C11 at all, for that matter). 
Name: lchown; Comment: Work just like chown, except when FILE is a symbolic link. In that case, set errno to EOPNOTSUPP and return -1. But if autoconf tests determined that chown modifies symlinks, then just call chown. 
Name: rpl_lchown; Comment: Work around trailing slash bugs in lchown. 
Name: initbuffer; Comment: Initialize linebuffer LINEBUFFER for use. 
Name: readlinebuffer_delim; Comment: Read an arbitrarily long line of text from STREAM into LINEBUFFER. Consider lines to be terminated by DELIMITER. Keep the delimiter; append DELIMITER if it's the last line of a file that ends in a character other than DELIMITER. Do not NUL-terminate. Therefore the stream can contain NUL bytes, and the length (including the delimiter) is returned in linebuffer->length. Return NULL when stream is empty. Return NULL and set errno upon error; callers can distinguish this case from the empty case by invoking ferror (stream). Otherwise, return LINEBUFFER. 
Name: freebuffer; Comment: Free the buffer that was allocated for linebuffer LINEBUFFER. 
Name: rpl_link; Comment: Create a hard link from FILE1 to FILE2, working around platform bugs. 
Name: linkat; Comment: Create a link to FILE1, in the directory open on descriptor FD1, to FILE2, in the directory open on descriptor FD2. If FILE1 is a symlink, FLAG controls whether to dereference FILE1 first. If possible, do it without changing the working directory. Otherwise, resort to using save_cwd/fchdir, then rename/restore_cwd. If either the save_cwd or the restore_cwd fails, then give a diagnostic and exit nonzero. 
Name: linkat_follow; Comment: Create a link. If FILE1 is a symlink, create a hardlink to the canonicalized file. 
Name: rpl_linkat; Comment: Like linkat, but guarantee that AT_SYMLINK_FOLLOW works even on older Linux kernels. 
Name: localeconv; Comment: Override for platforms where 'struct lconv' lacks the int_p_*, int_n_* members. 
Name: localeconv; Comment: Override for platforms where 'struct lconv' is a dummy. 
Name: rpl_lstat; Comment: lstat works differently on Linux and Solaris systems. POSIX (see "pathname resolution" in the glossary) requires that programs like 'ls' take into consideration the fact that FILE has a trailing slash when FILE is a symbolic link. On Linux and Solaris 10 systems, the lstat function already has the desired semantics (in treating 'lstat ("symlink/", sbuf)' just like 'lstat ("symlink/.", sbuf)', but on Solaris 9 and earlier it does not. If FILE has a trailing slash and specifies a symbolic link, then use stat() to get more info on the referent of FILE. If the referent is a non-directory, then set errno to ENOTDIR and return -1. Otherwise, return stat's result. 
Name: rpl_malloc; Comment: Allocate an N-byte block of memory from the heap. If N is zero, allocate a 1-byte block. 
Name: rpl_mbrtowc; Comment: Override the system's mbrtowc() function. 
Name: wc_ensure_printable; Comment: Replace non printable chars. Note _t and _n etc. are non printable. Return 1 if replacement made, 0 otherwise. 
Name: wc_truncate; Comment: Truncate wchar string to width cells.Returns number of cells used. 
Name: mbs_align_pad; Comment: Write N_SPACES space characters to DEST while ensuring nothing is written beyond DEST_END. A terminating NUL is always added to DEST. A pointer to the terminating NUL is returned. 
Name: mbsalign; Comment: Align a string, SRC, in a field of *WIDTH columns, handling multi-byte characters; write the result into the DEST_SIZE-byte buffer, DEST. ALIGNMENT specifies whether to left- or right-justify or to center. If SRC requires more than *WIDTH columns, truncate it to fit. When centering, the number of trailing spaces may be one less than the number of leading spaces. Return the length in bytes required for the final result, not counting the trailing NUL. A return value of DEST_SIZE or larger means there wasn't enough space. DEST will be NUL terminated in any case. Return SIZE_MAX upon error (invalid multi-byte sequence in SRC, or malloc failure), unless MBA_UNIBYTE_FALLBACK is specified. Update *WIDTH to indicate how many columns were used before padding. 
Name: ambsalign; Comment: A wrapper around mbsalign() to dynamically allocate the minimum amount of memory to store the result. Return NULL on failure. 
Name: mbscasecmp; Comment: Compare the character strings S1 and S2, ignoring case, returning less than, equal to or greater than zero if S1 is lexicographically less than, equal to or greater than S2. Note: This function may, in multibyte locales, return 0 for strings of different lengths! 
Name: mbsinit; Comment: On native Windows, 'mbstate_t' is defined as 'int'. 
Name: mbslen; Comment: Return the number of multibyte characters in the character string STRING. 
Name: knuth_morris_pratt_multibyte; Comment: Knuth-Morris-Pratt algorithm. See http:en.wikipedia.orgwikiKnuth-Morris-Pratt_algorithm Return a boolean indicating success: Return true and set *RESULTP if the search was completed. Return false if it was aborted because not enough memory was available. 
Name: mbsstr; Comment: Find the first occurrence of the character string NEEDLE in the character string HAYSTACK. Return NULL if NEEDLE is not found in HAYSTACK. 
Name: mbswidth; Comment: Returns the number of columns needed to represent the multibyte character string pointed to by STRING. If a non-printable character occurs, and MBSW_REJECT_UNPRINTABLE is specified, -1 is returned. With flags = MBSW_REJECT_INVALID | MBSW_REJECT_UNPRINTABLE, this is the multibyte analogue of the wcswidth function. 
Name: mbsnwidth; Comment: Returns the number of columns needed to represent the multibyte character string pointed to by STRING of length NBYTES. If a non-printable character occurs, and MBSW_REJECT_UNPRINTABLE is specified, -1 is returned. 
Name: set_uint32; Comment: Copy the 4 byte value from v into the memory location pointed to by *cp, If your architecture allows unaligned access this is equivalent to (uint32_t *) cp = v 
Name: md5_read_ctx; Comment: Put result from CTX in first 16 bytes following RESBUF. The result must be in little endian byte order. 
Name: md5_finish_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. 
Name: memcasecmp; Comment: Like memcmp, but ignore differences in case. Convert to upper case (not lower) before comparing so that join -i works with sort -f. 
Name: __memchr; Comment: Search no more than N bytes of S for C. 
Name: memchr2; Comment: Return the first address of either C1 or C2 (treated as unsigned char) that occurs within N bytes of the memory region S. If neither byte appears, return NULL. 
Name: strcoll_loop; Comment: Compare S1 (with size S1SIZE) and S2 (with length S2SIZE) according to the LC_COLLATE locale. S1 and S2 are both blocks of memory with nonzero sizes, and the last byte in each block must be a null byte. Set errno to an error number if there is an error, and to zero otherwise. 
Name: memcoll; Comment: Compare S1 (with length S1LEN) and S2 (with length S2LEN) according to the LC_COLLATE locale. S1 and S2 do not overlap, and are not adjacent. Perhaps temporarily modify the bytes after S1 and S2, but restore their original contents before returning. Set errno to an error number if there is an error, and to zero otherwise. 
Name: memcoll0; Comment: Compare S1 (a memory block of size S1SIZE, with a NUL as last byte) and S2 (a memory block of size S2SIZE, with a NUL as last byte) according to the LC_COLLATE locale. S1SIZE and S2SIZE must be > 0. Set errno to an error number if there is an error, and to zero otherwise. 
Name: mempcpy; Comment: Copy N bytes of SRC to DEST, return pointer to bytes after the last written byte. 
Name: __memrchr; Comment: Search no more than N bytes of S for C. 
Name: mgetgroups; Comment: Like getugroups, but store the result in malloc'd storage. Set *GROUPS to the malloc'd list of all group IDs of which USERNAME is a member. If GID is not -1, store it first. GID should be the group ID (pw_gid) obtained from getpwuid, in case USERNAME is not listed in the groups database (e.g., /etc/groups). If USERNAME is NULL, store the supplementary groups of the current process, and GID should be -1 or the effective group ID (getegid). Upon failure, don't modify *GROUPS, set errno, and return -1. Otherwise, return the number of groups. The resulting list may contain duplicates, but adjacent members will be distinct. 
Name: mkancesdirs; Comment: Ensure that the ancestor directories of FILE exist, using an algorithm that should work even if two processes execute this function in parallel. Modify FILE as necessary to access the ancestor directories, but restore FILE to an equivalent value if successful. WD points to the working directory, using the conventions of savewd. Create any ancestor directories that don't already exist, by invoking MAKE_DIR (FILE, COMPONENT, MAKE_DIR_ARG). This function should return 0 if successful, -1 (setting errno) otherwise. If COMPONENT is relative, it is relative to the temporary working directory, which may differ from *WD. Ordinarily MAKE_DIR is executed with the working directory changed to reflect the already-made prefix, and mkancesdirs returns with the working directory changed a prefix of FILE. However, if the initial working directory cannot be saved in a file descriptor, MAKE_DIR is invoked in a subprocess and this function returns in both the parent and child process, so the caller should not assume any changed state survives other than the EXITMAX component of WD, and the caller should take care that the parent does not attempt to do the work that the child is doing. If successful and if this process can go ahead and create FILE, return the length of the prefix of FILE that has already been made. If successful so far but a child process is doing the actual work, return -2. If unsuccessful, return -1 and set errno. 
Name: make_dir_parents; Comment: None here, MODE is affected by the umask in the usual way. It is also OK if MAKE_ANCESTOR is not null and a directory DIR already exists. Call ANNOUNCE (DIR, OPTIONS) just after successfully making DIR, even if some of the following actions fail. Set DIR's owner to OWNER and group to GROUP, but leave the owner alone if OWNER is (uid_t) -1, and similarly for GROUP. Set DIR's mode bits to MODE, except preserve any of the bits that correspond to zero bits in MODE_BITS. In other words, MODE_BITS is a mask that specifies which of DIR's mode bits should be set or cleared. Changing the mode in this way is necessary if DIR already existed, if MODE and MODE_BITS specify non-permissions bits like S_ISUID, or if MODE and MODE_BITS specify permissions bits that are masked out by the umask. MODE_BITS should be a subset of CHMOD_MODE_BITS. However, if PRESERVE_EXISTING is true and DIR already exists, do not attempt to set DIR's ownership and file mode bits. Return true if DIR exists as a directory with the proper ownership and file mode bits when done, or if a child process has been dispatched to do the real work (though the child process may not have finished yet -- it is the caller's responsibility to handle this). Report a diagnostic and return false on failure, storing '_0' into *DIR if an ancestor directory had problems. 
Name: rpl_mkdir; Comment: This function is required at least for NetBSD 1.5.2. 
Name: mkfifo; Comment: Mingw lacks mkfifo; always fail with ENOSYS. 
Name: rpl_mkfifo; Comment: Create a named fifo FILE, with access permissions in MODE. Workaround trailing slash bugs. 
Name: mknod; Comment: Mingw lacks mknod; always fail with ENOSYS. 
Name: rpl_mknod; Comment: Create a file system node FILE, with access permissions and file type in MODE, and device type in DEV. Usually, non-root applications can only create named fifos (mode includes S_IFIFO), with DEV set to 0. Also work around trailing slash bugs. 
Name: mkstemp_safer; Comment: Like mkstemp, but do not return STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. 
Name: mkostemp_safer; Comment: Like mkostemp, but do not return STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. 
Name: mkostemps_safer; Comment: Like mkostemps, but do not return STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. 
Name: mkstemps_safer; Comment: Like mkstemps, but do not return STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. 
Name: mkstemp; Comment: None they are replaced with a string that makes the file name unique. Then open the file and return a fd. If you are creating temporary files which will later be removed, consider using the clean-temp module, which avoids several pitfalls of using mkstemp directly. 
Name: shr; Comment: Shift A right by B bits portably, by dividing A by 2**B and truncating towards minus infinity. B should be in the range 0 <= B <= LONG_INT_BITS - 2, where LONG_INT_BITS is the number of useful bits in a long_int. LONG_INT_BITS is at least 32. ISO C99 says that A >> B is implementation-defined if A < 0. Some implementations (e.g., UNICOS 9.0 on a Cray Y-MP EL) don't shift right in the usual way when A < 0, so SHR falls back on division if ordinary A >> B doesn't seem to be the usual signed shift. 
Name: leapyear; Comment: Is YEAR + TM_YEAR_BASE a leap year? 
Name: isdst_differ; Comment: Do the values A and B differ according to the rules for tm_isdst? A and B differ if one is zero and the other positive. 
Name: ydhms_diff; Comment: Return an integer value measuring (YEAR1-YDAY1 HOUR1:MIN1:SEC1) - (YEAR0-YDAY0 HOUR0:MIN0:SEC0) in seconds, assuming that the clocks were not adjusted between the time stamps. The YEAR values uses the same numbering as TP->tm_year. Values need not be in the usual range. However, YEAR1 must not overflow when multiplied by three times the number of seconds in a year, and likewise for YDAY1 and three times the number of seconds in a day. 
Name: long_int_avg; Comment: Return the average of A and B, even if A + B would overflow. Round toward positive infinity. 
Name: guess_time_tm; Comment: Return a time_t value corresponding to (YEAR-YDAY HOUR:MIN:SEC), assuming that T corresponds to TP and that no clock adjustments occurred between TP and the desired time. Although T and the returned value are of type long_int, they represent time_t values and must be in time_t range. If TP is null, return a value not equal to T; this avoids false matches. YEAR and YDAY must not be so large that multiplying them by three times the number of seconds in a year (or day, respectively) would overflow long_int. If the returned value would be out of range, yield the minimal or maximal in-range value, except do not yield a value equal to T. 
Name: convert_time; Comment: Use CONVERT to convert T to a struct tm value in *TM. T must be in range for time_t. Return TM if successful, NULL if T is out of range for CONVERT. 
Name: ranged_convert; Comment: Use CONVERT to convert *T to a broken down time in *TP. If *T is out of range for conversion, adjust it so that it is the nearest in-range value and then convert that. A value is in range if it fits in both time_t and long_int. 
Name: __mktime_internal; Comment: Convert *TP to a time_t value, inverting the monotonic and mostly-unit-linear conversion function CONVERT. Use *OFFSET to keep track of a guess at the offset of the result, compared to what the result would be for UTC without leap seconds. If *OFFSET's guess is correct, only one CONVERT call is needed. This function is external because it is used also by timegm.c. 
Name: mktime; Comment: Convert *TP to a time_t value. 
Name: octal_to_mode; Comment: Convert OCTAL, which uses one of the traditional octal values, to an internal mode_t value. 
Name: make_node_op_equals; Comment: Return a mode_change array with the specified "=ddd"-style mode change operation, where NEW_MODE is "ddd" and MENTIONED contains the bits explicitly mentioned in the mode are MENTIONED. 
Name: mode_compile; Comment: Return a pointer to an array of file mode change operations created from MODE_STRING, an ASCII string that contains either an octal number specifying an absolute mode, or symbolic mode change operations with the form: [ugoa...][[+-=][rwxXstugo...]...][,...] Return NULL if 'mode_string' does not contain a valid representation of file mode change operations. 
Name: mode_create_from_ref; Comment: Return a file mode change operation that sets permissions to match those of REF_FILE. Return NULL (setting errno) if REF_FILE can't be accessed. 
Name: mode_adjust; Comment: Return the file mode bits of OLDMODE (which is the mode of a directory if DIR), assuming the umask is UMASK_VALUE, adjusted as indicated by the list of change operations CHANGES. If DIR, the type 'X' change affects the returned value even if no execute bits were set in OLDMODE, and set user and group ID bits are preserved unless CHANGES mentioned them. If PMODE_BITS is not null, store into *PMODE_BITS a mask denoting file mode bits that are affected by CHANGES. The returned value and *PMODE_BITS contain only file mode bits. For example, they have the S_IFMT bits cleared on a standard Unix-like host. 
Name: me_remote; Comment: '; so it requires a native Windows call to determine remote disks. 
Name: dev_from_mount_options; Comment: Return the device number from MOUNT_OPTIONS, if possible. Otherwise return (dev_t) -1. 
Name: unescape_tab; Comment: Unescape the paths in mount tables. STR is updated in place. 
Name: read_file_system_list; Comment: Return a list of the currently mounted file systems, or NULL on error. Add each entry to the tail of the list so that they stay in order. If NEED_FS_TYPE is true, ensure that the file system type fields in the returned list are valid. Otherwise, they might not be. 
Name: free_mount_entry; Comment: Free a mount entry as returned from read_file_system_list (). 
Name: mpsort_into_tmp; Comment: Sort a vector BASE containing N pointers, placing the sorted array into TMP. Compare pointers with CMP. N must be at least 2. 
Name: mpsort_with_tmp; Comment: Sort a vector BASE containing N pointers, in place. Use TMP (containing N / 2 pointers) for temporary storage. Compare pointers with CMP. 
Name: mpsort; Comment: Sort a vector BASE containing N pointers, in place. BASE must contain enough storage to hold N + N 2 vectors; the trailing vectors are used for temporaries. Compare pointers with CMP. 
Name: nanosleep; Comment: The Windows API function Sleep() has a resolution of about 15 ms and takes at least 5 ms to execute. We use this function for longer time periods. Additionally, we use busy-looping over short time periods, to get a resolution of about 0.01 ms. In order to measure such short timespans, we use the QueryPerformanceCounter() function. 
Name: sighandler; Comment: Handle SIGCONT. 
Name: my_usleep; Comment: Suspend execution for at least *TS_DELAY seconds. 
Name: nanosleep; Comment: Suspend execution for at least *REQUESTED_DELAY seconds. The *REMAINING_DELAY part isn't implemented yet. 
Name: ctype_codeset; Comment: Return the codeset of the current locale, if this is easily deducible. Otherwise, return "". 
Name: rpl_nl_langinfo; Comment: Override nl_langinfo with support for added nl_item values. 
Name: nl_langinfo; Comment: Provide nl_langinfo from scratch, either for native MS-Windows, or for old Unix platforms without locales, such as Linux libc5 or BeOS. 
Name: num_processors_via_affinity_mask; Comment: Return the number of processors available to the current process, based on a modern system call that returns the "affinity" between the current process and each CPU. Return 0 if unknown or if such a system call does not exist. 
Name: openat_restore_fail; Comment: Exit with an error about failure to restore the working directory during an openat emulation. The caller must ensure that fd 2 is not a just-opened fd, even when openat_safer is not in use. 
Name: openat_proc_name; Comment: Set BUF to the name of the subfile of the directory identified by FD, where the subfile is named FILE. If successful, return BUF if the result fits in BUF, dynamically allocated memory otherwise. Return NULL (setting errno) on error. 
Name: rpl_openat; Comment: Like openat, but work around Solaris 9 bugs with trailing slash. 
Name: openat; Comment: Replacement for Solaris' openat function. <http:www.google.comsearch?q=openat+site:docs.sun.com> First, try to simulate it via open ("/proc/self/fd/FD/FILE"). Failing that, simulate it by doing save_cwd/fchdir/open/restore_cwd. If either the save_cwd or the restore_cwd fails (relatively unlikely), then give a diagnostic and exit nonzero. Otherwise, upon failure, set errno and return -1, as openat does. Upon successful completion, return a file descriptor. 
Name: openat_permissive; Comment: Like openat (FD, FILE, FLAGS, MODE), but if CWD_ERRNO is nonnull, set *CWD_ERRNO to an errno value if unable to save or restore the initial working directory. This is needed only the first time remove.c's remove_dir opens a command-line directory argument. If a previous attempt to restore the current working directory failed, then we must not even try to access a '.'-relative name. It is the caller's responsibility not to call this function in that case. 
Name: openat_needs_fchdir; Comment: Return true if our openat implementation must resort to using save_cwd and restore_cwd. 
Name: opendir_safer; Comment: Like opendir, but do not clobber stdin, stdout, or stderr. 
Name: dbg_printf; Comment: Convert a possibly-signed character to an unsigned character. This is a bit safer than casting to unsigned char, since it catches some type errors that the cast doesn't. 
Name: digits_to_date_time; Comment: Extract into *PC any date and time info from a string of digits of the form e.g., YYYYMMDD, YYMMDD, HHMM, HH (and sometimes YYY, YYYY, ...). 
Name: apply_relative_time; Comment: Increment PC->rel by FACTORREL (FACTOR is 1 or -1). 
Name: set_hhmmss; Comment: Set PC-> hour, minutes, seconds and nanoseconds members from arguments. 
Name: debug_print_current_time; Comment: debugging: print the current time in the parser_control structure. The parser will increment "*_seen" members for those which were parsed. This function will print only newly seen parts. 
Name: debug_print_relative_time; Comment: debugging: print the current relative values. 
Name: yystpcpy; Comment: Copy YYSRC to YYDEST, returning the address of the terminating '_0' in YYDEST. 
Name: time_zone_hhmm; Comment: Convert a time zone expressed as HH:MM into an integer count of minutes. If MM is negative, then S is of the form HHMM and needs to be picked apart; otherwise, S is of the form HH. As specified in http:www.opengroup.orgsusv3xbdxbd_chap08.html#tag_08_03, allow only valid TZ range, and consider first two digits as hours, if no minutes specified. 
Name: yyerror; Comment: Do nothing if the parser reports an error. 
Name: mktime_ok; Comment: If *TM0 is the old and *TM1 is the new value of a struct tm after passing it to mktime, return true if it's OK that mktime returned T. It's not OK if *TM0 has out-of-range members. 
Name: get_tz; Comment: Return a copy of TZ, stored in TZBUF if it fits, and heap-allocated otherwise. 
Name: debug_mktime_not_ok; Comment: None 
Name: get_effective_timezone; Comment: Returns the effective local timezone, in minutes. 
Name: parse_datetime; Comment: The original interface: run with debug=false 
Name: parse_datetime2; Comment: Parse a date/time string, storing the resulting time value into *RESULT. The string itself is pointed to by P. Return true if successful. P can be an incomplete or relative time specification; if so, use *NOW as the basis for the returned time. 
Name: pipe_safer; Comment: Like pipe, but ensure that neither of the file descriptors is STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. Fail with ENOSYS on platforms that lack pipe. 
Name: year; Comment: POSIX requires: touch -t [[CC]YY]mmddhhmm[.ss] FILE... 8, 10, or 12 digits, followed by optional .ss (PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS) touch mmddhhmm[YY] FILE... (obsoleted by POSIX 1003.1-2001) 8 or 10 digits, YY (if present) must be in the range 69-99 (PDS_TRAILING_YEAR | PDS_PRE_2000) date mmddhhmm[[CC]YY] 8, 10, or 12 digits (PDS_TRAILING_YEAR | PDS_CENTURY) 
Name: posixtime; Comment: Parse a POSIX-style date, returning true if successful. 
Name: posix2_version; Comment: The POSIX version that utilities should conform to. The default is specified by the system. 
Name: priv_set_ismember; Comment: Check if priv is in the effective set. Returns 1 if priv is a member and 0 if not. Returns -1 on error with errno set appropriately. 
Name: priv_set_remove; Comment: Try to remove priv from the effective set. Returns 0 if priv was removed. Returns -1 on error with errno set appropriately. 
Name: priv_set_restore; Comment: Try to restore priv to the effective set. Returns 0 if priv was re-added to the effective set (after being previously removed by a call to priv_set_remove). Returns -1 on error with errno set appropriately. 
Name: set_program_name; Comment: Set program_name, based on argv[0]. argv0 must be a string allocated with indefinite extent, and must not be modified after this call. 
Name: mbsstr_trimmed_wordbounded; Comment: Tests whether STRING contains trim (SUB), starting and ending at word boundaries. Here, instead of implementing Unicode Standard Annex #29 for determining word boundaries, we assume that trim (SUB) starts and ends with words and only test whether the part before it ends with a non-word and the part after it starts with a non-word. 
Name: proper_name; Comment: Return the localization of NAME. NAME is written in ASCII. 
Name: proper_name_utf8; Comment: Return the localization of a name whose original writing is not ASCII. NAME_UTF8 is the real name, written in UTF-8 with octal or hexadecimal escape sequences. NAME_ASCII is a fallback written only with ASCII characters. 
Name: putenv; Comment: Put STRING, which is of the form "NAME=VALUE", in the environment. If STRING contains no '=', then remove STRING from the environment. 
Name: qcopy_acl; Comment: Copy access control lists from one file to another. If SOURCE_DESC is a valid file descriptor, use file descriptor operations, else use filename based operations on SRC_NAME. Likewise for DEST_DESC and DST_NAME. If access control lists are not available, fchmod the target file to MODE. Also sets the non-permission bits of the destination file (S_ISUID, S_ISGID, S_ISVTX) to those from MODE if any are set. Return 0 if successful. Return -2 and set errno for an error relating to the source file. Return -1 and set errno for an error relating to the destination file. 
Name: qset_acl; Comment: Set the access control lists of a file. If DESC is a valid file descriptor, use file descriptor operations where available, else use filename based operations on NAME. If access control lists are not available, fchmod the target file to MODE. Also sets the non-permission bits of the destination file (S_ISUID, S_ISGID, S_ISVTX) to those from MODE if any are set. Return 0 if successful. Return -1 and set errno upon failure. 
Name: clone_quoting_options; Comment: Allocate a new set of quoting options, with contents initially identical to O if O is not null, or to the default if O is null. It is the caller's responsibility to free the result. 
Name: get_quoting_style; Comment: Get the value of O's quoting style. If O is null, use the default. 
Name: set_quoting_style; Comment: In O (or in the default if O is null), set the value of the quoting style to S. 
Name: set_char_quoting; Comment: In O (or in the default if O is null), set the value of the quoting options for character C to I. Return the old value. Currently, the only values defined for I are 0 (the default) and 1 (which means to quote the character even if it would not otherwise be quoted). 
Name: set_quoting_flags; Comment: In O (or in the default if O is null), set the value of the quoting options flag to I, which can be a bitwise combination of enum quoting_flags, or 0 for default behavior. Return the old value. 
Name: quoting_options_from_style; Comment: NOT PURE!! 
Name: gettext_quote; Comment: MSGID approximates a quotation mark. Return its translation if it has one; otherwise, return either it or "_"", depending on S. S is either clocale_quoting_style or locale_quoting_style. 
Name: quotearg_buffer_restyled; Comment: Place into buffer BUFFER (of size BUFFERSIZE) a quoted version of argument ARG (of size ARGSIZE), using QUOTING_STYLE, FLAGS, and QUOTE_THESE_TOO to control quoting. Terminate the output with a null character, and return the written size of the output, not counting the terminating null. If BUFFERSIZE is too small to store the output string, return the value that would have been returned had BUFFERSIZE been large enough. If ARGSIZE is SIZE_MAX, use the string length of the argument for ARGSIZE. This function acts like quotearg_buffer (BUFFER, BUFFERSIZE, ARG, ARGSIZE, O), except it breaks O into its component pieces and is not careful about errno. 
Name: quotearg_buffer; Comment: Place into buffer BUFFER (of size BUFFERSIZE) a quoted version of argument ARG (of size ARGSIZE), using O to control quoting. If O is null, use the default. Terminate the output with a null character, and return the written size of the output, not counting the terminating null. If BUFFERSIZE is too small to store the output string, return the value that would have been returned had BUFFERSIZE been large enough. If ARGSIZE is SIZE_MAX, use the string length of the argument for ARGSIZE. 
Name: quotearg_alloc; Comment: Equivalent to quotearg_alloc (ARG, ARGSIZE, NULL, O). 
Name: quotearg_alloc_mem; Comment: Like quotearg_buffer (..., ARG, ARGSIZE, O), except return newly allocated storage containing the quoted string, and store the resulting size into *SIZE, if non-NULL. The result can contain embedded null bytes only if ARGSIZE is not SIZE_MAX, SIZE is not NULL, and set_quoting_flags has not set the null byte elision flag. 
Name: quotearg_n_options; Comment: Use storage slot N to return a quoted version of argument ARG. ARG is of size ARGSIZE, but if that is SIZE_MAX, ARG is a null-terminated string. OPTIONS specifies the quoting options. The returned value points to static storage that can be reused by the next call to this function with the same value of N. N must be nonnegative. N is deliberately declared with type "int" to allow for future extensions (using negative values). 
Name: raise_nothrow; Comment: Native Windows platform. 
Name: isaac_refill; Comment: Use and update *S to generate random data to fill RESULT. 
Name: isaac_init; Comment: Initialize the ISAAC RNG with the given seed material. Its size MUST be a multiple of ISAAC_BYTES, and may be stored in the s->m array. This is a generalization of the original ISAAC initialization code to support larger seed sizes. For seed sizes of 0 and ISAAC_BYTES, it is identical. 
Name: isaac_seed; Comment: Initialize *S to a somewhat-random value, derived from a seed stored in S->m. 
Name: randint_new; Comment: Create a new randint_source from SOURCE. 
Name: randint_all_new; Comment: Create a new randint_source by creating a randread_source from NAME and ESTIMATED_BYTES. Return NULL (setting errno) if unsuccessful. 
Name: randint_get_source; Comment: Return the random data source of *S. 
Name: randint_genmax; Comment: Consume random data from *S to generate a random number in the range 0 .. GENMAX. 
Name: randint_free; Comment: Clear *S so that it no longer contains undelivered random data. 
Name: randint_all_free; Comment: Likewise, but also clear the underlying randread object. Return 0 if successful, -1 (setting errno) otherwise. 
Name: ceil_lg; Comment: Return the ceiling of the log base 2 of N. If N is zero, return an unspecified value. 
Name: randperm_bound; Comment: Return an upper bound on the number of random bytes needed to generate the first H elements of a random permutation of N elements. H must not exceed N. 
Name: swap; Comment: Swap elements I and J in array V. 
Name: sparse_new; Comment: Initialize the structure for the sparse map, when a best guess as to the number of entries specified with SIZE_HINT. 
Name: sparse_swap; Comment: Swap the values for I and J. If a value is not already present then assume it's equal to the index. Update the value for index I in array V. 
Name: randperm_new; Comment: From R, allocate and return a malloc'd array of the first H elements of a random permutation of N elements. H must not exceed N. Return NULL if H is zero. 
Name: randread_error; Comment: The default error handler. 
Name: simple_new; Comment: Simply return a new randread_source object with the default error handler. 
Name: get_nonce; Comment: Put a nonce value into BUFFER, with size BUFSIZE, but do not get more than BYTES_BOUND bytes' worth of random information from any nonce device. 
Name: randread_new; Comment: Create and initialize a random data source from NAME, or use a reasonable default source if NAME is null. BYTES_BOUND is an upper bound on the number of bytes that will be needed. If zero, it is a hard bound; otherwise it is just an estimate. If NAME is not null, NAME is saved for use as the argument of the default handler. Unless a non-default handler is used, NAME's lifetime should be at least that of the returned value. Return NULL (setting errno) on failure. 
Name: randread_set_handler; Comment: Set S's handler and its argument. HANDLER (HANDLER_ARG) is called when there is a read error or end of file from the random data source; errno is nonzero if there was an error. If HANDLER returns, it should fix the problem before returning. The default handler assumes that handler_arg is the file name of the source; it does not return. 
Name: readsource; Comment: Place SIZE random bytes into the buffer beginning at P, using the stream in S. 
Name: readisaac; Comment: Place SIZE pseudorandom bytes into the buffer beginning at P, using the buffered ISAAC generator in ISAAC. 
Name: randread; Comment: Consume random data from *S to generate a random buffer BUF of size SIZE. 
Name: randread_free; Comment: Clear *S so that it no longer contains undelivered random data, and deallocate any system resources associated with *S. Return 0 if successful, a negative number (setting errno) if not (this is rare, but can occur in theory if there is an input error). 
Name: fread_file; Comment: Read a STREAM and return a newly allocated string with the content, and set *LENGTH to the length of the string. The string is zero-terminated, but the terminating zero byte is not counted in *LENGTH. On errors, *LENGTH is undefined, errno preserves the values set by system functions (if any), and NULL is returned. 
Name: read_file; Comment: Open and read the contents of FILENAME, and return a newly allocated string with the content, and set *LENGTH to the length of the string. The string is zero-terminated, but the terminating zero byte is not counted in *LENGTH. On errors, *LENGTH is undefined, errno preserves the values set by system functions (if any), and NULL is returned. 
Name: read_binary_file; Comment: Open (on non-POSIX systems, in binary mode) and read the contents of FILENAME, and return a newly allocated string with the content, and set LENGTH to the length of the string. The string is zero-terminated, but the terminating zero byte is not counted in the LENGTH variable. On errors, *LENGTH is undefined, errno preserves the values set by system functions (if any), and NULL is returned. 
Name: readlink; Comment: readlink() substitute for systems that don't have a readlink() function, such as DJGPP 2.03 and mingw32. 
Name: rpl_readlink; Comment: readlink() wrapper that uses correct types, for systems like cygwin 1.5.x where readlink returns int, and which rejects trailing slash, for Solaris 9. 
Name: init_tokenbuffer; Comment: Initialize a tokenbuffer. 
Name: readtoken; Comment: Read a token from STREAM into TOKENBUFFER. A token is delimited by any of the N_DELIM bytes in DELIM. Upon return, the token is in tokenbuffer->buffer and has a trailing '_0' instead of any original delimiter. The function value is the length of the token not including the final '_0'. Upon EOF (i.e. on the call after the last token is read) or error, return -1 without modifying tokenbuffer. The EOF and error conditions may be distinguished in the caller by testing ferror (STREAM). This function works properly on lines containing NUL bytes and on files that do not end with a delimiter. 
Name: readtokens; Comment: Build a NULL-terminated array of pointers to tokens read from STREAM. Return the number of tokens read. All storage is obtained through calls to xmalloc-like functions. %%% Question: is it worth it to do a single %%% realloc() of 'tokens' just before returning? 
Name: save_token; Comment: Finalize (in the obstack_finish sense) the current token and record its pointer and length. 
Name: readtokens0; Comment: Read NUL-separated tokens from stream IN into T until EOF or error. The final NUL is optional. Always append a NULL pointer to the resulting list of token pointers, but that pointer isn't counted via t->n_tok. Return true if successful. 
Name: extract_trimmed_name; Comment: Copy UT->ut_name into storage obtained from malloc. Then remove any trailing spaces from the copy, NUL terminate it, and return the copy. 
Name: desirable_utmp_entry; Comment: Is the utmp entry U desired by the user who asked for OPTIONS? 
Name: rpl_realloc; Comment: Change the size of an allocated block of memory P to N bytes, with error checking. If N is zero, change it to 1. If P is NULL, use malloc. 
Name: regexec; Comment: regexec searches for a given pattern, specified by PREG, in the string STRING. If NMATCH is zero or REG_NOSUB was set in the cflags argument to 'regcomp', we ignore PMATCH. Otherwise, we assume PMATCH has at least NMATCH elements, and we set them to the offsets of the corresponding matched substrings. EFLAGS specifies "execution flags" which affect matching: if REG_NOTBOL is set, then ^ does not match at the beginning of the string; if REG_NOTEOL is set, then $ does not match at the end. We return 0 if we find a match and REG_NOMATCH if not. 
Name: re_match; Comment: re_match, re_search, re_match_2, re_search_2 The former two functions operate on STRING with length LENGTH, while the later two operate on concatenation of STRING1 and STRING2 with lengths LENGTH1 and LENGTH2, respectively. re_match() matches the compiled pattern in BUFP against the string, starting at index START. re_search() first tries matching at index START, then it tries to match starting from index START + 1, and so on. The last start position tried is START + RANGE. (Thus RANGE = 0 forces re_search to operate the same way as re_match().) The parameter STOP of re_{match,search}_2 specifies that no match exceeding the first STOP characters of the concatenation of the strings should be concerned. If REGS is not NULL, and BUFP->no_sub is not set, the offsets of the match and all groups is stored in REGS. (For the "_2" variants, the offsets are computed relative to the concatenation, not relative to the individual strings.) On success, re_match* functions return the length of the match, re_search* return the position of the start of the match. Return value -1 means no match was found and -2 indicates an internal error. 
Name: re_search_stub; Comment: None otherwise the position of the match is returned. 
Name: re_set_registers; Comment: Set REGS to hold NUM_REGS registers, storing them in STARTS and ENDS. Subsequent matches using PATTERN_BUFFER and REGS will use this memory for recording register information. STARTS and ENDS must be allocated using the malloc library routine, and must each be at least NUM_REGSsizeof (regoff_t) bytes long. If NUM_REGS == 0, then subsequent matches should allocate their own register data. Unless this function is called, the first search or match using PATTERN_BUFFER will allocate its own register data, without freeing the old data. 
Name: re_search_internal; Comment: Searches for a compiled pattern PREG in the string STRING, whose length is LENGTH. NMATCH, PMATCH, and EFLAGS have the same meaning as with regexec. LAST_START is START + RANGE, where START and RANGE have the same meaning as with re_search. Return REG_NOERROR if we find a match, and REG_NOMATCH if not, otherwise return the error code. Note: We assume front end functions already check ranges. (0 <= LAST_START && LAST_START <= LENGTH) 
Name: check_matching; Comment: Check whether the regular expression match input string INPUT or not, and return the index where the matching end. Return -1 if there is no match, and return -2 in case of an error. FL_LONGEST_MATCH means we want the POSIX longest matching. If P_MATCH_FIRST is not NULL, and the match fails, it is set to the next place where we may want to try matching. Note that the matcher assumes that the matching starts from the current index of the buffer. 
Name: check_halt_node_context; Comment: Check NODE match the current context. 
Name: check_halt_state_context; Comment: Check the halt state STATE match the current context. Return 0 if not match, if the node, STATE has, is a halt node and match the context, return the node. 
Name: proceed_next_node; Comment: None return -1 in case of errors. 
Name: set_regs; Comment: Set the positions where the subexpressions are starts/ends to registers PMATCH. Note: We assume that pmatch[0] is already set, and pmatch[i].rm_so == pmatch[i].rm_eo == -1 for 0 < i < nmatch. 
Name: sift_states_backward; Comment: This function checks the STATE_LOG from the SCTX->last_str_idx to 0 and sift the nodes in each states according to the following rules. Updated state_log will be wrote to STATE_LOG. Rules: We throw away the Node 'a' in the STATE_LOG[STR_IDX] if... 1. When STR_IDX == MATCH_LAST(the last index in the state_log): _If 'a' isn't the LAST_NODE and 'a' can't epsilon transit to _the LAST_NODE, we throw away the node 'a'. 2. When 0 <= STR_IDX < MATCH_LAST and 'a' accepts _string 's' and transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX+strlen('s')], we throw _ away the node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX+strlen('s')] but 'b' is _ thrown away, we throw away the node 'a'. 3. When 0 <= STR_IDX < MATCH_LAST and 'a' epsilon transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX], we throw away the _ node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX] but 'b' is thrown away, _ we throw away the node 'a'. 
Name: clean_state_log_if_needed; Comment: Helper functions. 
Name: check_subexp_limits; Comment: Check the limitations of sub expressions LIMITS, and remove the nodes which are against limitations from DEST_NODES. 
Name: transit_state; Comment: Return the next state to which the current state STATE will transit by accepting the current input byte, and update STATE_LOG if necessary. If STATE can accept a multibyte char/collating element/back reference update the destination of STATE_LOG. 
Name: merge_state_with_log; Comment: Update the state_log if we need 
Name: find_recover_state; Comment: Skip bytes in the input that correspond to part of a multi-byte match, then look in the log for a state from which to restart matching. 
Name: check_subexp_matching_top; Comment: From the node set CUR_NODES, pick up the nodes whose types are OP_OPEN_SUBEXP and which have corresponding back references in the regular expression. And register them to use them later for evaluating the corresponding back references. 
Name: transit_state_sb; Comment: Return the next state to which the current state STATE will transit by accepting the current input byte. 
Name: get_subexp; Comment: Enumerate all the candidates which the backreference BKREF_NODE can match at BKREF_STR_IDX, and register them by match_ctx_add_entry(). Note that we might collect inappropriate candidates here. However, the cost of checking them strictly here is too high, then we delay these checking for prune_impossible_nodes(). 
Name: get_subexp_sub; Comment: Check SUB_LAST can arrive to the back reference BKREF_NODE at BKREF_STR. If it can arrive, register the sub expression expressed with SUB_TOP and SUB_LAST. 
Name: find_subexp_node; Comment: Find the first node which is '(' or ')' and whose index is SUBEXP_IDX. Search '(' if FL_OPEN, or search ')' otherwise. TODO: This function isn't efficient... _ Because there might be more than one nodes whose types are _ OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all _ nodes. _ E.g. RE: (a){2} 
Name: check_arrival; Comment: Check whether the node TOP_NODE at TOP_STR can arrive to the node LAST_NODE at LAST_STR. We record the path onto PATH since it will be heavily reused. Return REG_NOERROR if it can arrive, or REG_NOMATCH otherwise. 
Name: check_arrival_add_next_nodes; Comment: Calculate the destination nodes of CUR_NODES at STR_IDX, and append them to NEXT_NODES. TODO: This function is similar to the functions transit_state*(), _ however this function has many additional works. _ Can't we unify them? 
Name: check_arrival_expand_ecl; Comment: For all the nodes in CUR_NODES, add the epsilon closures of them to CUR_NODES, however exclude the nodes which are: - inside the sub expression whose number is EX_SUBEXP, if FL_OPEN. - out of the sub expression whose number is EX_SUBEXP, if !FL_OPEN. 
Name: check_arrival_expand_ecl_sub; Comment: Helper function for check_arrival_expand_ecl. Check incrementally the epsilon closure of TARGET, and if it isn't problematic append it to DST_NODES. 
Name: expand_bkref_cache; Comment: For all the back references in the current state, calculate the destination of the back references by the appropriate entry in MCTX->BKREF_ENTS. 
Name: build_trtable; Comment: Build transition table for the state. Return true if successful. 
Name: group_nodes_into_DFAstates; Comment: Group all nodes belonging to STATE into several destinations. Then for all destinations, set the nodes belonging to the destination to DESTS_NODE[i] and set the characters accepted by the destination to DEST_CH[i]. This function return the number of destinations. 
Name: check_node_accept; Comment: Check whether the node accepts the byte which is IDX-th byte of the INPUT. 
Name: extend_buffers; Comment: Extend the buffers, if the buffers have run out. 
Name: match_ctx_init; Comment: Initialize MCTX. 
Name: match_ctx_clean; Comment: Clean the entries which depend on the current input in MCTX. This function must be invoked when the matcher changes the start index of the input, or changes the input string. 
Name: match_ctx_free; Comment: Free all the memory associated with MCTX. 
Name: match_ctx_add_entry; Comment: Add a new backreference entry to MCTX. Note that we assume that caller never call this function with duplicate entry, and call with STR_IDX which isn't smaller than any existing entry. 
Name: search_cur_bkref_entry; Comment: Return the first entry with the same str_idx, or -1 if none is found. Note that MCTX->BKREF_ENTS is already sorted by MCTX->STR_IDX. 
Name: match_ctx_add_subtop; Comment: Register the node NODE, whose type is OP_OPEN_SUBEXP, and which matches at STR_IDX. 
Name: match_ctx_add_sublast; Comment: Register the node NODE, whose type is OP_CLOSE_SUBEXP, and which matches at STR_IDX, whose corresponding OP_OPEN_SUBEXP is SUB_TOP. 
Name: re_string_allocate; Comment: This function allocate the buffers. It is necessary to call re_string_reconstruct before using the object. 
Name: re_string_construct; Comment: This function allocate the buffers, and initialize them. 
Name: re_string_realloc_buffers; Comment: Helper functions for re_string_allocate, and re_string_construct. 
Name: build_wcs_buffer; Comment: Build wide character buffer PSTR->WCS. If the byte sequence of the string are: <mb1>(0), <mb1>(1), <mb2>(0), <mb2>(1), <sb3> Then wide character buffer will be: <wc1> , WEOF , <wc2> , WEOF , <wc3> We use WEOF for padding, they indicate that the position isn't a first byte of a multibyte character. Note that this function assumes PSTR->VALID_LEN elements are already built and starts from PSTR->VALID_LEN. 
Name: build_wcs_upper_buffer; Comment: Build wide character buffer PSTR->WCS like build_wcs_buffer, but for REG_ICASE. 
Name: re_string_skip_chars; Comment: Skip characters until the index becomes greater than NEW_RAW_IDX. Return the index. 
Name: build_upper_buffer; Comment: Build the buffer PSTR->MBS, and apply the translation if we need. This function is used in case of REG_ICASE. 
Name: re_string_translate_buffer; Comment: Apply TRANS to the buffer in PSTR. 
Name: re_string_reconstruct; Comment: This function re-construct the buffers. Concretely, convert to wide character in case of pstr->mb_cur_max > 1, convert to upper case in case of REG_ICASE, apply translation. 
Name: re_string_context_at; Comment: Return the context at IDX in INPUT. 
Name: re_node_set_alloc; Comment: Functions for set operation. 
Name: re_node_set_add_intersect; Comment: Calculate the intersection of the sets SRC1 and SRC2. And merge it to DEST. Return value indicate the error code or REG_NOERROR if succeeded. Note: We assume dest->elems is NULL, when dest->alloc is 0. 
Name: re_node_set_init_union; Comment: Calculate the union set of the sets SRC1 and SRC2. And store it to DEST. Return value indicate the error code or REG_NOERROR if succeeded. 
Name: re_node_set_merge; Comment: Calculate the union set of the sets DEST and SRC. And store it to DEST. Return value indicate the error code or REG_NOERROR if succeeded. 
Name: re_node_set_insert; Comment: Insert the new element ELEM to the re_node_set* SET. SET should not already have ELEM. Return true if successful. 
Name: re_node_set_insert_last; Comment: Insert the new element ELEM to the re_node_set* SET. SET should not already have any element greater than or equal to ELEM. Return true if successful. 
Name: __attribute__; Comment: Compare two node sets SET1 and SET2. Return true if SET1 and SET2 are equivalent. 
Name: __attribute__; Comment: Return (idx + 1) if SET contains the element ELEM, return 0 otherwise. 
Name: re_dfa_add_node; Comment: Add the token TOKEN to dfa->nodes, and return the index of the token. Or return -1 if an error occurred. 
Name: re_acquire_state; Comment: Search for the state whose node_set is equivalent to NODES. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: re_acquire_state_context; Comment: Search for the state whose node_set is equivalent to NODES and whose context is equivalent to CONTEXT. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: register_state; Comment: Finish initialization of the new state NEWSTATE, and using its hash value HASH put in the appropriate bucket of DFA's state table. Return value indicates the error code if failed. 
Name: create_ci_newstate; Comment: Create the new state which is independent of contexts. Return the new state if succeeded, otherwise return NULL. 
Name: create_cd_newstate; Comment: Create the new state which is depend on the context CONTEXT. Return the new state if succeeded, otherwise return NULL. 
Name: rpl_remove; Comment: Remove NAME from the file system. This works around C89 platforms that don't handle directories like POSIX requires; it also works around Solaris 9 bugs with trailing slash. 
Name: rpl_rename; Comment: Rename the file SRC to DST. This replacement is necessary on Windows, on which the system rename function will not replace an existing DST. 
Name: rpl_rename; Comment: Rename the file SRC to DST, fixing any trailing slash bugs. 
Name: rpl_rmdir; Comment: Remove directory DIR. Return 0 if successful, -1 if not. 
Name: get_root_dev_ino; Comment: Call lstat to get the device and inode numbers for '/'. Upon failure, return NULL. Otherwise, set the members of *ROOT_D_I accordingly and return ROOT_D_I. 
Name: localized_pattern; Comment: Return the localized regular expression pattern corresponding to ENGLISH_PATTERN. NL_INDEX can be used with nl_langinfo. The resulting string may only be used until the next nl_langinfo call. 
Name: safe_rw; Comment: Read(write) up to COUNT bytes at BUF from(to) descriptor FD, retrying if interrupted. Return the actual number of bytes read(written), zero for EOF, or SAFE_READ_ERROR(SAFE_WRITE_ERROR) upon error. 
Name: same_name; Comment: Return nonzero if SOURCE and DEST point to the same name in the same directory. 
Name: save_cwd; Comment: None use free_cwd to perform the necessary free or close. Upon failure, no memory is allocated, any locally opened file descriptors are closed; return non-zero -- in that case, free_cwd need not be called, but doing so is ok. Otherwise, return zero. The _raison d'etre_ for this interface is that the working directory is sometimes inaccessible, and getcwd is not robust or as efficient. So, we prefer to use the open/fchdir approach, but fall back on getcwd if necessary. This module works for most cases with just the getcwd-lgpl module, but to be truly robust, use the getcwd module. Some systems lack fchdir altogether: e.g., OS/2, pre-2001 Cygwin, SCO Xenix. Also, SunOS 4 and Irix 5.3 provide the function, yet it doesn't work for partitions on which auditing is enabled. If you're still using an obsolete system with these problems, please send email to the maintainer of this code. 
Name: restore_cwd; Comment: Change to recorded location, CWD, in directory hierarchy. Upon failure, return -1 (errno is set by chdir or fchdir). Upon success, return zero. 
Name: direntry_cmp_name; Comment: Compare the names of two directory entries 
Name: direntry_cmp_inode; Comment: Compare the inode numbers of two directory entries 
Name: streamsavedir; Comment: None the end is marked by two '_0' characters in a row. Returned values are sorted according to OPTION. Return NULL (setting errno) if DIRP cannot be read. If DIRP is NULL, return NULL without affecting errno. 
Name: savedir; Comment: None the end is marked by two '_0' characters in a row. Return NULL (setting errno) if DIR cannot be opened, read, or closed. 
Name: savewd_save; Comment: Save the working directory into *WD, if it hasn't been saved already. Return true if a child has been forked to do the real work. 
Name: savewd_delegating; Comment: None savewd_chdir's callers _can_ inspect the file system to decide whether to call savewd_chdir. 
Name: windows_poll_handle; Comment: Compute output fd_sets for libc descriptor FD (whose Windows handle is H). 
Name: set_acl; Comment: Set the access control lists of a file. If DESC is a valid file descriptor, use file descriptor operations where available, else use filename based operations on NAME. If access control lists are not available, fchmod the target file to MODE. Also sets the non-permission bits of the destination file (S_ISUID, S_ISGID, S_ISVTX) to those from MODE if any are set. Return 0 if successful. On failure, output a diagnostic, set errno and return -1. 
Name: set_acls_from_mode; Comment: Solaris, Cygwin, not HP-UX 
Name: context_acl_from_mode; Comment: HP-UX 
Name: context_aclv_from_mode; Comment: HP-UX >= 11.11 
Name: set_acls_from_mode; Comment: AIX 
Name: context_acl_from_mode; Comment: older AIX 
Name: context_acl_from_mode; Comment: NonStop Kernel 
Name: chmod_or_fchmod; Comment: If DESC is a valid file descriptor use fchmod to change the file's mode to MODE on systems that have fchmod. On systems that don't have fchmod and if DESC is invalid, use chmod on NAME instead. Return 0 if successful. Return -1 and set errno upon failure. 
Name: set_permissions; Comment: Set the permissions in CTX on a file. If DESC is a valid file descriptor, use file descriptor operations, else use filename based operations on NAME. If access control lists are not available, fchmod the target file to the mode in CTX. Also sets the non-permission bits of the destination file (S_ISUID, S_ISGID, S_ISVTX) to those from the mode in CTX if any are set. Return 0 if successful. Return -1 and set errno upon failure. 
Name: __add_to_environ; Comment: This function is used by 'setenv' and 'putenv'. The difference between the two functions is that for the former must create a new string which is then placed in the environment, while the argument of 'putenv' must be used directly. This is all complicated by the fact that we try to reuse values once generated for a 'setenv' call since we can never free the strings. 
Name: clearenv; Comment: The 'clearenv' was planned to be added to POSIX.1 but probably never made it. Nevertheless the POSIX.9 standard (POSIX bindings for Fortran 77) requires this function. 
Name: settime; Comment: Set the system time. 
Name: sha1_read_ctx; Comment: Put result from CTX in first 20 bytes following RESBUF. The result must be in little endian byte order. 
Name: sha1_finish_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. 
Name: sha256_init_ctx; Comment: Takes a pointer to a 256 bit block of data (eight 32 bit ints) and initializes it to the start constants of the SHA256 algorithm. This must be called before using hash in the call to sha256_hash 
Name: set_uint32; Comment: Copy the value from v into the memory location pointed to by *cp, If your architecture allows unaligned access this is equivalent to (uint32_t *) cp = v 
Name: sha256_read_ctx; Comment: Put result from CTX in first 32 bytes following RESBUF. The result must be in little endian byte order. 
Name: sha256_conclude_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. 
Name: sha256_stream; Comment: Compute SHA256 message digest for bytes read from STREAM. The resulting message digest number will be written into the 32 bytes beginning at RESBLOCK. 
Name: sha224_stream; Comment: FIXME: Avoid code duplication 
Name: sha256_buffer; Comment: Compute SHA512 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: sha256_process_block; Comment: Process LEN bytes of BUFFER, accumulating context into CTX. It is assumed that LEN % 64 == 0. Most of this code comes from GnuPG's cipher/sha1.c. 
Name: sha512_init_ctx; Comment: Takes a pointer to a 512 bit block of data (eight 64 bit ints) and initializes it to the start constants of the SHA512 algorithm. This must be called before using hash in the call to sha512_hash 
Name: set_uint64; Comment: Copy the value from V into the memory location pointed to by *CP, If your architecture allows unaligned access, this is equivalent to (__typeof__ (v) *) cp = v 
Name: sha512_read_ctx; Comment: Put result from CTX in first 64 bytes following RESBUF. The result must be in little endian byte order. 
Name: sha512_conclude_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. 
Name: sha512_stream; Comment: Compute SHA512 message digest for bytes read from STREAM. The resulting message digest number will be written into the 64 bytes beginning at RESBLOCK. 
Name: sha384_stream; Comment: FIXME: Avoid code duplication 
Name: sha512_buffer; Comment: Compute SHA512 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: sha512_process_block; Comment: Process LEN bytes of BUFFER, accumulating context into CTX. It is assumed that LEN % 128 == 0. Most of this code comes from GnuPG's cipher/sha1.c. 
Name: str2signum; Comment: Convert the signal name SIGNAME to a signal number. Return the signal number if successful, -1 otherwise. 
Name: str2sig; Comment: Convert the signal name SIGNAME to the signal number *SIGNUM. Return 0 if successful, -1 otherwise. 
Name: sig2str; Comment: Convert SIGNUM to a signal name in SIGNAME. SIGNAME must point to a buffer of at least SIG2STR_MAX bytes. Return 0 if successful, -1 otherwise. 
Name: sigaction_handler; Comment: Signal handler that is installed for signals. 
Name: sigaction; Comment: Change and/or query the action that will be taken on delivery of signal SIG. If not NULL, ACT describes the new behavior. If not NULL, OACT is set to the prior behavior. Return 0 on success, or set errno and return -1 on failure. 
Name: blocked_handler; Comment: Signal handler that is installed for blocked signals. 
Name: rpl_signal; Comment: Install the handler FUNC for signal SIG, and return the previous handler. 
Name: _gl_raise_SIGPIPE; Comment: Raise the signal SIGPIPE. 
Name: snprintf; Comment: Print formatted output to string STR. Similar to sprintf, but additional length SIZE limit how much is written into STR. Returns string length of formatted string (which may be larger than SIZE). STR may be NULL, in which case nothing will be written. On error, return a negative value. 
Name: rpl_stat; Comment: Store information about NAME into ST. Work around bugs with trailing slashes. Mingw has other bugs (such as st_ino always being 0 on success) which this wrapper does not work around. But at least this implementation provides the ability to emulate fchdir correctly. 
Name: __stpcpy; Comment: Copy SRC to DEST, returning the address of the terminating '_0' in DEST. 
Name: ; Comment: Copy no more than N bytes of SRC to DST, returning a pointer past the last non-NUL byte written into DST. 
Name: __strdup; Comment: Duplicate S, returning an identical malloc'd string. 
Name: strerror_override; Comment: If ERRNUM maps to an errno value defined by gnulib, return a string describing the error. Otherwise return NULL. 
Name: my_strftime; Comment: Write information from TP into S according to the format string FORMAT, writing no more that MAXSIZE characters (including the terminating '_0') and returning number of characters written. If S is NULL, nothing will be written anywhere, so to determine how many characters would be written, use NULL for S and (size_t) -1 for MAXSIZE. 
Name: __strftime_internal; Comment: Just like my_strftime, above, but with two more parameters. UPCASE indicate that the result should be converted to upper case, and *TZSET_CALLED indicates whether tzset has been called here. 
Name: strintcmp; Comment: Compare strings A and B as integers without explicitly converting them to machine numbers, to avoid overflow problems and perhaps improve performance. 
Name: strip_trailing_slashes; Comment: Remove trailing slashes from FILE. Return true if a trailing slash was removed. This is useful when using file name completion from a shell that adds a "/" after directory names (such as tcsh and bash), because on symlinks to directories, several system calls have different semantics according to whether a trailing slash is present. 
Name: strndup; Comment: A replacement function, for systems that lack strndup. Copyright (C) 1996-1998, 2001-2003, 2005-2007, 2009-2016 Free Software Foundation, Inc. This program is free software; you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>. 
Name: strnlen; Comment: Find the length of STRING, but scan at most MAXLEN characters. If no '_0' terminator is found in that many characters, return MAXLEN. 
Name: strnlen1; Comment: This is the same as strnlen (string, maxlen - 1) + 1. 
Name: strnumcmp; Comment: Externally-visible name for numcompare. 
Name: strpbrk; Comment: Find the first occurrence in S of any character in ACCEPT. 
Name: strsignal; Comment: Return a string describing the meaning of the signal number SIGNUM. 
Name: init; Comment: Initialize buffer. 
Name: free_key_mem; Comment: Free the thread specific data, this is done if a thread terminates. 
Name: getbuffer; Comment: Return the buffer to be used. 
Name: strstr; Comment: Return the first occurrence of NEEDLE in HAYSTACK. Return HAYSTACK if NEEDLE is empty, otherwise NULL if NEEDLE is not found in HAYSTACK. 
Name: locale_isspace; Comment: Return true if C is a space in the current locale, avoiding problems with signed char and isspace. 
Name: ldexp; Comment: A dummy definition that will never be invoked. 
Name: scale_radix_exp; Comment: Return XBASE**EXPONENT. Return an extreme value and set errno to ERANGE if underflow or overflow occurs. 
Name: parse_number; Comment: Parse a number at NPTR; this is a bit like strtol (NPTR, ENDPTR) except there are no leading spaces or signs or "0x", and ENDPTR is nonnull. The number uses a base BASE (either 10 or 16) fraction, a radix RADIX (either 10 or 2) exponent, and exponent character EXPCHAR. To convert from a number of digits to a radix exponent, multiply by RADIX_MULTIPLIER (either 1 or 4). 
Name: strtod; Comment: Convert NPTR to a double. If ENDPTR is not NULL, a pointer to the character after the last one used in the number is put in *ENDPTR. 
Name: underlying_strtod; Comment: The underlying strtod implementation. This must be defined after strtod because it #undefs strtod. 
Name: INTERNAL; Comment: Convert NPTR to an 'unsigned long int' or 'long int' in base BASE. If BASE is 0 the base is determined by the presence of a leading zero, indicating octal or a leading "0x" or "0X", indicating hexadecimal. If BASE is < 2 or > 36, it is reset to 10. If ENDPTR is not NULL, a pointer to the character after the last one converted is stored in *ENDPTR. 
Name: rpl_symlink; Comment: Create a symlink, but reject trailing slash. 
Name: symlink; Comment: The system does not support symlinks. 
Name: direxists; Comment: Return nonzero if DIR is an existent directory. 
Name: __path_search; Comment: Path search algorithm, for tmpnam, tmpfile, etc. If DIR is non-null and exists, uses it; otherwise uses the first of $TMPDIR, P_tmpdir, /tmp that exists. Copies into TMPL a template suitable for use with mk[s]temp. Will fail (-1) if DIR is non-null and doesn't exist, none of the searched dirs exists, or there's not enough space in TMPL. 
Name: gen_tempname_len; Comment: Generate a temporary file name based on TMPL. TMPL must match the rules for mk[s]temp (i.e., end in at least X_SUFFIX_LEN "X"s, possibly with a suffix). The name constructed does not exist at the time of the call to this function. TMPL is overwritten with the result. KIND may be one of: __GT_NOCREATE: simply verify that the name does not exist at the time of the call. __GT_FILE: create the file using open(O_CREAT|O_EXCL) and return a read-write fd. The file is mode 0600. __GT_DIR: create a directory, which will be mode 0700. We use a clever algorithm to get hard-to-predict names. 
Name: copy_tm_result; Comment: Written by Paul Eggert. 
Name: isdst_differ; Comment: Return true if the values A and B differ according to the rules for tm_isdst: A and B differ if one is zero and the other positive. 
Name: equal_tm; Comment: Return true if A and B are equal. 
Name: extend_abbrs; Comment: Copy to ABBRS the abbreviation at ABBR with size ABBR_SIZE (this includes its trailing null byte). Append an extra null byte to mark the end of ABBRS. 
Name: tzalloc; Comment: Return a newly allocated time zone for NAME, or NULL on failure. A null NAME stands for wall clock time (which is like unset TZ). 
Name: save_abbr; Comment: Save into TZ any nontrivial time zone abbreviation used by TM, and update *TM (if HAVE_TM_ZONE) or *TZ (if !HAVE_TM_ZONE && HAVE_TZNAME) if they use the abbreviation. Return true if successful, false (setting errno) otherwise. 
Name: tzfree; Comment: Free a time zone. 
Name: change_env; Comment: Change the environment to match the specified timezone_t value. Return true if successful, false (setting errno) otherwise. 
Name: set_tz; Comment: Temporarily set the time zone to TZ, which must not be null. Return LOCAL_TZ if the time zone setting is already correct. Otherwise return a newly allocated time zone representing the old setting, or NULL (setting errno) on failure. 
Name: revert_tz; Comment: Restore an old setting returned by set_tz. It must not be null. Return true (preserving errno) if successful, false (setting errno) otherwise. 
Name: localtime_rz; Comment: Use time zone TZ to compute localtime_r (T, TM). 
Name: mktime_z; Comment: Use time zone TZ to compute mktime (TM). 
Name: unicode_to_mb; Comment: Converts the Unicode character CODE to its multibyte representation in the current locale and calls the SUCCESS callback on the resulting byte sequence. If an error occurs, invokes the FAILURE callback instead, passing it CODE and an English error string. Returns whatever the callback returned. Assumes that the locale doesn't change between two calls. 
Name: fwrite_success_callback; Comment: Simple success callback that outputs the converted string. The STREAM is passed as callback_arg. 
Name: exit_failure_callback; Comment: Simple failure callback that displays an error and exits. 
Name: fallback_failure_callback; Comment: Simple failure callback that displays a fallback representation in plain ASCII, using the same notation as ISO C99 strings. 
Name: print_unicode_char; Comment: Outputs the Unicode character CODE to the output stream STREAM. Upon failure, exit if exit_on_error is true, otherwise output a fallback notation. 
Name: rpl_unlink; Comment: Remove file NAME. Return 0 if successful, -1 if not. 
Name: rpl_unlinkat; Comment: unlinkat without AT_REMOVEDIR does not honor trailing / on Solaris 9. Hurd has the same issue. unlinkat without AT_REMOVEDIR erroneously ignores ".." on Darwin 14. Solve these in a similar manner to unlink. 
Name: rpl_unsetenv; Comment: Call the underlying unsetenv, in case there is hidden bookkeeping that needs updating beyond just modifying environ. 
Name: is_number; Comment: Return true if STR represents an unsigned decimal integer. 
Name: parse_user_spec; Comment: Extract from SPEC, which has the form "[user][:.][group]", a USERNAME, UID U, GROUPNAME, and GID G. If the GID parameter is NULL the entire SPEC is treated as a user. If the USERNAME and GROUPNAME parameters are NULL they're ignored. Either user or group, or both, must be present. If the group is omitted but the separator is given, use the given user's login group. If SPEC contains a ':', then use that as the separator, ignoring any '.'s. If there is no ':', but there is a '.', then first look up the entire SPEC as a login name. If that look-up fails, then try again interpreting the '.' as a separator. USERNAME and GROUPNAME will be in newly malloc'd memory. Either one might be NULL instead, indicating that it was not given and the corresponding numeric ID was left unchanged. Return NULL if successful, a static error message string if not. 
Name: dev_info_hash; Comment: Hash some device info. 
Name: dev_info_compare; Comment: Compare two dev_info structs. 
Name: utimecmp; Comment: Return -1, 0, 1 based on whether the destination file (with name DST_NAME and status DST_STAT) is older than SRC_STAT, the same age as SRC_STAT, or newer than SRC_STAT, respectively. DST_NAME may be NULL if OPTIONS is 0. If OPTIONS & UTIMECMP_TRUNCATE_SOURCE, do the comparison after SRC is converted to the destination's timestamp resolution as filtered through utimens. In this case, return -2 if the exact answer cannot be determined; this can happen only if the time stamps are very close and there is some trouble accessing the file system (e.g., the user does not have permission to futz with the destination's time stamps). 
Name: validate_timespec; Comment: Validate the requested timestamps. Return 0 if the resulting timespec can be used for utimensat (after possibly modifying it to work around bugs in utimensat). Return a positive value if the timespec needs further adjustment based on stat results: 1 if any adjustment is needed for utimes, and 2 if any adjustment is needed for Linux utimensat. Return -1, with errno set to EINVAL, if timespec is out of range. 
Name: update_timespec; Comment: Normalize any UTIME_NOW or UTIME_OMIT values in *TS, using stat buffer STATBUF to obtain the current timestamps of the file. If both times are UTIME_NOW, set *TS to NULL (as this can avoid some permissions issues). If both times are UTIME_OMIT, return true (nothing further beyond the prior collection of STATBUF is necessary); otherwise return false. 
Name: fdutimens; Comment: Set the access and modification time stamps of FD (a.k.a. FILE) to be TIMESPEC[0] and TIMESPEC[1], respectively. FD must be either negative -- in which case it is ignored -- or a file descriptor that is open on FILE. If FD is nonnegative, then FILE can be NULL, which means use just futimes (or equivalent) instead of utimes (or equivalent), and fail if on an old system without futimes (or equivalent). If TIMESPEC is null, set the time stamps to the current time. Return 0 on success, -1 (setting errno) on failure. 
Name: utimens; Comment: Set the access and modification time stamps of FILE to be TIMESPEC[0] and TIMESPEC[1], respectively. 
Name: lutimens; Comment: Set the access and modification time stamps of FILE to be TIMESPEC[0] and TIMESPEC[1], respectively, without dereferencing symlinks. Fail with ENOSYS if the platform does not support changing symlink timestamps, but FILE was a symlink. 
Name: rpl_utimensat; Comment: Like utimensat, but work around native bugs. 
Name: is_infinite_or_zero; Comment: Equivalent to !isfinite(x) || x == 0, but does not require libm. 
Name: is_infinite_or_zerol; Comment: Equivalent to !isfinite(x) || x == 0, but does not require libm. 
Name: multiply; Comment: Compute the product of two bignums >= 0. Return the allocated memory in case of success, NULL in case of memory allocation failure. 
Name: divide; Comment: Compute the quotient of a bignum a >= 0 and a bignum b > 0. a is written as a = qb + r with 0 <= r < b. q is the quotient, r the remainder. Finally, round-to-even is performed: If r > b/2 or if r = b/2 and q is odd, q is incremented. Return the allocated memory in case of success, NULL in case of memory allocation failure. 
Name: convert_to_decimal; Comment: Convert a bignum a >= 0, multiplied with 10^extra_zeroes, to decimal representation. Destroys the contents of a. Return the allocated memory - containing the decimal digits in low-to-high order, terminated with a NUL character - in case of success, NULL in case of memory allocation failure. 
Name: decode_long_double; Comment: Assuming x is finite and >= 0: write x as x = 2^em, where m is a bignum. Return the allocated memory in case of success, NULL in case of memory allocation failure. 
Name: decode_double; Comment: Assuming x is finite and >= 0: write x as x = 2^em, where m is a bignum. Return the allocated memory in case of success, NULL in case of memory allocation failure. 
Name: scale10_round_decimal_decoded; Comment: Assuming x = 2^em is finite and >= 0, and n is an integer: Returns the decimal representation of round (x10^n). Return the allocated memory - containing the decimal digits in low-to-high order, terminated with a NUL character - in case of success, NULL in case of memory allocation failure. 
Name: scale10_round_decimal_long_double; Comment: Assuming x is finite and >= 0, and n is an integer: Returns the decimal representation of round (x10^n). Return the allocated memory - containing the decimal digits in low-to-high order, terminated with a NUL character - in case of success, NULL in case of memory allocation failure. 
Name: scale10_round_decimal_double; Comment: Assuming x is finite and >= 0, and n is an integer: Returns the decimal representation of round (x10^n). Return the allocated memory - containing the decimal digits in low-to-high order, terminated with a NUL character - in case of success, NULL in case of memory allocation failure. 
Name: floorlog10l; Comment: Assuming x is finite and > 0: Return an approximation for n with 10^n <= x < 10^(n+1). The approximation is usually the right n, but may be off by 1 sometimes. 
Name: floorlog10; Comment: Assuming x is finite and > 0: Return an approximation for n with 10^n <= x < 10^(n+1). The approximation is usually the right n, but may be off by 1 sometimes. 
Name: is_borderline; Comment: Tests whether a string of digits consists of exactly PRECISION zeroes and a single '1' digit. 
Name: MAX_ROOM_NEEDED; Comment: Returns the number of TCHAR_T units needed as temporary space for the result of sprintf or SNPRINTF of a single conversion directive. 
Name: verror; Comment: Print a message with 'vfprintf (stderr, FORMAT, ARGS)'; if ERRNUM is nonzero, follow it with ": " and strerror (ERRNUM). If STATUS is nonzero, terminate the program with 'exit (STATUS)'. Use the globals error_print_progname and error_message_count similarly to error(). 
Name: verror_at_line; Comment: Print a message with 'vfprintf (stderr, FORMAT, ARGS)'; if ERRNUM is nonzero, follow it with ": " and strerror (ERRNUM). If STATUS is nonzero, terminate the program with 'exit (STATUS)'. If FNAME is not NULL, prepend the message with "FNAME:LINENO:". Use the globals error_print_progname, error_message_count, and error_one_per_line similarly to error_at_line(). 
Name: version_etc_arn; Comment: Display the --version information the standard way. Author names are given in the array AUTHORS. N_AUTHORS is the number of elements in the array. 
Name: version_etc_ar; Comment: Display the --version information the standard way. See the initial comment to this module, for more information. Author names are given in the NULL-terminated array AUTHORS. 
Name: version_etc_va; Comment: Display the --version information the standard way. See the initial comment to this module, for more information. Author names are given in the NULL-terminated va_list AUTHORS. 
Name: vfprintf; Comment: Print formatted output to the stream FP. Return string length of formatted string. On error, return a negative value. 
Name: vprintf; Comment: Print formatted output to standard output. Return string length of formatted string. On error, return a negative value. 
Name: can_write_any_file; Comment: Return true if we know that we can write any file, including writing directories. 
Name: __xnumtoint; Comment: Parse numeric string N_STR of base BASE, and return the value. Exit on parse error or if MIN or MAX are exceeded. Strings can have multiplicative SUFFIXES if specified. ERR is printed along with N_STR on error. 
Name: __xdectoint; Comment: Parse decimal string N_STR, and return the value. Exit on parse error or if MIN or MAX are exceeded. Strings can have multiplicative SUFFIXES if specified. ERR is printed along with N_STR on error. 
Name: xfts_open; Comment: Fail with a proper diagnostic if fts_open fails. 
Name: cycle_warning_required; Comment: When fts_read returns FTS_DC to indicate a directory cycle, it may or may not indicate a real problem. When a program like chgrp performs a recursive traversal that requires traversing symbolic links, it is *not* a problem. However, when invoked with "-P -R", it deserves a warning. The fts_options member records the options that control this aspect of fts's behavior, so test that. 
Name: xgetcwd; Comment: Return the current directory, newly allocated. Upon an out-of-memory error, call xalloc_die. Upon any other type of error, return NULL. 
Name: xgetgroups; Comment: Like mgetgroups, but call xalloc_die on allocation failure. 
Name: xgethostname; Comment: Return the current hostname in malloc'd storage. If malloc fails, exit. Upon any other failure, return NULL and set errno. 
Name: xmalloc; Comment: Allocate N bytes of memory dynamically, with error checking. 
Name: xrealloc; Comment: Change the size of an allocated block of memory P to N bytes, with error checking. 
Name: x2realloc; Comment: If P is null, allocate a block of at least *PN bytes; otherwise, reallocate P so that it contains more than *PN bytes. *PN must be nonzero unless P is null. Set *PN to the new block's size, and return the pointer to the new block. *PN is never set to zero, and the returned pointer is never null. 
Name: xzalloc; Comment: Allocate S bytes of zeroed memory dynamically, with error checking. There's no need for xnzalloc (N, S), since it would be equivalent to xcalloc (N, S). 
Name: xcalloc; Comment: Allocate zeroed memory for N elements of S bytes, with error checking. S must be nonzero. 
Name: xmemdup; Comment: Clone an object P of size S, with error checking. There's no need for xnmemdup (P, N, S), since xmemdup (P, NS) works without any need for an arithmetic overflow check. 
Name: xstrdup; Comment: Clone STRING. 
Name: xmemcoll; Comment: Compare S1 (with length S1LEN) and S2 (with length S2LEN) according to the LC_COLLATE locale. S1 and S2 do not overlap, and are not adjacent. Temporarily modify the bytes after S1 and S2, but restore their original contents before returning. Report an error and exit if there is an error. 
Name: xmemcoll0; Comment: Compare S1 (a memory block of size S1SIZE, with a NUL as last byte) and S2 (a memory block of size S2SIZE, with a NUL as last byte) according to the LC_COLLATE locale. S1SIZE and S2SIZE must be > 0. Report an error and exit if there is an error. 
Name: xnanosleep; Comment: Sleep until the time (call it WAKE_UP_TIME) specified as SECONDS seconds after the time this function is called. SECONDS must be non-negative. If SECONDS is so large that it is not representable as a 'struct timespec', then use the maximum value for that interval. Return -1 on failure (setting errno), 0 on success. 
Name: xprintf; Comment: Just like printf, but call error if it fails without setting the stream's error indicator. 
Name: xvprintf; Comment: Just like vprintf, but call error if it fails without setting the stream's error indicator. 
Name: xfprintf; Comment: Just like fprintf, but call error if it fails without setting the stream's error indicator. 
Name: xvfprintf; Comment: Just like vfprintf, but call error if it fails without setting the stream's error indicator. 
Name: xreadlink; Comment: Call readlink to get the symbolic link value of FILENAME. Return a pointer to that NUL-terminated string in malloc'd storage. If readlink fails, return NULL and set errno. If realloc fails, or if the link value is longer than SIZE_MAX :-), give a diagnostic and exit. 
Name: xstrndup; Comment: Return a newly allocated copy of at most N bytes of STRING. In other words, return a copy of the initial segment of length N of STRING. 
Name: XSTRTOD; Comment: An interface to a string-to-floating-point conversion function that encapsulates all the error checking one should usually perform. Like strtod/strtold, but stores the conversion in *RESULT, and returns true upon successful conversion. CONVERT specifies the conversion function, e.g., strtod itself. 
Name: xstrtol_error; Comment: Report an error for an invalid integer in an option argument. ERR is the error code returned by one of the xstrto functions. Use OPT_IDX to decide whether to print the short option string "C" or "-C" or a long option string derived from LONG_OPTION. OPT_IDX is -2 if the short option "C" was used, without any leading "-"; it is -1 if the short option "-C" was used; otherwise it is an index into LONG_OPTIONS, which should have a name preceded by two '-' characters. ARG is the option-argument containing the integer. After reporting an error, exit with status EXIT_STATUS if it is nonzero. 
Name: xstrtol_fatal; Comment: Like xstrtol_error, except exit with a failure status. 
Name: __xstrtol; Comment: FIXME: comment. 
Name: yesno; Comment: Return true if we read an affirmative line from standard input. Since this function uses stdin, it is suggested that the caller not use STDIN_FILENO directly, and also that the line atexit(close_stdin) be added to main(). 
Name: glthread_rwlock_init_multithreaded; Comment: ------------------------- gl_rwlock_t datatype ------------------------- 
Name: glthread_recursive_lock_init_multithreaded; Comment: --------------------- gl_recursive_lock_t datatype --------------------- 
Name: glthread_once_call; Comment: -------------------------- gl_once_t datatype -------------------------- 
Name: glthread_once_multithreaded; Comment: -------------------------- gl_once_t datatype -------------------------- 
Name: glthread_lock_init_func; Comment: -------------------------- gl_lock_t datatype -------------------------- 
Name: gl_waitqueue_add; Comment: Enqueues the current thread, represented by an event, in a wait queue. Returns INVALID_HANDLE_VALUE if an allocation failure occurs. 
Name: gl_waitqueue_notify_first; Comment: Notifies the first thread from a wait queue and dequeues it. 
Name: gl_waitqueue_notify_all; Comment: Notifies all threads from a wait queue and dequeues them all. 
Name: glthread_recursive_lock_init_func; Comment: --------------------- gl_recursive_lock_t datatype --------------------- 
Name: glthread_once_func; Comment: -------------------------- gl_once_t datatype -------------------------- 
Name: dummy_thread_func; Comment: The function to be executed by a dummy thread. 
Name: glthread_tls_get_multithreaded; Comment: ------------------------- gl_tls_key_t datatype ------------------------- 
Name: uc_width; Comment: Determine number of column positions required for UC. 
Name: remove_suffix; Comment: Remove SUFFIX from the end of NAME if it is there, unless NAME consists entirely of SUFFIX. 
Name: perform_basename; Comment: Perform the basename operation on STRING. If SUFFIX is non-NULL, remove the trailing SUFFIX. Finally, output the result string. 
Name: next_line_num; Comment: Compute the next line number. 
Name: compute_context_from_mask; Comment: Given a security context, CONTEXT, derive a context_t (*RET), setting any portions selected via the global variables, specified_user, specified_role, etc. 
Name: change_file_context; Comment: Change the context of FILE, using specified components. If it is a directory and -R is given, recurse. Return 0 if successful, 1 if errors occurred. 
Name: process_file; Comment: Change the context of FILE. Return true if successful. This function is called once for every file system object that fts encounters. 
Name: process_files; Comment: Recursively operate on the specified FILES (the last entry of which is NULL). BIT_FLAGS controls how fts works. Return true if successful. 
Name: parse_group; Comment: Return the group ID of NAME, or -1 if no name was specified. 
Name: mode_changed; Comment: Return true if the chmodable permission bits of FILE changed. The old mode was OLD_MODE, but it was changed to NEW_MODE. 
Name: describe_change; Comment: Tell the user how/if the MODE of FILE has been changed. CHANGED describes what (if anything) has happened. 
Name: process_file; Comment: Change the mode of FILE. Return true if successful. This function is called once for every file system object that fts encounters. 
Name: process_files; Comment: Recursively change the modes of the specified FILES (the last entry of which is NULL). BIT_FLAGS controls how fts works. Return true if successful. 
Name: main; Comment: Parse the ASCII mode given on the command line into a linked list of 'struct mode_change' and apply that to each file argument. 
Name: gid_to_name; Comment: Convert the numeric group-id, GID, to a string stored in xmalloc'd memory, and return it. If there's no corresponding group name, use the decimal representation of the ID. 
Name: uid_to_name; Comment: Convert the numeric user-id, UID, to a string stored in xmalloc'd memory, and return it. If there's no corresponding user name, use the decimal representation of the ID. 
Name: user_group_str; Comment: Allocate a string representing USER and GROUP. 
Name: describe_change; Comment: Tell the user how/if the user and group of FILE have been changed. If USER is NULL, give the group-oriented messages. CHANGED describes what (if anything) has happened. 
Name: restricted_chown; Comment: Change the owner and/or group of the FILE to UID and/or GID (safely) only if REQUIRED_UID and REQUIRED_GID match the owner and group IDs of FILE. ORIG_ST must be the result of 'stat'ing FILE. The 'safely' part above means that we can't simply use chown(2), since FILE might be replaced with some other file between the time of the preceding stat/lstat and this chown call. So here we open FILE and do everything else via the resulting file descriptor. We first call fstat and verify that the dev/inode match those from the preceding stat call, and only then, if appropriate (given the required_uid and required_gid constraints) do we call fchown. Return RC_do_ordinary_chown if we can't open FILE, or if FILE is a special file that might have undesirable side effects when opening. In this case the caller can use the less-safe ordinary chown. Return one of the RCH_status values. 
Name: change_file_owner; Comment: Change the owner and/or group of the file specified by FTS and ENT to UID and/or GID as appropriate. If REQUIRED_UID is not -1, then skip files with any other user ID. If REQUIRED_GID is not -1, then skip files with any other group ID. CHOPT specifies additional options. Return true if successful. 
Name: chown_files; Comment: Change the owner and/or group of the specified FILES. BIT_FLAGS specifies how to treat each symlink-to-directory that is encountered during a recursive traversal. CHOPT specifies additional options. If UID is not -1, then change the owner id of each file to UID. If GID is not -1, then change the group id of each file to GID. If REQUIRED_UID and/or REQUIRED_GID is not -1, then change only files with user ID and group ID that match the non-(-1) value(s). Return true if successful. 
Name: setgroups; Comment: At least Interix lacks supplemental group support. 
Name: parse_additional_groups; Comment: Determine the group IDs for the specified supplementary GROUPS, which is a comma separated list of supplementary groups (names or numbers). Allocate an array for the parsed IDs and store it in PGIDS, which may be allocated even on parse failure. Update the number of parsed groups in PN_GIDS on success. Upon any failure return nonzero, and issue diagnostic if SHOW_ERRORS is true. Otherwise return zero. 
Name: is_root; Comment: Return whether the passed path is equivalent to "/". Note we don't compare against get_root_dev_ino() as "/" could be bind mounted to a separate location. 
Name: cksum; Comment: Calculate and print the checksum and length in bytes of file FILE, or of the standard input if FILE is "-". If PRINT_NAME is true, print FILE next to the checksum and size. Return true if successful. 
Name: writeline; Comment: Output the line in linebuffer LINE to stream STREAM provided the switches say it should be output. CLASS is 1 for a line found only in file 1, 2 for a line only in file 2, 3 for a line in both. 
Name: check_order; Comment: Check that successive input lines PREV and CURRENT from input file WHATFILE are presented in order. If the user specified --nocheck-order, the check is not made. If the user specified --check-order, the problem is fatal. Otherwise (the default), the message is simply a warning. A message is printed at most once per input file. This function was copied (nearly) verbatim from 'src/join.c'. 
Name: compare_files; Comment: None merge them and output the result. 
Name: punch_hole; Comment: Attempt to punch a hole to avoid any permanent speculative preallocation on file systems such as XFS. Return values as per fallocate(2) except ENOSYS etc. are ignored. 
Name: create_hole; Comment: Create a hole at the end of a file, avoiding preallocation if requested. 
Name: sparse_copy; Comment: None print a diagnostic and return false upon error. Note that for best results, BUF should be "well"-aligned. BUF must have sizeof(uintptr_t)-1 bytes of additional space beyond BUF[BUF_SIZE-1]. Set *LAST_WRITE_MADE_HOLE to true if the final operation on DEST_FD introduced a hole. Set *TOTAL_N_READ to the number of bytes read. 
Name: write_zeros; Comment: Write N_BYTES zero bytes to file descriptor FD. Return true if successful. Upon write failure, set errno and return false. 
Name: extent_copy; Comment: Perform an efficient extent copy, if possible. This avoids the overhead of detecting holes in hole-introducing/preserving copy, and thus makes copying sparse files much more efficient. Upon a successful copy, return true. If the initial extent scan fails, set *NORMAL_COPY_REQUIRED to true and return false. Upon any other failure, set *NORMAL_COPY_REQUIRED to false and return false. 
Name: is_ancestor; Comment: FIXME: rewrite this to use a hash table so we avoid the quadratic performance hit that's probably noticeable only on trees deeper than a few hundred levels. See use of active_dir_map in remove.c 
Name: check_selinux_attr; Comment: Exclude SELinux extended attributes that are otherwise handled, and are problematic to copy again. Also honor attributes configured for exclusion in /etc/xattr.conf. FIXME: Should we handle POSIX ACLs similarly? Return zero to skip. 
Name: copy_attr; Comment: If positive SRC_FD and DST_FD descriptors are passed, then copy by fd, otherwise copy by name. 
Name: copy_dir; Comment: Read the contents of the directory SRC_NAME_IN, and recursively copy the contents to DST_NAME_IN. NEW_DST is true if DST_NAME_IN is a directory that was created previously in the recursion. SRC_SB and ANCESTORS describe SRC_NAME_IN. Set COPY_INTO_SELF if SRC_NAME_IN is a parent of (or the same as) DST_NAME_IN; otherwise, clear it. Propagate *FIRST_DIR_CREATED_PER_COMMAND_LINE_ARG from caller to each invocation of copy_internal. Be careful to pass the address of a temporary, and to update *FIRST_DIR_CREATED_PER_COMMAND_LINE_ARG only upon completion. Return true if successful. 
Name: set_owner; Comment: Set the owner and owning group of DEST_DESC to the st_uid and st_gid fields of SRC_SB. If DEST_DESC is undefined (-1), set the owner and owning group of DST_NAME instead; for safety prefer lchown if the system supports it since no symbolic links should be involved. DEST_DESC must refer to the same file as DEST_NAME if defined. Upon failure to set both UID and GID, try to set only the GID. NEW_DST is true if the file was newly created; otherwise, DST_SB is the status of the destination. Return 1 if the initial syscall succeeds, 0 if it fails but it's OK not to preserve ownership, -1 otherwise. 
Name: set_author; Comment: Set the st_author field of DEST_DESC to the st_author field of SRC_SB. If DEST_DESC is undefined (-1), set the st_author field of DST_NAME instead. DEST_DESC must refer to the same file as DEST_NAME if defined. 
Name: set_process_security_ctx; Comment: Set the default security context for the process. New files will have this security context set. Also existing files can have their context adjusted based on this process context, by set_file_security_ctx() called with PROCESS_LOCAL=true. This should be called before files are created so there is no race where a file may be present without an appropriate security context. Based on CP_OPTIONS, diagnose warnings and fail when appropriate. Return FALSE on failure, TRUE on success. 
Name: set_file_security_ctx; Comment: Reset the security context of DST_NAME, to that already set as the process default if PROCESS_LOCAL is true. Otherwise adjust the type component of DST_NAME's security context as per the system default for that path. Issue warnings upon failure, when allowed by various settings in CP_OPTIONS. Return FALSE on failure, TRUE on success. 
Name: fchmod_or_lchmod; Comment: Change the file mode bits of the file identified by DESC or NAME to MODE. Use DESC if DESC is valid and fchmod is available, NAME otherwise. 
Name: is_probably_sparse; Comment: Use a heuristic to determine whether stat buffer SB comes from a file with sparse blocks. If the file has fewer blocks than would normally be needed for a file of its size, then at least one of the blocks in the file is a hole. In that case, return true. 
Name: copy_reg; Comment: Copy a regular file from SRC_NAME to DST_NAME. If the source file contains holes, copies holes and blocks of zeros in the source file as holes in the destination file. (Holes are read as zeroes by the 'read' system call.) When creating the destination, use DST_MODE & ~OMITTED_PERMISSIONS as the third argument in the call to open, adding OMITTED_PERMISSIONS after copying as needed. X provides many option settings. Return true if successful. *NEW_DST is as in copy_internal. SRC_SB is the result of calling XSTAT (aka stat) on SRC_NAME. 
Name: same_file_ok; Comment: Return true if it's ok that the source and destination files are the 'same' by some measure. The goal is to avoid making the 'copy' operation remove both copies of the file in that case, while still allowing the user to e.g., move or copy a regular file onto a symlink that points to it. Try to minimize the cost of this function in the common case. Set *RETURN_NOW if we've determined that the caller has no more work to do and should return successfully, right away. 
Name: writable_destination; Comment: Return true if FILE, with mode MODE, is writable in the sense of 'mv'. Always consider a symbolic link to be writable. 
Name: dest_info_init; Comment: Initialize the hash table implementing a set of F_triple entries corresponding to destination files. 
Name: src_info_init; Comment: Initialize the hash table implementing a set of F_triple entries corresponding to source files listed on the command line. 
Name: abandon_move; Comment: When effecting a move (e.g., for mv(1)), and given the name DST_NAME of the destination and a corresponding stat buffer, DST_SB, return true if the logical 'move' operation should _not_ proceed. Otherwise, return false. Depending on options specified in X, this code may issue an interactive prompt asking whether it's ok to overwrite DST_NAME. 
Name: emit_verbose; Comment: Print --verbose output on standard output, e.g. 'new' -> 'old'. If BACKUP_DST_NAME is non-NULL, then also indicate that it is the name of a backup file. 
Name: restore_default_fscreatecon_or_die; Comment: A wrapper around "setfscreatecon (NULL)" that exits upon failure. 
Name: create_hard_link; Comment: Create a hard link DST_NAME to SRC_NAME, honoring the REPLACE, VERBOSE and DEREFERENCE settings. Return true upon success. Otherwise, diagnose the failure and return false. If SRC_NAME is a symbolic link, then it will not be followed unless DEREFERENCE is true. If the system doesn't support hard links to symbolic links, then DST_NAME will be created as a symbolic link to SRC_NAME. 
Name: copy_internal; Comment: Copy the file SRC_NAME to the file DST_NAME. The files may be of any type. NEW_DST should be true if the file DST_NAME cannot exist because its parent directory was just created; NEW_DST should be false if DST_NAME might already exist. A non-null PARENT describes the parent directory. ANCESTORS points to a linked, null terminated list of devices and inodes of parent directories of SRC_NAME. COMMAND_LINE_ARG is true iff SRC_NAME was specified on the command line. FIRST_DIR_CREATED_PER_COMMAND_LINE_ARG is both input and output. Set COPY_INTO_SELF if SRC_NAME is a parent of (or the same as) DST_NAME; otherwise, clear it. Return true if successful. 
Name: copy; Comment: Copy the file SRC_NAME to the file DST_NAME. The files may be of any type. NONEXISTENT_DST should be true if the file DST_NAME is known not to exist (e.g., because its parent directory was just created); NONEXISTENT_DST should be false if DST_NAME might already exist. OPTIONS is ... FIXME-describe Set COPY_INTO_SELF if SRC_NAME is a parent of (or the same as) DST_NAME; otherwise, set clear it. Return true if successful. 
Name: cp_options_default; Comment: Set *X to the default options for a value of type struct cp_options. 
Name: chown_failure_ok; Comment: Return true if it's OK for chown to fail, where errno is the error number that chown failed with and X is the copying option set. 
Name: owner_failure_ok; Comment: Similarly, return true if it's OK for chmod and similar operations to fail, where errno is the error number that chmod failed with and X is the copying option set. 
Name: cached_umask; Comment: Return the user's umask, caching the result. FIXME: If the destination's parent directory has has a default ACL, some operating systems (e.g., GNU/Linux's "POSIX" ACLs) use that ACL's mask rather than the process umask. Currently, the callers of cached_umask incorrectly assume that this situation cannot occur. 
Name: src_to_dest_compare; Comment: Compare two Src_to_dest entries. Return true if their keys are judged 'equal'. 
Name: forget_created; Comment: Remove the entry matching INO/DEV from the table that maps source ino/dev to destination file name. 
Name: src_to_dest_lookup; Comment: If INO/DEV correspond to an already-copied source file, return the name of the corresponding destination file. Otherwise, return NULL. 
Name: remember_copied; Comment: Add file NAME, copied from inode number INO and device number DEV, to the list of files we have copied. Return NULL if inserted, otherwise non-NULL. 
Name: hash_init; Comment: Initialize the hash table. 
Name: forget_all; Comment: Reset the hash structure in the global variable 'htab' to contain no entries. 
Name: re_protect; Comment: Ensure that the parent directories of CONST_DST_NAME have the correct protections, for the --parents option. This is done after all copying has been completed, to allow permissions that don't include user write/execute. SRC_OFFSET is the index in CONST_DST_NAME of the beginning of the source directory name. ATTR_LIST is a null-terminated linked list of structures that indicates the end of the filename of each intermediate directory in CONST_DST_NAME that may need to have its attributes changed. The command 'cp --parents --preserve a/b/c d/e_dir' changes the attributes of the directories d/e_dir/a and d/e_dir/a/b to match the corresponding source directories regardless of whether they existed before the 'cp' command was given. Return true if the parent of CONST_DST_NAME and any intermediate directories specified by ATTR_LIST have the proper permissions when done. 
Name: make_dir_parents_private; Comment: FIXME: Synch this function with the one in ../lib/mkdir-p.c. 
Name: target_directory_operand; Comment: FILE is the last operand of this command. Return true if FILE is a directory. But report an error and exit if there is a problem accessing FILE, or if FILE does not exist but would have to refer to an existing directory if it referred to anything at all. If the file exists, store the file's status into *ST. Otherwise, set *NEW_DST. 
Name: do_copy; Comment: Scan the arguments, and copy each by calling copy. Return true if successful. 
Name: decode_preserve_arg; Comment: Given a string, ARG, containing a comma-separated list of arguments to the --preserve option, set the appropriate fields of X to ON_OFF. 
Name: cleanup; Comment: Optionally remove files created so far; then exit. Called when an error detected. 
Name: save_to_hold_area; Comment: Keep track of NUM bytes of a partial line in buffer START. These bytes will be retrieved later when another large buffer is read. 
Name: read_input; Comment: Read up to MAX_N_BYTES bytes from the input stream into DEST. Return the number of bytes read. 
Name: clear_line_control; Comment: Initialize existing line record P. 
Name: new_line_control; Comment: Return a new, initialized line record. 
Name: keep_new_line; Comment: Record LINE_START, which is the address of the start of a line of length LINE_LEN in the large buffer, in the lines buffer of B. 
Name: record_line_starts; Comment: None a pointer is kept to this area, which will be used when the next buffer is filled. 
Name: create_new_buffer; Comment: Return a new buffer with room to store SIZE bytes, plus an extra byte for safety. 
Name: get_new_buffer; Comment: Return a new buffer of at least MINSIZE bytes. If a buffer of at least that size is currently free, use it, otherwise create a new one. 
Name: save_buffer; Comment: Append buffer BUF to the linked list of buffers that contain some data yet to be processed. 
Name: load_buffer; Comment: Fill a buffer of input. Set the initial size of the buffer to a default. Fill the buffer (from the hold area and input stream) and find the individual lines. If no lines are found (the buffer is too small to hold the next line), release the current buffer (whose contents would have been put in the hold area) and repeat the process with another large buffer until at least one entire line has been read. Return true if a new buffer was obtained, otherwise false (in which case end-of-file must have been encountered). 
Name: get_first_line_in_buffer; Comment: Return the line number of the first line that has not yet been retrieved. 
Name: remove_line; Comment: Return a pointer to the logical first line in the buffer and make the next line the logical first line. Return NULL if there is no more input. 
Name: find_line; Comment: Search the buffers for line LINENUM, reading more input if necessary. Return a pointer to the line, or NULL if it is not found in the file. 
Name: no_more_lines; Comment: Return true if at least one more line is available for input. 
Name: set_input_file; Comment: Open NAME as standard input. 
Name: write_to_file; Comment: Write all lines from the beginning of the buffer up to, but not including, line LAST_LINE, to the current output file. If IGNORE is true, do not output lines selected here. ARGNUM is the index in ARGV of the current pattern. 
Name: dump_rest_of_file; Comment: Output any lines left after all regexps have been processed. 
Name: process_line_count; Comment: Determine the line number that marks the end of this file, then get those lines and save them to the output file. P is the control record. REPETITION is the repetition number. 
Name: process_regexp; Comment: Read the input until a line matches the regexp in P, outputting it unless P->IGNORE is true. REPETITION is this repeat-count; 0 means the first time. 
Name: split_file; Comment: Split the input file according to the control records we have built. 
Name: make_filename; Comment: Return the name of output file number NUM. This function is called from a signal handler, so it should invoke only reentrant functions that are async-signal-safe. POSIX does not guarantee this for the functions called below, but we don't know of any hosts where this implementation isn't safe. 
Name: create_output_file; Comment: Create the next output file. 
Name: delete_all_files; Comment: If requested, delete all the files we have created. This function must be called only from critical sections. 
Name: close_output_file; Comment: Close the current output file and print the count of characters in this file. 
Name: save_line_to_file; Comment: Save line LINE to the output file and increment the character count for the current file. 
Name: new_control_record; Comment: Return a new, initialized control record. 
Name: check_for_offset; Comment: Check if there is a numeric offset after a regular expression. STR is the entire command line argument. P is the control record for this regular expression. NUM is the numeric part of STR. 
Name: parse_repeat_count; Comment: Given that the first character of command line arg STR is '{', make sure that the rest of the string is a valid repeat count and store its value in P. ARGNUM is the ARGV index of STR. 
Name: cut_bytes; Comment: Read from stream STREAM, printing to standard output any selected bytes. 
Name: cut_fields; Comment: Read from stream STREAM, printing to standard output any selected fields. 
Name: cut_file; Comment: Process file FILE to standard output. Return true if successful. 
Name: batch_convert; Comment: Parse each line in INPUT_FILENAME as with --date and display each resulting time and date. If the file cannot be opened, tell why then exit. Issue a diagnostic for any lines that cannot be parsed. Return true if successful. 
Name: show_date; Comment: Display the date and/or time in WHEN according to the format specified in FORMAT, followed by a newline. Return true if successful. 
Name: maybe_close_stdout; Comment: The only reason to close the standard output *stream* is if parse_long_options fails (as it does for --help or --version). In any other case, dd uses only the STDOUT_FILENO file descriptor, and the "cleanup" function calls "close (STDOUT_FILENO)". Closing the file descriptor and then letting the usual atexit-run close_stdout function call "fclose (stdout)" would result in a harmless failure of the close syscall (with errno EBADF). This function serves solely to avoid the unnecessary close_stdout call, once parse_long_options has succeeded. Meanwhile, we guarantee that the standard error stream is flushed, by inlining the last half of close_stdout as needed. 
Name: _GL_ATTRIBUTE_FORMAT; Comment: Like error() but handle any pending newline. 
Name: alloc_ibuf; Comment: Ensure input buffer IBUF is allocated. 
Name: alloc_obuf; Comment: Ensure output buffer OBUF is allocated/initialized. 
Name: print_xfer_stats; Comment: Print transfer statistics. 
Name: interrupt_handler; Comment: An ordinary signal was received; arrange for the program to exit. 
Name: siginfo_handler; Comment: An info signal was received; arrange for the program to print status. 
Name: install_signal_handlers; Comment: Install the signal handlers. 
Name: process_signals; Comment: Process any pending signals. If signals are caught, this function should be called periodically. Ideally there should never be an unbounded amount of time when signals are not being processed. 
Name: cache_round; Comment: Return LEN rounded down to a multiple of PAGE_SIZE while storing the remainder internally per FD. Pass LEN == 0 to get the current remainder. 
Name: invalidate_cache; Comment: Discard the cache from the current offset of either STDIN_FILENO or STDOUT_FILENO. Return true on success. 
Name: iread; Comment: Read from FD into the buffer BUF of size SIZE, processing any signals that arrive before bytes are read. Return the number of bytes read if successful, -1 (setting errno) on failure. 
Name: iread_fullblock; Comment: Wrapper around iread function to accumulate full blocks. 
Name: iwrite; Comment: Write to FD the buffer BUF of size SIZE, processing any signals that arrive. Return the number of bytes written, setting errno if this is less than SIZE. Keep trying if there are partial writes. 
Name: write_output; Comment: Write, then empty, the output buffer 'obuf'. 
Name: ifd_reopen; Comment: Restart on EINTR from fd_reopen(). 
Name: iftruncate; Comment: Restart on EINTR from ftruncate(). 
Name: operand_matches; Comment: Return true if STR is of the form "PATTERN" or "PATTERNDELIM...". 
Name: parse_symbols; Comment: Interpret one "conv=..." or similar operand STR according to the symbols in TABLE, returning the flags specified. If the operand cannot be parsed, use ERROR_MSGID to generate a diagnostic. 
Name: parse_integer; Comment: Return the value of STR, interpreted as a non-negative decimal integer, optionally multiplied by various values. Set *INVALID to a nonzero error value if STR does not represent a number in this format. 
Name: operand_is; Comment: OPERAND is of the form "X=...". Return true if X is NAME. 
Name: apply_translations; Comment: Fix up translation table. 
Name: translate_buffer; Comment: Apply the character-set translations specified by the user to the NREAD bytes in BUF. 
Name: swab_buffer; Comment: Swap NREAD bytes in BUF, plus possibly an initial char from the previous call. If NREAD is odd, save the last char for the next call. Return the new start of the BUF buffer. 
Name: advance_input_offset; Comment: Add OFFSET to the input offset, setting the overflow flag if necessary. 
Name: skip; Comment: Throw away RECORDS blocks of BLOCKSIZE bytes plus BYTES bytes on file descriptor FDESC, which is open with read permission for FILE. Store up to BLOCKSIZE bytes of the data at a time in IBUF or OBUF, if necessary. RECORDS or BYTES must be nonzero. If FDESC is STDIN_FILENO, advance the input offset. Return the number of records remaining, i.e., that were not skipped because EOF was reached. If FDESC is STDOUT_FILENO, on return, BYTES is the remaining bytes in addition to the remaining records. 
Name: advance_input_after_read_error; Comment: Advance the input by NBYTES if possible, after a read error. The input file offset may or may not have advanced after the failed read; adjust it to point just after the bad record regardless. Return true if successful, or if the input is already known to not be seekable. 
Name: copy_simple; Comment: Copy NREAD bytes of BUF, with no conversions. 
Name: copy_with_block; Comment: Copy NREAD bytes of BUF, doing conv=block (pad newline-terminated records to 'conversion_blocksize', replacing the newline with trailing spaces). 
Name: copy_with_unblock; Comment: Copy NREAD bytes of BUF, doing conv=unblock (replace trailing spaces in 'conversion_blocksize'-sized records with a newline). 
Name: set_fd_flags; Comment: Set the file descriptor flags for FD that correspond to the nonzero bits in ADD_FLAGS. The file's name is NAME. 
Name: dd_copy; Comment: The main loop. 
Name: hide_problematic_chars; Comment: Replace problematic chars with '?'. Since only control characters are currently considered, this should work in all encodings. 
Name: alloc_table_row; Comment: Dynamically allocate a row of pointers in TABLE, which can then be accessed with standard 2D array notation. 
Name: print_table; Comment: Output each cell in the table, accounting for the alignment and max width of each column. 
Name: alloc_field; Comment: Dynamically allocate a struct field_t in COLUMNS, which can then be accessed with standard array notation. 
Name: decode_output_arg; Comment: Given a string, ARG, containing a comma-separated list of arguments to the --output option, add the appropriate fields to columns. 
Name: get_field_list; Comment: Get the appropriate columns for the mode. 
Name: get_header; Comment: Obtain the appropriate header entries. 
Name: selected_fstype; Comment: Is FSTYPE a type of file system that should be listed? 
Name: excluded_fstype; Comment: Is FSTYPE a type of file system that should be omitted? 
Name: filter_mount_list; Comment: Filter mount list by skipping duplicate entries. In the case of duplicates - based on the device number - the mount entry with a '/' in its me_devname (i.e., not pseudo name like tmpfs) wins. If both have a real devname (e.g. bind mounts), then that with the shorter me_mountdir wins. With DEVICES_ONLY == true (set with df -a), only update the global devlist_table, rather than filtering the global mount_list. 
Name: me_for_dev; Comment: Search a mount entry list for device id DEV. Return the corresponding mount entry if found or NULL if not. 
Name: known_value; Comment: Return true if N is a known integer value. On many file systems, UINTMAX_MAX represents an unknown value; on AIX, UINTMAX_MAX - 1 represents unknown. Use a rule that works on AIX file systems, and that almost-always works on other types. 
Name: df_readable; Comment: Like human_readable (N, BUF, human_output_opts, INPUT_UNITS, OUTPUT_UNITS), except: - If NEGATIVE, then N represents a negative number, expressed in two's complement. - Otherwise, return "-" if N is unknown. 
Name: add_uint_with_neg_flag; Comment: Add integral value while using uintmax_t for value part and separate negation flag. It adds value of SRC and SRC_NEG to DEST and DEST_NEG. The result will be in DEST and DEST_NEG. See df_readable to understand how the negation flag is used. 
Name: has_uuid_suffix; Comment: Return true if S ends in a string that may be a 36-byte UUID, i.e., of the form HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH, where each H is an upper or lower case hexadecimal digit. 
Name: get_field_values; Comment: Obtain the block values BV and inode values IV from the file system usage FSU. 
Name: add_to_grand_total; Comment: Add block and inode values to grand total. 
Name: get_dev; Comment: Obtain a space listing for the disk device with absolute file name DISK. If MOUNT_POINT is non-NULL, it is the name of the root of the file system on DISK. If STAT_FILE is non-null, it is the name of a file within the file system that the user originally asked for; this provides better diagnostics, and sometimes it provides better results on networked file systems that give different free-space results depending on where in the file system you probe. If FSTYPE is non-NULL, it is the type of the file system on DISK. If MOUNT_POINT is non-NULL, then DISK may be NULL -- certain systems may not be able to produce statistics in this case. ME_DUMMY and ME_REMOTE are the mount entry flags. Caller must set PROCESS_ALL to true when iterating over all entries, as when df is invoked with no non-option argument. See below for details. 
Name: last_device_for_mount; Comment: Scan the mount list returning the _last_ device found for MOUNT. NULL is returned if MOUNT not found. The result is malloced. 
Name: get_disk; Comment: If DISK corresponds to a mount point, show its usage and return true. Otherwise, return false. 
Name: get_point; Comment: Figure out which device file or directory POINT is mounted on and show its disk usage. STATP must be the result of 'stat (POINT, STATP)'. 
Name: get_entry; Comment: Determine what kind of node NAME is and show the disk usage for it. STATP is the results of 'stat' on NAME. 
Name: get_all_entries; Comment: Show all mounted file systems, except perhaps those that are of an unselected type or are empty. 
Name: add_fs_type; Comment: Add FSTYPE to the list of file system types to display. 
Name: add_excluded_fs_type; Comment: Add FSTYPE to the list of file system types to be omitted. 
Name: guess_shell_syntax; Comment: If the SHELL environment variable is set to 'csh' or 'tcsh,' assume C shell. Else Bourne shell. 
Name: append_quoted; Comment: FIXME: Write a string to standard out, while watching for "dangerous" sequences like unescaped : and = characters. 
Name: dc_parse_stream; Comment: Read the file open on FP (with name FILENAME). First, look for a 'TERM name' directive where name matches the current terminal type. Once found, translate and accumulate the associated directives onto the global obstack LSC_OBSTACK. Give a diagnostic upon failure (unrecognized keyword is the only way to fail here). Return true if successful. 
Name: hash_ins; Comment: Try to insert the INO/DEV pair into DI_SET. Return true if the pair is successfully inserted, false if the pair was already there. 
Name: show_date; Comment: Display the date and time in WHEN according to the format specified in FORMAT. 
Name: print_only_size; Comment: Print N_BYTES. Convert it to a readable value before printing. 
Name: print_size; Comment: Print size (and optionally time) indicated by *PDUI, followed by STRING. 
Name: fill_mount_table; Comment: Fill the di_mnt set with local mount point dev/ino pairs. 
Name: mount_point_in_fts_cycle; Comment: This function checks whether any of the directories in the cycle that fts detected is a mount point. 
Name: process_file; Comment: This function is called once for every file system object that fts encounters. fts does a depth-first traversal. This function knows that and accumulates per-directory totals based on changes in the depth of the current entry. It returns true on success. 
Name: du_files; Comment: Recursively print the sizes of the directories (and, if selected, files) named in FILES, the last entry of which is NULL. BIT_FLAGS controls how fts works. Return true if successful. 
Name: hextobin; Comment: Convert C from hexadecimal character to integer. 
Name: main; Comment: Print the words in LIST to standard output. If the first word is '-n', then don't print a trailing newline. We also support the echo syntax from Version 9 unix systems. 
Name: add_tab_stop; Comment: Add tab stop TABVAL to the end of 'tab_list'. 
Name: parse_tab_stops; Comment: Add the comma or blank separated list of tab stops STOPS to the list of tab stops. 
Name: validate_tab_stops; Comment: Check that the list of tab stops TABS, with ENTRIES entries, contains only nonzero, ascending values. 
Name: finalize_tab_stops; Comment: Called after all command-line options have been parsed, and add_tab_stop/parse_tab_stops have been called. Will validate the tab-stop values, and set the final values to: tab-stops = 8 (if no tab-stops given on command line) tab-stops = N (if value N specified as the only value). tab-stops = distinct values given on command line (if multiple values given). 
Name: set_file_list; Comment: Sets new file-list 
Name: next_file; Comment: Close the old stream pointer FP if it is non-NULL, and return a new one opened to read the next input file. Open a filename of '-' as the standard input. Return NULL if there are no more input files. 
Name: cleanup_file_list_stdin; Comment: 
Name: expand; Comment: Change tabs to spaces, writing to stdout. Read each file in 'file_list', in order. 
Name: syntax_error; Comment: Report a syntax error and exit. 
Name: integer_overflow; Comment: Report an integer overflow for operation OP and exit. 
Name: int_value; Comment: Return a VALUE for I. 
Name: str_value; Comment: Return a VALUE for S. 
Name: freev; Comment: Free VALUE V, including structure components. 
Name: printv; Comment: Print VALUE V. 
Name: null; Comment: Return true if V is a null-string or zero-number. 
Name: looks_like_integer; Comment: Return true if CP takes the form of an integer. 
Name: tostring; Comment: Coerce V to a string value (can't fail). 
Name: toarith; Comment: Coerce V to an integer value. Return true on success, false on failure. 
Name: getsize; Comment: Extract a size_t value from an integer value I. If the value is negative, return SIZE_MAX. If the value is too large, return SIZE_MAX - 1. 
Name: nextarg; Comment: Return true and advance if the next token matches STR exactly. STR must not be NULL. 
Name: nomoreargs; Comment: Return true if there no more tokens. 
Name: docolon; Comment: Do the : operator. SV is the VALUE for the lhs (the string), PV is the VALUE for the rhs (the pattern). 
Name: eval7; Comment: Handle bare operands and ( expr ) syntax. 
Name: eval6; Comment: Handle match, substr, index, and length keywords, and quoting "+". 
Name: eval5; Comment: Handle : operator (pattern matching). Calls docolon to do the real work. 
Name: eval4; Comment: Handle *, /, % operators. 
Name: eval3; Comment: Handle +, - operators. 
Name: eval2; Comment: Handle comparisons. 
Name: eval1; Comment: Handle &. 
Name: eval; Comment: Handle |. 
Name: extent_need_sync; Comment: Work around Linux kernel issues on BTRFS and EXT4. 
Name: extent_scan_init; Comment: Allocate space for struct extent_scan, initialize the entries if necessary and return it as the input argument of extent_scan_read(). 
Name: extent_scan_read; Comment: Call ioctl(2) with FS_IOC_FIEMAP (available in linux 2.6.27) to obtain a map of file extents excluding holes. 
Name: mod2; Comment: Compute r = a mod d, where r = <*t1,retval>, a = <a1,a0>, d = <d1,d0>. Requires that d1 != 0. 
Name: factor_using_division; Comment: Trial division with odd primes uses the following trick. Let p be an odd prime, and B = 2^{W_TYPE_SIZE}. For simplicity, consider the case t < B (this is the second loop below). From our tables we get binv = p^{-1} (mod B) lim = floor ( (B-1) / p ). First assume that t is a multiple of p, t = qp. Then 0 <= q <= lim (and all quotients in this range occur for some t). Then t = qp is true also (mod B), and p is invertible we get q = tbinv (mod B). Next, assume that t is *not* divisible by p. Since multiplication by binv (mod B) is a one-to-one mapping, tbinv (mod B) > lim, because all the smaller values are already taken. This can be summed up by saying that the function q(t) = binvt (mod B) is a permutation of the range 0 <= t < B, with the curious property that it maps the multiples of p onto the range 0 <= q <= lim, in order, and the non-multiples of p onto the range lim < q < B. 
Name: mulredc2; Comment: Modular two-word multiplication, r = ab mod m, with mi = m^(-1) mod B. Both a and b must be in redc form, the result will be in redc form too. For performance reasons, the most significant bit of m must be clear. 
Name: prime_p; Comment: Lucas' prime test. The number of iterations vary greatly, up to a few dozen have been observed. The average seem to be about 2. 
Name: isqrt; Comment: FIXME: Maybe better to use an iteration converging to 1/sqrt(n)? If algorithm is replaced, consider also returning the remainder. 
Name: is_square; Comment: Return the square root if the input is a square, otherwise 0. 
Name: factor_using_squfof; Comment: Return true on success. Expected to fail only for numbers >= 2^{2*W_TYPE_SIZE - 2}, or close to that limit. 
Name: factor; Comment: Compute the prime factors of the 128-bit number (T1,T0), and put the results in FACTORS. 
Name: mp_factor; Comment: Use Pollard-rho to compute the prime factors of arbitrary-precision T, and put the results in FACTORS. 
Name: lbuf_flush; Comment: Write complete LBUF to standard output. 
Name: lbuf_putc; Comment: Add a character C to LBUF and if it's a newline and enough bytes are already buffered, then write atomically to standard output. 
Name: lbuf_putint; Comment: Buffer an int to the internal LBUF. 
Name: print_factors_single; Comment: Single-precision factoring 
Name: print_factors; Comment: Emit the factors of the indicated number. If we have the option of using either algorithm, we select on the basis of the length of the number. For longer numbers, we prefer the MP algorithm even if the native algorithm has enough digits, because the algorithm is better. The turnover point depends on the value. 
Name: find_mount_point; Comment: Return the root mountpoint of the file system on which FILE exists, in malloced storage. FILE_STAT should be the result of stating FILE. Give a diagnostic and return NULL if unable to determine the mount point. Exit if unable to restore current working directory. 
Name: set_prefix; Comment: Trim space from the front and back of the string P, yielding the prefix, and record the lengths of the prefix and the space trimmed. 
Name: fmt; Comment: read file F and send formatted output to stdout. 
Name: set_other_indent; Comment: Set the global variable 'other_indent' according to SAME_PARAGRAPH and other global variables. 
Name: get_paragraph; Comment: Read a paragraph from input file F. A paragraph consists of a maximal number of non-blank (excluding any prefix) lines subject to: In split mode, a paragraph is a single non-blank line. In crown mode, the second and subsequent lines must have the same indentation, but possibly different from the indent of the first line. Tagged mode is similar, but the first and second lines must have different indentations. Otherwise, all lines of a paragraph must have the same indent. If a prefix is in effect, it must be present at the same indent for each line in the paragraph. Return false if end-of-file was encountered before the start of a paragraph, else true. 
Name: copy_rest; Comment: Copy to the output a line that failed to match the prefix, or that was blank after the prefix. In the former case, C is the character that failed to match the prefix. In the latter, C is _n or EOF. Return the character (_n or EOF) ending the line. 
Name: same_para; Comment: Return true if a line whose first non-blank character after the prefix (if any) is C could belong to the current paragraph, otherwise false. 
Name: get_line; Comment: Read a line from input file F, given first non-blank character C after the prefix, and the following indent, and break it into words. A word is a maximal non-empty string of non-white characters. A word ending in [.?!]["')_]]* and followed by end-of-line or at least two spaces ends a sentence, as in emacs. Return the first non-blank character of the next line. 
Name: get_prefix; Comment: Read a prefix from input file F. Return either first non-matching character, or first non-blank character after the prefix. 
Name: get_space; Comment: Read blank characters from input file F, starting with C, and keeping in_column up-to-date. Return first non-blank character. 
Name: check_punctuation; Comment: Set extra fields in word W describing any attached punctuation. 
Name: flush_paragraph; Comment: Flush part of the paragraph to make room. This function is called on hitting the limit on the number of words or characters. 
Name: fmt_paragraph; Comment: Compute the optimal formatting for the whole paragraph by computing and remembering the optimal formatting for each suffix from the empty one to the whole paragraph. 
Name: base_cost; Comment: Return the constant component of the cost of breaking before the word THIS. 
Name: line_cost; Comment: Return the component of the cost of breaking before word NEXT that depends on LEN, the length of the line beginning there. 
Name: put_paragraph; Comment: Output to stdout a paragraph from word up to (but not including) FINISH, which must be in the next_break chain from word. 
Name: put_line; Comment: Output to stdout the line beginning with word W, beginning in column INDENT, including the prefix (if any). 
Name: put_word; Comment: Output to stdout the word W. 
Name: put_space; Comment: Output to stdout SPACE spaces, or equivalent tabs. 
Name: adjust_column; Comment: Assuming the current column is COLUMN, return the column that printing C will move the cursor to. The first column is 0. 
Name: fold_file; Comment: Fold file FILENAME, or standard input if FILENAME is "-", to stdout, with maximum line length WIDTH. Return true if successful. 
Name: decimal_absval_add_one; Comment: Add one to the absolute value of the number whose textual representation is BUF + 1. Do this in-place, in the buffer. Return a pointer to the result, which is normally BUF + 1, but is BUF if the representation grew in size. 
Name: print_group_list; Comment: Print all of the distinct groups the user is in. 
Name: gidtostr_ptr; Comment: Convert a gid_t to string. Do not use this function directly. Instead, use it via the gidtostr macro. Beware that it returns a pointer to static storage. 
Name: print_group; Comment: Print the name or value of group ID GID. 
Name: xwrite_stdout; Comment: Write N_BYTES from BUFFER to stdout. Exit immediately on error with a single diagnostic. 
Name: copy_fd; Comment: Copy no more than N_BYTES from file descriptor SRC_FD to stdout. Return an appropriate indication of success or read failure. 
Name: elseek; Comment: Call lseek (FD, OFFSET, WHENCE), where file descriptor FD corresponds to the file FILENAME. WHENCE must be SEEK_SET or SEEK_CUR. Return the resulting offset. Give a diagnostic and return -1 if lseek fails. 
Name: elide_tail_bytes_pipe; Comment: For an input file with name FILENAME and descriptor FD, output all but the last N_ELIDE_0 bytes. If CURRENT_POS is nonnegative, assume that the input file is positioned at CURRENT_POS and that it should be repositioned to just before the elided bytes before returning. Return true upon success. Give a diagnostic and return false upon error. 
Name: elide_tail_bytes_file; Comment: NOTE: if the input file shrinks by more than N_ELIDE bytes between the length determination and the actual reading, then head fails. 
Name: elide_tail_lines_pipe; Comment: For an input file with name FILENAME and descriptor FD, output all but the last N_ELIDE_0 bytes. If CURRENT_POS is nonnegative, the input file is positioned there and should be repositioned to just before the elided bytes. Buffer the specified number of lines as a linked list of LBUFFERs, adding them as needed. Return true if successful. 
Name: elide_tail_lines_seekable; Comment: Output all but the last N_LINES lines of the input stream defined by FD, START_POS, and SIZE. START_POS is the starting position of the read pointer for the file associated with FD (may be nonzero). SIZE is the file size in bytes. Return true upon success. Give a diagnostic and return false upon error. NOTE: this code is very similar to that of tail.c's file_lines function. Unfortunately, factoring out some common core looks like it'd result in a less efficient implementation or a messy interface. 
Name: elide_tail_lines_file; Comment: For the file FILENAME with descriptor FD, output all but the last N_ELIDE lines. If SIZE is nonnegative, this is a regular file positioned at START_POS with SIZE bytes. Return true on success. Give a diagnostic and return nonzero upon error. 
Name: string_to_integer; Comment: Convert a string of decimal digits, N_STRING, with an optional suffix to an integral value. Upon successful conversion, return that value. If it cannot be converted, give a diagnostic and exit. COUNT_LINES indicates whether N_STRING is a number of bytes or a number of lines. It is used solely to give a more specific diagnostic. 
Name: uidtostr_ptr; Comment: Convert a uid_t to string. Do not use this function directly. Instead, use it via the uidtostr macro. Beware that it returns a pointer to static storage. 
Name: print_user; Comment: Print the name or value of user ID UID. 
Name: print_full_info; Comment: Print all of the info about the user's user and group IDs. 
Name: have_same_content; Comment: Compare content of opened files using file descriptors A_FD and B_FD. Return true if files are equal. 
Name: extra_mode; Comment: Return true for mode with non-permission bits. 
Name: need_copy; Comment: Return true if copy of file SRC_NAME to file DEST_NAME is necessary. 
Name: setdefaultfilecon; Comment: Modify file context to match the specified policy. If an error occurs the file will remain with the default directory context. Note this sets the context to that returned by matchpathcon, and thus discards MLS levels and user identity of the FILE. 
Name: target_directory_operand; Comment: FILE is the last operand of this command. Return true if FILE is a directory. But report an error there is a problem accessing FILE, or if FILE does not exist but would have to refer to an existing directory if it referred to anything at all. 
Name: announce_mkdir; Comment: Report that directory DIR was made, if OPTIONS requests this. 
Name: make_ancestor; Comment: Make ancestor directory DIR, whose last file name component is COMPONENT, with options OPTIONS. Assume the working directory is COMPONENT's parent. 
Name: process_dir; Comment: Process a command-line file name, for the -d option. 
Name: copy_file; Comment: Copy file FROM onto file TO, creating TO if necessary. Return true if successful. 
Name: change_attributes; Comment: Set the attributes of file or directory NAME. Return true if successful. 
Name: change_timestamps; Comment: Set the timestamps of file DEST to match those of SRC_SB. Return true if successful. 
Name: strip; Comment: Strip the symbol table from the file NAME. We could dig the magic number out of the file first to determine whether to strip it, but the header files and magic numbers vary so much from system to system that making it portable would be very difficult. Not worth the effort. 
Name: get_ids; Comment: Initialize the user and group ownership of the files to install. 
Name: install_file_in_file; Comment: Copy file FROM onto file TO and give TO the appropriate attributes. Return true if successful. 
Name: mkancesdirs_safe_wd; Comment: Create any missing parent directories of TO, while maintaining the current Working Directory. Return true if successful. 
Name: install_file_in_file_parents; Comment: Copy file FROM onto file TO, creating any missing parent directories of TO. Return true if successful. 
Name: install_file_in_dir; Comment: Copy file FROM into directory TO_DIR, keeping its same name, and give the copy the appropriate attributes. Return true if successful. 
Name: extract_field; Comment: Record a field in LINE, with location FIELD and size LEN. 
Name: xfields; Comment: Fill in the 'fields' structure in LINE. 
Name: keycmp; Comment: Return <0 if the join field in LINE1 compares less than the one in LINE2; >0 if it compares greater; 0 if it compares equal. Report an error and exit if the comparison fails. Use join fields JF_1 and JF_2 respectively. 
Name: check_order; Comment: Check that successive input lines PREV and CURRENT from input file WHATFILE are presented in order, unless the user may be relying on the GNU extension that input lines may be out of order if no input lines are unpairable. If the user specified --nocheck-order, the check is not made. If the user specified --check-order, the problem is fatal. Otherwise (the default), the message is simply a warning. A message is printed at most once per input file. 
Name: get_line; Comment: Read a line from FP into LINE and split it into fields. Return true if successful. 
Name: getseq; Comment: Read a line from FP and add it to SEQ. Return true if successful. 
Name: advance_seq; Comment: Read a line from FP and add it to SEQ, as the first item if FIRST is true, else as the next. 
Name: prfield; Comment: Print field N of LINE if it exists and is nonempty, otherwise 'empty_filler' if it is nonempty. 
Name: prfields; Comment: Output all the fields in line, other than the join field. 
Name: prjoin; Comment: Print the join of LINE1 and LINE2. 
Name: join; Comment: Print the join of the files in FP1 and FP2. 
Name: add_field; Comment: Add a field spec for field FIELD of file FILE to 'outlist'. 
Name: string_to_join_field; Comment: Convert a string of decimal digits, STR (the 1-based join field number), to an integral value. Upon successful conversion, return one less (the zero-based field number). Silently convert too-large values to SIZE_MAX - 1. Otherwise, if a value cannot be converted, give a diagnostic and exit. 
Name: decode_field_spec; Comment: Convert a single field specifier string, S, to a *FILE_INDEX, *FIELD_INDEX pair. In S, the field index string is 1-based; FIELD_INDEX is zero-based. If S is valid, return true. Otherwise, give a diagnostic and exit. 
Name: add_field_list; Comment: Add the comma or blank separated field spec(s) in STR to 'outlist'. 
Name: set_join_field; Comment: Set the join field *VAR to VAL, but report an error if *VAR is set more than once to incompatible values. 
Name: add_file_name; Comment: Add NAME to the array of input file NAMES with operand statuses OPERAND_STATUS; currently there are NFILES names in the list. 
Name: print_table_row; Comment: Print a row of 'kill -t' output. NUM_WIDTH is the maximum signal number width, and SIGNUM is the signal number to print. The maximum name width is NAME_WIDTH, and SIGNAME is the name to print. 
Name: list_signals; Comment: Print a list of signal names. If TABLE, print a table. Print the names specified by ARGV if nonzero; otherwise, print all known names. Return a suitable exit status. 
Name: send_signals; Comment: Send signal SIGNUM to all the processes or process groups specified by ARGV. Return a suitable exit status. 
Name: fileno_to_name; Comment: None Now the POSIX standard says that "allocating a buffer of size bytes does not necessarily imply that all of size bytes are used for the buffer area". However I think it's just a buggy implementation due to the various inconsistencies with write sizes and subsequent writes. 
Name: __attribute; Comment: Use __attribute to avoid elision of __attribute__ on SUNPRO_C etc. 
Name: errno_nonexisting; Comment: Return true when the passed ERR implies that a file does not or could not exist. 
Name: target_directory_operand; Comment: FILE is the last operand of this command. Return true if FILE is a directory. But report an error if there is a problem accessing FILE, or if FILE does not exist but would have to refer to an existing directory if it referred to anything at all. 
Name: convert_abs_rel; Comment: Return FROM represented as relative to the dir of TARGET. The result is malloced. 
Name: do_link; Comment: Make a link DEST to the (usually) existing file SOURCE. Symbolic links to nonexistent files are allowed. Return true if successful. 
Name: dev_ino_push; Comment: Push a pair onto the device/inode stack. 
Name: dev_ino_pop; Comment: Pop a dev/ino struct off the global dev_ino_obstack and return that struct. 
Name: dired_dump_obstack; Comment: Write to standard output PREFIX, followed by the quoting style and a space-separated list of the integers stored in OS all on one line. 
Name: first_percent_b; Comment: Return the address of the first plain %b spec in FMT, or NULL if there is no such spec. %5b etc. do not match, so that user widths/flags are honored. 
Name: abmon_init; Comment: Store into ABMON the abbreviated month names, suitably aligned. Return true if successful. 
Name: abformat_init; Comment: Initialize ABFORMAT and USE_ABFORMAT. 
Name: visit_dir; Comment: Add the device/inode pair (P->st_dev/P->st_ino) to the set of active directories. Return true if there is already a matching entry in the table. 
Name: sighandler; Comment: An ordinary signal was received; arrange for the program to exit. 
Name: stophandler; Comment: A SIGTSTP was received; arrange for the program to suspend itself. 
Name: process_signals; Comment: Process any pending signals. If signals are caught, this function should be called periodically. Ideally there should never be an unbounded amount of time when signals are not being processed. Signal handling can restore the default colors, so callers must immediately change colors after invoking this function. 
Name: signal_setup; Comment: Setup signal handlers if INIT is true, otherwise restore to the default. 
Name: set_line_length; Comment: Set the line length to the value given by SPEC. Return true if successful. 0 means no limit on line length. 
Name: decode_switches; Comment: Set all the option flags according to the switches specified. Return the index of the first non-option argument. 
Name: get_funky_string; Comment: Parse a string as part of the LS_COLORS variable; this may involve decoding all kinds of escape characters. If equals_end is set an unescaped equal sign ends the string, otherwise only a : or _0 does. Set OUTPUT_COUNT to the number of bytes output. Return true if successful. The resulting string is not null-terminated, but may contain embedded nulls. Note that both dest and src are char ; on return they point to the first free byte after the array and the character that ended the input string, respectively. 
Name: known_term_type; Comment: Check if the content of TERM is a valid name in dircolors. 
Name: getenv_quoting_style; Comment: Set the quoting style default if the environment variable QUOTING_STYLE is set. 
Name: set_exit_status; Comment: Set the exit status to report a failure. If SERIOUS, it is a serious failure; otherwise, it is merely a minor problem. 
Name: file_failure; Comment: Assuming a failure is serious if SERIOUS, use the printf-style MESSAGE to report the failure to access a file named FILE. Assume errno is set appropriately for the failure. 
Name: queue_directory; Comment: Request that the directory named NAME have its contents listed later. If REALNAME is nonzero, it will be used instead of NAME when the directory name is printed. This allows symbolic links to directories to be treated as regular directories but still be listed under their real names. NAME == NULL is used to insert a marker entry for the directory named in REALNAME. If NAME is non-NULL, we use its dev/ino information to save a call to stat -- when doing a recursive (-R) traversal. COMMAND_LINE_ARG means this directory was mentioned on the command line. 
Name: print_dir; Comment: None this is used for symbolic links to directories. COMMAND_LINE_ARG means this directory was mentioned on the command line. 
Name: add_ignore_pattern; Comment: Add 'pattern' to the list of patterns for which files that match are not listed. 
Name: patterns_match; Comment: Return true if one of the PATTERNS matches FILE. 
Name: file_ignored; Comment: Return true if FILE should be ignored. 
Name: unsigned_file_size; Comment: POSIX requires that a file size be printed without a sign, even when negative. Assume the typical case where negative sizes are actually positive values that have wrapped around. 
Name: has_capability; Comment: Return true if NAME has a capability (see linux/capability.h) 
Name: free_ent; Comment: Enter and remove entries in the table 'cwd_file'. 
Name: clear_files; Comment: Empty the table of files. 
Name: errno_unsupported; Comment: Return true if ERR implies lack-of-support failure by a getxattr-calling function like getfilecon or file_has_acl. 
Name: getfilecon_cache; Comment: Cache *getfilecon failure, when it's trivial to do so. Like getfilecon/lgetfilecon, but when F's st_dev says it's doesn't support getting the security context, fail with ENOTSUP immediately. 
Name: file_has_acl_cache; Comment: Cache file_has_acl failure, when it's trivial to do. Like file_has_acl, but when F's st_dev says it's on a file system lacking ACL support, return 0 with ENOTSUP immediately. 
Name: has_capability_cache; Comment: Cache has_capability failure, when it's trivial to do. Like has_capability, but when F's st_dev says it's on a file system lacking capability support, return 0 with ENOTSUP immediately. 
Name: gobble_file; Comment: Add a file to the current table of files. Verify that the file exists, and print an error message if it does not. Return the number of blocks that the file occupies. 
Name: is_directory; Comment: Return true if F refers to a directory. 
Name: get_link_name; Comment: Put the name of the file that FILENAME is a symbolic link to into the LINKNAME field of 'f'. COMMAND_LINE_ARG indicates whether FILENAME is a command-line argument. 
Name: make_link_name; Comment: If LINKNAME is a relative name and NAME contains one or more leading directories, return LINKNAME with those directories prepended; otherwise, return a copy of LINKNAME. If LINKNAME is NULL, return NULL. 
Name: basename_is_dot_or_dotdot; Comment: Return true if the last component of NAME is '.' or '..' This is so we don't try to recurse on '././././. ...' 
Name: extract_dirs_from_files; Comment: None if it is null, no prefix is needed and "." and ".." should not be ignored. If COMMAND_LINE_ARG is true, this directory was mentioned at the top level, This is desirable when processing directories recursively. 
Name: initialize_ordering_vector; Comment: Set up SORTED_FILE to point to the in-use entries in CWD_FILE, in order. 
Name: sort_files; Comment: Sort the files now in the table. 
Name: print_current_files; Comment: List all the files now in the table. 
Name: align_nstrftime; Comment: Replace the first %b with precomputed aligned month names. Note on glibc-2.7 at least, this speeds up the whole 'ls -lU' process by around 17%, compared to letting strftime() handle the %b. 
Name: long_time_expected_width; Comment: Return the expected number of columns in a long-format time stamp, or zero if it cannot be calculated. 
Name: format_user_or_group; Comment: Print the user or group name NAME, with numeric id ID, using a print width of WIDTH columns. 
Name: format_user; Comment: Print the name or id of the user with id U, using a print width of WIDTH. 
Name: format_group; Comment: Likewise, for groups. 
Name: format_user_or_group_width; Comment: Return the number of columns that format_user_or_group will print. 
Name: format_user_width; Comment: Return the number of columns that format_user will print. 
Name: format_group_width; Comment: Likewise, for groups. 
Name: format_inode; Comment: Return a pointer to a formatted version of F->stat.st_ino, possibly using buffer, BUF, of length BUFLEN, which must be at least INT_BUFSIZE_BOUND (uintmax_t) bytes. 
Name: print_long_format; Comment: Print information about F in long format. 
Name: quote_name_buf; Comment: Write to *BUF a quoted representation of the file name NAME, if non-NULL, using OPTIONS to control quoting. *BUF is set to NAME if no quoting is required. *BUF is allocated if more space required (and the original *BUF is not deallocated). Store the number of screen columns occupied by NAME's quoted representation into WIDTH, if non-NULL. Store into PAD whether an initial space is needed for padding. Return the number of bytes in *BUF. 
Name: print_file_name_and_frills; Comment: Print the file name of 'f' with appropriate quoting. Also print file size, inode number, and filetype indicator character, as requested by switches. 
Name: get_type_indicator; Comment: Given these arguments describing a file, return the single-byte type indicator, or 0. 
Name: print_color_indicator; Comment: Returns if color sequence was printed. 
Name: get_color_indicator; Comment: Returns color indicator or NULL if none. 
Name: put_indicator; Comment: Output a color indicator (which may contain nulls). 
Name: print_with_separator; Comment: Output name + SEP + ' '. 
Name: indent; Comment: Assuming cursor is at position FROM, indent up to position TO. Use a TAB character instead of two or more spaces whenever possible. 
Name: attach; Comment: FIXME: maybe remove this function someday. See about using a non-malloc'ing version of file_name_concat. 
Name: init_column_info; Comment: Allocate enough column info suitable for the current number of files and display columns, and initialize the info to represent the narrowest possible columns. 
Name: calculate_columns; Comment: Calculate the number of columns needed to represent the current set of files in the current display width. 
Name: filename_unescape; Comment: Given a file name, S of length S_LEN, that is not NUL-terminated, modify it in place, performing the equivalent of this sed substitution: 's__n_ng;s______g' i.e., replacing each "__n" string with a newline and each "____" with a single backslash, NUL-terminate it and return S. If S is not a valid escaped file name, i.e., if it ends with an odd number of backslashes or if it contains a backslash followed by anything other than "n" or another backslash, return NULL. 
Name: bsd_split_3; Comment: Split the checksum string S (of length S_LEN) from a BSD 'md5' or 'sha1' command into two parts: a hexadecimal digest, and the file name. S is modified. Return true if successful. 
Name: split_3; Comment: Split the string S (of length S_LEN) into three parts: a hexadecimal digest, binary flag, and the file name. S is modified. Return true if successful. 
Name: hex_digits; Comment: Return true if S is a NUL-terminated string of DIGEST_HEX_BYTES hex digits. Otherwise, return false. 
Name: print_filename; Comment: If ESCAPE is true, then translate each NEWLINE byte to the string, "__n", and each backslash to "____". 
Name: digest_file; Comment: An interface to the function, DIGEST_STREAM. Operate on FILENAME (it may be "-"). BINARY indicates whether the file is binary. BINARY < 0 means it depends on whether binary mode makes any difference and the file is a terminal; in that case, clear BINARY if the file was treated as text because it was a terminal. Put the checksum in *BIN_RESULT, which must be properly aligned. Put true in *MISSING if the file can't be opened due to ENOENT. Return true if successful. 
Name: make_ancestor; Comment: Make ancestor directory DIR, whose last component is COMPONENT, with options OPTIONS. Assume the working directory is COMPONENT's parent. Return 0 if successful and the resulting directory is readable, 1 if successful but the resulting directory is not readable, -1 (setting errno) otherwise. 
Name: process_dir; Comment: Process a command-line file name. 
Name: maybe_close_stdout; Comment: Avoid closing stdout twice. Since we conditionally call close_stream (stdout) in order to decide whether to clean up a temporary file, the exit hook needs to know whether to do all of close_stdout or just the stderr half. 
Name: target_directory_operand; Comment: FILE is the last operand of this command. Return true if FILE is a directory. But report an error if there is a problem accessing FILE, other than nonexistence (errno == ENOENT). 
Name: do_move; Comment: Move SOURCE onto DEST. Handles cross-file-system moves. If SOURCE is a directory, DEST must not exist. Return true if successful. 
Name: movefile; Comment: Move file SOURCE onto DEST. Handles the case when DEST is a directory. Treat DEST as a directory if DEST_IS_DIR. Return true if successful. 
Name: usage; Comment: Print a usage message and quit. 
Name: build_type_arg; Comment: Set the command line flag TYPEP and possibly the regex pointer REGEXP, according to 'optarg'. 
Name: print_lineno; Comment: Print the line number and separator; increment the line number. 
Name: proc_header; Comment: Switch to a header section. 
Name: proc_body; Comment: Switch to a body section. 
Name: proc_footer; Comment: Switch to a footer section. 
Name: proc_text; Comment: Process a regular text line in 'line_buf'. 
Name: check_section; Comment: Return the type of line in 'line_buf'. 
Name: process_file; Comment: Read and process the file pointed to by FP. 
Name: nl_file; Comment: Process file FILE to standard output. Return true if successful. 
Name: powerld; Comment: Similar to 'powl(3)' but without requiring 'libm'. 
Name: simple_strtod_int; Comment: Read an *integer* INPUT_STR, but return the integer value in a 'long double' VALUE hence, no UINTMAX_MAX limitation. NEGATIVE is updated, and is stored separately from the VALUE so that signbit() isn't required to determine the sign of -0.. ENDPTR is required (unlike strtod) and is used to store a pointer to the character after the last character used in the conversion. Note locale'd grouping is not supported, nor is skipping of white-space supported. Returns: SSE_OK - valid number. SSE_OK_PRECISION_LOSS - if more than 18 digits were used. SSE_OVERFLOW - if more than 27 digits (999Y) were used. SSE_INVALID_NUMBER - if no digits were found. 
Name: simple_strtod_float; Comment: Read a floating-point INPUT_STR represented as "NNNN[.NNNNN]", and return the value in a 'long double' VALUE. ENDPTR is required (unlike strtod) and is used to store a pointer to the character after the last character used in the conversion. PRECISION is optional and used to indicate fractions are present. Note locale'd grouping is not supported, nor is skipping of white-space supported. Returns: SSE_OK - valid number. SSE_OK_PRECISION_LOSS - if more than 18 digits were used. SSE_OVERFLOW - if more than 27 digits (999Y) were used. SSE_INVALID_NUMBER - if no digits were found. 
Name: simple_strtod_human; Comment: Read a 'human' INPUT_STR represented as "NNNN[.NNNNN] + suffix", and return the value in a 'long double' VALUE, with the precision of the input returned in PRECISION. ENDPTR is required (unlike strtod) and is used to store a pointer to the character after the last character used in the conversion. ALLOWED_SCALING determines the scaling supported. TODO: support locale'd grouping accept scentific and hex floats (probably use strtold directly) Returns: SSE_OK - valid number. SSE_OK_PRECISION_LOSS - if more than LDBL_DIG digits were used. SSE_OVERFLOW - if more than 27 digits (999Y) were used. SSE_INVALID_NUMBER - if no digits were found. SSE_VALID_BUT_FORBIDDEN_SUFFIX SSE_INVALID_SUFFIX SSE_MISSING_I_SUFFIX 
Name: double_to_human; Comment: Convert VAL to a human format string in BUF. 
Name: unit_to_umax; Comment: Convert a string of decimal digits, N_STRING, with an optional suffix to an integral value. Suffixes are handled as with --from=auto. Upon successful conversion, return that value. If it cannot be converted, give a diagnostic and exit. 
Name: parse_format_string; Comment: Given 'fmt' (a printf(3) compatible format string), extracts the following: 1. padding (e.g. %20f) 2. alignment (e.g. %-20f) 3. grouping (e.g. %'f) Only a limited subset of printf(3) syntax is supported. TODO: support %e %g etc. rather than just %f NOTES: 1. This function sets the global variables: padding_width, padding_alignment, grouping, format_str_prefix, format_str_suffix 2. The function aborts on any errors. 
Name: prepare_padded_number; Comment: Print the given VAL, using the requested representation. The number is printed to STDOUT, with padding and alignment. 
Name: process_suffixed_number; Comment: Converts the TEXT number string to the requested representation, and handles automatic suffix addition. 
Name: next_field; Comment: Return a pointer to the beginning of the next field in line. The line pointer is moved to the end of the next field. 
Name: process_field; Comment: Convert and output the given field. If it is not included in the set of fields to process just output the original 
Name: process_line; Comment: Convert number in a given line of text. NEWLINE specifies whether to output a '_n' for this "line". 
Name: simple_strtoul; Comment: Convert a null-terminated (possibly zero-length) string S to an unsigned long integer value. If S points to a non-digit set *P to S, *VAL to 0, and return true. Otherwise, accumulate the integer value of the string of digits. If the string of digits represents a value larger than ULONG_MAX, don't modify *VAL or *P and return false. Otherwise, advance *P to the first non-digit after S, set *VAL to the result of the conversion and return true. 
Name: decode_one_format; Comment: None } pad_width is determined later, but is at least as large as the number of fields printed per row. S_ORIG is solely for reporting errors. It should be the full format string argument. 
Name: open_next_file; Comment: Given a list of one or more input filenames FILE_LIST, set the global file pointer IN_STREAM and the global string INPUT_FILENAME to the first one that can be successfully opened. Modify FILE_LIST to reference the next filename in the list. A file name of "-" is interpreted as standard input. If any file open fails, give an error message and return false. 
Name: check_and_close; Comment: Test whether there have been errors on in_stream, and close it if it is not standard input. Return false if there has been an error on in_stream or stdout; return true otherwise. This function will report more than one error only if both a read and a write error have occurred. IN_ERRNO, if nonzero, is the error number corresponding to the most recent action for IN_STREAM. 
Name: decode_format_string; Comment: Decode the modern od format string S. Append the decoded representation to the global array SPEC, reallocating SPEC if necessary. Return true if S is valid. 
Name: skip; Comment: Given a list of one or more input filenames FILE_LIST, set the global file pointer IN_STREAM to position N_SKIP in the concatenation of those files. If any file operation fails or if there are fewer than N_SKIP bytes in the combined input, give an error message and return false. When possible, use seek rather than read operations to advance IN_STREAM. 
Name: write_block; Comment: Write N_BYTES bytes from CURR_BLOCK to standard output once for each of the N_SPEC format specs. CURRENT_OFFSET is the byte address of CURR_BLOCK in the concatenation of input files, and it is printed (optionally) only before the output line associated with the first format spec. When duplicate blocks are being abbreviated, the output for a sequence of identical input blocks is the output for the first block followed by an asterisk alone on a line. It is valid to compare the blocks PREV_BLOCK and CURR_BLOCK only when N_BYTES == BYTES_PER_BLOCK. That condition may be false only for the last input block. 
Name: read_char; Comment: Read a single byte into *C from the concatenation of the input files named in the global array FILE_LIST. On the first call to this function, the global variable IN_STREAM is expected to be an open stream associated with the input file INPUT_FILENAME. If IN_STREAM is at end-of-file, close it and update the global variables IN_STREAM and INPUT_FILENAME so they correspond to the next file in the list. Then try to read a byte from the newly opened file. Repeat if necessary until EOF is reached for the last file in FILE_LIST, then set *C to EOF and return. Subsequent calls do likewise. Return true if successful. 
Name: read_block; Comment: Read N bytes into BLOCK from the concatenation of the input files named in the global array FILE_LIST. On the first call to this function, the global variable IN_STREAM is expected to be an open stream associated with the input file INPUT_FILENAME. If all N bytes cannot be read from IN_STREAM, close IN_STREAM and update the global variables IN_STREAM and INPUT_FILENAME. Then try to read the remaining bytes from the newly opened file. Repeat if necessary until EOF is reached for the last file in FILE_LIST. On subsequent calls, don't modify BLOCK and return true. Set *N_BYTES_IN_BUFFER to the number of bytes read. If an error occurs, it will be detected through ferror when the stream is about to be closed. If there is an error, give a message but continue reading as usual and return false. Otherwise return true. 
Name: get_lcm; Comment: Return the least common multiple of the sizes associated with the format specs. 
Name: parse_old_offset; Comment: If S is a valid traditional offset specification with an optional leading '+' return true and set *OFFSET to the offset it denotes. 
Name: dump; Comment: Read a chunk of size BYTES_PER_BLOCK from the input files, write the formatted block to standard output, and repeat until the specified maximum number of bytes has been read or until all input has been processed. If the last block read is smaller than BYTES_PER_BLOCK and its size is not a multiple of the size associated with a format spec, extend the input block with zero bytes until its length is a multiple of all format spec sizes. Write the final block. Finally, write on a line by itself the offset of the byte after the last byte read. Accumulate return values from calls to read_block and check_and_close, and if any was false, return false. Otherwise, return true. 
Name: dump_strings; Comment: STRINGS mode. Find each "string constant" in the input. A string constant is a run of at least 'string_min' ASCII graphic (or formatting) characters terminated by a null. Based on a function written by Richard Stallman for a traditional version of od. Return true if successful. 
Name: collapse_escapes; Comment: Set globals delims and delim_end. Copy STRPTR to DELIMS, converting backslash representations of special characters in STRPTR to their actual values. The set of possible backslash characters has been expanded beyond that recognized by the Unix version. Return 0 upon success. If the string ends in an odd number of backslashes, ignore the final backslash and return nonzero. 
Name: paste_parallel; Comment: Perform column paste on the NFILES files named in FNAMPTR. Return true if successful, false if one or more files could not be opened or read. 
Name: paste_serial; Comment: Perform serial paste on the NFILES files named in FNAMPTR. Return true if no errors, false if one or more files could not be opened or read. 
Name: no_leading_hyphen; Comment: If FILE contains a component with a leading "-", report an error and return false; otherwise, return true. 
Name: portable_chars_only; Comment: If FILE (of length FILELEN) contains only portable characters, return true, else report an error and return false. 
Name: component_start; Comment: Return the address of the start of the next file name component in F. 
Name: component_len; Comment: Return the size of the file name component F. F must be nonempty. 
Name: validate_file_name; Comment: Make sure that strlen (FILE) <= PATH_MAX && strlen (each-existing-directory-in-FILE) <= NAME_MAX If CHECK_BASIC_PORTABILITY is true, compare against _POSIX_PATH_MAX and _POSIX_NAME_MAX instead, and make sure that FILE contains no characters not in the POSIX portable filename character set, which consists of A-Z, a-z, 0-9, ., _, - (plus / for separators). If CHECK_BASIC_PORTABILITY is false, make sure that all leading directories along FILE that exist are searchable. If CHECK_EXTRA_PORTABILITY is true, check that file name components do not begin with "-". If either CHECK_BASIC_PORTABILITY or CHECK_EXTRA_PORTABILITY is true, check that the file name is not empty. Return true if all of these tests are successful, false if any fail. 
Name: count_ampersands; Comment: Count and return the number of ampersands in STR. 
Name: create_fullname; Comment: Create a string (via xmalloc) which contains a full name by substituting for each ampersand in GECOS_NAME the USER_NAME string with its first character capitalized. The caller must ensure that GECOS_NAME contains no ','s. The caller also is responsible for free'ing the return value of this function. 
Name: idle_string; Comment: Return a string representing the time between WHEN and the time that this function is first run. 
Name: time_string; Comment: Return a time string. 
Name: print_entry; Comment: Display a line of information about UTMP_ENT. 
Name: print_long_entry; Comment: Display a verbose line of information about UTMP_ENT. 
Name: print_heading; Comment: Print the username of each valid entry and the number of valid entries in UTMP_BUF, which should have N elements. 
Name: scan_entries; Comment: Display UTMP_BUF, which should have N entries. 
Name: short_pinky; Comment: Display a list of who is on the system, according to utmp file FILENAME. 
Name: cols_ready_to_print; Comment: Return the number of columns that have either an open file or stored lines. 
Name: first_last_page; Comment: Estimate first_ / last_page_number using option +FIRST_PAGE:LAST_PAGE 
Name: parse_column_count; Comment: Parse column count string S, and if it's valid (1 or larger and within range of the type of 'columns') set the global variables columns and explicit_columns. Otherwise, exit with a diagnostic. 
Name: separator_string; Comment: Estimate length of col_sep_string with option -S. 
Name: getoptnum; Comment: Parse numeric arguments, ensuring MIN <= number <= INT_MAX. 
Name: getoptarg; Comment: Parse options of the form -scNNN. Example: -nck, where 'n' is the option, c is the optional number separator, and k is the optional width of the field used when printing a number. 
Name: init_parameters; Comment: Set parameters related to formatting. 
Name: init_fps; Comment: Open the necessary files, maintaining a COLUMN structure for each column. With multiple files, each column p has a different p->fp. With single files, each column p has the same p->fp. Return false if (number_of_files > 0) and no files can be opened, true otherwise. With each column/file p, p->full_page_printed is initialized, see also open_file. 
Name: init_funcs; Comment: Determine print_func and char_func, the functions used by each column for printing and/or storing. Determine the horizontal position desired when we begin printing a column (p->start_position). 
Name: open_file; Comment: Open a file. Return true if successful. With each file p, p->full_page_printed is initialized, see also init_fps. 
Name: close_file; Comment: Close the file in P. If we aren't dealing with multiple files in parallel, we change the status of all columns in the column list to reflect the close. 
Name: hold_file; Comment: Put a file on hold until we start a new page, since we've hit a form feed. If we aren't dealing with parallel files, we must change the status of all columns in the column list. 
Name: reset_status; Comment: Undo hold_file -- go through the column list and change any ON_HOLD columns to OPEN. Used at the end of each page. 
Name: print_files; Comment: Print a single file, or multiple files in parallel. Set up the list of columns, opening the necessary files. Allocate space for storing columns, if necessary. Skip to first_page_number, if user has asked to skip leading pages. Determine which functions are appropriate to store/print lines in each column. Print the file(s). 
Name: init_header; Comment: Initialize header information. If DESC is non-negative, it is a file descriptor open to FILENAME for reading. 
Name: init_page; Comment: Set things up for printing a page Scan through the columns ... Determine which are ready to print (i.e., which have lines stored or open files) Set p->lines_to_print appropriately (to p->lines_stored if we're storing, or lines_per_body if we're reading straight from the file) Keep track of this total so we know when to stop printing 
Name: align_column; Comment: Align empty columns and print separators. Empty columns will be formed by files with status ON_HOLD or CLOSED when printing multiple files in parallel. 
Name: print_page; Comment: Print one page. As long as there are lines left on the page and columns ready to print, Scan across the column list if the column has stored lines or the file is open pad to the appropriate spot print the column pad the remainder of the page with _n or _f as requested reset the status of all files -- any files which where on hold because of formfeeds are now put back into the lineup. 
Name: init_store_cols; Comment: Allocate space for storing columns. This is necessary when printing multiple columns from a single file. Lines are stored consecutively in buff, separated by '_0'. The following doesn't apply any longer - any tuning possible? (We can't use a fixed offset since with the '-s' flag lines aren't truncated.) We maintain a list (line_vector) of pointers to the beginnings of lines in buff. We allocate one more than the number of lines because the last entry tells us the index of the last character, which we need to know in order to print the last line in buff. 
Name: store_columns; Comment: Store all but the rightmost column. (Used when printing a single file in multiple downward columns) For each column set p->current_line to be the index in line_vector of the first line in the column For each line in the column store the line in buff add to line_vector the index of the line's first char buff_start is the index in buff of the first character in the current line. 
Name: store_char; Comment: Store a character in the buffer. 
Name: pad_across_to; Comment: Print (or store) padding until the current horizontal position is position. 
Name: pad_down; Comment: Pad to the bottom of the page. If the user has requested a formfeed, use one. Otherwise, use newlines. 
Name: read_rest_of_line; Comment: Read the rest of the line. Read from the current column's file until an end of line is hit. Used when we've truncated a line and we no longer need to print or store its characters. 
Name: skip_read; Comment: Read a line with skip_to_page. Read from the current column's file until an end of line is hit. Used when we read full lines to skip pages. With skip_to_page we have to check for FF-coincidence which is done in function read_line otherwise. Count lines of skipped pages to find the line number of 1st page printed relative to 1st line of input file (start_line_num). 
Name: print_white_space; Comment: If we're tabifying output, When print_char encounters white space it keeps track of our desired horizontal position and delays printing until this function is called. 
Name: print_sep_string; Comment: Print column separators. We keep a count until we know that we'll be printing a line, then print_sep_string() is called. 
Name: print_clump; Comment: Print (or store, depending on p->char_func) a clump of N characters. 
Name: print_char; Comment: Print a character. Update the following comment: process-char hasn't been used any longer. If we're tabifying, all tabs have been converted to spaces by process_char(). Keep a count of consecutive spaces, and when a nonspace is encountered, call print_white_space() to print the required number of tabs and spaces. 
Name: skip_to_page; Comment: Skip to page PAGE before printing. PAGE may be larger than total number of pages. 
Name: print_header; Comment: Print a header. Formfeeds are assumed to use up two lines at the beginning of the page. 
Name: read_line; Comment: Print (or store, if p->char_func is store_char()) a line. Read a character to determine whether we have a line or not. (We may hit EOF, _n, or _f) Once we know we have a line, set pad_vertically = true, meaning it's safe to pad down at the end of the page, since we do have a page. print a header if needed. pad across to padding_not_printed if needed. print any separators which need to be printed. print a line number if it needs to be printed. Print the clump which corresponds to the first character. Enter a loop and keep printing until an end of line condition exists, or until we exceed chars_per_column. Return false if we exceed chars_per_column before reading an end of line character, true otherwise. 
Name: print_stored; Comment: Print a line from buff. If this function has been called, we know we have "something to print". But it remains to be seen whether we have a real text page or an empty page (a single form feed) with/without a header only. Therefore first we set pad_vertically to true and print a header if necessary. If FF_FOUND and we are using -t|-T option we omit any newline by setting pad_vertically to false (see print_page). Otherwise we pad across if necessary, print separators if necessary and text of COLUMN *p. Return true, meaning there is no need to call read_rest_of_line. 
Name: char_to_clump; Comment: Convert a character to the proper format and return the number of characters in the resulting clump. Increment input_position by the width of the clump. Tabs are converted to clumps of spaces. Nonprintable characters may be converted to clumps of escape sequences or control prefixes. Note: the width of a clump is not necessarily equal to the number of characters in clump_buff. (e.g, the width of '_b' is -1, while the number of characters is 1.) 
Name: cleanup; Comment: We've just printed some files and need to clean up things before looking for more options and printing the next batch of files. Free everything we've xmalloc'ed, except 'header'. 
Name: usage; Comment: Complain, print a usage message, and die. 
Name: print_esc_char; Comment: Output a single-character _ escape. 
Name: print_esc; Comment: Print a _ escape sequence starting at ESCSTART. Return the number of characters in the escape sequence besides the backslash. If OCTAL_0 is nonzero, octal escapes are of the form _0ooo, where o is an octal digit; otherwise they are of the form _ooo. 
Name: print_esc_string; Comment: Print string STR, evaluating _ escapes. 
Name: print_direc; Comment: Evaluate a printf conversion specification. START is the start of the directive, LENGTH is its length, and CONVERSION specifies the type of conversion. LENGTH does not include any length modifier or the conversion specifier itself. FIELD_WIDTH and PRECISION are the field width and precision for '*' values, if HAVE_FIELD_WIDTH and HAVE_PRECISION are true, respectively. ARGUMENT is the argument to be formatted. 
Name: print_formatted; Comment: Print the text in FORMAT, using ARGV (with ARGC elements) for arguments to any '%' directives. Return the number of elements of ARGV used. 
Name: prog_fprintf; Comment: Display program name followed by variable list. Used for e.g. verbose output 
Name: matcher_error; Comment: Diagnose an error in the regular expression matcher. Then exit. 
Name: copy_unescaped_string; Comment: Loosely adapted from GNU sh-utils printf.c code. 
Name: compile_regex; Comment: --------------------------------------------------------------------------.| Compile the regex represented by REGEX, diagnose and abort if any error. | `--------------------------------------------------------------------------
Name: initialize_regex; Comment: ------------------------------------------------------------------------.| This will initialize various tables for pattern match and compiles some | | regexps.________ | `------------------------------------------------------------------------
Name: if; Comment: In auto reference mode, the maximum width of this field is precomputed and subtracted from the overall line width. Add one for the column which separate the file name from the line number. 
Name: switch; Comment: Complete the special character flagging according to selected output format. 
Name: if; Comment: When the left context is wide, it might take some time to catch up from the left context boundary to the beginning of the 'head' or 'before' fields. So, in this case, to speed the catchup, we jump back from the keyword, using some secure distance, possibly falling in the middle of a word. A secure backward jump would be at least half the maximum width of a line, plus the size of the longest word met in the whole input. We conclude this backward jump by a skip forward of at least one word. In this manner, we should not inadvertently accept only part of a word. From the reached point, when it will be time to fix the beginning of 'head' or 'before' fields, we will skip forward words or delimiters until we get sufficiently near. 
Name: if; Comment: Conditionally output the 'reference' field. 
Name: if; Comment: -------------------------------------------------------------------.| Output the current output fields as one line for a dumb terminal. | `-------------------------------------------------------------------
Name: if; Comment: Process remaining arguments. If GNU extensions are enabled, process all arguments as input parameters. If disabled, accept at most two arguments, the second of which is an output parameter. 
Name: if; Comment: Read 'Ignore words' file and 'Only words' files, if any. If any of these files is empty, reset the name of the file to NULL, to avoid unnecessary calls to search_table. 
Name: file_name_prepend; Comment: Prepend the name S of length S_LEN, to the growing file_name, P. 
Name: nth_parent; Comment: Return a string (malloc'd) consisting of N '/'-separated ".." components. 
Name: find_dir_entry; Comment: Determine the basename of the current directory, where DOT_SB is the result of lstat'ing "." and prepend that to the file name in *FILE_NAME. Find the directory entry in '..' that matches the dev/i-node of DOT_SB. Upon success, update *DOT_SB with stat information of '..', chdir to '..', and prepend "/basename" to FILE_NAME. Otherwise, exit with a diagnostic. PARENT_HEIGHT is the number of levels '..' is above the starting directory. The first time this function is called (from the initial directory), PARENT_HEIGHT is 1. This is solely for diagnostics. Exit nonzero upon error. 
Name: robust_getcwd; Comment: Construct the full, absolute name of the current working directory and store it in *FILE_NAME. The getcwd function performs nearly the same task, but is typically unable to handle names longer than PATH_MAX. This function has no such limitation. However, this function *can* fail due to permission problems or a lack of memory, while GNU/Linux's getcwd function works regardless of restricted permissions on parent directories. Upon failure, give a diagnostic and exit nonzero. Note: although this function is similar to getcwd, it has a fundamental difference in that it gives a diagnostic and exits upon failure. I would have liked a function that did not exit, and that could be used as a getcwd replacement. Unfortunately, considering all of the information the caller would require in order to produce good diagnostics, it doesn't seem worth the added complexity. In any case, any getcwd replacement must *not* exceed the PATH_MAX limitation. Otherwise, functions like 'chdir' would fail with ENAMETOOLONG. FIXME-maybe: if find_dir_entry fails due to permissions, try getcwd, in case the unreadable directory is close enough to the root that getcwd works from there. 
Name: logical_getcwd; Comment: Return PWD from the environment if it is acceptable for 'pwd -L' output, otherwise NULL. 
Name: realpath_canon; Comment: A wrapper around canonicalize_filename_mode(), to call it twice when in LOGICAL mode. 
Name: path_prefix; Comment: Test whether canonical prefix is parent or match of path. 
Name: path_common_prefix; Comment: Return the length of the longest common prefix of canonical PATH1 and PATH2, ensuring only full path components are matched. Return 0 on no match. 
Name: buffer_or_output; Comment: Either output STR to stdout or if *PBUF is not NULL then append STR to *PBUF and update *PBUF to point to the end of the buffer and adjust *PLEN to reflect the remaining space. Return TRUE on failure. 
Name: relpath; Comment: Output the relative representation if possible. If BUF is non-NULL, write to that buffer rather than to stdout. 
Name: cache_fstatat; Comment: Like fstatat, but cache the result. If ST->st_size is -1, the status has not been gotten yet. If less than -1, fstatat failed with errno == ST->st_ino. Otherwise, the status has already been gotten, so return 0. 
Name: write_protected_non_symlink; Comment: Return 1 if FILE is an unwritable non-symlink, 0 if it is writable or some other type of file, -1 and set errno if there is some problem in determining the answer. Set *BUF to the file status. 
Name: prompt; Comment: Prompt whether to remove FILENAME (ent->, if required via a combination of the options specified by X and/or file attributes. If the file may be removed, return RM_OK. If the user declines to remove the file, return RM_USER_DECLINED. If not ignoring missing files and we cannot lstat FILENAME, then return RM_ERROR. IS_DIR is true if ENT designates a directory, false otherwise. Depending on MODE, ask whether to 'descend into' or to 'remove' the directory FILENAME. MODE is ignored when FILENAME is not a directory. Set *IS_EMPTY_P to T_YES if FILENAME is an empty directory, and it is appropriate to try to remove it with rmdir (e.g. recursive mode). Don't even try to set *IS_EMPTY_P when MODE == PA_REMOVE_DIR. 
Name: fts_skip_tree; Comment: Tell fts not to traverse into the hierarchy at ENT. 
Name: mark_ancestor_dirs; Comment: Upon unlink failure, or when the user declines to remove ENT, mark each of its ancestor directories, so that we know not to prompt for its removal. 
Name: excise; Comment: Remove the file system object specified by ENT. IS_DIR specifies whether it is expected to be a directory or non-directory. Return RM_OK upon success, else RM_ERROR. 
Name: rm_fts; Comment: This function is called once for every file system object that fts encounters. fts performs a depth-first traversal. A directory is usually processed twice, first with fts_info == FTS_D, and later, after all of its entries have been processed, with FTS_DP. Return RM_ERROR upon error, RM_USER_DECLINED for a negative response to an interactive prompt, and otherwise, RM_OK. 
Name: rm; Comment: Remove FILEs, honoring options specified via X. Return RM_OK if successful. 
Name: diagnose_leading_hyphen; Comment: Advise the user about invalid usages like "rm -foo" if the file "-foo" exists, assuming ARGC and ARGV are as with 'main'. 
Name: errno_rmdir_non_empty; Comment: Return true if ERROR_NUMBER is one of the values associated with a failed rmdir due to non-empty target directory. 
Name: errno_may_be_empty; Comment: Return true if when rmdir fails with errno == ERROR_NUMBER the directory may be empty. 
Name: ignorable_failure; Comment: Return true if an rmdir failure with errno == error_number for DIR is ignorable. 
Name: remove_parents; Comment: Remove any empty parent directories of DIR. If DIR contains slash characters, at least one of them (beginning with the rightmost) is replaced with a NUL byte. Return true if successful. 
Name: mode_to_security_class; Comment: This function has been added to libselinux-2.1.12-5, but is here for support with older versions of SELinux Translates a mode into an Internal SELinux security_class definition. Returns 0 on failure, with errno set to EINVAL. 
Name: computecon; Comment: This function takes a PATH and a MODE and then asks SELinux what the label of the path object would be if the current process label created it. It then returns the label. Returns -1 on failure. errno will be set appropriately. 
Name: defaultcon; Comment: This function takes a path and a mode, it calls computecon to get the label of the path object if the current process created it, then it calls matchpathcon to get the default type for the object. It substitutes the default type into label. It tells the SELinux Kernel to label all new file system objects created by the current process with this label. Returns -1 on failure. errno will be set appropriately. 
Name: restorecon_private; Comment: This function takes a PATH of an existing file system object, and a LOCAL boolean that indicates whether the function should set the object's label to the default for the local process, or one using system wide settings. If LOCAL == true, it will ask the SELinux Kernel what the default label for all objects created should be and then sets the label on the object. Otherwise it calls matchpathcon on the object to ask the system what the default label should be, extracts the type field and then modifies the file system object. Note only the type field is updated, thus preserving MLS levels and user identity etc. of the PATH. Returns -1 on failure. errno will be set appropriately. 
Name: restorecon; Comment: This function takes three parameters: PATH of an existing file system object. A RECURSE boolean which if the file system object is a directory, will call restorecon_private on every file system object in the directory. A LOCAL boolean that indicates whether the function should set object labels to the default for the local process, or use system wide settings. Returns false on failure. errno will be set appropriately. 
Name: scan_arg; Comment: Read a long double value from the command line. Return if the string is correct else signal error. 
Name: long_double_format; Comment: If FORMAT is a valid printf format for a double argument, return its long double equivalent, allocated from dynamic storage, and store into LAYOUT a description of the output layout; otherwise, report an error and exit. 
Name: print_numbers; Comment: Actually print the sequence of numbers in the specified range, with the given or default stepping and format. 
Name: get_default_format; Comment: Return the default format given FIRST, STEP, and LAST. 
Name: incr; Comment: The NUL-terminated string S0 of length S_LEN represents a valid non-negative decimal integer. Adjust the string and length so that the pair describe the next-larger value. 
Name: cmp; Comment: Compare A and B (each a NUL-terminated digit string), with lengths given by A_LEN and B_LEN. Return +1 if A < B, -1 if B < A, else 0. 
Name: trim_leading_zeros; Comment: Trim leading 0's from S, but if S is all 0's, leave one. Return a pointer to the trimmed string. 
Name: seq_fast; Comment: Print all whole numbers from A to B, inclusive -- to stdout, each followed by a newline. If B < A, return false and print nothing. Otherwise, return true. 
Name: all_digits_p; Comment: Return true if S consists of at least one digit and no non-digits. 
Name: add_range_pair; Comment: Append LOW, HIGH to the list RP of range pairs, allocating additional space if necessary. Update global variable N_FRP. When allocating, update global variable N_FRP_ALLOCATED. 
Name: compare_ranges; Comment: Comparison function for qsort to order the list of struct range_pairs. 
Name: complement_rp; Comment: Reallocate Range Pair entries, with corresponding entries outside the range of each specified entry. 
Name: periodic_pattern; Comment: Determine if pattern type is periodic or not. 
Name: fillpattern; Comment: Fill a buffer with a fixed pattern. The buffer must be at least 3 bytes long, even if size is less. Larger sizes are filled exactly. 
Name: ignorable_sync_errno; Comment: Return true when it's ok to ignore an fsync or fdatasync failure that set errno to ERRNO_VAL. 
Name: dosync; Comment: Request that all data for FD be transferred to the corresponding storage device. QNAME is the file name (quoted for colons). Report any errors found. Return 0 on success, -1 (setting errno) on failure. It is not an error if fdatasync and/or fsync is not supported for this file, or if the file is not a writable file descriptor. 
Name: direct_mode; Comment: Turn on or off direct I/O mode for file descriptor FD, if possible. Try to turn it on if ENABLE is true. Otherwise, try to turn it off. 
Name: dorewind; Comment: Rewind FD; its status is ST. 
Name: known; Comment: By convention, negative sizes represent unknown values. 
Name: dopass; Comment: Do pass number K of N, writing *SIZEP bytes of the given pattern TYPE to the file descriptor FD. K and N are passed in only for verbose progress message purposes. If N == 0, no progress messages are printed. If *SIZEP == -1, the size is unknown, and it will be filled in as soon as writing fails with ENOSPC. Return 1 on write error, -1 on other error, 0 on success. 
Name: genpattern; Comment: Generate a random wiping pass pattern with num passes. This is a two-stage process. First, the passes to include are chosen, and then they are shuffled into the desired order. 
Name: do_wipefd; Comment: The core routine to actually do the work. This overwrites the first size bytes of the given fd. Return true if successful. 
Name: wipefd; Comment: A wrapper with a little more checking for fds on the command line 
Name: incname; Comment: Increment NAME (with LEN bytes). NAME must be a big-endian base N number with the digits taken from nameset. Return true if successful. Otherwise, (because NAME already has the greatest possible value) return false. 
Name: wipename; Comment: Repeatedly rename a file with shorter and shorter names, to obliterate all traces of the file name (and length) on any system that adds a trailing delimiter to on-disk file names and reuses the same directory slot. Finally, unlink it. The passed-in filename is modified in place to the new filename. (Which is unlinked if this function succeeds, but is still present if it fails for some reason.) The main loop is written carefully to not get stuck if all possible names of a given length are occupied. It counts down the length from the original to 0. While the length is non-zero, it tries to find an unused file name of the given length. It continues until either the name is available and the rename succeeds, or it runs out of names to try (incname wraps and returns 1). Finally, it unlinks the file. The unlink is Unix-specific, as ANSI-standard remove has more portability problems with C libraries making it "safe". rename is ANSI-standard. To force the directory data out, we try to open the directory and invoke fdatasync and/or fsync on it. This is non-standard, so don't insist that it works: just fall back to a global sync in that case. This is fairly significantly Unix-specific. Of course, on any file system with synchronous metadata updates, this is unnecessary. 
Name: wipefile; Comment: Finally, the function that actually takes a filename and grinds it into hamburger. FIXME Detail to note: since we do not restore errno to EACCES after a failed chmod, we end up printing the error code from the chmod. This is actually the error that stopped us from proceeding, so it's arguably the right one, and in practice it'll be either EACCES again or EPERM, which both give similar error messages. Does anyone disagree? 
Name: clear_random_data; Comment: Just on general principles, wipe buffers containing information that may be related to the possibly-pseudorandom values used during shredding. 
Name: next_line; Comment: Return the start of the next line after LINE. The current line ends in EOLBYTE, and is guaranteed to end before LINE + N. 
Name: input_size; Comment: Return the size of the input if possible or OFF_T_MAX if not. 
Name: read_input_reservoir_sampling; Comment: Read all lines and store up to K permuted lines in *OUT_RSRV. Return the number of lines read, up to a maximum of K. 
Name: read_input; Comment: Read data from file IN. Input lines are delimited by EOLBYTE; silently append a trailing EOLBYTE if the file ends in some other byte. Store a pointer to the resulting array of lines into *PLINE. Return the number of lines read. Report an error and exit on failure. 
Name: write_permuted_lines; Comment: Output N_LINES lines to stdout from LINE array, chosen by the indices in PERMUTATION. PERMUTATION and LINE must have at least N_LINES elements. Strings in LINE must include the line-terminator character. 
Name: write_permuted_numbers; Comment: Output N_LINES of numbers to stdout, from PERMUTATION array. PERMUTATION must have at least N_LINES elements. 
Name: write_random_numbers; Comment: Output COUNT numbers to stdout, chosen randomly from range LO_INPUT through HI_INPUT. 
Name: write_random_lines; Comment: Output COUNT lines to stdout from LINES array. LINES must have at least N_LINES elements in it. Strings in LINES_ must include the line-terminator character. 
Name: apply_suffix; Comment: Given a floating point value *X, and a suffix character, SUFFIX_CHAR, scale *X by the multiplier implied by SUFFIX_CHAR. SUFFIX_CHAR may be the NUL byte or 's' to denote seconds, 'm' for minutes, 'h' for hours, or 'd' for days. If SUFFIX_CHAR is invalid, don't modify *X and return false. Otherwise return true. 
Name: cs_enter; Comment: Enter a critical section. 
Name: cs_leave; Comment: Leave a critical section. 
Name: reap; Comment: If PID is positive, wait for the child process with that PID to exit, and assume that PID has already been removed from the process table. If PID is 0 or -1, clean up some child that has exited (by waiting for it, and removing it from the proc table) and return the child's process ID. However, if PID is 0 and no children have exited, return 0 without waiting. 
Name: register_proc; Comment: TEMP represents a new process; add it to the process table. Create the process table the first time it's called. 
Name: delete_proc; Comment: If PID is in the process table, remove it and return true. Otherwise, return false. 
Name: wait_proc; Comment: Remove PID from the process table, and wait for it to exit if it hasn't already. 
Name: reap_exited; Comment: Reap any exited children. Do not block; reap only those that have already exited. 
Name: reap_some; Comment: Reap at least one exited child, waiting if necessary. 
Name: reap_all; Comment: Reap all children, waiting if necessary. 
Name: cleanup; Comment: Clean up any remaining temporary files. 
Name: exit_cleanup; Comment: Cleanup actions to take when exiting. 
Name: create_temp_file; Comment: Create a new temporary file, returning its newly allocated tempnode. Store into *PFD the file descriptor open for writing. If the creation fails, return NULL and store -1 into *PFD if the failure is due to file descriptor exhaustion and SURVIVE_FD_EXHAUSTION; otherwise, die. 
Name: stream_open; Comment: Return a stream for FILE, opened with mode HOW. A null FILE means standard output; HOW should be "w". When opening for input, "-" means standard input. To avoid confusion, do not return file descriptors STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO when opening an ordinary FILE. Return NULL if unsuccessful. fadvise() is used to specify an access pattern for input files. There are a few hints we could possibly provide, and after careful testing it was decided that specifying POSIX_FADV_SEQUENTIAL was not detrimental to any cases. On Linux 2.6.31, this option doubles the size of read ahead performed and thus was seen to benefit these cases: Merging Sorting with a smaller internal buffer Reading from faster flash devices In _addition_ one could also specify other hints... POSIX_FADV_WILLNEED was tested, but Linux 2.6.31 at least uses that to _synchronously_ prepopulate the cache with the specified range. While sort does need to read all of its input before outputting, a synchronous read of the whole file up front precludes any processing that sort could do in parallel with the system doing read ahead of the data. This was seen to have negative effects in a couple of cases: Merging Sorting with a smaller internal buffer Note this option was seen to shorten the runtime for sort on a multicore system with lots of RAM and other processes competing for CPU. It could be argued that more explicit scheduling hints with 'nice' et. al. are more appropriate for this situation. POSIX_FADV_NOREUSE is a possibility as it could lower the priority of input data in the cache as sort will only need to process it once. However its functionality has changed over Linux kernel versions and as of 2.6.31 it does nothing and thus we can't depend on what it might do in future. POSIX_FADV_DONTNEED is not appropriate for user specified input files, but for temp files we do want to drop the cache immediately after processing. This is done implicitly however when the files are unlinked. 
Name: xfopen; Comment: Same as stream_open, except always return a non-null value; die on failure. 
Name: xfclose; Comment: Close FP, whose name is FILE, and report any errors. 
Name: pipe_fork; Comment: Fork a child process for piping to and do common cleanup. The TRIES parameter tells us how many times to try to fork before giving up. Return the PID of the child, or -1 (setting errno) on failure. 
Name: maybe_create_temp; Comment: Create a temporary file and, if asked for, start a compressor to that file. Set *PFP to the file handle and return the address of the new temp node. If the creation fails, return NULL if the failure is due to file descriptor exhaustion and SURVIVE_FD_EXHAUSTION; otherwise, die. 
Name: create_temp; Comment: Create a temporary file and, if asked for, start a compressor to that file. Set *PFP to the file handle and return the address of the new temp node. Die on failure. 
Name: open_temp; Comment: Open a compressed temp file and start a decompression process through which to filter the input. Return NULL (setting errno to EMFILE) if we ran out of file descriptors, and die on any other kind of failure. 
Name: add_temp_dir; Comment: Append DIR to the array of temporary directory names. 
Name: zaptemp; Comment: Remove NAME from the list of temporary files. 
Name: inittables; Comment: Initialize the character class tables. 
Name: specify_nmerge; Comment: Specify how many inputs may be merged at once. This may be set on the command-line with the --batch-size option. 
Name: specify_sort_size; Comment: Specify the amount of main memory to use when sorting. 
Name: specify_nthreads; Comment: Specify the number of threads to spawn during internal sort. 
Name: default_sort_size; Comment: Return the default sort size. 
Name: sort_buffer_size; Comment: Return the sort buffer size to use with the input files identified by FPS and FILES, which are alternate names of the same files. NFILES gives the number of input files; NFPS may be less. Assume that each input line requires LINE_BYTES extra bytes' worth of line information. Do not exceed the size bound specified by the user (or a default size bound, if the user does not specify one). 
Name: initbuf; Comment: Initialize BUF. Reserve LINE_BYTES bytes for each line; LINE_BYTES must be at least sizeof (struct line). Allocate ALLOC bytes initially. 
Name: begfield; Comment: Return a pointer to the first character of the field specified by KEY in LINE. 
Name: limfield; Comment: Return the limit of (a pointer to the first character after) the field in LINE specified by KEY. 
Name: fillbuf; Comment: Fill BUF reading from FP, moving buf->left bytes from the end of buf->buf to the beginning first. If EOF is reached and the file wasn't terminated by a newline, supply one. Set up BUF's line table too. FILE is the name of the file corresponding to FP. Return true if some input was read. 
Name: traverse_raw_number; Comment: Traverse number given as *number consisting of digits, thousands_sep, and decimal_point chars only. Returns the highest digit found in the number, or '_0' if no digit has been found. Upon return *number points at the character that immediately follows after the given number. 
Name: find_unit_order; Comment: Return an integer that represents the order of magnitude of the unit following the number. The number may contain thousands separators and a decimal point, but it may not contain leading blanks. Negative numbers get negative orders; zero numbers have a zero order. 
Name: human_numcompare; Comment: Compare numbers A and B ending in units with SI or IEC prefixes <none/unknown> < K/k < M < G < T < P < E < Z < Y 
Name: numcompare; Comment: Compare strings A and B as numbers without explicitly converting them to machine numbers. Comparatively slow for short strings, but asymptotically hideously fast. 
Name: nan_compare; Comment: Work around a problem whereby the long double value returned by glibc's strtold ("NaN", ...) contains uninitialized bits: clear all bytes of A and B before calling strtold. FIXME: remove this function once gnulib guarantees that strtold's result is always well defined. 
Name: getmonth; Comment: Return an integer in 1..12 of the month name MONTH. Return 0 if the name in S is not recognized. 
Name: random_md5_state_init; Comment: Initialize the randomly chosen MD5 state. 
Name: xstrxfrm; Comment: This is like strxfrm, except it reports any error and exits. 
Name: compare_random; Comment: Compare the keys TEXTA (of length LENA) and TEXTB (of length LENB) using one or more random hash functions. TEXTA[LENA] and TEXTB[LENB] must be zero. 
Name: debug_width; Comment: Return the printable width of the block of memory starting at TEXT and ending just before LIM, counting each tab as one byte. FIXME: Should we generally be counting non printable chars? 
Name: mark_key; Comment: For debug mode, "underline" a key at the specified offset and screen width. 
Name: debug_key; Comment: For LINE, output a debugging line that underlines KEY in LINE. If KEY is null, underline the whole line. 
Name: debug_line; Comment: Debug LINE by underlining its keys. 
Name: default_key_compare; Comment: Return whether sorting options specified for key. 
Name: key_to_opts; Comment: Convert a key to the short options used to specify it. 
Name: key_warnings; Comment: Output data independent key warnings to stderr. 
Name: keycompare; Comment: Compare two lines A and B trying every key in sequence until there are no more keys or a difference is found. 
Name: compare; Comment: Compare two lines A and B, returning negative, zero, or positive depending on whether A compares less than, equal to, or greater than B. 
Name: write_line; Comment: Write LINE to output stream FP; the output file's name is OUTPUT_FILE if OUTPUT_FILE is non-null, and is the standard output otherwise. If debugging is enabled and FP is standard output, append some debugging information. 
Name: check; Comment: Check that the lines read from FILE_NAME come in order. Return true if they are in order. If CHECKONLY == 'c', also print a diagnostic (FILE_NAME, line number, contents of line) to stderr if they are not in order. 
Name: open_input_files; Comment: Open FILES (there are NFILES of them) and store the resulting array of stream pointers into (*PFPS). Allocate the array. Return the number of successfully opened files, setting errno if this value is less than NFILES. 
Name: mergefps; Comment: Merge lines from FILES onto OFP. NTEMPS is the number of temporary files (all of which are at the start of the FILES array), and NFILES is the number of files; 0 <= NTEMPS <= NFILES <= NMERGE. FPS is the vector of open stream corresponding to the files. Close input and output streams before returning. OUTPUT_FILE gives the name of the output file. If it is NULL, the output file is standard output. 
Name: mergefiles; Comment: Merge lines from FILES onto OFP. NTEMPS is the number of temporary files (all of which are at the start of the FILES array), and NFILES is the number of files; 0 <= NTEMPS <= NFILES <= NMERGE. Close input and output files before returning. OUTPUT_FILE gives the name of the output file. Return the number of files successfully merged. This number can be less than NFILES if we ran low on file descriptors, but in this case it is never less than 2. 
Name: mergelines; Comment: Merge into T (of size NLINES) the two sorted arrays of lines LO (with NLINES / 2 members), and T - (NLINES / 2) (with NLINES - NLINES / 2 members). T and LO point just past their respective arrays, and the arrays are in reverse order. NLINES must be at least 2. 
Name: sequential_sort; Comment: Sort the array LINES with NLINES members, using TEMP for temporary space. Do this all within one thread. NLINES must be at least 2. If TO_TEMP, put the sorted output into TEMP, and TEMP is as large as LINES. Otherwise the sort is in-place and TEMP is half-sized. The input and output arrays are in reverse order, and LINES and TEMP point just past the end of their respective arrays. Use a recursive divide-and-conquer algorithm, in the style suggested by Knuth volume 3 (2nd edition), exercise 5.2.4-23. Use the optimization suggested by exercise 5.2.4-10; this requires room for only 1.5*N lines, rather than the usual 2*N lines. Knuth writes that this memory optimization was originally published by D. A. Bell, Comp J. 1 (1958), 75. 
Name: merge_tree_init; Comment: Create and return a merge tree for NTHREADS threads, sorting NLINES lines, with destination DEST. 
Name: merge_tree_destroy; Comment: Destroy the merge tree. 
Name: init_node; Comment: Initialize a merge tree node and its descendants. The node's parent is PARENT. The node and its descendants are taken from the array of nodes NODE_POOL. Their destination starts at DEST; they will consume NTHREADS threads. The total number of sort lines is TOTAL_LINES. IS_LO_CHILD is true if the node is the low child of its parent. 
Name: compare_nodes; Comment: Compare two merge nodes A and B for priority. 
Name: queue_destroy; Comment: Destroy merge QUEUE. 
Name: queue_init; Comment: Initialize merge QUEUE, allocating space suitable for a maximum of NTHREADS threads. 
Name: queue_insert; Comment: Insert NODE into QUEUE. The caller either holds a lock on NODE, or does not need to lock NODE. 
Name: queue_pop; Comment: Pop the top node off the priority QUEUE, lock the node, return it. 
Name: write_unique; Comment: Output LINE to TFP, unless -u is specified and the line compares equal to the previous line. TEMP_OUTPUT is the name of TFP, or is null if TFP is standard output. This function does not save the line for comparison later, so it is appropriate only for internal sort. 
Name: mergelines_node; Comment: Merge the lines currently available to a NODE in the binary merge tree. Merge a number of lines appropriate for this merge level, assuming TOTAL_LINES is the total number of lines. If merging at the top level, send output to TFP. TEMP_OUTPUT is the name of TFP, or is null if TFP is standard output. 
Name: queue_check_insert; Comment: Into QUEUE, insert NODE if it is not already queued, and if one of NODE's children has available lines and the other either has available lines or has exhausted its lines. 
Name: queue_check_insert_parent; Comment: Into QUEUE, insert NODE's parent if the parent can now be worked on. 
Name: merge_loop; Comment: Repeatedly pop QUEUE for a node with lines to merge, and merge at least some of those lines, until the MERGE_END node is popped. TOTAL_LINES is the total number of lines. If merging at the top level, send output to TFP. TEMP_OUTPUT is the name of TFP, or is null if TFP is standard output. 
Name: sortlines_thread; Comment: Like sortlines, except with a signature acceptable to pthread_create. 
Name: sortlines; Comment: Sort lines, possibly in parallel. The arguments are as in struct thread_args above. The algorithm has three phases: node creation, sequential sort, and binary merge. During node creation, sortlines recursively visits each node in the binary merge tree and creates a NODE structure corresponding to all the future line merging NODE is responsible for. For each call to sortlines, half the available threads are assigned to each recursive call, until a leaf node having only 1 available thread is reached. Each leaf node then performs two sequential sorts, one on each half of the lines it is responsible for. It records in its NODE structure that there are two sorted sublists available to merge from, and inserts its NODE into the priority queue. The binary merge phase then begins. Each thread drops into a loop where the thread retrieves a NODE from the priority queue, merges lines available to that NODE, and potentially insert NODE or its parent back into the queue if there are sufficient available lines for them to merge. This continues until all lines at all nodes of the merge tree have been merged. 
Name: avoid_trashing_input; Comment: Scan through FILES[NTEMPS .. NFILES-1] looking for files that are the same as OUTFILE. If found, replace each with the same temporary copy that can be merged into OUTFILE without destroying OUTFILE before it is completely read. This temporary copy does not count as a merge temp, so don't worry about incrementing NTEMPS in the caller; final cleanup will remove it, not zaptemp. This test ensures that an otherwise-erroneous use like "sort -m -o FILE ... FILE ..." copies FILE before writing to it. It's not clear that POSIX requires this nicety. Detect common error cases, but don't try to catch obscure cases like "cat ... FILE ... | sort -m -o FILE" where traditional "sort" doesn't copy the input and where people should know that they're getting into trouble anyway. Catching these obscure cases would slow down performance in common cases. 
Name: check_inputs; Comment: Scan the input files to ensure all are accessible. Otherwise exit with a diagnostic. Note this will catch common issues with permissions etc. but will fail to notice issues where you can open() but not read(), like when a directory is specified on some systems. Catching these obscure cases could slow down performance in common cases. 
Name: check_output; Comment: Ensure a specified output file can be created or written to, and point stdout to it. Do not truncate the file. Exit with a diagnostic on failure. 
Name: merge; Comment: Merge the input FILES. NTEMPS is the number of files at the start of FILES that are temporary; it is zero at the top level. NFILES is the total number of files. Put the output in OUTPUT_FILE; a null OUTPUT_FILE stands for standard output. 
Name: sort; Comment: Sort NFILES FILES onto OUTPUT_FILE. Use at most NTHREADS threads. 
Name: insertkey; Comment: Insert a malloc'd copy of key KEY_ARG at the end of the key list. 
Name: check_ordering_compatibility; Comment: Check compatibility of ordering options. 
Name: parse_field_count; Comment: Parse the leading integer in STRING and store the resulting value (which must fit into size_t) into *VAL. Return the address of the suffix after the integer. If the value is too large, silently substitute SIZE_MAX. If MSGID is NULL, return NULL after failure; otherwise, report MSGID and exit on failure. 
Name: sighandler; Comment: Handle interrupts and hangups. 
Name: set_ordering; Comment: Set the ordering options for KEY specified in S. Return the address of the first character in S that is not a valid ordering option. BLANKTYPE is the kind of blanks that 'b' should skip. 
Name: key_init; Comment: Initialize KEY. 
Name: input_file_size; Comment: Return the number of bytes that can be read from FD with status ST. Store up to the first BUFSIZE bytes of the file's data into BUF, and advance the file position by the number of bytes read. On input error, set errno and return -1. 
Name: next_file_name; Comment: Compute the next sequential output file name and store it into the string 'outfile'. 
Name: create; Comment: Create or truncate a file. 
Name: closeout; Comment: None in this case FP is closed, but FD is still used in cleanup. 
Name: cwrite; Comment: Write BYTES bytes at BP to an output file. If NEW_FILE_FLAG is true, open the next output file. Otherwise add to the same output file already in use. Return true if successful. 
Name: bytes_split; Comment: Split into pieces of exactly N_BYTES bytes. Use buffer BUF, whose size is BUFSIZE. BUF contains the first INITIAL_READ input bytes. 
Name: lines_split; Comment: Split into pieces of exactly N_LINES lines. Use buffer BUF, whose size is BUFSIZE. 
Name: line_bytes_split; Comment: Split into pieces that are as large as possible while still not more than N_BYTES bytes, and are split on line boundaries except where lines longer than N_BYTES bytes occur. 
Name: lines_chunk_split; Comment: -n l/[K/]N: Write lines to files of approximately file size / N. The file is partitioned into file size / N sized portions, with the last assigned any excess. If a line _starts_ within a partition it is written completely to the corresponding file. Since lines are not split even if they overlap a partition, the files written can be larger or smaller than the partition size, and even empty if a line is so long as to completely overlap the partition. 
Name: bytes_chunk_extract; Comment: -n K/N: Extract Kth of N chunks. 
Name: ofile_open; Comment: Rotate file descriptors when we're writing to more output files than we have available file descriptors. Return whether we came under file resource pressure. If so, it's probably best to close each file when finished with it. 
Name: lines_rr; Comment: -n r/[K/]N: Divide file into N chunks in round robin fashion. When K == 0, we try to keep the files open in parallel. If we run out of file resources, then we revert to opening and closing each file for each line. 
Name: parse_chunk; Comment: Parse K/N syntax of chunk options. 
Name: statfs; Comment: BeOS has a statvfs function, but it does not return sensible values for f_files, f_ffree and f_favail, and lacks f_type, f_basetype and f_fstypename. Use 'struct fs_info' instead. 
Name: human_fstype; Comment: Return the type of the specified file system. Some systems have statfvs.f_basetype[FSTYPSZ] (AIX, HP-UX, and Solaris). Others have statvfs.f_fstypename[_VFS_NAMELEN] (NetBSD 3.0). Others have statfs.f_fstypename[MFSNAMELEN] (NetBSD 1.5.2). Still others have neither and have to get by with f_type (GNU/Linux). But f_type may only exist in statfs (Cygwin). 
Name: make_format; Comment: PFORMAT points to a '%' followed by a prefix of a format, all of size PREFIX_LEN. The flags allowed for this format are ALLOWED_FLAGS; remove other printf flags from the prefix, then append SUFFIX. 
Name: out_epoch_sec; Comment: Output the number of seconds since the Epoch, using a format that acts like printf's %f format. 
Name: out_file_context; Comment: Print the context information of FILENAME, and return true iff the context could not be obtained. 
Name: print_statfs; Comment: Print statfs info. Return zero upon success, nonzero upon failure. 
Name: find_bind_mount; Comment: Return any bind mounted source for a path. The caller should not free the returned buffer. Return NULL if no bind mount found. 
Name: out_mount_point; Comment: Print mount point. Return zero upon success, nonzero upon failure. 
Name: print_stat; Comment: Print stat info. Return zero upon success, nonzero upon failure. 
Name: print_esc_char; Comment: Output a single-character _ escape. 
Name: print_it; Comment: Print the information specified by the format string, FORMAT, calling PRINT_FUNC for each %-directive encountered. Return zero upon success, nonzero upon failure. 
Name: do_statfs; Comment: Stat the file system and print what we find. 
Name: do_stat; Comment: stat the file and print what we find 
Name: default_format; Comment: Return an allocated format string in static storage that corresponds to whether FS and TERSE options were declared. 
Name: parse_size; Comment: Set size to the value of STR, interpreted as a decimal integer, optionally multiplied by various values. Return -1 on error, 0 on success. This supports dd BLOCK size suffixes. Note we don't support dd's b=512, c=1, w=2 or 21x512MiB formats. 
Name: set_program_path; Comment: argv[0] can be anything really, but generally it contains the path to the executable or just a name if it was executed using $PATH. In the latter case to get the path we can: search getenv("PATH"), readlink("/prof/self/exe"), getenv("_"), dladdr(), pstat_getpathname(), etc. 
Name: set_libstdbuf_options; Comment: Populate environ with _STDBUF_I=$MODE _STDBUF_O=$MODE _STDBUF_E=$MODE. Return TRUE if any environment variables set. 
Name: wrapf; Comment: Print format string MESSAGE and optional args. Wrap to next line first if it won't fit. Print a space first unless MESSAGE will start a new line. 
Name: set_mode; Comment: Return false if not applied because not reversible; otherwise return true. 
Name: strtoul_tcflag_t; Comment: NOTE: identical to below, modulo use of tcflag_t 
Name: strtoul_cc_t; Comment: NOTE: identical to above, modulo use of cc_t 
Name: recover_mode; Comment: Parse the output of display_recoverable. Return false if any part of it is invalid. 
Name: visible; Comment: Adapted from 'cat' by Torbjorn Granlund. 
Name: integer_arg; Comment: Parse string S as an integer, using decimal radix by default, but allowing octal and hex numbers as in C. Reject values larger than MAXVAL. 
Name: bsd_sum_file; Comment: Calculate and print the rotated checksum and the size in 1K blocks of file FILE, or of the standard input if FILE is "-". If PRINT_NAME is >1, print FILE next to the checksum and size. The checksum varies depending on sizeof (int). Return true if successful. 
Name: sysv_sum_file; Comment: Calculate and print the checksum and the size in 512-byte blocks of file FILE, or of the standard input if FILE is "-". If PRINT_NAME is >0, print FILE next to the checksum and size. Return true if successful. 
Name: sync_arg; Comment: Sync the specified FILE, or file systems associated with FILE. Return 1 on success. 
Name: output; Comment: Print the characters from START to PAST_END - 1. If START is NULL, just flush the buffer. 
Name: tac_seekable; Comment: Print in reverse the file open on descriptor FD for reading FILE. The file is already positioned at FILE_POS, which should be near its end. Return true if successful. 
Name: temp_stream; Comment: A wrapper around mkstemp that gives us both an open stream pointer, FP, and the corresponding FILE_NAME. Always return the same FP/name pair, rewinding/truncating it upon each reuse. 
Name: copy_to_temp; Comment: Copy from file descriptor INPUT_FD (corresponding to the named FILE) to a temporary file, and set *G_TMP and *G_TEMPFILE to the resulting stream and file name. Return the number of bytes copied, or -1 on error. 
Name: tac_nonseekable; Comment: Copy INPUT_FD to a temporary, then tac that file. Return true if successful. 
Name: tac_file; Comment: Print FILE in reverse, copying it to a temporary file first if it is not seekable. Return true if successful. 
Name: record_open_fd; Comment: Record a file F with descriptor FD, size SIZE, status ST, and blocking status BLOCKING. 
Name: close_fd; Comment: Close the file with descriptor FD and name FILENAME. 
Name: dump_remainder; Comment: Read and output N_BYTES of file PRETTY_FILENAME starting at the current position in FD. If N_BYTES is COPY_TO_EOF, then copy until end of file. If N_BYTES is COPY_A_BUFFER, then copy at most one buffer's worth. Return the number of bytes read from the file. 
Name: xlseek; Comment: Call lseek with the specified arguments, where file descriptor FD corresponds to the file, FILENAME. Give a diagnostic and exit nonzero if lseek fails. Otherwise, return the resulting offset. 
Name: file_lines; Comment: Print the last N_LINES lines from the end of file FD. Go backward through the file, reading 'BUFSIZ' bytes at a time (except probably the first), until we hit the start of the file or have read NUMBER newlines. START_POS is the starting position of the read pointer for the file associated with FD (may be nonzero). END_POS is the file offset of EOF (one larger than offset of last byte). Return true if successful. 
Name: pipe_lines; Comment: Print the last N_LINES lines from the end of the standard input, open for reading as pipe FD. Buffer the text as a linked list of LBUFFERs, adding them as needed. Return true if successful. 
Name: pipe_bytes; Comment: Print the last N_BYTES characters from the end of pipe FD. This is a stripped down version of pipe_lines. Return true if successful. 
Name: start_bytes; Comment: Skip N_BYTES characters from the start of pipe FD, and print any extra characters that were read beyond that. Return 1 on error, 0 if ok, -1 if EOF. 
Name: start_lines; Comment: Skip N_LINES lines at the start of file or pipe FD, and print any extra characters that were read beyond that. Return 1 on error, 0 if ok, -1 if EOF. 
Name: fremote; Comment: Return false when FD is open on a file residing on a local file system. If fstatfs fails, give a diagnostic and return true. If fstatfs cannot be called, return true. 
Name: recheck; Comment: open/fstat F->name and handle changes. 
Name: any_live_files; Comment: Return true if any of the N_FILES files in F are live, i.e., have open file descriptors, or should be checked again (see --retry). When following descriptors, checking should only continue when any of the files is not yet ignored. 
Name: tail_forever; Comment: Tail N_FILES files forever, or until killed. The pertinent information for each file is stored in an entry of F. Loop over each of them, doing an fstat to see if they have changed size, and an occasional open/fstat to see if any dev/ino pair has changed. If none of them have changed size in one iteration, sleep for a while and try again. Continue until the user interrupts us. 
Name: any_remote_file; Comment: Return true if any of the N_FILES files in F is remote, i.e., has an open file descriptor and is on a network file system. 
Name: any_non_remote_file; Comment: Return true if any of the N_FILES files in F is non remote, i.e., has an open file descriptor and is not on a network file system. 
Name: any_symlinks; Comment: Return true if any of the N_FILES files in F is a symlink. Note we don't worry about the edge case where "-" exists, since that will have the same consequences for inotify, which is the only context this function is currently used. 
Name: tailable_stdin; Comment: Return true if any of the N_FILES files in F represents stdin and is tailable. 
Name: check_fspec; Comment: Output (new) data for FSPEC->fd. 
Name: tail_forever_inotify; Comment: Attempt to tail N_FILES files forever, or until killed. Check modifications using the inotify events system. Return false on error, or true to revert to polling. 
Name: tail_bytes; Comment: Output the last N_BYTES bytes of file FILENAME open for reading in FD. Return true if successful. 
Name: tail_lines; Comment: Output the last N_LINES lines of file FILENAME open for reading in FD. Return true if successful. 
Name: tail; Comment: Display the last N_UNITS units of file FILENAME, open for reading via FD. Set *READ_POS to the position of the input stream pointer. *READ_POS is usually the number of bytes read and corresponds to an offset from the beginning of a file. However, it may be larger than OFF_T_MAX (as for an input pipe), and may also be larger than the number of bytes read (when an input pointer is initially not at beginning of file), and may be far greater than the number of bytes actually read for an input file that is seekable. Return true if successful. 
Name: tail_file; Comment: Display the last N_UNITS units of the file described by F. Return true if successful. 
Name: parse_obsolete_option; Comment: If obsolete usage is allowed, and the command line arguments are of the obsolete form and the option string is well-formed, set *N_UNITS, the globals COUNT_LINES, FOREVER, and FROM_START, and return true. If the command line arguments are obviously incorrect (e.g., because obsolete usage is not allowed and the arguments are incorrect for non-obsolete usage), report an error and exit. Otherwise, return false and don't modify any parameter or global variable. 
Name: ignore_fifo_and_pipe; Comment: Mark as '.ignore'd each member of F that corresponds to a pipe or fifo, and return the number of non-ignored members. 
Name: tee_files; Comment: Copy the standard input into each of the NFILES files in FILES and into the standard output. As a side effect, modify FILES[-1]. Return true if successful. 
Name: advance; Comment: Increment our position in the argument list. Check that we're not past the end of the argument list. This check is suppressed if the argument is false. 
Name: beyond; Comment: beyond - call when we're beyond the end of the argument list (an *_error condition) 
Name: find_int; Comment: If the characters pointed to by STRING constitute a valid number, return a pointer to the start of the number, skipping any blanks or leading '+'. Otherwise, report an error and exit. 
Name: get_mtime; Comment: Find the modification time of FILE, and stuff it into *MTIME. Return true if successful. 
Name: binop; Comment: Return true if S is one of the test command's binary operators. 
Name: term; Comment: term - parse a term and return 1 or 0 depending on whether the term *_evaluates to true or false, respectively. term ::= *_'-'('h'|'d'|'f'|'r'|'s'|'w'|'c'|'b'|'p'|'u'|'g'|'k') filename *_'-'('L'|'x') filename *_'-t' int *_'-'('z'|'n') string *_string *_string ('!='|'=') string *_<int> '-'(eq|ne|le|lt|ge|gt) <int> *_file '-'(nt|ot|ef) file *_'(' <expr> ')' int ::= *_'-l' string *_positive and negative integers 
Name: and; Comment: and: *_term *_term '-a' and 
Name: or; Comment: or: *_and *_and '-o' or 
Name: expr; Comment: expr: *_or 
Name: test_unop; Comment: Return true if OP is one of the test command's unary operators. 
Name: main; Comment: [: *_'[' expr ']' test: *_test expr 
Name: settimeout; Comment: Start the timeout after which we'll receive a SIGALRM. Round DURATION up to the next representable value. Treat out-of-range values as if they were maximal, as that's more useful in practice than reporting an error. '0' means don't timeout. 
Name: send_sig; Comment: send SIG avoiding the current process. 
Name: apply_time_suffix; Comment: Given a floating point value *X, and a suffix character, SUFFIX_CHAR, scale *X by the multiplier implied by SUFFIX_CHAR. SUFFIX_CHAR may be the NUL byte or 's' to denote seconds, 'm' for minutes, 'h' for hours, or 'd' for days. If SUFFIX_CHAR is invalid, don't modify *X and return false. Otherwise return true. 
Name: disable_core_dumps; Comment: Try to disable core dumps for this process. Return TRUE if successful, FALSE otherwise. 
Name: get_reldate; Comment: Store into *RESULT the result of interpreting FLEX_DATE as a date, relative to NOW. If NOW is null, use the current time. 
Name: touch; Comment: Update the time of file FILE according to the options given. Return true if successful. 
Name: is_char_class_member; Comment: Return true if the character C is a member of the character class CHAR_CLASS. 
Name: unquote; Comment: None however, on input, S is assumed to be null-terminated, and hence cannot contain actual (non-escaped) zero bytes. 
Name: look_up_char_class; Comment: If CLASS_STR is a valid character class string, return its index in the global char_class_name array. Otherwise, return CC_NO_CLASS. 
Name: make_printable_char; Comment: Return a newly allocated string with a printable version of C. This function is used solely for formatting error messages. 
Name: make_printable_str; Comment: Return a newly allocated copy of S which is suitable for printing. LEN is the number of characters in S. Most non-printing (isprint) characters are represented by a backslash followed by 3 octal digits. However, the characters represented by _c escapes where c is one of [abfnrtv] are represented by their 2-character _c sequences. This function is used solely for printing error messages. 
Name: append_normal_char; Comment: Append a newly allocated structure representing a character C to the specification list LIST. 
Name: append_range; Comment: Append a newly allocated structure representing the range of characters from FIRST to LAST to the specification list LIST. Return false if LAST precedes FIRST in the collating sequence, true otherwise. This means that '[c-c]' is acceptable. 
Name: append_char_class; Comment: If CHAR_CLASS_STR is a valid character class string, append a newly allocated structure representing that character class to the end of the specification list LIST and return true. If CHAR_CLASS_STR is not a valid string return false. 
Name: append_repeated_char; Comment: Append a newly allocated structure representing a [c*n] repeated character construct to the specification list LIST. THE_CHAR is the single character to be repeated, and REPEAT_COUNT is a non-negative repeat count. 
Name: append_equiv_class; Comment: Given a string, EQUIV_CLASS_STR, from a [=str=] context and the length of that string, LEN, if LEN is exactly one, append a newly allocated structure representing the specified equivalence class to the specification list, LIST and return true. If LEN is not 1, return false. 
Name: find_closing_delim; Comment: Search forward starting at START_IDX for the 2-char sequence (PRE_BRACKET_CHAR,']') in the string P of length P_LEN. If such a sequence is found, set *RESULT_IDX to the index of the first character and return true. Otherwise return false. P may contain zero bytes. 
Name: find_bracketed_repeat; Comment: Parse the bracketed repeat-char syntax. If the P_LEN characters beginning with P[ START_IDX ] comprise a valid [c*n] construct, then set *CHAR_TO_REPEAT, *REPEAT_COUNT, and *CLOSING_BRACKET_IDX and return zero. If the second character following the opening bracket is not '*' or if no closing bracket can be found, return -1. If a closing bracket is found and the second char is '*', but the string between the '*' and ']' isn't empty, an octal number, or a decimal number, print an error message and return -2. 
Name: star_digits_closebracket; Comment: Return true if the string at ES->s[IDX] matches the regular expression '_*[0-9]*_]', false otherwise. The string does not match if any of its characters are escaped. 
Name: build_spec_list; Comment: Convert string UNESCAPED_STRING (which has been preprocessed to convert backslash-escape sequences) of length LEN characters into a linked list of the following 5 types of constructs: - [:str:] Character class where 'str' is one of the 12 valid strings. - [=c=] Equivalence class where 'c' is any single character. - [c*n] Repeat the single character 'c' 'n' times. n may be omitted. However, if 'n' is present, it must be a non-negative octal or decimal integer. - r-s Range of characters from 'r' to 's'. The second endpoint must not precede the first in the current collating sequence. - c Any other character is interpreted as itself. 
Name: skip_construct; Comment: Advance past the current construct. S->tail must be non-NULL. 
Name: get_next; Comment: Given a Spec_list S (with its saved state implicit in the values of its members 'tail' and 'state'), return the next single character in the expansion of S's constructs. If the last character of S was returned on the previous call or if S was empty, this function returns -1. For example, successive calls to get_next where S represents the spec-string 'a-d[y*3]' will return the sequence of values a, b, c, d, y, y, y, -1. Finally, if the construct from which the returned character comes is [:upper:] or [:lower:], the parameter CLASS is given a value to indicate which it was. Otherwise CLASS is set to UL_NONE. This value is used only when constructing the translation table to verify that any occurrences of upper and lower class constructs in the spec-strings appear in the same relative positions. 
Name: card_of_complement; Comment: This is a minor kludge. This function is called from get_spec_stats to determine the cardinality of a set derived from a complemented string. It's a kludge in that some of the same operations are (duplicated) performed in set_initialize. 
Name: validate_case_classes; Comment: Discard the lengths associated with a case conversion, as using the actual number of upper or lower case characters is problematic when they don't match in some locales. Also ensure the case conversion classes in string2 are aligned correctly with those in string1. Note POSIX says the behavior of 'tr "[:upper:]" "[:upper:]"' is undefined. Therefore we allow it (unlike Solaris) and treat it as a no-op. 
Name: get_spec_stats; Comment: Gather statistics about the spec-list S in preparation for the tests in validate that determine the consistency of the specs. This function is called at most twice; once for string1, and again for any string2. LEN_S1 < 0 indicates that this is the first call and that S represents string1. When LEN_S1 >= 0, it is the length of the expansion of the constructs in string1, and we can use its value to resolve any indefinite repeat construct in S (which represents string2). Hence, this function has the side-effect that it converts a valid [c*] construct in string2 to [c*n] where n is large enough (or 0) to give string2 the same length as string1. For example, with the command tr a-z 'A[_n*]Z' on the second call to get_spec_stats, LEN_S1 would be 26 and S (representing string2) would be converted to 'A[_n*24]Z'. 
Name: parse_str; Comment: This function makes two passes over the argument string S. The first one converts all _c and _ddd escapes to their one-byte representations. The second constructs a linked specification list, SPEC_LIST, of the characters and constructs that comprise the argument string. If either of these passes detects an error, this function returns false. 
Name: string2_extend; Comment: Given two specification lists, S1 and S2, and assuming that S1->length > S2->length, append a single [c*n] element to S2 where c is the last character in the expansion of S2 and n is the difference between the two lengths. Upon successful completion, S2->length is set to S1->length. The only way this function can fail to make S2 as long as S1 is when S2 has zero-length, since in that case, there is no last character to repeat. So S2->length is required to be at least 1. 
Name: homogeneous_spec_list; Comment: Return true if S is a non-empty list in which exactly one character (but potentially, many instances of it) appears. E.g., [X*] or xxxxxxxx. 
Name: validate; Comment: Die with an error message if S1 and S2 describe strings that are not valid with the given command line switches. A side effect of this function is that if a valid [c*] or [c*0] construct appears in string2, it is converted to [c*n] with a value for n that makes s2->length == s1->length. By the same token, if the --truncate-set1 option is not given, S2 may be extended. 
Name: squeeze_filter; Comment: Read buffers of SIZE bytes via the function READER (if READER is NULL, read from stdin) until EOF. When non-NULL, READER is either read_and_delete or read_and_xlate. After each buffer is read, it is processed and written to stdout. The buffers are processed so that multiple consecutive occurrences of the same character in the input stream are replaced by a single occurrence of that character if the character is in the squeeze set. 
Name: read_and_delete; Comment: Read buffers of SIZE bytes from stdin until one is found that contains at least one character not in the delete set. Store in the array BUF, all characters from that buffer that are not in the delete set, and return the number of characters saved or 0 upon EOF. 
Name: read_and_xlate; Comment: Read at most SIZE bytes from stdin into the array BUF. Then perform the in-place and one-to-one mapping specified by the global array 'xlate'. Return the number of characters read, or 0 upon EOF. 
Name: set_initialize; Comment: Initialize a boolean membership set, IN_SET, with the character values obtained by traversing the linked list of constructs S using the function 'get_next'. IN_SET is expected to have been initialized to all zeros by the caller. If COMPLEMENT_THIS_SET is true the resulting set is complemented. 
Name: do_ftruncate; Comment: return true on success, false on error. 
Name: new_item; Comment: Create a new item/node for STR. 
Name: search_item; Comment: Search binary tree rooted at *ROOT for STR. Allocate a new tree if *ROOT is NULL. Insert a node/item for STR if not found. Return the node/item found/created for STR. This is done according to Algorithm A (Balanced tree search and insertion) in Donald E. Knuth, The Art of Computer Programming, Volume 3/Searching and Sorting, pages 455--457. 
Name: record_relation; Comment: Record the fact that J precedes K. 
Name: detect_loop; Comment: Try to detect the loop. If we have detected that K is part of a loop, print the loop on standard error, remove a relation to break the loop, and return true. The loop detection strategy is as follows: Realise that what we're dealing with is essentially a directed graph. If we find an item that is part of a graph that contains a cycle we traverse the graph in backwards direction. In general there is no unique way to do this, but that is no problem. If we encounter an item that we have encountered before, we know that we've found a cycle. All we have to do now is retrace our steps, printing out the items until we encounter that item again. (This is not necessarily the item that we started from originally.) Since the order in which the items are stored in the tree is not related to the specified partial ordering, we may need to walk the tree several times before the loop has completely been constructed. If the loop was found, the global variable LOOP will be NULL. 
Name: recurse_tree; Comment: Recurse (sub)tree rooted at ROOT, calling ACTION for each node. Stop when ACTION returns true. 
Name: walk_tree; Comment: Walk the tree specified by the head ROOT, calling ACTION for each node. 
Name: tsort; Comment: Do a topological sort on FILE. Return true if successful. 
Name: print_element; Comment: Print ELEMENT, preceded by a space if something has already been printed. 
Name: decode_switches; Comment: Set all the option flags according to the switches specified. Return the mask indicating which elements to print. 
Name: unexpand; Comment: Change blanks to tabs, writing to stdout. Read each file in 'file_list', in order. 
Name: size_opt; Comment: Convert OPT to size_t, reporting an error using MSGID if OPT is invalid. Silently convert too-large values to SIZE_MAX. 
Name: find_field; Comment: Given a linebuffer LINE, return a pointer to the beginning of the line's field to be compared. 
Name: different; Comment: Return false if two strings OLD and NEW match, true if not. OLD and NEW point not to the beginnings of the lines but rather to the beginnings of the fields to compare. OLDLEN and NEWLEN are their lengths. 
Name: writeline; Comment: None LINECOUNT + 1 is the number of times that the line occurred. 
Name: check_file; Comment: Process input file INFILE with output to OUTFILE. If either is "-", use the standard I/O stream for it instead. 
Name: uptime; Comment: Display the system uptime and the number of users on the system, according to utmp file FILENAME. Use read_utmp OPTIONS to read the utmp file. 
Name: users; Comment: Display a list of users on the system, according to utmp file FILENAME. Use read_utmp OPTIONS to read FILENAME. 
Name: write_counts; Comment: FILE is the name of the file (or NULL for standard input) associated with the specified counters. 
Name: wc; Comment: Count words. FILE_X is the name of the file (or NULL for standard input) that is open on descriptor FD. *FSTATUS is its status. CURRENT_POS is the current file offset if known, negative if unknown. Return true if successful. 
Name: get_input_fstatus; Comment: None that happens when we don't know how long the list of file names will be. 
Name: compute_number_width; Comment: Return a print width suitable for the NFILES files whose status is recorded in FSTATUS. Optimize the same special case that get_input_fstatus optimizes. 
Name: idle_string; Comment: Return a string representing the time between WHEN and now. BOOTTIME is the time of last reboot. FIXME: locale? 
Name: print_line; Comment: Print formatted output line. Uses mostly arbitrary field sizes, probably will need tweaking if any of the localization stuff is done, or for 64 bit pids, etc. 
Name: is_tty_writable; Comment: Return true if a terminal device given as PSTAT allows other users to send messages to; false otherwise 
Name: print_user; Comment: Send properly parsed USER_PROCESS info to print_line. The most recent boot time is BOOTTIME. 
Name: list_entries_who; Comment: Print the username of each valid entry and the number of valid entries in UTMP_BUF, which should have N elements. 
Name: who; Comment: Display a list of who is on the system, according to utmp file FILENAME. Use read_utmp OPTIONS to read the file. 
Name: blake2b_stream; Comment: This will help compatibility with coreutils 
Name: blake2b_is_lastblock; Comment: Some helper functions, not necessarily useful 
Name: blake2b_init_param; Comment: init xors IV with input parameter block 
Name: blake2b; Comment: inlen, at least, should be uint64_t. Others can be size_t. 
Name: atoll; Comment: Convert a string to a long long int. 
Name: hash_pjw; Comment: A hash function for NUL-terminated char* strings using the method described by Bruno Haible. See https://www.haible.de/bruno/hashfunc.html. 
Name: defaulted_getenv; Comment: Specification: <https:pubs.opengroup.orgonlinepubs9699919799utilitieslocale.html> Here we implement only the invocation without any command-line options. 
Name: pthread_create; Comment: Use Windows threads. 
Name: pthread_create; Comment: Provide a dummy implementation for single-threaded applications. 
Name: identity; Comment: Return N. Usual compilers are not able to infer something about the return value. 
Name: get_errno; Comment: The indirection through a volatile function pointer is necessary to prevent a GCC optimization. Without it, when optimizing, GCC would "know" that errno is unchanged by calling free(ptr), when ptr was the result of a malloc(...) call in the same function. 
Name: for_character; Comment: Returns the value of iswdigit for the multibyte character s[0..n-1]. 
Name: for_character; Comment: Returns the value of iswxdigit for the multibyte character s[0..n-1]. 
Name: main; Comment: None done | sort -k 2 
Name: really_utf8; Comment: Check whether it's really a UTF-8 locale. On mingw, setlocale (LC_ALL, "en_US.UTF-8") succeeds but returns "English_United States.1252", with locale_charset () returning "CP1252". 
Name: main; Comment: Copyright (C) 2008-2021 Free Software Foundation, Inc. Written by Simon Josefsson. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. 
Name: initialize_filenames; Comment: Use file names that are different at each run. This is necessary for test_birthtime() to pass on native Windows: On this platform, the file system apparently remembers the creation time of a file even after it is removed and created anew. See "Windows NT Contains File System Tunneling Capabilities" <https://support.microsoft.com/en-us/help/172190/> 
Name: f; Comment: ============================== Test assume ============================== 
Name: main; Comment: ============================== Main ===================================== 
Name: main; Comment: Test suite for version-etc. Copyright (C) 2009-2021 Free Software Foundation, Inc. This file is part of the GNUlib Library. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. 
Name: main; Comment: Test of xstdopen() function. Copyright (C) 2019-2021 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. 
Name: dtor_table_shrink_used; Comment: Shrinks dtors_used down to dtors_count, by replacing inactive entries with active ones. 
Name: do_init_thrd_with_exitvalue_key; Comment: Initializes thrd_with_exitvalue_key. This function must only be called once. 
Name: init_thrd_with_exitvalue_key; Comment: Initializes thrd_with_exitvalue_key. 
Name: gl_thread_create; Comment: ========================================================================= 
Name: segv_handler; Comment: Handle a segmentation violation and exit if it cannot be stack overflow. This function is async-signal-safe. 
Name: overflow_handler; Comment: Handle a segmentation violation that is likely to be a stack overflow and exit. This function is async-signal-safe. 
Name: rpl_calloc; Comment: Allocate and zero-fill an NxS-byte block of memory from the heap, even if N or S is zero. 
Name: careadlinkat; Comment: Assuming the current directory is FD, get the symbolic link value of FILENAME as a null-terminated string and put it into a buffer. If FD is AT_FDCWD, FILENAME is interpreted relative to the current working directory, as in openat. If the link is small enough to fit into BUFFER put it there. BUFFER's size is BUFFER_SIZE, and BUFFER can be null if BUFFER_SIZE is zero. If the link is not small, put it into a dynamically allocated buffer managed by ALLOC. It is the caller's responsibility to free the returned value if it is nonnull and is not BUFFER. A null ALLOC stands for the standard allocator. The PREADLINKAT function specifies how to read links. It operates like POSIX readlinkat() <https:pubs.opengroup.orgonlinepubs9699919799functionsreadlink.html> but can assume that its first argument is the same as FD. If successful, return the buffer address; otherwise return NULL and set errno. 
Name: block_read; Comment: Read NBYTES bytes from descriptor FD into BUF. NBYTES must not be SIZE_MAX. Return the number of characters successfully read. On error, return SIZE_MAX, setting errno. The number returned is always NBYTES unless end-of-file or error. 
Name: buffer_lcm; Comment: Least common multiple of two buffer sizes A and B. However, if either A or B is zero, or if the multiple is greater than LCM_MAX, return a reasonable buffer size. 
Name: mfile_name_concat; Comment: Concatenate two file name components, DIR and BASE, in newly-allocated storage and return the result. The resulting file name F is such that the commands "ls F" and "(cd DIR; ls .BASE)" refer to the same file. If necessary, put a separator between DIR and BASE in the result. Typically this separator is "/", but in rare cases it might be ".". In any case, if BASE_IN_RESULT is non-NULL, set *BASE_IN_RESULT to point to the copy of BASE at the end of the returned concatenation. If malloc fails, return NULL with errno set. 
Name: process_long_option; Comment: Process the argument starting with d->__nextchar as a long option. d->optind should *not* have been advanced over this argument. If the value returned is -1, it was not actually a long option, the state is unchanged, and the argument should be processed as a set of short options (this can only happen when long_only is true). Otherwise, the option (and its argument, if any) have been consumed and the return value is the value to return from _getopt_internal_r. 
Name: _getopt_initialize; Comment: Initialize internal data upon the first call to getopt. 
Name: current_timespec; Comment: Return the current system time as a struct timespec. 
Name: gettimeofday; Comment: This is a wrapper for gettimeofday. It is used only on systems that lack this function, or whose implementation of this function causes problems. Work around the bug in some systems whereby gettimeofday clobbers the static buffer that localtime uses for its return value. The gettimeofday function from Mac OS X 10.0.4 (i.e., Darwin 1.3.7) has this problem. 
Name: hash_get_n_buckets; Comment: Information and lookup. 
Name: hash_get_first; Comment: Walking. 
Name: rpl_malloc; Comment: Allocate an N-byte block of memory from the heap, even if N is 0. 
Name: knuth_morris_pratt_multibyte; Comment: Knuth-Morris-Pratt algorithm. See https:en.wikipedia.orgwikiKnuth-Morris-Pratt_algorithm Return a boolean indicating success: Return true and set *RESULTP if the search was completed. Return false if it was aborted because not enough memory was available. 
Name: gl_get_mbtowc_lock; Comment: Returns the internal lock used by mbrtowc and mbrtoc32. 
Name: ydhms_diff; Comment: Return an integer value measuring (YEAR1-YDAY1 HOUR1:MIN1:SEC1) - (YEAR0-YDAY0 HOUR0:MIN0:SEC0) in seconds, assuming that the clocks were not adjusted between the timestamps. The YEAR values uses the same numbering as TP->tm_year. Values need not be in the usual range. However, YEAR1 - YEAR0 must not overflow even when multiplied by three times the number of seconds in a year, and likewise for YDAY1 - YDAY0 and three times the number of seconds in a day. 
Name: tm_diff; Comment: Return a long_int value corresponding to (YEAR-YDAY HOUR:MIN:SEC) minus *TP seconds, assuming no clock adjustments occurred between the two timestamps. YEAR and YDAY must not be so large that multiplying them by three times the number of seconds in a year (or day, respectively) would overflow long_int. *TP should be in the usual range. 
Name: convert_time; Comment: Use CONVERT to convert T to a struct tm value in *TM. T must be in range for __time64_t. Return TM if successful, NULL (setting errno) on failure. 
Name: ranged_convert; Comment: Use CONVERT to convert *T to a broken down time in *TP. If *T is out of range for conversion, adjust it so that it is the nearest in-range value and then convert that. A value is in range if it fits in both __time64_t and long_int. Return TP on success, NULL (setting errno) on failure. 
Name: __mktime_internal; Comment: None otherwise leave *TP alone, return ((time_t) -1) and set errno. This function is external because it is used also by timegm.c. 
Name: __mktime64; Comment: Convert *TP to a __time64_t value. 
Name: gl_get_nl_langinfo_lock; Comment: Returns the internal lock used by nl_langinfo. 
Name: my_strftime; Comment: Write information from TP into S according to the format string FORMAT, writing no more that MAXSIZE characters (including the terminating '_0') and returning number of characters written. If S is NULL, nothing will be written anywhere, so to determine how many characters would be written, use NULL for S and (size_t) -1 for MAXSIZE. 
Name: __strftime_internal; Comment: Just like my_strftime, above, but with more parameters. UPCASE indicates that the result should be converted to upper case. YR_SPEC and WIDTH specify the padding and width for the year. *TZSET_CALLED indicates whether tzset has been called here. 
Name: prepend_args; Comment: Find the white-space-separated options specified by OPTIONS, and using BUF to store copies of these options, set ARGV[0], ARGV[1], etc. to the option copies. Return the number N of options found. Do not set ARGV[N]. If ARGV is zero, do not store ARGV[0] etc. Backslash can be used to escape whitespace (and backslashes). 
Name: prepend_default_options; Comment: Prepend the whitespace-separated options in OPTIONS to the argument vector of a main program with argument count *PARGC and argument vector *PARGV. 
Name: gettext_quote; Comment: MSGID approximates a quotation mark. Return its translation if it has one; otherwise, return either it or "_"", depending on S. S is either clocale_quoting_style or locale_quoting_style. 
Name: quotearg_n_options; Comment: Use storage slot N to return a quoted version of argument ARG. ARG is of size ARGSIZE, but if that is SIZE_MAX, ARG is a null-terminated string. OPTIONS specifies the quoting options. The returned value points to static storage that can be reused by the next call to this function with the same value of N. N must be nonnegative; it is typically small, and must be less than MIN (INT_MAX, IDX_MAX). The type of N is signed to allow for future extensions (using negative values). 
Name: rawmemchr; Comment: Find the first occurrence of C in S. 
Name: rpl_realloc; Comment: Change the size of an allocated block of memory P to N bytes, with error checking. If P is NULL, use malloc. Otherwise if N is zero, free P and return NULL. 
Name: regexec; Comment: regexec searches for a given pattern, specified by PREG, in the string STRING. If NMATCH is zero or REG_NOSUB was set in the cflags argument to 'regcomp', we ignore PMATCH. Otherwise, we assume PMATCH has at least NMATCH elements, and we set them to the offsets of the corresponding matched substrings. EFLAGS specifies "execution flags" which affect matching: if REG_NOTBOL is set, then ^ does not match at the beginning of the string; if REG_NOTEOL is set, then $ does not match at the end. Return 0 if a match is found, REG_NOMATCH if not, REG_BADPAT if EFLAGS is invalid. 
Name: re_match; Comment: re_match, re_search, re_match_2, re_search_2 The former two functions operate on STRING with length LENGTH, while the later two operate on concatenation of STRING1 and STRING2 with lengths LENGTH1 and LENGTH2, respectively. re_match() matches the compiled pattern in BUFP against the string, starting at index START. re_search() first tries matching at index START, then it tries to match starting from index START + 1, and so on. The last start position tried is START + RANGE. (Thus RANGE = 0 forces re_search to operate the same way as re_match().) The parameter STOP of re_{match,search}_2 specifies that no match exceeding the first STOP characters of the concatenation of the strings should be concerned. If REGS is not NULL, and BUFP->no_sub is not set, the offsets of the match and all groups is stored in REGS. (For the "_2" variants, the offsets are computed relative to the concatenation, not relative to the individual strings.) On success, re_match* functions return the length of the match, re_search* return the position of the start of the match. They return -1 on match failure, -2 on error. 
Name: proceed_next_node; Comment: None return -1 on match failure, -2 on error. 
Name: sift_states_backward; Comment: This function checks the STATE_LOG from the SCTX->last_str_idx to 0 and sift the nodes in each states according to the following rules. Updated state_log will be wrote to STATE_LOG. Rules: We throw away the Node 'a' in the STATE_LOG[STR_IDX] if... 1. When STR_IDX == MATCH_LAST(the last index in the state_log): _If 'a' isn't the LAST_NODE and 'a' can't epsilon transit to _the LAST_NODE, we throw away the node 'a'. 2. When 0 <= STR_IDX < MATCH_LAST and 'a' accepts _string 's' and transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX+strlen('s')], we throw _ away the node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX+strlen('s')] but 'b' is _ thrown away, we throw away the node 'a'. 3. When 0 <= STR_IDX < MATCH_LAST and 'a' epsilon transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX], we throw away the _ node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX] but 'b' is thrown away, _ we throw away the node 'a'. 
Name: transit_state; Comment: Return the next state to which the current state STATE will transit by accepting the current input byte, and update STATE_LOG if necessary. Return NULL on failure. If STATE can accept a multibyte char/collating element/back reference update the destination of STATE_LOG. 
Name: transit_state_sb; Comment: Return the next state to which the current state STATE will transit by accepting the current input byte. Return NULL on failure. 
Name: find_subexp_node; Comment: Find the first node which is '(' or ')' and whose index is SUBEXP_IDX. Search '(' if FL_OPEN, or search ')' otherwise. TODO: This function isn't efficient... _ Because there might be more than one nodes whose types are _ OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all _ nodes. _ E.g. RE: (a){2} 
Name: check_arrival; Comment: Check whether the node TOP_NODE at TOP_STR can arrive to the node LAST_NODE at LAST_STR. We record the path onto PATH since it will be heavily reused. Return REG_NOERROR if it can arrive, REG_NOMATCH if it cannot, REG_ESPACE if memory is exhausted. 
Name: check_arrival_add_next_nodes; Comment: Calculate the destination nodes of CUR_NODES at STR_IDX, and append them to NEXT_NODES. TODO: This function is similar to the functions transit_state*(), _ however this function has many additional works. _ Can't we unify them? 
Name: group_nodes_into_DFAstates; Comment: Group all nodes belonging to STATE into several destinations. Then for all destinations, set the nodes belonging to the destination to DESTS_NODE[i] and set the characters accepted by the destination to DEST_CH[i]. Return the number of destinations if successful, -1 on internal error. 
Name: match_ctx_add_sublast; Comment: Register the node NODE, whose type is OP_CLOSE_SUBEXP, and which matches at STR_IDX, whose corresponding OP_OPEN_SUBEXP is SUB_TOP. Return the new entry if successful, NULL if memory is exhausted. 
Name: re_acquire_state; Comment: Search for the state whose node_set is equivalent to NODES. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: re_acquire_state_context; Comment: Search for the state whose node_set is equivalent to NODES and whose context is equivalent to CONTEXT. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: gl_get_setlocale_null_lock; Comment: Returns the internal lock used by setlocale_null_r. 
Name: init_sh_quoting_options; Comment: Initializes the sh_quoting_options variable. 
Name: shell_quote_length; Comment: Returns the number of bytes needed for the quoted string. 
Name: shell_quote_copy; Comment: Copies the quoted string to p and returns the incremented p. There must be room for shell_quote_length (string) + 1 bytes at p. 
Name: shell_quote; Comment: Returns the freshly allocated quoted string. 
Name: shell_quote_argv; Comment: Returns a freshly allocated string containing all argument strings, quoted, separated through spaces. 
Name: sigsegv_reset_onstack_flag; Comment: -------------------------- leave-sigaltstack.c -------------------------- 
Name: sigsegv_reset_onstack_flag; Comment: IRIX, Solaris 
Name: sigsegv_reset_onstack_flag; Comment: ------------------------------ leave-nop.c ------------------------------ 
Name: remember_stack_top; Comment: Needs to be called once only. 
Name: simple_is_near_this; Comment: Info about the gap between this VMA and the previous one. addr must be < vma->start. 
Name: simple_is_near_this; Comment: Info about the gap between this VMA and the next one. addr must be > vma->end - 1. 
Name: rof_open; Comment: Open a read-only file stream. 
Name: rof_peekchar; Comment: Return the next byte from a read-only file stream without consuming it, or -1 at EOF. 
Name: rof_getchar; Comment: Return the next byte from a read-only file stream, or -1 at EOF. 
Name: rof_scanf_lx; Comment: Parse an unsigned hexadecimal number from a read-only file stream. 
Name: rof_close; Comment: Close a read-only file stream. 
Name: vma_iterate_proc; Comment: GNU/kFreeBSD mounts /proc as linprocfs, which looks like a Linux /proc file system. 
Name: vma_iterate; Comment: Iterate over the virtual memory areas of the current process. If such iteration is supported, the callback is called once for every virtual memory area, in ascending order, with the following arguments: - LOCALS is the same argument as passed to vma_iterate. - START is the address of the first byte in the area, page-aligned. - END is the address of the last byte in the area plus 1, page-aligned. Note that it may be 0 for the last area in the address space. If the callback returns 0, the iteration continues. If it returns 1, the iteration terminates prematurely. This function may open file descriptors, but does not call malloc(). Return 0 if all went well, or -1 in case of error. 
Name: init_pagesize; Comment: Initialize pagesize. 
Name: is_mapped; Comment: Test whether the page starting at ADDR is among the address range. ADDR must be a multiple of pagesize. 
Name: mapped_range_start; Comment: Assuming that the page starting at ADDR is among the address range, return the start of its virtual memory range. ADDR must be a multiple of pagesize. 
Name: mapped_range_end; Comment: Assuming that the page starting at ADDR is among the address range, return the end of its virtual memory range + 1. ADDR must be a multiple of pagesize. 
Name: is_unmapped; Comment: Determine whether an address range [ADDR1..ADDR2] is completely unmapped. ADDR1 must be <= ADDR2. 
Name: mincore_is_near_this; Comment: Info about the gap between this VMA and the previous one. addr must be < vma->start. 
Name: mincore_is_near_this; Comment: Info about the gap between this VMA and the next one. addr must be > vma->end - 1. 
Name: mquery_is_near_this; Comment: Info about the gap between this VMA and the previous one. addr must be < vma->start. 
Name: mquery_is_near_this; Comment: Info about the gap between this VMA and the next one. addr must be > vma->end - 1. 
Name: sigsegv_get_vma; Comment: AIX 
Name: vma_iterate; Comment: This code is a simplified copy (no handling of protection flags) of the code in gnulib's lib/vma-iter.c. 
Name: _gl_fstat_by_handle; Comment: Fill *BUF with information about the file designated by H. PATH is the file name, if known, otherwise NULL. Return 0 if successful, or -1 with errno set upon failure. 
Name: is_unc_root; Comment: Return TRUE if the given file name denotes an UNC root. 
Name: stdopen; Comment: Try to ensure that all of the standard file numbers (0, 1, 2) are in use. Without this, each application would have to guard every call to open, dup, fopen, etc. with tests to ensure they don't use one of the special file numbers when opening a file. Return zero if successful, an errno value if at least one of the file descriptors is initially closed and could not be opened. 
Name: strcasecmp; Comment: Compare strings S1 and S2, ignoring case, returning less than, equal to or greater than zero if S1 is lexicographically less than, equal to or greater than S2. Note: This function does not work with multibyte strings! 
Name: strncasecmp; Comment: Compare no more than N bytes of strings S1 and S2, ignoring case, returning less than, equal to or greater than zero if S1 is lexicographically less than, equal to or greater than S2. Note: This function cannot work correctly in multibyte locales. 
Name: strnlen; Comment: Find the length of STRING, but scan at most MAXLEN characters. If no '_0' terminator is found in that many characters, return MAXLEN. 
Name: day_of_the_week; Comment: Compute the day of the week. 
Name: day_of_the_year; Comment: Compute the day of the year. 
Name: strtol; Comment: External user entry point. 
Name: windows_createprocess_quote; Comment: Copies the quoted string to p and returns the number of bytes needed. If p is non-NULL, there must be room for system_quote_length (string) bytes at p. 
Name: windows_cmd_quote; Comment: Copies the quoted string to p and returns the number of bytes needed. If p is non-NULL, there must be room for system_quote_length (string) bytes at p. 
Name: save_abbr; Comment: Save into TZ any nontrivial time zone abbreviation used by TM, and update *TM (if HAVE_STRUCT_TM_TM_ZONE) or *TZ (if !HAVE_STRUCT_TM_TM_ZONE && HAVE_TZNAME) if they use the abbreviation. Return true if successful, false (setting errno) otherwise. 
Name: glwthread_waitqueue_add; Comment: Enqueues the current thread, represented by an event, in a wait queue. Returns INVALID_HANDLE_VALUE if an allocation failure occurs. 
Name: glwthread_waitqueue_notify_first; Comment: Notifies the first thread from a wait queue and dequeues it. 
Name: glwthread_waitqueue_notify_all; Comment: Notifies all threads from a wait queue and dequeues them all. 
Name: wmempcpy; Comment: Copy N wide characters of SRC to DEST. Return pointer to wide characters after the last written wide character. 
Name: xmalloc; Comment: Allocate S bytes of memory dynamically, with error checking. 
Name: xrealloc; Comment: Change the size of an allocated block of memory P to S bytes, with error checking. 
Name: xreallocarray; Comment: Change the size of an allocated block of memory P to an array of N objects each of S bytes, with error checking. 
Name: x2realloc; Comment: If P is null, allocate a block of at least *PS bytes; otherwise, reallocate P so that it contains more than *PS bytes. *PS must be nonzero unless P is null. Set *PS to the new block's size, and return the pointer to the new block. *PS is never set to zero, and the returned pointer is never null. 
Name: x2nrealloc; Comment: None } 
Name: xpalloc; Comment: Grow PA, which points to an array of *PN items, and return the location of the reallocated array, updating *PN to reflect its new size. The new array will contain at least N_INCR_MIN more items, but will not contain more than N_MAX items total. S is the size of each item, in bytes. S and N_INCR_MIN must be positive. *PN must be nonnegative. If N_MAX is -1, it is treated as if it were infinity. If PA is null, then allocate a new array instead of reallocating the old one. Thus, to grow an array A without saving its old contents, do { free (A); A = xpalloc (NULL, &AITEMS, ...); }. 
Name: ximemdup0; Comment: Clone an object P of size S, with error checking. Append a terminating NUL byte. 
Name: glthread_lock_init; Comment: -------------------------- gl_lock_t datatype -------------------------- 
Name: glthread_rwlock_init; Comment: ------------------------- gl_rwlock_t datatype ------------------------- 
Name: glthread_recursive_lock_init; Comment: --------------------- gl_recursive_lock_t datatype --------------------- 
Name: glthread_rwlock_init_for_glibc; Comment: glibc with bug https://sourceware.org/bugzilla/show_bug.cgi?id=13701 
Name: glthread_in_use; Comment: Test using pthread_key_create. 
Name: __attribute_nonnull__; Comment: Initialize a dynamic array object. This must be called before any use of the object. 
Name: __attribute_nonnull__; Comment: Deallocate the dynamic array and its elements. 
Name: __attribute_nonnull__; Comment: Mark the dynamic array as failed. All elements are deallocated as a side effect. 
Name: DYNARRAY_NAME; Comment: Internal function. Slow path for the add function below. 
Name: DYNARRAY_NAME; Comment: Internal function. Slow path for the emplace function below. 
Name: __attribute_nonnull__; Comment: Change the size of *LIST to SIZE. If SIZE is larger than the existing size, new elements are added (which can be initialized). Otherwise, the list is truncated, and elements are freed. Return false on memory allocation failure (and mark *LIST as failed). 
Name: __attribute_nonnull__; Comment: Remove the last element of LIST if it is present. 
Name: __attribute_nonnull__; Comment: Remove all elements from the list. The elements are freed, but the list itself is not. 
Name: __attribute_nonnull__; Comment: Transfer the dynamic array to a permanent location at *RESULT. Returns true on success on false on allocation failure. In either case, *LIST is re-initialized and can be reused. A NULL pointer is stored in *RESULT if LIST refers to an empty list. On success, the pointer in *RESULT is heap-allocated and must be deallocated using free. 
Name: __attribute_nonnull__; Comment: Transfer the dynamic array to a heap-allocated array and return a pointer to it. The pointer is NULL if memory allocation fails, or if the array is empty, so this function should be used only for arrays which are known not be empty (usually because they always have a sentinel at the end). If LENGTHP is not NULL, the array length is written to *LENGTHP. *LIST is re-initialized and can be reused. 
Name: discard_confusing_lines; Comment: None this is how the actual comparison algorithm produces results that are comprehensible when the discarded lines are counted. When we discard a line, we also mark it as a deletion or insertion so that it will be printed in the output. 
Name: shift_boundaries; Comment: Adjust inserts/deletes of identical lines to join changes as much as possible. We do something when a run of changed lines include a line at one end and have an excluded, identical line at the other. We are free to choose which identical line is included. 'compareseq' usually chooses the one at the beginning, but usually it is cleaner to consider the following identical line to be the "change". 
Name: add_change; Comment: Cons an additional entry onto the front of an edit script OLD. LINE0 and LINE1 are the first affected lines in the two files (origin 0). DELETED is the number of lines deleted here from file 0. INSERTED is the number of lines inserted here in file 1. If DELETED is 0 then LINE0 is the number of the line before which the insertion was done; vice versa for INSERTED and LINE1. 
Name: build_reverse_script; Comment: Scan the tables of which lines are inserted and deleted, producing an edit script in reverse order. 
Name: build_script; Comment: Scan the tables of which lines are inserted and deleted, producing an edit script in forward order. 
Name: briefly_report; Comment: If CHANGES, briefly report that two files differed. 
Name: diff_2_files; Comment: Report the differences of two files. 
Name: specify_ignore_initial; Comment: Update ignore_initial[F] according to the result of parsing an *operand ARGPTR of --ignore-initial, updating *ARGPTR to point *after the operand. If DELIMITER is nonzero, the operand may be *followed by DELIMITER; otherwise it must be null-terminated. 
Name: specify_comparison_type; Comment: Specify the output format. 
Name: cmp; Comment: Compare the two files already open on 'file_desc[0]' and 'file_desc[1]', using 'buffer[0]' and 'buffer[1]'. Return EXIT_SUCCESS if identical, EXIT_FAILURE if different, >1 if error. 
Name: block_compare; Comment: Compare two blocks of memory P0 and P1 until they differ. If the blocks are not guaranteed to be different, put sentinels at the ends of the blocks before calling this function. Return the offset of the first byte that differs. 
Name: count_newlines; Comment: Return the number of newlines in BUF, of size BUFSIZE, where BUF[NBYTES] is available for use as a sentinel. 
Name: sprintc; Comment: Put into BUF the unsigned char C, making unprintable bytes visible by quoting like cat -t does. 
Name: file_position; Comment: Position file F to ignore_initial[F] bytes from its initial position, and yield its new position. Don't try more than once. 
Name: print_context_label; Comment: Print a label for a context diff, with a file name and date or a label. 
Name: print_context_header; Comment: Print a header for a context diff, with the file names and dates. 
Name: print_context_script; Comment: Print an edit script in context format. 
Name: print_context_number_range; Comment: Print a pair of line numbers with a comma, translated for file FILE. If the second number is not greater, use the first in place of it. Args A and B are internal line numbers. We print the translated (real) line numbers. 
Name: print_context_function; Comment: Print FUNCTION in a context header. 
Name: pr_context_hunk; Comment: Print a portion of an edit script in context format. HUNK is the beginning of the portion to be printed. The end is marked by a 'link' that has been nulled out. Prints out lines from both files, and precedes each line with the appropriate flag-character. 
Name: print_unidiff_number_range; Comment: Print a pair of line numbers with a comma, translated for file FILE. If the second number is smaller, use the first in place of it. If the numbers are equal, print just one number. Args A and B are internal line numbers. We print the translated (real) line numbers. 
Name: pr_unidiff_hunk; Comment: Print a portion of an edit script in unidiff format. HUNK is the beginning of the portion to be printed. The end is marked by a 'link' that has been nulled out. Prints out lines from both files, and precedes each line with the appropriate flag-character. 
Name: find_hunk; Comment: Scan a (forward-ordered) edit script for the first place that more than 2*CONTEXT unchanged lines appear, and return a pointer to the 'struct change' for the last change before those lines. 
Name: mark_ignorable; Comment: Set the 'ignore' flag properly in each change in SCRIPT. It should be 1 if all the lines inserted or deleted in that change are ignorable lines. 
Name: find_function; Comment: Find the last function-header line in LINBUF prior to line number LINENUM. This is a line containing a match for the regexp in 'function_regexp'. Return the address of the text, or NULL if no function-header is found. 
Name: option_list; Comment: Return a string containing the command options with which diff was invoked. Spaces appear between what were separate ARGV-elements. There is a space at the beginning but none at the end. If there were no options, the result is an empty string. Arguments: OPTIONVEC, a vector containing separate ARGV-elements, and COUNT, the length of that vector. 
Name: exclude_options; Comment: Return an option value suitable for add_exclude. 
Name: add_regexp; Comment: Append to REGLIST the regexp PATTERN. 
Name: summarize_regexp_list; Comment: Ensure that REGLIST represents the disjunction of its regexps. This is done here, rather than earlier, to avoid O(N^2) behavior. 
Name: specify_value; Comment: Set VAR to VALUE, reporting an OPTION error if this is a conflict. 
Name: specify_style; Comment: Set the output style to STYLE, diagnosing conflicts. 
Name: specify_colors_style; Comment: Set the color mode. 
Name: set_mtime_to_now; Comment: Set the last-modified time of *ST to be the current time. 
Name: compare_files; Comment: Compare two files (or dirs) with parent comparison PARENT and names NAME0 and NAME1. (If PARENT is null, then the first name is just NAME0, etc.) This is self-contained; it opens the files and closes them. Value is EXIT_SUCCESS if files are the same, EXIT_FAILURE if different, EXIT_TROUBLE if there is a problem opening them. 
Name: next_to_n2; Comment: Copy each next pointer to n2, since make_3way_diff would clobber the former, yet we will still need something to free these buffers. 
Name: make_3way_diff; Comment: Make a three way diff (chain of diff3_block's) from two two way diffs (chains of diff_block's). Assume that each of the two diffs passed are onto the same file (i.e. that each of the diffs were made "to" the same file). Return a three way diff pointer with numbering FILE0 = the other file in diff02, FILE1 = the other file in diff12, and FILEC = the common file. 
Name: using_to_diff3_block; Comment: None they could be derived from the using array. LAST_USING is a pair of pointers to the last blocks in the using structure. LOW_THREAD and HIGH_THREAD tell which threads contain the lowest and highest line numbers for File0. LAST_DIFF3 contains the last diff produced in the calling routine. This is used for lines mappings that would still be identical to the state that diff ended in. A distinction should be made in this routine between the two diffs that are part of a normal two diff block, and the three diffs that are part of a diff3_block. 
Name: copy_stringlist; Comment: Copy pointers from a list of strings to a different list of strings. If a spot in the second list is already filled, make sure that it is filled with the same string; if not, return false, the copy incomplete. Upon successful completion of the copy, return true. 
Name: create_diff3_block; Comment: Create a diff3_block, with ranges as specified in the arguments. Allocate the arrays for the various pointers (and zero them) based on the arguments passed. Return the block as a result. 
Name: compare_line_list; Comment: Compare two lists of lines of text. Return 1 if they are equivalent, 0 if not. 
Name: process_diff; Comment: Input and parse two way diffs. 
Name: skipwhite; Comment: Skip tabs and spaces, and return the first character after them. 
Name: readnum; Comment: Read a nonnegative line number from S, returning the address of the first character after the line number, and storing the number into *PNUM. Return 0 if S does not point to a valid line number. 
Name: process_diff_control; Comment: Parse a normal format diff control string. Return the type of the diff (ERROR if the format is bad). All of the other important information is filled into to the structure pointed to by db, and the string pointer (whose location is passed to this routine) is updated to point beyond the end of the string parsed. Note that only the ranges in the diff_block will be set by this routine. If some specific pair of numbers has been reduced to a single number, then both corresponding numbers in the diff block are set to that number. In general these numbers are interpreted as ranges inclusive, unless being used by the ADD or DELETE commands. It is assumed that these will be special cased in a superior routine. 
Name: scan_diff_line; Comment: Scan a regular diff line (consisting of > or <, followed by a space, followed by text (including nulls) up to a newline. This next routine began life as a macro and many parameters in it are used as call-by-reference values. 
Name: output_diff3; Comment: Output a three way diff passed as a list of diff3_block's. The argument MAPPING is indexed by external file number (in the argument list) and contains the internal file number (from the diff passed). This is important because the user expects outputs in terms of the argument list number, and the diff passed may have been done slightly differently (if the last argument was "-", for example). REV_MAPPING is the inverse of MAPPING. 
Name: dotlines; Comment: Output to OUTPUTFILE the lines of B taken from FILENUM. Double any initial '.'s; yield nonzero if any initial '.'s were doubled. 
Name: undotlines; Comment: Output to OUTPUTFILE a '.' line. If LEADING_DOT is true, also output a command that removes initial '.'s starting with line START and continuing for NUM lines. 
Name: output_diff3_edscript; Comment: Output a diff3 set of blocks as an ed script. This script applies the changes between file's 2 & 3 to file 1. Take the precise format of the ed script to be output from global variables set during options processing. Reverse the order of the set of diff3 blocks in DIFF; this gets around the problems involved with changing line numbers in an ed script. As in 'output_diff3', the variable MAPPING maps from file number according to the argument list to file number according to the diff passed. All files listed below are in terms of the argument list. REV_MAPPING is the inverse of MAPPING. FILE0, FILE1 and FILE2 are the strings to print as the names of the three files. These may be the actual names, or may be the arguments specified with -L. Return 1 if conflicts were found. 
Name: output_diff3_merge; Comment: Read from INFILE and output to OUTPUTFILE a set of diff3_blocks DIFF as a merged file. This acts like 'ed file0 <[output_diff3_edscript]', except that it works even for binary data or incomplete lines. As before, MAPPING maps from arg list file number to diff file number, REV_MAPPING is its inverse, and FILE0, FILE1, and FILE2 are the names of the files. Return 1 if conflicts were found. 
Name: reverse_diff3_blocklist; Comment: Reverse the order of the list of diff3 blocks. 
Name: dir_read; Comment: Read a directory and get its vector of names. 
Name: compare_collated; Comment: Compare strings in a locale-specific way, returning a value compatible with strcmp. 
Name: compare_names; Comment: Compare file names, returning a value compatible with strcmp. 
Name: compare_names_for_qsort; Comment: Compare names FILE1 and FILE2 when sorting a directory. Prefer filtered comparison, breaking ties with file_name_cmp. 
Name: diff_dirs; Comment: Compare the contents of two directories named in CMP. This is a top-level routine; it does everything necessary for diff on two directories. CMP->file[0].desc == -1 says directory CMP->file[0] doesn't exist, but pretend it is empty. Likewise for CMP->file[1]. HANDLE_FILE is a caller-provided subroutine called to handle each file. It gets three operands: CMP, name of file in dir 0, name of file in dir 1. These names are relative to the original working directory. For a file that appears in only one of the dirs, one of the name-args to HANDLE_FILE is zero. Returns the maximum of all the values returned by HANDLE_FILE, or EXIT_TROUBLE if trouble is encountered in opening files. 
Name: dir_loop; Comment: Return nonzero if CMP is looping recursively in argument I. 
Name: find_dir_file_pathname; Comment: Find a matching filename in a directory. 
Name: print_ed_script; Comment: Print our script as ed commands. 
Name: print_ed_hunk; Comment: Print a hunk of an ed diff 
Name: pr_forward_ed_script; Comment: Print change script in the style of ed commands, but print the changes in the order they appear in the input files, which means that the commands are not truly useful with ed. Because of the issue with lines containing just a dot, the output is not even parseable. 
Name: print_rcs_script; Comment: Print in a format somewhat like ed commands except that each insert command states the number of lines it inserts. This format is used for RCS. 
Name: print_rcs_hunk; Comment: Print a hunk of an RCS diff 
Name: print_ifdef_script; Comment: Print the edit-script SCRIPT as a merged #ifdef file. 
Name: print_ifdef_hunk; Comment: Print a hunk of an ifdef diff. This is a contiguous portion of a complete edit script, describing changes in consecutive lines. 
Name: format_ifdef; Comment: None lines BEG1 up to END1 are from the second file. 
Name: format_group; Comment: Print to file OUT a set of lines according to FORMAT. The format ends at the first free instance of ENDCHAR. Yield the address of the terminating character. GROUPS specifies which lines to print. If OUT is zero, do not actually print anything; just scan the format. 
Name: groups_letter_value; Comment: For the line group pair G, return the number corresponding to LETTER. Return -1 if LETTER is not a group format letter. 
Name: print_ifdef_lines; Comment: Print to file OUT, using FORMAT to print the line group GROUP. But do nothing if OUT is zero. 
Name: scan_char_literal; Comment: Scan the character literal represented in the string LIT; LIT points just after the initial apostrophe. Put the literal's value into *VALPTR. Yield the address of the first character after the closing apostrophe, or a null pointer if the literal is ill-formed. 
Name: file_block_read; Comment: Read a block of data into a file buffer, checking for EOF and error. 
Name: sip; Comment: Get ready to read the current file. Return nonzero if SKIP_TEST is zero, and if it appears to be a binary file. 
Name: slurp; Comment: Slurp the rest of the current file completely into memory. 
Name: find_and_hash_each_line; Comment: Split the file into lines, simultaneously computing the equivalence class for each line. 
Name: prepare_text; Comment: Prepare the text. Make sure the text end is initialized. Make sure text ends in a newline, but remember that we had to add one. Strip trailing CRs, if that was requested. 
Name: guess_lines; Comment: We have found N lines in a buffer of size S; guess the proportionate number of lines that will be found in a buffer of size T. However, do not guess a number of lines so large that the resulting line table might cause overflow in size calculations. 
Name: find_identical_ends; Comment: Given a vector of two file_data objects, find the identical prefixes and suffixes of each object. 
Name: read_files; Comment: Given a vector of two file_data objects, read the file associated with each one, and build the table of equivalence classes. Return nonzero if either file appears to be a binary file. If PRETEND_BINARY is nonzero, pretend they are binary regardless. 
Name: print_normal_script; Comment: Print the edit-script SCRIPT as a normal diff. INF points to an array of descriptions of the two files. 
Name: print_normal_hunk; Comment: Print a hunk of a normal diff. This is a contiguous portion of a complete edit script, describing changes in consecutive lines. 
Name: cleanup; Comment: Clean up after a signal or other failure. This function is async-signal-safe. 
Name: lf_refill; Comment: Fill an exhausted line_filter buffer from its INFILE 
Name: lf_copy; Comment: Advance LINES on LF's infile, copying lines to OUTFILE 
Name: lf_skip; Comment: Advance LINES on LF's infile without doing output 
Name: lf_snarf; Comment: Snarf a line into a buffer. Return EOF if EOF, 0 if error, 1 if OK. 
Name: untrapsig; Comment: Untrap signal S, or all trapped signals if S is zero. 
Name: checksigs; Comment: Exit if a signal has been received. 
Name: edit; Comment: interpret an edit command 
Name: interact; Comment: Alternately reveal bursts of diff output and handle user commands. 
Name: diraccess; Comment: Return true if DIR is an existing directory. 
Name: temporary_file; Comment: Open a temporary file and return its file descriptor. Put into tmpname the address of a newly allocated buffer that holds the file's name. Use the prefix "sdiff". 
Name: print_sdiff_script; Comment: Print the edit-script SCRIPT as a sdiff style output. 
Name: tab_from_to; Comment: Tab from column FROM to column TO, where FROM <= TO. Yield TO. 
Name: print_half_line; Comment: Print the text for half an sdiff line. This means truncate to width observing tabs, and trim a trailing newline. Return the last column written (not the number of chars). 
Name: print_1sdiff_line; Comment: Print side by side lines with a separator in the middle. 0 parameters are taken to indicate white space text. Blank lines that can easily be caught are reduced to a single newline. 
Name: print_sdiff_common_lines; Comment: Print lines common to both files in side-by-side format. 
Name: print_sdiff_hunk; Comment: Print a hunk of an sdiff diff. This is a contiguous portion of a complete edit script, describing changes in consecutive lines. 
Name: perror_with_name; Comment: Use when a system call returns non-zero status. NAME should normally be the file name. 
Name: pfatal_with_name; Comment: Use when a system call returns non-zero status and that is fatal. 
Name: fatal; Comment: Print an error message containing MSGID, then exit. 
Name: message; Comment: Like printf, except if -l in effect then save the message and print later. This is used for things like "Only in ...". 
Name: print_message_queue; Comment: Output all the messages that were saved up by calls to 'message'. 
Name: get_funky_string; Comment: Parse a string as part of the --palette argument; this may involve decoding all kinds of escape characters. If equals_end is set an unescaped equal sign ends the string, otherwise only a : or _0 does. Set OUTPUT_COUNT to the number of bytes output. Return true if successful. The resulting string is not null-terminated, but may contain embedded nulls. Note that both dest and src are char ; on return they point to the first free byte after the array and the character that ended the input string, respectively. 
Name: setup_output; Comment: Call before outputting the results of comparing files NAME0 and NAME1 to set up OUTFILE, the stdio stream for the output to go to. Usually, OUTFILE is just stdout. But when -l was specified we fork off a 'pr' and make OUTFILE a pipe to it. 'pr' then outputs to our stdout. 
Name: finish_output; Comment: Call after the end of output of diffs for one file. Close OUTFILE and get rid of the 'pr' subfork. 
Name: lines_differ; Comment: Compare two lines (typically one from each input file) according to the command line options. For efficiency, this is invoked only when the lines do not match exactly but an option like -i might cause us to ignore the difference. Return nonzero if the lines differ. 
Name: find_change; Comment: Find the consecutive changes at the start of the script START. Return the last link before the first gap. 
Name: print_script; Comment: Divide SCRIPT into pieces by calling HUNKFUN and print each piece with PRINTFUN. Both functions take one arg, an edit script. HUNKFUN is called with the tail of the script and returns the last link that belongs together with the start of the tail. PRINTFUN takes a subscript which belongs together (with a null link at the end) and prints it. 
Name: print_1_line; Comment: Print the text of a single line LINE, flagging it with the characters in LINE_FLAG (which say whether the line is inserted, deleted, changed, etc.). LINE_FLAG must not end in a blank, unless it is a single blank. 
Name: print_1_line_nl; Comment: Print the text of a single line LINE, flagging it with the characters in LINE_FLAG (which say whether the line is inserted, deleted, changed, etc.). LINE_FLAG must not end in a blank, unless it is a single blank. If SKIP_NL is set, then the final '_n' is not printed. 
Name: output_1_line; Comment: Output a line from BASE up to LIMIT. With -t, expand white space characters to spaces, and if FLAG_FORMAT is nonzero, output it with argument LINE_FLAG after every internal carriage return, so that tab stops continue to line up. 
Name: translate_line_number; Comment: Translate an internal line number (an index into diff's table of lines) into an actual line number in the input file. The internal line number is I. FILE points to the data on the file. Internal line numbers count from 0 starting after the prefix. Actual line numbers count from 1 within the entire file. 
Name: translate_range; Comment: Translate a line number range. This is always done for printing, so for convenience translate to printint rather than lin, so that the caller can use printf with "%"pI"d" without casting. 
Name: print_number_range; Comment: Print a pair of line numbers with SEPCHAR, translated for file FILE. If the two numbers are identical, print just one number. Args A and B are internal line numbers. We print the translated (real) line numbers. 
Name: analyze_hunk; Comment: Look at a hunk of edit script and report the range of lines in each file that it applies to. HUNK is the start of the hunk, which is a chain of 'struct change'. The first and last line numbers of file 0 are stored in *FIRST0 and *LAST0, and likewise for file 1 in *FIRST1 and *LAST1. Note that these are internal line numbers that count from 0. If no lines from file 0 are deleted, then FIRST0 is LAST0+1. Return UNCHANGED if only ignorable lines are inserted or deleted, OLD if lines of file 0 are deleted, NEW if lines of file 1 are inserted, and CHANGED if both kinds of changes are found. 
Name: concat; Comment: Concatenate three strings, returning a newly malloc'd string. 
Name: zalloc; Comment: Yield a new block of SIZE bytes, initialized to zero. 
Name: initialize_wd_for_exec; Comment: Initialize exec->wd_for_exec. We save in exec->wd_for_exec the directory whose path relative to cwd_df is dir. 
Name: prep_child_for_exec; Comment: 1) fork to get a child; parent remembers the child pid 2) child execs the command requested 3) parent waits for child; checks for proper pid of child Possible returns: ret__errno_status(h) status(l) pid__x_signal#_ 0177_stopped pid__x_exit arg 0__term by _exit pid__x_0_ signal #_term by signal -1__EINTR____parent got signal -1__other____some other kind of error Return true only if the pid matches, status(l) is zero, and the exit arg (status high) is 0. Otherwise return false, possibly printing an error message. 
Name: get_file_system_list; Comment: Read the mount list into a static cache, and return it. This is a wrapper around gnulib's read_file_system_list () to avoid unnecessary reading of the mount list. 
Name: filesystem_type; Comment: Return a static string naming the type of file system that the file PATH, described by STATP, is on. RELPATH is the file name relative to the current directory. Return "unknown" if its file system type is unknown. 
Name: file_system_type_uncached; Comment: Return a newly allocated string naming the type of file system that the file PATH, described by STATP, is on. RELPATH is the file name relative to the current directory. Return "unknown" if its file system type is unknown. 
Name: inside_dir; Comment: Signal that we are now inside a directory pointed to by dir_fd. The caller can't tell if this is the first time this happens, so we have to be careful not to call dup() more than once 
Name: issue_loop_warning; Comment: We've detected a file system loop. This is caused by one oftwo things: 1. Option -L is in effect and we've hit a symbolic link that points to an ancestor. This is harmless. We won't traverse the symbolic link. 2. We have hit a real cycle in the directory hierarchy. In this case, we issue a diagnostic message (POSIX requires this) and we skip that directory entry. 
Name: symlink_loop; Comment: Return true if NAME corresponds to a file which forms part of a symbolic link loop. The command rm -f a b; ln -s a b; ln -s b aproduces such a loop. 
Name: type_to_mode; Comment: Convert the value of struct dirent.d_type into a value forstruct stat.st_mode (at least the file type bits), or zero if the type is DT_UNKNOWN or is a value we don't know about. 
Name: main; Comment: CAUTION: this is the entry point for the oldfind executable, which is not the binary thatwill actually get installed. See ftsfind.c. 
Name: fs_likely_to_be_automounted; Comment: Return non-zero if FS is the name of a file system that is likely tobe automounted 
Name: dev_present; Comment: Search for device DEV in the array LIST, which is of size N. 
Name: dirchange_is_fatal; Comment: We stat()ed a directory, chdir()ed into it (we know thissince direction is TraversingDown), stat()ed it again, and noticed that the device numbers are different. Check if the file system was recently mounted. If it was, it looks like chdir()ing into the directory caused a file system to be mounted. Maybe automount is running. Anyway, that's probably OK - but it happens only when we are moving downward. We also allow for the possibility that a similar thing has happened with the unmounting of a file system. This is much rarer, as it relies on an automounter timeout occurring at exactly the wrong moment. 
Name: safely_chdir_lstat; Comment: Safely perform a change in directory. We do this by callinglstat() on the subdirectory, using chdir() to move into it, and then lstat()ing ".". We compare the results of the two stat calls to see if they are consistent. If not, we sound the alarm. If following_links() is true, we do follow symbolic links. 
Name: safely_chdir_nofollow; Comment: Safely change working directory to the specified subdirectory. Ifwe are not allowed to follow symbolic links, we use open() with O_NOFOLLOW, followed by fchdir(). This ensures that we don't follow symbolic links (of course, we do follow them if the -L option is in effect). 
Name: chdir_back; Comment: Safely go back to the starting directory. 
Name: at_top; Comment: Move to the parent of a given directory and then call a function,restoring the cwd. Don't bother changing directory if the specified directory is a child of "." or is the root directory. 
Name: process_top_path; Comment: Descend PATHNAME, which is a command-line argument. Actions like -execdir assume that we are in the parent directory of the file we're examining, and on entry to this function our working directory is whatever it was when find was invoked. Therefore If PATHNAME is "." we just leave things as they are. Otherwise, we figure out what the parent directory is, and move to that. 
Name: process_path; Comment: Recursively descend path PATHNAME, applying the predicates. LEAF is true if PATHNAME is known to be in a directory that has no more unexamined subdirectories, and therefore it is not a directory. Knowing this allows us to avoid calling stat as long as possible for leaf files. NAME is PATHNAME relative to the current directory. We access NAME but print PATHNAME. PARENT is the path of the parent of NAME, relative to find's starting directory. Return nonzero iff PATHNAME is a directory. 
Name: process_dir; Comment: Scan directory PATHNAME and recurse through process_path for each entry. PATHLEN is the length of PATHNAME. NAME is PATHNAME relative to the current directory. STATP is the results of *options.xstat on it. PARENT is the path of the parent of NAME, relative to find's starting directory. 
Name: optionh_getfilecon; Comment: optionh_getfilecon () implements the getfilecon operation when the-H option is in effect. If the item to be examined is a command-line argument, we follow symbolic links. If the getfilecon () call fails on the command-line item, we fall back on the properties of the symbolic link. If the item to be examined is not a command-line argument, we examine the link itself. 
Name: optionl_getfilecon; Comment: optionl_getfilecon () implements the getfilecon operation when the-L option is in effect. That option makes us examine the thing the symbolic link points to, not the symbolic link itself. 
Name: optionp_getfilecon; Comment: optionp_getfilecon () implements the stat operation when the -Poption is in effect (this is also the default). That option makes us examine the symbolic link itself, not the thing it points to. 
Name: found_parser; Comment: Check that it is legal to find the given primary in itsposition and return it. 
Name: find_parser; Comment: Return a pointer to the parser function to invoke for predicate SEARCH_NAME. Return NULL if SEARCH_NAME is not a valid predicate name. 
Name: collect_arg_nonconst; Comment: Collect an argument from the argument list, orreturn false. 
Name: parse_and; Comment: The parsers are responsible to continue scanning ARGV for their arguments. Each parser knows what is and isn't allowed for itself. ARGV is the argument array. *ARG_PTR is the index to start at in ARGV, updated to point beyond the last element consumed. The predicate structure is updated with the new information. 
Name: fnmatch_sanitycheck; Comment: sanity check the fnmatch() function to make sure that case foldingis supported (as opposed to just having the flag ignored). 
Name: parse_path; Comment: For some time, -path was deprecated (at RMS's request) in favour of-iwholename. See the node "GNU Manuals" in standards.texi for the rationale for this (basically, GNU prefers the use of the phrase "file name" to "path name". We do not issue a warning that this usage is deprecated since it is standardized since POSIX 2008. 
Name: parse_ipath; Comment: -ipath was deprecated (at RMS's request) in favour of-iwholename. See the node "GNU Manuals" in standards.texi for the rationale for this (basically, GNU prefers the use of the phrase "file name" to "path name". However, -path is now standardised so I un-deprecated -ipath. 
Name: parse_show_control_chars; Comment: This function is commented out partly because support for it isuneven. 
Name: stream_is_tty; Comment: Return true if the file accessed via FP is a terminal. 
Name: insert_exec_ok; Comment: handles both exec and ok predicate 
Name: get_relative_timestamp; Comment: Get a timestamp and comparison type. STR is the ASCII representation. Set *NUM_DAYS to the number of days/minutes/whatever, taken as being relative to ORIGIN (usually the current moment or midnight). Thus the sense of the comparison type appears to be reversed. Set *COMP_TYPE to the kind of comparison that is requested. Issue OVERFLOWMESSAGE if overflow occurs. Return true if all okay, false if input error. Used by -atime, -ctime and -mtime (parsers) to get the appropriate information for a time predicate processor. 
Name: parse_time; Comment: Insert a time predicate based on the information in ENTRY. ARGV is a pointer to the argument array. ARG_PTR is a pointer to an index into the array, incremented if all went well. Return true if input is valid, false if not. A new predicate node is assigned, along with an argument node obtained with malloc. Used by -atime, -ctime, and -mtime parsers. 
Name: get_comp_type; Comment: Get the comparison type prefix (if any) from a number argument. The prefix is at *STR. Set *COMP_TYPE to the kind of comparison that is requested. Advance *STR beyond any initial comparison prefix. Return true if all okay, false if input error. 
Name: get_num; Comment: Get a number with comparison information. The sense of the comparison information is 'normal'; that is, '+' looks for a count > than the number and '-' less than. STR is the ASCII representation of the number. Set *NUM to the number. Set *COMP_TYPE to the kind of comparison that is requested. Return true if all okay, false if input error. 
Name: insert_num; Comment: Insert a number predicate. ARGV is a pointer to the argument array. *ARG_PTR is an index into ARGV, incremented if all went well. *PRED is the predicate processor to insert. Return true if input is valid, false if error. A new predicate node is assigned, along with an argument node obtained with malloc. Used by -inum and -links parsers. 
Name: ts_difference; Comment: Returns ts1 - ts2 
Name: pred_timewindow; Comment: pred_timewindowReturns true if THE_TIME is COMP_GT: after the specified time COMP_LT: before the specified time COMP_EQ: after the specified time but by not more than WINDOW seconds. 
Name: pred_name_common; Comment: Common code between -name, -iname. PATHNAME is being visited, STR is name to compare basename against, and FLAGS are passed to fnmatch. Recall that 'find / -name /' is one of the few times where a '/' in the -name must actually find something. 
Name: blank_rtrim; Comment: Copy STR into BUF and trim blanks from the end of BUF. Return BUF. 
Name: print_list; Comment: Print out the predicate list starting at NODE. 
Name: print_parenthesised; Comment: Print out the predicate list starting at NODE. 
Name: pred_sanity_check; Comment: If _NDEBUG is defined, the assertions will do nothing. Hencethere is no point in having a function body for pred_sanity_check() if that preprocessor macro is defined. 
Name: make_segment; Comment: Create a new fprintf segment in *SEGMENT, with type KIND, from the text in FORMAT, which has length LEN. Return the address of the `next' pointer of the new segment. 
Name: matches_start_point; Comment: Return true if the indicated path name is a start point or not. If no start points were given on the command line, we return true for ".". 
Name: get_expr; Comment: Return a pointer to a tree that represents the expression prior to non-unary operator *INPUT. Set *INPUT to point at the next input predicate node. Only accepts the following: <primary> expression__[operators of higher precedence] <uni_op><primary> (arbitrary expression) <uni_op>(arbitrary expression) In other words, you cannot start out with a bi_op or close_paren. If the following operator (if any) is of a higher precedence than PREV_PREC, the expression just nabbed is part of a following expression, which really is the expression that should be handed to our caller, so get_expr recurses. 
Name: scan_rest; Comment: Scan across the remainder of a predicate input list starting at *INPUT, building the rest of the expression tree to return. Stop at the first close parenthesis or the end of the input list. Assumes that get_expr has been called to nab the first element of the expression tree. *INPUT points to the current input predicate list element. It is updated as we move along the list to point to the terminating input element. HEAD points to the predicate element that was obtained by the call to get_expr. PREV_PREC is the precedence of the previous predicate element. 
Name: predicate_is_cost_free; Comment: Returns true if the specified predicate is reorderable. 
Name: print_predicate; Comment: Prints a predicate 
Name: consider_arm_swap; Comment: Consider swapping p->pred_left->pred_right with p->pred_right,if that yields a faster evaluation. Normally the left predicate is evaluated first. If the operation is an OR, we want the left predicate to be the one that succeeds most often. If it is an AND, we want it to be the predicate that fails most often. We don't consider swapping arms of an operator where their cost is different or where they have side effects. A viable test case for this is ./find -D opt -O3 . _! -type f -o -type d Here, the ! -type f should be evaluated first, as we assume that 95% of inodes are vanilla files. 
Name: opt_expr; Comment: None the predicates are divided into 1 or more groups separated by predicates (if any) which have "side effects", such as printing. The grouping implements the partial ordering on predicates which those with side effects impose. Place -name, -iname, -path, -ipath, -regex and -iregex at the front of a group, with -name, -iname, -path and -ipath ahead of -regex and -iregex. Predicates which are moved to the front of a group by definition do not have side effects. Both -regex and -iregex both use pred_regex. If higher optimisation levels have been selected, reordering also occurs according to the p_cost member of each predicate (which reflects the performance cost of the test). The ordering also bears in mind whether these operations are more likely to succeed or fail. When evaluating a chain of OR conditions, we prefer tests likely to succeed at the front of the list. For AND, we prefer tests likely to fail at the front of the list. This routine "normalizes" the predicate tree by ensuring that all expression predicates have 'AND' (or 'OR' or 'COMMA') parent nodes which are linked along the left edge of the expression tree. This makes manipulation of subtrees easier. EVAL_TREEP points to the root pointer of the predicate tree to be rearranged. opt_expr may return a new root pointer there. Return true if the tree contains side effects, false if not. 
Name: set_new_parent; Comment: Link in a new parent BI_OP node for CURR, at *PREVP, with precedence HIGH_PREC. 
Name: merge_pred; Comment: Merge the predicate list that starts at BEG_LIST and ends at END_LIST into the tree at LAST_P. 
Name: check_normalization; Comment: opt_expr() rearranges predicates such that each left subtree isrooted at a logical predicate (e.g. '-a' or '-o'). check_normalization() asserts that this property still holds. 
Name: init_pred_perf; Comment: Initialize the performance data for a predicate. 
Name: get_new_pred; Comment: Return a pointer to a new predicate structure, which has been linked in as the last one in the predicates list. Set `predicates' to point to the start of the predicates list. Set `last_pred' to point to the new last predicate in the list. Set all cells in the new structure to the default values. 
Name: get_new_pred_chk_op; Comment: Return a pointer to a new predicate, with operator check. Like get_new_pred, but it checks to make sure that the previous predicate is an operator. If it isn't, the AND operator is inserted. 
Name: print_tree; Comment: Walk the expression tree NODE to stdout. INDENT is the number of levels to indent the left margin. 
Name: insert_primary_withpred; Comment: Add a primary of predicate type PRED_FUNC (described by ENTRY) to the predicate input list. Return a pointer to the predicate node just inserted. Fills in the following cells of the new predicate node: pred_func_ PRED_FUNC args(.str)_ NULL p_type_ PRIMARY_TYPE p_prec_ NO_PREC Other cells that need to be filled in are defaulted by get_new_pred_chk_op, which is used to ensure that the prior node is either not there at all (we are the very first node) or is an operator. 
Name: insert_primary; Comment: Add a primary described by ENTRY to the predicate input list. Return a pointer to the predicate node just inserted. Fills in the following cells of the new predicate node: pred_func_ PRED_FUNC args(.str)_ NULL p_type_ PRIMARY_TYPE p_prec_ NO_PREC Other cells that need to be filled in are defaulted by get_new_pred_chk_op, which is used to insure that the prior node is either not there at all (we are the very first node) or is an operator. 
Name: get_statinfo; Comment: Get the stat information for a file, if it isnot already known. Returns 0 on success. 
Name: get_info; Comment: Get the stat/type/inode information for a file, if it is notalready known. Returns 0 on success (or if we did nothing). 
Name: do_complete_pending_execdirs; Comment: Examine the predicate list for instances of -execdir or -okdir which have been terminated with '+' (build argument list) rather than ';' (singles only). If there are any, run them (this willhave no effect if there are no arguments waiting). 
Name: complete_pending_execs; Comment: Examine the predicate list for instances of -exec which have been terminated with '+' (build argument list) rather than ';' (singlesonly). If there are any, run them (this will have no effect if there are no arguments waiting). 
Name: undangle_file_pointers; Comment: After sharefile_destroy is called, our output filepointers will be dangling (fclose will already have been called on them). NULL these out. 
Name: cleanup; Comment: Complete any outstanding commands.Flush and close any open files. 
Name: optionh_stat; Comment: optionh_stat() implements the stat operation when the -H option isin effect. If the item to be examined is a command-line argument, we follow symbolic links. If the stat() call fails on the command-line item, we fall back on the properties of the symbolic link. If the item to be examined is not a command-line argument, we examine the link itself. 
Name: optionl_stat; Comment: optionl_stat() implements the stat operation when the -L option isin effect. That option makes us examine the thing the symbolic link points to, not the symbolic link itself. 
Name: optionp_stat; Comment: optionp_stat() implements the stat operation when the -P option isin effect (this is also the default). That option makes us examine the symbolic link itself, not the thing it points to. 
Name: digest_mode; Comment: Take a "mode" indicator and fill in the files of 'state'. 
Name: default_prints; Comment: Return true if there are no predicates with no_default_print in predicate list PRED, false if there are any. Returns true if default print should be performed 
Name: apply_predicate; Comment: apply_predicate 
Name: is_exec_in_local_dir; Comment: is_exec_in_local_dir 
Name: safely_quote_err_filename; Comment: safely_quote_err_filename 
Name: error_severity; Comment: We have encountered an error which should affect the exit status.This is normally used to change the exit status from 0 to 1. However, if the exit status is already 2 for example, we don't want to reduce it to 1. 
Name: report_file_err; Comment: report_file_err 
Name: nonfatal_target_file_error; Comment: nonfatal_target_file_error 
Name: fatal_target_file_error; Comment: fatal_target_file_errorReport an error on a target file (i.e. a file we are searching). Such errors are only reported once per searched file. 
Name: nonfatal_nontarget_file_error; Comment: nonfatal_nontarget_file_error 
Name: fatal_nontarget_file_error; Comment: fatal_nontarget_file_error 
Name: c_strcasestr; Comment: Find the first occurrence of NEEDLE in HAYSTACK, using case-insensitive comparison from the C locale, regardless of the current locale. 
Name: c_strstr; Comment: Find the first occurrence of NEEDLE in HAYSTACK. 
Name: file_accessible; Comment: Return true if FILE's existence can be shown, false (setting errno) otherwise. Follow symbolic links. 
Name: suffix_requires_dir_check; Comment: True if concatenating END as a suffix to a file name means that the code needs to check that the file name is that of a searchable directory, since the canonicalize_filename_mode_stk code won't check this later anyway when it checks an ordinary file name component within END. END must either be empty, or start with a slash. 
Name: dir_check; Comment: Return true if DIR is a searchable dir, false (setting errno) otherwise. DIREND points to the NUL byte at the end of the DIR string. Store garbage into DIREND[0 .. strlen (dir_suffix)]. 
Name: get_name; Comment: Return an absolute name of DIR in malloc'd storage. Upon failure, return NULL with errno set. 
Name: _gl_register_fd; Comment: Mark FD as visiting FILENAME. FD must be non-negative, and refer to an open file descriptor. If REPLACE_OPEN_DIRECTORY is non-zero, this should only be called if FD is visiting a directory. Close FD and return -1 with errno set if there is insufficient memory to track the directory name; otherwise return FD. 
Name: disable_seek_optimization; Comment: FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin, Minix 3, Android 
Name: filemodestring; Comment: filemodestring - fill in string STR with an ls-style ASCII representation of the st_mode field of file stats block STATP. 12 characters are stored in STR. The characters stored in STR are: 0 File type, as in ftypelet above, except that other letters are used for files whose type cannot be determined solely from st_mode: 'F' semaphore 'Q' message queue 'S' shared memory object 'T' typed memory object 1 'r' if the owner may read, '-' otherwise. 2 'w' if the owner may write, '-' otherwise. 3 'x' if the owner may execute, 's' if the file is set-user-id, '-' otherwise. 'S' if the file is set-user-id, but the execute bit isn't set. 4 'r' if group members may read, '-' otherwise. 5 'w' if group members may write, '-' otherwise. 6 'x' if group members may execute, 's' if the file is set-group-id, '-' otherwise. 'S' if it is set-group-id but not executable. 7 'r' if any user may read, '-' otherwise. 8 'w' if any user may write, '-' otherwise. 9 'x' if any user may execute, 't' if the file is "sticky" (will be retained in swap space after execution), '-' otherwise. 'T' if the file is sticky but not executable. 10 ' ' for compatibility with 4.4BSD strmode, since this interface does not support ACLs. 11 '_0'. 
Name: freadahead; Comment: This file is not used on systems that have the __freadahead function, namely musl libc. 
Name: __getcwd_generic; Comment: Get the name of the current working directory, and put it in SIZE bytes of BUF. Returns NULL with errno set if the directory couldn't be determined or SIZE was too small. If successful, returns BUF. In GNU, if BUF is NULL, an array is allocated with 'malloc'; the array is SIZE bytes long, unless SIZE == 0, in which case it is as big as necessary. 
Name: rpl_getgroups; Comment: On at least NeXTstep 3.2, getgroups (0, NULL) always fails. On other systems, it returns the number of supplemental groups for the process. This function handles that special case and lets the system-provided function handle all others. However, it can fail with ENOMEM if memory is tight. It is unspecified whether the effective group id is included in the list. 
Name: triple_compare_ino_str; Comment: Compare two F_triple structs. 
Name: gl_isinff; Comment: Written by Ben Pfaff <blp@gnu.org>, 2008. 
Name: mbscasestr; Comment: Find the first occurrence of the character string NEEDLE in the character string HAYSTACK, using case-insensitive comparison. Note: This function may, in multibyte locales, return success even if strlen (haystack) < strlen (needle) ! 
Name: terminate_at_blank; Comment: Find the next space in STR, terminate the string there in place, and return that position. Otherwise return NULL. 
Name: my_strftime; Comment: Write information from TP into S according to the format string FORMAT, writing no more that MAXSIZE characters (including the terminating '_0') and returning number of characters written. If S is NULL, nothing will be written anywhere, so to determine how many characters would be written, use NULL for S and (size_t) -1 for MAXSIZE. 
Name: rpl_openat; Comment: Like openat, but support O_CLOEXEC and work around Solaris 9 bugs with trailing slash. 
Name: openat; Comment: Replacement for Solaris' openat function. <https:www.google.comsearch?q=openat+site:docs.oracle.com> First, try to simulate it via open ("/proc/self/fd/FD/FILE"). Failing that, simulate it by doing save_cwd/fchdir/open/restore_cwd. If either the save_cwd or the restore_cwd fails (relatively unlikely), then give a diagnostic and exit nonzero. Otherwise, upon failure, set errno and return -1, as openat does. Upon successful completion, return a file descriptor. 
Name: opendirat; Comment: Relative to DIR_FD, open the directory DIR, passing EXTRA_FLAGS to the underlying openat call. On success, store into *PNEW_FD the underlying file descriptor of the newly opened directory and return the directory stream. On failure, return NULL and set errno. On success, *PNEW_FD is at least 3, so this is a "safer" function. 
Name: time_overflow; Comment: True if N is out of range for time_t. 
Name: _GL_ATTRIBUTE_FORMAT; Comment: Convert a possibly-signed character to an unsigned character. This is a bit safer than casting to unsigned char, since it catches some type errors that the cast doesn't. 
Name: apply_relative_time; Comment: Increment PC->rel by FACTORREL (FACTOR is 1 or -1). Return true if successful, false if an overflow occurred. 
Name: str_days; Comment: Return a textual representation of the day ordinal/number values in the parser_control struct (e.g., "last wed", "this tues", "thu"). 
Name: print_rel_part; Comment: Debugging: print the current relative values. 
Name: time_zone_hhmm; Comment: Convert a time zone expressed as HH:MM into an integer count of seconds. If MM is negative, then S is of the form HHMM and needs to be picked apart; otherwise, S is of the form HH. As specified in https:pubs.opengroup.orgonlinepubs9699919799basedefsV1_chap08.html#tag_08_03, allow only valid TZ range, and consider first two digits as hours, if no minutes specified. Return true if successful. 
Name: tm_year_str; Comment: Convert TM_YEAR, a year minus 1900, to a string that is numerically correct even if subtracting 1900 would overflow. 
Name: to_tm_year; Comment: Convert a text year number to a year minus 1900, working correctly even if the input is in the range INT_MAX .. INT_MAX + 1900 - 1. 
Name: tm_diff; Comment: None see strftime.c. 
Name: mktime_ok; Comment: If *TM0 is the old and *TM1 is the new value of a struct tm after passing it to mktime_z, return true if it's OK. It's not OK if mktime failed or if *TM0 has out-of-range mainline members. The caller should set TM1->tm_wday to -1 before calling mktime, as a negative tm_wday is how mktime failure is inferred. 
Name: debug_strfdatetime; Comment: Debugging: format a 'struct tm' into a buffer, taking the parser's timezone information into account (if pc != NULL). 
Name: parse_datetime; Comment: The original interface: run with debug=false and the default timezone. 
Name: parse_datetime2; Comment: Parse a date/time string, storing the resulting time value into *RESULT. The string itself is pointed to by P. Return true if successful. P can be an incomplete or relative time specification; if so, use *NOW as the basis for the returned time. Default to timezone TZDEFAULT, which corresponds to tzalloc (TZSTRING). 
Name: gettext_quote; Comment: MSGID approximates a quotation mark. Return its translation if it has one; otherwise, return either it or "_"", depending on S. S is either clocale_quoting_style or locale_quoting_style. 
Name: sift_states_backward; Comment: This function checks the STATE_LOG from the SCTX->last_str_idx to 0 and sift the nodes in each states according to the following rules. Updated state_log will be wrote to STATE_LOG. Rules: We throw away the Node 'a' in the STATE_LOG[STR_IDX] if... 1. When STR_IDX == MATCH_LAST(the last index in the state_log): _If 'a' isn't the LAST_NODE and 'a' can't epsilon transit to _the LAST_NODE, we throw away the node 'a'. 2. When 0 <= STR_IDX < MATCH_LAST and 'a' accepts _string 's' and transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX+strlen('s')], we throw _ away the node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX+strlen('s')] but 'b' is _ thrown away, we throw away the node 'a'. 3. When 0 <= STR_IDX < MATCH_LAST and 'a' epsilon transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX], we throw away the _ node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX] but 'b' is thrown away, _ we throw away the node 'a'. 
Name: find_subexp_node; Comment: Find the first node which is '(' or ')' and whose index is SUBEXP_IDX. Search '(' if FL_OPEN, or search ')' otherwise. TODO: This function isn't efficient... _ Because there might be more than one nodes whose types are _ OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all _ nodes. _ E.g. RE: (a){2} 
Name: check_arrival_add_next_nodes; Comment: Calculate the destination nodes of CUR_NODES at STR_IDX, and append them to NEXT_NODES. TODO: This function is similar to the functions transit_state*(), _ however this function has many additional works. _ Can't we unify them? 
Name: re_acquire_state; Comment: Search for the state whose node_set is equivalent to NODES. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: re_acquire_state_context; Comment: Search for the state whose node_set is equivalent to NODES and whose context is equivalent to CONTEXT. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: streamsavedir; Comment: None the end is marked by two '_0' characters in a row. Returned values are sorted according to OPTION. Return NULL (setting errno) if DIRP cannot be read. If DIRP is NULL, return NULL without affecting errno. 
Name: savedir; Comment: None the end is marked by two '_0' characters in a row. Return NULL (setting errno) if DIR cannot be opened, read, or closed. 
Name: __stpcpy; Comment: Copy SRC to DEST, returning the address of the terminating '_0' in DEST. 
Name: strcasestr; Comment: Find the first occurrence of NEEDLE in HAYSTACK, using case-insensitive comparison. This function gives unspecified results in multibyte locales. 
Name: strndup; Comment: A replacement function, for systems that lack strndup. Copyright (C) 1996-1998, 2001-2003, 2005-2007, 2009-2021 Free Software Foundation, Inc. This program is free software; you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, see <https://www.gnu.org/licenses/>. 
Name: strnlen; Comment: Find the length of STRING, but scan at most MAXLEN characters. If no '_0' terminator is found in that many characters, return MAXLEN. 
Name: xgetcwd; Comment: Return the current directory, newly allocated. Upon an out-of-memory error, call xalloc_die. Upon any other type of error, return NULL with errno set. 
Name: xzalloc; Comment: Allocate N bytes of zeroed memory dynamically, with error checking. There's no need for xnzalloc (N, S), since it would be equivalent to xcalloc (N, S). 
Name: __nonnull; Comment: Initialize a dynamic array object. This must be called before any use of the object. 
Name: __nonnull; Comment: Deallocate the dynamic array and its elements. 
Name: __nonnull; Comment: Mark the dynamic array as failed. All elements are deallocated as a side effect. 
Name: __nonnull; Comment: Change the size of *LIST to SIZE. If SIZE is larger than the existing size, new elements are added (which can be initialized). Otherwise, the list is truncated, and elements are freed. Return false on memory allocation failure (and mark *LIST as failed). 
Name: __nonnull; Comment: Remove the last element of LIST if it is present. 
Name: __nonnull; Comment: Remove all elements from the list. The elements are freed, but the list itself is not. 
Name: __nonnull; Comment: Transfer the dynamic array to a permanent location at *RESULT. Returns true on success on false on allocation failure. In either case, *LIST is re-initialized and can be reused. A NULL pointer is stored in *RESULT if LIST refers to an empty list. On success, the pointer in *RESULT is heap-allocated and must be deallocated using free. 
Name: __nonnull; Comment: Transfer the dynamic array to a heap-allocated array and return a pointer to it. The pointer is NULL if memory allocation fails, or if the array is empty, so this function should be used only for arrays which are known not be empty (usually because they always have a sentinel at the end). If LENGTHP is not NULL, the array length is written to *LENGTHP. *LIST is re-initialized and can be reused. 
Name: locale_hash_function; Comment: A hash function for pointers. 
Name: string_hash; Comment: A hash function for NUL-terminated char* strings using the method described by Bruno Haible. See https://www.haible.de/bruno/hashfunc.html. 
Name: get_locale_t_name; Comment: Returns the name of a given locale category in a given locale_t object, allocated as a string with indefinite extent. 
Name: setlocale_unixlike; Comment: Like setlocale, but accept also the locale names "C" and "POSIX". 
Name: langcmp; Comment: Compare just the language part of two locale names. 
Name: get_main_locale_with_same_language; Comment: Given a locale name, return the main locale with the same language, or NULL if not found. For example: "fr_DE" -> "fr_FR". 
Name: terrcmp; Comment: Compare just the territory part of two locale names. 
Name: get_main_locale_with_same_territory; Comment: Given a locale name, return the locale corresponding to the main language with the same territory, or NULL if not found. For example: "fr_DE" -> "de_DE". 
Name: main; Comment: Ensure that __fpending works. Copyright (C) 2004, 2007-2021 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https:www.gnu.orglicenses>. Written by Jim Meyering. 
Name: main; Comment: Test of malloc function. Copyright (C) 2010-2021 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. 
Name: main; Comment: Test of realloc function. Copyright (C) 2010-2021 Free Software Foundation, Inc. This program is free software: you can redistribute it andor modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. 
Name: equal; Comment: Test for equality. 
Name: correct_result_p; Comment: Test whether the result for a given argument is correct. 
Name: check; Comment: Test the function for a given argument. 
Name: bc_args_complete; Comment: Add a terminator to the argument list. 
Name: bc_do_insert; Comment: Replace all instances of `replace_pat' in ARG with `linebuf', and add the resulting string to the list of arguments for the command to execute. ARGLEN is the length of ARG, not including the null. LBLEN is the length of LINEBUF, not including the null. PFXLEN is the length of PREFIX. Substitution is not performed on the prefix. The prefix is used if the argument contains replace_pat. COMPAT: insertions on the SYSV version are limited to 255 chars per line, and a max of 5 occurrences of replace_pat in the initial-arguments. Those restrictions do not exist here. 
Name: update_limit; Comment: Update our best guess as to how many arguments we should pass to the nextinvocation of the command. 
Name: copy_args; Comment: Copy some of the program arguments into an argv list. Copy all theinitial arguments, plus up to LIMIT additional arguments. 
Name: bc_do_exec; Comment: Execute the program with the currently-built list of arguments. 
Name: bc_argc_limit_reached; Comment: Return nonzero if there would not be enough room for an additionalargument. We check the total number of arguments only, not the space occupied by those arguments. If we return zero, there still may not be enough room for the next argument, depending on its length. 
Name: bc_push_arg; Comment: Add ARG to the end of the list of arguments `cmd_argv' to pass to the command. LEN is the length of ARG, including the terminating null. If this brings the list up to its maximum size, execute the command. 
Name: bc_size_of_environment; Comment: Return how much of ARG_MAX is used by the environment. 
Name: exceeds; Comment: Return nonzero if the value stored in the environment variable ENV_VAR_NAMEexceeds QUANTITY. 
Name: bc_args_exceed_testing_limit; Comment: Return nonzero if the indicated argument list exceeds a testing limit. NOTE: argv could be declared 'const char const argv', but it works as expected only with C++ compilers <http:c-faq.comansiconstmismatch.html>. 
Name: get_proc_max_fd; Comment: Determine the value of the largest open fd, on systems thatoffer /proc/self/fd. 
Name: get_max_fd; Comment: Estimate the value of the largest possible file descriptor 
Name: remember_fd_if_non_cloexec; Comment: Record FD is it's not FD_CLOEXEC. 
Name: find_first_leak_callback; Comment: FD is open and not close-on-exec.If it's not in the list of non-cloexec file descriptors we saw before, it's a leak. 
Name: o_cloexec_works; Comment: Determine if O_CLOEXEC actually works (Savannah bug #29435: fd_is_cloexec () does not work on Fedora buildhosts). 
Name: fd_leak_check_is_enabled; Comment: Return nonzero if file descriptor leak-checking is enabled. 
Name: list_file; Comment: NAME is the name to print. RELNAME is the path to access it from the current directory. STATP is the results of stat or lstat on it. Use CURRENT_TIME to decide whether to print yyyy or hh:mm. Use OUTPUT_BLOCK_SIZE to determine how to print file block counts and sizes. STREAM is the stdio stream to print on. 
Name: print_quoted; Comment: Print S according to the format FORMAT, but if the destination is a tty, convert any potentially-dangerous characters. The logic in this function was taken from ls.c in coreutils (at Sun Jun 5 20:42:51 2005 UTC). 
Name: qmark_chars; Comment: Scan BUF, replacing any dangerous-looking characters with questionmarks. This code is taken from the ls.c file in coreutils as at Sun Jun 5 20:51:54 2005 UTC. This function may shrink the buffer. Either way, the new length is returned. 
Name: put_short; Comment: Write out a 16-bit int, high byte first (network byte order).Return true iff all went well. 
Name: prefix_length; Comment: Return the length of the longest common prefix of strings S1 and S2. 
Name: set_max_db_age; Comment: Change the number of days old the database can bebefore we complain about it. 
Name: get_short; Comment: Read in a 16-bit int, high byte first (network byte order). 
Name: contains_metacharacter; Comment: Return nonzero if S contains any shell glob characters. 
Name: locate_read_str; Comment: locate_read_str()Read bytes from FP into the buffer at offset OFFSET in (*BUF), until we reach DELIMITER or end-of-file. We reallocate the buffer as necessary, altering (*BUF) and (*SIZ) as appropriate. No assumption is made regarding the content of the data (i.e. the implementation is 8-bit clean, the only delimiter is DELIMITER). Written Fri May 23 18:41:16 2003 by James Youngman, because getstr() has been removed from gnulib. We call the function locate_read_str() to avoid a name clash with the curses function getstr(). 
Name: process_simple; Comment: 0 or 1 pattern(s) 
Name: process_or; Comment: Accept if any pattern matches. 
Name: process_and; Comment: Accept if all pattern match. 
Name: visit_existing_follow; Comment: visit_existing_follow implements -L -e 
Name: visit_non_existing_follow; Comment: visit_non_existing_follow implements -L -E 
Name: visit_existing_nofollow; Comment: visit_existing_nofollow implements -P -e 
Name: visit_non_existing_nofollow; Comment: visit_non_existing_nofollow implements -P -E 
Name: print_stats; Comment: Emit the statistics. 
Name: looking_at_gnu_locatedb; Comment: Return nonzero if the data we read in indicates that we are looking at a LOCATE02 locate database. 
Name: looking_at_slocate_locatedb; Comment: Return nonzero if the data we read in indicates that we are looking at an slocate database. 
Name: search_one_database; Comment: Print or count the entries in DBFILE that match shell globbing patterns in ARGV. Return the number of entries matched. 
Name: read_line; Comment: Read a line of arguments from the input and add them to the list of arguments to pass to the command. Ignore blank lines and initial blanks. Single and double quotes and backslashes quote metacharacters and blanks as they do in the shell. Return -1 if eof (either physical or logical) is reached, otherwise the length of the last string read (including the null). 
Name: read_string; Comment: Read a string (terminated by the delimiter, which may be NUL) from the input and add it to the list of arguments to pass to the command. The return value is the length of the added argument, including its terminating NUL. The added argument is always terminated by NUL, even if that is not the delimiter. If we reach physical EOF before seeing the delimiter, we treat any characters read as the final argument. If no argument was read (that is, we reached physical EOF before reading any characters) then -1 is returned. 
Name: print_args; Comment: None otherwise, return false. 
Name: set_slot_var; Comment: Set SOME_ENVIRONMENT_VARIABLE=n in the environment. 
Name: prep_child_for_exec; Comment: Close stdin and attach /dev/null to it. This resolves Savannah bug #3992. 
Name: xargs_do_exec; Comment: Execute the command that has been built in `cmd_argv'. This may involve waiting for processes that were previously executed. There are a number of cases where we want to terminate the current (child) process. We do this by calling _exit () rather than exit () in order to avoid the invocation of wait_for_proc_all (), which was registered by the parent as an atexit () function. 
Name: exec_if_possible; Comment: Execute the command if possible. 
Name: add_proc; Comment: Add the process with id PID to the list of processes that have been executed. 
Name: wait_for_proc; Comment: If ALL is true, wait for all child processes to finish; otherwise, wait for one child process to finish, or for another signal that tells us that we can run more child processes. Remove the processes that finish from the list of executing processes. 
Name: wait_for_proc_all; Comment: Wait for all child processes to finish. 
Name: increment_proc_max; Comment: Increment or decrement the number of processes we can start simultaneously, when we receive a signal from the outside world. We must take special care around proc_max == 0 (unlimited children), proc_max == 1 (don't decrement to zero). 
Name: parse_num; Comment: Return the value of the number represented in STR. OPTION is the command line option to which STR is the argument. If the value does not fall within the boundaries MIN and MAX, Print an error message mentioning OPTION. If FATAL is true, we also exit. 
Name: connect_to_peer; Comment: utility function to connect to a peer; generally useful, but wait for AF_UNIX support in this mod before thinking about how to make it available to other modules 
Name: handle_headers; Comment: Try to find the end of the script headers in the response from the backend fastcgi server. STATE holds the current header parsing state for this request. Returns 0 if it can't find the end of the headers, and 1 if it found the end of the headers. 
Name: handle_response; Comment: handle_response() is based on mod_proxy_fcgi's dispatch() 
Name: mod_fcgid_modify_auth_header; Comment: almost from mod_fcgid 
Name: fcgi_define_provider; Comment: AuthnzFcgiAuthDefineProvider {authn|authz|authnz} provider-name fcgi://backendhost:backendport/ 
Name: derive_codepage_from_lang; Comment: Derive a code page ID give a language name or ID 
Name: get_connection_for_authz; Comment: Some LDAP servers restrict who can search or compare, and the hard-coded IDmight be good for the DN lookup but not for later operations. 
Name: authn_ldap_check_password; Comment: Authentication Phase -------------------- This phase authenticates the credentials the user has sent with the request (ie the username and password are checked). This is done by making an attempt to bind to the LDAP server using this user's DN and the supplied password. 
Name: mod_auth_ldap_parse_url; Comment: Use the ldap url parsing routines to break up the ldap url into host and port. 
Name: merge_authn_alias_svr_config; Comment: Only per-server directive we have is GLOBAL_ONLY 
Name: set_authname; Comment: Load an authorisation realm into our location configuration, applying the usual rules that apply to realms. 
Name: authn_cache_dircfg_merge; Comment: not sure we want this. Might be safer to document use-all-or-none 
Name: merge_authz_core_svr_config; Comment: Only per-server directive we have is GLOBAL_ONLY 
Name: authz_alias_check_authorization; Comment: This is a fake authz provider that really merges various authz aliasconfigurations and then invokes them. 
Name: env_check_authorization; Comment: env authz provider 
Name: all_check_authorization; Comment: all authz provider 
Name: method_check_authorization; Comment: method authz provider 
Name: get_dbm_entry_as_str; Comment: This should go into APR; perhaps with some nicecaching/locking/flocking of the open dbm file. 
Name: get_dbm_grp; Comment: We do something strange with the group file. If the group file contains any : we assume the format is key=username value=":"groupname [":"anything here is ignored] otherwise we now (0.8.14+) assume that the format is key=username value=groupname The first allows the password and group files to be the same physical DBM file; key=username value=password":"groupname[":"anything]mark@telescope.org, 22Sep95 
Name: note_basic_auth_failure; Comment: These functions return 0 if client is OK, and proper error statusif not... either HTTP_UNAUTHORIZED, if we made a check, and it failed, or HTTP_INTERNAL_SERVER_ERROR, if things are so totally confused that we couldn't figure out how to tell if the client is authorized or not. If they return DECLINED, and all other modules also decline, that's treated by the server core as a configuration error, logged and reported as such. 
Name: authenticate_basic_user; Comment: Determine user ID, and check if it really is that user, for HTTPbasic authentication... 
Name: authenticate_basic_fake; Comment: If requested, create a fake basic authentication header for the benefitof a proxy or application running behind this server. 
Name: cleanup_tables; Comment: initialization code 
Name: rmm_malloc; Comment: RMM helper functions that behave like single-step malloc/free. 
Name: create_digest_dir_config; Comment: configuration code 
Name: get_client; Comment: Get the client given its client number (the key). Returns the entry, or NULL if it's not found. Access to the list itself is synchronized via locks. However, access to the entry returned by get_client() is NOT synchronized. This means that there are potentially problems if a client uses multiple, simultaneous connections to access url's within the same protection space. However, these problems are not new: when using multiple connections you have no guarantee of the order the requests are processed anyway, so you have problems with the nonce-count and one-time nonces anyway. 
Name: gc; Comment: A simple garbage-collecter to remove unused clients. It removes thelast entry in each bucket and updates the counters. Returns the number of removed entries. 
Name: add_client; Comment: Add a new client to the list. Returns the entry if successful, NULL otherwise. This triggers the garbage collection if memory is low. 
Name: get_digest_rec; Comment: Parse the Authorization header, if it exists 
Name: parse_hdr_and_update_nc; Comment: Because the browser may preemptively send auth info, incrementing thenonce-count when it does, and because the client does not get notified if the URI didn't need authentication after all, we need to be sure to update the nonce-count each time we receive an Authorization header no matter what the final outcome of the request. Furthermore this is a convenient place to get the request-uri (before any subrequests etc are initiated) and to initialize the request_config. Note that this must be called after mod_proxy had its go so that r->proxyreq is set correctly. 
Name: gen_nonce_hash; Comment: The hash part of the nonce is a SHA-1 hash of the time, realm, server hostand port, opaque, and our secret. 
Name: gen_nonce; Comment: The nonce has the format b64(time)+hash . 
Name: gen_client; Comment: Generate a new client entry, add it to the list, and return the entry. Returns NULL if failed. 
Name: ltox; Comment: Authorization challenge generation code (for WWW-Authenticate) 
Name: get_hash; Comment: Authorization header verification code 
Name: old_digest; Comment: RFC-2069 
Name: new_digest; Comment: RFC-2617 
Name: authenticate_digest_user; Comment: Determine user ID, and check if the attributes are correct, if itreally is that user, if the nonce is correct, etc. 
Name: add_auth_info; Comment: Authorization-Info header code 
Name: check_string; Comment: *Sanity check a given string that it exists, is not empty, and does not contain special characters. 
Name: set_notes_auth; Comment: *Set the auth username and password into the main request notes table. 
Name: get_notes_auth; Comment: *Get the auth username and password from the main request notes table, if present. 
Name: set_session_auth; Comment: *Set the auth username and password into the session. If either the username, or the password are NULL, the username and/or password will be removed from the session. 
Name: get_session_auth; Comment: *Get the auth username and password from the main request notes table, if present. 
Name: get_form_auth; Comment: *Isolate the username and password in a POSTed form with the username in the "username" field, and the password in the "password" field. If either the username or the password is missing, this function will return HTTP_UNAUTHORIZED. The location field is considered optional, and will be returned if present. 
Name: check_site; Comment: *Given a username and site passphrase hash from the session, determine whether the site passphrase is valid for this session. If the site passphrase is NULL, or if the sent_hash is NULL, this function returns DECLINED. If the site passphrase hash does not match the sent hash, this function returns AUTH_USER_NOT_FOUND. On success, returns OK. 
Name: check_authn; Comment: *Given a username and password (extracted externally from a cookie), run the authnz hooks to determine whether this request is authorized. Return an HTTP code. 
Name: fake_basic_authentication; Comment: fake the basic authentication header if configured to do so 
Name: authenticate_form_authn; Comment: *Must we use form authentication? If so, extract the cookie and run the authnz hooks to determine if the login is valid. If the login is not valid, a 401 Not Authorized will be returned. It is up to the webmaster to ensure this screen displays a suitable login form to give the user the opportunity to log in. 
Name: authenticate_form_login_handler; Comment: *Handle a login attempt. If the login session is either missing or form authnz is unsuccessful, a 401 Not Authorized will be returned to the browser. The webmaster is expected to insert a login form into the 401 Not Authorized error screen. If the webmaster wishes, they can point the form submission at this handler, which will redirect the user to the correct page on success. On failure, the 401 Not Authorized error screen will be redisplayed, where the login attempt can be repeated. 
Name: authenticate_form_logout_handler; Comment: *Handle a logout attempt. If an attempt is made to access this URL, any username and password embedded in the session is deleted. This has the effect of logging the person out. If a logout URI has been specified, this function will create an internal redirect to this page. 
Name: authenticate_form_redirect_handler; Comment: *Handle a redirect attempt. If during a form login, the method, mimetype and request body are specified, this handler will ensure that this request is included as an internal redirect. 
Name: parse_addr; Comment: Parses a host of the form <address>[:port] :port is permitted if 'port' is not NULL 
Name: ssl_var_lookup; Comment: This function must remain safe to use for a non-SSL connection. 
Name: set_group_privs; Comment: Set group privileges.Note that we use the username as set in the config files, rather than the lookup of to uid --- the same uid may have multiple passwd entries, with different sets of groups for each. 
Name: send_response_header; Comment: Common code invoked for both HSE_REQ_SEND_RESPONSE_HEADER andthe newer HSE_REQ_SEND_RESPONSE_HEADER_EX ServerSupportFunction(s) as well as other functions that write responses and presume that the support functions above are optional. Other callers trying to split headers and body bytes should pass head/headlen alone (leaving stat/statlen NULL/0), so that they get a proper count of bytes consumed. The argument passed to stat isn't counted as the head bytes are. 
Name: isapi_handler; Comment: ********************************************************* ISAPI Module request invocation section *********************************************************
Name: isapi_pre_config; Comment: ********************************************************* ISAPI Module Setup Hooks *********************************************************
Name: prep_string; Comment: XXX: prep_string should translate the string into unicode,such that it is compatible with whatever codepage the client will read characters 80-ff. For the moment, use the unicode values 0080-00ff. This isn't trivial, since the code page varies between msdos and Windows applications. For subsystem 2 [GUI] the default is the system Ansi CP. For subsystem 3 [CLI] the default is the system OEM CP. 
Name: get_interpreter_from_win32_registry; Comment: Somewhat more exciting ... figure out where the registry has stashed theExecCGI or Open command - it may be nested one level deep (or more???) 
Name: cache_remove_url; Comment: delete all URL entities from the cache 
Name: cache_create_entity; Comment: create a new URL entity in the cache It is possible to store more than once entity per URL. This function will always create a new entity, regardless of whether other entities already exist for the same URL. The size of the entity is provided so that a cache module can decide whether or not it wants to cache this particular entity. If the size is unknown, a size of -1 should be set. 
Name: cache_accept_headers; Comment: *Take two sets of headers, sandwich them together, and apply the result to r->headers_out. To complicate this, a header may be duplicated in either table. Should a header exist in the top table, all matching headers will be removed from the bottom table before the headers are combined. The Warning headers are handled specially. Warnings are added rather than being replaced, while in the case of revalidation 1xx Warnings are stripped. The Content-Type and Last-Modified headers are then re-parsed and inserted into the request. 
Name: cache_select; Comment: select a specific URL entity in the cache It is possible to store more than one entity per URL. Content negotiation is used to select an entity. Once an entity is selected, details of it are stored in the per request config to save time when serving the request later. This function returns OK if successful, DECLINED if no cached entity fits the bill. 
Name: cache_invalidate; Comment: Invalidate a specific URL entity in all caches All cached entities for this URL are removed, usually in response to a POST/PUT or DELETE. This function returns OK if at least one entity was found and removed, and DECLINED if no cached entities were removed. 
Name: uri_meets_conditions; Comment: Determine if "url" matches the hostname, scheme and port and pathin "filter". All but the path comparisons are case-insensitive. 
Name: cache_try_lock; Comment: *Try obtain a cache wide lock on the given cache key. If we return APR_SUCCESS, we obtained the lock, and we are clear to proceed to the backend. If we return APR_EEXIST, then the lock is already locked, someone else has gone to refresh the backend data already, so we must return stale data with a warning in the mean time. If we return anything else, then something has gone pear shaped, and we allow the request through to the backend regardless. This lock is created from the request pool, meaning that should something go wrong and the lock isn't deleted on return of the request headers from the backend for whatever reason, at worst the lock will be cleaned up when the request dies or finishes. If something goes truly bananas and the lock isn't deleted when the request dies, the lock will be trashed when its max-age is reached, or when a request arrives containing a Cache-Control: no-cache. At no point is it possible for this lock to permanently deny access to the backend. 
Name: cache_remove_lock; Comment: *Remove the cache lock, if present. First, try to close the file handle, whose delete-on-close should kill the file. Otherwise, just delete the file by name. If no lock name has yet been calculated, do the calculation of the lock name first before trying to delete the file. If an optional bucket brigade is passed, the lock will only be removed if the bucket brigade contains an EOS bucket. 
Name: cache_strqtok; Comment: *String tokenizer that ignores separator characters within quoted strings and escaped characters, as per RFC2616 section 2.2. 
Name: ap_cache_control; Comment: *Parse the Cache-Control and Pragma headers in one go, marking which tokens appear within the header. Populate the structure passed in. 
Name: cache_control_remove; Comment: *Parse the Cache-Control, identifying and removing headers that exist as tokens after the no-cache and private tokens. 
Name: cache_quick_handler; Comment: CACHE handler ------------- Can we deliver this request from the cache? If yes: deliver the content by installing the CACHE_OUT filter. If no: check whether we're allowed to try cache it If yes: add CACHE_SAVE filter If No: oh well. By default, the cache handler runs in the quick handler, bypassing virtually all server processing and offering the cache its optimal performance. In this mode, the cache bolts onto the front of the server, and behaves as a discrete RFC2616 caching proxy implementation. Under certain circumstances, an admin might want to run the cache as a normal handler instead of a quick handler, allowing the cache to run after the authorisation hooks, or by allowing fine control over the placement of the cache in the filter chain. This option comes at a performance penalty, and should only be used to achieve specific caching goals where the admin understands what they are doing. 
Name: cache_replace_filter; Comment: *If the two filter handles are present within the filter chain, replace the last instance of the first filter with the last instance of the second filter, and return true. If the second filter is not present at all, the first filter is removed, and false is returned. If neither filter is present, false is returned and this function does nothing. If a stop filter is specified, processing will stop once this filter is reached. 
Name: cache_get_filter; Comment: *Find the given filter, and return it if found, or NULL otherwise. 
Name: cache_handler; Comment: *The cache handler is functionally similar to the cache_quick_hander, however a number of steps that are required by the quick handler are not required here, as the normal httpd processing has already handled these steps. 
Name: cache_out_filter; Comment: CACHE_OUT filter ---------------- Deliver cached content (headers and body) up the stack. 
Name: cache_save_store; Comment: Having jumped through all the hoops and decided to cache the response, call store_body() for each brigade, handling the case where the provider can't swallow the full brigade. In this case, we write the brigade we were passed out downstream, and loop around to try and cache some more until the in brigade is completely empty. As soon as the out brigade contains eos, call commit_entity() to finalise the cached element. 
Name: cache_header_cmp; Comment: *Sanity check for 304 Not Modified responses, as per RFC2616 Section 10.3.5. 
Name: cache_save_filter; Comment: CACHE_SAVE filter --------------- Decide whether or not this content should be cached. If we decide no it should not: remove the filter from the chain If we decide yes it should: Have we already started saving the response? If we have started, pass the data to the storage manager via store_body Otherwise: Check to see if we *can* save this particular response. If we can, call cache_create_entity() and save the headers and body Finally, pass the data to the next filter (the network or whatever) After the various failure cases, the cache lock is proactively removed, so that another request is given the opportunity to attempt to cache without waiting for a potentially slow client to acknowledge the failure. 
Name: cache_remove_url_filter; Comment: CACHE_REMOVE_URL filter ----------------------- This filter gets added in the quick handler every time the CACHE_SAVE filter gets inserted. Its purpose is to remove a confirmed stale cache entry from the cache. CACHE_REMOVE_URL has to be a protocol filter to ensure that is run even if the response is a canned error message, which removes the content filters and thus the CACHE_SAVE filter from the chain. CACHE_REMOVE_URL expects cache request rec within its context because the request this filter runs on can be different from the one whose cache entry should be removed, due to internal redirects. Note that CACHE_SAVE_URL (as a content-set filter, hence run before the protocol filters) will remove this filter if it decides to cache the file. Therefore, if this filter is left in, it must mean we need to toss any existing files. 
Name: cache_invalidate_filter; Comment: CACHE_INVALIDATE filter ----------------------- This filter gets added in the quick handler should a PUT, POST or DELETE method be detected. If the response is successful, we must invalidate any cached entity as per RFC2616 section 13.10. CACHE_INVALIDATE has to be a protocol filter to ensure that is run even if the response is a canned error message, which removes the content filters from the chain. CACHE_INVALIDATE expects cache request rec within its context because the request this filter runs on can be different from the one whose cache entry should be removed, due to internal redirects. 
Name: cache_filter; Comment: CACHE filter ------------ This filter can be optionally inserted into the filter chain by the admin as a marker representing the precise location within the filter chain where caching is to be performed. When the filter chain is set up in the non-quick version of the URL handler, the CACHE filter is replaced by the CACHE_OUT or CACHE_SAVE filter, effectively inserting the caching filters at the point indicated by the admin. The CACHE filter is then removed. This allows caching to be performed before the content is passed to the INCLUDES filter, or to a filter that might perform transformations unique to the specific request and that would otherwise be non-cacheable. 
Name: cache_status; Comment: *If configured, add the status of the caching attempt to the subprocess environment, and if configured, to headers in the response. The status is saved below the broad category of the status (hit, miss, revalidate), as well as a single cache-status key. This can be used for conditional logging. The status is optionally saved to an X-Cache header, and the detail of why a particular cache entry was cached (or not cached) is optionally saved to an X-Cache-Detail header. This extra detail is useful for service developers who may need to know whether their Cache-Control headers are working correctly. 
Name: cache_insert_error_filter; Comment: *If an error has occurred, but we have a stale cached entry, restore the filter stack from the save filter onwards. The canned error message will be discarded in the process, and replaced with the cached response. 
Name: create_dir_config; Comment: Setup configurable data 
Name: header_file; Comment: Local static functions 
Name: safe_file_rename; Comment: htcacheclean may remove directories underneath us.So, we'll try renaming three times at a cost of 0.002 seconds. 
Name: file_cache_recall_mydata; Comment: These two functions get and put state information into the datafile for an ap_cache_el, this state information will be read and written transparent to clients of this module 
Name: create_entity; Comment: Hook and mod_cache callback functions 
Name: recall_headers; Comment: Reads headers from a buffer and returns an array of headers. Returns NULL on file error This routine tries to deal with too long lines and continuation lines. @@@: XXX: FIXME: currently the headers are passed thru un-merged. Is that okay, or should they be collapsed where possible? 
Name: set_cache_root; Comment: mod_cache_disk configuration directives handlers. 
Name: set_cache_dirlevels; Comment: Consider eliminating the next two directives in favor of Ian's prime number hash... key = hash_fn( r->uri) filename = "/key % prime1 /key %prime2/key %prime3" 
Name: read_array; Comment: Local static functions 
Name: set_cache_socache; Comment: mod_cache_socache configuration directives handlers. 
Name: file_cache_xlat; Comment: If it's one of ours, fill in r->finfo now to avoid extra stat()... this is abit of a kludge, because we really want to run after core_translate runs. 
Name: socache_mc_id2key; Comment: Converts (binary) id into a key prefixed by the predetermined namespace tag; writes output to key buffer. Returns non-zero ifthe id won't fit in the key buffer. 
Name: socache_rd_id2key; Comment: Converts (binary) id into a key prefixed by the predetermined namespace tag; writes output to key buffer. Returns non-zero ifthe id won't fit in the key buffer. 
Name: shmcb_cyclic_ntoc_memcpy; Comment: A "normal-to-cyclic" memcpy. 
Name: shmcb_cyclic_cton_memcpy; Comment: A "cyclic-to-normal" memcpy. 
Name: shmcb_cyclic_memcmp; Comment: A memcmp against a cyclic data buffer. Compares SRC of lengthSRC_LEN against the contents of cyclic buffer DATA (which is of size BUF_SIZE), starting at offset DEST_OFFSET. Got that? Good. 
Name: socache_shmcb_create; Comment: High-Level "handlers" as per ssl_scache.c subcache internals are deferred to shmcb_subcache_*** functions lower down 
Name: shmcb_subcache_expire; Comment: Subcache-level cache operations 
Name: qs_to_table; Comment: XXX: The same exists in mod_lbmethod_heartbeat.c where it is named argstr_to_table 
Name: hm_update; Comment: Store in the slotmem 
Name: hm_readid; Comment: Read the id corresponding to the entry in the slotmem 
Name: hm_slotmem_update_stat; Comment: update the entry or create it if not existing 
Name: hm_file_update_stats; Comment: Store in a file 
Name: hm_slotmem_update_stats; Comment: Store in a slotmem 
Name: hm_update_stats; Comment: Store/update the stats 
Name: hm_processmsg; Comment: Process a message received from a backend node 
Name: get_arguments; Comment: return configuration-parsed arguments from line as an array. the line is expected not to contain any '_n'? 
Name: warn_if_non_blank; Comment: warn if anything non blank appears, but ignore comments... 
Name: get_lines_till_end_token; Comment: get read lines as an array till end_token. counts nesting for begin_token/end_token. it assumes a line-per-line configuration (thru getline). this function could be exported. begin_token may be NULL. 
Name: looks_like_an_argument; Comment: returns whether it looks like an argument, i.e. prefixed by ARG_PREFIX. 
Name: check_macro_arguments; Comment: generates an error on macro with two arguments of the same name. generates an error if a macro argument name is empty. generates a warning if arguments name prefixes conflict. generates a warning if the first char of an argument is not in ARG_PREFIX 
Name: check_macro_use_arguments; Comment: warn about empty strings in array. could be legitimate. 
Name: number_of_escapes; Comment: returns the number of needed escapes for the string 
Name: substitute; Comment: replace name by replacement at the beginning of buf of bufsize. returns an error message or NULL. C is not really a nice language for processing strings. 
Name: next_substitution; Comment: find first occurrence of args in buf. in case of conflict, the LONGEST argument is kept. (could be the FIRST?). returns the pointer and the whichone found, or NULL. 
Name: substitute_macro_args; Comment: substitute macro arguments by replacements in buf of bufsize. returns an error message or NULL. if used is defined, returns the used macro arguments. 
Name: process_content; Comment: perform substitutions in a macro contents and return the result as a newly allocated array, if result is defined. may also return an error message. passes used down to substitute_macro_args. 
Name: check_macro_contents; Comment: warn if some macro arguments are not used. 
Name: next_one; Comment: Get next config if any. this may be called several times if there are continuations. 
Name: array_getch; Comment: returns next char if possible this may involve switching to enclosing config. 
Name: array_getstr; Comment: returns a buf a la fgets. no more than a line at a time, otherwise the parsing is too much ahead... NULL at EOF. 
Name: array_close; Comment: close the array stream? 
Name: make_array_config; Comment: create an array config stream insertion "object". could be exported. 
Name: macro_section; Comment: handles: <Macro macroname arg1 arg2 ...> any trash there is ignored... 
Name: use_macro; Comment: handles: Use name value1 value2 ... 
Name: unload_module; Comment: This is the cleanup for a loaded shared object. It unloads the module. This is called as a cleanup function from the core. 
Name: load_module; Comment: This is called for the directive LoadModule and actually loads a shared object file into the address space of the server process. 
Name: load_file; Comment: This implements the LoadFile directive and loads an arbitrary shared object file into the address space of the server process. 
Name: wd_worker; Comment: --------------------------------------------------------------------------
Name: wd_pre_config_hook; Comment: --------------------------------------------------------------------------
Name: wd_post_config_hook; Comment: --------------------------------------------------------------------------
Name: wd_child_init_hook; Comment: --------------------------------------------------------------------------
Name: wd_cmd_watchdog_int; Comment: --------------------------------------------------------------------------
Name: wd_register_hooks; Comment: --------------------------------------------------------------------------
Name: dbd_construct; Comment: an apr_reslist_constructor for SQL connectionsAlso use this for opening in non-reslist modes, since it gives us all the error-handling in one place. 
Name: dav_dbm_get_statefiles; Comment: -------------------------------------------------------------------------GENERIC DBM ACCESS For the most part, this just uses the APR DBM functions. They are wrapped a bit with some error handling (using the mod_dav error functions). 
Name: dav_fs_ensure_state_dir; Comment: ### does this belong here or in dav_fs_repos.c ?? 
Name: dav_dbm_open_direct; Comment: dav_dbm_open_direct: Opens a *dbm database specified by path. ro = boolean read-only flag. 
Name: dav_build_key; Comment: ** Internal function to build a key ** ** WARNING: returns a pointer to a "static" buffer holding the key. The ** value must be copied or no longer used if this function is ** called again. 
Name: dav_fs_alloc_lock; Comment: internal function for creating locks 
Name: dav_fs_parse_locktoken; Comment: ** dav_fs_parse_locktoken ** ** Parse an opaquelocktoken URI into a locktoken. 
Name: dav_fs_format_locktoken; Comment: ** dav_fs_format_locktoken ** ** Generate the URI for a locktoken 
Name: dav_fs_compare_locktoken; Comment: ** dav_fs_compare_locktoken ** ** Determine whether two locktokens are the same 
Name: dav_fs_really_open_lockdb; Comment: ** dav_fs_really_open_lockdb: ** ** If the database hasn't been opened yet, then open the thing. 
Name: dav_fs_open_lockdb; Comment: ** dav_fs_open_lockdb: ** ** "open" the lock database, as specified in the global server configuration. ** If force is TRUE, then the database is opened now, rather than lazily. ** ** Note that only one can be open read/write. 
Name: dav_fs_close_lockdb; Comment: ** dav_fs_close_lockdb: ** ** Close it. Duh. 
Name: dav_fs_build_key; Comment: ** dav_fs_build_key: Given a resource, return a apr_datum_t key ** to look up lock information for this file. 
Name: dav_fs_lock_expired; Comment: ** dav_fs_lock_expired: return 1 (true) if the given timeout is in the past ** or present (the lock has expired), or 0 (false) if in the future ** (the lock has not yet expired). 
Name: dav_fs_save_lock_record; Comment: ** dav_fs_save_lock_record: Saves the lock information specified in the ** direct and indirect lock lists about path into the lock database. ** If direct and indirect == NULL, the key is removed. 
Name: dav_fs_load_lock_record; Comment: None creates linked lists of the direct and indirect locks. If add_method = DAV_APPEND_LIST, the result will be appended to the head of the direct and indirect lists supplied. Passive lock removal: If lock has timed out, it will not be returned. ### How much "logging" does RFC 2518 require?
Name: dav_fs_resolve; Comment: resolve <indirect>, returning <*direct> 
Name: dav_fs_get_supportedlock; Comment: ** dav_fs_get_supportedlock: Returns a static string for all supportedlock ** properties. I think we save more returning a static string than ** constructing it every time, though it might look cleaner. 
Name: dav_fs_load_locknull_list; Comment: ** dav_fs_load_locknull_list: Returns a dav_buffer dump of the locknull file ** for the given directory. 
Name: dav_fs_save_locknull_list; Comment: ** dav_fs_save_locknull_list: Saves contents of pbuf into the ** locknull file for dirpath. 
Name: dav_fs_remove_locknull_member; Comment: ** dav_fs_remove_locknull_member: Removes filename from the locknull list ** for directory path. 
Name: dav_fs_get_locknull_members; Comment: Note: used by dav_fs_repos.c 
Name: dav_fs_add_locknull_state; Comment: ### take an optional buf parameter? 
Name: dav_fs_remove_locknull_state; Comment: ** dav_fs_remove_locknull_state: Given a request, check to see if r->filename ** is/was a lock-null resource. If so, return it to an existant state, i.e. ** remove it from the list in the appropriate .DAV/locknull file. 
Name: dav_fs_cmd_davlockdb; Comment: Command handler for the DAVLockDB directive, which is TAKE1 
Name: dav_fs_get_request_rec; Comment: --------------------------------------------------------------------** ** PRIVATE REPOSITORY FUNCTIONS 
Name: dav_format_time; Comment: NOTE: buf must be at least DAV_TIMEBUF_SIZE chars in size 
Name: dav_fs_copymove_file; Comment: Copy or move src to dst; src_finfo is used to propagate permissions bits across if non-NULL; dst_finfo must be non-NULL iff dst alreadyexists. 
Name: dav_fs_copymove_state; Comment: ### need more buffers to replace the pool argument 
Name: dav_fs_get_resource; Comment: --------------------------------------------------------------------** ** REPOSITORY HOOK FUNCTIONS 
Name: dav_fs_mktemp; Comment: custom mktemp that creates the file with APR_OS_DEFAULT permissions 
Name: dav_fs_set_headers; Comment: only define set_headers() and deliver() for debug purposes 
Name: dav_fs_walker; Comment: Walk recursively down through directories,* including lock-null resources as we go. 
Name: dav_fs_getetag; Comment: dav_fs_etag: Stolen from ap_make_etag. Creates a strong etag for file path. ### do we need to return weak tags sometimes? 
Name: dav_generic_alloc_lock; Comment: internal function for creating locks 
Name: dav_generic_parse_locktoken; Comment: dav_generic_parse_locktoken Parse an opaquelocktoken URI into a locktoken. 
Name: dav_generic_format_locktoken; Comment: dav_generic_format_locktoken Generate the URI for a locktoken 
Name: dav_generic_compare_locktoken; Comment: dav_generic_compare_locktoken Determine whether two locktokens are the same 
Name: dav_generic_really_open_lockdb; Comment: dav_generic_really_open_lockdb: If the database hasn't been opened yet, then open the thing. 
Name: dav_generic_open_lockdb; Comment: dav_generic_open_lockdb: "open" the lock database, as specified in the global server configuration. If force is TRUE, then the database is opened now, rather than lazily. Note that only one can be open read/write. 
Name: dav_generic_close_lockdb; Comment: dav_generic_close_lockdb: Close it. Duh. 
Name: dav_generic_build_key; Comment: dav_generic_build_key Given a pathname, build a DAV_TYPE_FNAME lock database key. 
Name: dav_generic_lock_expired; Comment: dav_generic_lock_expired: return 1 (true) if the given timeout is in the past or present (the lock has expired), or 0 (false) if in the future (the lock has not yet expired). 
Name: dav_generic_save_lock_record; Comment: dav_generic_save_lock_record: Saves the lock information specified in the direct and indirect lock lists about path into the lock database. If direct and indirect == NULL, the key is removed. 
Name: dav_generic_load_lock_record; Comment: None creates linked lists of the direct and indirect locks. If add_method = DAV_APPEND_LIST, the result will be appended to the head of the direct and indirect lists supplied. Passive lock removal: If lock has timed out, it will not be returned. ### How much "logging" does RFC 2518 require? 
Name: dav_generic_resolve; Comment: resolve <indirect>, returning <*direct> 
Name: dav_generic_get_supportedlock; Comment: dav_generic_get_supportedlock: Returns a static string for all supportedlock properties. I think we save more returning a static string than constructing it every time, though it might look cleaner. 
Name: dav_generic_remove_locknull_state; Comment: ---------------------------------------------------------------General lock functions 
Name: dav_lock_cmd_davlockdb; Comment: Command handler for the DAVGenericLockDB directive, which is TAKE1 
Name: dav_cmd_dav; Comment: Command handler for the DAV directive, which is TAKE1. 
Name: dav_cmd_davdepthinfinity; Comment: Command handler for the DAVDepthInfinity directive, which is FLAG. 
Name: dav_cmd_davmintimeout; Comment: Command handler for DAVMinTimeout directive, which is TAKE1 
Name: dav_error_response; Comment: dav_error_response() Send a nice response back to the user. In most cases, Apache doesn't allow us to provide details in the body about what happened. This function allows us to completely specify the response body. ### this function is not logging any errors! (e.g. the body)
Name: dav_error_response_tag; Comment: Send a "standardized" error response based on the error's namespace & tag 
Name: dav_xml_escape_uri; Comment: Apache's URI escaping does not replace '&' since that is a valid character in a URI (to form a query section). We must explicitly handle it so that we can embed the URI into an XML document. 
Name: dav_log_err; Comment: dav_log_err() Write error information to the log. 
Name: dav_created; Comment: handy function for return values of methods that (may) create things.locn if provided is assumed to be escaped. 
Name: dav_get_resource; Comment: resolve a request URI to a resource descriptor.If label_allowed != 0, then allow the request target to be altered by a Label: header. If use_checked_in is true, then the repository provider should return the resource identified by the DAV:checked-in property of the resource identified by the Request-URI. 
Name: dav_parse_range; Comment: *@return 1 if valid content-range, 0 if no content-range, -1 if malformed content-range 
Name: dav_method_get; Comment: handle the GET method 
Name: dav_method_post; Comment: validate resource/locks on POST, then pass to the default handler 
Name: dav_method_put; Comment: handle the PUT method 
Name: dav_stream_response; Comment: Use POOL to temporarily construct a dav_response object (from WRES STATUS, and PROPSTATS) and stream it via WRES's ctx->brigade. 
Name: dav_method_delete; Comment: handle the DELETE method 
Name: dav_gen_supported_methods; Comment: generate DAV:supported-method-set OPTIONS response 
Name: dav_gen_supported_live_props; Comment: generate DAV:supported-live-property-set OPTIONS response 
Name: dav_gen_supported_reports; Comment: generate DAV:supported-report-set OPTIONS response 
Name: dav_method_search; Comment: handle the SEARCH method 
Name: dav_method_options; Comment: handle the OPTIONS method 
Name: dav_method_propfind; Comment: handle the PROPFIND method 
Name: dav_process_ctx_list; Comment: Call <func> for each context. This can stop when an error occurs, or simply iterate through the whole list. Returns 1 if an error occurs (and the iteration is aborted). Returns 0 if all elements are processed. If <reverse> is true (non-zero), then the list is traversed in reverse order. 
Name: dav_method_proppatch; Comment: handle the PROPPATCH method 
Name: dav_method_mkcol; Comment: handle the MKCOL method 
Name: dav_method_copymove; Comment: handle the COPY and MOVE methods 
Name: dav_method_lock; Comment: dav_method_lock: Handler to implement the DAV LOCK method Returns appropriate HTTP_* response. 
Name: dav_method_unlock; Comment: dav_method_unlock: Handler to implement the DAV UNLOCK method Returns appropriate HTTP_* response. 
Name: dav_method_checkout; Comment: handle the CHECKOUT method 
Name: dav_method_uncheckout; Comment: handle the UNCHECKOUT method 
Name: dav_method_checkin; Comment: handle the CHECKIN method 
Name: dav_handler; Comment: Response handler for DAV resources 
Name: dav_rw_liveprop; Comment: is the live property read/write? 
Name: dav_do_prop_subreq; Comment: do a sub-request to fetch properties for the target resource's URI. 
Name: dav_add_if_resource; Comment: add_if_resource returns a new if_header, linking it to next_ih. 
Name: dav_add_if_state; Comment: add_if_state adds a condition to an if_header. 
Name: dav_fetch_next_token; Comment: fetch_next_token returns the substring from str+1to the next occurrence of char term, or _0, whichever occurs first. Leading whitespace is ignored. 
Name: dav_process_if_header; Comment: dav_process_if_header: If NULL (no error) is returned, then if_header points to the "If" productions structure (or NULL if "If" is not present). ### this part is bogus: If an error is encountered, the error is logged. Parent should return err->status. 
Name: dav_validate_resource_state; Comment: dav_validate_resource_state: Returns NULL if path/uri meets if-header and lock requirements 
Name: dav_validate_walker; Comment: dav_validate_walker: Walker callback function to validate resource state 
Name: dav_meets_conditions; Comment: If-* header checking 
Name: dav_can_auto_checkout; Comment: dav_can_auto_checkoutDetermine whether auto-checkout is enabled for a resource. r - the request_rec resource - the resource auto_version - the value of the auto_versionable hook for the resource lockdb - pointer to lock database (opened if necessary) auto_checkout - set to 1 if auto-checkout enabled 
Name: dav_lock_walker; Comment: dav_lock_walker: Walker callback function to record indirect locks 
Name: dav_unlock_walker; Comment: dav_unlock_walker: Walker callback function to remove indirect locks 
Name: dav_get_direct_resource; Comment: ** dav_get_direct_resource: ** ** Find a lock on the specified resource, then return the resource the ** lock was applied to (in other words, given a (possibly) indirect lock, ** return the direct lock's corresponding resource). ** ** If the lock is an indirect lock, this usually means traversing up the ** namespace [repository] hierarchy. Note that some lock providers may be ** able to return this information with a traversal. 
Name: dav_inherit_walker; Comment: dav_inherit_walker: Walker callback function to inherit locks 
Name: dav_inherit_locks; Comment: ** dav_inherit_locks: When a resource or collection is added to a collection, ** locks on the collection should be inherited to the resource/collection. ** (MOVE, MKCOL, etc) Here we propagate any direct or indirect locks from ** parent of resource to resource and below. 
Name: dumpit; Comment: Workhorse function: simply log to the current error_log info about the data in the bucket as well as the data itself 
Name: our_dconfig; Comment: Locate our directory configuration record for the current request. 
Name: our_sconfig; Comment: Locate our server configuration record for the specified server. 
Name: our_rconfig; Comment: Likewise for our configuration record for the specified request. 
Name: our_cconfig; Comment: Likewise for our configuration record for a connection. 
Name: trace_startup; Comment: This utility routine traces the hooks called when the server starts up. It leaves a trace in a global variable, so it should not be called from a hook handler that runs in a multi-threaded situation. 
Name: cmd_example; Comment: Command handler for the NO_ARGS "Example" directive. All we do is mark the call in the trace log, and flag the applicability of the directive to the current location in that location's configuration record. 
Name: x_create_dir_config; Comment: This function gets called to create a per-directory configuration record. This will be called for the "default" server environment, and for each directory for which the parser finds any of our directives applicable. If a directory doesn't have any of our directives involved (i.e., they aren't in the .htaccess file, or a <Location>, <Directory>, or related block), this routine will *not* be called - the configuration for the closest ancestor is used. The return value is a pointer to the created module-specific structure. 
Name: x_merge_dir_config; Comment: This function gets called to merge two per-directory configuration records. This is typically done to cope with things like .htaccess files or <Location> directives for directories that are beneath one for which a configuration record was already created. The routine has the responsibility of creating a new record and merging the contents of the other two into it appropriately. If the module doesn't declare a merge routine, the record for the closest ancestor location (that has one) is used exclusively. The routine MUST NOT modify any of its arguments! The return value is a pointer to the created module-specific structure containing the merged values. 
Name: x_create_server_config; Comment: This function gets called to create a per-server configuration record. It will always be called for the "default" server. The return value is a pointer to the created module-specific structure. 
Name: x_merge_server_config; Comment: This function gets called to merge two per-server configuration records. This is typically done to cope with things like virtual hosts and the default server configuration The routine has the responsibility of creating a new record and merging the contents of the other two into it appropriately. If the module doesn't declare a merge routine, the more specific existing record is used exclusively. The routine MUST NOT modify any of its arguments! The return value is a pointer to the created module-specific structure containing the merged values. 
Name: x_pre_config; Comment: This routine is called before the server processes the configuration files. There is no return value. 
Name: x_check_config; Comment: This routine is called after the server processes the configuration files. At this point the module may review and adjust its configuration settings in relation to one another and report any problems. On restart, this routine will be called twice, once in the startup process (which exits shortly after this phase) and once in the running server process. The return value is OK, DECLINED, or HTTP_mumble. If we return OK, the server will still call any remaining modules with an handler for this phase. 
Name: x_test_config; Comment: This routine is called when the -t command-line option is supplied. It executes only once, in the startup process, after the check_config phase and just before the process exits. At this point the module may output any information useful in configuration testing. This is a VOID hook: all defined handlers get called. 
Name: x_open_logs; Comment: This routine is called to perform any module-specific log file openings. It is invoked just before the post_config phase The return value is OK, DECLINED, or HTTP_mumble. If we return OK, the server will still call any remaining modules with an handler for this phase. 
Name: x_post_config; Comment: This routine is called after the server finishes the configuration process. At this point the module may review and adjust its configuration settings in relation to one another and report any problems. On restart, this routine will be called only once, in the running server process. The return value is OK, DECLINED, or HTTP_mumble. If we return OK, the server will still call any remaining modules with an handler for this phase. 
Name: x_child_exit; Comment: All our process-death routine does is add its trace to the log. 
Name: x_child_init; Comment: All our process initialiser does is add its trace to the log. This is a VOID hook: all defined handlers get called. 
Name: x_http_scheme; Comment: The hook runner for ap_hook_http_scheme is aliased to ap_http_scheme(), a routine that the core and other modules call when they need to know the URL scheme for the request. For instance, mod_ssl returns "https" if the server_rec associated with the request has SSL enabled. This hook was named 'ap_hook_http_method' in httpd 2.0. This is a RUN_FIRST hook: the first handler to return a non NULL value aborts the handler chain. The http_core module inserts a fallback handler (with APR_HOOK_REALLY_LAST preference) that returns "http". 
Name: x_default_port; Comment: The runner for this hook is aliased to ap_default_port(), which the core and other modules call when they need to know the default port for a particular server. This is used for instance to omit the port number from a Redirect response Location header URL if the port number is equal to the default port for the service (like 80 for http). This is a RUN_FIRST hook: the first handler to return a non-zero value is the last one executed. The http_core module inserts a fallback handler (with APR_HOOK_REALLY_LAST order specifier) that returns 80. 
Name: x_insert_filter; Comment: This routine is called just before the handler gets invoked. It allows a module to insert a previously defined filter into the filter chain. No filter has been defined by this module, so we just log the call and exit. This is a VOID hook: all defined handlers get called. 
Name: x_insert_error_filter; Comment: This routine is called to insert a previously defined error filter into the filter chain as the request is being processed. For the purpose of this example, we don't have a filter to insert, so just add to the trace and exit. This is a VOID hook: all defined handlers get called. 
Name: x_handler; Comment: Sample content handler. All this does is display the call list that has been built up so far. This routine gets called for every request, unless another handler earlier in the callback chain has already handled the request. It is up to us to test the request_rec->handler field and see whether we are meant to handle this request. The content handler gets to write directly to the client using calls like ap_rputs() and ap_rprintf() This is a RUN_FIRST hook. 
Name: x_quick_handler; Comment: The quick_handler hook presents modules with a very powerful opportunity to serve their content in a very early request phase. Note that this handler can not serve any requests from the file system because hooks like map_to_storage have not run. The quick_handler hook also runs before any authentication and access control. This hook is used by mod_cache to serve cached content. This is a RUN_FIRST hook. Return OK if you have served the request, DECLINED if you want processing to continue, or a HTTP_* error code to stop processing the request. 
Name: x_pre_connection; Comment: This routine is called just after the server accepts the connection, but before it is handed off to a protocol module to be served. The point of this hook is to allow modules an opportunity to modify the connection as soon as possible. The core server uses this phase to setup the connection record based on the type of connection that is being used. This is a RUN_ALL hook. 
Name: x_process_connection; Comment: This routine is used to actually process the connection that was received.Only protocol modules should implement this hook, as it gives them an opportunity to replace the standard HTTP processing with processing for some other protocol. Both echo and POP3 modules are available as examples. This is a RUN_FIRST hook. 
Name: x_pre_read_request; Comment: This routine is called after the request has been read but before any other phases have been processed. This allows us to make decisions based upon the input header fields. This is a HOOK_VOID hook. 
Name: x_post_read_request; Comment: This routine is called after the request has been read but before any other phases have been processed. This allows us to make decisions based upon the input header fields. This is a RUN_ALL hook. 
Name: x_translate_name; Comment: This routine gives our module an opportunity to translate the URI into an actual filename. If we don't do anything special, the server's default rules (Alias directives and the like) will continue to be followed. This is a RUN_FIRST hook. 
Name: x_map_to_storage; Comment: This routine maps r->filename to a physical file on disk. Useful for overriding default core behavior, including skipping mapping for requests that are not file based. This is a RUN_FIRST hook. 
Name: x_header_parser; Comment: this routine gives our module another chance to examine the request headers and to take special action. This is the first phase whose hooks' configuration directives can appear inside the <Directory> and similar sections, because at this stage the URI has been mapped to the filename. For example this phase can be used to block evil clients, while little resources were wasted on these. This is a RUN_ALL hook. 
Name: x_check_access; Comment: This routine is called to check for any module-specific restrictions placed upon the requested resource. (See the mod_access_compat module for an example.) This is a RUN_ALL hook. The first handler to return a status other than OK or DECLINED (for instance, HTTP_FORBIDDEN) aborts the callback chain. 
Name: x_check_authn; Comment: This routine is called to check the authentication information sent with the request (such as looking up the user in a database and verifying that the [encrypted] password sent matches the one in the database). This is a RUN_FIRST hook. The return value is OK, DECLINED, or some HTTP_mumble error (typically HTTP_UNAUTHORIZED). 
Name: x_check_authz; Comment: This routine is called to check to see if the resource being requested requires authorisation. This is a RUN_FIRST hook. The return value is OK, DECLINED, or HTTP_mumble. If we return OK, no other modules are called during this phase. If *all* modules return DECLINED, the request is aborted with a server error. 
Name: x_type_checker; Comment: This routine is called to determine and/or set the various document type information bits, like Content-type (via r->content_type), language, et cetera. This is a RUN_FIRST hook. 
Name: x_fixups; Comment: This routine is called to perform any module-specific fixing of header fields, et cetera. It is invoked just before any content-handler. This is a RUN_ALL HOOK. 
Name: x_log_transaction; Comment: This routine is called to perform any module-specific logging activities over and above the normal server things. This is a RUN_ALL hook. 
Name: x_get_suexec_identity; Comment: This routine is called to find out under which user id to run suexec Unless our module runs CGI programs, there is no reason for us to mess with this information. This is a RUN_FIRST hook. The return value is a pointer to an ap_unix_identity_t or NULL. 
Name: x_create_connection; Comment: This routine is called to create a connection. This hook is implemented by the Apache core: there is no known reason a module should override it. This is a RUN_FIRST hook. Return NULL to decline, a valid conn_rec pointer to accept. 
Name: x_get_mgmt_items; Comment: This hook is defined in server/core.c, but it is not actually called or documented. This is a RUN_ALL hook. 
Name: x_create_request; Comment: This routine gets called shortly after the request_rec structure is created. It provides the opportunity to manipulae the request at a very early stage. This is a RUN_ALL hook. 
Name: x_pre_mpm; Comment: This routine gets called during the startup of the MPM. No known existing module implements this hook. This is a RUN_ALL hook. 
Name: x_monitor; Comment: This hook gets run periodically by a maintenance function inside the MPM. Its exact purpose is unknown and undocumented at this time. This is a RUN_ALL hook. 
Name: x_register_hooks; Comment: Each function our module provides to handle a particular hook is specified here. The functions are registered using ap_hook_foo(name, predecessors, successors, position) where foo is the name of the hook. The args are as follows: name -> the name of the function to call. predecessors -> a list of modules whose calls to this hook must be invoked before this module. successors -> a list of modules whose calls to this hook must be invoked after this module. position -> The relative position of this module. One of APR_HOOK_FIRST, APR_HOOK_MIDDLE, or APR_HOOK_LAST. Most modules will use APR_HOOK_MIDDLE. If multiple modules use the same relative position, Apache will determine which to call first. If your module relies on another module to run first, or another module running after yours, use the predecessors andor successors. The number in brackets indicates the order in which the routine is called during request processing. Note that not all routines are necessarily called (such as if a resource doesn't have access restrictions). The actual delivery of content to the browser [9] is not handled by a hook; see the handler declarations below. 
Name: shm_cleanup_wrapper; Comment: Clean up the shared memory block. This function is registered as cleanup function for the configuration pool, which gets called on restarts. It assures that the new children will not talk to a stale shared memory segment. 
Name: exipc_pre_config; Comment: This routine is called in the parent; we must register ourmutex type before the config is processed so that users can adjust the mutex settings using the Mutex directive. 
Name: exipc_post_config; Comment: This routine is called in the parent, so we'll set up the shared memory segment and mutex here. 
Name: exipc_child_init; Comment: This routine gets called when a child inits. We use it to attach to the shared memory segment, and reinitialize the mutex. 
Name: exipc_handler; Comment: The sample content handler 
Name: buffer_out_filter; Comment: *Buffer buckets being written to the output filter stack. 
Name: buffer_in_filter; Comment: *Buffer buckets being read from the input filter stack. 
Name: add_charset_source; Comment: CharsetSourceEnc charset 
Name: add_charset_default; Comment: CharsetDefault charset 
Name: add_charset_options; Comment: CharsetOptions optionflag... 
Name: find_code_page; Comment: find_code_page() is a fixup hook that checks if the module isconfigured and the input or output potentially need to be translated. If so, context is initialized for the filters. 
Name: xlate_insert_filter; Comment: xlate_insert_filter() is a filter hook which decides whether or notto insert a translation filter for the current request. 
Name: send_bucket_downstream; Comment: stuff that sucks that I know of: bucket handling: why create an eos bucket when we see it come down the stream? just send the one passed as input... news flash: this will be fixed when xlate_out_filter() starts using the more generic xlate_brigade() translation mechanics: we don't handle characters that straddle more than two buckets; an error will be generated 
Name: send_downstream; Comment: send_downstream() is passed the translated data; it puts it in a single-bucket brigade and passes the brigade to the next filter 
Name: chk_filter_chain; Comment: chk_filter_chain() is called once per filter instance; it tries todetermine if the current filter instance should be disabled because its translation is incompatible with the translation of an existing instance of the translate filter Example bad scenario: configured filter chain for the request: INCLUDES XLATEOUT(8859-1->UTS-16) configured filter chain for the subrequest: XLATEOUT(8859-1->UTS-16) When the subrequest is processed, the filter chain will be XLATEOUT(8859-1->UTS-16) XLATEOUT(8859-1->UTS-16) This makes no sense, so the instance of XLATEOUT added for the subrequest will be noop-ed. Example good scenario: configured filter chain for the request: INCLUDES XLATEOUT(8859-1->UTS-16) configured filter chain for the subrequest: XLATEOUT(IBM-1047->8859-1) When the subrequest is processed, the filter chain will be XLATEOUT(IBM-1047->8859-1) XLATEOUT(8859-1->UTS-16) This makes sense, so the instance of XLATEOUT added for the subrequest will be left alone and it will translate from IBM-1047->8859-1. 
Name: xlate_brigade; Comment: xlate_brigade() is used to filter request and response bodies we'll stop when one of the following occurs: . we run out of buckets . we run out of space in the output buffer . we hit an error or metadata inputs: bb: brigade to process buffer: storage to hold the translated characters buffer_avail: size of buffer (and a few more uninteresting parms) outputs: return value: APR_SUCCESS or some error code bb: we've removed any buckets representing the translated characters; the eos bucket, if present, will be left in the brigade buffer: filled in with translated characters buffer_avail: updated with the bytes remaining hit_eos: did we hit an EOS bucket? 
Name: xlate_out_filter; Comment: xlate_out_filter() handles (almost) arbitrary conversions from one charsetto another... translation is determined in the fixup hook (find_code_page), which is where the filter's context data is set up... the context data gives us the translation handle 
Name: data_out_filter; Comment: * Create a data URL as follows: data:[<mime-type>;][charset=<charset>;]base64,<payload>Where: mime-type: The mime type of the original response. charset: The optional character set corresponding to the mime type. payload: A base64 version of the response body. The content type of the response is set to text/plain. The Content-Length header, if present, is updated with the new content length based on the increase in size expected from the base64 conversion. If the Content-Length header is too large to fit into an int, we remove the Content-Length header instead. 
Name: check_gzip; Comment: Check whether a request is gzipped, so we can un-gzip it.If a request has multiple encodings, we need the gzip to be the outermost non-identity encoding. 
Name: putLong; Comment: Outputs a long in LSB order to the given fileonly the bottom 4 bits are required for the deflate file format. 
Name: getLong; Comment: Inputs a string and returns a long. 
Name: deflate_check_etag; Comment: ETag must be unique among the possible representations, so a changeto content-encoding requires a corresponding change to the ETag. This routine appends -transform (e.g., -gzip) to the entity-tag value inside the double-quotes if an ETag has already been set and its value already contains double-quotes. PR 39727 
Name: check_ratio; Comment: Check whether the (inflate) ratio exceeds the configured limit/burst. 
Name: deflate_in_filter; Comment: This is the deflate input filter (inflates). 
Name: inflate_out_filter; Comment: Filter to inflate for a content-transforming proxy. 
Name: init_ext_filter_process; Comment: init_ext_filter_process: get the external filter process goingThis is per-filter-instance (i.e., per-request) initialization. 
Name: drain_available_output; Comment: drain_available_output():if any data is available from the filter, read it and append it to the bucket brigade 
Name: ef_unified_filter; Comment: ef_unified_filter:runs the bucket brigade bb through the filter and puts the result into bb, dropping the previous content of bb (the input) 
Name: decodehtml; Comment: Note: this function is deprecated in favour of apr_unescape_entity() in APR 
Name: ap_ssi_parse_string; Comment: Do variable substitution on strings (Note: If out==NULL, this function allocs a buffer for the resulting string from ctx->pool. The return value is always the parsed string) 
Name: re_check; Comment: +-------------------------------------------------------+ | | | Conditional Expression Parser | | +-------------------------------------------------------+ 
Name: parse_ap_expr; Comment: same as above, but use common ap_expr syntax / API 
Name: ap_ssi_get_tag_and_value; Comment: Extract the next tag name and value. If there are no more tags, set the tag name to NULL. The tag value is html decoded if dodecode is non-zero. The tag value may be NULL if there is no tag value.. 
Name: handle_comment; Comment: <!--#comment blah blah blah ... --> 
Name: handle_include; Comment: <!--#include virtual|file="..." [onerror|virtual|file="..."] ... -->Output each file/virtual in turn until one of them returns an error. On error, ignore all further file/virtual attributes until we reach an onerror attribute, where we make an attempt to serve the onerror virtual url. If onerror fails, or no onerror is present, the default error string is inserted into the stream. 
Name: brigade_append; Comment: Append bbIn to bbOut and merge small buckets, to avoid DoS by high memory usage 
Name: keep_body_filter; Comment: *This is the KEEP_BODY_INPUT filter for HTTP requests, for times when the body should be set aside for future use by other modules. 
Name: kept_body_filter_init; Comment: *Initialisation of filter to handle a kept body on subrequests. If a body is to be reinserted into a subrequest, any chunking will have been removed from the body during storage. We need to change the request from Transfer-Encoding: chunked to an explicit Content-Length. 
Name: kept_body_filter; Comment: *Filter to handle a kept body on subrequests. If a body has been previously kept by the request, and if a subrequest wants to re-insert the body into the request, this input filter makes it happen. 
Name: request_is_filter_present; Comment: *Check whether this filter is not already present. 
Name: ap_request_insert_filter; Comment: *Insert filter hook. Add the KEEP_BODY filter to the request, if the admin wants to keep the body using the KeptBodySize directive. As a precaution, any pre-existing instances of either the kept_body or keep_body filters will be removed before the filter is added. @param r The request 
Name: ap_request_remove_filter; Comment: *Remove the kept_body and keep body filters from this specific request. 
Name: log_sed_errf; Comment: This function will be call back from libsed functions if there is any errorhappend during execution of sed scripts 
Name: sed_compile_errf; Comment: This function will be call back from libsed functions if there is anycompilation error. 
Name: clear_ctxpool; Comment: clear the temporary pool (used for transient buckets) 
Name: alloc_outbuf; Comment: alloc_outbufallocate output buffer 
Name: append_bucket; Comment: append_bucketAllocate a new bucket from buf and sz and append to ctx->bb 
Name: flush_output_buffer; Comment: flush_output_buffer Flush the output data (stored in ctx->outbuf) 
Name: sed_write_output; Comment: This is a call back function. When libsed wants to generate the output,this function will be invoked. 
Name: compile_sed_expr; Comment: Compile a sed expression. Compiled context is saved in sed_cfg->sed_cmds.Memory required for compilation context is allocated from cmd->pool. 
Name: sed_eval_cleanup; Comment: sed eval cleanup function 
Name: init_context; Comment: Initialize sed filter context. If successful then context is set in f->ctx 
Name: sed_response_filter; Comment: Entry function for Sed output filter 
Name: sed_request_filter; Comment: Entry function for Sed input filter 
Name: fix_skipto; Comment: Different modules may apply different rules here. Ho, hum. 
Name: regerr; Comment: 
Name: if; Comment: fast check for first character 
Name: while; Comment: int value of *ep 
Name: sed_init_commands; Comment: sed_init_commands 
Name: sed_destroy_commands; Comment: sed_destroy_commands 
Name: sed_compile_string; Comment: sed_compile_string 
Name: sed_compile_file; Comment: sed_compile_file 
Name: sed_get_finalize_error; Comment: sed_get_finalize_error 
Name: sed_canbe_finalized; Comment: sed_canbe_finalized 
Name: check_finalized; Comment: check_finalized 
Name: dechain; Comment: dechain 
Name: fcomp; Comment: fcomp 
Name: rline; Comment: rline 
Name: address; Comment: address 
Name: text; Comment: text 
Name: search; Comment: search 
Name: ycomp; Comment: ycomp 
Name: comple; Comment: comple 
Name: alloc_reptr; Comment: alloc_reptr 
Name: grow_buffer; Comment: grow_buffer 
Name: grow_line_buffer; Comment: grow_line_buffer 
Name: grow_hold_buffer; Comment: grow_hold_buffer 
Name: grow_gen_buffer; Comment: grow_gen_buffer 
Name: appendmem_to_linebuf; Comment: appendmem_to_linebuf 
Name: append_to_linebuf; Comment: append_to_linebuf 
Name: copy_to_linebuf; Comment: copy_to_linebuf 
Name: append_to_holdbuf; Comment: append_to_holdbuf 
Name: copy_to_holdbuf; Comment: copy_to_holdbuf 
Name: append_to_genbuf; Comment: append_to_genbuf 
Name: copy_to_genbuf; Comment: copy_to_genbuf 
Name: sed_init_eval; Comment: sed_init_eval 
Name: sed_reset_eval; Comment: sed_reset_eval 
Name: sed_destroy_eval; Comment: sed_destroy_eval 
Name: sed_eval_file; Comment: sed_eval_file 
Name: sed_eval_buffer; Comment: sed_eval_buffer 
Name: sed_finalize_eval; Comment: sed_finalize_eval 
Name: execute; Comment: execute 
Name: match; Comment: match 
Name: substitute; Comment: substitute 
Name: dosub; Comment: dosub 
Name: place; Comment: place 
Name: command; Comment: command 
Name: arout; Comment: arout 
Name: wline; Comment: wline 
Name: emit_preamble; Comment: This routine puts the standard HTML header at the top of the index page. We include the DOCTYPE because we may be using features therefrom (i.e., HEIGHT and WIDTH attributes on the icons if we're FancyIndexing). 
Name: do_emit_plain; Comment: emit a plain text file 
Name: emit_head; Comment: Handle the preamble through the H1 tag line, inclusive. Locate the file with a subrequests. Process texthtml documents by actually running the subrequest; textxxx documents get copied verbatim,and any other content type is ignored. This means that a non-text document (such as HEADER.gif) might get multiviewed as the result instead of a text document, meaning nothing will be displayed, but oh well. 
Name: emit_tail; Comment: Handle the Readme file through the postamble, inclusive. Locate the file with a subrequests. Process texthtml documents by actually running the subrequest; textxxx documents get copied verbatim,and any other content type is ignored. This means that a non-text document (such as FOOTER.gif) might get multiviewed as the result instead of a text document, meaning nothing will be displayed, but oh well. 
Name: emit_link; Comment: Emit the anchor for the specified field. If a field is the key for the current request, the link changes its meaning to reverse the order when selected again. Non-active fields always start in ascending order. 
Name: dsortf; Comment: Compare two file entries according to the sort criteria. The return is essentially a signum function value. 
Name: handle_autoindex; Comment: The formal handler... 
Name: is_scriptaliased; Comment: KLUDGE --- for back-combatibility, we don't have to check ExecCGIin ScriptAliased directories, which means we need to know if this request came through ScriptAlias or not... so the Alias module leaves a note for us. 
Name: log_script_err; Comment: Soak up stderr from a script and redirect it to the error log. 
Name: add_ssi_vars; Comment: This is the special environment used for running the "exec cmd=" variety of SSI directives. 
Name: cgi_bucket_create; Comment: Create a CGI bucket using pipes from script stdout 'out'and stderr 'err', for request 'r'. 
Name: cgi_bucket_dup; Comment: Create a duplicate CGI bucket using given bucket data 
Name: cgi_read_stdout; Comment: Handle stdout from CGI child. Duplicate of logic from the _readmethod of the real APR pipe bucket implementation. 
Name: cgi_bucket_read; Comment: Read method of CGI bucket: polls on stderr and stdout of the child,sending any stderr output immediately away to the error log. 
Name: include_cgi; Comment: ============================================================================ *============================================================================ This is the beginning of the cgi filter code moved from mod_include. This is the code required to handle the "exec" SSI directive. *============================================================================ *============================================================================
Name: cgi_post_config; Comment: ============================================================================ *============================================================================ This is the end of the cgi filter code moved from mod_include. *============================================================================ *============================================================================
Name: cgid_suexec_id_doer; Comment: This doer will only ever be called when we are sure that we havea valid ugid. 
Name: create_argv; Comment: This routine is called to create the argument list to be passed to the CGI script. When suexec is enabled, the suexec path, user, and group are the first three arguments to be passed; if not, all threemust be NULL. The query info is split into separate arguments, where "+" is the separator between keyword arguments. Do not process the args if they containing an '=' assignment. 
Name: sock_read; Comment: deal with incomplete reads and signalsassume you really have to read buf_size bytes 
Name: sock_write; Comment: deal with signals 
Name: register_hook; Comment: ============================================================================ *============================================================================ This is the end of the cgi filter code moved from mod_include. *============================================================================ *============================================================================
Name: format_byte_out; Comment: Format the number of bytes nicely 
Name: mkconfig; Comment: Create a configuration specific to this module for a server or directory location, and fill it with the default settings. 
Name: create_mconfig_for_server; Comment: Respond to a callback to create configuration record for a server or vhost environment. 
Name: create_mconfig_for_directory; Comment: Respond to a callback to create a config record for a specific directory. 
Name: ap_set_byterange; Comment: Returns: number of ranges (merged) or -1 for no-good 
Name: use_range_x; Comment: Here we try to be compatible with clients that want multipart/x-byteranges instead of multipart/byteranges (also see above), as per HTTP/1.1. We look for the Request-Range header (e.g. Netscape 2 and 3) as an indication that the browser supports an older protocol. We also check User-Agent for Microsoft Internet Explorer 3, which needs this as well. 
Name: bail_out_on_error; Comment: bail out if some error in the HTTP input filter happens 
Name: parse_chunk_size; Comment: *Parse a chunk line with optional extension, detect overflow. There are several error cases: 1) If the chunk link is misformatted, APR_EINVAL is returned. 2) If the conversion would require too many bits, APR_EGENERAL is returned. 3) If the conversion used the correct number of bits, but an overflow caused only the sign bit to flip, then APR_ENOSPC is returned. A negative chunk length always indicates an overflow error. 
Name: ap_http_filter; Comment: This is the HTTP_INPUT filter for HTTP requests and responses fromproxied servers (mod_proxy). It handles chunked and content-length bodies. This can only be inserted/used after the headers are successfully parsed. 
Name: check_header; Comment: check a single header, to be used with apr_table_do() 
Name: check_headers; Comment: *Check headers for HTTP conformance @return 1 if ok, 0 if bad 
Name: form_header_field; Comment: Send a single HTTP header field to the client. Note that this functionis used in calls to apr_table_do(), so don't change its interface. It returns true unless there was a write error of some kind. 
Name: uniq_field_values; Comment: This routine is called by apr_table_do and merges all instances ofthe passed field values into a single array that will be further processed by some later routine. Originally intended to help split and recombine multiple Vary fields, though it is generic to any field consisting of comma/space-separated tokens. 
Name: fixup_vary; Comment: Since some clients choke violently on multiple Vary fields, or Vary fields with duplicate tokens, combine any multiples and remove any duplicates. 
Name: send_all_header_fields; Comment: Send a request's HTTP response headers to the client. 
Name: validate_status_line; Comment: Confirm that the status line is well-formed and matches r->status.If they don't match, a filter may have negated the status line set by a handler. Zap r->status_line if bad. 
Name: basic_http_header_check; Comment: Determine the protocol to use for the response. Potentially downgrade to HTTP/1.0 in some situations and/or turn off keepalives. also prepare r->status_line. 
Name: basic_http_header; Comment: fill "bb" with a barebones/initial HTTP response header 
Name: ap_http_outerror_filter; Comment: Filter to handle any error buckets on output 
Name: register_one_method; Comment: internal function to register one method/number pair 
Name: ap_method_registry_destroy; Comment: This internal function is used to clear the method registryand reset the cur_method_number counter. 
Name: make_allow; Comment: Build the Allow field-value from the request handler method mask. 
Name: get_canned_error_string; Comment: construct and return the default error message for a givenHTTP defined error code 
Name: update_r_in_filters; Comment: XXX A cleaner and faster way to do this might be to pass the request_rec down the filter chain as a parameter. It would need to change for subrequest vs. main request filters; perhaps the subrequest filter couldmake the switch. 
Name: overlay_extension_mappings; Comment: Overlay one hash table of extension_mappings onto another 
Name: remove_items; Comment: Member is the offset within an extension_info of the pointer to reset 
Name: remove_extension_type; Comment: As RemoveType should also override the info from TypesConfig, we add an empty string as type instead of actually removing the type. 
Name: remove_extension_info; Comment: Note handler names are un-added with each per_dir_config merge. This keeps the association from being inherited, but not from being re-added at a subordinate level. 
Name: set_types_config; Comment: The sole bit of server configuration that the MIME module has isthe name of its config file, so... 
Name: find_ct; Comment: find_ct is the hook routine for determining content-type and other MIME-related metadata. It assumes that r->filename has already been set and stat has been called for r->finfo. It also assumes that the non-path base file name is not the empty string unless it is a dir. 
Name: h2_alt_svc_parse; Comment: * Parse an Alt-Svc specifier as described in "HTTP Alternative Services" (https:tools.ietf.orghtmldraft-ietf-httpbis-alt-svc-04)with the following changes: - do not percent encode token values - do not use quotation marks 
Name: mutex_leave; Comment: ******************************************************************************bucket beam that can transport buckets across threads *****************************************************************************
Name: fix_vary; Comment: Since some clients choke violently on multiple Vary fields, or Vary fields with duplicate tokens, combine any multiples and remove any duplicates. 
Name: h2_h2_init; Comment: ******************************************************************************Once per lifetime init, retrieve optional functions 
Name: h2_mplx_create; Comment: *A h2_mplx needs to be thread-safe *and* if will be called by the h2_session thread *and* the h2_worker threads. Therefore: - calls are protected by a mutex lock, m->lock - the pool needs its own allocator, since apr_allocator_t are not re-entrant. The separate allocator works without a separate lock since we already protect h2_mplx itself. Since HTTP/2 connections can be expected to live longer than their HTTP/1 cousins, the separate allocator seems to work better than protecting a shared h2_session one with an own lock. 
Name: latest_repeatable_unsubmitted_iter; Comment: ******************************************************************************h2_mplx DoS protection *****************************************************************************
Name: h2_mplx_has_master_events; Comment: ******************************************************************************mplx master events dispatching *****************************************************************************
Name: h2_proxy_log2; Comment: h2_log2(n) iff n is a power of 2 
Name: h2_proxy_util_frame_print; Comment: ******************************************************************************frame logging *****************************************************************************
Name: h2_proxy_link_reverse_map; Comment: RFC 5988 <https://tools.ietf.org/html/rfc5988#section-6.2.1> Link = "Link" ":" #link-value link-value = "<" URI-Reference ">" ( ";" link-param ) link-param = ( ( "rel" "=" relation-types ) | ( "anchor" "=" <"> URI-Reference <"> ) | ( "rev" "=" relation-types ) | ( "hreflang" "=" Language-Tag ) | ( "media" "=" ( MediaDesc | ( <"> MediaDesc <"> ) ) ) | ( "title" "=" quoted-string ) | ( "title" "=" ext-value ) | ( "type" "=" ( media-type | quoted-mt ) ) | ( link-extension ) ) link-extension = ( parmname [ "=" ( ptoken | quoted-string ) ] ) | ( ext-name-star "=" ext-value ) ext-name-star = parmname "" ; reserved for RFC2231-profiled ; extensions. Whitespace NOT ; allowed in between. ptoken = 1ptokenchar ptokenchar = "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "" | "+" | "-" | "." | "" | DIGIT | ":" | "<" | "=" | ">" | "?" | "@" | ALPHA | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" media-type = type-name "" subtype-name quoted-mt = <"> media-type <"> relation-types = relation-type | <"> relation-type ( 1SP relation-type ) <"> relation-type = reg-rel-type | ext-rel-type reg-rel-type = LOALPHA ( LOALPHA | DIGIT | "." | "-" ) ext-rel-type = URI and from <https:tools.ietf.orghtmlrfc5987> parmname = 1attr-char attr-char = ALPHA DIGIT "!" "#" "$" "&" "+" "-" "." / "^" / "_" / "`" / "|" / "~" 
Name: policy_str; Comment: ******************************************************************************link header handling *****************************************************************************
Name: h2_push_diary_digest_get; Comment: * Get a cache digest as described in https:datatracker.ietf.orgdocdraft-kazuho-h2-cache-digestfrom the contents of the push diary. @param diary the diary to calculdate the digest from @param p the pool to use @param pdata on successful return, the binary cache digest @param plen on successful return, the length of the binary data 
Name: h2_push_diary_digest_set; Comment: * Initialize the push diary by a cache digest as described in https:datatracker.ietf.orgdocdraft-kazuho-h2-cache-digest. @param diary the diary to set the digest into @param data the binary cache digest @param len the length of the cache digest @return APR_EINVAL if digest was not successfully parsed 
Name: spri_cmp; Comment: *Determine the importance of streams when scheduling tasks. - if both stream depend on the same one, compare weights - if one stream is closer to the root, prioritize that one - if both are on the same level, use the weight of their root level ancestors 
Name: send_cb; Comment: Callback when nghttp2 wants to send bytes back to the client. 
Name: on_frame_recv_cb; Comment: *nghttp2 session has received a complete frame. Most are used by nghttp2 for processing of internal state. Some, like HEADER and DATA frames, we need to act on. 
Name: on_stream_headers; Comment: *headers for the stream are ready. 
Name: on_stream_resume; Comment: *A stream was resumed as new response/output data arrived. 
Name: dispatch_master; Comment: trigger window updates, stream resumes and submits 
Name: h2_switch_init; Comment: ******************************************************************************Once per lifetime init, retrieve optional functions 
Name: input_ser_header; Comment: ******************************************************************************task input handling *****************************************************************************
Name: open_output; Comment: ******************************************************************************task output handling *****************************************************************************
Name: slave_out; Comment: Bring the data from the brigade (which represents the result of therequest_rec out filter chain) into the h2_mplx for further sending on the master connection. 
Name: h2_filter_slave_in; Comment: ******************************************************************************task slave connection filters *****************************************************************************
Name: h2_task_can_redo; Comment: ******************************************************************************task things *****************************************************************************
Name: h2_task_init; Comment: post config init 
Name: h2_log2; Comment: h2_log2(n) iff n is a power of 2 
Name: last_not_included; Comment: ******************************************************************************h2_util for bucket brigades *****************************************************************************
Name: h2_util_ignore_header; Comment: ******************************************************************************h2_ngheader *****************************************************************************
Name: h2_req_create; Comment: ******************************************************************************h2 request handling *****************************************************************************
Name: h2_util_frame_print; Comment: ******************************************************************************frame logging *****************************************************************************
Name: h2_push_policy_determine; Comment: ******************************************************************************push policy *****************************************************************************
Name: get_next; Comment: *Get the next task for the given worker. Will block until a task arrives or the max_wait timer expires and more than min workers exist. 
Name: h2_post_config; Comment: The module initialization. Called once as apache hook, before any multi processing (threaded or not) happens. It is typically at least called twice, see http:wiki.apache.orghttpdModuleLifeSince the first run is just a "practise" run, we want to initialize for real only on the second try. This defeats the purpose of the first dry run a bit, since apache wants to verify that a new configuration actually will work. So if we have trouble with the configuration, this will only be detected when the server has already switched. On the other hand, when we initialize lib nghttp2, all possible crazy things might happen and this might even eat threads. So, better init on the real invocation, for now at least. 
Name: h2_child_init; Comment: Runs once per created child process. Perform any process related initionalization here. 
Name: h2_hooks; Comment: Install this module into the apache2 infrastructure. 
Name: proxy_http2_canon; Comment: *canonicalize the url into the request, if it is meant for us. slightly modified copy from mod_http 
Name: util_ldap_handler; Comment: Status Handler -------------- This handler generates a status page about the current performance of the LDAP cache. It is enabled as follows: <Location /ldap-status> SetHandler ldap-status </Location> 
Name: uldap_connection_close; Comment: Closes an LDAP connection by unlocking it. The next time uldap_connection_find() is called this connection will be available for reuse. 
Name: uldap_connection_unbind; Comment: Destroys an LDAP connection by unbinding and closing the connection to the LDAP server. It is used to bring the connection back to a known state after an error. 
Name: util_ldap_connection_remove; Comment: util_ldap_connection_remove frees all storage associated with the LDAP connection and removes it completely from the per-virtualhost list of connections The caller should hold the lock for this connection 
Name: uldap_simple_bind; Comment: Replacement function for ldap_simple_bind_s() with a timeout. To do this in a portable way, we have to use ldap_simple_bind() and ldap_result(). Returns LDAP_SUCCESS on success; and an error code on failure 
Name: uldap_connection_open; Comment: Connect to the LDAP server and binds. Does not connect if already connected (i.e. ldc->ldap is non-NULL.) Does not bind if already bound. Returns LDAP_SUCCESS on success; and an error code on failure 
Name: compare_client_certs; Comment: Compare client certificate arrays. Returns 1 on compare failure, 0 otherwise. 
Name: uldap_connection_find; Comment: Find an existing ldap connection struct that matches the provided ldap connection parameters. If not found in the cache, a new ldc structure will be allocated from st->pool and returned to the caller. If found in the cache, a pointer to the existing ldc structure will be returned. 
Name: uldap_cache_comparedn; Comment: Compares two DNs to see if they're equal. The only way to do this correctly is to search for the dn and then do ldap_get_dn() on the result. This should match the initial dn, since it would have been also retrieved with ldap_get_dn(). This is expensive, so if the configuration value compare_dn_on_server is false, just does an ordinary strcmp. The lock for the ldap cache should already be acquired. 
Name: uldap_cache_compare; Comment: Does an generic ldap_compare operation. It accepts a cache that it will use to lookup the compare in the cache. We cache two kinds of compares (require group compares) and (require user compares). Each compare has a different cache node: require group includes the DN; require user does notbecause the require user cache is owned by the 
Name: uldap_cache_check_subgroups; Comment: Does a recursive lookup operation to try to find a user within (cached) nested groups. It accepts a cache that it will use to lookup previous compare attempts. We cache two kinds of compares (require group compares) and (require user compares). Each compare has a different cache node: require group includes the DN; require user does not because the requireuser cache is owned by the DON'T CALL THIS UNLESS YOU CALLED uldap_cache_compare FIRST!!!!! 1. Call uldap_cache_compare for each subgroupclass value to check the generic, user-agnostic, cached group entry. This will create a new generic cache entry if there wasn't one. If nothing returns LDAP_COMPARE_TRUE skip to step 5 since we have no groups. 2. Lock The cache and get the generic cache entry. 3. Check if there is already a subgrouplist in this generic group's cache entry. A. If there is, go to step 4. B. If there isn't: i) Use ldap_search to get the full list of subgroup "members" (which may include non-group "members"). ii) Use uldap_cache_compare to strip the list down to just groups. iii) Lock and add this stripped down list to the cache of the generic group. 4. Loop through the sgl and call uldap_cache_compare (using the user info) for each subgroup to see if the subgroup contains the user and to get the subgroups added to the cache (with user-afinity, if they aren't already there). A. If the user is in the subgroup, then we'll be returning LDAP_COMPARE_TRUE. B. if the user isn't in the subgroup (LDAP_COMPARE_FALSE via uldap_cache_compare) then recursively call this function to get the sub-subgroups added... 5. Cleanup local allocations. 6. Return the final result. 
Name: uldap_cache_getuserdn; Comment: This function will return the DN of the entry matching userid. It is used to get the DN in case some other module than mod_auth_ldap has authenticated the user. The function is basically a copy of uldap_cache_checkuserid with password checking removed. 
Name: uldap_ssl_supported; Comment: Reports if ssl support is enabled 1 = enabled, 0 = not enabled 
Name: util_ldap_set_cache_bytes; Comment: config directives 
Name: util_ldap_parse_cert_type; Comment: *Parse the certificate type. The type can be one of the following: CA_DER, CA_BASE64, CA_CERT7_DB, CA_SECMOD, CERT_DER, CERT_BASE64, CERT_KEY3_DB, CERT_NICKNAME, KEY_DER, KEY_BASE64 If no matches are found, APR_LDAP_CA_TYPE_UNKNOWN is returned. 
Name: util_ldap_set_trusted_global_cert; Comment: *Set LDAPTrustedGlobalCert. This directive takes either two or three arguments: - certificate type - certificate file / directory / nickname - certificate password (optional) This directive may only be used globally. 
Name: util_ldap_set_trusted_client_cert; Comment: *Set LDAPTrustedClientCert. This directive takes either two or three arguments: - certificate type - certificate file / directory / nickname - certificate password (optional) 
Name: util_ldap_set_trusted_mode; Comment: *Set LDAPTrustedMode. This directive sets what encryption mode to use on a connection: - None (No encryption) - SSL (SSL encryption) - STARTTLS (TLS encryption) 
Name: util_ldap_merge_config; Comment: cache-related settings are not merged here, but in the post_config hook,since the cache has not yet sprung to life 
Name: util_ldap_url_node_hash; Comment: ------------------------------------------------------------------ 
Name: util_ldap_search_node_hash; Comment: Cache functions for search nodes 
Name: util_ldap_compare_node_hash; Comment: ------------------------------------------------------------------ 
Name: util_ldap_dn_compare_node_hash; Comment: ------------------------------------------------------------------ 
Name: util_ldap_cache_module_kill; Comment: ------------------------------------------------------------------ 
Name: util_ald_sgl_dup; Comment: Duplicate a subgroupList from one compare entry to another. Returns: ptr to a new copy of the subgroupList or NULL if allocation failed. 
Name: util_ald_sgl_free; Comment: Delete an entire subgroupList. 
Name: util_ald_hash_string; Comment: Computes the hash on a set of strings. The first argument is the number of strings to hash, the rest of the args are strings. Algorithm taken from glibc. 
Name: util_ald_cache_purge; Comment: Purges a cache that has gotten full. We keep track of the time that we added the entry that made the cache 3/4 full, then delete all entries that were added before that time. It's pretty simplistic, but time to purge is only O(n), which is more important. 
Name: util_ald_create_caches; Comment: create caches 
Name: util_ald_cache_insert; Comment: Insert an item into the cache. *** Does not catch duplicates!!! *** 
Name: ap_logio_add_bytes_out; Comment: Optional function for the core to add to bytes_out 
Name: ap_logio_add_bytes_in; Comment: Optional function for modules to adjust bytes_in 
Name: ap_logio_get_last_bytes; Comment: Optional function to get total byte count of last request for ap_increment_counts. 
Name: log_bytes_in; Comment: Format items... 
Name: logio_transaction; Comment: Reset counters after logging... 
Name: logio_in_filter; Comment: Logging of input filter... 
Name: logio_pre_conn; Comment: The hooks... 
Name: log_virtual_host; Comment: These next two routines use the canonical name:port so that logparsers don't need to duplicate all the vhost parsing crud. 
Name: log_server_name; Comment: This respects the setting of UseCanonicalName so thatthe dynamic mass virtual hosting trick works better. 
Name: parse_log_misc_string; Comment: ****************************************************************Parsing the log format string 
Name: process_item; Comment: ****************************************************************Actually logging. 
Name: make_config_log_state; Comment: ****************************************************************Module glue... 
Name: merge_config_log_state; Comment: Use the merger to simply add a pointer from the vhost log state to the log of logs specified for the non-vhost configuration. Make sure vhosts inherit any globally-defined format names. 
Name: log_format; Comment: Set the default logfile format, or define a nickname for a format string. 
Name: log_escape; Comment: e is the first _invalid_ location in q N.B. returns the terminating NUL. 
Name: cfg_lua_map_handler; Comment: Change to use ap_lua_map_handler 
Name: cmd_log_at; Comment: helper function for the logging functions below 
Name: cmd_emerg; Comment: r:debug(String) and friends which use apache logging 
Name: lua_db_close; Comment: ============================================================================= db:close(): Closes an open database connection. ============================================================================= 
Name: lua_db_gc; Comment: ============================================================================= db:__gc(): Garbage collecting function. ============================================================================= 
Name: lua_db_active; Comment: ============================================================================= db:active(): Returns true if the connection to the db is still active. ============================================================================= 
Name: lua_db_query; Comment: ============================================================================= db:query(statement): Executes the given database query and returns the number of rows affected. If an error is encountered, returns nil as the first parameter and the error message as the second. ============================================================================= 
Name: lua_db_escape; Comment: ============================================================================= db:escape(string): Escapes a string for safe use in the given database type. ============================================================================= 
Name: lua_db_get_row; Comment: ============================================================================= resultset(N): Fetches one or more rows from a result set. ============================================================================= 
Name: lua_db_select; Comment: ============================================================================= db:select(statement): Queries the database for the given statement and returns the rows/columns found as a table. If an error is encountered, returns nil as the first parameter and the error message as the second. ============================================================================= 
Name: lua_db_prepared_select; Comment: ============================================================================= statement:select(var1, var2, var3...): Injects variables into a prepared statement and returns the number of rows matching the query. ============================================================================= 
Name: lua_db_prepared_query; Comment: ============================================================================= statement:query(var1, var2, var3...): Injects variables into a prepared statement and returns the number of rows affected. ============================================================================= 
Name: lua_db_prepare; Comment: ============================================================================= db:prepare(statement): Prepares a statement for later query/select. Returns a table with a :query and :select function, same as the db funcs. ============================================================================= 
Name: lua_db_prepared; Comment: ============================================================================= db:prepared(statement): Fetches a prepared statement made through DBDPrepareSQL. ============================================================================= 
Name: lua_push_db_handle; Comment: lua_push_db_handle: Creates a database table object with database functions and a userdata at index 0, which will call lua_dbgc when garbage collected. 
Name: lua_db_acquire; Comment: ============================================================================= dbacquire(dbType, dbString): Opens a new connection to a database of type _dbType_ and with the connection parameters _dbString_. If successful, returns a table with functions for using the database handle. If an error occurs, returns nil as the first parameter and the error message as the second. See the APR_DBD for a list of database types and connection strings supported. ============================================================================= 
Name: mk_password_hash; Comment: Make a password record from the given information. A zero return indicates success; on failure, ctx->errstr points to the error message. 
Name: ap_lua_check_request_rec; Comment: *Verify that the thing at index is a request_rec wrapping userdata thingamajig and return it if it is. if it is not lua will enter its error handling routine. 
Name: req_aprtable2luatable_cb; Comment: helper callback for req_parseargs 
Name: req_aprtable2luatable_cb_len; Comment: helper callback for req_parseargs 
Name: lua_read_body; Comment: ======================================================================================================================= lua_read_body(request_rec *r, const char **rbuf, apr_off_t *size): Reads any additional form data sent in POST/PUT requests. Used for multipart POST data. ======================================================================================================================= 
Name: lua_write_body; Comment: ======================================================================================================================= lua_write_body: Reads any additional form data sent in POST/PUT requests and writes to a file. ======================================================================================================================= 
Name: req_parseargs; Comment: r:parseargs() returning a lua table 
Name: ap_lua_binstrstr; Comment: ap_lua_binstrstr: Binary strstr function for uploaded data with NULL bytes 
Name: req_parsebody; Comment: r:parsebody(): Parses regular (url-enocded) or multipart POST data and returns two tables
Name: lua_ap_requestbody; Comment: lua_ap_requestbody; r:requestbody([filename]) - Reads or stores the requestbody 
Name: req_puts; Comment: wrap ap_rputs as r:puts(String) 
Name: req_write; Comment: wrap ap_rwrite as r:write(String) 
Name: req_add_output_filter; Comment: r:add_output_filter(name) 
Name: req_construct_url; Comment: wrap ap_construct_url as r:construct_url(String) 
Name: req_escape_html; Comment: wrap ap_escape_html r:escape_html(String) 
Name: req_ssl_var_lookup; Comment: wrap optional ssl_var_lookup as r:ssl_var_lookup(String) 
Name: req_document_root; Comment: not really a field, but we treat it like one 
Name: lua_apr_b64encode; Comment: lua_apr_b64encode; r:encode_base64(string) - encodes a string to Base64format 
Name: lua_apr_b64decode; Comment: lua_apr_b64decode; r:decode_base64(string) - decodes a Base64 string 
Name: lua_ap_unescape; Comment: lua_ap_unescape; r:unescape(string) - Unescapes an URL-encoded string 
Name: lua_ap_escape; Comment: lua_ap_escape; r:escape(string) - URL-escapes a string 
Name: lua_apr_md5; Comment: lua_apr_md5; r:md5(string) - Calculates an MD5 digest of a string 
Name: lua_apr_sha1; Comment: lua_apr_sha1; r:sha1(string) - Calculates the SHA1 digest of a string 
Name: lua_apr_htpassword; Comment: lua_apr_htpassword; r:htpassword(string [, algorithm [, cost]]) - Createsa htpassword hash from a string 
Name: lua_apr_touch; Comment: lua_apr_touch; r:touch(string [, time]) - Sets mtime of a file 
Name: lua_apr_mkdir; Comment: lua_apr_mkdir; r:mkdir(string [, permissions]) - Creates a directory 
Name: lua_apr_mkrdir; Comment: lua_apr_mkrdir; r:mkrdir(string [, permissions]) - Creates directoriesrecursive 
Name: lua_apr_rmdir; Comment: lua_apr_rmdir; r:rmdir(string) - Removes a directory 
Name: lua_apr_date_parse_rfc; Comment: lua_apr_date_parse_rfc; r.date_parse_rfc(string) - Parses a DateTime string 
Name: lua_ap_mpm_query; Comment: lua_ap_mpm_query; r:mpm_query(info) - Queries for MPM info 
Name: lua_ap_expr; Comment: lua_ap_expr; r:expr(string) - Evaluates an expr statement. 
Name: lua_ap_regex; Comment: lua_ap_regex; r:regex(string, pattern [, flags])- Evaluates a regex and returns captures if matched 
Name: lua_ap_scoreboard_process; Comment: lua_ap_scoreboard_process; r:scoreboard_process(a) - returns scoreboard info 
Name: lua_ap_scoreboard_worker; Comment: lua_ap_scoreboard_worker; r:scoreboard_worker(proc, thread) - Returns threadinfo 
Name: lua_ap_clock; Comment: lua_ap_clock; r:clock() - Returns timestamp with microsecond precision 
Name: lua_ap_add_input_filter; Comment: lua_ap_add_input_filter; r:add_input_filter(name) - Adds an input filter tothe chain 
Name: lua_ap_module_info; Comment: lua_ap_module_info; r:module_info(mod_name) - Returns information about aloaded module 
Name: lua_ap_runtime_dir_relative; Comment: lua_ap_runtime_dir_relative: r:runtime_dir_relative(file): Returns the filename as relative to the runtime dir 
Name: lua_ap_set_document_root; Comment: lua_ap_set_document_root; r:set_document_root(path) - sets the current docroot for the request 
Name: lua_ap_getdir; Comment: lua_ap_getdir; r:get_direntries(directory) - Gets all entries of adirectory and returns the directory info as a table 
Name: lua_ap_stat; Comment: lua_ap_stat; r:stat(filename [, wanted]) - Runs stat on a file andreturns the file info as a table 
Name: lua_ap_loaded_modules; Comment: lua_ap_loaded_modules; r:loaded_modules() - Returns a list of loaded modules 
Name: lua_ap_server_info; Comment: lua_ap_server_info; r:server_info() - Returns server info, such as theexecutable filename, server root, mpm etc 
Name: lua_ap_set_context_info; Comment: *ap_set_context_info: Set context_prefix and context_document_root. @param r The request @param prefix the URI prefix, without trailing slash @param document_root the corresponding directory on disk, without trailing slash @note If one of prefix of document_root is NULL, the corrsponding property will not be changed. 
Name: lua_ap_os_escape_path; Comment: *ap_os_escape_path (apr_pool_t *p, const char *path, int partial) convert an OS path to a URL in an OS dependant way. @param p The pool to allocate from @param path The path to convert @param partial if set, assume that the path will be appended to something with a '/' in it (and thus does not prefix "./") @return The converted URL 
Name: lua_ap_escape_logitem; Comment: *ap_escape_logitem (apr_pool_t *p, const char *str) Escape a string for logging @param p The pool to allocate from @param str The string to escape @return The escaped string 
Name: lua_ap_strcmp_match; Comment: *ap_strcmp_match (const char *str, const char *expected) Determine if a string matches a pattern containing the wildcards '?' or '*' @param str The string to check @param expected The pattern to match against @param ignoreCase Whether to ignore case when matching @return 1 if the two strings match, 0 otherwise 
Name: lua_ap_set_keepalive; Comment: *ap_set_keepalive (request_rec *r) Set the keepalive status for this request @param r The current request @return 1 if keepalive can be set, 0 otherwise 
Name: lua_ap_make_etag; Comment: *ap_make_etag (request_rec *r, int force_weak) Construct an entity tag from the resource information. If it's a real file, build in some of the file characteristics. @param r The current request @param force_weak Force the entity tag to be weak - it could be modified again in as short an interval. @return The entity tag 
Name: lua_ap_send_interim_response; Comment: *ap_send_interim_response (request_rec *r, int send_headers) Send an interim (HTTP 1xx) response immediately. @param r The request @param send_headers Whether to send&clear headers in r->headers_out 
Name: lua_ap_custom_response; Comment: *ap_custom_response (request_rec *r, int status, const char *string) Install a custom response handler for a given status @param r The current request @param status The status for which the custom response should be used @param string The custom response. This can be a static string, a file or a URL 
Name: lua_ap_exists_config_define; Comment: *ap_exists_config_define (const char *name) Check for a definition from the server command line @param name The define to check for @return 1 if defined, 0 otherwise 
Name: lua_ap_state_query; Comment: ap_state_query (int query_code) item starts a new field 
Name: lua_ap_usleep; Comment: lua_ap_usleep; r:usleep(microseconds)- Sleep for the specified number of microseconds. 
Name: req_dispatch; Comment: END dispatch methods for request_rec fields 
Name: req_log_at; Comment: helper function for the logging functions below 
Name: req_emerg; Comment: r:debug(String) and friends which use apache logging 
Name: req_newindex; Comment: handle r.status = 201 
Name: read_cfg_tree; Comment: helper function for walking config trees 
Name: lua_ap_get_active_config; Comment: Hack, hack, hack...! TODO: Make this actually work properly 
Name: ap_lua_load_apache2_lmodule; Comment: BEGIN apache lmodule 
Name: cleanup_lua; Comment: callback for cleaning up a lua vm when pool is closed 
Name: munge_path; Comment: *field -> "path" or "cpath" sub_pat -> "?.lua" rep_pat -> "./?.lua" pool -> lifecycle pool for allocations paths -> things to add file -> ??? 
Name: ap_lua_get_lua_state; Comment: *Function used to create a lua_State instance bound into the web server in the appropriate scope. 
Name: report_lua_error; Comment: *error reporting if lua has an error. Extracts the error from lua stack and prints 
Name: lua_handler; Comment: *"main" 
Name: lua_setup_filter_ctx; Comment: ------------------- Input/output content filters ------------------- 
Name: lua_request_rec_hook_harness; Comment: * harnesses for magic hooks *
Name: lua_map_handler_fixups; Comment: Fix for making sure that LuaMapHandler works when FallbackResource is set 
Name: hack_section_handler; Comment: You can be unhappy now.This is uncool. When you create a <Section handler in httpd, the only 'easy' way to create a directory context is to parse the section, and convert it into a 'normal' Configureation option, and then collapse the entire section, in memory, back into the parent section -- from which you can then get the new directive invoked.... anyways. evil. Rici taught me how to do this hack :-) 
Name: lua_check_user_id_harness; Comment: None}
Name: lua_translate_name_harness_first; Comment: None}
Name: register_package_dir; Comment: *Called for config directive which looks like LuaPackagePath /lua/package/path/mapped/thing/like/this/?.lua 
Name: register_package_cdir; Comment: *Called for config directive which looks like LuaPackageCPath /lua/package/path/mapped/thing/like/this/?.so 
Name: lua_authz_parse; Comment: *****************************
Name: read_quoted; Comment: See if string has a "quoted part", and if so set *quoted_part tothe first character of the quoted part, then hammer a _0 onto the trailing quote, and set *string to point at the first character past the second quote. Otherwise set *quoted_part to NULL, and leave *string alone. 
Name: imap_url; Comment: returns the mapped URL or NULL. 
Name: clean_var_rec; Comment: A few functions to manipulate var_recs.Cleaning out the fields... 
Name: set_mime_fields; Comment: Initializing the relevant fields of a variant record from theaccept_info read out of its content-type, one way or another. 
Name: set_vlist_validator; Comment: Create a variant list validator in r using info from vlistr. 
Name: atoq; Comment: parse quality value. atof(3) is not well-usable here, because it depends on the locale (argh). However, RFC 2616 states: 3.9 Quality Values [...] HTTP/1.1 applications MUST NOT generate more than three digits after the decimal point. User configuration of these values SHOULD also be limited in this fashion. qvalue = ( "0" [ "." 0*3DIGIT ] ) | ( "1" [ "." 0*3("0") ] ) This is quite easy. If the supplied string doesn't match the above definition (loosely), we simply return 1 (same as if there's no qvalue) 
Name: get_entry; Comment: Noneenter the values we recognize into the argument accept_rec 
Name: do_header_line; Comment: **************************************************************** Dealing with header lines ... Accept, Accept-Charset, Accept-Language and Accept-Encoding are handled by do_header_line() - they all have the same basic structure of a list of items of the format name; q=N; charset=TEXTwhere charset is only valid in Accept. 
Name: do_languages_line; Comment: Given the text of the Content-Languages: line from the var map file,return an array containing the languages of this variant 
Name: parse_accept_headers; Comment: ****************************************************************Handling header lines from clients... 
Name: maybe_add_default_accepts; Comment: Sometimes clients will give us no Accept info at all; this routine setsup the standard default for that case, and also arranges for us to be willing to run a CGI script if we find one. (In fact, we set up to dramatically prefer CGI scripts in cases where that's appropriate, e.g., POST or when URI includes query args or extra path info). 
Name: strip_paren_comments; Comment: Stripping out RFC822 comments 
Name: lcase_header_name_return_body; Comment: Getting to a header body from the header 
Name: variantsortf; Comment: Sort function used by read_types_multi. 
Name: read_types_multi; Comment: ****************************************************************Same as read_type_map, except we use a filtered directory listing as the map... 
Name: mime_match; Comment: Matching MIME types ... the star/star and foo/star commenting conventionsare implemented here. (You know what I mean by star/star, but just try mentioning those three characters in a C comment). Using strcmp() is legit, because everything has already been smashed to lowercase. Note also that if we get an exact match on the media type, we update level_matched for use in level_cmp below... We also give a value for mime_stars, which is used later. It should be 1 for star/star, 2 for type/star and 3 for type/subtype. 
Name: level_cmp; Comment: Nonerather, it is a choice made by this server about what to do in cases where the standard does not specify a unique course of action). 
Name: find_lang_index; Comment: Finding languages. The main entry point is set_language_quality()which is called for each variant. It sets two elements in the variant record: language_quality - the 'q' value of the 'best' matching language from Accept-Language: header (HTTP/1.1) lang_index - Non-negotiated language priority, using position of language on the Accept-Language: header, if present, else LanguagePriority directive order. When we do the variant checking for best variant, we use language quality first, and if a tie, language_index next (this only applies when _not_ using the RVSA/1.0 algorithm). If using the RVSA/1.0 algorithm, lang_index is never used. set_language_quality() calls find_lang_index() and find_default_index() to set lang_index. 
Name: set_default_lang_quality; Comment: set_default_lang_quality() sets the quality we apply to variantswhich have no language assigned to them. If none of the variants have a language, we are not negotiating on language, so all are acceptable, and we set the default q value to 1.0. However if some of the variants have languages, we set this default to 0.0001. The value of this default will be applied to all variants with no explicit language -- which will have the effect of making them acceptable, but only if no variants with an explicit language are acceptable. The default q value set here is assigned to variants with no language type in set_language_quality(). Note that if using the RVSA/1.0 algorithm, we don't use this fiddle. 
Name: set_language_quality; Comment: Set the language_quality value in the variant record. Alsoassigns lang_index for ForceLanguagePriority. To find the language_quality value, we look for the 'q' value of the 'best' matching language on the Accept-Language header. The 'best' match is the language on Accept-Language header which matches the language of this variant either fully, or as far as the prefix marker (-). If two or more languages match, use the longest string from the Accept-Language header (see HTTP/1.1 [14.4]) When a variant has multiple languages, we find the 'best' match for each variant language tag as above, then select the one with the highest q value. Because both the accept-header and variant can have multiple languages, we now have a hairy loop-within-a-loop here. If the variant has no language and we have no Accept-Language items, leave the quality at 1.0 and return. If the variant has no language, we use the default as set by set_default_lang_quality() (1.0 if we are not negotiating on language, 0.001 if we are). Following the setting of the language quality, we drop through to set the old 'lang_index'. This is set based on either the order of the languages on the Accept-Language header, or the order on the LanguagePriority directive. This is only used in the negotiation if the language qualities tie. 
Name: find_content_length; Comment: Determining the content length --- if the map didn't tell us,we have to do a stat() and remember for next time. 
Name: set_accept_quality; Comment: For a given variant, find the best matching Accept: headerand assign the Accept: header's quality value to the mime_type_quality field of the variant, for later use in determining the best matching variant. 
Name: set_charset_quality; Comment: For a given variant, find the 'q' value of the charset givenon the Accept-Charset line. If no charsets are listed, assume value of '1'. 
Name: is_identity_encoding; Comment: is_identity_encoding is included for back-compat, but does anyoneuse 7bit, 8bin or binary in their var files?? 
Name: set_encoding_quality; Comment: set_encoding_quality determines whether the encoding for a particular variant is acceptable for the user-agent. The rules for encoding are that if the user-agent does not supply any Accept-Encoding header, then all encodings are allowed but a variant with no encoding should be preferred. If there is an empty Accept-Encoding header, then no encodings are acceptable. If there is a non-empty Accept-Encoding header, then any of the listed encodings are acceptable, as well as no encoding unless the "identity" encoding is specifically excluded. 
Name: is_variant_better_rvsa; Comment: Firstly, the RVSA/1.0 (HTTP Remote Variant Selection Algorithmv1.0) from rfc2296. This is the algorithm that goes together with transparent content negotiation (TCN). 
Name: is_variant_better; Comment: Negotiation algorithm as used by previous versions of Apache(just about). 
Name: variant_has_language; Comment: figure out, whether a variant is in a specific languageit returns also false, if the variant has no language. 
Name: discard_variant_by_env; Comment: check for environment variables 'no-gzip' and'gzip-only-text/html' to get a behaviour similar to mod_deflate 
Name: set_neg_headers; Comment: Sets response headers for a negotiated response.neg->is_transparent determines whether a transparently negotiated response or a plain `server driven negotiation' response is created. Applicable headers are Alternates, Vary, and TCN. The Vary header we create is sometimes longer than is required for the correct caching of negotiated results by HTTP/1.1 caches. For example if we have 3 variants x.html, x.ps.en and x.ps.nl, and if the Accept: header assigns a 0 quality to .ps, then the results of the two server-side negotiation algorithms we currently implement will never depend on Accept-Language so we could return `Vary: negotiate, accept' instead of the longer 'Vary: negotiate, accept, accept-language' which the code below will return. A routine for computing the exact minimal Vary header would be a huge pain to code and maintain though, especially because we need to take all possible twiddles in the server-side negotiation algorithms into account. 
Name: make_variant_list; Comment: *********************************************************************Return an HTML list of variants. This is output as part of the choice response or 406 status body. 
Name: setup_choice_response; Comment: Called if we got a "Choice" response from the variant selection algorithm.It checks the result of the chosen variant to see if it is itself negotiated (if so, return error HTTP_VARIANT_ALSO_VARIES). Otherwise, add the appropriate headers to the current response. 
Name: do_negotiation; Comment: ***************************************************************Executive... 
Name: fix_encoding; Comment: *********************************************************************There is a problem with content-encoding, as some clients send and expect an x- token (e.g. x-gzip) while others expect the plain token (i.e. gzip). To try and deal with this as best as possible we do the following: if the client sent an Accept-Encoding header and it contains a plain token corresponding to the content encoding of the response, then set content encoding using the plain token. Else if the A-E header contains the x- token use the x- token in the C-E header. Else don't do anything. Note that if no A-E header was sent, or it does not contain a token compatible with the final content encoding, then the token in the C-E header will be whatever was specified in the AddEncoding directive. 
Name: is_absolute_uri; Comment: return number of chars of the scheme (incl. '://')if the URI is absolute (includes a scheme etc.) otherwise 0. If supportqs is not NULL, we return a whether or not the scheme supports a query string or not. NOTE: If you add new schemes here, please have a look at escape_absolute_uri and splitout_queryargs. Not every scheme takes query strings and some schemes may be handled in a special way. XXX: we may consider a scheme registry, perhaps with appropriate escape callbacks to allow other modules to extend mod_rewrite at runtime. 
Name: mkconfig; Comment: Create a configuration specific to this module for a server or directory location, and fill it with the default settings. The API says that in the absence of a merge function, the record for the closest ancestor is used exclusively. That's what we want, so we don't bother to have such a function. 
Name: spdist; Comment: spdist() is taken from Kernighan & Pike, _The_UNIX_Programming_Environment_ and adapted somewhat to correspond better to psychological reality. (Note the changes to the return values) According to Pollock and Zamora, CACM April 1984 (V. 27, No. 4), page 363, the correct order for this is: OMISSION = TRANSPOSITION > INSERTION > SUBSTITUTION thus, it was exactly backwards in the old version. -- PWP This routine was taken out of tcsh's spelling correction code (tcsh-6.07.04) and re-converted to apache data types ("char" type instead of tcsh's NLS'ed "Char"). Plus it now ignores the case during comparisons, so is a "approximate strcasecmp()". NOTE that is still allows only _one_ real "typo", it does NOT try to correct multiple errors. 
Name: create_userdir_config; Comment: Server config for this module: global disablement flag, a list of usernames ineligible for UserDir access, a list of those immune to global (but not explicit) disablement, and the replacement string for all others. 
Name: vhost_alias_checkspace; Comment: This really wants to be a nested function but C is too feeble to support them. 
Name: req_update_nonce; Comment: acme requests 
Name: md_acme_req_done; Comment: ACME requests with nonce handling 
Name: acct_to_json; Comment: json load/save 
Name: on_init_acct_valid; Comment: acct validation 
Name: acct_validate; Comment: account setup 
Name: md_acme_unstore_acct; Comment: Delete the account 
Name: on_init_agree_tos; Comment: terms-of-service 
Name: md_acme_authz_update; Comment: Update an existing authorization 
Name: cha_from_json; Comment: response to a challenge 
Name: md_acme_authz_to_json; Comment: authz conversion 
Name: md_acme_authz_set_load; Comment: persistence 
Name: ad_set_acct; Comment: account setup 
Name: ad_setup_authz; Comment: *Pre-Req: we have an account for the ACME server that has accepted the current license agreement For each domain in MD: - check if there already is a valid AUTHZ resource - if ot, create an AUTHZ resource with challenge data 
Name: ad_start_challenges; Comment: *Pre-Req: all domains have a AUTHZ resources at the ACME server For each domain in MD: - if AUTHZ resource is 'valid' -> continue - if AUTHZ resource is 'pending': - find preferred challenge choice - calculate challenge data for httpd to find - POST challenge start to ACME server For each domain in MD where AUTHZ is 'pending', until overall timeout: - wait a certain time, check status again If not all AUTHZ are valid, fail 
Name: get_up_link; Comment: poll cert 
Name: on_init_csr_req; Comment: cert setup 
Name: ad_setup_certificate; Comment: *Pre-Req: all domains have been validated by the ACME server, e.g. all have AUTHZ resources that have status 'valid' - Setup private key, if not already there - Generate a CSR with org, contact, etc - Optionally enable must-staple OCSP extension - Submit CSR, expect 201 with location - POLL location for certificate - store certificate - retrieve cert chain information from cert - GET cert chain - store cert chain 
Name: on_add_chain; Comment: cert chain retrieval 
Name: acme_driver_init; Comment: ACME driver init 
Name: acme_stage; Comment: ACME staging 
Name: acme_preload; Comment: ACME preload 
Name: md_copy; Comment: lifetime 
Name: md_to_json; Comment: format conversion 
Name: md_asn1_time_get; Comment: Get the apr time (micro seconds, since 1970) from an ASN1 time, as stored in X509certificates. OpenSSL now has a utility function, but other *SSL derivatives have not caughts up yet or chose to ignore. An alternative is implemented, we prefer however the *SSL to maintain such things. 
Name: md_pkey_spec_to_json; Comment: private keys 
Name: alt_names; Comment: certificate signing requests 
Name: curl_status; Comment: md_http curl implementation 
Name: json_pool_cleanup; Comment: lifecycle 
Name: jselect; Comment: selectors 
Name: md_json_getb; Comment: booleans 
Name: md_json_getn; Comment: numbers 
Name: md_json_getl; Comment: longs 
Name: md_json_gets; Comment: strings 
Name: md_json_getj; Comment: json itself 
Name: md_json_clr; Comment: arrays / objects 
Name: md_json_gets_dict; Comment: object strings 
Name: md_json_pass_to; Comment: conversions 
Name: md_json_geta; Comment: array generic 
Name: md_json_getsa; Comment: array strings 
Name: fmt_to_flags; Comment: Convert from md_json_fmt_t to the Jansson json_dumpX flags. 
Name: md_json_read_http; Comment: http get 
Name: load_props; Comment: life cycle 
Name: check_values; Comment: checks 
Name: state_init; Comment: state assessment 
Name: md_reg_get; Comment: lookup 
Name: p_md_add; Comment: manipulation 
Name: ok_or_noent; Comment: certificate related 
Name: md_reg_sync; Comment: *Procedure: 1. Collect all defined "managed domains" (MD). It does not matter where a MD is defined. All MDs need to be unique and have no overlaps in their domain names. Fail the config otherwise. Also, if a vhost matches an MD, it needs to *only* have ServerAliases from that MD. There can be no more than one matching MD for a vhost. But an MD can apply to several vhosts. 2. Synchronize with the persistent store. Iterate over all configured MDs and a. create them in the store if they do not already exist, neither under the name or with a common domain. b. compare domain lists from store and config, if - store has dns name in other MD than from config, remove dns name from store def, issue WARNING. - store misses dns name from config, add dns name and update store c. compare MD acme url/protocol, update if changed 
Name: init_proto_driver; Comment: driving 
Name: pfs_move; Comment: moving 
Name: md_util_pool_do; Comment: pool utils 
Name: md_util_str_tolower; Comment: string related 
Name: md_util_fopen; Comment: file system related 
Name: md_text_fread8k; Comment: text files 
Name: md_util_is_dns_name; Comment: DNS name checks *******************************************************************************
Name: md_util_try; Comment: try and retry for a while *********************************************************************
Name: md_util_exec; Comment: execute process *******************************************************************************
Name: md_print_duration; Comment: date/time encoding ****************************************************************************
Name: store_file_ev; Comment: store & registry setup 
Name: cleanup_setups; Comment: lifecycle 
Name: md_is_managed; Comment: Access API to other httpd components 
Name: md_require_https_maybe; Comment: Require Https hook 
Name: md_child_init; Comment: Runs once per created child process. Perform any process related initialization here. 
Name: md_hooks; Comment: Install this module into the apache2 infrastructure. 
Name: scan_meta_file; Comment: XXX: this is very similar to ap_scan_script_header_err_core...are the differences deliberate, or just a result of bit rot? 
Name: check_code; Comment: check_code() parse 'code' and return NULL or an error responsestring. If we return NULL then real_code contains code converted to the cnnnn format. 
Name: set_expiration_fields; Comment: Handle the setting of the expiration response header fields according to our criteria. 
Name: expires_filter; Comment: Output filter to set the Expires response header field according to the content-type of the response -- if it hasn't already been set. 
Name: constant_item; Comment: Tag formatting functions 
Name: unwrap_header; Comment: unwrap_header returns HDR with any newlines converted intowhitespace if necessary. 
Name: create_headers_dir_config; Comment: Config routines 
Name: parse_format_string; Comment: A format string consists of white space, text and optional format tags in any order. E.g., Header add MyHeader "Free form text %D %t more text" Decompose the format string into its tags. Each tag (struct format_tag) contains a pointer to the function used to format the tag. Then save each tag in the tag array anchored in the header_entry. 
Name: header_inout_cmd; Comment: handle RequestHeader and Header directive 
Name: header_cmd; Comment: Handle all (xxx)Header directives 
Name: process_tags; Comment: Process the tags in the format string. Tags may be format specifiers (%D, %t, etc.), whitespace or text strings. For each tag, run the handler (formatter) specific to the tag. Handlers return text strings. Concatenate the return from each handler into one string that is returned from this call. If the original value was prefixed with "expr=", processing is handled instead by ap_expr. 
Name: ap_headers_insert_error_filter; Comment: Make sure our error-path filter is in place. 
Name: ap_headers_error_filter; Comment: Make sure we propagate any "Header always" settings on the error path through http_protocol.c. 
Name: ap_ident_lookup; Comment: Optional function for the core to the actual ident request 
Name: looks_like_ip; Comment: apr:network_io/unix/sockaddr.c 
Name: remoteip_sockaddr_equal; Comment: * Similar to apr_sockaddr_equal, except that it compares ports too. 
Name: sockaddr_is_wildcard; Comment: XXX: temp build fix from apr 1.5.x 
Name: remoteip_sockaddr_compat; Comment: * Similar to remoteip_sockaddr_equal, except that it handles wildcard addresses and ports too. 
Name: remoteip_process_v1_header; Comment: Human readable format: PROXY {TCP4|TCP6|UNKNOWN} <client-ip-addr> <dest-ip-addr> <client-port> <dest-port><CR><LF> 
Name: remoteip_hook_pre_connection; Comment: * Add our filter to the connection if it is requested 
Name: remoteip_process_v2_header; Comment: Binary format: <sig><cmd><proto><addr-len><addr> sig = _x0D _x0A _x0D _x0A _x00 _x0D _x0A _x51 _x55 _x49 _x54 _x0A cmd = <4-bits-version><4-bits-command> 4-bits-version = _x02 4-bits-command = {_x00|_x01} (_x00 = LOCAL: discard con info; _x01 = PROXY) proto = <4-bits-family><4-bits-protocol> 4-bits-family = {_x00|_x01|_x02|_x03} (AF_UNSPEC, AF_INET, AF_INET6, AF_UNIX) 4-bits-protocol = {_x00|_x01|_x02} (UNSPEC, STREAM, DGRAM) 
Name: remoteip_get_v2_len; Comment: * Return length for a v2 protocol header. 
Name: remoteip_determine_version; Comment: * Determine if this is a v1 or v2 PROXY header. 
Name: remoteip_input_filter; Comment: Capture the first bytes on the protocol and parse the PROXY protocol header.Removes itself when the header is complete. 
Name: create_setenvif_config; Comment: These routines, the create- and merge-config functions, are called for both the server-wide and the per-directory contexts. This is because the different definitions are used at different times; theserver-wide ones are used in the post-read-request phase, and the per-directory ones are used during the header-parse phase (after the URI has been mapped to a file and we have anything from the .htaccess file and <Directory> and <Files> containers). 
Name: non_regex_pattern; Comment: If the input string does not take advantage of regularexpression metacharacters, return a pointer to an equivalent string that can be searched using apr_strmatch(). (The returned string will often be the input string. But if the input string contains escaped characters, the returned string will be a copy with the escapes removed.) 
Name: add_browser; Comment: This routine handles the BrowserMatch* directives. It simply turns around and feeds them, with the appropriate embellishments, to the general-purpose command handler. 
Name: match_headers; Comment: This routine gets called at two different points in request processing: once before the URI has been translated (during the post-read-request phase) and once after (during the header-parse phase). We use different config records for the two different calls to reduce overhead (by not re-doing the server-wide settings during directory processing), and signal which call it is by having the earlier one pass a flag to the later one. 
Name: generate_log_id; Comment: There are two ways the generation of a unique id can be triggered: - from the post_read_request hook which calls set_unique_id() - from error logging via the generate_log_id hook which calls generate_log_id(). This may happen before or after set_unique_id() has been called, or not at all. 
Name: make_cookie; Comment: Make Cookie: Now we have to generate something that is going to bepretty unique. We can base it on the pid, time, hostip 
Name: set_cookie_domain; Comment: Set the value for the 'Domain=' attribute. 
Name: set_cookie_style; Comment: Make a note of the cookie style we should use. 
Name: compare_version; Comment: compare the supplied version with the core one 
Name: match_version; Comment: match version against a regular expression 
Name: start_ifversion; Comment: Implements the <IfVersion> container 
Name: ajp_marshal_into_msgb; Comment: Message structure AJPV13_REQUEST/AJPV14_REQUEST= request_prefix (1) (byte) method (byte) protocol (string) req_uri (string) remote_addr (string) remote_host (string) server_name (string) server_port (short) is_ssl (boolean) num_headers (short) num_headers*(req_header_name header_value) ?context (byte)(string) ?servlet_path (byte)(string) ?remote_user (byte)(string) ?auth_type (byte)(string) ?query_string (byte)(string) ?jvm_route (byte)(string) ?ssl_cert (byte)(string) ?ssl_cipher (byte)(string) ?ssl_session (byte)(string) ?ssl_key_size (byte)(int) via JkOptions +ForwardKeySize request_terminator (byte) ?body content_length*(var binary) 
Name: addit_dammit; Comment: AJPV13_RESPONSE/AJPV14_RESPONSE:= response_prefix (2) status (short) status_msg (short) num_headers (short) num_headers*(res_header_name header_value) *body_chunk terminator boolean <! -- recycle connection or not --> req_header_name := sc_req_header_name | (string) res_header_name := sc_res_header_name | (string) header_value := (string) body_chunk := length (short) body length*(var binary) 
Name: ajp_send_header; Comment: Build the ajp header message and send it 
Name: ajp_read_header; Comment: Read the ajp message and return the type of the message. 
Name: ajp_parse_type; Comment: parse the msg to read the type 
Name: ajp_parse_header; Comment: parse the header 
Name: ajp_parse_data; Comment: parse the body and return data address and length 
Name: ajp_parse_reuse; Comment: Check the reuse flag in CMD_AJP13_END_RESPONSE 
Name: ajp_alloc_data_msg; Comment: Allocate a msg to send data 
Name: ajp_send_data_msg; Comment: Send the data message 
Name: ajp_msg_dump; Comment: *Dump the given number of bytes on an AJP Message @param pool pool to allocate from @param msg AJP Message to dump @param err error string to display @param count the number of bytes to dump @param buf buffer pointer for dump message @return APR_SUCCESS or error 
Name: ajp_msg_log; Comment: *Log an AJP message @param request The current request @param msg AJP Message to dump @param err error string to display @return APR_SUCCESS or error 
Name: ajp_msg_check_header; Comment: *Check a new AJP Message by looking at signature and return its size @param msg AJP Message to check @param len Pointer to returned len @return APR_SUCCESS or error 
Name: ajp_msg_reset; Comment: *Reset an AJP Message @param msg AJP Message to reset @return APR_SUCCESS or error 
Name: ajp_msg_reuse; Comment: *Reuse an AJP Message @param msg AJP Message to reuse @return APR_SUCCESS or error 
Name: ajp_msg_end; Comment: *Mark the end of an AJP Message @param msg AJP Message to end @return APR_SUCCESS or error 
Name: ajp_msg_append_uint32; Comment: *Add an unsigned 32bits value to AJP Message @param msg AJP Message to get value from @param value value to add to AJP Message @return APR_SUCCESS or error 
Name: ajp_msg_append_uint16; Comment: *Add an unsigned 16bits value to AJP Message @param msg AJP Message to get value from @param value value to add to AJP Message @return APR_SUCCESS or error 
Name: ajp_msg_append_uint8; Comment: *Add an unsigned 8bits value to AJP Message @param msg AJP Message to get value from @param value value to add to AJP Message @return APR_SUCCESS or error 
Name: ajp_msg_append_string_ex; Comment: * Add a String in AJP message, and transform the String in ASCII if convert is set and we're on an EBCDIC machine @param msg AJP Message to get value from @param value Pointer to String @param convert When set told to convert String to ASCII @return APR_SUCCESS or error 
Name: ajp_msg_append_bytes; Comment: *Add a Byte array to AJP Message @param msg AJP Message to get value from @param value Pointer to Byte array @param valuelen Byte array len @return APR_SUCCESS or error 
Name: ajp_msg_get_uint32; Comment: *Get a 32bits unsigned value from AJP Message @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @return APR_SUCCESS or error 
Name: ajp_msg_get_uint16; Comment: *Get a 16bits unsigned value from AJP Message @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @return APR_SUCCESS or error 
Name: ajp_msg_peek_uint16; Comment: *Peek a 16bits unsigned value from AJP Message, position in message is not updated @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @return APR_SUCCESS or error 
Name: ajp_msg_peek_uint8; Comment: *Peek a 8bits unsigned value from AJP Message, position in message is not updated @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @return APR_SUCCESS or error 
Name: ajp_msg_get_uint8; Comment: *Get a 8bits unsigned value from AJP Message @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @return APR_SUCCESS or error 
Name: ajp_msg_get_string; Comment: *Get a String value from AJP Message @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @return APR_SUCCESS or error 
Name: ajp_msg_get_bytes; Comment: *Get a Byte array from AJP Message @param msg AJP Message to get value from @param rvalue Pointer where value will be returned @param rvalueLen Pointer where Byte array len will be returned @return APR_SUCCESS or error 
Name: ajp_msg_create; Comment: *Create an AJP Message from pool @param pool memory pool to allocate AJP message from @param size size of the buffer to create @param rmsg Pointer to newly created AJP message @return APR_SUCCESS or error 
Name: ajp_msg_copy; Comment: *Recopy an AJP Message to another @param smsg source AJP message @param dmsg destination AJP message @return APR_SUCCESS or error 
Name: ajp_msg_serialize_ping; Comment: *Serialize in an AJP Message a PING command +-----------------------+ | PING CMD (1 byte) | +-----------------------+ @param smsg AJP message to put serialized message @return APR_SUCCESS or error 
Name: ajp_msg_serialize_cping; Comment: *Serialize in an AJP Message a CPING command +-----------------------+ | CPING CMD (1 byte) | +-----------------------+ @param smsg AJP message to put serialized message @return APR_SUCCESS or error 
Name: ajp_handle_cping_cpong; Comment: Handle the CPING/CPONG 
Name: ajp_type_str; Comment: *Convert numeric message type into string @param type AJP message type @return AJP message type as a string 
Name: set_worker_param; Comment: Translate the URL into a 'filename' 
Name: proxy_detect; Comment: Detect if an absoluteURI should be proxied or not. Note that we have to do this during this phase because later phases are "short-circuiting"... i.e. translate_names will end when the first module returns OK. So for example, if the request is something like: GET http:othervhostcgi-binprintenv HTTP1.0mod_alias will notice the /cgi-bin part and ScriptAlias it and short-circuit the proxy... just because of the ordering in the configuration file. 
Name: proxy_ajp_canon; Comment: Canonicalise http-like URLs. scheme is the scheme for the URL url is the URL starting with the first '/' def_port is the default port for this scheme. 
Name: ap_proxy_ajp_request; Comment: process the request and write the response. 
Name: proxy_ajp_handler; Comment: This handles ajp: URLs 
Name: balancer_pre_config; Comment: Register our mutex type before the config is read so we can adjust the mutex settings using the Mutex directive. 
Name: get_path_param; Comment: Retrieve the parameter with the given nameSomething like 'JSESSIONID=12345...N' 
Name: find_route_worker; Comment: Find the worker that has the 'route' defined 
Name: make_server_id; Comment: Compute an ID for a vhost based on what makes it selected by requests. The second and more Host(s)/IP(s):port(s), and the ServerAlias(es) are optional (see make_servers_ids() below). 
Name: make_servers_ids; Comment: First try to compute an unique ID for each vhost with minimal criteria, that is the first Host/IP:port and ServerName. For most cases this should be enough and avoids changing the ID unnecessarily accross restart (or stop/start w.r.t. persisted files) for things that this module does not care about. But if it's not enough (collisions) do a second pass for the full monty, that is additionally the other Host(s)/IP(s):port(s) and ServerAlias(es). Finally, for pathological configs where this is still not enough, let's append a counter to duplicates, because we really want that ID to be unique even if the vhost will never be selected to handle requests at run time, at load time a duplicate may steal the original slotmems (depending on its balancers' configurations), see how mod_slotmem_shm reuses slots/files based solely on this ID and resets them if the sizes don't match. 
Name: balancer_post_config; Comment: post_config hook: 
Name: balancer_handler; Comment: Manages the loadfactors and member status The balancer, worker and nonce are obtained from the request args (?b=...&w=...&nonce=....). All other params are pulled from any POST data that exists. TODO: /.../<whatever>/balancer/worker/nonce 
Name: set_allowed_ports; Comment: Set the ports CONNECT can use 
Name: proxy_connect_canon; Comment: canonicalise CONNECT URLs. 
Name: proxy_connect_handler; Comment: CONNECT handler 
Name: proxy_fcgi_canon; Comment: Canonicalise http-like URLs. scheme is the scheme for the URL url is the URL starting with the first '/' def_port is the default port for this scheme. 
Name: fix_cgivars; Comment: ProxyFCGISetEnvIf "reqenv('PATH_INFO') =~ m#foo(_d+)_.php$#" COVENV1 "$1" ProxyFCGISetEnvIf "reqenv('PATH_INFO') =~ m#foo(_d+)_.php$#" PATH_INFO "foo.php" ProxyFCGISetEnvIf "reqenv('PATH_TRANSLATED') =~ m#(.foo)(_d+)(.)#" PATH_TRANSLATED "$1$3"
Name: send_data; Comment: Wrapper for apr_socket_sendv that handles updating the worker stats. 
Name: get_data; Comment: Wrapper for apr_socket_recv that handles updating the worker stats. 
Name: if; Comment: If the client aborted the connection during retrieval or (partially) sending the response, don't return a HTTP_SERVICE_UNAVAILABLE, since this is not a backend problem. 
Name: if; Comment: Unset mode. 
Name: if; Comment: Set mode. 
Name: decodeenc; Comment: Decodes a '%' escaped string, and returns the number of characters 
Name: set_worker_hc_param; Comment: This serves double duty by not only validating (and creating) the health-check template, but also ties into set_worker_param() which does the actual setting of worker params in shm. 
Name: create_request_rec; Comment: Create a dummy request rec, simply so we can use ap_expr. Use our short-lived pool for bucket_alloc so that we can simply move buckets and use them after the backend connection is released. 
Name: hc_check_http; Comment: Send the HTTP OPTIONS, HEAD or GET request to the backend server associated w/ worker. If we have Conditions, then apply those to the resulting response, otherwise any status code 2xx or 3xx is considered "passing" 
Name: proxy_http_canon; Comment: Canonicalise http-like URLs. scheme is the scheme for the URL url is the URL starting with the first '/' def_port is the default port for this scheme. 
Name: date_canon; Comment: If the date is a valid RFC 850 date or asctime() date, then it is converted to the RFC 1123 format. 
Name: ap_proxy_read_headers; Comment: Note: pread_len is the length of the response that we've mistakenly read (assuming that we don't consider that an error via ProxyBadHeader StartBody). This depends on buffer actually being local storage to the calling code in order for pread_len to make any sense at all, since we depend on buffer still containing what was read by ap_getline() upon return. 
Name: proxy_http_handler; Comment: This handles http: URLs, and other URLs using a remote proxy over httpIf proxyhost is NULL, then contact the server directly, otherwise go via the proxy. Note that if a proxy is used, then URLs other than http: can be accessed, also, if we have trouble which is clearly specific to the proxy, then we return DECLINED so that we can try another proxy. (Or the direct route.) 
Name: proxy_http_post_config; Comment: post_config hook: 
Name: scgi_canon; Comment: Canonicalize scgi-like URLs. 
Name: if; Comment: if literal IPv6 address 
Name: if; Comment: Send request body (if any) 
Name: if; Comment: Position of http status code 
Name: while; Comment: start parsing headers 
Name: proxy_wstunnel_canon; Comment: Canonicalise http-like URLs. scheme is the scheme for the URL url is the URL starting with the first '/' def_port is the default port for this scheme. 
Name: proxy_wstunnel_request; Comment: process the request and write the response. 
Name: proxy_wstunnel_handler; Comment: 
Name: proxy_match_ipaddr; Comment: Return TRUE if addr represents an IP address (or an IP network address) 
Name: proxy_match_domainname; Comment: Return TRUE if host "host" is in domain "domain" 
Name: proxy_match_hostname; Comment: Return TRUE if host "host" is equal to host2 "host2" 
Name: proxy_match_word; Comment: Return TRUE if string "str2" occurs literally in "str1" 
Name: socket_cleanup; Comment: CONNECTION related... 
Name: connection_constructor; Comment: reslist constructor 
Name: connection_destructor; Comment: reslist destructor 
Name: fix_uds_filename; Comment: In the case of the reverse proxy, we need to see if we were passed a UDS url (eg: from mod_proxy) and adjust uds_path as required. 
Name: send_http_connect; Comment: Send a HTTP CONNECT request to a forward proxy. The proxy is given by "backend", the target server is contained in the "forward" member of "backend". 
Name: ap_proxy_clear_connection; Comment: *Remove all headers referred to by the Connection header. 
Name: reset; Comment: assumed to be mutex protected by caller 
Name: lbmethod_bybusyness_post_config; Comment: post_config hook: 
Name: find_best_byrequests; Comment: The idea behind the find_best_byrequests scheduler is the following: lbfactor is "how much we expect this worker to work", or "the worker's normalized work quota". lbstatus is "how urgent this worker has to work to fulfill its quota of work". We distribute each worker's work quota to the worker, and then look which of them needs to work most urgently (biggest lbstatus). This worker is then selected for work, and its lbstatus reduced by the total work quota we distributed to all workers. Thus the sum of all lbstatus does not change.(*) If some workers are disabled, the others will still be scheduled correctly. If a balancer is configured as follows: worker a b c d lbfactor 25 25 25 25 And b gets disabled, the following schedule is produced: a c d a c d a c d ... Note that the above lbfactor setting is the *exact* same as: worker a b c d lbfactor 1 1 1 1 Asymmetric configurations work as one would expect. For example: worker a b c d lbfactor 1 1 1 2 would have a, b and c all handling about the same amount of load with d handling twice what a or b or c handles individually. So we could see: b a d c d a c d b d ... 
Name: lbmethod_byrequests_post_config; Comment: post_config hook: 
Name: find_best_bytraffic; Comment: The idea behind the find_best_bytraffic scheduler is the following: We know the amount of traffic (bytes in and out) handled by each worker. We normalize that traffic by each workers' weight. So assuming a setup as below: worker a b c lbfactor 1 1 3 the scheduler will allow worker c to handle 3 times the traffic of a and b. If each request/response results in the same amount of traffic, then c would be accessed 3 times as often as a or b. If, for example, a handled a request that resulted in a large i/o bytecount, then b and c would be chosen more often, to even things out. 
Name: lbmethod_bytraffic_post_config; Comment: post_config hook: 
Name: session_included; Comment: *Should the session be included within this URL. This function tests whether a session is valid for this URL. It uses the include and exclude arrays to determine whether they should be included. 
Name: ap_session_load; Comment: *Load the session. If the session doesn't exist, a blank one will be created. @param r The request @param z A pointer to where the session will be written. 
Name: ap_session_save; Comment: *Save the session. In most implementations the session is only saved if the dirty flag is true. This prevents the session being saved unnecessarily. @param r The request @param z A pointer to where the session will be written. 
Name: ap_session_get; Comment: *Get a particular value from the session. @param r The current request. @param z The current session. If this value is NULL, the session will be looked up in the request, created if necessary, and saved to the request notes. @param key The key to get. @param value The buffer to write the value to. 
Name: ap_session_set; Comment: *Set a particular value to the session. Using this method ensures that the dirty flag is set correctly, so that the session can be saved efficiently. @param r The current request. @param z The current session. If this value is NULL, the session will be looked up in the request, created if necessary, and saved to the request notes. @param key The key to set. The existing key value will be replaced. @param value The value to set. 
Name: session_identity_encode; Comment: *Default identity encoding for the session. By default, the name value pairs in the session are URLEncoded, separated by equals, and then in turn separated by ampersand, in the format of an html form. This was chosen to make it easy for external code to unpack a session, should there be a need to do so. @param r The request pointer. @param z A pointer to where the session will be written. 
Name: session_identity_decode; Comment: *Default identity decoding for the session. By default, the name value pairs in the session are URLEncoded, separated by equals, and then in turn separated by ampersand, in the format of an html form. This was chosen to make it easy for external code to unpack a session, should there be a need to do so. This function reverses that process, and populates the session table. Name / value pairs that are not encoded properly are ignored. @param r The request pointer. @param z A pointer to where the session will be written. 
Name: session_output_filter; Comment: *Ensure any changes to the session are committed. This is done in an output filter so that our options for where to store the session can include storing the session within a cookie: As an HTTP header, the cookie must be set before the output is written, but after the handler is run. NOTE: It is possible for internal redirects to cause more than one request to be present, and each request might have a session defined. We need to go through each session in turn, and save each one. The same session might appear in more than one request. The first attempt to save the session will be called 
Name: session_insert_output_filter; Comment: *Insert the output filter. 
Name: session_fixups; Comment: *Fixups hook. Load the session within a fixup - this ensures that the session is properly loaded prior to the handler being called. The fixup is also responsible for injecting the session into the CGI environment, should the admin have configured it so. @param r The request 
Name: session_cookie_save; Comment: *Set the cookie and embed the session within it. This function adds an RFC2109 compliant Set-Cookie header for the cookie specified in SessionCookieName, and an RFC2965 compliant Set-Cookie2 header for the cookie specified in SessionCookieName2. If specified, the optional cookie attributes will be added to each cookie. If defaults are not specified, DEFAULT_ATTRS will be used. On success, this method will return APR_SUCCESS. @param r The request pointer. @param z A pointer to where the session will be written. 
Name: session_cookie_load; Comment: *Isolate the cookie with the name "name", and if present, extract the payload from the cookie. If the cookie is found, the cookie and any other cookies with the same name are removed from the cookies passed in the request, so that credentials are not leaked to a backend server or process. A missing or malformed cookie will cause this function to return APR_EGENERAL. On success, this returns APR_SUCCESS. 
Name: crypt_init; Comment: *Initialise the encryption as per the current config. Returns APR_SUCCESS if successful. 
Name: encrypt_string; Comment: *Encrypt the string given as per the current config. Returns APR_SUCCESS if successful. 
Name: decrypt_string; Comment: *Decrypt the string given as per the current config. Returns APR_SUCCESS if successful. 
Name: session_crypto_encode; Comment: *Crypto encoding for the session. @param r The request pointer. @param z A pointer to where the session will be written. 
Name: session_crypto_decode; Comment: *Crypto decoding for the session. @param r The request pointer. @param z A pointer to where the session will be written. 
Name: session_crypto_init; Comment: *Initialise the SSL in the post_config hook. 
Name: dbd_init; Comment: *Initialise the database. If the mod_dbd module is missing, this method will return APR_EGENERAL. 
Name: dbd_load; Comment: *Load the session by the key specified. The session value is allocated using the passed apr_pool_t. 
Name: session_dbd_load; Comment: *Load the session by firing off a dbd query. If the session is anonymous, the session key will be extracted from the cookie specified. Failing that, the session key will be extracted from the GET parameters. If the session is keyed by the username, the session will be extracted by that. If no session is found, an empty session will be created. On success, this returns OK. 
Name: dbd_save; Comment: *Save the session by the key specified. 
Name: dbd_remove; Comment: *Remove the session by the key specified. 
Name: dbd_clean; Comment: *Clean out expired sessions. TODO: We need to figure out a way to clean out expired sessions from the database. The monitor hook doesn't help us that much, as we have no handle into the server, and so we need to come up with a way to do this safely. 
Name: session_dbd_save; Comment: *Save the session by firing off a dbd query. If the session is anonymous, save the session and write a cookie containing the uuid. If the session is keyed to the username, save the session using the username as a key. On success, this method will return APR_SUCCESS. @param r The request pointer. @param z A pointer to where the session will be written. 
Name: session_dbd_monitor; Comment: *This function performs housekeeping on the database, deleting expired sessions. 
Name: slotmem_grab; Comment: XXXX: if !AP_SLOTMEM_IS_PREGRAB, then still worry about inuse for grab and return? 
Name: slotmem_filenames; Comment: Persist the slotmem in a file slotmem name and file name. none : no persistent data rel_name : $server_root/rel_name /abs_name : $abs_name 
Name: is_child_process; Comment: Whether the module is called from a MPM that re-enter main() and pre/post_config phases. 
Name: slotmem_shm_getstorage; Comment: make the storage usable from outside 
Name: post_config; Comment: Make sure the shared memory is cleaned 
Name: modssl_is_prelinked; Comment: the various processing hooks 
Name: ssl_register_hooks; Comment: the module registration phase 
Name: ssl_config_global_create; Comment: _________________________________________________________________** ** Support for Global Configuration ** _________________________________________________________________ 
Name: ssl_config_server_create; Comment: Create per-server SSL configuration 
Name: modssl_ctx_cfg_merge; Comment: Merge per-server SSL configurations 
Name: modssl_ctx_init_proxy; Comment: Create per-directory SSL configuration 
Name: modssl_ctx_cfg_merge_proxy; Comment: Merge per-directory SSL configurations 
Name: ssl_config_proxy_merge; Comment: Simply merge conf with base into conf, no third party. 
Name: ssl_cmd_SSLPassPhraseDialog; Comment: Configuration functions for particular directives 
Name: ssl_cmd_SSLOCSPNoVerify; Comment: Set OCSP responder certificate verification directive 
Name: ssl_cmd_SSLOCSPResponderCertificateFile; Comment: OCSP Responder File Function to read in value 
Name: DH_set0_pqg; Comment: Taken from OpenSSL 1.1.0 snapshot 20160410 
Name: make_dh_params; Comment: Grab well-defined DH parameters from OpenSSL, see the BN_get_rfc* functions in <openssl/bn.h> for all available primes. 
Name: modssl_get_dh_params; Comment: Hand out the same DH structure though once generated as we leakmemory otherwise and freeing the structure up after use would be hard to track and in fact is not needed at all as it is safe to use the same parameters over and over again security wise (in contrast to the keys itself) and code safe as the returned structure is duplicated by OpenSSL anyway. Hence no modification happens to our copy. 
Name: ssl_init_Module; Comment: Per-module initialization 
Name: use_certificate_chain; Comment: Read a file that optionally contains the server certificate in PEM format, possibly followed by a sequence of CA certificates that should be sent to the peer in the SSL Certificate message. 
Name: ssl_no_passwd_prompt_cb; Comment: prevent OpenSSL from showing its "Enter PEM pass phrase:" prompt 
Name: ssl_init_ConfigureServer; Comment: Configure a particular server 
Name: bio_filter_out_pass; Comment: Pass an output brigade down the filter stack; returns 1 on successor -1 on failure. 
Name: bio_filter_out_flush; Comment: Send a FLUSH bucket down the output filter stack; returns 1 onsuccess, -1 on failure. 
Name: char_buffer_read; Comment: Copy up to INL bytes from the char_buffer BUFFER into IN. Notethat due to the strange way this API is designed/used, the char_buffer object is used to cache a segment of inctx->buffer, and then this function called to copy (part of) that segment to the beginning of inctx->buffer. So the segments to copy cannot be presumed to be non-overlapping, and memmove must be used. 
Name: brigade_consume; Comment: This function will read from a brigade and discard the read buckets as itproceeds. It will read at most *len bytes. 
Name: bio_filter_in_read; Comment: this is the function called by SSL_read() 
Name: ssl_io_input_getline; Comment: Read a line of input from the SSL input layer into buffer BUF of length LEN; updating len to reflect the length of the lineincluding the LF character. 
Name: ssl_filter_io_shutdown; Comment: Close the SSL part of the socket connection (called immediately _before_ the socket is closed) or called with 
Name: ssl_io_filter_handshake; Comment: Perform the SSL handshake (whether in client or server mode), ifnecessary, for the given connection. 
Name: ssl_io_filter_buffer; Comment: This input filter supplies the buffered request body to the caller from the brigade stored in f->ctx. Note that the placement of this filter in the filter stack is important; it must be the first r->proto_input_filter; lower-typed filters will not be preservedacross internal redirects (see PR 43738). 
Name: ssl_io_input_add_filter; Comment: The request_rec pointer is passed in here only to ensure that thefilter chain is modified correctly when doing a TLS upgrade. It must *not* be used otherwise. 
Name: ssl_io_filter_init; Comment: The request_rec pointer is passed in here only to ensure that thefilter chain is modified correctly when doing a TLS upgrade. It must *not* be used otherwise. 
Name: ssl_io_data_dump; Comment: _________________________________________________________________** ** I/O Data Debugging ** _________________________________________________________________ 
Name: upgrade_connection; Comment: Perform an upgrade-to-TLS for the given request, per RFC 2817. 
Name: has_buffered_data; Comment: Perform a speculative (and non-blocking) read from the connectionfilters for the given request, to determine whether there is any pending data to read. Return non-zero if there is, else zero. 
Name: ssl_hook_ReadReq; Comment: Post Read Request Handler 
Name: ssl_configure_env; Comment: Move SetEnvIf information from request_rec to conn_rec/BUFF to allow the close connection handler to use them. 
Name: ssl_hook_Access_classic; Comment: Access Handler, classic flavour, for SSL/TLS up to v1.2 where everything can be renegotiated and no one is happy. 
Name: ssl_hook_Access_modern; Comment: Access Handler, modern flavour, for SSL/TLS v1.3 and onward. Only client certificates can be requested, everything else stays. 
Name: ssl_hook_UserCheck; Comment: Authentication Handler: Fake a Basic authentication from the X509 client certificate. This must be run fairly early on to prevent a real authentication from occurring, in particular it must be run before anything else that authenticates a user. This means that the Module statement for this module should be LAST in the Configuration file. 
Name: ssl_hook_Auth; Comment: authorization phase 
Name: ssl_authz_require_ssl_check; Comment: _________________________________________________________________** ** Authz providers for use with mod_authz_core ** _________________________________________________________________ 
Name: ssl_callback_TmpDH; Comment: Hand out standard DH parameters, based on the authentication strength 
Name: ssl_callback_SSLVerify; Comment: This OpenSSL callback function is called when OpenSSL does client authentication and verifies the certificate chain. 
Name: ssl_callback_NewSessionCacheEntry; Comment: This callback function is executed by OpenSSL whenever a new SSL_SESSION is added to the internal OpenSSL session cache. We use this hook to spread the SSL_SESSION also to the inter-process disk-cache to make share it with our other Apache pre-forked server processes. 
Name: ssl_callback_GetSessionCacheEntry; Comment: This callback function is executed by OpenSSL whenever a SSL_SESSION is looked up in the internal OpenSSL cache and it was not found. We use this to lookup the SSL_SESSION in the inter-process disk-cache where it was perhaps stored by one of our other Apache pre-forked server processes. 
Name: ssl_callback_DelSessionCacheEntry; Comment: This callback function is executed by OpenSSL whenever a SSL_SESSION is removed from the internal OpenSSL cache. We use this to remove the SSL_SESSION in the inter-process disk-cache, too. 
Name: log_tracing_state; Comment: Dump debugginfo trace to the log file. 
Name: ssl_callback_Info; Comment: This callback function is executed while OpenSSL processes the SSL handshake and does SSL record layer stuff. It's used to trap client-initiated renegotiations, and for dumping everything to the log. 
Name: init_vhost; Comment: This function sets the virtual host from an extended client hello with a server name indication extension ("SNI", cf. RFC 6066). 
Name: ssl_callback_ServerNameIndication; Comment: This callback function is executed when OpenSSL encounters an extended client hello with a server name indication extension ("SNI", cf. RFC 6066). 
Name: ssl_find_vhost; Comment: Find a (name-based) SSL virtual host where either the ServerName or one of the ServerAliases matches the supplied name (to be used with ap_vhost_iterate_given_conn()) 
Name: ssl_callback_SessionTicket; Comment: This callback function is executed when OpenSSL needs a key for encrypting/ decrypting a TLS session ticket (RFC 5077) and a ticket key file has been configured through SSLSessionTicketKeyFile. 
Name: ssl_callback_alpn_select; Comment: This callback function is executed when the TLS Application-Layer Protocol Negotiation Extension (ALPN, RFC 7301) is triggered by the Client Hello, giving a list of desired protocol names (in descending preference) to the server. The callback has to select a protocol name or return an error if none of the clients preferences is supported. The selected protocol does not have to be on the client list, according to RFC 7301, so no checks are performed. The client protocol list is serialized as length byte followed by ASCII characters (not null-terminated), followed by the next protocol name. 
Name: ssl_log_ssl_error; Comment: Prints the SSL library error information. 
Name: ssl_log_xerror; Comment: Wrappers for ap_log_error/ap_log_cerror/ap_log_rerror which log additional details of the X509 cert. For ssl_log_xerror, a pool needs to be passed in as well (for temporary allocation of the cert's subject/issuer name strings, in the other cases we use the connection and request pool, respectively). 
Name: ssl_mutex_init; Comment: ``Real programmers confuse Christmas and Halloween because DEC 25 = OCT 31.'' -- Unknown 
Name: extract_responder_uri; Comment: Return the responder URI specified in the given certificate, orNULL if none specified. 
Name: determine_responder_uri; Comment: Return the responder URI object which should be used in the givenconfiguration for the given certificate, or NULL if none can be determined. 
Name: create_request; Comment: Create an OCSP request for the given certificate; returning thecertificate ID in *certid and *issuer on success. Returns the request object on success, or NULL on error. 
Name: verify_ocsp_status; Comment: Verify the OCSP status of given certificate. ReturnsV_OCSP_CERTSTATUS_* result code. 
Name: exists_and_readable; Comment: Return true if the named file exists and is readable 
Name: asn1_table_vhost_key; Comment: reuse vhost keys for asn1 tables where keys are allocated out of s->process->pool to prevent "leaking" each time we format a vhost key. since the key is stored in a table with lifetime of s->process->pool, the key needs to have the same lifetime. XXX: probably seems silly to use a hash table with keys and values being the same, but it is easier than doing a linear search and will make it easier to remove keys if needed in the future. also have the problem with apr_array_header_t that if we underestimate the number of vhost keys when we apr_array_make(), the array will get resized when we push past the initial number of elts. this resizing in the s->process->pool means "leaking" since apr_array_push() will apr_alloc arr->nalloc2 elts, leaving the original arr->elts to waste. 
Name: ssl_var_lookup_ssl_cert_remain; Comment: Return a string giving the number of days remaining until 'tm', or"0" if this can't be determined. 
Name: extract_dn; Comment: Add each RDN in 'xn' to the table 't' where the NID is present in'nids', using key prefix 'pfx'. 
Name: dump_extn_value; Comment: For an extension type which OpenSSL does not recognize, attempt toparse the extension type as a primitive string. This will fail for any structured extension type per the docs. Returns non-zero on success and writes the string to the given bio. 
Name: ssl_var_log_config_register; Comment: register us for the mod_log_config function registering phase to establish %{...}c and to be able to expand %{...}x variables. 
Name: ssl_var_log_handler_c; Comment: implement the %{..}c log function(we are the only function) 
Name: ssl_var_log_handler_x; Comment: extend the implementation of the %{..}x log function(there can be more functions) 
Name: ssl_scache_init; Comment: _________________________________________________________________** ** Session Cache: Common Abstraction Layer ** _________________________________________________________________ 
Name: ssl_ext_status_hook; Comment: _________________________________________________________________** ** SSL Extension to mod_status ** _________________________________________________________________ 
Name: ssl_util_vhostid; Comment: _________________________________________________________________** ** Utility Functions ** _________________________________________________________________ 
Name: ssl_util_vhost_matches; Comment: Return TRUE iff the given servername matches the server record when selecting virtual hosts. 
Name: ssl_util_readfilter; Comment: Run a filter program and read the first line of its stdout output 
Name: ssl_asn1_table_set; Comment: certain key data needs to survive restarts, which are stored in the user data table of s->process->pool. to prevent "leaking" of this data, we use malloc/free rather than apr_palloc and these wrappers to help make sure we do not leak the malloc-ed data. 
Name: ssl_dyn_create_function; Comment: Dynamic lock creation callback 
Name: ssl_dyn_lock_function; Comment: Dynamic locking and unlocking function 
Name: ssl_dyn_destroy_function; Comment: Dynamic lock destruction callback 
Name: serialize_request; Comment: Serialize an OCSP request which will be sent to the responder atgiven URI to a memory BIO object, which is returned. 
Name: send_request; Comment: Send the OCSP request serialized into BIO 'request' to theresponder at given server given by URI. Returns socket object or NULL on error. 
Name: get_line; Comment: Return a pool-allocated NUL-terminated line, with CRLF stripped,read from brigade 'bbin' using 'bbout' as temporary storage. 
Name: read_response; Comment: Read the OCSP response from the socket 'sd', using temporary memoryBIO 'bio', and return the decoded OCSP response object, or NULL on error. 
Name: STACK_OF; Comment: Read a file that contains certificates in PEM format and return as a STACK. 
Name: modssl_read_privatekey; Comment: _________________________________________________________________** ** High-Level Private Key Loading ** _________________________________________________________________ 
Name: modssl_smart_shutdown; Comment: _________________________________________________________________** ** Smart shutdown ** _________________________________________________________________ 
Name: modssl_X509_getBC; Comment: retrieve basic constraints ingredients 
Name: asn1_string_convert; Comment: Convert ASN.1 string to a pool-allocated charstring, escapingcontrol characters. If raw is zero, convert to UTF-8, otherwise unchanged from the character set. 
Name: modssl_X509_NAME_ENTRY_to_string; Comment: convert a NAME_ENTRY to UTF8 string 
Name: modssl_X509_NAME_to_string; Comment: convert an X509_NAME to an RFC 2253 formatted string, optionally truncated to maxlen characters (specify a maxlen of 0 for no length limit) 
Name: modssl_X509_getSAN; Comment: Return an array of subjectAltName entries of type "type". If idx is -1, return all entries of the given type, otherwise return an array consisting of the n-th occurrence of that type only. Currently supported types: GEN_EMAIL (rfc822Name) GEN_DNS (dNSName) GEN_OTHERNAME (requires the otherName form ["onf"] argument to be supplied, see parse_otherName_value for the currently supported forms) 
Name: getIDs; Comment: return an array of (RFC 6125 coined) DNS-IDs and CN-IDs in a certificate 
Name: modssl_X509_match_name; Comment: Check if a certificate matches for a particular name, by iterating over its DNS-IDs and CN-IDs (RFC 6125), optionally with basic wildcard matching. If server_rec is non-NULL, some (debug/trace) logging is enabled. 
Name: ssl_dh_GetParamFromFile; Comment: _________________________________________________________________** ** Custom (EC)DH parameter support ** _________________________________________________________________ 
Name: modssl_SSL_SESSION_id2sz; Comment: _________________________________________________________________** ** Session Stuff ** _________________________________________________________________ 
Name: stapling_cache_response; Comment: OCSP response caching code. The response is preceded by a flag value which indicates whether the response was invalid when it was stored. the purpose of this flag is to avoid repeated queries to a server which has given an invalid response while allowing a response which has subsequently become invalid to be retried immediately. The key for the cache is the hash of the certificate the response is for. 
Name: ssl_stapling_mutex_init; Comment: SSL stapling mutex operations. Similar to SSL mutex except mutexes are mandatory if stapling is enabled. 
Name: stapling_cb; Comment: Certificate Status callback. This is called when a client includes acertificate status request extension. Check for cached responses in session cache. If valid send back to client. If absent or no longer valid, query responder and update cache. 
Name: TestOptionalFn; Comment: The alert will note a strange mirror-image style resemblance tomod_optional_hook_import.c. Yes, I _did_ mean import. Think about it. 
Name: ebcdic2ascii; Comment: Translate a memory block from EBCDIC (host charset) to ASCII (net charset)dest and srce may be identical, or separate memory blocks, but should not overlap. 
Name: os_forktype; Comment: Determine the method for forking off a child in such a way as toset both the POSIX and BS2000 user id's to the unprivileged user. 
Name: os_init_job_environment; Comment: This routine complements the setuid() call: it causes the BS2000 jobenvironment to be switched to the target user's user id. That is important if CGI scripts try to execute native BS2000 commands. 
Name: os_fork; Comment: BS2000 requires a "special" version of fork() before a setuid() call 
Name: ap_down_server_cb; Comment: down server event callback 
Name: ap_dummy_cb; Comment: Required place holder event callback 
Name: ap_cb_destroy; Comment: destroy callback resources 
Name: proc_mutex_mech; Comment: XXX move to APR and externalize (but implement differently :) ) 
Name: GetNullACL; Comment: To share the semaphores with other processes, we need a NULL ACLCode from MS KB Q106387 
Name: create_empty_config; Comment: Dealing with config vectors. These are associated with per-directory,per-server, and per-request configuration, and have a void* pointer for each modules. The nature of the structure pointed to is private to the module in question... the core doesn't (and can't) know. However, there are defined interfaces which allow it to create instances of its private per-directory and per-server structures, and to merge the per-directory structures of a directory and its subdirectory (producing a new one in which the defaults applying to the base directory have been properly overridden). 
Name: invoke_filter_init; Comment: Invoke the filter_init_func for all filters with FILTERS where f->rmatches R. Restricting to a matching R avoids re-running init functions for filters configured for r->main where r is a subrequest. 
Name: invoke_cmd; Comment: **************************************************************** Resource, access, and .htaccess config files now parsed by a common command loop. Let's begin with the basics; parsing the line andinvoking the function... 
Name: arr_elts_getstr; Comment: arr_elts_getstr() returns the next line from the string array. 
Name: arr_elts_close; Comment: arr_elts_close(): dummy close routine (makes sure no more lines can be read) 
Name: dump_config_name; Comment: *Used by -D DUMP_INCLUDES to output the config file "tree". 
Name: init_config_globals; Comment: ****************************************************************Getting *everything* configured... 
Name: show_overrides; Comment: Nonethe result is, well, a rather confusing set of possibilities for when a particular directive is allowed to be used. This procedure prints in English where the given (pc) directive can be used. 
Name: ap_response_code_string; Comment: Should probably just get rid of this... the only code that cares ispart of the core anyway (and in fact, it isn't publicised to other modules). 
Name: do_double_reverse; Comment: Code from Harald Hanche-Olsen <hanche@imf.unit.no> 
Name: find_parent; Comment: returns a parent if it matches the given directive 
Name: init_config_defines; Comment: Make sure we can revert the effects of Define/UnDefine when restarting. This function must be called once per loading of the config, before ap_server_config_defines is changed. This may be during reading of the config, which is even before the pre_config hook is run (due to EXEC_ON_READ for Define/UnDefine). 
Name: set_etag_bits; Comment: Note what data should be used when forming file ETag values. It would be nicer to do this as an ITERATE, but then we couldn't remember the +/- state properly. 
Name: unclosed_directive; Comment: Report a missing-'>' syntax error. 
Name: missing_container_arg; Comment: Report a missing args in '<Foo >' syntax error. 
Name: start_cond_section; Comment: Implementation of <IfXXXXX>-style conditional sections. Callbackto test condition must be in cmd->info, matching function type test_cond_section_fn. 
Name: test_ifmod_section; Comment: Callback to implement <IfModule> test for start_cond_section. 
Name: virtualhost_section; Comment: httpd.conf commands... beginning with the <VirtualHost> business 
Name: server_hostname_port; Comment: The ServerName directive takes one argument with format [scheme:]fully-qualified-domain-name[:port], for instance ServerName www.example.com ServerName www.example.com:80 ServerName https:www.example.com:443 
Name: set_banner; Comment: This routine adds the real server base identity to the banner string, and then locks out changes until the next reconfig. 
Name: core_map_to_storage; Comment: ****************************************************************Test the filesystem name through directory_walk and file_walk 
Name: setaside_remaining_output; Comment: This function assumes that either ctx->buffered_bb == NULL, or ctx->buffered_bb is empty, or ctx->buffered_bb == bb 
Name: make_sock; Comment: TODO: make_sock is just begging and screaming for APR abstraction 
Name: open_listeners; Comment: *Create, open, listen, and bind all sockets. @param process The process record for the currently running server @return The number of open sockets 
Name: close_handle_in_child; Comment: remember to close this handle in the child processOn Win32 this makes zero sense, because we don't take the parent process's child procs. If the win32 parent instead passed each and every logger write handle from itself down to the child, and the parent manages all aspects of keeping the reliable pipe log children alive, this would still make no sense :) Cripple it on Win32. 
Name: log_child; Comment: Create a child process running PROGNAME with a pipe connected tothe childs stdin. The write-end of the pipe will be placed in *FPIN on successful return. If dummy_stderr is non-zero, the stderr for the child will be the same as the stdout of the parent. Otherwise the child will inherit the stderr from the parent. 
Name: open_error_log; Comment: Open the error log for the given server_rec. If IS_MAIN isnon-zero, s is the main server. 
Name: do_errorlog_default; Comment: This is used if no error log format is defined and during startup. It automatically omits the timestamp if logging to syslog. 
Name: log_error_va_glue; Comment: For internal calls to log_error_core with self-composed arg lists 
Name: piped_log_spawn; Comment: Spawn the piped logger process pl->program. 
Name: show_mpm_settings; Comment: WARNING: Win32 binds http_main.c dynamically to the server. Please place extern functions and global data in another appropriate module. Most significant main() global data can be found in http_config.c 
Name: abort_on_oom; Comment: APR callback invoked if allocation fails. 
Name: deregister_all_hooks; Comment: Deregister all hooks when clearing pconf (pre_cleanup).TODO: have a hook to deregister and run them from here? ap_clear_auth_internal() is already a candidate. 
Name: mpm_common_pre_config; Comment: Set defaults for config directives implemented here. This iscalled from core's pre-config hook, so MPMs which need to override one of these should run their pre-config hook after that of core. 
Name: ap_mpm_set_pidfile; Comment: standard mpm configuration handling 
Name: ap_core_child_status; Comment: core's child-status hooktracks number of remaining children per generation and runs the end-generation hook when the last child of a generation exits 
Name: ap_queue_destroy; Comment: *Callback routine that is called to destroy this fd_queue_t when its pool is destroyed. 
Name: ap_queue_create; Comment: *Initialize the fd_queue_t. 
Name: ap_queue_push_socket; Comment: *Push a new socket onto the queue. precondition: ap_queue_info_wait_for_idler has already been called to reserve an idle worker thread 
Name: ap_queue_pop_something; Comment: *Retrieves the next available socket from the queue. If there are no sockets available, it will block until one becomes available. Once retrieved, the socket is placed into the address specified by 'sd'. 
Name: dummy_connection; Comment: This function connects to the server and sends enough data toensure the child wakes up and processes a new connection. This permits the MPM to skip the poll when there is only one listening socket, because it provides a alternate way to unblock an accept() when the pod is used. 
Name: sig_coredump; Comment: handle all varieties of core dumping signals 
Name: fatal_signal_cleanup; Comment: We can't call sig_coredump (ap_log_error) once pconf is destroyed, soavoid double faults by restoring each default signal handler on cleanup. 
Name: strip_headers_request_body; Comment: if a request with a body creates a subrequest, remove original request'sinput headers which pertain to the body which has already been read. out-of-line helper function for ap_set_sub_req_protocol. 
Name: r_flush; Comment: Flush callback for apr_vformatter; returns -1 on error. 
Name: protocol_cmp; Comment: Compare two protocol identifier. Result is similar to strcmp(): 0 gives same precedence, >0 means proto1 is preferred. 
Name: resolve_symlink; Comment: resolve_symlink must _always_ be called on an APR_LNK file type! It will resolve the actual target file type, modification date, etc, and provide any processing required for symlink evaluation. Path must already be cleaned, no trailing slash, no multi-slashes, and don't call this on the root! Simply, the number of times we deref a symlink are minimal compared to the number of times we had an extra lstat() since we 'weren't sure'. To optimize, we stat() anything when given (opts & OPT_SYM_LINKS), otherwise we start off with an lstat(). Every lstat() must be dereferenced in case it points at a 'nasty' - we must always rerun check_safe_file (or similar.) 
Name: make_sub_request; Comment: ****************************************************************The sub_request mechanism. Fns to look up a relative URI from, e.g., a map file or SSI document. These do all access checks, etc., but don't actually run the transaction ... use run_sub_req below for that. Also, be sure to use destroy_sub_req as appropriate if you're likely to be creating more than a few of these. (An early Apache version didn't destroy the sub_reqs used in directory indexing. The result, when indexing a directory with 800-odd files in it, was massively excessive storage allocation). Note more manipulation of protocol-specific vars in the request structure... 
Name: ap_cleanup_shared_mem; Comment: ToDo: This function should be renamed to cleanup_shared and it should handle cleaning up a scoreboard shared between processes using any form of IPC (file, shared memory segment, etc.). Leave it as is now because it is being used by various MPMs. 
Name: create_namebased_scoreboard; Comment: *Create a name-based scoreboard in the given pool using the given filename. 
Name: open_scoreboard; Comment: ToDo: This function should be made to handle setting upa scoreboard shared between processes using any IPC technique, not just a shared memory segment 
Name: ap_create_scoreboard; Comment: Create or reinit an existing scoreboard. The MPM can control whetherthe scoreboard is shared across multiple processes or not 
Name: regex_cleanup; Comment: Here's a pool-based interface to the POSIX-esque ap_regcomp(). Note that we return ap_regex_t instead of being passed one. The reason is that if you use an already-used ap_regex_t structure, the memory that you've already allocated gets forgotten, and regfree() doesn't clear it. So we don't allow it. 
Name: regsub_core; Comment: This function substitutes for $0-$9, filling in regular expressionsubmatches. Pass it the same nmatch and pmatch arguments that you passed ap_regexec(). pmatch should not be greater than the maximum number of subexpressions - i.e. one more than the re_nsub member of ap_regex_t. nmatch must be <=AP_MAX_REG_MATCH (10). input should be the string with the $-expressions, source should be the string that was matched against. It returns the substituted string, or NULL if a vbuf is used. On errors, returns the orig string. Parts of this code are based on Henry Spencer's regsub(), from his AT&T V8 regexp package. 
Name: substring_conf; Comment: Get a word, (new) config-file style --- quoted strings and backslashesall honored 
Name: cfg_close; Comment: we can't use apr_file_* directly because of linking issues on Windows 
Name: ap_cfg_getline_core; Comment: If custom handler does not define a getstr() function, read char by char 
Name: find_list_item; Comment: Find an item in canonical form (lowercase, no extra spaces) withinan HTTP field value list. Returns 1 if found, 0 if not found. This would be much more efficient if we stored header fields as an array of list items as they are received instead of a plain string. 
Name: unescape_url; Comment: Unescapes a URL, leaving reserved characters intact. Returns 0 on success, non-zero on error Failure is due to bad % escape returns HTTP_BAD_REQUEST decoding %00 or a forbidden character returns HTTP_NOT_FOUND 
Name: ap_get_local_host; Comment: We must return a FQDN 
Name: extract_cookie_line; Comment: Iterate through the cookies, isolate our cookie and then remove it.If our cookie appears two or more times, but with different values, remove it twice and set the duplicated flag to true. Remove any $path or other attributes following our cookie if present. If we end up with an empty cookie, remove the whole header. 
Name: strcmplex; Comment: combined string/int comparison for compatibility with ssl_expr 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: ap_expr_yyrestart; Comment: * Immediately switch to a different input stream.@param input_file A readable stream. @param yyscanner The scanner object. @note This function does not reset the start condition to @c INITIAL . 
Name: ap_expr_yy_switch_to_buffer; Comment: * Switch to a different input buffer.@param new_buffer The new input buffer. @param yyscanner The scanner object. 
Name: ap_expr_yy_create_buffer; Comment: * Allocate and initialize an input buffer state.@param file A readable stream. @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE. @param yyscanner The scanner object. @return the allocated buffer state. 
Name: ap_expr_yy_delete_buffer; Comment: * Destroy the buffer.@param b a buffer created with ap_expr_yy_create_buffer() @param yyscanner The scanner object. 
Name: ap_expr_yy_init_buffer; Comment: Initializes or reinitializes a buffer.This function is sometimes called more than once on the same buffer, such as during a ap_expr_yyrestart() or at EOF. 
Name: ap_expr_yy_flush_buffer; Comment: * Discard all buffered characters. On the next scan, YY_INPUT will be called.@param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER. @param yyscanner The scanner object. 
Name: ap_expr_yypush_buffer_state; Comment: * Pushes the new state onto the stack. The new state becomes the current state. This function will allocate the stack if necessary. @param new_buffer The new state. @param yyscanner The scanner object. 
Name: ap_expr_yypop_buffer_state; Comment: * Removes and deletes the top of the stack, if present. The next element becomes the new top. @param yyscanner The scanner object. 
Name: ap_expr_yyensure_buffer_stack; Comment: Allocates the stack if it does not exist. Guarantees space for at least one push. 
Name: ap_expr_yy_scan_buffer; Comment: * Setup the input buffer state to scan directly from a user-specified character buffer.@param base the character buffer @param size the size in bytes of the character buffer @param yyscanner The scanner object. @return the newly allocated buffer state object. 
Name: ap_expr_yy_scan_string; Comment: * Setup the input buffer state to scan a string. The next call to ap_expr_yylex() willscan from a @e copy of @a str. @param yystr a NUL-terminated string to scan @param yyscanner The scanner object. @return the newly allocated buffer state object. @note If you want to scan bytes that may contain NUL values, then use ap_expr_yy_scan_bytes() instead. 
Name: ap_expr_yy_scan_bytes; Comment: * Setup the input buffer state to scan the given bytes. The next call to ap_expr_yylex() willscan from a @e copy of @a bytes. @param yybytes the byte buffer to scan @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes. @param yyscanner The scanner object. @return the newly allocated buffer state object. 
Name: ap_expr_yyget_extra; Comment: * Get the user-defined data for this scanner.@param yyscanner The scanner object. 
Name: ap_expr_yyget_lineno; Comment: * Get the current line number.@param yyscanner The scanner object. 
Name: ap_expr_yyget_in; Comment: * Get the input stream.@param yyscanner The scanner object. 
Name: ap_expr_yyget_out; Comment: * Get the output stream.@param yyscanner The scanner object. 
Name: ap_expr_yyget_leng; Comment: * Get the length of the current token.@param yyscanner The scanner object. 
Name: ap_expr_yyget_text; Comment: * Get the current token.@param yyscanner The scanner object. 
Name: ap_expr_yyset_extra; Comment: * Set the user-defined data. This data is never touched by the scanner.@param user_defined The data to be associated with this scanner. @param yyscanner The scanner object. 
Name: ap_expr_yyset_lineno; Comment: * Set the current line number.@param line_number @param yyscanner The scanner object. 
Name: ap_expr_yyset_in; Comment: * Set the input stream. This does not discard the currentinput buffer. @param in_str A readable stream. @param yyscanner The scanner object. @see ap_expr_yy_switch_to_buffer 
Name: ap_expr_yyget_lval; Comment: Accessor methods for yylval and yylloc 
Name: ap_expr_yylex_init; Comment: ap_expr_yylex_init is special because it creates the scanner itself, so it isthe ONLY reentrant function that doesn't take the scanner as the last argument. That's why we explicitly handle the declaration, instead of using our macros. 
Name: ap_expr_yylex_init_extra; Comment: ap_expr_yylex_init_extra has the same functionality as ap_expr_yylex_init, but follows theconvention of taking the scanner as the last argument. Note however, that this is a *pointer* to a scanner, as it will be allocated by this call (and is the reason, too, why this function also must handle its own declaration). The user defined value in the first argument will be available to ap_expr_yyalloc in the yyextra field. 
Name: ap_expr_yylex_destroy; Comment: ap_expr_yylex_destroy is for both reentrant and non-reentrant scanners. 
Name: trie_node_link; Comment: Link a trie node to its parent 
Name: trie_node_alloc; Comment: Allocate a new node for a trie.If parent is non-NULL, link the new node under the parent node with key 'c' (or, if an existing child node matches, return that one) 
Name: original_uri; Comment: Obtain the Request-URI from the original request-line, returninga new string from the request pool containing the URI or "". 
Name: get_addresses; Comment: Parses a host of the form <address>[:port] paddr is used to create a list in the order of input **paddr is the ->next pointer of the last entry (or s->addrs) *paddr is the variable used to keep track of **paddr between calls port is the default port to assume 
Name: ap_parse_vhost_addrs; Comment: parse the <VirtualHost> addresses 
Name: hash_inaddr; Comment: This hashing function is designed to get good distribution in the caseswhere the server is handling entire "networks" of servers. i.e. a whack of /24s. This is probably the most common configuration for ISPs with large virtual servers. NOTE: This function is symmetric (i.e. collapses all 4 octets into one), so machine byte order (big/little endianness) does not matter. Hash function provided by David Hankins. 
Name: add_name_vhost_config; Comment: When a second or later virtual host maps to the same IP chain, add the relevant server names to the chain. Special care is taken to avoid adding ic->names until we're sure there are multiple VH'es. 
Name: fix_hostname_v6_literal; Comment: ****************************************************************************run-time vhost matching functions 
Name: strict_hostname_check; Comment: If strict mode ever becomes the default, this should be folded into fix_hostname_non_v6() 
Name: fix_hostname; Comment: Lowercase and remove any trailing dot and/or :port from the hostname,and check that it is sane. In most configurations the exact syntax of the hostname isn't important so strict sanity checking isn't necessary. However, in mass hosting setups (using mod_vhost_alias or mod_rewrite) where the hostname is interpolated into the filename, we need to be sure that the interpolation doesn't expose parts of the filesystem. We don't do strict RFC 952 / RFC 1123 syntax checking in order to support iDNS and people who erroneously use underscores. Instead we just check for filesystem metacharacters: directory separators / and _ and sequences of more than one dot. 
Name: matches_aliases; Comment: return 1 if host matches ServerName or ServerAliases 
Name: TO_QUEUE_APPEND; Comment: Macros for accessing struct timeout_queue. For TO_QUEUE_APPEND and TO_QUEUE_REMOVE, timeout_mutex must be held. 
Name: start_lingering_close_blocking; Comment: Close our side of the connection, flushing data to the client first. Pre-condition: cs is not in any timeout queue and not in the pollset, timeout_mutex is not locked return: 0 if connection is fully closed, 1 if connection is lingering May only be called by worker thread. 
Name: start_lingering_close_nonblocking; Comment: Defer flush and close of the connection by adding it to defer_linger_chain, for a worker to grab it and do the job (should that be blocking). Pre-condition: cs is not in any timeout queue and not in the pollset, timeout_mutex is not locked return: 1 connection is alive (but aside and about to linger) May be called by listener thread. 
Name: stop_lingering_close; Comment: forcibly close a lingering connection after the lingering period has expired Pre-condition: cs is not in any timeout queue and not in the pollset return: irrelevant (need same prototype as start_lingering_close) 
Name: ptrans_pre_cleanup; Comment: Noneif the connection is currently suspended as far as modules know, provide notification of resumption. 
Name: event_request_cleanup; Comment: event_pre_read_request() and event_request_cleanup() track the current r for a given connection. 
Name: event_post_read_request; Comment: event_post_read_request() tracks the current server config for a given request. 
Name: process_socket; Comment: process one connection in the worker 
Name: check_infinite_requests; Comment: conns_this_child has gone to zero or below. See if the admin coded "MaxConnectionsPerChild 0", and keep going in that case. Doing it this way simplifies the hot path in worker_thread 
Name: push2worker; Comment: Pre-condition: cs is neither in event_pollset nor a timeout queue this function may only be called by the listener 
Name: get_worker; Comment: get_worker: If *have_idle_worker_p == 0, reserve a worker thread, and set *have_idle_worker_p = 1. If *have_idle_worker_p is already 1, will do nothing. If blocking == 1, block if all workers are currently busy. If no worker was available immediately, will set *all_busy to 1. XXX: If there are no workers, we should not block immediately but XXX: close all keep-alive connections first. 
Name: timer_comp; Comment: The following compare function is used by apr_skiplist_insert() to keep the elements (timers) sorted and provide O(log n) complexity (this is also true for apr_skiplist_{find,remove}(), but those are not used in MPM event where inserted timers are not searched nor removed, but with apr_skiplist_pop() which does use any compare function). It is meant to return 0 when a == b, <0 when a < b, and >0 when a > b. However apr_skiplist_insert() will not add duplicates (i.e. a == b), and apr_skiplist_add() is only available in APR 1.6, yet multiple timers could possibly be created in the same micro- second (duplicates with regard to apr_time_t); therefore we implement thecompare function to return +1 instead of 0 when compared timers are equal, thus duplicates are still added after each other (in order of insertion). 
Name: process_timeout_queue; Comment: call 'func' for all elements of 'q' with timeout less than 'timeout_time'.Pre-condition: timeout_mutex must already be locked Post-condition: timeout_mutex will be locked again 
Name: worker_thread_should_exit_early; Comment: During graceful shutdown, if there are more running worker threads than open connections, exit one worker thread. return 1 if thread should exit, 0 if it should continue running. 
Name: worker_thread; Comment: XXX For ungraceful termination/restart, we definitely don't want to wait for active connections to finish but we may want to wait for idle workers to get out of the queue code and release mutexes, since those mutexes are cleaned up pretty soon and some systems may not react favorably (i.e., segfault) if operations are attempted on cleaned-up mutexes. 
Name: start_threads; Comment: XXX under some circumstances not understood, children can get stuck in start_threads forever trying to take over slots which will never be cleaned up; for now there is an APLOG_DEBUG message issued every so often when this condition occurs 
Name: startup_children; Comment: start up a bunch of children 
Name: event_open_logs; Comment: This really should be a post_config hook, but the error log is alreadyredirected by that point, so we need to do this in the open_logs phase. 
Name: master_main; Comment: Main processing of the parent processreturns TRUE if restarting 
Name: sig_term; Comment: Signal handling routines 
Name: mpmt_os2_query; Comment: Enquiry functions used get MPM status info 
Name: mpmt_os2_pre_config; Comment: Configuration handling stuff 
Name: mpm_main_cleanup; Comment: proper cleanup when returning from ap_mpm_run() 
Name: mpm_term; Comment: ****************************************************************Connection structures and accounting... 
Name: restart; Comment: restart() is the signal handler for SIGHUP and SIGWINCHin the parent process, unless running in ONE_PROCESS mode 
Name: worker_main; Comment: static 
Name: startup_workers; Comment: start up a bunch of worker threads 
Name: netware_run; Comment: ****************************************************************Executive routines. 
Name: chdir_for_gprof; Comment: change directory for gprof to plop the gmon.out file configure in httpd.conf: GprofDir $RuntimeDir/ -> $ServerRoot/$RuntimeDir/gmon.out GprofDir $RuntimeDir/% -> $ServerRoot/$RuntimeDir/gprof.$pid/gmon.out 
Name: just_die; Comment: ****************************************************************Connection structures and accounting... 
Name: prefork_run; Comment: ****************************************************************Executive routines. 
Name: prefork_open_logs; Comment: This really should be a post_config hook, but the error log is alreadyredirected by that point, so we need to do this in the open_logs phase. 
Name: worker_main; Comment: worker_main() Main entry point for the worker threads. Worker threads block in win*_get_connection() awaiting a connection to service. 
Name: create_listener_thread; Comment: child_main() Entry point for the main control thread for the child process. This thread creates the accept thread, worker threads and monitors the child process for maintenance and shutdown events. 
Name: set_threads_per_child; Comment: Command processors 
Name: get_handles_from_parent; Comment: Passed the following handles [in sync with send_handles_to_child()] ready event [signal the parent immediately, then close] exit event [save to poll later] start mutex [signal from the parent to begin accept()] scoreboard shm handle [to recreate the ap_scoreboard] 
Name: get_listeners_from_parent; Comment: get_listeners_from_parent() The listen sockets are opened in the parent. This function, which runs exclusively in the child process, receives them from the parent and makes them availeble in the child. 
Name: winnt_query; Comment: Remember service_to_start failures to log and fail in pre_config.Remember inst_argc and inst_argv for installing or starting the service after we preflight the config. 
Name: winnt_open_logs; Comment: This really should be a post_config hook, but the error log is alreadyredirected by that point, so we need to do this in the open_logs phase. 
Name: ReportStatusToSCMgr; Comment: ********************************* WinNT service control management *********************************
Name: service_nt_ctrl; Comment: handle the SCM's ControlService() callbacks to our service 
Name: mpm_service_set_name; Comment: The service configuration's is stored under the following trees:HKLM_System_CurrentControlSet_Services_[service name] _DisplayName _ImagePath _Parameters_ConfigArgs 
Name: signal_service_transition; Comment: signal_service_transition is a simple thunk to signal the serviceand monitor its successful transition. If the signal passed is 0, then the caller is assumed to already have performed some service operation to be monitored (such as StartService), and no actual ControlService signal is sent. 
Name: mpm_signal_service; Comment: signal is zero to stop, non-zero for restart 
Name: process_socket; Comment: ****************************************************************Child process main loop. 
Name: check_infinite_requests; Comment: requests_this_child has gone to zero or below. See if the admin coded "MaxConnectionsPerChild 0", and keep going in that case. Doing it this way simplifies the hot path in worker_thread 
Name: worker_open_logs; Comment: This really should be a post_config hook, but the error log is alreadyredirected by that point, so we need to do this in the open_logs phase. 
Name: err; Comment: simple little function to write an error string and exit 
Name: apr_err; Comment: simple little function to write an APR error string and exit 
Name: xstrcasestr; Comment: Similar to standard strstr() but we ignore case in this version. Copied from ap_strcasestr(). 
Name: abort_on_oom; Comment: pool abort function 
Name: compradre; Comment: calculate and output results 
Name: output_html_results; Comment: calculate and output results in HTML 
Name: start_connect; Comment: start asnchronous non-blocking connection 
Name: close_connection; Comment: close down connection and save stats 
Name: read_connection; Comment: read data from connection 
Name: test; Comment: run the tests 
Name: copyright; Comment: display copyright information 
Name: usage; Comment: display usage information 
Name: parse_url; Comment: split URL into parts 
Name: setterm; Comment: called on SIGINT or SIGTERM 
Name: oom; Comment: called in out of memory condition 
Name: printstats; Comment: print purge statistics 
Name: round_up; Comment: *Round the value up to the given threshold. 
Name: delete_parent; Comment: delete parent directories 
Name: delete_file; Comment: delete a single file 
Name: delete_entry; Comment: delete cache file set 
Name: list_urls; Comment: list the cache directory tree 
Name: process_dir; Comment: walk the cache directory tree 
Name: purge; Comment: purge cache entries 
Name: delete_url; Comment: *Delete a specific URL from the cache. 
Name: main; Comment: main 
Name: accessible; Comment: Check to see if the specified file can be opened for the given access. 
Name: exists; Comment: Return true if the named file exists, regardless of permissions. 
Name: main; Comment: Let's do it. We end up doing a lot of file opening and closing, but what do we care? This application isn't run constantly. 
Name: usage; Comment: usage info 
Name: mkhash; Comment: Make a password record from the given information. A zero return indicates success; on failure, ctx->errstr points to the error message. 
Name: get_now; Comment: This function returns the current Unix time (time_t) adjusted forany configured or derived local time offset. The offset applied is returned via *offset. 
Name: close_logfile; Comment: Close a file and destroy the associated pool. 
Name: dumpConfig; Comment: Dump the configuration parsing result to STDERR. 
Name: checkRotate; Comment: Check whether we need to rotate. Possible reasons are: - No log file open (ROTATE_NEW) - User forces us to rotate (ROTATE_FORCE) - Our log file size is already bigger than the allowed maximum (ROTATE_SIZE) - The next log time interval expired (ROTATE_TIME) When size and time constraints are both given, it suffices that one of them is fulfilled. 
Name: post_rotate; Comment: Handle post-rotate processing. 
Name: truncate_and_write_error; Comment: After a error, truncate the current file and write out an errormessage, which must be contained in message. The process is terminated on failure. 
Name: doRotate; Comment: Open a new log file, and if successful also close the old one. The timestamp for the calculation of the file name of the new log file will be the actual millisecond timestamp, except when a regular rotation based on a time interval is configured and the previous interval is over. Then the timestamp is the starting time of the actual interval. 
Name: get_time_or_size; Comment: Get a size or time param from a string. Parameter 'last' indicates, whether the argument is the last commadnline argument. UTC offset is only allowed as a last argument in order to make is distinguishable from the rotation interval time. 
Name: CreateMainWindow; Comment: Create main invisible window 
Name: checkmask; Comment: Compare a string to a mask Mask characters: @ - uppercase letter # - lowercase letter & - hex digit # - digit - swallow remaining characters <x> - exact match for any other character 
Name: hex2sec; Comment: Converts 8 hex digits to a time integer 
Name: accept_mutex_init; Comment: Initialize mutex lock. Must be safe to call this on a restart. 
Name: concatenated_filename; Comment: Concatenate a directory filename, a relative filename and an optional suffix. The directory may end with the directory separator. The second argument may not start with the directory separator (it is relative). Return a freshly allocated filename. Return NULL and set errno upon memory allocation failure. 
Name: __stpcpy; Comment: Copy SRC to DEST, returning the address of the terminating '_0' in DEST. 
Name: xconcatenated_filename; Comment: Concatenate a directory filename, a relative filename and an optional suffix. The directory may end with the directory separator. The second argument may not start with the directory separator (it is relative). Return a freshly allocated filename. 
Name: ar_name; Comment: Return nonzero if NAME is an archive-member reference, zero if not. An archive-member reference is a name like 'lib(member)' where member is a non-empty string. If a name like 'lib((entry))' is used, a fatal error is signaled at the attempt to use this unsupported feature. 
Name: ar_parse_name; Comment: Parse the archive-member reference NAME into the archive and member names. Creates one allocated string containing both names, pointed to by ARNAME_P. MEMNAME_P points to the member. 
Name: ar_member_date_1; Comment: ARGSUSED 
Name: ar_member_date; Comment: Return the modtime of NAME. 
Name: ar_glob_match; Comment: This function is called by 'ar_scan' to match one archive element against the pattern in STATE. 
Name: ar_glob_pattern_p; Comment: Return nonzero if PATTERN contains any metacharacters. Metacharacters can be quoted with backslashes if QUOTE is nonzero. 
Name: ar_glob; Comment: Glob for MEMBER_PATTERN in archive ARNAME. Return a malloc'd chain of matching elements (or nil if none). 
Name: vms_time_to_unix; Comment: Time conversion from VMS to Unix Conversion from local time (stored in library) to GMT (needed for gmake) Note: The tm_gmtoff element is a VMS extension to the ANSI standard. 
Name: VMS_get_member_info; Comment: This is a callback procedure for lib$get_index 
Name: ar_scan; Comment: Takes three arguments ARCHIVE, FUNCTION and ARG. Open the archive named ARCHIVE, find its members one by one, and for each one call FUNCTION with the following arguments: archive file descriptor for reading the data, member name, member name might be truncated flag, member header position in file, member data position in file, member data size, member date, member uid, member gid, member protection mode, ARG. NOTE: on VMS systems, only name, date, and arg are meaningful! The descriptor is poised to read the data of the member when FUNCTION is called. It does not matter how much data FUNCTION reads. If FUNCTION returns nonzero, we immediately return what FUNCTION returned. Returns -1 if archive does not exist, Returns -2 if archive has invalid format. Returns 0 if have scanned successfully. 
Name: ar_scan; Comment: Takes three arguments ARCHIVE, FUNCTION and ARG. Open the archive named ARCHIVE, find its members one by one, and for each one call FUNCTION with the following arguments: archive file descriptor for reading the data, member name, member name might be truncated flag, member header position in file, member data position in file, member data size, member date, member uid, member gid, member protection mode, ARG. The descriptor is poised to read the data of the member when FUNCTION is called. It does not matter how much data FUNCTION reads. If FUNCTION returns nonzero, we immediately return what FUNCTION returned. Returns -1 if archive does not exist, Returns -2 if archive has invalid format. Returns 0 if have scanned successfully. 
Name: ar_name_equal; Comment: Return nonzero iff NAME matches MEM. If TRUNCATED is nonzero, MEM may be truncated to sizeof (struct ar_hdr.ar_name) - 1. 
Name: ar_member_pos; Comment: ARGSUSED 
Name: ar_member_touch; Comment: Set date of member MEMNAME in archive ARNAME to current time. Returns 0 if successful, -1 if file ARNAME does not exist, -2 if not a valid archive, -3 if other random system call error (including file read-only), 1 if valid but member MEMNAME does not exist. 
Name: set_file_variables; Comment: Set FILE's automatic variables up. 
Name: chop_commands; Comment: Chop CMDS up into individual command lines if necessary. Also set the 'lines_flags' and 'any_recurse' members. 
Name: execute_file_commands; Comment: Execute the commands to remake FILE. If they are currently executing, return or have already finished executing, just return. Otherwise, fork off a child process to run the first command line in the sequence. 
Name: fatal_error_signal; Comment: Handle fatal signals. 
Name: delete_target; Comment: Delete FILE unless it's precious or not actually a file (phony), and it has changed on disk since we last stat'd it. 
Name: delete_child_targets; Comment: Delete all non-precious targets of CHILD unless they were already deleted. Set the flag in CHILD to say they've been deleted. 
Name: print_commands; Comment: Print out the commands in CMDS. 
Name: set_default_suffixes; Comment: Set up the default .SUFFIXES list. 
Name: install_default_suffix_rules; Comment: Enter the default suffix rules as file rules. This used to be done in install_default_implicit_rules, but that loses because we want the suffix rules installed before reading makefiles, and the pattern rules installed after. 
Name: install_default_implicit_rules; Comment: Install the default pattern rules. 
Name: vmsstat_dir; Comment: fake stat entry for a directory 
Name: directory_contents_hash_cmp; Comment: None But, if we're not sure of the type of X and Y they may be too large for an int (on a 64-bit system for example). So, use ?: instead. See Savannah bug #15534. NOTE! This macro has side-effects! 
Name: find_directory; Comment: Find the directory named NAME and return its 'struct directory'. 
Name: dir_contents_file_exists_p; Comment: Return 1 if the name FILENAME is entered in DIR's hash table. FILENAME must contain no slashes. 
Name: dir_file_exists_p; Comment: Return 1 if the name FILENAME in directory DIRNAME is entered in the dir hash table. FILENAME must contain no slashes. 
Name: file_exists_p; Comment: Return 1 if the file named NAME exists. 
Name: file_impossible; Comment: Mark FILENAME as 'impossible' for 'file_impossible_p'. This means an attempt has been made to search for FILENAME as an intermediate file, and it has failed. 
Name: file_impossible_p; Comment: Return nonzero if FILENAME has been marked impossible. 
Name: dir_name; Comment: Return the already allocated name in the directory hash table that matches DIR. 
Name: print_dir_data_base; Comment: Print the data base of directories. 
Name: variable_buffer_output; Comment: Subroutine of variable_expand and friends: The text to add is LENGTH chars starting at STRING to the variable_buffer. The text is added to the buffer at PTR, and the updated pointer into the buffer is returned as the value. Thus, the value returned by each call to variable_buffer_output should be the first argument to the following call. 
Name: initialize_variable_output; Comment: Return a pointer to the beginning of the variable buffer. 
Name: variable_expand_string; Comment: Scan STRING for variable references and expansion-function calls. Only LENGTH bytes of STRING are actually scanned. If LENGTH is -1, scan until a null byte is found. Write the results to LINE, which must point into 'variable_buffer'. If LINE is NULL, start at the beginning of the buffer. Return a pointer to LINE, or to the beginning of the buffer if LINE is NULL. 
Name: variable_expand; Comment: Scan LINE for variable references and expansion-function calls. Build in 'variable_buffer' the result of expanding the references and calls. Return the address of the resulting string, which is null-terminated and is valid only until the next time this function is called. 
Name: expand_argument; Comment: Expand an argument for an expansion function. The text starting at STR and ending at END is variable-expanded into a null-terminated string that is returned as the value. This is done without clobbering 'variable_buffer' or the current variable-expansion that is in progress. 
Name: variable_expand_for_file; Comment: Expand LINE for FILE. Error messages refer to the file and line where FILE's commands were found. Expansion uses FILE's variable set list. 
Name: variable_append; Comment: Like allocated_variable_expand, but for += target-specific variables. First recursively construct the variable value from its appended parts in any upper variable sets. Then expand the resulting value. 
Name: allocated_variable_expand_for_file; Comment: Like variable_expand_for_file, but the returned string is malloc'd. This function is called a lot. It wants to be efficient. 
Name: install_variable_buffer; Comment: Install a new variable_buffer context, returning the current one for safe-keeping. 
Name: restore_variable_buffer; Comment: Restore a previously-saved variable_buffer setting (free the current one). 
Name: file_hash_1; Comment: Hash table of files the makefile knows how to make. 
Name: lookup_file; Comment: Access the hash table of all file records. lookup_file given a name, return the struct filefor that name, or nil if there is none. 
Name: enter_file; Comment: Look up a file record for file NAME and return it. Create a new record if one doesn't exist. NAME will be stored in the new record so it should be constant or in the strcache etc. 
Name: rehash_file; Comment: Rehash FILE to NAME. This is not as simple as resetting the 'hname' member, since it must be put in a new hash bucket, and possibly merged with an existing file called NAME. 
Name: rename_file; Comment: Rename FILE to NAME. This is not as simple as resetting the 'name' member, since it must be put in a new hash bucket, and possibly merged with an existing file called NAME. 
Name: remove_intermediates; Comment: Remove all nonprecious intermediate files. If SIG is nonzero, this was caused by a fatal signal, meaning that a different message will be printed, and the message will go to stderr rather than stdout. 
Name: split_prereqs; Comment: Given a string containing prerequisites (fully expanded), break it up into a struct dep list. Enter each of these prereqs into the file database. 
Name: enter_prereqs; Comment: Given a list of prerequisites, enter them into the file database. If STEM is set then first expand patterns using STEM. 
Name: expand_deps; Comment: Expand and parse each dependency line. 
Name: expand_extra_prereqs; Comment: Add extra prereqs to the file in question. 
Name: snap_file; Comment: Perform per-file snap operations. 
Name: snap_deps; Comment: For each dependency of each file, make the 'struct dep' point at the appropriate 'struct file' (which may have to be created). Also mark the files depended on by .PRECIOUS, .PHONY, .SILENT, and various other special targets. 
Name: set_command_state; Comment: Set the 'command_state' member of FILE and all its 'also_make's. Don't decrease the state of also_make's (e.g., don't downgrade a 'running' also_make to a 'deps_running' also_make). 
Name: file_timestamp_cons; Comment: Convert an external file timestamp to internal form. 
Name: file_timestamp_now; Comment: Return the current time as a file timestamp, setting *RESOLUTION to its resolution. 
Name: file_timestamp_sprintf; Comment: Place into the buffer P a printable representation of the file timestamp TS. 
Name: print_prereqs; Comment: Print the data base of files. 
Name: verify_file; Comment: Verify the integrity of the data base of files. 
Name: subst_expand; Comment: Store into VARIABLE_BUFFER at O the result of scanning TEXT and replacing each occurrence of SUBST with REPLACE. TEXT is null-terminated. SLEN is the length of SUBST and RLEN is the length of REPLACE. If BY_WORD is nonzero, substitutions are done only on matches which are complete whitespace-delimited words. 
Name: patsubst_expand_pat; Comment: Store into VARIABLE_BUFFER at O the result of scanning TEXT and replacing strings matching PATTERN with REPLACE. If PATTERN_PERCENT is not nil, PATTERN has already been run through find_percent, and PATTERN_PERCENT is the result. If REPLACE_PERCENT is not nil, REPLACE has already been run through find_percent, and REPLACE_PERCENT is the result. Note that we expect PATTERN_PERCENT and REPLACE_PERCENT to point to the character _AFTER_ the %, not to the % itself. 
Name: patsubst_expand; Comment: Store into VARIABLE_BUFFER at O the result of scanning TEXT and replacing strings matching PATTERN with REPLACE. If PATTERN_PERCENT is not nil, PATTERN has already been run through find_percent, and PATTERN_PERCENT is the result. If REPLACE_PERCENT is not nil, REPLACE has already been run through find_percent, and REPLACE_PERCENT is the result. Note that we expect PATTERN_PERCENT and REPLACE_PERCENT to point to the character _AFTER_ the %, not to the % itself. 
Name: lookup_function; Comment: Look up a function by name. 
Name: pattern_matches; Comment: Return 1 if PATTERN matches STR, 0 if not. 
Name: find_next_argument; Comment: Find the next comma or ENDPAREN (counting nested STARTPAREN and ENDPARENtheses), starting at PTR before END. Return a pointer to next character. If no next argument is found, return NULL. 
Name: string_glob; Comment: Glob-expand LINE. The returned pointer is only good until the next call to string_glob. 
Name: func_patsubst; Comment: Builtin functions 
Name: strip_whitespace; Comment: Set begpp to point to the first non-whitespace character of the string,and endpp to point to the last non-whitespace character of the string. If the string is empty or contains nothing but whitespace, endpp will be begpp-1. 
Name: func_error; Comment: Print a warning or fatal message. 
Name: func_sort; Comment: chop argv[0] into words, and sort them. 
Name: func_if; Comment: $(if condition,true-part[,false-part]) CONDITION is false iff it evaluates to an empty string. White space before and after condition are stripped before evaluation. If CONDITION is true, then TRUE-PART is evaluated, otherwise FALSE-PART is evaluated (if it exists). Because only one of the two PARTs is evaluated, you can use $(if ...) to create side-effects (with $(shell ...), for example). 
Name: func_or; Comment: $(or condition1[,condition2[,condition3[...]]]) A CONDITION is false iff it evaluates to an empty string. White space before and after CONDITION are stripped before evaluation. CONDITION1 is evaluated. If it's true, then this is the result of expansion. If it's false, CONDITION2 is evaluated, and so on. If none of the conditions are true, the expansion is the empty string. Once a CONDITION is true no further conditions are evaluated (short-circuiting). 
Name: func_and; Comment: $(and condition1[,condition2[,condition3[...]]]) A CONDITION is false iff it evaluates to an empty string. White space before and after CONDITION are stripped before evaluation. CONDITION1 is evaluated. If it's false, then this is the result of expansion. If it's true, CONDITION2 is evaluated, and so on. If all of the conditions are true, the expansion is the result of the last condition. Once a CONDITION is false no further conditions are evaluated (short-circuiting). 
Name: func_eval; Comment: $(eval <makefile string>) Always resolves to the empty string. Treat the arguments as a segment of makefile, and parse them. 
Name: fold_newlines; Comment: _r is replaced on UNIX as well. Is this desirable? 
Name: func_shell_base; Comment: VMS can't do $(shell ...) 
Name: func_shell_base; Comment: Do the Amiga version of func_shell. 
Name: func_eq; Comment: equality. Return is string-boolean, i.e., the empty string is false. 
Name: func_not; Comment: string-boolean not operator. 
Name: abspath; Comment: Return the absolute name of file NAME which does not contain any '.', '..' components nor any repeated path separators ('/'). 
Name: expand_builtin_function; Comment: These must come after the definition of function_table. 
Name: handle_function; Comment: Check for a function invocation in *STRINGP. *STRINGP points at the opening ( or { and is not null-terminated. If a function invocation is found, expand it into the buffer at *OP, updating *OP, incrementing *STRINGP past the reference and returning nonzero. If not, return zero. 
Name: func_call; Comment: User-defined functions. Expand the first argument as either a builtin function or a make variable, in the context of the rest of the arguments assigned to $1, $2, ... $N. $0 is the name of the function. 
Name: cvt_scm_to_str; Comment: Convert an SCM object into a string. 
Name: guile_expand_wrapper; Comment: Perform the GNU make expansion function. 
Name: guile_eval_wrapper; Comment: Perform the GNU make eval function. 
Name: guile_define_module; Comment: Invoked by scm_c_define_module(), in the context of the GNU make module. 
Name: guile_init; Comment: Initialize the GNU make Guile module. 
Name: func_guile; Comment: This is the function registered with make 
Name: guile_gmake_setup; Comment: We could send the flocp to define_new_function(), but since guile is "kind of" built-in, that didn't seem so useful. 
Name: hash_init; Comment: Force the table size to be a power of two, possibly rounding up the given size. 
Name: hash_load; Comment: Load an array of items into 'ht'. 
Name: hash_find_slot; Comment: Returns the address of the table slot matching 'key'. If 'key' is not found, return the address of an empty slot suitable for inserting 'key'. The caller is responsible for incrementing ht_fill on insertion. 
Name: hash_rehash; Comment: Double the size of the hash table in the event of overflow... 
Name: hash_dump; Comment: Dump all items into a NULL-terminated vector. Use the user-supplied vector, or malloc one. 
Name: round_up_2; Comment: Round a given number up to the nearest power of 2. 
Name: try_implicit_rule; Comment: For a FILE which has no commands specified, try to figure out some from the implicit pattern rules. Returns 1 if a suitable implicit rule was found, after modifying FILE to contain the appropriate commands and deps, or returns 0 if no implicit rule was found. 
Name: get_next_word; Comment: Scans the BUFFER for the next word with whitespace as a separator. Returns the pointer to the beginning of the word. LENGTH hold the length of the word. 
Name: pattern_search; Comment: Search the pattern rules for a rule with an existing dependency to make FILE. If a rule is found, the appropriate commands and deps are put in FILE and 1 is returned. If not, 0 is returned. If ARCHIVE is nonzero, FILE->name is of the form "LIB(MEMBER)". A rule for "(MEMBER)" will be searched for, and "(MEMBER)" will not be chopped up into directory and filename parts. If an intermediate file is found by pattern search, the intermediate file is set up as a target by the recursive call and is also made a dependency of FILE. DEPTH is used for debugging messages. 
Name: pid2str; Comment: Different systems have different requirements for pid_t. Plus we have to support gettext string translation... Argh. 
Name: w32_kill; Comment: The macro which references this function is defined in makeint.h. 
Name: create_batch_file; Comment: This function creates a temporary file name with an extension specifiedby the unixy arg. Return an xmalloc'ed string of a newly created temp file and its file descriptor, or die. 
Name: _is_unixy_shell; Comment: returns whether path is assumed to be a unix like shell. 
Name: is_bourne_compatible_shell; Comment: determines whether path looks to be a Bourne-like shell. 
Name: child_error; Comment: Write an error message describing the exit status given in EXIT_CODE, EXIT_SIG, and COREDUMP, for the target TARGET_NAME. Append "(ignored)" if IGNORED is nonzero. 
Name: reap_children; Comment: Reap all dead children, storing the returned status and the new command state ('cs_finished') in the 'file' member of the 'struct child' for the dead child, and removing the child from the chain. In addition, if BLOCK nonzero, we block in this function until we've reaped at least one complete child, waiting for it to die if necessary. If ERR is nonzero, print an error message first. 
Name: free_child; Comment: Free the storage allocated for CHILD. 
Name: start_job_command; Comment: Start a job to run the commands specified in CHILD. CHILD is updated to reflect the commands and ID of the child process. NOTE: On return fatal signals are blocked! The caller is responsible for calling 'unblock_sigs', once the new child is safely on the chain so it can be cleaned up in the event of a fatal signal. 
Name: start_waiting_job; Comment: Try to start a child running. Returns nonzero if the child was started (and maybe finished), or zero if the load was too high and the child was put on the 'waiting_jobs' chain. 
Name: new_job; Comment: Create a 'struct child' for FILE and start its commands running. 
Name: job_next_command; Comment: Move CHILD's pointers to the next command for it to execute. Returns nonzero if there is another command. 
Name: start_waiting_jobs; Comment: Start jobs that are waiting for the load to be lower. 
Name: child_execute_job; Comment: POSIX: Create a child process executing the command in ARGV. Returns the PID or -1. 
Name: construct_command_argv_internal; Comment: Figure out the argument list necessary to run LINE as a command. Try to avoid using a shell. This routine handles only ' quoting, and " quoting when no backslash, $ or ' characters are seen in the quotes. Starting quotes may be escaped with a backslash. If any of the characters in sh_chars is seen, or any of the builtin commands listed in sh_cmds is the first word of a line, the shell is used. If RESTP is not NULL, *RESTP is set to point to the first newline in LINE. If *RESTP is NULL, newlines will be ignored. SHELL is the shell to use, or nil to use the default shell. IFS is the value of $IFS, or nil (meaning the default). FLAGS is the value of lines_flags for this command line. It is used in the WINDOWS32 port to check whether + or $(MAKE) were found in this command line, in which case the effect of just_print_flag is overridden. 
Name: construct_command_argv; Comment: Figure out the argument list necessary to run LINE as a command. Try to avoid using a shell. This routine handles only ' quoting, and " quoting when no backslash, $ or ' characters are seen in the quotes. Starting quotes may be escaped with a backslash. If any of the characters in sh_chars is seen, or any of the builtin commands listed in sh_cmds is the first word of a line, the shell is used. If RESTP is not NULL, *RESTP is set to point to the first newline in LINE. If *RESTP is NULL, newlines will be ignored. FILE is the target whose commands these are. It is used for variable expansion for $(SHELL) and $(IFS). 
Name: gmk_alloc; Comment: Allocate a buffer in our context, so we can free it. 
Name: gmk_free; Comment: Free a buffer returned by gmk_expand(). 
Name: gmk_eval; Comment: Evaluate a buffer as make syntax. Ideally eval_buffer() will take const char *, but not yet. 
Name: gmk_expand; Comment: Expand a string and return an allocated buffer. Caller must call gmk_free() with this buffer. 
Name: gmk_add_function; Comment: Register a function to be called from makefiles. 
Name: get_vms_env_flag; Comment: Evaluates if a VMS environment option is set, only look at first character 
Name: initialize_stopchar_map; Comment: This character map locate stop chars when parsing GNU makefiles. Each element is true if we should stop parsing on that character. 
Name: prepare_mutex_handle_string; Comment: This is called from start_job_command when it detects that output_sync option is in effect. The handle to the synchronization mutex is passed, as a string, to sub-makes via the --sync-mutex command-line argument. 
Name: handle_runtime_exceptions; Comment: HANDLE runtime exceptions by avoiding a requestor on the GUI. Capture exception and print it to stderr instead. If ! DB_VERBOSE, just print a simple message and exit. If DB_VERBOSE, print a more verbose message. If compiled for DEBUG, let exception pass through to GUI so that debuggers can attach. 
Name: find_and_set_default_shell; Comment: On WIN32 systems we don't have the luxury of a /bin directory that is mapped globally to every drive mounted to the system. Since make could be invoked from any drive, and we don't want to propagate /bin/sh to every single drive. Allow ourselves a chance to search for a value for default shell here (if the default path does not exist). 
Name: init_switches; Comment: Fill in the string and vector for getopt. 
Name: handle_non_switch_argument; Comment: Non-option argument. It might be a variable definition. 
Name: print_usage; Comment: Print a nice usage method. 
Name: decode_switches; Comment: Decode switches from ARGC and ARGV. They came from the environment if ENV is nonzero. 
Name: decode_env_switches; Comment: Decode switches from environment variable ENVAR (which is LEN chars long). We do this by chopping the value into a vector of words, prepending a dash to the first word if it lacks one, and passing the vector to decode_switches. 
Name: quote_for_env; Comment: Quote the string IN so that it will be interpreted as a single word with no magic by decode_env_switches; also double dollar signs to avoid variable expansion in make itself. Write the result into OUT, returning the address of the next character to be written. Allocating space for OUT twice the length of IN is always sufficient. 
Name: define_makeflags; Comment: Define the MAKEFLAGS and MFLAGS variables to reflect the settings of the command switches. Include options with args if ALL is nonzero. Don't include options with the 'no_makefile' flag set if MAKEFILE. 
Name: print_version; Comment: Print version information. 
Name: print_data_base; Comment: Print a bunch of information about this and that. 
Name: die; Comment: Exit with STATUS, cleaning up as necessary. 
Name: alpha_compare; Comment: Compare strings *S1 and *S2. Return negative if the first is less, positive if it is greater, zero if they are equal. 
Name: collapse_continuations; Comment: Discard each backslash-newline combination from LINE. Backslash-backslash-newline combinations become backslash-newlines. This is done by copying the text at LINE into itself. 
Name: print_spaces; Comment: Print N spaces (used in debug for target-depth). 
Name: concat; Comment: Return a string whose contents concatenate the NUM strings provided This string lives in static, re-used memory. 
Name: lindex; Comment: Limited INDEX: Search through the string STRING, which ends at LIMIT, for the character C. Returns a pointer to the first occurrence, or nil if none is found. Like INDEX except that the string searched ends where specified instead of at the first null. 
Name: end_of_token; Comment: Return the address of the first whitespace or null in the string S. 
Name: next_token; Comment: Return the address of the first nonwhitespace or null in the string S. 
Name: find_next_token; Comment: Find the next token in PTR; return the address of it, and store the length of the token into *LENGTHPTR if LENGTHPTR is not nil. Set *PTR to the end of the token, so this function can be called repeatedly in a loop. 
Name: writebuf; Comment: Write a BUFFER of size LEN to file descriptor FD. Retry short writes from EINTR. Return LEN, or -1 on error. 
Name: readbuf; Comment: Read until we get LEN bytes from file descriptor FD, into BUFFER. Retry short reads on EINTR. If we get an error, return it. Return 0 at EOF. 
Name: copy_dep_chain; Comment: Copy a chain of 'struct dep'. For 2nd expansion deps, dup the name. 
Name: free_ns_chain; Comment: Free a chain of struct nameseq. For struct dep chains use free_dep_chain. 
Name: strcasecmp; Comment: If we don't have strcasecmp() (from POSIX), or anything that can substitute for it, define our own version. 
Name: strncasecmp; Comment: If we don't have strncasecmp() (from POSIX), or anything that can substitute for it, define our own version. 
Name: log_access; Comment: Under -d, write a message describing the current IDs. 
Name: user_access; Comment: Give the process appropriate permissions for access to user data (i.e., to stat files, or to spawn a child process). 
Name: make_access; Comment: Give the process appropriate permissions for access to make data (i.e., the load average). 
Name: child_access; Comment: Give the process appropriate permissions for a child process. This is like user_access, but you can't get back to make_access. 
Name: _outputs; Comment: Write a string to the current STDOUT or STDERR. 
Name: log_working_directory; Comment: Write a message indicating that we've just entered or left (according to ENTERING) the current directory. 
Name: set_append_mode; Comment: Set a file descriptor to be in O_APPEND mode. If it fails, just ignore it. 
Name: sync_init; Comment: Set up the sync handle. Disables output_sync on error. 
Name: pump_from_tmp; Comment: Support routine for output_sync() 
Name: acquire_semaphore; Comment: Obtain the lock for writing output. 
Name: release_semaphore; Comment: Release the lock for writing output. 
Name: output_tmpfd; Comment: Returns a file descriptor to a temporary file. The file is automatically closed/deleted on exit. Don't use a FILE* stream. 
Name: setup_tmpfile; Comment: Adds file descriptors to the child structure to support output_sync; one for stdout and one for stderr as long as they are open. If stdout and stderr share a device they can share a temp file too. Will reset output_sync on error. 
Name: output_dump; Comment: Synchronize the output of jobs in -j mode to keep the results of each job together. This is done by holding the results in temp files, one for stdout and potentially another for stderr, and only releasing them to "real" stdout/stderr when a semaphore can be obtained. 
Name: close_stdout; Comment: Close standard output, exiting with status 'exit_failure' on failure. If a program writes *anything* to stdout, that program should close stdout and make sure that it succeeds before exiting. Otherwise, suppose that you go to the extreme of checking the return status of every function that does an explicit write to stdout. The last printf can succeed in writing to the internal stream buffer, and yet the fclose(stdout) could still fail (due e.g., to a disk full error) when it tries to write out that buffered data. Thus, you would be left with an incomplete output file and the offending program would exit successfully. Even calling fflush is not always sufficient, since some file systems (NFS and CODA) buffer written/flushed data until an actual close call. Besides, it's wasteful to check the return value from every call that writes to stdout -- just let the internal stream state record the failure. That's what the ferror test is checking below. It's important to detect such failures and exit nonzero because many tools (most notably 'make' and other build-management systems) depend on being able to detect failure in other tools via their exit status. 
Name: output_start; Comment: We're about to generate output: be sure it's set up. 
Name: message; Comment: Print a message on stdout. 
Name: error; Comment: Print an error message. 
Name: fatal; Comment: Print an error message and exit. 
Name: perror_with_name; Comment: Print an error message from errno. 
Name: pfatal_with_name; Comment: Print an error message from errno and exit. 
Name: out_of_memory; Comment: Print a message about out of memory (not using more heap) and exit. Our goal here is to be sure we don't try to allocate more memory, which means we don't want to use string translations or normal cleanup. 
Name: jobserver_pre_child; Comment: Prepare the jobserver to start a child process. 
Name: jobserver_post_child; Comment: Reconfigure the jobserver after starting a child process. 
Name: jobserver_acquire; Comment: Use pselect() to atomically wait for both a signal and a file descriptor. It also provides a timeout facility so we don't need to use SIGALRM. This method relies on the fact that SIGCHLD will be blocked everywhere, and only unblocked (atomically) within the pselect() call, so we can never miss a SIGCHLD. 
Name: job_noop; Comment: This method uses a "traditional" UNIX model for waiting on both a signal and a file descriptor. However, it's complex and since we have a SIGCHLD handler installed we need to check ALL system calls for EINTR: painful! Read a token. As long as there's no token available we'll block. We enable interruptible system calls before the read(2) so that if we get a SIGCHLD while we're waiting, we'll return with EINTR and we can process the death(s) and return tokens to the free pool. Once we return from the read, we immediately reinstate restartable system calls. This allows us to not worry about checking for EINTR on all the other system calls in the program. There is one other twist: there is a span between the time reap_children() does its last check for dead children and the time the read(2) call is entered, below, where if a child dies we won't notice. This is extremely serious as it could cause us to deadlock, given the right set of events. To avoid this, we do the following: before we reap_children(), we dup(2) the read FD on the jobserver pipe. The read(2) call below uses that new FD. In the signal handler, we close that FD. That way, if a child dies during the section mentioned above, the read(2) will be invoked with an invalid FD and will return immediately with EBADF. 
Name: set_child_handler_action_flags; Comment: Set the child handler action flags to FLAGS. 
Name: get_bad_stdin; Comment: Create a "bad" file descriptor for stdin when parallel jobs are run. 
Name: read_all_makefiles; Comment: Read in all the makefiles and return a chain of targets to rebuild. 
Name: install_conditionals; Comment: Install a new conditional and return the previous one. 
Name: restore_conditionals; Comment: Free the current conditionals and reinstate a saved one. 
Name: parse_var_assignment; Comment: Check LINE to see if it's a variable assignment or undefine. It might use one of the modifiers "export", "override", "private", or it might be one of the conditional tokens like "ifdef", "include", etc. If it's not a variable assignment or undefine, VMOD.V_ASSIGN is 0. Returns LINE. Returns a pointer to the first non-modifier character, and sets VMOD based on the modifiers found if any, plus V_ASSIGN is 1. 
Name: eval; Comment: Read file FILENAME as a makefile and add its contents to the data base. SET_DEFAULT is true if we are allowed to set the default goal. 
Name: remove_comments; Comment: Remove comments from LINE. This will also remove backslashes that escape things. It ignores comment characters that appear inside variable references. 
Name: do_undefine; Comment: Execute a 'undefine' directive. The undefine line has already been read, and NAME is the name of the variable to be undefined. 
Name: do_define; Comment: Execute a 'define' directive. The first line has already been read, and NAME is the name of the variable to be defined. The following lines remain to be read. 
Name: conditional_line; Comment: Interpret conditional commands "ifdef", "ifndef", "ifeq", "ifneq", "else" and "endif". LINE is the input line, with the command as its first word. FILENAME and LINENO are the filename and line number in the current makefile. They are used for error messages. Value is -2 if the line is not a conditional at all, -1 if the line is an invalid conditional, 0 if following text should be interpreted, 1 if following text should be ignored. 
Name: record_target_var; Comment: Record target-specific variable values for files FILENAMES. TWO_COLON is nonzero if a double colon was used. The links of FILENAMES are freed, and so are any names in it that are not incorporated into other data structures. If the target is a pattern, add the variable to the pattern-specific variable value list. 
Name: record_files; Comment: Record a description line for files FILENAMES, with dependencies DEPS, commands to execute described by COMMANDS and COMMANDS_IDX, coming from FILENAME:COMMANDS_STARTED. TWO_COLON is nonzero if a double colon was used. If not nil, PATTERN is the '%' pattern to make this a static pattern rule, and PATTERN_PERCENT is a pointer to the '%' within it. The links of FILENAMES are freed, and so are any names in it that are not incorporated into other data structures. 
Name: find_map_unquote; Comment: Search STRING for an unquoted STOPMAP. Backslashes quote elements from STOPMAP and backslash. Quoting backslashes are removed from STRING by compacting it into itself. Returns a pointer to the first unquoted STOPCHAR if there is one, or nil if there are none. If MAP_VARIABLE is set, then the complete contents of variable references are skipped, even if the contain STOPMAP characters. 
Name: unescape_char; Comment: Unescape a character in a string. The string is compressed onto itself. 
Name: find_percent; Comment: Search PATTERN for an unquoted % and handle quoting. 
Name: find_percent_cached; Comment: Search STRING for an unquoted % and handle quoting. Returns a pointer to the % or NULL if no % was found. This version is used with strings in the string cache: if there's a need to modify the string a new version will be added to the string cache and *STRING will be set to that. 
Name: readstring; Comment: Read a line of text from a STRING. Since we aren't really reading from a file, don't bother with linenumbers. 
Name: get_next_mword; Comment: Parse the next "makefile word" from the input buffer, and return info about it. A "makefile word" is one of: w_bogus Should never happen w_eol End of input w_static A static word; cannot be expanded w_variable A word containing one or more variables/functions w_colon A colon w_dcolon A double-colon w_ampcolon An ampersand-colon (&:) token w_ampdcolon An ampersand-double-colon (&::) token w_semicolon A semicolon w_varassign A variable assignment operator (=, :=, ::=, +=, ?=, or !=) Note that this function is only used when reading certain parts of the makefile. Don't use it where special rules hold sway (RHS of a variable, in a command list, etc.) 
Name: construct_include_path; Comment: Construct the list of include directories from the arguments and the default list. 
Name: tilde_expand; Comment: Expand ~ or ~USER at the beginning of NAME. Return a newly malloc'd string or 0. 
Name: parse_file_seq; Comment: Parse a string into a sequence of filenames represented as a chain of struct nameseq's and return that chain. Optionally expand the strings via glob(). The string is passed as STRINGP, the address of a string pointer. The string pointer is updated to point at the first character not parsed, which either is a null char or equals STOPMAP. SIZE is how large (in bytes) each element in the new chain should be. This is useful if we want them actually to be other structures that have room for additional info. STOPMAP is a map of characters that tell us to stop parsing. PREFIX, if non-null, is added to the beginning of each filename. FLAGS allows one or more of the following bitflags to be set: PARSEFS_NOSTRIP - Do no strip './'s off the beginning PARSEFS_NOAR - Do not check filenames for archive references PARSEFS_NOGLOB - Do not expand globbing characters PARSEFS_EXISTS - Only return globbed files that actually exist (cannot also set NOGLOB) PARSEFS_NOCACHE - Do not add filenames to the strcache (caller frees) 
Name: update_goal_chain; Comment: Remake all the goals in the 'struct dep' chain GOALS. Return -1 if nothing was done, 0 if all goals were updated successfully, or 1 if a goal failed. If rebuilding_makefiles is nonzero, these goals are makefiles, so -t, -q, and -n should be disabled for them unless they were also command-line targets, and we should only make one goal at a time and return as soon as one goal whose 'changed' member is nonzero is successfully made. 
Name: show_goal_error; Comment: If we're rebuilding an included makefile that failed, and we care about errors, show an error message the first time. 
Name: update_file; Comment: None but with some flag settings, just call 'exit' if unsuccessful. DEPTH is the depth in recursions of this function. We increment it during the consideration of our dependencies, then decrement it again after finding out whether this file is out of date. If there are multiple double-colon entries for FILE, each is considered in turn. 
Name: complain; Comment: Show a message stating the target failed to build. 
Name: update_file_1; Comment: Consider a single 'struct file' and update it as appropriate. Return 0 on success, or non-0 on failure. 
Name: notice_finished_file; Comment: Set FILE's 'updated' flag and re-check its mtime and the mtime's of all files listed in its 'also_make' member. Under -t, this function also touches FILE. On return, FILE->update_status will no longer be us_none if it was. 
Name: check_dep; Comment: Check whether another file (whose mtime is THIS_MTIME) needs updating on account of a dependency which is file FILE. If it does, store 1 in *MUST_MAKE_PTR. In the process, update any non-intermediate files that FILE depends on (including FILE itself). Return nonzero if any updating failed. 
Name: touch_file; Comment: Touch FILE. Return us_success if successful, us_failed if not. 
Name: remake_file; Comment: Having checked and updated the dependencies of FILE, do whatever is appropriate to remake FILE itself. Return the status from executing FILE's commands. 
Name: f_mtime; Comment: Return the mtime of a file, given a 'struct file'. Caches the time in the struct file to avoid excess stat calls. If the file is not found, and SEARCH is nonzero, VPATH searching and replacement is done. If that fails, a library (-lLIBNAME) is tried and the library's actual name (/lib/libLIBNAME.a, etc.) is substituted into FILE. 
Name: name_mtime; Comment: First, we check with stat(). If the file does not exist, then we return NONEXISTENT_MTIME. If it does, and the symlink check flag is set, then examine each indirection of the symlink and find the newest mtime. This causes one duplicate stat() when -L is being used, but the code is much cleaner. 
Name: library_search; Comment: Search for a library file specified as -lLIBNAME, searching for a suitable library file in the system library directories and the VPATH directories. 
Name: remote_setup; Comment: Call once at startup even if no commands are run. 
Name: remote_cleanup; Comment: Called before exit. 
Name: start_remote_job_p; Comment: Return nonzero if the next job should be done remotely. 
Name: start_remote_job; Comment: Start a remote job running the command in ARGV, with environment from ENVP. It gets standard input from STDIN_FD. On failure, return nonzero. On success, return zero, and set *USED_STDIN to nonzero if it will actually use STDIN_FD, zero if not, set *ID_PTR to a unique identification, and set *IS_REMOTE to nonzero if the job is remote, zero if it is local (meaning *ID_PTR is a process ID). 
Name: remote_status; Comment: Get the status of a dead remote child. Block waiting for one to die if BLOCK is nonzero. Set *EXIT_CODE_PTR to the exit status, *SIGNAL_PTR to the termination signal or zero if it exited normally, and *COREDUMP_PTR nonzero if it dumped core. Return the ID of the child that died, 0 if we would have to block and !BLOCK, or < 0 if there were none. 
Name: block_remote_children; Comment: Block asynchronous notification of remote child death. If this notification is done by raising the child termination signal, do not block that signal. 
Name: unblock_remote_children; Comment: Restore asynchronous notification of remote child death. If this is done by raising the child termination signal, do not unblock that signal. 
Name: remote_kill; Comment: Send signal SIG to child ID. Return 0 if successful, -1 if not. 
Name: start_remote_job; Comment: Start a remote job running the command in ARGV, with environment from ENVP. It gets standard input from STDIN_FD. On failure, return nonzero. On success, return zero, and set *USED_STDIN to nonzero if it will actually use STDIN_FD, zero if not, set *ID_PTR to a unique identification, and set *IS_REMOTE to zero if the job is local, nonzero if it is remote (meaning *ID_PTR is a process ID). 
Name: snap_implicit_rules; Comment: Compute the maximum dependency length and maximum number of dependencies of all implicit rules. Also sets the subdir flag for a rule when appropriate, possibly removing the rule completely when appropriate. Add any global EXTRA_PREREQS here as well. 
Name: convert_suffix_rule; Comment: Create a pattern rule from a suffix rule. TARGET is the target suffix; SOURCE is the source suffix. CMDS are the commands. If TARGET is nil, it means the target pattern should be '(%.o)'. If SOURCE is nil, it means there should be no deps. 
Name: convert_to_pattern; Comment: Convert old-style suffix rules to pattern rules. All rules for the suffixes on the .SUFFIXES list are converted and added to the chain of pattern rules. 
Name: new_pattern_rule; Comment: Install the pattern rule RULE (whose fields have been filled in) at the end of the list (so that any rules previously defined will take precedence). If this rule duplicates a previous one (identical target and dependencies), the old one is replaced if OVERRIDE is nonzero, otherwise this new one is thrown out. When an old rule is replaced, the new one is put at the end of the list. Return nonzero if RULE is used; zero if not. 
Name: install_pattern_rule; Comment: Install an implicit pattern rule based on the three text strings in the structure P points to. These strings come from one of the arrays of default implicit pattern rules. TERMINAL specifies what the 'terminal' field of the rule should be. 
Name: freerule; Comment: Free all the storage used in RULE and take it out of the pattern_rules chain. LASTRULE is the rule whose next pointer points to RULE. 
Name: create_pattern_rule; Comment: Create a new pattern rule with the targets in the nil-terminated array TARGETS. TARGET_PERCENTS is an array of pointers to the % in each element of TARGETS. N is the number of items in the array (not counting the nil element). The new rule has dependencies DEPS and commands from COMMANDS. It is a terminal rule if TERMINAL is nonzero. This rule overrides identical rules with different commands if OVERRIDE is nonzero. The storage for TARGETS and its elements and TARGET_PERCENTS is used and must not be freed until the rule is destroyed. 
Name: print_rule; Comment: Useful to call from gdb. 
Name: init_sig; Comment: Enter signal number NUMBER into the tables with ABBREV and NAME. 
Name: new_cache; Comment: Add a new buffer to the cache. Add it at the front to reduce search time. This can also increase the overhead, since it's less likely that older buffers will be filled in. However, GNU make has so many smaller strings that this doesn't seem to be much of an issue in practice. 
Name: str_hash_1; Comment: Hash table of strings in the cache. 
Name: strcache_iscached; Comment: Returns true if the string is in the cache; false if not. 
Name: strcache_add; Comment: If the string is already in the cache, return a pointer to the cached version. If not, add it then return a pointer to the cached version. Note we do NOT take control of the string passed in. 
Name: strcache_print_stats; Comment: Generate some stats output. 
Name: create_pattern_var; Comment: Create a new pattern-specific variable struct. The new variable is inserted into the PATTERN_VARS list in the shortest patterns first order to support the shortest stem matching (the variables are matched in the reverse order so the ones with the longest pattern will be considered first). Variables with the same pattern length are inserted in the definition order. 
Name: lookup_pattern_var; Comment: Look up a target in the pattern-specific variable list. 
Name: variable_hash_1; Comment: Hash table of all global variable definitions. 
Name: init_hash_global_variable_set; Comment: Implement variables. 
Name: define_variable_in_set; Comment: Define variable named NAME with value VALUE in SET. VALUE is copied. LENGTH is the length of NAME, which does not need to be null-terminated. ORIGIN specifies the origin of the variable (makefile, command line or environment). If RECURSIVE is nonzero a flag is set in the variable saying that it should be recursively re-expanded. 
Name: free_variable_name_and_value; Comment: Undefine variable named NAME in SET. LENGTH is the length of NAME, which does not need to be null-terminated. ORIGIN specifies the origin of the variable (makefile, command line or environment). 
Name: lookup_special_var; Comment: If the variable passed in is "special", handle its special nature. Currently there are two such variables, both used for introspection: .VARIABLES expands to a list of all the variables defined in this instance of make. .TARGETS expands to a list of all the targets defined in this instance of make. Returns the variable reference passed in. 
Name: lookup_variable; Comment: Lookup a variable whose name is a string starting at NAME and with LENGTH chars. NAME need not be null-terminated. Returns address of the 'struct variable' containing all info on the variable, or nil if no such variable is defined. 
Name: lookup_variable_in_set; Comment: Lookup a variable whose name is a string starting at NAME and with LENGTH chars in set SET. NAME need not be null-terminated. Returns address of the 'struct variable' containing all info on the variable, or nil if no such variable is defined. 
Name: initialize_file_variables; Comment: Initialize FILE's variable set list. If FILE already has a variable set list, the topmost variable set is left intact, but the the rest of the chain is replaced with FILE->parent's setlist. If FILE is a double-colon rule, then we will use the "root" double-colon target's variable set as the parent of FILE's variable set. If we're READING a makefile, don't do the pattern variable search now, since the pattern variable might not have been defined yet. 
Name: create_new_variable_set; Comment: Pop the top set off the current variable set list, and free all its storage. 
Name: push_new_variable_scope; Comment: Create a new variable set and push it on the current setlist. If we're pushing a global scope (that is, the current scope is the global scope) then we need to "push" it the other way: file variable sets point directly to the global_setlist so we need to replace that with the new one. 
Name: merge_variable_sets; Comment: Merge FROM_SET into TO_SET, freeing unused storage in FROM_SET. 
Name: merge_variable_set_lists; Comment: Merge SETLIST1 into SETLIST0, freeing unused storage in SETLIST1. 
Name: define_automatic_variables; Comment: Define the automatic variables, and record the addresses of their structures so we can change their values quickly. 
Name: target_environment; Comment: Create a new environment for FILE's commands. If FILE is nil, this is for the 'shell' function. The child's MAKELEVEL variable is incremented. 
Name: shell_result; Comment: Given a string, shell-execute it and return a malloc'ed string of theresult. This removes only ONE newline (if any) at the end, for maximum compatibility with the *BSD makes. If it fails, returns NULL. 
Name: do_variable_definition; Comment: Given a variable, a value, and a flavor, define the variable. See the try_variable_definition() function for details on the parameters. 
Name: parse_variable_definition; Comment: Parse P (a null-terminated string) as a variable definition. If it is not a variable definition, return NULL and the contents of *VAR are undefined, except NAME is set to the first non-space character or NIL. If it is a variable definition, return a pointer to the char after the assignment token and set the following fields (only) of *VAR: name : name of the variable (ALWAYS SET) (NOT NUL-TERMINATED!) length : length of the variable name value : value of the variable (nul-terminated) flavor : flavor of the variable Other values in *VAR are unchanged. 
Name: assign_variable_definition; Comment: Try to interpret LINE (a null-terminated string) as a variable definition. If LINE was recognized as a variable definition, a pointer to its 'struct variable' is returned. If LINE is not a variable definition, NULL is returned. 
Name: try_variable_definition; Comment: Try to interpret LINE (a null-terminated string) as a variable definition. ORIGIN may be o_file, o_override, o_env, o_env_override, or o_command specifying that the variable definition comes from a makefile, an override directive, the environment with or without the -e switch, or the command line. See the comments for assign_variable_definition(). If LINE was recognized as a variable definition, a pointer to its 'struct variable' is returned. If LINE is not a variable definition, NULL is returned. 
Name: print_variable; Comment: Print information for variable V, prefixing it with PREFIX. 
Name: print_variable_set; Comment: Print all the variables in SET. PREFIX is printed before the actual variable definitions (everything else is comments). 
Name: print_variable_data_base; Comment: Print the data base of variables. 
Name: print_file_variables; Comment: Print all the local variables of FILE. 
Name: vms_command; Comment: Argv0 will be a full vms file specification, like node$dka100:[utils.gnumake]make.exe;47 prefix it with "mcr " to make it a vms command, executable for DCL. 
Name: vms_progname; Comment: Argv0 aka argv[0] will be a full vms file specification, like node$dka100:[utils.gnumake]make.exe;47, set up by the CRTL. The vms progname should be ^^^^, the file name without file type .exe and ;version. Use sys$parse to get the name part of the file specification. That is in the above example, pick up "make" and return a copy of that string. If something goes wrong in sys$parse (unlikely, this is a VMS/CRTL supplied file specification) or if there is an empty name part (not easy to produce, but it is possible) just return "make". Somes notes ... NAM[L]$M_SYNCHK requests a syntax check, only. NAM is for ODS2 names (shorter parts, output usually converted to UPPERCASE). NAML is for ODS2/ODS5 names (longer parts, output unchanged). NAM$M_NO_SHORT_UPCASE may not be available for older versions of VMS. NAML is not available on older versions of VMS (NAML$C_BID not defined). argv[0] on older versions of VMS (no extended parse style and no CRTL feature DECC$ARGV_PARSE_STYLE) is always in lowercase. 
Name: copyto; Comment: copy 'from' to 'to' up to but not including 'upto' return 0 if eos on from return 1 if upto found return 'to' at last char + 1 return 'from' at match + 1 or eos if no match if as_dir == 1, change all '.' to '_' else change all '.' but the last to '_' 
Name: trnlog; Comment: get translation of logical name 
Name: vmsify; Comment: a/__a:__a:___a:000000.dir 9___[000000]_[000000]__000000.dir 10_a__[000000]a_[a]___[000000]a 11_a__[a]__[a]___[000000]a.dir 12_ab__[a]b__[a.b]___[a]b 13_ab__[a.b]__[a.b]___[a]b.dir 14_abc__[a.b]c__[a.b.c]___[a.b]c 15_abc__[a.b.c]__[a.b.c]___[a.b]c.dir 16_a__a__[.a]___a 17_a__[.a]__[.a]___a.dir 18_ab__[.a]b__[.a.b]___[.a]b 19_ab__[.a.b]__[.a.b]___[.a]b.dir 20_abc__[.a.b]c__[.a.b.c]__[.a.b]c 21_abc__[.a.b.c]_[.a.b.c]__[.a.b]c.dir 22_a.b.c__a_b.c__[.a_b_c]__a_b_c.dir 23_[x][y]z__[x.y]z__[x.y]z___[x.y]z 24_[x][.y]z_[x.y]z__[x.y]z___[x.y]z 25 filenames with '$' are left unchanged if they contain no '' 25 filenames with ':' are left unchanged 26 filenames with a single pair of '[' ']' are left unchanged The input string is not written to. The result is also const because it's a static buffer; we don't want to change it.
Name: unixify; Comment: dev/dir1/dir2/
Name: vmsWaitForChildren; Comment: Wait for nchildren children to terminate 
Name: vmsHandleChildTerm; Comment: This is called at main or AST level. It is at AST level for DONTWAITFORCHILD and at main level otherwise. In any case it is called when a child process terminated. At AST level it won't get interrupted by anything except a inner mode level AST. 
Name: posix_parse_sq; Comment: Extract a Posix single quoted string from input line 
Name: posix_parse_dq; Comment: Extract a Posix double quoted string from input line 
Name: vms_parse_quotes; Comment: Extract a VMS quoted string or substitution string from input line 
Name: posix_parse_dollar; Comment: Extract a $ string from the input line 
Name: parse_text; Comment: Simple text copy 
Name: parse_char; Comment: single character copy 
Name: build_vms_cmd; Comment: Build a command string from the collected tokens and process built-ins now 
Name: vms_exit; Comment: Build a Posix Exit with VMS severity 
Name: clear_dcl_symbol; Comment: Restore symbol state to original condition. 
Name: clear_exported_symbols; Comment: Restore all exported symbols to their original conditions 
Name: vms_restore_symbol; Comment: Restore the symbol back to the original valuesymbol name is either a plain name or of the form "symbol=name" where the name portion is ignored. 
Name: vms_putenv_symbol; Comment: export a DCL symbol using a string in the same syntax as putenv 
Name: to_vms_action; Comment: Helper callback routine for converting Unix paths to VMS 
Name: create_foreign_command; Comment: Create a foreign command only visible to children 
Name: build_vpath_lists; Comment: Reverse the chain of selective VPATH lists so they will be searched in the order given in the makefiles and construct the list from the VPATH variable. 
Name: construct_vpath_list; Comment: Construct the VPATH listing for the PATTERN and DIRPATH given. This function is called to generate selective VPATH lists and also for the general VPATH list (which is in fact just a selective VPATH that is applied to everything). The returned pointer is either put in the linked list of all selective VPATH lists or in the GENERAL_VPATH variable. If DIRPATH is nil, remove all previous listings with the same pattern. If PATTERN is nil, remove all VPATH listings. Existing and readable directories that are not "." given in the DIRPATH separated by the path element separator (defined in makeint.h) are loaded into the directory hash table if they are not there already and put in the VPATH searchpath for the given pattern with trailing slashes stripped off if present (and if the directory is not the root, "/"). The length of the longest entry in the list is put in the structure as well. The new entry will be at the head of the VPATHS chain. 
Name: gpath_search; Comment: Search the GPATH list for a pathname string that matches the one passed in. If it is found, return 1. Otherwise we return 0. 
Name: selective_vpath_search; Comment: Search the given VPATH list for a directory where the name pointed to by FILE exists. If it is found, we return a cached name of the existing file and set *MTIME_PTR (if MTIME_PTR is not NULL) to its modtime (or zero if no stat call was done). Also set the matching directory index in PATH_INDEX if it is not NULL. Otherwise we return NULL. 
Name: vpath_search; Comment: Search the VPATH list whose pattern matches FILE for a directory where FILE exists. If it is found, return the cached name of an existing file, and set *MTIME_PTR (if MTIME_PTR is not NULL) to its modtime (or zero if no stat call was done). Also set the matching directory index in VPATH_INDEX and PATH_INDEX if they are not NULL. Otherwise we return 0. 
Name: print_vpath_data_base; Comment: Print the data base of VPATH search paths. 
Name: convert_vpath_to_windows32; Comment: Convert delimiter separated vpath to Canonical format. 
Name: convert_Path_to_windows32; Comment: Convert delimiter separated path to Canonical format. 
Name: w32ify; Comment: Convert to forward slashes. Resolve to full pathname optionally 
Name: convert_path_to_nutc; Comment: Convert delimiter separated pathnames (e.g. PATH) or single file pathname (e.g. c:/foo, c:_bar) to NutC format. If we are handed a string that _NutPathToNutc() fails to convert, just return the path we were handed and assume the caller will know what to do with it (It was probably a mistake to try and convert it anyway due to some of the bizarre things that might look like pathnames in makefiles). 
Name: jobserver_clear; Comment: Close jobserver semaphore 
Name: jobserver_acquire; Comment: Returns 1 if we got a token, or 0 if a child has completed. The Windows implementation doesn't support load detection. 
Name: fcntl; Comment: Emulation of fcntl that supports only F_GETFD and F_SETLKW. 
Name: record_sync_mutex; Comment: Record in a static variable the mutex handle we were requested to use. That nameless mutex was created by the top-level Make, and its handle was passed to us via inheritance. The value of that handle is passed via the command-line arguments, so that we know which handle to use. 
Name: create_mutex; Comment: Create a new mutex or reuse one created by our parent. 
Name: same_stream; Comment: Return non-zero if F1 and F2 are 2 streams representing the same file or pipe or device. 
Name: tmpfile; Comment: A replacement for tmpfile, since the MSVCRT implementation creates the file in the root directory of the current drive, which might not be writable by our user. Most of the code borrowed from create_batch_file, see job.c. 
Name: isatty; Comment: MS runtime's isatty returns non-zero for any character device, including the null device, which is not what we want. 
Name: compare; Comment: Description: Convert a NULL string terminated UNIX environment block to an environment block suitable for a windows32 system call Returns: TRUE= success, FALSE=fail Notes/Dependencies: the environment block is sorted in case-insensitive order, is double-null terminated, and is a char *, not a char ** 
Name: process_wait_for_multiple_objects; Comment: Address the scalability limit intrisic to WaitForMultipleOjects by calling WaitForMultipleObjects on 64 element chunks of the input array with 0 timeout. Exit with an appropriately conditioned result or repeat again every 10 ms if no handle has signaled and the requested timeout was not zero. 
Name: process_set_handles; Comment: Fill a HANDLE list with handles to wait for. 
Name: process_adjust_wait_state; Comment: When a process has been waited for, adjust the wait state array so that we don't wait for it again 
Name: process_wait_for_any_private; Comment: Waits for any of the registered child processes to finish. 
Name: process_kill; Comment: Terminate a process. 
Name: process_table_full; Comment: Returns true when we have no more available slots in our process table. 
Name: process_table_usable_size; Comment: Returns the maximum number of job slots we can support when using the jobserver. 
Name: process_table_actual_size; Comment: Returns the actual size of the process table. 
Name: process_register; Comment: Use this function to register processes you wish to wait for by calling process_file_io(NULL) or process_wait_any(). This must be done because it is possible for callers of this library to reuse the same handle for multiple processes launches :-( 
Name: process_wait_for_any; Comment: NoneYou must NOT then call process_pipe_io() because this function is not capable of handling automatic notification of any child death. 
Name: process_init; Comment: None}
Name: batch_file_with_spaces; Comment: Return non-zero of FNAME specifies a batch file and its name includes embedded whitespace. 
Name: process_begin; Comment: Description: Create the child process to be helped Returns: success <=> 0 Notes/Dependencies: 
Name: process_pipe_io; Comment: Purpose: collects output from child process and returns results Description: Returns: Notes/Dependencies: 
Name: process_file_io; Comment: Purpose: collects output from child process and returns results Description: Returns: Notes/Dependencies: 
Name: process_cleanup; Comment: Description: Clean up any leftover handles, etc. It is up to the caller to manage and free the input, output, and stderr buffers. 
Name: make_command_line; Comment: Description: Create a command line buffer to pass to CreateProcess Returns: the buffer or NULL for failure Shell case: sh_name a:/full/path/to/script argv[1] argv[2] ... Otherwise: argv[0] argv[1] argv[2] ... Notes/Dependencies: CreateProcess does not take an argv, so this command creates a command line for the executable. 
Name: process_easy; Comment: Description: Given an argv and optional envp, launch the process using the default stdin, stdout, and stderr handles. Also, register process so that process_wait_for_any_private() can be used via process_file_io(NULL) or process_wait_for_any(). Returns: Notes/Dependencies: 
Name: map_windows32_error_to_string; Comment: Description: the windows32 version of perror() Returns: a pointer to a static error Notes/Dependencies: I got this from comp.os.ms-windows.programmer.win32 
Name: addr_sa_to_xaddr; Comment: Convert struct sockaddr to struct xaddr Returns 0 on success, -1 on failure. 
Name: addr_netmask; Comment: Calculate a netmask of length 'l' for address family 'af' and store it in 'n'. Returns 0 on success, -1 on failure. 
Name: addr_and; Comment: Perform logical AND of addresses 'a' and 'b', storing result in 'dst'. Returns 0 on success, -1 on failure. 
Name: addr_host_is_all0s; Comment: Test whether host portion of address 'a', as determined by 'masklen' is all zeros. Returns 0 on if host portion of address is all-zeros, -1 if not all zeros or on failure. 
Name: addr_pton; Comment: Parse string address 'p' into 'n' Returns 0 on success, -1 on failure. 
Name: addr_pton_cidr; Comment: Parse a CIDR address (x.x.x.x/y or xxxx:yyyy::/z). Return -1 on parse error, -2 on inconsistency or 0 on success. 
Name: addr_match_list; Comment: Match "addr" against list pattern list "_list", which may contain a mix of CIDR addresses and old-school wildcards. If addr is NULL, then no matching is performed, but _list is parsed and checked for well-formedness. Returns 1 on match found (never returned when addr == NULL). Returns 0 on if no match found, or no errors found when addr == NULL. Returns -1 on negated match found (never returned when addr == NULL). Returns -2 on invalid list entry. 
Name: addr_match_cidr_list; Comment: Match "addr" against list CIDR list "_list". Lexical wildcards and negation are not supported. If "addr" == NULL, will verify structure of "_list". Returns 1 on match found (never returned when addr == NULL). Returns 0 on if no match found, or no errors found when addr == NULL. Returns -1 on error 
Name: atomicio6; Comment: ensure all of data on socket comes through. f==read || f==vwrite 
Name: atomiciov6; Comment: ensure all of data on socket comes through. f==readv || f==writev 
Name: getacna; Comment: In Solaris 11 the audit daemon has been moved to SMF. In the process they simply dropped getacna() from the API, since it read from a now non-existent config file. This function re-implements getacna() to read from the SMF repository instead. 
Name: selected; Comment: Check if the specified event is selected (enabled) for auditing. Returns 1 if the event is selected, 0 if not and -1 on failure. 
Name: audit_connection_from; Comment: Below is the sshd audit API code 
Name: audit_classify_auth; Comment: Maybe add the audit class to struct Authmethod? 
Name: audit_username; Comment: helper to return supplied username 
Name: audit_connection_from; Comment: Called after a connection has been accepted but before any authentication has been attempted. 
Name: audit_event; Comment: Called when various events occur (see audit.h for a list of possible events and what they mean). 
Name: audit_session_open; Comment: Called when a user session is started. Argument is the tty allocated to the session, or NULL if no tty was allocated. Note that this may be called multiple times if multiple sessions are used within a single connection. 
Name: audit_session_close; Comment: Called when a user session is closed. Argument is the tty allocated to the session, or NULL if no tty was allocated. Note that this may be called multiple times if multiple sessions are used within a single connection. 
Name: audit_run_command; Comment: This will be called when a user runs a non-interactive command. Note that it may be called multiple times for a single connection since SSH2 allows multiple sessions within a single connection. 
Name: handle_permit; Comment: Parse and record a permitopen/permitlisten directive. Return 0 on success. Return -1 on failure and sets *errstrp to error reason. 
Name: sshauthopt_merge; Comment: Merges "additional" options to "primary" and returns the result. NB. Some options from primary have primacy. 
Name: sshauthopt_copy; Comment: Copy options 
Name: pthread_exit; Comment: ARGSUSED 
Name: pthread_create; Comment: ARGSUSED 
Name: pthread_join; Comment: ARGSUSED 
Name: import_environments; Comment: Import regular and PAM environment from subprocess 
Name: sshpam_thread_conv; Comment: Conversation function for authentication thread. 
Name: sshpam_thread; Comment: Authentication thread. 
Name: fake_password; Comment: Returns a junk password of identical length to that the user supplied. Used to mitigate timing attacks against crypt(3)/PAM stacks that vary processing time in proportion to password length. 
Name: sshpam_respond; Comment: XXX - see also comment in auth-chall.c:verify_response 
Name: start_pam; Comment: This replaces auth-pam.c 
Name: do_pam_chauthtok; Comment: XXX this should be done in the authentication phase, but ssh1 doesn't support that 
Name: do_pam_putenv; Comment: Set a PAM environment string. We need to do this so that the session modules can handle things like Kerberos/GSI credentials that appear during the ssh authentication process. 
Name: sshpam_passwd_conv; Comment: "Blind" conversation function for password authentication. Assumes that echo-off prompts are for the password and stores messages for later display. 
Name: sshpam_auth_passwd; Comment: Attempt password authentication via PAM 
Name: auth_password; Comment: Tries to authenticate the user using password. Returns true if authentication succeeds. 
Name: check_rhosts_file; Comment: This function processes an rhosts-style file (.rhosts, .shosts, or /etc/hosts.equiv). This returns true if authentication can be granted based on the file, and returns zero otherwise. 
Name: auth_rhosts2; Comment: Tries to authenticate the user using the .shosts or .rhosts file. Returns true if authentication succeeds. If ignore_rhosts is true, only /etc/hosts.equiv will be considered (.rhosts and .shosts are ignored). 
Name: auth_shadow_acctexpired; Comment: Check if specified account is expired. Returns 1 if account is expired, 0 otherwise. 
Name: auth_shadow_pwexpired; Comment: Checks password expiry for platforms that use shadow passwd files. Returns: 1 = password expired, 0 = password not expired 
Name: allowed_user; Comment: Check if the user is allowed to log in via ssh. If user is listed in DenyUsers or one of user's groups is listed in DenyGroups, false will be returned. If AllowUsers isn't empty and user isn't listed there, or if AllowGroups isn't empty and one of user's groups isn't listed there, false will be returned. If the user's shell is not executable, false will be returned. Otherwise true is returned. 
Name: format_method_key; Comment: Formats any key left in authctxt->auth_method_key for inclusion in auth_log()'s message. Also includes authxtct->auth_method_info if present. 
Name: auth_root_allowed; Comment: Check whether root logins are disallowed. 
Name: expand_authorized_keys; Comment: Given a template and a passwd structure, build a filename by substituting % tokenised options. Currently, %% becomes '%', %h becomes the home directory and %u the username. This returns a buffer allocated by xmalloc. 
Name: check_key_in_hostfiles; Comment: return ok if key exists in sysfile or userfile 
Name: auth_key_is_revoked; Comment: Returns 1 if key is revoked by revoked_keys_file, 0 otherwise 
Name: remote_hostname; Comment: Returns the remote DNS hostname as a string. The returned string must not be freed. NB. this will usually trigger a DNS query the first time it is called. This function does additional checks on the hostname to mitigate some attacks on based on conflation of hostnames and IP addresses. 
Name: auth_get_canonical_hostname; Comment: Return the canonical name of the host in the other side of the current connection. The host name is cached, so it is efficient to call this several times. 
Name: auth_log_authopts; Comment: Log sshauthopt options locally and (optionally) for remote transmission 
Name: auth_activate_options; Comment: Activate a new set of key/cert options; merging with what is there. 
Name: auth_restrict_session; Comment: Disable forwarding, etc for the session 
Name: kbdint_next_device; Comment: get next device 
Name: auth2_challenge; Comment: try challenge-response, set authctxt->postponed if we have to wait for the response. 
Name: auth2_challenge_stop; Comment: unregister kbd-int callbacks and context 
Name: auth2_challenge_start; Comment: side effect: sets authctxt->postponed if a reply was sent
Name: userauth_gssapi; Comment: We only support those mechanisms that we know about (ie ones that we know how to check local user kuserok and the like) 
Name: input_gssapi_exchange_complete; Comment: This is called when the client thinks we've completed authentication. It should only be enabled in the dispatch handler by the function above, which only enables it once the GSSAPI exchange is complete. 
Name: hostbased_key_allowed; Comment: return 1 if given hostkey is allowed 
Name: check_principals_line; Comment: Process a single authorized_principals format line. Returns 0 and sets authoptsp is principal is authorised, -1 otherwise. "loc" is used as a log preamble for file/line information. 
Name: match_principals_file; Comment: XXX remove pw args here and elsewhere once ssh->authctxt is guaranteed 
Name: match_principals_command; Comment: Checks whether principal is allowed in output of command. returns 1 if the principal is allowed or 0 otherwise. 
Name: check_authkey_line; Comment: Check a single line of an authorized_keys-format file. Returns 0 if key matches, -1 otherwise. Will return key/cert options via *authoptsp on success. "loc" is used as file/line location in log messages. 
Name: check_authkeys_file; Comment: Checks whether key is allowed in authorized_keys-format file, returns 1 if the key is allowed or 0 otherwise. 
Name: user_cert_trusted_ca; Comment: Authenticate a certificate key against TrustedUserCAKeys 
Name: user_key_allowed2; Comment: Checks whether key is allowed in file. returns 1 if the key is allowed or 0 otherwise. 
Name: user_key_command_allowed2; Comment: Checks whether key is allowed in output of command. returns 1 if the key is allowed or 0 otherwise. 
Name: user_key_allowed; Comment: Check whether key authenticates and authorises the user. 
Name: do_authentication2; Comment: loop until authctxt->success == TRUE 
Name: input_service_request; Comment: ARGSUSED
Name: input_userauth_request; Comment: ARGSUSED
Name: auth2_method_allowed; Comment: Checks whether method is allowed by at least one AuthenticationMethods methods list. Returns 1 if allowed, or no methods lists configured. 0 otherwise. 
Name: auth2_methods_valid; Comment: Check a comma-separated list of methods for validity. Is need_enable is non-zero, then also require that the methods are enabled. Returns 0 on success or -1 if the methods list is invalid. 
Name: auth2_setup_methods_lists; Comment: Prune the AuthenticationMethods supplied in the configuration, removing any methods lists that include disabled methods. Note that this might leave authctxt->num_auth_methods == 0, even when multiple required auth has been requested. For this reason, all tests for whether multiple is enabled should consult options.num_auth_methods directly. 
Name: remove_method; Comment: Remove method from the start of a comma-separated list of methods. Returns 0 if the list of methods did not start with that method or 1 if it did. 
Name: auth2_update_methods_lists; Comment: Called after successful authentication. Will remove the successful method from the start of each list in which it occurs. If it was the last method in any list, then authentication is deemed successful. Returns 1 if the method completed any authentication list or 0 otherwise. 
Name: auth2_authctxt_reset_info; Comment: Reset method-specific information 
Name: auth2_record_info; Comment: Record auth method-specific information for logs 
Name: auth2_record_key; Comment: Records a public key used in authentication. This is used for logging and to ensure that the same key is not subsequently accepted again for multiple authentication. 
Name: auth2_key_already_used; Comment: Checks whether a key has already been previously used for authentication 
Name: auth2_update_session_info; Comment: Updates authctxt->session_info with details of authentication. Should be whenever an authentication method succeeds. 
Name: decode_reply; Comment: Convert success/failure response from agent to a err.h status 
Name: ssh_get_authentication_socket_path; Comment: Opens an authentication socket at the provided path and stores the file descriptor in fdp. Returns 0 on success and an error on failure. 
Name: ssh_get_authentication_socket; Comment: Opens the default authentication socket and stores the file descriptor in fdp. Returns 0 on success and an error on failure. 
Name: ssh_request_reply; Comment: Communicate with agent: send request and read reply 
Name: ssh_request_reply_decode; Comment: Communicate with agent: sent request, read and decode status reply 
Name: ssh_close_authentication_socket; Comment: Closes the agent socket if it should be closed (depends on how it was obtained). The argument must have been returned by ssh_get_authentication_socket(). 
Name: ssh_lock_agent; Comment: Lock/unlock agent 
Name: ssh_fetch_identitylist; Comment: Fetch list of identities held by the agent. 
Name: ssh_agent_has_key; Comment: Check if the ssh agent has a given key. Returns 0 if found, or a negative SSH_ERR_* error code on failure. 
Name: agent_encode_alg; Comment: encode signature algorithm in flag bits, so we can keep the msg format 
Name: ssh_agent_sign; Comment: ask agent to sign data, returns err.h code on error, 0 on success 
Name: encode_constraints; Comment: Encode key for a message to the agent. 
Name: ssh_add_identity_constrained; Comment: Adds an identity to the authentication server. This call is intended only for use by ssh-add(1) and like applications. 
Name: ssh_remove_identity; Comment: Removes an identity from the authentication server. This call is intended only for use by ssh-add(1) and like applications. 
Name: ssh_update_card; Comment: Add/remove an token-based identity from the authentication server. This call is intended only for use by ssh-add(1) and like applications. 
Name: ssh_remove_all_identities; Comment: Removes all identities from the agent. This call is intended only for use by ssh-add(1) and like applications. This supports the SSH protocol 1 message to because, when clearing all keys from an agent, we generally want to clear both protocol v1 and v2 keys. 
Name: sshkey_save_private_blob; Comment: Save a key blob to a file 
Name: sshkey_perm_ok; Comment: XXX remove error() calls from here? 
Name: sshkey_load_pubkey_from_private; Comment: Load a pubkey from the unencrypted envelope of a new-format private key 
Name: sshkey_load_public; Comment: load public key from any pubkey file 
Name: sshkey_load_cert; Comment: Load the certificate associated with the named private key 
Name: sshkey_load_private_cert; Comment: Load private key and certificate 
Name: sshkey_in_file; Comment: Returns success if the specified "key" is listed in the file "filename", SSH_ERR_KEY_NOT_FOUND: if the key is not listed or another error. If "strict_type" is set then the key type must match exactly, otherwise a comparison that ignores certficiate data is performed. If "check_ca" is set and "key" is a certificate, then its CA key is also checked and sshkey_in_file() will return success if either is found. 
Name: sshkey_check_revoked; Comment: Checks whether the specified key is revoked, returning 0 if not, SSH_ERR_KEY_REVOKED if it is or another error code if something unexpected happened. This will check both the key and, if it is a certificate, its CA key too. "revoked_keys_file" may be a KRL or a one-per-line list of public keys. 
Name: sshkey_advance_past_options; Comment: Advanced *cpp past the end of key options, defined as the first unquoted whitespace character. Returns 0 on success or -1 on failure (e.g. unterminated quotes). 
Name: sshkey_save_public; Comment: Save a public key 
Name: retop; Comment: Resets b->top to point to the most significant bit set in b->d 
Name: get_socket_address; Comment: Returns the local/remote IP-address/hostname of socket as a string. The returned string must be freed. 
Name: get_sock_port; Comment: Returns the local/remote port for the socket. 
Name: channel_init_channels; Comment: -- channel core 
Name: channel_lookup; Comment: Returns the channel if it is allowed to receive protocol messages. Private channels, like listening sockets, may not receive messages. 
Name: channel_register_fds; Comment: Register filedescriptors for a channel, used when allocating a channel or when the channel consumer/producer is ready, e.g. shell exec'd 
Name: channel_new; Comment: Allocate a new channel object and set its type and socket. This will cause remote_name to be freed. 
Name: channel_close_fds; Comment: Close all channel fd/socket. 
Name: fwd_ident; Comment: Returns an printable name for the specified forwarding permission list 
Name: permission_set_get; Comment: Returns the forwarding permission list for the specified direction 
Name: permission_set_get_array; Comment: Returns pointers to the specified forwarding list and its element count 
Name: permission_set_add; Comment: Adds an entry to the spcified forwarding list 
Name: channel_free; Comment: Free the channel and close its fd/socket. 
Name: channel_close_all; Comment: Closes the sockets/fds of all channels. This is used to close extra file descriptors after a fork. 
Name: channel_stop_listening; Comment: Stop listening to channels. 
Name: channel_not_very_much_buffered_data; Comment: Returns true if no channel has too much buffered data, and false if one or more channel is overfull. 
Name: channel_still_open; Comment: Returns true if any channel is still open. 
Name: channel_find_open; Comment: Returns the id of an open channel suitable for keepaliving 
Name: channel_format_extended_usage; Comment: Returns the state of the channel's extended usage flag 
Name: channel_open_message; Comment: Returns a message describing the currently open forwarded connections, suitable for sending to the client. The message contains crlf pairs for newlines. 
Name: x11_open_helper; Comment: This is a special state for X11 authentication spoofing. An opened X11 connection (when authentication spoofing is being done) remains in this state until the first packet has been completely read. The authentication data in that packet is then substituted by the real data if it matches the fake data, and the channel is put into normal mode. XXX All this happens at the client side. Returns: 0 = need more data, -1 = wrong cookie, 1 = ok 
Name: channel_decode_socks4; Comment: try to decode a socks4 header 
Name: channel_pre_dynamic; Comment: dynamic port forwarding 
Name: rdynamic_close; Comment: simulate read-error 
Name: channel_before_prepare_select_rdynamic; Comment: reverse dynamic port forwarding 
Name: channel_post_x11_listener; Comment: This is our fake X11 server socket. 
Name: channel_post_port_listener; Comment: This socket is listening for connections to a forwarded TCP/IP port. 
Name: channel_post_auth_listener; Comment: This is the authentication agent socket listening for connections from clients. 
Name: channel_garbage_collect; Comment: gc dead channels 
Name: channel_before_prepare_select; Comment: Create sockets before allocating the select bitmasks. This is necessary for things that need to happen after reading the network-input but before channel_prepare_select(). 
Name: channel_prepare_select; Comment: Allocate/update select bitmasks and add any bits relevant to channels in select bitmasks. 
Name: channel_after_select; Comment: After select, perform any appropriate operations for channels which have events pending. 
Name: channel_output_poll_input_open; Comment: Enqueue data for channels with open or draining c->input. 
Name: channel_output_poll_extended_read; Comment: Enqueue data for channels with open c->extended in read mode. 
Name: channel_output_poll; Comment: If there is data to send to the connection, enqueue some of it now. 
Name: channel_proxy_downstream; Comment: receive packets from downstream mux clients: channel callback fired on read from mux client, creates SSH_CHANNEL_MUX_PROXY channels and translates channel IDs on channel creation. 
Name: channel_proxy_upstream; Comment: receive packets from upstream server and de-multiplex packets to correct downstream: implemented as a helper for channel input handlers, replaces local (proxy) channel ID with downstream channel ID. 
Name: channel_parse_id; Comment: Parse a channel ID from the current packet 
Name: channel_from_packet_id; Comment: Lookup a channel from an ID in the current packet 
Name: channel_set_af; Comment: -- tcp forwarding 
Name: channel_fwd_bind_addr; Comment: Determine whether or not a port forward listens to loopback, the specified address or wildcard. On the client, a specified bind address will always override gateway_ports. On the server, a gateway_ports of 1 (``yes'') will override the client's specification and force a wildcard bind, whereas a value of 2 (``clientspecified'') will bind to whatever address the client asked for. Special-case listen_addrs are: "0.0.0.0" -> wildcard v4/v6 if SSH_OLD_FORWARD_ADDR "" (empty string), "*" -> wildcard v4/v6 "localhost" -> loopback v4/v6 "127.0.0.1" / "::1" -> accepted even if gateway_ports isn't set 
Name: channel_setup_local_fwd_listener; Comment: protocol local port fwd, used by ssh 
Name: remote_open_match; Comment: Matches a remote forwarding permission against a requested forwarding 
Name: check_rfwd_permission; Comment: Checks whether a requested remote forwarding is permitted 
Name: channel_setup_remote_fwd_listener; Comment: protocol v2 remote port fwd, used by sshd 
Name: channel_rfwd_bind_host; Comment: Translate the requested rfwd listen host to something usable for this server. 
Name: channel_request_remote_forwarding; Comment: Initiate forwarding of connections to port "port" on remote host through the secure channel to host:port from local side. Returns handle (index) for updating the dynamic listen port with channel_update_permission(). 
Name: open_listen_match_tcpip; Comment: Note that in the listen host/port case we don't support FWD_PERMIT_ANY_PORT and need to translate between the configured-host (listen_host) and what we've sent to the remote server (channel_rfwd_bind_host) 
Name: channel_request_rforward_cancel_tcpip; Comment: Request cancellation of remote forwarding of connection host:port from local side. 
Name: channel_request_rforward_cancel_streamlocal; Comment: Request cancellation of remote forwarding of Unix domain socket path from local side. 
Name: channel_request_rforward_cancel; Comment: Request cancellation of remote forwarding of a connection from local side. 
Name: channel_permit_all; Comment: Permits opening to any host/port if permitted_user[] is empty. This is usually called by the server, because the user could connect to any port anyway, and the server has no way to know but to trust the client anyway. 
Name: channel_add_permission; Comment: Permit the specified host/port for forwarding. 
Name: channel_disable_admin; Comment: Administratively disable forwarding. 
Name: channel_clear_permission; Comment: Clear a list of permitted opens. 
Name: channel_update_permission; Comment: Update the listen port for a dynamic remote forward, after the actual 'newport' has been allocated. If 'newport' < 0 is passed then they entry will be invalidated. 
Name: permitopen_port; Comment: returns port number, FWD_PERMIT_ANY_PORT or -1 on error 
Name: connect_next; Comment: Try to start non-blocking connect to next host in cctx list 
Name: connect_to_helper; Comment: Return connecting socket to remote host:port or local socket path, passing back the failure reason if appropriate. 
Name: connect_to; Comment: Return CONNECTING channel to remote host:port or local socket path 
Name: channel_connect_by_listen_address; Comment: returns either the newly connected channel or the downstream channel that needs to deal with this connection. 
Name: channel_connect_to_port; Comment: Check if connecting to that port is permitted and connect. 
Name: channel_connect_to_path; Comment: Check if connecting to that path is permitted and connect. 
Name: rdynamic_connect_prepare; Comment: Return RDYNAMIC_OPEN channel: channel allows SOCKS, but is not connected 
Name: rdynamic_connect_finish; Comment: Return CONNECTING socket to remote host:port or local socket path 
Name: x11_create_display_inet; Comment: Creates an internet domain socket for listening for X11 connections. Returns 0 and a suitable display number for the DISPLAY variable stored in display_numberp , or -1 if an error occurs. 
Name: x11_request_forwarding_with_spoofing; Comment: Requests forwarding of X11 connections, generates fake authentication data, and enables authentication spoofing. This should be called in the client only. 
Name: chachapoly_crypt; Comment: chachapoly_crypt() operates as following: En/decrypt with header key 'aadlen' bytes from 'src', storing result to 'dest'. The ciphertext here is treated as additional authenticated data for MAC calculation. En/decrypt 'len' bytes at offset 'aadlen' from 'src' to 'dest'. Use POLY1305_TAGLEN bytes at offset 'len'+'aadlen' as the authentication tag. This tag is written on encryption and verified on decryption. 
Name: chachapoly_get_length; Comment: Decrypt and extract the encrypted packet length 
Name: ssh_ctr_inc; Comment: increment counter 'ctr', the counter is of size 'len' bytes and stored in network-byte-order. (LSB at ctr[len-1], MSB at ctr[0]) 
Name: cipher_alg_list; Comment: Returns a comma-separated list of supported ciphers. 
Name: cipher_crypt; Comment: cipher_crypt() operates as following: Copy 'aadlen' bytes (without en/decryption) from 'src' to 'dest'. These bytes are treated as additional authenticated data for authenticated encryption modes. En/Decrypt 'len' bytes at offset 'aadlen' from 'src' to 'dest'. Use 'authlen' bytes at offset 'len'+'aadlen' as the authentication tag. This tag is written on encryption and verified on decryption. Both 'aadlen' and 'authlen' can be set to 0. 
Name: cipher_get_length; Comment: Extract the packet length, including any decryption necessary beforehand 
Name: cipher_get_keyiv_len; Comment: Exports an IV from the sshcipher_ctx required to export the key state back from the unprivileged child to the privileged parent process. 
Name: cleanup_exit; Comment: default implementation 
Name: window_change_handler; Comment: ARGSUSED 
Name: signal_handler; Comment: ARGSUSED 
Name: set_control_persist_exit_time; Comment: Sets control_persist_exit_time to the absolute time when the backgrounded control master should exit due to expiry of the ControlPersist timeout. Sets it to 0 if we are not a backgrounded control master process, or if there is no ControlPersist timeout. 
Name: client_check_window_change; Comment: Checks if the client window has changed, and sends a packet about it to the server if so. The actual change is detected elsewhere (by a software interrupt on Unix); this just checks the flag and sends a message ifappropriate. 
Name: client_wait_until_can_do_something; Comment: Waits until the client can do something (some data becomes available on one of the file descriptors). 
Name: process_escapes; Comment: Process the characters one by one. 
Name: client_process_buffered_input_packets; Comment: Get packets from the connection input buffer, and process them as long as there are packets available. Any unknown packets received during the actual session cause the session to terminate. This is intended to make debugging easier since no confirmations are sent. Any compatible protocol extensions must be negotiated during the preparatory phase. 
Name: client_new_escape_filter_ctx; Comment: Helper: allocate a new escape_filter_ctx and fill in its escape char 
Name: client_filter_cleanup; Comment: Free the escape filter context on channel free 
Name: client_loop; Comment: Implements the interactive session with the server. This is called after the user has been authenticated, and a command has been started on the remote host. If escape_char != SSH_ESCAPECHAR_NONE, it is the character used as an escape character for terminating or suspending the session. 
Name: client_request_forwarded_tcpip; Comment: *******
Name: client_input_channel_open; Comment: XXXX move to generic input handler 
Name: hostspec_is_complex; Comment: Returns non-zero if a known_hosts hostname list is not of a form that can be handled by UpdateHostkeys. These include wildcard hostnames and hostnames lists that do not follow the form host[,ip]. 
Name: hostkeys_find; Comment: callback to search for ctx->keys in known_hosts 
Name: hostkeys_check_old; Comment: callback to search for ctx->old_keys in known_hosts under other names 
Name: check_old_keys_othernames; Comment: Check known_hosts files for deprecated keys under other names. Returns 0 on success or -1 on failure. Updates ctx->old_key_seen if deprecated keys exist under names other than the active hostname/IP. 
Name: key_accepted_by_hostkeyalgs; Comment: Returns non-zero if the key is accepted by HostkeyAlgorithms. Made slightly less trivial by the multiple RSA signature algorithm names. 
Name: client_input_hostkeys; Comment: Handle hostkeys-00@openssh.com global request to inform the client of all the server's hostkeys. The keys are checked against the user's HostkeyAlgorithms preference before they are accepted. 
Name: cleanup_exit; Comment: client specific fatal cleanup 
Name: compat_banner; Comment: determine bug flags from SSH protocol banner 
Name: dh_pub_is_valid; Comment: diffie-hellman-groupN-sha1 
Name: dh_new_group; Comment: This just returns the group, we still need to generate the exchange value. 
Name: dh_new_group1; Comment: rfc2409 "Second Oakley Group" (1024 bits) 
Name: dh_new_group14; Comment: rfc3526 group 14 "2048-bit MODP Group" 
Name: dh_new_group16; Comment: rfc3526 group 16 "4096-bit MODP Group" 
Name: dh_new_group18; Comment: rfc3526 group 18 "8192-bit MODP Group" 
Name: dh_new_group_fallback; Comment: Select fallback group used by DH-GEX if moduli file cannot be read. 
Name: dh_estimate; Comment: Estimates the group order for a Diffie-Hellman group that has an attack complexity approximately the same as O(2**bits). Values from NIST Special Publication 800-57: Recommendation for Key Management Part 1 (rev 3) limited by the recommended maximum value from RFC4419 section 3. 
Name: dns_read_key; Comment: Read SSHFP parameters from key buffer. Caller must free digest which is allocated by sshkey_fingerprint_raw(). 
Name: dns_read_rdata; Comment: Read SSHFP parameters from rdata buffer. 
Name: is_numeric_hostname; Comment: Check if hostname is numerical. Returns -1 if hostname is numeric, 0 otherwise 
Name: verify_host_key_dns; Comment: Verify the given hostname, address and host key using DNS. Returns 0 if lookup succeeds, -1 otherwise 
Name: export_dns_rr; Comment: Export the fingerprint of a key as a DNS resource record 
Name: seed_rng; Comment: Actual initialisation is handled in arc4random() 
Name: sshfatal; Comment: Fatal messages. This function never returns. 
Name: fe25519_freeze; Comment: reduction modulo 2^255-19 
Name: fe25519_pack; Comment: Assumes input x being reduced below 2^255 
Name: dbl_p1p1; Comment: See http://www.hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd 
Name: cmov_aff; Comment: Constant-time version of: if(b) r = p 
Name: ge25519_unpackneg_vartime; Comment: return 0 on success, -1 otherwise 
Name: ge25519_double_scalarmult_vartime; Comment: computes [s1]p1 + [s2]p2 
Name: ga_init; Comment: Initialize group access list for user with primary (base) and supplementary groups. Return the number of groups in the list. 
Name: ga_match; Comment: Return 1 if one of user's groups is contained in groups. Return 0 otherwise. Use match_pattern() for string comparison. 
Name: ga_match_pattern_list; Comment: Return 1 if one of user's groups matches group_pattern list. Return 0 on negated or no match. 
Name: ga_free; Comment: Free memory allocated for group access list. 
Name: ssh_gssapi_get_buffer_desc; Comment: sshbuf_get for gss_buffer_desc 
Name: ssh_gssapi_check_oid; Comment: Check that the OID in a data stream matches that in the context 
Name: ssh_gssapi_set_oid_data; Comment: Set the contexts OID from a data stream 
Name: ssh_gssapi_set_oid; Comment: Set the contexts OID 
Name: ssh_gssapi_error; Comment: All this effort to report an error ... 
Name: ssh_gssapi_build_ctx; Comment: Initialise our GSSAPI context. We use this opaque structure to contain all of the data which both the client and server need to persist across {accept,init}_sec_context calls, so that when we do it from the userauthstuff life is a little easier 
Name: ssh_gssapi_delete_ctx; Comment: Delete our context, providing it has been built correctly 
Name: ssh_gssapi_init_ctx; Comment: Wrapper to init_sec_context Requires that the context contains: *_oid *_server name (from ssh_gssapi_import_name) 
Name: ssh_gssapi_import_name; Comment: Create a service name for the given host 
Name: ssh_gssapi_krb5_init; Comment: Initialise the krb5 library, for the stuff that GSSAPI won't do 
Name: ssh_gssapi_krb5_userok; Comment: Check if this user is OK to login. This only works with krb5 - otherGSSAPI mechanisms will need their own. Returns true if the user is OK to log in, otherwise returns 0 
Name: ssh_gssapi_krb5_storecreds; Comment: This writes out any forwarded credentials from the structure populatedduring userauth. Called after we have setuid to the user 
Name: ssh_gssapi_acquire_cred; Comment: Privileged (called from ssh_gssapi_server_ctx) 
Name: ssh_gssapi_server_ctx; Comment: Privileged 
Name: ssh_gssapi_supported_oids; Comment: Unprivileged 
Name: ssh_gssapi_accept_ctx; Comment: Privileged 
Name: ssh_gssapi_parse_ename; Comment: This parses an exported name, extracting the mechanism specific portion to use for ACL checking. It verifies that the name belongs the mechanism originally selected. 
Name: ssh_gssapi_getclient; Comment: Privileged (called from accept_secure_ctx) 
Name: ssh_gssapi_cleanup_creds; Comment: As user - called on fatal/exit 
Name: ssh_gssapi_storecreds; Comment: As user 
Name: ssh_gssapi_do_child; Comment: As user 
Name: ssh_gssapi_userok; Comment: Privileged 
Name: ssh_gssapi_checkmic; Comment: Privileged 
Name: ssh_gssapi_displayname; Comment: Privileged 
Name: hmac_test; Comment: cc -DTEST hmac.c digest.c buffer.c cleanup.c fatal.c log.c xmalloc.c -lcrypto 
Name: extract_salt; Comment: XXX hmac is too easy to dictionary attack; use bcrypt? 
Name: hostfile_read_key; Comment: Parses an RSA (number of bits, e, n) or DSA key from a string. Moves the pointer over the key. Skips any whitespace at the beginning and at end. 
Name: check_hostkeys_by_key_or_type; Comment: Match keys against a specified key, or look one up by key type. If looking for a keytype (key == NULL) and one is found then return HOST_FOUND, otherwise HOST_NEW. If looking for a key (key != NULL): 1. If the key is a cert and a matching CA is found, return HOST_OK 2. If the key is not a cert and a matching key is found, return HOST_OK 3. If no key matches but a key with a different type is found, then return HOST_CHANGED 4. If no matching keys are found, then return HOST_NEW. Finally, check any found key is not revoked. 
Name: hostfile_create_user_ssh_dir; Comment: Create user ~/.ssh directory if it doesn't exist and we want to write to it. If notify is set, a message will be emitted if the directory is created. 
Name: add_host_to_hostfile; Comment: Appends an entry to the host file. Returns false if the entry could not be appended. 
Name: kex_names_valid; Comment: Validate KEX method name list 
Name: kex_names_cat; Comment: Concatenate algorithm names, avoiding duplicates in the process. Caller must free returned string. 
Name: kex_assemble_names; Comment: Assemble a list of algorithms from a default list and a string from a configuration file. The user-provided string may begin with '+' to indicate that it should be appended to the default, '-' that the specified names should be removed, or '^' that they should be placed at the head. 
Name: kex_prop2buf; Comment: put algorithm proposal into buffer 
Name: kex_buf2prop; Comment: parse buffer and return algorithm proposal 
Name: kex_protocol_error; Comment: ARGSUSED 
Name: kex_input_kexinit; Comment: ARGSUSED 
Name: kex_start_rekex; Comment: Request key re-exchange, returns 0 on success or a ssherr.h error code otherwise. Must not be called if KEX is incomplete or in-progress. 
Name: send_error; Comment: Send a plaintext error message to the peer, suffixed by _r_n. Only used during banner exchange, and there only for the server. 
Name: kex_exchange_identification; Comment: Sends our identification string and waits for the peer's. Will block for up to timeout_ms (or indefinitely if timeout_ms <= 0). Returns on 0 success or a ssherr.h code on failure. 
Name: serial_cmp; Comment: Return equal if a and b overlap 
Name: revoked_certs_for_ca_key; Comment: Find the revoked_certs struct for a CA key. If allow_create is set then create a new one in the tree if one did not exist already. 
Name: plain_key_blob; Comment: Convert "key" to a public key blob without any certificate information 
Name: revoke_blob; Comment: Revoke a key blob. Ownership of blob is transferred to the tree 
Name: choose_next_state; Comment: Select the most compact section type to emit next in a KRL based on the current section type, the run length of contiguous revoked serial numbers and the gaps from the last and to the next revoked serial. Applies a mostly-accurate bit cost model to select the section type that will minimise the size of the resultant KRL. 
Name: revoked_certs_generate; Comment: Generate a KRL_SECTION_CERTIFICATES KRL section 
Name: ssh_krl_from_blob; Comment: Attempt to parse a KRL, checking its signature (if any) with sign_ca_keys. 
Name: is_cert_revoked; Comment: Checks certificate serial number and key ID revocation 
Name: is_key_revoked; Comment: Checks whether a given key/cert is revoked. Does not check its CA 
Name: log_init; Comment: Initialize the log. 
Name: log_redirect_stderr_to; Comment: redirect what would usually get written to stderr to specified file 
Name: login_login; Comment: login_login(struct logininfo *) - Record a login Call with a pointer to a struct logininfo initialised with login_init_entry() or login_alloc_entry() Returns: >0 if successful 0 on failure (will use OpenSSH's logging facilities for diagnostics) 
Name: login_logout; Comment: login_logout(struct logininfo *) - Record a logout Call as with login_login() Returns: >0 if successful 0 on failure (will use OpenSSH's logging facilities for diagnostics) 
Name: login_get_lastlog_time; Comment: login_get_lastlog_time(int) - Retrieve the last login time Retrieve the last login time for the given uid. Will try to use the system lastlog facilities if they are available, but will fall back to looking in wtmp/wtmpx if necessary Returns: 0 on failure, or if user has never logged in Time in seconds from the epoch if successful Useful preprocessor symbols: DISABLE_LASTLOG: If set, *never* even try to retrieve lastlog info USE_LASTLOG: If set, indicates the presence of system lastlog facilities. If this and DISABLE_LASTLOG are not set, try to retrieve lastlog information from wtmp/wtmpx. 
Name: login_get_lastlog; Comment: login_get_lastlog(struct logininfo *, int) - Retrieve a lastlog entry Retrieve a logininfo structure populated (only partially) with information from the system lastlog data, or from wtmp/wtmpx if no system lastlog information exists. Note this routine must be given a pre-allocated logininfo. Returns: >0: A pointer to your struct logininfo if successful 0 on failure (will use OpenSSH's logging facilities for diagnostics) 
Name: login_alloc_entry; Comment: login_alloc_entry(int, char*, char*, char*) - Allocate and initialise a logininfo structure This function creates a new struct logininfo, a data structure meant to carry the information required to portably record login info. Returns a pointer to a newly created struct logininfo. If memory allocation fails, the program halts. 
Name: login_free_entry; Comment: login_free_entry(struct logininfo *) - free struct memory 
Name: login_init_entry; Comment: login_init_entry(struct logininfo *, int, char*, char*, char*) - initialise a struct logininfo Populates a new struct logininfo, a data structure meant to carry the information required to portably record login info. Returns: 1 
Name: login_set_current_time; Comment: login_set_current_time(struct logininfo *) - set the current time Set the current time in a logininfo structure. This function is meant to eliminate the need to deal with system dependencies for time handling. 
Name: login_set_addr; Comment: copy a sockaddr_* into our logininfo 
Name: login_write; Comment: * ** login_write: Call low-level recording functions based on autoconf ** results *
Name: getlast_entry; Comment: take the uid in li and return the last login time 
Name: line_fullname; Comment: line_fullname(): add the leading '/dev/' if it doesn't exist make sure dst has enough space, if not just copy src (ugh) 
Name: line_stripname; Comment: line_stripname(): strip the leading '/dev' if it exists, return dst 
Name: line_abbrevname; Comment: line_abbrevname(): Return the abbreviated (usually four-character) form of the line (Just use the last <dstsize> characters of the full name.) NOTE: use strncpy because we do NOT necessarily want zero termination 
Name: set_utmp_time; Comment: build the utmp structure 
Name: set_utmpx_time; Comment: build the utmpx structure 
Name: utmp_write_direct; Comment: Write a utmp entry direct to the file This is a slightly modification of code in OpenBSD's login.c 
Name: utmpx_write_direct; Comment: write a utmp entry direct to the file 
Name: wtmp_write; Comment: Write a wtmp entry direct to the end of the file This is a slight modification of code in OpenBSD's logwtmp.c 
Name: wtmp_islogin; Comment: return true if this wtmp entry indicates a login 
Name: wtmpx_write; Comment: Write a wtmpx entry direct to the end of the file This is a slight modification of code in OpenBSD's logwtmp.c 
Name: wtmpx_islogin; Comment: Return true if this wtmpx entry indicates a login 
Name: lastlog_openseek; Comment: open the file (using filemode) and seek to the login entry 
Name: record_failed_login; Comment: Logs failed login attempts in _PATH_BTMP if that exists. The most common login failure is to give password instead of username. So the _PATH_BTMP file checked for the correct permission, so that only root can read it. 
Name: dump_logininfo; Comment: Dump a logininfo to stdout. Assumes a tab size of 8 chars. 
Name: showOptions; Comment: show which options got compiled in 
Name: mac_alg_list; Comment: Returns a list of supported MACs separated by the specified char. 
Name: match_pattern; Comment: Returns true if the given string matches the pattern (which may contain ? andas wildcards), and zero if it does not match. 
Name: match_pattern_list; Comment: Tries to match the string against the comma-separated sequence of subpatterns (each possibly preceded by ! to indicate negation). Returns -1 if negation matches, 1 if there is a positive match, 0 if there is no match at all. 
Name: match_usergroup_pattern_list; Comment: Match a list representing users or groups. 
Name: match_hostname; Comment: Tries to match the host name (which must be in all lowercase) against the comma-separated sequence of subpatterns (each possibly preceded by ! to indicate negation). Returns -1 if negation matches, 1 if there is a positive match, 0 if there is no match at all. 
Name: match_host_and_ip; Comment: returns 0 if we get a negative match for the hostname or the ip or if we get no match at all. returns -1 on error, or 1 on successful match. 
Name: match_user; Comment: Match user, user@host_or_ip, user@host_or_ip_list against pattern. If user, host and ipaddr are all NULL then validate pattern/ Returns -1 on invalid pattern, 0 on no match, 1 on match. 
Name: filter_list; Comment: Filter proposal using pattern-list filter. "denylist" determines sense of filter: non-zero indicates that items matching filter should be excluded. zero indicates that only items matching filter should be included. returns NULL on allocation error, otherwise caller must free result. 
Name: match_filter_denylist; Comment: Filters a comma-separated list of strings, excluding any entry matching the 'filter' pattern list. Caller must free returned string. 
Name: match_filter_allowlist; Comment: Filters a comma-separated list of strings, including only entries matching the 'filter' pattern list. Caller must free returned string. 
Name: chop; Comment: remove newline at end of string 
Name: rtrim; Comment: remove whitespace from end of string 
Name: set_nonblock; Comment: set/unset filedescriptor to non-blocking 
Name: set_nodelay; Comment: disable nagle on socket 
Name: set_reuseaddr; Comment: Allow local port reuse in TIME_WAIT 
Name: get_rdomain; Comment: Get/set routing domain 
Name: waitfd; Comment: Wait up to *timeoutp milliseconds for events on fd. Updates *timeoutp with time remaining. Returns 0 if fd ready or -1 on timeout or error (see errno). 
Name: waitrfd; Comment: Wait up to *timeoutp milliseconds for fd to be readable. Updates *timeoutp with time remaining. Returns 0 if fd ready or -1 on timeout or error (see errno). 
Name: timeout_connect; Comment: Attempt a non-blocking connect(2) to the specified address, waiting up to *timeoutp milliseconds for the connection to complete. If the timeout is <=0, then wait indefinitely. Returns 0 on success or -1 on failure. 
Name: strdelim_internal; Comment: return next token in configuration line 
Name: strdelim; Comment: Return next token in configuration line; splts on whitespace or asingle '=' character. 
Name: strdelimw; Comment: Return next token in configuration line; splts on whitespace only. 
Name: a2port; Comment: Convert ASCII string to TCP/IP port number. Port must be >=0 and <=65535. Return -1 if invalid. 
Name: convtime; Comment: Convert a time string into seconds; format isa sequence of: time[qualifier] Valid time qualifiers are: <none> seconds s|S seconds m|M minutes h|H hours d|D days w|W weeks Examples: 90m 90 minutes 1h30m 90 minutes 2d 2 days 1w 1 week Return -1 if time string is invalid. 
Name: put_host_port; Comment: Returns a standardized host+port identifier string. Caller must free returned string. 
Name: hpdelim2; Comment: Search for next delimiter between hostnames/addresses and ports. Argument may be modified (for termination). Returns *cp if parsing succeeds. *cp is set to the start of the next field, if one was found. The delimiter char, if present, is stored in delim. If this is the last field, *cp is set to NULL. 
Name: parse_user_host_path; Comment: Parse a [user@]host:[path] string. Caller must free returned user, host and path. Any of the pointer return arguments may be NULL (useful for syntax checking). If user was not specified then *userp will be set to NULL. If host was not specified then *hostp will be set to NULL. If path was not specified then *pathp will be set to ".". Returns 0 on success, -1 on failure. 
Name: parse_user_host_port; Comment: Parse a [user@]host[:port] string. Caller must free returned user and host. Any of the pointer return arguments may be NULL (useful for syntax checking). If user was not specified then *userp will be set to NULL. If port was not specified then *portp will be -1. Returns 0 on success, -1 on failure. 
Name: hexchar; Comment: Converts a two-byte hex string to decimal. Returns the decimal value or -1 for invalid input. 
Name: urldecode; Comment: Decode an url-encoded string. Returns a newly allocated string on success or NULL on failure. 
Name: parse_uri; Comment: Parse an (scp|ssh|sftp):[user@]host[:port][path] URI. See https:tools.ietf.orghtmldraft-ietf-secsh-scp-sftp-ssh-uri-04Either user or path may be url-encoded (but not host or port). Caller must free returned user, host and path. Any of the pointer return arguments may be NULL (useful for syntax checking) but the scheme must always be specified. If user was not specified then *userp will be set to NULL. If port was not specified then *portp will be -1. If path was not specified then *pathp will be set to NULL. Returns 0 on success, 1 if non-uri/wrong scheme, -1 on error/invalid uri. 
Name: addargs; Comment: function to assist building execv() arguments 
Name: tilde_expand; Comment: Expands tildes in the file name. Returns data allocated by xmalloc. Warning: this calls getpw*. 
Name: vdollar_percent_expand; Comment: Expand a string with a set of %[char] escapes andor ${ENVIRONMENT}substitutions. A number of escapes may be specified as (char *escape_chars, char *replacement) pairs. The list must be terminated by a NULL escape_char. Returns replaced string in memory allocated by xmalloc which the caller must free. 
Name: dollar_expand; Comment: Expand only environment variables. Note that although this function is variadic like the other similar functions, any such arguments will be unused. 
Name: percent_expand; Comment: Returns expanded string or NULL if a specified environment variable is not defined, or calls fatal if the string is invalid. 
Name: percent_dollar_expand; Comment: Returns expanded string or NULL if a specified environment variable is not defined, or calls fatal if the string is invalid. 
Name: xextendf; Comment: Extend string *sp by the specified format. If *sp is not NULL (or empty), then the separator 'sep' will be prepended before the formatted arguments. Extended strings are heap allocated. 
Name: bandwidth_limit; Comment: Callback from read/write loop to insert bandwidth-limiting delays 
Name: mktemp_proto; Comment: Make a template filename for mk[sd]temp() 
Name: strcmp_maybe_null; Comment: Compares two strings that maybe be NULL. Returns non-zero if strings are both NULL or are identical, returns zero otherwise. 
Name: forward_equals; Comment: Compare two forwards, returning non-zero if they are identical or zero otherwise. 
Name: daemonized; Comment: returns 1 if process is already daemonized, 0 otherwise 
Name: argv_split; Comment: Splits 's' into an argument vector. Handles quoted string and basic escape characters (__, _", _'). Caller must free the argument vector and its members. 
Name: argv_assemble; Comment: Reassemble an argument vector into a string, quoting and escaping as necessary. Caller must free returned string. 
Name: exited_cleanly; Comment: Returns 0 if pid exited cleanly, non-zero otherwise 
Name: safe_path; Comment: Check a given path for security. This is defined as all components of the path to the file must be owned by either the owner of of the file or root and no directories must be group or world writable. XXX Should any specific check be done for sym links ? Takes a file name, its stat information (preferably from fstat() to avoid races), the uid of the expected owner, their home directory and an error buffer plus max size as arguments. Returns 0 on success and -1 on failure 
Name: safe_path_fd; Comment: Version of safe_path() that accepts an open file descriptor to avoid races. Returns 0 on success and -1 on failure 
Name: child_set_env; Comment: Sets the value of the given variable in the environment. If the variable already exists, its value is overridden. 
Name: valid_domain; Comment: Check and optionally lowercase a domain name, also removes trailing '.' Returns 1 on success and 0 on failure, storing an error message in errstr. 
Name: valid_env_name; Comment: Verify that a environment variable name (not including initial '$') is valid; consisting of one or more alphanumeric or underscore characters only.Returns 1 on valid, 0 otherwise. 
Name: format_absolute_time; Comment: #define SSH_TIME_T_MAX LLONG_MAX 
Name: path_absolute; Comment: check if path is absolute 
Name: opt_flag; Comment: Match flag 'opt' in *optsp, and if allow_negate is set then also match 'no-opt'. Returns -1 if option not matched, 1 if option matches or 0 if negated option matches. If the option or negated option matches, then *optsp is updated to point to the first character after the option. 
Name: subprocess; Comment: Runs command in a subprocess with a minimal environment. Returns pid on success, 0 on failure. The child stdout and stderr maybe captured, left attached or sent to devnull depending on the contents of flags. "tag" is prepended to log messages. NB. "command" is only used for logging; the actual command executed isav[0]. 
Name: qfileout; Comment: print moduli out in consistent form, 
Name: sieve_large; Comment: ** Sieve p's and q's with small factors 
Name: gen_candidates; Comment: list candidates for Sophie-Germain primes (where q = (p-1)/2) to standard output. The list is checked against small known primes (less than 2**30). 
Name: prime_test; Comment: perform a Miller-Rabin primality test on the list of candidates (checking both q and p) The result is a list of so-call "safe" primes 
Name: monitor_permit; Comment: Specifies if a certain message is allowed at the moment 
Name: monitor_allowed_key; Comment: allowed key state 
Name: mm_answer_pwnamallow; Comment: Retrieves the password entry and also checks if the user is permitted 
Name: key_base_type_match; Comment: Check that the key type appears in the supplied pattern list, ignoring mismatches in the signature algorithm. (Signature algorithm checks are performed in the unprivileged authentication code). Returns 1 on success, 0 otherwise. 
Name: mm_answer_audit_event; Comment: Report that an audit event occurred 
Name: mm_get_keystate; Comment: This function requires careful sanity checking 
Name: monitor_openfds; Comment: XXX 
Name: mm_inform_authserv; Comment: Inform the privileged process about service and style 
Name: mm_auth_password; Comment: Do the password authentication 
Name: mm_sshkey_verify; Comment: This key verify needs to send the key type along, because the privileged parent makes the decision if the key is allowed for authentication. 
Name: mm_terminate; Comment: Request process termination 
Name: mux_master_session_cleanup_cb; Comment: ARGSUSED 
Name: mux_master_control_cleanup_cb; Comment: ARGSUSED 
Name: env_permitted; Comment: Check mux client environment variables before passing them to mux master. 
Name: mux_master_process_hello; Comment: Mux master protocol message handlers 
Name: reply_ok; Comment: Enqueue a "ok" response to the reply buffer 
Name: reply_error; Comment: Enqueue an error response to the reply buffer 
Name: mux_stdio_confirm; Comment: Callback on open confirmation in mux master for a mux stdio fwd session. 
Name: mux_master_read_cb; Comment: Channel callbacks fired on read/write from mux client fd 
Name: muxserver_listen; Comment: Prepare a mux master to listen on a Unix domain socket. 
Name: mux_session_confirm; Comment: Callback on open confirmation in mux master for a mux client session. 
Name: control_client_sighandler; Comment: Exit signal handler 
Name: control_client_sigrelay; Comment: Relay signal handler - used to pass some signals from mux client to mux master. 
Name: muxclient; Comment: Multiplex client main loop. 
Name: chan_rcvd_ieof; Comment: shared 
Name: chan_shutdown_write; Comment: helper 
Name: ssh_packet_is_rekeying; Comment: Returns nonzero if rekeying is in progress 
Name: ssh_packet_set_connection; Comment: Sets the descriptors used for communication. 
Name: ssh_packet_connection_is_on_socket; Comment: Returns 1 if remote host is connected via socket, 0 if not. 
Name: ssh_packet_set_nonblocking; Comment: Sets the connection into non-blocking mode. 
Name: ssh_packet_get_connection_in; Comment: Returns the socket used for reading. 
Name: ssh_packet_get_connection_out; Comment: Returns the descriptor used for writing. 
Name: ssh_remote_ipaddr; Comment: Returns the IP-address of the remote host as a string. The returned string must not be freed. 
Name: ssh_remote_port; Comment: Returns the port number of the remote host. 
Name: ssh_local_ipaddr; Comment: Returns the IP-address of the local host as a string. The returned string must not be freed. 
Name: ssh_local_port; Comment: Returns the port number of the local host. 
Name: ssh_packet_rdomain_in; Comment: Returns the routing domain of the input socket, or NULL if unavailable 
Name: ssh_packet_close_internal; Comment: Closes the connection and clears and frees internal data structures. 
Name: ssh_packet_set_protocol_flags; Comment: Sets remote side protocol flags. 
Name: ssh_packet_get_protocol_flags; Comment: Returns the remote protocol flags set earlier by the above function. 
Name: ssh_packet_init_compression; Comment: Starts packet compression from the next packet on in both directions. Level is compression level 1 (fastest) - 9 (slow, best) as in gzip. 
Name: compress_buffer; Comment: XXX remove need for separate compression buffer 
Name: ssh_packet_enable_delayed_compress; Comment: Delayed compression for SSH2 is enabled after authentication: This happens on the server side after a SSH2_MSG_USERAUTH_SUCCESS is sent, and on the client side after a SSH2_MSG_USERAUTH_SUCCESS is received. 
Name: ssh_packet_log_type; Comment: Used to mute debug logging for noisy packet types 
Name: ssh_packet_send2_wrapped; Comment: Finalize packet in SSH2 format (compress, mac, encrypt, enqueue) 
Name: ssh_packet_type_is_kex; Comment: returns non-zero if the specified packet type is usec by KEX 
Name: ssh_packet_read_seqnr; Comment: Waits until a packet has been received, and returns its type. Note that no other data is processed until this returns, so this function should not be used during the interactive session. 
Name: ssh_packet_read_expect; Comment: Waits until a packet has been received, verifies that its type matches that given, and gives a fatal error and exits if there is a mismatch. 
Name: ssh_packet_process_incoming; Comment: Buffers the given amount of input characters. This is intended to be used together with packet_read_poll. 
Name: ssh_packet_send_debug; Comment: Sends a diagnostic message from the server to the client. This message can be sent at any time (but not while constructing another message). The message is printed immediately, but only if the client is being executed in verbose mode. These messages are primarily intended to ease debugging authentication problems. The length of the formatted message must not exceed 1024 bytes. This will automatically call ssh_packet_write_wait. 
Name: sshpkt_vfatal; Comment: Pretty-print connection-terminating errors and exit. 
Name: ssh_packet_disconnect; Comment: Logs the error plus constructs and sends a disconnect packet, closes the connection, and exits. This function never returns. The error message should not contain a newline. The length of the formatted message must not exceed 1024 bytes. 
Name: ssh_packet_write_poll; Comment: Checks if there is any buffered output, and tries to write some of the output. 
Name: ssh_packet_write_wait; Comment: Calls packet_write_poll repeatedly until all pending output data has been written. 
Name: ssh_packet_have_data_to_write; Comment: Returns true if there is buffered data to write to the connection. 
Name: ssh_packet_not_very_much_data_to_write; Comment: Returns true if there is not too much data to write to the connection. 
Name: ssh_packet_set_interactive; Comment: Informs that the current session is interactive. Sets IP flags for that. 
Name: ssh_packet_is_interactive; Comment: Returns true if the current connection is interactive. 
Name: ssh_packet_set_postauth; Comment: Reset after_authentication and reset compression in post-auth privsep 
Name: kex_to_blob; Comment: turn kex into a blob for packet state serialization 
Name: newkeys_to_blob; Comment: turn key exchange results into a blob for packet state serialization 
Name: ssh_packet_get_state; Comment: serialize packet state into a blob 
Name: newkeys_from_blob; Comment: restore key exchange results from blob for packet state de-serialization 
Name: kex_from_blob; Comment: restore kex from blob for packet state de-serialization 
Name: ssh_packet_set_state; Comment: Restore packet state from content of blob 'm' (de-serialization). Note that 'm' will be partially consumed on parsing or any other errors. 
Name: sshpkt_put; Comment: put data to the outgoing packet 
Name: sshpkt_get; Comment: fetch data from the incoming packet 
Name: sshpkt_start; Comment: start a new packet 
Name: sshpkt_msg_ignore; Comment: 9.2. Ignored Data Message byte SSH_MSG_IGNORE string data All implementations MUST understand (and ignore) this message at any time (after receiving the protocol version). No implementation is required to send them. This message can be used as an additional protection measure against advanced traffic analysis techniques. 
Name: sshpkt_send; Comment: send it 
Name: sshpkt_add_padding; Comment: roundup current message to pad bytes 
Name: platform_sys_dir_uid; Comment: return 1 if the specified uid is a uid that may own a system directory otherwise 0. 
Name: platform_pledge_agent; Comment: Drop any fine-grained privileges that are not needed for post-startup operation of ssh-agent Should be as close as possible to pledge("stdio cpath unix id proc exec", ...) 
Name: platform_pledge_sftp_server; Comment: Drop any fine-grained privileges that are not needed for post-startup operation of sftp-server 
Name: platform_pledge_mux; Comment: Drop any fine-grained privileges that are not needed for the post-startup operation of the SSH client mux Should be as close as possible to pledge("stdio proc tty", ...) 
Name: platform_privileged_uidswap; Comment: return 1 if we are running with privilege to swap UIDs, 0 otherwise 
Name: platform_setusercontext; Comment: This gets called before switching UIDs, and is called even when sshd is not running as root. 
Name: platform_setusercontext_post_groups; Comment: This gets called after we've established the user's groups, and is only called if sshd is running as root. 
Name: sig_alarm; Comment: ARGSUSED
Name: sig_winch; Comment: ARGSUSED
Name: add_local_forward; Comment: Adds a local TCP/IP port forward to options. Never returns if there is an error. 
Name: add_remote_forward; Comment: Adds a remote TCP/IP port forward to options. Never returns if there is an error. 
Name: execute_in_shell; Comment: Execute a command in a shell. Return its exit status or -1 on abnormal exit. 
Name: match_cfg_line; Comment: Parse and execute a Match directive. 
Name: rm_env; Comment: Remove environment variable by pattern 
Name: parse_token; Comment: Returns the number of the token pointed to by cp or oBadOption. 
Name: process_config_line; Comment: Processes a single option line as used in the configuration files. This only sets those values that have not already been set. 
Name: read_config_file; Comment: Reads the config file and modifies the options accordingly. Options should already be initialized before this call. This never returns if there is an error. If the file does not exist, this returns 0. 
Name: option_clear_or_none; Comment: Returns 1 if a string option is unset or set to "none" or 0 otherwise. 
Name: initialize_options; Comment: Initializes options to special values that indicate that they have not yet been set. Read_config_file will only set options with this value. Options are processed in the following order: command line, user config file, system config file. Last, fill_default_options is called. 
Name: fill_default_options_for_canonicalization; Comment: A petite version of fill_default_options() that just fills the options needed for hostname canonicalization to proceed. 
Name: fill_default_options; Comment: Called after processing other sources of option data, this fills those options for which no value has been specified with their default values. 
Name: parse_fwd_field; Comment: parse_fwd_field parses the next field in a port forwarding specification. sets fwd to the parsed field and advances p past the colon or sets it to NULL at end of string. returns 0 on success, else non-zero. 
Name: parse_forward; Comment: parse_forward parses a string containing a port forwarding specification of the form: dynamicfwd == 0 *_[listenhost:]listenport|listenpath:connecthost:connectport|connectpath *_listenpath:connectpath dynamicfwd == 1 *_[listenhost:]listenport returns number of arguments parsed or zero on error 
Name: fmt_multistate_int; Comment: XXX the following is a near-vebatim copy from servconf.c; refactor 
Name: read_passphrase; Comment: Reads a passphrase from /dev/tty with echo turned off/on. Returns the passphrase (allocated with xmalloc). Exits if EOF is encountered. If RP_ALLOW_STDIN is set, the passphrase will be read from stdin if no tty is or askpass program is available 
Name: reduce_add_sub; Comment: Reduce coefficients of r before calling reduce_add_sub 
Name: barrett_reduce; Comment: Reduce coefficients of x before calling barrett_reduce 
Name: killchild; Comment: proto for sftp-glob.c 
Name: do_cmd; Comment: This function executes the given command as the specified user on the given host. This returns < 0 if execution fails, and >= 0 otherwise. This assigns the input and output file descriptors on success. 
Name: do_cmd2; Comment: This function executes a command similar to do_cmd(), but expects the input and output descriptors to be setup by a previous call to do_cmd(). This way the input and output of two commands can be connected. 
Name: scpio; Comment: Callback from atomicio6 to update progress meter and limit bandwidth 
Name: append; Comment: Appends a string to an array; returns 0 on success, -1 on alloc failure 
Name: find_brace; Comment: Finds the start and end of the first brace pair in the pattern. returns 0 on success or -1 for invalid patterns. 
Name: emit_expansion; Comment: Assembles and records a successfully-expanded pattern, returns -1 on alloc failure. 
Name: brace_expand_one; Comment: Expand the first encountered brace in pattern, appending the expanded patterns it yielded to the *patternsp array. Returns 0 on success or -1 on allocation failure. Signals whether expansion was performed via *expanded and whether pattern was invalid via *invalid. 
Name: brace_expand; Comment: Expand braces from pattern. Returns 0 on success, -1 on failure 
Name: prepare_remote_path; Comment: Prepare remote path, handling ~ by assuming cwd is the homedir 
Name: note_err; Comment: Notes a sink error for sending at the end of a file transfer. Returns 0 if no error has been noted or -1 otherwise. Use note_err(NULL) to flush any active error at the end of the transfer. 
Name: initialize_server_options; Comment: Initializes the server options to their default values. 
Name: lookup_opcode_name; Comment: Returns an opcode name from its number 
Name: parse_token; Comment: Returns the number of the token pointed to by cp or sBadOption. 
Name: valid_rdomain; Comment: Returns nonzero if the routing domain name is valid 
Name: queue_listen_addr; Comment: Queue a ListenAddress to be processed once we have all of the Ports and AddressFamily options. 
Name: process_queued_listen_addrs; Comment: Process queued (text) ListenAddress entries. 
Name: process_permitopen_list; Comment: Inform channels layer of permitopen options for a single forwarding direction (local/remote). 
Name: process_permitopen; Comment: Inform channels layer of permitopen options from configuration. 
Name: match_cfg_line_group; Comment: The strategy for the Match blocks is that the config file is parsed twice. The first time is at startup. activep is initialized to 1 and the directives in the global context are processed and acted on. Hitting a Match directive unsets activep and the directives inside the block are checked for syntax only. The second time is after a connection has been established but before authentication. activep is initialized to 2 and global config directives are ignored since they have already been processed. If the criteria in a Match block is met, activep is set and the subsequent directives processed and actioned until EOF or another Match block unsets it. Any options set are copied into the main server config. Potential additions/improvements: - Add Match support for pre-kex directives, eg. Ciphers. - Add a Tag directive (idea from David Leonard) ala pf, eg: *_Match Address 192.168.0.* *__Tag trusted *_Match Group wheel *__Tag trusted *_Match Tag trusted *__AllowTcpForwarding yes *__GatewayPorts clientspecified *__[...] - Add a PermittedChannelRequests directive *_Match Group shell *__PermittedChannelRequests session,forwarded-tcpip 
Name: match_cfg_line; Comment: All of the attributes on a single Match line are ANDed together, so we need to check every attribute and set the result to zero if any attribute does not match. 
Name: load_server_config; Comment: Reads the server configuration file. 
Name: copy_set_server_options; Comment: Copy any supported values that are set. If the preauth flag is set, we do not bother copying the string or array values that are not used pre-authentication, because any that we do use must be explicitly sent in mm_getpwnamallow(). 
Name: bind_permitted; Comment: returns 1 if bind to specified port by specified user is permitted 
Name: sigchld_handler; Comment: ARGSUSED
Name: sigterm_handler; Comment: ARGSUSED
Name: wait_until_can_do_something; Comment: Sleep in pselect() until we can do something. This will initialize the pselect masks. Upon return, the masks will indicate which descriptors have data or can accept data. Optionally, a maximum time can be specified for the duration of the wait (0 = infinite). 
Name: process_input; Comment: Processes input from the client and the program. Input data is stored in buffers and processed later. 
Name: process_output; Comment: Sends data from internal buffers to client program stdin. 
Name: auth_sock_cleanup_proc; Comment: removes the agent forwarding socket 
Name: xauth_valid_string; Comment: Check untrusted xauth strings for metacharacters 
Name: do_exec_no_pty; Comment: This is called to fork and execute a command when we have no tty. This will call do_child from the child, and server_loop from the parent after setting up file descriptors and such. 
Name: do_exec_pty; Comment: This is called to fork and execute a command when we have a tty. This will call do_child from the child, and server_loop from the parent after setting up file descriptors, controlling tty, updating wtmp, utmp, lastlog, and other such operations. 
Name: do_exec; Comment: This is called to fork and execute a command. If another command is to be forced, execute that instead. 
Name: do_login; Comment: administrative, login(1)-like work 
Name: do_motd; Comment: Display the message of the day. 
Name: check_quietlogin; Comment: Check for quiet login, either .hushlogin or command given. 
Name: read_environment_file; Comment: Reads environment variables from the given file and addsoverrides them into the environment. If the file does not exist, this does nothing. Otherwise, it must consist of empty lines, comments (line starts with '#')and assignments of the form name=value. No other forms are allowed. If allowlist is not NULL, then it is interpreted as a pattern list and only variable names that match it will be accepted. 
Name: child_get_env; Comment: Return named variable from specified environment, or NULL if not present. 
Name: read_etc_default_login; Comment: Read /etc/default/login. We pick up the PATH (or SUPATH for root) and UMASK. 
Name: do_rc_files; Comment: Run $HOME/.ssh/rc, /etc/ssh/sshrc, or xauth (whichever is found first in this order). 
Name: safely_chroot; Comment: Chroot into a directory after checking it for safety: all path components must be root-owned directories with strict permissions. 
Name: do_setusercontext; Comment: Set login name, uid, gid, and groups. 
Name: name2sig; Comment: Conversion of signals from ssh channel request names. Subset of signals from RFC 4254 section 6.10C, with SIGINFO as local extension. 
Name: session_pty_cleanup2; Comment: Function to perform pty cleanup. Also called if we get aborted abnormally (e.g., due to a dropped connection). 
Name: session_close_by_channel; Comment: this is called when a channel dies before the session 'child' itself dies 
Name: session_get_remote_name_or_ip; Comment: Return a name for the remote host that fits inside utmp_size 
Name: sftpio; Comment: ARGSUSED 
Name: get_decode_stat; Comment: XXX returing &static is error-prone. Refactor to fill *Attrib argument 
Name: do_realpath_expand; Comment: Implements both the realpath and expand-path operations 
Name: globpath_is_dir; Comment: Check whether path returned from glob(..., GLOB_MARK, ...) is a directory 
Name: attrib_clear; Comment: Clear contents of attributes structure 
Name: stat_to_attrib; Comment: Convert from struct stat to filexfer attribs 
Name: attrib_to_stat; Comment: Convert from filexfer attribs to struct stat 
Name: decode_attrib; Comment: Decode attributes in buffer 
Name: encode_attrib; Comment: Encode attributes to buffer 
Name: fx2txt; Comment: Convert from SSH2_FX_ status to text error message 
Name: ls_file; Comment: drwxr-xr-x 5 markus markus 1024 Jan 13 18:39 .ssh 
Name: sftp_realpath; Comment: NoneFind the real name of path, by removing all ".", ".." and symlink components. Returns (resolved) on success, or (NULL) on failure, in which case the path which caused trouble is left in (resolved). 
Name: send_msg; Comment: send replies 
Name: compose_extension; Comment: Prepare SSH2_FXP_VERSION extension advertisement for a single extension. The extension is checked for permission prior to advertisment. 
Name: process_init; Comment: parse incoming 
Name: process; Comment: stolen from ssh-agent 
Name: sftp_server_cleanup_exit; Comment: Cleanup handler that logs active handles upon normal exit 
Name: killchild; Comment: ARGSUSED 
Name: suspchild; Comment: ARGSUSED 
Name: cmd_interrupt; Comment: ARGSUSED 
Name: read_interrupt; Comment: ARGSUSED 
Name: path_strip; Comment: Strip one path (usually the pwd) from the start of another 
Name: do_ls_dir; Comment: sftp ls.1 replacement for directories 
Name: do_globbed_ls; Comment: sftp ls.1 replacement which handles path globs 
Name: undo_glob_escape; Comment: Undo escaping of glob sequences in place. Used to undo extra escaping applied in makeargv() when the string is destined for a function that does not glob it. 
Name: complete_display; Comment: Display entries in 'list' after skipping the first 'len' chars 
Name: complete_ambiguous; Comment: Given a "list" of words that begin with a common prefix of "word", attempt to find an autocompletion to extends "word" by the next characters common to all entries in "list". 
Name: complete_cmd_parse; Comment: Autocomplete a sftp command 
Name: complete_is_remote; Comment: Determine whether a particular sftp command's arguments (if any) represent local or remote files. 
Name: complete_match; Comment: Autocomplete a filename "file" 
Name: complete; Comment: tab-completion hook function, called via libedit 
Name: sha256_mem; Comment: Calculate SHA256(m) 
Name: sk_try; Comment: Check if the specified key handle exists on a given sk. 
Name: pack_public_key_ecdsa; Comment: The key returned via fido_cred_pubkey_ptr() is in affine coordinates, but the API expects a SEC1 octet string. 
Name: check_sign_load_resident_options; Comment: Checks sk_options for sk_sign() and sk_load_resident_keys() 
Name: crypto_sort_int32; Comment: from supercop-20201130/crypto_sort/int32/portable4/sort.c 
Name: crypto_sort_uint32; Comment: can save time by integrating xor loops with int32_sort 
Name: uint32_divmod_uint14; Comment: CPU division instruction typically takes time depending on x. This software is designed to take time independent of x. Time still varies depending on m; user must ensure that m is constant.Time also varies on CPUs where multiplication is variable-time. There could be more CPU issues. There could also be compiler issues. 
Name: int32_divmod_uint14; Comment: from supercop-20201130/crypto_kem/sntrup761/ref/int32.c 
Name: Decode; Comment: from supercop-20201130/crypto_kem/sntrup761/ref/Decode.c 
Name: Encode; Comment: 0 <= R[i] < M[i] < 16384 
Name: int16_nonzero_mask; Comment: return -1 if x!=0; else return 0 
Name: int16_negative_mask; Comment: return -1 if x<0; otherwise return 0 
Name: F3_freeze; Comment: x must not be close to top int16 
Name: Fq_freeze; Comment: x must not be close to top int32 
Name: Weightw_mask; Comment: 0 if Weightw_is(r), else -1 
Name: R3_fromRq; Comment: R3_fromR(R_fromRq(r)) 
Name: R3_mult; Comment: h = f*g in the ring R3 
Name: R3_recip; Comment: returns 0 if recip succeeded; else -1 
Name: Rq_mult_small; Comment: h = f*g in the ring Rq 
Name: Rq_mult3; Comment: h = 3f in Rq 
Name: Rq_recip3; Comment: returns 0 if recip succeeded; else -1 
Name: Round; Comment: ----- rounded polynomials mod q 
Name: Short_fromlist; Comment: ----- sorting to generate short polynomial 
Name: Hash_prefix; Comment: e.g., b = 0 means out = Hash0(in) 
Name: urandom32; Comment: ----- higher-level randomness 
Name: KeyGen; Comment: h,(f,ginv) = KeyGen() 
Name: Encrypt; Comment: c = Encrypt(r,h) 
Name: Decrypt; Comment: r = Decrypt(c,(f,ginv)) 
Name: KeyGen; Comment: (G,A),a = KeyGen(G); leaves G unchanged 
Name: Encrypt; Comment: B,T = Encrypt(r,(G,A),b) 
Name: Decrypt; Comment: r = Decrypt((B,T),a) 
Name: Inputs_encode; Comment: passed by reference 
Name: Generator; Comment: G = Generator(k) 
Name: HashShort; Comment: out = HashShort(r) 
Name: XKeyGen; Comment: (S,A),a = XKeyGen() 
Name: XEncrypt; Comment: B,T = XEncrypt(r,(S,A)) 
Name: Small_encode; Comment: these are the only functions that rely on p mod 4 = 1 
Name: Rounded_encode; Comment: ----- encoding rounded polynomials 
Name: ZKeyGen; Comment: pk,sk = ZKeyGen() 
Name: ZEncrypt; Comment: C = ZEncrypt(r,pk) 
Name: ZDecrypt; Comment: r = ZDecrypt(C,sk) 
Name: ZEncrypt; Comment: c = ZEncrypt(r,pk) 
Name: HashConfirm; Comment: h = HashConfirm(r,pk,cache); cache is Hash4(pk) 
Name: HashSession; Comment: k = HashSession(b,y,z) 
Name: KEM_KeyGen; Comment: pk,sk = KEM_KeyGen() 
Name: Hide; Comment: c,r_enc = Hide(r,pk,cache); cache is Hash4(pk) 
Name: Encap; Comment: c,k = Encap(pk) 
Name: Ciphertexts_diff_mask; Comment: 0 if matching ciphertext+confirm, else -1 
Name: Decap; Comment: k = Decap(c,sk) 
Name: crypto_kem_sntrup761_keypair; Comment: ----- crypto_kem API 
Name: srclimit_check_allow; Comment: returns 1 if connection allowed, 0 if not allowed. 
Name: delete_all; Comment: Send a request to remove all identities. 
Name: lookup_identity; Comment: return matching private key for given public key 
Name: confirm_key; Comment: Check confirmation of keysign request 
Name: process_request_identities; Comment: send list of supported public keys to 'client' 
Name: parse_userauth_request; Comment: Attempt to parse the contents of a buffer as a SSH publickey userauth request, checking its contents for consistency and matching the embedded key against the one that is being used for signing. Note: does not modify msg buffer. Optionally extract the username and session ID from the request. 
Name: parse_sshsig_request; Comment: Attempt to parse the contents of a buffer as a SSHSIG signature request. Note: does not modify buffer. 
Name: check_websafe_message_contents; Comment: This function inspects a message to be signed by a FIDO key that has a web-like application string (i.e. one that does not begin with "ssh:". It checks that the message is one of those expected for SSH operations (pubkey userauth, sshsig, CA key signing) to exclude signing challenges for the web. 
Name: process_sign_request2; Comment: ssh2 only 
Name: process_remove_identity; Comment: shared 
Name: reaper; Comment: removes expired keys and returns number of seconds until the next expiry 
Name: process_lock_agent; Comment: XXX todo: encrypt sensitive data with passphrase 
Name: process_message; Comment: dispatch incoming message. returns 1 on success, 0 for incomplete messages or -1 on error. 
Name: cleanup_handler; Comment: ARGSUSED
Name: ssh_ecdsa_sk_verify; Comment: ARGSUSED 
Name: webauthn_check_prepare_hash; Comment: Check FIDO/W3C webauthn signatures clientData field against the expected format and prepare a hash of it for use in signature verification. webauthn signatures do not sign the hash of the message directly, but instead sign a JSON-like "clientData" wrapper structure that contains the message hash along with a other information. Fortunately this structure has a fixed format so it is possible to verify that the hash of the signed message is present within the clientData structure without needing to implement any JSON parsing. 
Name: ssh_ecdsa_sign; Comment: ARGSUSED 
Name: ssh_ecdsa_verify; Comment: ARGSUSED 
Name: confirm_overwrite; Comment: Checks whether a file exists and, if so, asks the user whether they wish to overwrite it. Returns nonzero if the file does not already exist or if the user agrees to overwrite, or zero otherwise. 
Name: buffer_get_bignum_bits; Comment: This is almost exactly the bignum1 encoding, but with 32 bit for length instead of 16. 
Name: do_change_passphrase; Comment: Perform changing a passphrase. The argument is the passwd structure for the current user. 
Name: do_print_resource_record; Comment: Print the SSHFP RR. 
Name: do_change_comment; Comment: Change the comment of a private key file. 
Name: cert_ext_cmp; Comment: qsort(3) comparison function for certificate extensions 
Name: agent_signer; Comment: Signer for sshkey_certify_custom that uses the agent 
Name: main; Comment: Main program for key management. 
Name: xstrsep; Comment: This is an strsep function that returns a null field for adjacent separators. This is the same as the 4.4BSD strsep, but different from the one in the GNU libc. 
Name: strnnsep; Comment: Get the next non-null token (like GNU strsep). Strsep() will return a null token for two adjacent separators, so we may have to loop. 
Name: wrap_key; Comment: redirect private key crypto operations to the ssh-pkcs11-helper 
Name: lookup_key; Comment: lookup matching 'private' key 
Name: pkcs11_provider_finalize; Comment: finalize a provider shared library, it's no longer usable. however, there might still be keys referencing this provider, so the actual freeing of memory is handled by pkcs11_provider_unref(). this is called when a provider gets unregistered. 
Name: pkcs11_provider_unref; Comment: remove a reference to the provider. called when a key gets destroyed or when the provider is unregistered. 
Name: pkcs11_terminate; Comment: unregister all providers, keys might still point to the providers 
Name: pkcs11_provider_lookup; Comment: lookup provider by name 
Name: pkcs11_del_provider; Comment: unregister provider by name 
Name: pkcs11_k11_free; Comment: release a wrapped object 
Name: pkcs11_find; Comment: find a single 'obj' for given attributes 
Name: pkcs11_rsa_private_encrypt; Comment: openssl callback doing the actual signing operation 
Name: pkcs11_rsa_wrap; Comment: redirect private key operations for rsa key to pkcs11 token 
Name: ecdsa_do_sign; Comment: openssl callback doing the actual signing operation 
Name: rmspace; Comment: remove trailing spaces 
Name: pkcs11_open_session; Comment: open a pkcs11 session and login if required. if pin == NULL we delay login until key use 
Name: pkcs11_fetch_certs; Comment: lookup certificates for token in slot identified by slotidx, add 'wrapped' public keys to the 'keysp' array and increment nkeys. keysp points to an (possibly empty) array with *nkeys keys. 
Name: pkcs11_fetch_keys; Comment: lookup public keys for token in slot identified by slotidx, add 'wrapped' public keys to the 'keysp' array and increment nkeys. keysp points to an (possibly empty) array with *nkeys keys. 
Name: pkcs11_register_provider; Comment: register a new provider, fails if provider already exists. if keyp is provided, fetch keys. 
Name: pkcs11_add_provider; Comment: register a new provider and get number of keys hold by the token, fails if provider already exists 
Name: rsa_hash_id_from_ident; Comment: Returns the hash algorithm ID for a given algorithm identifier as used inside the signature blob, 
Name: rsa_hash_id_from_keyname; Comment: Return the hash algorithm ID for the specified key name. This includes all the cases of rsa_hash_id_from_ident() but also the certificate key types. 
Name: ssh_rsa_sign; Comment: RSASSA-PKCS1-v1_5 (PKCS #1 v2.0 signature) with SHA1 
Name: start_helper; Comment: #define DEBUG_SK 1 
Name: null_empty; Comment: If the specified string is zero length, then free it and replace with NULL 
Name: sshsk_ecdsa_assemble; Comment: Assemble key from response 
Name: usage; Comment: Prints a help message to the user. This function never returns. 
Name: tilde_expand_paths; Comment: ~/ expand a list of paths. NB. assumes path[n] is heap-allocated. 
Name: default_client_percent_expand; Comment: Expands the set of percent_expand options used by the majority of keywords in the client that support percent expansion. Caller must free returned string. 
Name: default_client_percent_dollar_expand; Comment: Expands the set of percent_expand options used by the majority of keywords AND perform environment variable substitution. Caller must free returned string. 
Name: resolve_host; Comment: Attempt to resolve a host name / port to a set of addresses and optionally return any CNAMEs encountered along the way. Returns NULL on failure. NB. this function must operate with a options having undefined members. 
Name: is_addr_fast; Comment: Returns non-zero if name can only be an address and not a hostname 
Name: is_addr; Comment: Returns non-zero if name represents a valid, single address 
Name: resolve_addr; Comment: Attempt to resolve a numeric host address / port to a single address. Returns a canonical address string. Returns NULL on failure. NB. this function must operate with a options having undefined members. 
Name: check_follow_cname; Comment: Check whether the cname is a permitted replacement for the hostname and perform the replacement if it is. NB. this function must operate with a options having undefined members. 
Name: resolve_canonicalize; Comment: Attempt to resolve the supplied hostname after applying the user's canonicalization rules. Returns the address list for the host or NULL if no name was found after canonicalization. NB. this function must operate with a options having undefined members. 
Name: check_load; Comment: Check the result of hostkey loading, ignoring some errors and fatal()ing for others. 
Name: process_config_files; Comment: Read per-user configuration file. Ignore the system wide config file if the user specifies a config file on the command line. 
Name: set_addrinfo_port; Comment: Rewrite the port number in an addrinfo list of addresses 
Name: main; Comment: Main program for the ssh client. 
Name: fork_postauth; Comment: Do fork() after authentication. Used by "ssh -f" 
Name: ssh_confirm_remote_forward; Comment: Callback for remote forward global requests 
Name: ssh_session2_open; Comment: open new channel for a session 
Name: load_public_identity_files; Comment: Loads all IdentityFile and CertificateFile keys 
Name: sshbuf_load_fd; Comment: Load a file from a fd into a buffer 
Name: expand_proxy_command; Comment: Expand a proxy command 
Name: ssh_proxy_fdpass_connect; Comment: Connect to the given ssh server using a proxy command that passes a a connected fd back to us. 
Name: ssh_proxy_connect; Comment: Connect to the given ssh server using a proxy command. 
Name: check_ifaddrs; Comment: Search a interface address list (returned from getifaddrs(3)) for an address that matches the desired address family on the specified interface. Returns 0 and fills in *resultp and *rlenp on success. Returns -1 on failure. 
Name: ssh_create_socket; Comment: Creates a socket for use as the ssh connection. 
Name: ssh_connect_direct; Comment: Opens a TCP/IP connection to the remote server on the given host. The address of the remote host will be returned in hostaddr. If port is 0, the default port will be used. Connection_attempts specifies the maximum number of tries (one per second). If proxy_command is non-NULL, it specifies the command (with %h and %p substituted for host and port, respectively) to use to contact the daemon. 
Name: confirm; Comment: defaults to 'no' 
Name: get_hostfile_hostname_ipaddr; Comment: Prepare the hostname and ip address strings that are used to lookup host keys in known_hosts files. These may have a port number appended. 
Name: path_in_hostfiles; Comment: returns non-zero if path appears in hostfiles, or 0 if not. 
Name: try_tilde_unexpand; Comment: Try to replace home directory prefix (per $HOME) with a ~/ sequence 
Name: hostkeys_find_by_key; Comment: Find 'key' in known hosts file(s) that do not match host/ip. Used to display also-known-as information for previously-unseen hostkeys. 
Name: other_hostkeys_message; Comment: Maximum number of names to list 
Name: verify_host_key; Comment: returns 0 if key verifies or -1 if key does NOT verify 
Name: ssh_login; Comment: Starts a dialog with the server, and authenticates the current user on the server. This does not need any extra privileges. The basic connection to the server must already have been established before this is called. If login fails, this function prints an error and never returns. This function does not require super-user privileges. 
Name: show_other_keys; Comment: print all known host keys for a given host, but skip keys of given type 
Name: ssh_local_cmd; Comment: Execute a local command 
Name: first_alg; Comment: Returns the first item from a comma-separated algorithm list 
Name: input_userauth_service_accept; Comment: ARGSUSED 
Name: input_userauth_ext_info; Comment: ARGSUSED 
Name: input_userauth_error; Comment: ARGSUSED 
Name: input_userauth_banner; Comment: ARGSUSED 
Name: input_userauth_success; Comment: ARGSUSED 
Name: input_userauth_failure; Comment: ARGSUSED 
Name: format_identity; Comment: Format an identity for logging including filename, key type, fingerprint and location (agent, etc.). Caller must free. 
Name: input_userauth_pk_ok; Comment: ARGSUSED 
Name: input_gssapi_response; Comment: ARGSUSED 
Name: input_gssapi_token; Comment: ARGSUSED 
Name: input_gssapi_errtok; Comment: ARGSUSED 
Name: input_gssapi_error; Comment: ARGSUSED 
Name: input_userauth_passwd_changereq; Comment: ARGSUSED 
Name: key_sig_algorithm; Comment: Select an algorithm for publickey signatures. Returns algorithm (caller must free) or NULL if no mutual algorithm found. Call with ssh==NULL to ignore server-sig-algs extension list and only attempt with the key's base signature type. 
Name: pubkey_prepare; Comment: try keys in the following order: *_1. certificates listed in the config file *_2. other input certificates *_3. agent keys that are found in the config file *_4. other agent keys *_5. keys that are only listed in the config file 
Name: userauth_kbdint; Comment: Send userauth request message specifying keyboard-interactive method. 
Name: input_userauth_info_req; Comment: parse INFO_REQUEST, prompt user and send INFO_RESPONSE 
Name: authmethod_is_enabled; Comment: given auth method name, if configurable options permit this method fill in auth_ident field and return true, otherwise return false. 
Name: authmethod_get; Comment: Given the authentication method list sent by the server, return the next method we should try. If the server initially sends a nil list, use a built-in default list. 
Name: close_listen_socks; Comment: Close all listening sockets 
Name: sighup_handler; Comment: ARGSUSED
Name: sighup_restart; Comment: Called from the main program after receiving SIGHUP. Restarts the server. 
Name: main_sigchld_handler; Comment: ARGSUSED
Name: grace_alarm_handler; Comment: ARGSUSED
Name: destroy_sensitive_data; Comment: Destroy the host and server keys. They will no longer be needed. 
Name: demote_sensitive_data; Comment: Demote private to public keys for network child 
Name: notify_hostkeys; Comment: Inform the client of all hostkeys 
Name: should_drop_connection; Comment: returns 1 if connection should be dropped, 0 otherwise. dropping starts at connection #max_startups_begin with a probabilityof (max_startups_rate/100). the probability increases linearly until all connections are dropped for startups > max_startups 
Name: drop_connection; Comment: Check whether connection should be accepted by MaxStartups. Returns 0 if the connection is accepted. If the connection is refused, returns 1 and attempts to send notification to client. Logs when the MaxStartups condition is entered or exited, and periodically while in that state. 
Name: server_accept_inetd; Comment: Accept a connection from inetd 
Name: listen_on_addrs; Comment: Listen for TCP connections 
Name: server_accept_loop; Comment: The main TCP accept loop. Note that, for the non-debug case, returns from this function are in a forked subprocess. 
Name: check_ip_options; Comment: If IP options are supported, make sure there are none (log and return an error if any are found). Basically we are worried about source routing; it can be used to pretend you are somebody(ip-address) you are not. That itself may be "almost acceptable" under certain circumstances, but rhosts authentication is useless if source routing is accepted. Notice also that if we just dropped source routing here, the other side could use IP spoofing to do rest of the interaction and could still bypass security. So we exit here if we detect any IP options. 
Name: set_process_rdomain; Comment: Set the routing domain for this process 
Name: main; Comment: Main program for the daemon. 
Name: do_ssh2_kex; Comment: SSH2 key exchange 
Name: cleanup_exit; Comment: server specific fatal cleanup 
Name: sshkey_type_plain; Comment: Return the cert-less equivalent to a certified key type 
Name: sshkey_curve_name_to_nid; Comment: XXX: these are really begging for a table-driven approach 
Name: sshkey_equal_public; Comment: Compare public portions of key only, allowing comparisons between certificates and plain keys too. 
Name: sshkey_read; Comment: XXX this can now be made const char
Name: sshkey_check_cert_sigtype; Comment: Checks whether a certificate's signature type is allowed. Returns 0 (success) if the certificate signature type appears in the "allowed" pattern-list, or the key is not a certificate to begin with. Otherwise returns a ssherr.h code. 
Name: sshkey_sigalg_by_name; Comment: Returns the expected signature algorithm for a given public key algorithm. 
Name: sshkey_check_sigtype; Comment: Verifies that the signature algorithm appearing inside the signature blob matches that which was requested. 
Name: sshkey_verify; Comment: ssh_key_verify returns 0 for a correct signature and < 0 on error. If "alg" specified, then the signature must use that algorithm. 
Name: sshkey_to_certified; Comment: Convert a plain key to their _CERT equivalent 
Name: sshkey_drop_cert; Comment: Convert a certificate to its raw key equivalent 
Name: sshkey_certify_custom; Comment: Sign a certified key, (re-)generating the signed certblob. 
Name: private2_check_padding; Comment: Check deterministic padding after private key 
Name: sshkey_private_to_blob_pem_pkcs8; Comment: convert SSH v2 key to PEM or PKCS#8 format 
Name: sshkey_private_to_fileblob; Comment: Serialise "key" to buffer "blob" 
Name: convert_libcrypto_error; Comment: Translate OpenSSL error codes to determine whether passphrase is required/incorrect. 
Name: sshkey_private_serialize_maxsign; Comment: serialize the key with the current state and forward the state maxsign times. 
Name: get_last_login_time; Comment: Returns the time when the user last logged in. Returns 0 if the information is not available. This must be called before record_login. The host the user logged in from will be returned in buf. 
Name: store_lastlog_message; Comment: Generate and store last login message. This must be done before login_login() is called and lastlog is updated. 
Name: record_login; Comment: Records that the user has logged in. I wish these parts of operating systems were more standardized. 
Name: record_logout; Comment: Records that the user has logged out. 
Name: pty_allocate; Comment: Allocates and opens a pty. Returns 0 if no pty could be allocated, or nonzero if a pty was successfully allocated. On success, open file descriptors for the pty and tty sides and the name of the tty side are returned (the buffer must be able to hold at least 64 characters). 
Name: pty_release; Comment: Releases the tty. Its ownership is returned to root, and permissions to 0666. 
Name: pty_make_controlling_tty; Comment: Makes the tty the process's controlling tty and sets it to sane modes. 
Name: pty_change_window_size; Comment: Changes the window size associated with the pty. 
Name: disconnect_controlling_tty; Comment: Disconnect from the controlling tty. 
Name: sshsig_parse_preamble; Comment: Check preamble and version. 
Name: ssh_init; Comment: API 
Name: ssh_add_hostkey; Comment: Returns < 0 on error, 0 otherwise 
Name: _ssh_read_banner; Comment: Read other side's version identification. 
Name: _ssh_send_banner; Comment: Send our own protocol version identification. 
Name: _ssh_order_hostkeyalgs; Comment: offer hostkey algorithms in kexinit depending on registered keys 
Name: speed_to_baud; Comment: Converts POSIX speed_t to a baud rate. The values of the constants for speed_t are not themselves portable. 
Name: baud_to_speed; Comment: Converts a numeric baud rate to a POSIX speed_t. 
Name: special_char_encode; Comment: Encode a special character into SSH line format. 
Name: special_char_decode; Comment: Decode a special character from SSH line format. 
Name: ssh_tty_make_modes; Comment: Encodes terminal modes for the terminal referenced by fd or tiop in a portable manner, and appends the modes to a packet being constructed. 
Name: ssh_tty_parse_modes; Comment: Decodes terminal modes for the terminal referenced by fd in a portable manner from a packet being read. 
Name: temporarily_use_uid; Comment: Temporarily changes to the given uid. If the effective user id is not root, this does nothing. This call cannot be nested. 
Name: restore_uid; Comment: Restores to the original (privileged) uid. 
Name: permanently_set_uid; Comment: Permanently sets all uids to the given uid. This cannot be called while temporarily_use_uid is effective. 
Name: kdf; Comment: The user-supplied UMAC key is stretched using AES in a countermode to supply all random bits needed by UMAC. The kdf function takes an AES internal key representation 'key' and writes a stream of 'nbytes' bytes to the memory pointed at by 'bufp'. Each distinct 'ndx' causes a distinct byte stream. 
Name: zero_pad; Comment: ---------------------------------------------------------------------- 
Name: poly64; Comment: The polynomial hashes use Horner's rule to evaluate a polynomial oneword at a time. As described in the specification, poly32 and poly64 require keys from special domains. The following implementations exploit the special domains to avoid overflow. The results are not guaranteed to be within Z_p32 and Z_p64, but the Inner-Product hash implementation patches any errant values. 
Name: poly_hash; Comment: Although UMAC is specified to use a ramped polynomial hash scheme, thisimplementation does not handle all ramp levels. Because we don't handle the ramp up to p128 modulus in this implementation, we are limited to 2^14 poly_hash() invocations per stream (for a total capacity of 2^24 bytes input to UMAC per tag, ie. 16MB). 
Name: ip_aux; Comment: The final step in UHASH is an inner-product hash. The poly hashproduces a result not necessarily WORD_LEN bytes long. The inner- product hash breaks the polyhash output into 16-bit chunks and multiplies each with a 36 bit key. 
Name: ip_short; Comment: If the data being hashed by UHASH is no longer than L1_KEY_LEN, thenthe polyhash stage is skipped and ip_short is applied directly to the NH output. 
Name: ip_long; Comment: If the data being hashed by UHASH is longer than L1_KEY_LEN, thenthe polyhash stage is not skipped and ip_long is applied to the polyhash output. 
Name: uhash_reset; Comment: Reset uhash context for next hash session 
Name: uhash_init; Comment: Given a pointer to the internal key needed by kdf() and a uhash context,initialize the NH context and generate keys needed for poly and inner- product hashing. All keys are endian adjusted in memory so that native loads cause correct keys to be in registers during calculation. 
Name: dangerous_locale; Comment: For US-ASCII and UTF-8 encodings, we can safely recover from encoding errors and from non-printable characters. For any other encodings, err to the side of caution and abort parsing: For state-dependent encodings, recovery is impossible. For arbitrary encodings, replacement of non-printable characters would be non-trivial and too fragile. The comments indicate what nl_langinfo(CODESET) returns for US-ASCII on various operating systems. 
Name: vasnmprintf; Comment: Noneotherwise, the actual number of columns occupied by what was written is returned in *wp. 
Name: vfmprintf; Comment: To stay close to the standard interfaces, the following functions return the number of non-NUL bytes written. 
Name: msetlocale; Comment: Set up libc for multibyte output in the user's chosen locale. XXX: we are known to have problems with Turkish (i/I confusion) so we deliberately fall back to the C locale for now. Longer term we should always prefer to select C.[encoding] if possible, but there's no standardisation in locales between systems, so we'll need to survey what's out there first. 
Name: crypto_verify_32; Comment: Public Domain, Author: Daniel J. Bernstein Copied from nacl-20110221/crypto_verify/32/ref/verify.c 
Name: get_seed; Comment: *Used for pseudorandom keygeneration, generates the seed for the WOTS keypair at address addr takes n byte sk_seed and returns n byte seed using 32 byte address addr. 
Name: xmss_set_params; Comment: *Initialize xmss params struct parameter names are the same as in the draft parameter k is K as used in the BDS algorithm 
Name: xmss_set_bds_state; Comment: *Initialize BDS state struct parameter names are the same as used in the description of the BDS traversal 
Name: xmssmt_set_params; Comment: *Initialize xmssmt_params struct parameter names are the same as in the draft Especially h is the total tree height, i.e. the XMSS trees have height h/d 
Name: l_tree; Comment: *Computes a leaf from a WOTS public key using an L-tree. 
Name: gen_leaf_wots; Comment: *Computes the leaf at a given address. First generates the WOTS key pair, then computes leaf using l_tree. As this happens position independent, we only require that addr encodes the right ltree-address. 
Name: treehash_setup; Comment: *Merkle's TreeHash algorithm. The address only needs to initialize the first 78 bits of addr. Everything else will be set by treehash. Currently only used for key generation. 
Name: validate_authpath; Comment: *Computes a root node given a leaf and an authapth 
Name: bds_treehash_update; Comment: *Performs one treehash update on the instance that needs it the most. Returns 1 if such an instance was not found *
Name: bds_state_update; Comment: *Updates the state (typically NEXT_i) by adding a leaf and updating the stack Returns 1 if all leaf nodes have already been processed *
Name: bds_round; Comment: *Returns the auth path for node leaf_idx and computes the auth path for the next leaf node, using the algorithm described by Buchmann, Dahmen and Szydlo in "Post Quantum Cryptography", Springer 2009. 
Name: xmss_keypair; Comment: Generates a XMSS key pair for a given parameter set. Format sk: [(32bit) idx || SK_SEED || SK_PRF || PUB_SEED || root] Format pk: [root || PUB_SEED] omitting algo oid. 
Name: xmss_sign; Comment: *Signs a message. Returns 1. an array containing the signature followed by the message AND 2. an updated secret key! 
Name: xmss_sign_open; Comment: *Verifies a given message signature pair under a given public key. 
Name: xmssmt_keypair; Comment: Generates a XMSSMT key pair for a given parameter set. Format sk: [(ceil(h/8) bit) idx || SK_SEED || SK_PRF || PUB_SEED || root] Format pk: [root || PUB_SEED] omitting algo oid. 
Name: xmssmt_sign; Comment: *Signs a message. Returns 1. an array containing the signature followed by the message AND 2. an updated secret key! 
Name: xmssmt_sign_open; Comment: *Verifies a given message signature pair under a given public key. 
Name: prf; Comment: *Implements PRF 
Name: h_msg; Comment: Implemts H_msg 
Name: hash_h; Comment: *We assume the left half is in in[0]...in[n-1] 
Name: setOTSADRS; Comment: OTS
Name: setLtreeADRS; Comment: L-tree
Name: setTreeHeight; Comment: Hash Tree & L-tree
Name: expand_seed; Comment: *Helper method for pseudorandom key generation Expands an n-byte array into a len*n byte array this is done using PRF 
Name: gen_chain; Comment: *Computes the chaining function. out and in have to be n-byte arrays interprets in as start-th value of the chain addr has to contain the address of the chain 
Name: base_w; Comment: *base_w algorithm as described in draft. 
Name: arc4random_uniform; Comment: Calculate a uniformly distributed random number less than upper_bound avoiding "modulo bias". Uniformity is achieved by generating new random numbers until the one returned is outside the range [0, 2**32 % upper_bound). This guarantees the selected random number will be inside [2**32 % upper_bound, 2**32) which maps back to [0, upper_bound) after reduction modulo upper_bound. 
Name: b64_pton; Comment: skips all whitespace anywhere. converts characters, four at a time, starting at (or after) src from base - 64 numbers into three 8 bit bytes in the target area. it returns the number of data bytes stored at the target, or -1 on error. 
Name: bindresvport_sa; Comment: Bind a socket to a privileged IP port 
Name: Blowfish_encipher; Comment: Function for Feistel Networks 
Name: closefrom_fallback; Comment: Close all file descriptors greater than or equal to lowfd. 
Name: __match_pattern; Comment: Returns true if the given string matches the pattern (which may contain ? andas wildcards), and zero if it does not match. The Cygwin version of this function must be case-insensitive and take Unicode characters into account. 
Name: cygwin_ug_match_pattern_list; Comment: Tries to match the string against the comma-separated sequence of subpatterns (each possibly preceded by ! to indicate negation). Returns -1 if negation matches, 1 if there is a positive match, 0 if there is no match at all. 
Name: ssh_get_progname; Comment: NB. duplicate __progname in case it is an alias for argv[0] Otherwise it may get clobbered by setproctitle() 
Name: utimensat; Comment: A limited implementation of utimensat() that only implements the functionality used by OpenSSH, currently only AT_FDCWD and AT_SYMLINK_NOFOLLOW. 
Name: fchownat; Comment: A limited implementation of fchownat() that only implements the functionality used by OpenSSH, currently only AT_FDCWD and AT_SYMLINK_NOFOLLOW. 
Name: fchmodat; Comment: A limited implementation of fchmodat() that only implements the functionality used by OpenSSH, currently only AT_FDCWD and AT_SYMLINK_NOFOLLOW. 
Name: mbtowc; Comment: a mbtowc that only supports ASCII 
Name: poll; Comment: A minimal implementation of poll(2), built on top of select(2). Only supports POLLIN and POLLOUT flags in pfd.events, and POLLIN, POLLOUT and POLLERR flags in revents. Supports pfd.fd = -1 meaning "unused" although it's not standard. 
Name: pselect_sig_handler; Comment: ARGSUSED
Name: pselect; Comment: A minimal implementation of pselect(2), built on top of select(2). 
Name: fmtint; Comment: Have to handle DP_F_NUM (ie 0x and 0 alternates) 
Name: my_modf; Comment: a replacement for modf that doesn't need the math library. Should be portable, but slow 
Name: scan_scaled; Comment: Convert the given input string "scaled" into numeric in "result".Return 0 on success, -1 and errno set on error. 
Name: fmt_scaled; Comment: Format the given "number" into human-readable form in "result".Result must point to an allocated buffer of length FMT_SCALED_STRSIZE. Return 0 on success, -1 and errno set if error. 
Name: main; Comment: This is the original version of the program in the man page. Copy-and-paste whatever you need from it. 
Name: fnmatch_ch; Comment: Most MBCS/collation/case issues handled here. Wildcard '*' is not handled.EOS '_0' and the FNM_PATHNAME '/' delimiters are not advanced over, however the "_/" sequence is advanced to '/'. Both pattern and string are **char to support pointer increment of arbitrary multibyte characters for the given locale, in a later iteration of this code 
Name: gcd; Comment: Compute the greatest common divisor of a and b. 
Name: permute_args; Comment: Exchange the block from nonopt_start to nonopt_end with the block from nonopt_end to opt_end (keeping the same order of arguments in each block). 
Name: parse_long_options; Comment: parse_long_options -- *_Parse long options in argc/argv argument vector. Returns -1 if short_too is set and the option does not match long_options. 
Name: getopt_internal; Comment: getopt_internal -- *_Parse argc/argv argument vector. Called by user level routines. 
Name: getopt; Comment: getopt -- *_Parse argc/argv argument vector. [eventually this will replace the BSD getopt] 
Name: getopt_long; Comment: getopt_long -- *_Parse argc/argv argument vector. 
Name: getopt_long_only; Comment: getopt_long_only -- *_Parse argc/argv argument vector. 
Name: parse_dns_response; Comment: DNS response parsing routines 
Name: globexp1; Comment: Expand recursively a glob {} pattern. When there is no more expansioninvoke the standard globbing routine to glob the rest of the magic characters 
Name: globexp2; Comment: Recursive brace globbing helper. Tries to expand a single brace. If it succeeds then it invokes globexp1 with the new pattern. If it fails then it tries to glob the rest of the pattern and returns. 
Name: globtilde; Comment: expand tilde from the passwd file. 
Name: inet_addr; Comment: Ascii internet address interpretation routine. The value returned is in network order. 
Name: inet_aton; Comment: Check whether "cp" is a valid ascii representation of an Internet address and convert to a binary address. Returns 1 if the address is valid, 0 if not. This replaces inet_addr, the return value from which cannot distinguish between failure and a local broadcast address. 
Name: inet_ntop; Comment: char* inet_ntop(af, src, dst, size) *_convert a network format address to presentation format. return: *_pointer to presentation format address (`dst'), or NULL (see errno). author: *_Paul Vixie, 1996. 
Name: inet_ntop4; Comment: const char* inet_ntop4(src, dst, size) *_format an IPv4 address, more or less like inet_ntoa() return: *_`dst' (as a const) notes: *_(1) uses no statics *_(2) takes a u_char* not an in_addr as input author: *_Paul Vixie, 1996. 
Name: inet_ntop6; Comment: const char* inet_ntop6(src, dst, size) *_convert IPv6 binary address into presentation (printable) format author: *_Paul Vixie, 1996. 
Name: MD5Init; Comment: Start MD5 accumulation. Set bit count to 0 and buffer to mysterious initialization constants. 
Name: MD5Update; Comment: Update context to reflect the concatenation of another buffer full of bytes. 
Name: MD5Pad; Comment: Pad pad to 64-byte boundary with the bit pattern 1 0* (64-bit count of bits processed, MSB-first) 
Name: MD5Final; Comment: Final wrapup--call MD5Pad, fill in digest and zero out ctx. 
Name: MD5Transform; Comment: The core of the MD5 algorithm, this alters an existing MD5 hash to reflect the addition of 16 longwords of new data. MD5Update blocks the data and converts bytes into longwords for this routine. 
Name: twoway_memmem; Comment: Maxime Crochemore and Dominique Perrin, Two-way string-matching, Journal of the ACM, 38(3):651-675, July 1991. 
Name: ssh_compatible_openssl; Comment: OpenSSL version numbers: MNNFFPPS: major minor fix patch status We match major, minor, fix and status (not patch) for <1.0.0. After that, we acceptable compatible fix versions (so we allow 1.0.1 to work with 1.0.0). Going backwards is only allowed within a patch series. 
Name: aix_usrinfo; Comment: AIX has a "usrinfo" area where logname and other stuff is stored - a few applications actually use this and die if it's not set NOTE: TTY= should be set, but since no one uses it and it's hard to acquire due to privsep code. We will just drop support. 
Name: aix_remove_embedded_newlines; Comment: Remove embedded newlines in string (if any). Used before logging messages returned by AIX authentication functions so the message is logged on one line. 
Name: aix_valid_authentications; Comment: Test specifically for the case where SYSTEM == NONE and AUTH1 contains anything other than NONE or SYSTEM, which indicates that the admin has configured the account for purely AUTH1-type authentication. Since authenticate() doesn't check AUTH1, and sshd can't sanely support AUTH1 itself, in such a case authenticate() will allow access without authentation, which is almost certainly not what the admin intends. (The native tools, eg login, will process the AUTH1 list in addition to the SYSTEM list by using ckuserID(), however ckuserID() and AUTH1 methods have been deprecated since AIX 4.2.x and would be very difficult for sshd to support. Returns 0 if an unsupportable combination is found, 1 otherwise. 
Name: sys_auth_passwd; Comment: Do authentication via AIX's authenticate routine. We loop until the reenter parameter is 0, but normally authenticate is called only once. Note: this function returns 1 on success, whereas AIX's authenticate() returns 0. 
Name: sys_auth_allowed_user; Comment: Check if specified account is permitted to log in. Returns 1 if login is allowed, 0 if not allowed. 
Name: record_failed_login; Comment: record_failed_login: generic "login failed" interface function 
Name: aix_setauthdb; Comment: If we have setauthdb, retrieve the password registry for the user's account then feed it to setauthdb. This will mean that subsequent AIX auth functions will only use the specified loadable module. If we don't have setauthdb this is a no-op. 
Name: aix_restoreauthdb; Comment: Restore the user's registry settings from old_registry. Note that if the first aix_setauthdb fails, setauthdb("") is still safe (it restores the system default behaviour). If we don't have setauthdb, this is a no-op. 
Name: aix_krb5_get_principal_name; Comment: aix_krb5_get_principal_name: returns the user's kerberos client principal name if configured, otherwise NULL. Caller must free returned string. 
Name: sshaix_getnameinfo; Comment: For some reason, AIX's getnameinfo will refuse to resolve the all-zeros IPv6 address into its textual representation ("::"), so we wrap it with a function that will. 
Name: ssh_selinux_enabled; Comment: Wrapper around is_selinux_enabled() to log its return value once only 
Name: ssh_selinux_getctxbyname; Comment: Return the default security context for the given username 
Name: ssh_selinux_setup_exec_context; Comment: Set the execution context to the default for the specified user 
Name: ssh_selinux_setup_pty; Comment: Set the TTY context for the specified user 
Name: oom_adjust_setup; Comment: Tell the kernel's out-of-memory killer to avoid sshd. Returns the previous oom_adj value or zero. 
Name: oom_adjust_restore; Comment: Restore the saved OOM adjustment 
Name: sys_get_rdomain; Comment: XXX examples 
Name: get_random_bytes_prngd; Comment: EGD/PRNGD interface. Collect 'len' bytes of entropy into 'buf' from PRNGD/EGD daemon listening either on 'tcp_port', or via Unix domain socket at'socket_path'. Either a non-zero tcp_port or a non-null socket_path must be supplied. Returns 0 on success, -1 on error 
Name: get_active_process_contract_id; Comment: Lookup the latest process contract 
Name: solaris_set_default_project; Comment: Get/set solaris default project. If we fail, just run along gracefully. 
Name: __findenv; Comment: __findenv -- _Returns pointer to value associated with name, if any, else NULL. _Starts searching within the environmental array at offset. _Sets offset to be the offset of the namevalue combination in the _environmental array, for use by putenv(3), setenv(3) and unsetenv(3). _Explicitly removes '=' in argument name. _This routine should be a static; don't use it. 
Name: putenv; Comment: putenv -- *_Add a name=value string directly to the environmental, replacing *_any current value. 
Name: setenv; Comment: setenv -- *_Set the value of the environmental variable "name" to be *_"value". If rewrite is set, replace any current value. 
Name: unsetenv; Comment: unsetenv(name) -- *_Delete environmental variable "name". 
Name: SHA1Transform; Comment: Hash a single 512-bit block. This is the core of the algorithm. 
Name: SHA1Init; Comment: SHA1Init - Initialize new context 
Name: SHA1Update; Comment: Run your data through this. 
Name: SHA1Pad; Comment: Add padding and return the message digest. 
Name: SHA224Init; Comment: ** SHA-224: ********************************************************
Name: SHA256Init; Comment: ** SHA-256: ********************************************************
Name: SHA256Transform; Comment: Unrolled SHA-256 round macros: 
Name: SHA512Init; Comment: ** SHA-512: ********************************************************
Name: SHA512Transform; Comment: Unrolled SHA-512 round macros: 
Name: SHA384Init; Comment: ** SHA-384: ********************************************************
Name: SHA384Transform; Comment: Equivalent of MAKE_CLONE (which is a no-op) for SHA384 funcs 
Name: SHA512_256Init; Comment: ** SHA-512/256: ********************************************************
Name: strcasestr; Comment: Find the first occurrence of find in s, ignore case. 
Name: strlcat; Comment: Appends src to string dst of size siz (unlike strncat, siz is the full size of dst, not space left). At most siz-1 characters will be copied. Always NUL terminates (unless siz <= strlen(dst)). Returns strlen(src) + MIN(siz, strlen(initial dst)). If retval >= siz, truncation occurred. 
Name: strlcpy; Comment: Copy src to string dst of size siz. At most siz-1 characters will be copied. Always NUL terminates (unless siz == 0). Returns strlen(src); if retval >= siz, truncation occurred. 
Name: strmode; Comment: XXX mode should be mode_t 
Name: strsep; Comment: Get next token from string *stringp, where tokens are possibly-empty strings separated by characters from delim. Writes NULs into the string at *stringp to end tokens. delim need not remain constant from call to call. On return, *stringp points past the last NUL written (if there might be further tokens), or is NULL (if there are definitely no more tokens). If *stringp is NULL, strsep returns NULL. 
Name: strtoll; Comment: Convert a string to a long long. Ignores `locale' stuff. Assumes that the upper and lower case alphabets and digits are each contiguous. 
Name: strtoull; Comment: Convert a string to an unsigned long long. Ignores `locale' stuff. Assumes that the upper and lower case alphabets and digits are each contiguous. 
Name: vis; Comment: vis - visually encode characters 
Name: strvis; Comment: strvis, strnvis, strvisx - visually encode characters from src into dst *_ *_Dst must be 4 times the size of src to account for possible *_expansion. The length of dst, not including the trailing NULL, *_is returned. *_Strnvis will write no more than siz-1 bytes (and will NULL terminate). *_The number of bytes needed to fully encode the string is returned. *_Strvisx encodes exactly len bytes from src into dst. *_This is useful for encoding a block of data. 
Name: pick_salt; Comment: Pick an appropriate password encryption type and salt for the running system by searching through accounts until we find one that has a valid salt. Usually this will be root unless the root account is locked out. If we don't find one we return a traditional DES-based salt. 
Name: shadow_pw; Comment: Handle shadowed password systems in a cleaner way for portable version. 
Name: safely_chroot; Comment: Based on session.c. NB. keep tests in sync 
Name: platform_sys_dir_uid; Comment: from platform.c 
Name: auth_secure_path; Comment: from auth.c 
Name: unix_bind; Comment: unix_bind() Returns a unix socket bound to the given path 
Name: unix_connect; Comment: unix_connect() Returns a socket connected to a local unix socket. Returns -1 on failure. 
Name: unix_listen; Comment: unix_listen() Create a unix domain socket, and listen on it. 
Name: remote_connect; Comment: remote_connect() Returns a socket connected to a remote host. Properly binds to a local port or source address if needed. Returns -1 on failure. 
Name: local_listen; Comment: local_listen() Returns a socket listening on a local port, binds to specified source address. Returns -1 on failure. 
Name: readwrite; Comment: readwrite() Loop that polls on the network file descriptor and stdin. 
Name: fdpass; Comment: fdpass() Pass the connected file descriptor to stdout and exit. 
Name: atelnet; Comment: Deal with RFC 854 WILL/WONT DO/DONT negotiation. 
Name: build_ports; Comment: build_ports() Build an array of ports in portlist[], listing each port that we should try to connect to. 
Name: udptest; Comment: udptest() Do a few writes to see if the UDP port is there. Fails once PF state table is full. 
Name: tests; Comment: test_iterate.c 
Name: check; Comment: hostkeys_foreach() iterator callback that verifies the line passed against an array of expected entries. 
Name: prepare_expected; Comment: Loads public keys for a set of expected results 
Name: load_certs; Comment: Initialize or extend, if *certs != NULL, a certificate stack. 
Name: load_crls; Comment: Initialize or extend, if *crls != NULL, a certificate stack. 
Name: try_load_engine; Comment: Try to load an engine in a shareable library 
Name: index_index; Comment: Returns > 0 on success, <= 0 on error 
Name: parse_name; Comment: name is expected to be in the format /type0=value0/type1=value1/type2=... where characters may be escaped by 
Name: bio_to_mem; Comment: Read whole contents of a BIO into an allocated memory buffer and return it. 
Name: next_protos_parse; Comment: -next_protos_parse parses a comma separated list of strings into a string in a format suitable for passing to SSL_CTX_set_next_protos_advertised. outlen: (output) set to the length of the resulting buffer on success. err: (maybe NULL) on failure, an error message line is written to this BIO. in: a NUL terminated string like "abc,def,ghi" returns: a malloc'd buffer or NULL on failure. 
Name: get_dp_url; Comment: Get first http URL from a DIST_POINT structure 
Name: load_crl_crldp; Comment: Look through a CRLDP structure and attempt to find an http URL to downloads a CRL from. 
Name: STACK_OF; Comment: Example of downloading CRLs from CRLDP: not usable for real world as it always downloads, doesn't support non-blocking I/O and doesn't cache anything. 
Name: istext; Comment: Centralized handling if input and output files with format specification The format is meant to show what the input and output is supposed to be, and is therefore a show of intent more than anything else. However, it does impact behavior on some platform, such as differentiating between text and binary input/output on non-Unix platforms 
Name: bio_open_owner; Comment: Open a file for writing, owner-read-only. 
Name: corrupt_signature; Comment: Corrupt a signature by modifying final byte 
Name: make_revocation_str; Comment: Given revocation information convert to a DB string. The format of the string is: revtime[,reason,extra]. Where 'revtime' is the revocation time (the current time). 'reason' is the optional CRL reason and 'extra' is any additional argument 
Name: make_revoked; Comment: -Convert revocation field to X509_REVOKED entry return code: 0 error 1 OK 2 OK and some extensions added (i.e. V2 CRL) 
Name: cms_cb; Comment: Minimal callback just to output policy info (if any) 
Name: add_certs_from_file; Comment: - *---------------------------------------------------------------------- int add_certs_from_file Read a list of certificates to be checked from a file. Results: number of certs added if successful, -1 if not. *---------------------------------------------------------------------- 
Name: newline_escape_filename; Comment: The newline_escape_filename function performs newline escaping for any filename that contains a newline. This function also takes a pointer to backslash. The backslash pointer is a flag to indicating whether a newline is present in the filename. If a newline is present, the backslash flag is set and the output format will contain a backslash at the beginning of the digest output. This output format is to replicate the output format found in the '*sum' checksum programs. This aims to preserve backward compatibility. 
Name: setpgid; Comment: not supported 
Name: fork; Comment: not supported 
Name: spawn_loop; Comment: Loop spawning up to `multi` child processes, only child processes return from this function. The parent process loops until receiving a termination signal, kills extant children and exits without returning. 
Name: init_responder; Comment: Quick and dirty OCSP server: read in and parse input request 
Name: urldecode; Comment: Decode %xx URL-decoding in-place. Ignores mal-formed sequences. 
Name: opt_init; Comment: Set up the arg parsing. 
Name: opt_format_error; Comment: Print an error message about a failed format parse. 
Name: opt_format; Comment: Parse a format string, put it into *result; return 0 on failure, else 1. 
Name: opt_cipher; Comment: Parse a cipher name, put it in *EVP_CIPHER; return 0 on failure, else 1. 
Name: opt_md; Comment: Parse message digest name, put it in EVP_MD; return 0 on failure, else 1. 
Name: opt_pair; Comment: Look through a list of name/value pairs. 
Name: opt_int; Comment: Parse an int, put it into *result; return 0 on failure, else 1. 
Name: opt_long; Comment: Parse a long, put it into *result; return 0 on failure, else 1. 
Name: opt_imax; Comment: Parse an intmax_t, put it into *result; return 0 on failure, else 1. 
Name: opt_umax; Comment: Parse a uintmax_t, put it into *result; return 0 on failure, else 1. 
Name: opt_ulong; Comment: Parse an unsigned long, put it into result; return 0 on failure, else 1. 
Name: opt_next; Comment: Parse the next flag (and value if specified), return 0 if done, -1 on error, otherwise the flag's retval. 
Name: opt_arg; Comment: Return the most recent flag parameter. 
Name: opt_flag; Comment: Return the most recent flag. 
Name: opt_unknown; Comment: Return the unknown option. 
Name: opt_rest; Comment: Return the rest of the arguments after parsing flags. 
Name: opt_num_rest; Comment: How many items in remaining args? 
Name: valtype2param; Comment: Return a string describing the parameter type. 
Name: md5crypt; Comment: MD5-based password algorithm (should probably be available as a library function; then the static buffer would not be acceptable). For magicstring "1", this should be compatible to the MD5-based BSD password algorithm. For 'magic' string "apr1", this is compatible to the MD5-based Apache password algorithm. (Apparently, the Apache password algorithm is identical except that the 'magic' string was changed -- the laziest application of the NIH principle I've ever encountered.) 
Name: shacrypt; Comment: SHA based password algorithm, describe by Ulrich Drepper here: https:www.akkadia.orgdrepperSHA-crypt.txt(note that it's in the public domain) 
Name: get_cert_chain; Comment: Given a single certificate return a verified chain or NULL if error 
Name: cert_load; Comment: Load all certificates from a given file 
Name: print_attribute; Comment: Generalised x509 attribute value print 
Name: print_attribs; Comment: Generalised attribute print: handle PKCS#8 and bag attributes 
Name: symlink; Comment: VxWorks has no symbolic links 
Name: add_entry; Comment: Process an entry; return number of errors. 
Name: handle_symlink; Comment: Check if a symlink goes to the right spot; return 0 if okay.This can be -1 if bad filename, or an error count. 
Name: do_file; Comment: process a file, return number of errors. 
Name: do_dir; Comment: Process a directory; return number of errors found. 
Name: ext_name_hash; Comment: An LHASH of strings, where each string is an extension name. 
Name: duplicated; Comment: Is the |kv| key already duplicated? This is remarkably tricky to get right. Return 0 if unique, -1 on runtime error; 1 if found or a syntaxerror. 
Name: build_subject; Comment: subject is expected to be in the format /type0=value0/type1=value1/type2=... where characters may be escaped by 
Name: check_end; Comment: Check if the end of a string matches 'end' 
Name: join; Comment: Merge the two strings together into the result buffer checking for overflow and producing an error message if there is. 
Name: smime_cb; Comment: Minimal callback just to output policy info (if any) 
Name: EVP_Update_loop_ccm; Comment: CCM does not support streaming. For the purpose of performance measurement, each message is encrypted using the same (key,iv)-pair. Do not use this code in your application. 
Name: EVP_Update_loop_aead; Comment: To make AEAD benchmarking more relevant perform TLS-like operations, 13-byte AAD followed by payload. But don't use TLS-formatted AAD, as payload length is not actually limited by 16KB... 
Name: RSA_sign_loop; Comment: # RSA iteration test 
Name: set_cert_cb; Comment: Very basic selection callback: just use any certificate chain reported as valid. More sophisticated could prioritise according to local policy. 
Name: hexencode; Comment: Hex encoder for TLSA RRdata, not ':' delimited. 
Name: ssl_srp_verify_param_cb; Comment: -This callback is used here for two purposes: - extended debugging - making some primality tests for unknown groups The callback is only called for a non default group. An application does not need the call back at all if only the standard groups are used. In real life situations, client and server already share well known groups, thus there is no need to verify them. Furthermore, in case that a server actually proposes a group that is not one of those defined in RFC 5054, it is more appropriate to add the group to a static list and then compare since primality tests are rather cpu consuming. 
Name: hexdecode; Comment: Hex decoder that tolerates optional whitespace. Returns number of bytes produced, advances inptr to end of input string. 
Name: checked_uint8; Comment: Decode unsigned 0..255, returns 1 on success, <= 0 on failure. Advances inptr to next field skipping leading whitespace. 
Name: freeandcopy; Comment: Free |*dest| and optionally set it to a copy of |source|. 
Name: is_dNS_name; Comment: Host dNS Name verifier: used for checking that the hostname is in dNS format before setting it as SNI 
Name: ssl_srp_server_param_cb; Comment: This callback pretends to require some asynchronous logic in order to obtain a verifier. When the callback is called for a new connection we return with a negative value. This will provoke the accept etc to return with an LOOKUP_X509. The main logic of the reinvokes the suspended call (which would normally occur after a worker has finished) and we set the user parameters. 
Name: get_ocsp_resp_from_responder; Comment: Helper function to get an OCSP_RESPONSE from a responder. This is a simplified version. It examines certificates each time and makes one OCSP responder query for each request. A full version would store details such as the OCSP certificate IDs and minimise the number of OCSP responses by caching them until they were considered "expired". 
Name: cert_status_cb; Comment: Certificate Status callback. This is called when a client includes a certificate status request extension. The response is either obtained from a file, or from an OCSP responder. 
Name: init_client; Comment: init_client - helper routine to set up socket communication @sock: pointer to storage of resulting socket. @host: the host name or path (for AF_UNIX) to connect to. @port: the port to connect to (ignored for AF_UNIX). @bindhost: source host or path (for AF_UNIX). @bindport: source port (ignored for AF_UNIX). @family: desired socket family, may be AF_INET, AF_INET6, AF_UNIX or AF_UNSPEC @type: socket type, must be SOCK_STREAM or SOCK_DGRAM @protocol: socket protocol, e.g. IPPROTO_TCP or IPPROTO_UDP (or 0 for any) This will create a socket and use it to connect to a host:port, or if family == AF_UNIX, to the path found in host. If the host has more than one address, it will try them one by one until a successful connection is established. The resulting socket will be found in *sock on success, it will be given INVALID_SOCKET otherwise. Returns 1 on success, 0 on failure. 
Name: do_server; Comment: do_server - helper routine to perform a server operation @accept_sock: pointer to storage of resulting socket. @host: the host name or path (for AF_UNIX) to connect to. @port: the port to connect to (ignored for AF_UNIX). @family: desired socket family, may be AF_INET, AF_INET6, AF_UNIX or AF_UNSPEC @type: socket type, must be SOCK_STREAM or SOCK_DGRAM @cb: pointer to a function that receives the accepted socket and should perform the communication with the connecting client. @context: pointer to memory that's passed verbatim to the cb function. @naccept: number of times an incoming connect should be accepted. If -1, unlimited number. This will create a socket and use it to listen to a host:port, or if family == AF_UNIX, to the path found in host, then start accepting incoming connections and run cb on the resulting socket. 0 on failure, something other on success. 
Name: doConnection; Comment: -doConnection - make a connection 
Name: txt2obj; Comment: Configuration file-related function definitions. 
Name: query_command; Comment: Query-related method definitions. 
Name: reply_command; Comment: Reply-related method definitions. 
Name: read_PKCS7; Comment: Reads a PKCS7 token and adds default 'granted' status info to it. 
Name: verify_command; Comment: Verify-related method definitions. 
Name: decc_init; Comment: LIB$INITIALIZE initialization function. 
Name: main; Comment: ----------------------------------------------------------------------------
Name: TerminalSocket; Comment: ----------------------------------------------------------------------------
Name: CreateSocketPair; Comment: ----------------------------------------------------------------------------
Name: SocketPairTimeoutAst; Comment: ----------------------------------------------------------------------------
Name: TerminalDeviceAst; Comment: ----------------------------------------------------------------------------
Name: LogMessage; Comment: ----------------------------------------------------------------------------
Name: validate_argv; Comment: Incrementally [re]allocate newargv and keep it NULL-terminated. 
Name: sign; Comment: self sign 
Name: OPENSSL_rdtsc; Comment: For systems that don't provide an instruction counter register or equivalent. 
Name: OpenSSL_version_num; Comment: Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: ebcdic2ascii; Comment: Translate a memory block from EBCDIC (host charset) to ASCII (net charset) dest and srce may be identical, or separate memory blocks, but should not overlap. These functions intentionally have an interface compatible to memcpy(3). 
Name: get_and_lock; Comment: Return the EX_CALLBACKS from the |ex_data| array that corresponds to a given class. On success, *holds the lock.* 
Name: crypto_cleanup_all_ex_data_int; Comment: Release all "ex_data" state to prevent memory leaks. This can't be made thread-safe without overhauling a lot of stuff, and shouldn't really be called under potential race-conditions anyway (it's for program shutdown after all). 
Name: dummy_new; Comment: Unregister a new index by replacing the callbacks with no-ops. Any in-use instances are leaked. 
Name: CRYPTO_get_ex_new_index; Comment: Register a new index. 
Name: CRYPTO_new_ex_data; Comment: Initialise a new CRYPTO_EX_DATA for use in a particular class - including calling new() callbacks for each index in the class used by this variable Thread-safe by copying a class's array of "EX_CALLBACK" entries in the lock, then using them outside the lock. Note this only applies to the global "ex_data" state (ie. class definitions), not 'ad' itself. 
Name: CRYPTO_dup_ex_data; Comment: Duplicate a CRYPTO_EX_DATA variable - including calling dup() callbacks for each index in the class used by this variable 
Name: CRYPTO_free_ex_data; Comment: Cleanup a CRYPTO_EX_DATA variable - including calling free() callbacks for each index in the class used by this variable 
Name: CRYPTO_set_ex_data; Comment: For a given CRYPTO_EX_DATA variable, set the value corresponding to a particular index in the class used by this variable 
Name: CRYPTO_get_ex_data; Comment: For a given CRYPTO_EX_DATA_ variable, get the value corresponding to a particular index in the class used by this variable 
Name: OPENSSL_init_crypto; Comment: If this function is called with a non NULL settings value then it must be called prior to any threads making calls to any OpenSSL functions, i.e. passing a non-null settings value is assumed to be single-threaded. 
Name: OPENSSL_fork_prepare; Comment: The following three functions are for OpenSSL developers. This is where we setreset state across fork (called via pthread_atfork when it exists, or manually by the application when it doesn't). WARNING! If you put code in either OPENSSL_fork_parent or OPENSSL_fork_child, you MUST MAKE SURE that they are async-signal- safe. See this link, for example: http:man7.orglinuxman-pagesman7signal-safety.7.html 
Name: parseit; Comment: Parse a "malloc failure spec" string. This likes like a set of fields separated by semicolons. Each field has a count and an optional failure percentage. For example: 100@0;100@25;0@0 or 100;100@25;0This means 100 mallocs succeed, then next 100 fail 25% of the time, and all remaining (count is zero) succeed. 
Name: shouldfail; Comment: See if the current malloc should fail. 
Name: pop_info; Comment: returns 1 if there was an info to pop, 0 if the stack was empty. 
Name: FIPS_mode; Comment: Copyright 2011-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: OPENSSL_init; Comment: Perform any essential OpenSSL initialization operations. Currently does nothing. 
Name: OPENSSL_hexstr2buf; Comment: Give a string of hex digits convert to a buffer 
Name: OPENSSL_buf2hexstr; Comment: Given a buffer of length 'len' return a OPENSSL_malloc'ed string with its hex representation @@@ (Contents of buffer are always kept in ASCII, also on EBCDIC machines) 
Name: julian_adj; Comment: Convert tm structure and offset into julian day and seconds 
Name: date_to_julian; Comment: Convert date to and from julian day Uses Fliegel & Van Flandern algorithm 
Name: CRYPTO_THREAD_run_once; Comment: We don't use InitOnceExecuteOnce because that isn't available in WinXP which we still have to support. 
Name: AES_cfb128_encrypt; Comment: None 
Name: AES_cfb1_encrypt; Comment: N.B. This expects the input to be packed, MS bit first 
Name: AES_set_encrypt_key; Comment: *Expand the cipher key into the encryption key schedule. 
Name: AES_set_decrypt_key; Comment: *Expand the cipher key into the decryption key schedule. 
Name: AES_encrypt; Comment: Encrypt a single block in and out can overlap 
Name: AES_decrypt; Comment: Decrypt a single block in and out can overlap 
Name: AES_ige_encrypt; Comment: N.B. The IV for this mode is _twice_ the block size 
Name: AES_bi_ige_encrypt; Comment: N.B. The IV for this mode is _four times_ the block size 
Name: xor128; Comment: Exclusive or two 128 bit values into the result. It is safe for the result to be the same as the either input. 
Name: rotnr; Comment: Generalised circular rotate right and exclusive or function. It is safe for the output to overlap either input. 
Name: rot19r; Comment: Circular rotate 19 bits right and xor. It is safe for the output to overlap either input. 
Name: rot31r; Comment: Circular rotate 31 bits right and xor. It is safe for the output to overlap either input. 
Name: rot61l; Comment: Circular rotate 61 bits left and xor. It is safe for the output to overlap either input. 
Name: rot31l; Comment: Circular rotate 31 bits left and xor. It is safe for the output to overlap either input. 
Name: rot19l; Comment: Circular rotate 19 bits left and xor. It is safe for the output to overlap either input. 
Name: sl1; Comment: First substitution and xor layer, used for odd steps. It is safe for the input and output to be the same. 
Name: sl2; Comment: Second substitution and xor layer, used for even steps. It is safe for the input and output to be the same. 
Name: a; Comment: Diffusion layer step It is NOT safe for the input and output to overlap. 
Name: FO; Comment: Odd round function Apply the first substitution layer and then a diffusion step. It is safe for the input and output to overlap. 
Name: FE; Comment: Even round function Apply the second substitution layer and then a diffusion step. It is safe for the input and output to overlap. 
Name: do_encrypt; Comment: Encrypt or decrypt a single block in and out can overlap 
Name: aria_encrypt; Comment: Encrypt a single block in and out can overlap 
Name: aria_set_encrypt_key; Comment: Expand the cipher key into the encryption key schedule. We short circuit execution of the last two or four rotations based on the key size. 
Name: aria_set_decrypt_key; Comment: Expand the cipher key into the decryption key schedule. 
Name: EVP_PKEY_asn1_find; Comment: Find an implementation of an ASN1 algorithm. If 'pe' is not NULL also search through engines and set *pe to a functional reference to the engine implementing 'type' or NULL if no engine implements it. 
Name: asn1_multi; Comment: Handle multiple types: SET and SEQUENCE 
Name: asn1_get_length; Comment: Decode a length field. The short form is a single byte defining a length 0 - 127. The long form is a byte 0 - 127 with the top bit set and this indicates the number of following octets that contain the length. These octets are stored most significant digit first. 
Name: ASN1_put_object; Comment: class 0 is constructed constructed == 2 for indefinite length constructed 
Name: i2d_ASN1_bio_stream; Comment: Output an ASN1 structure in BER format streaming if necessary 
Name: B64_write_ASN1; Comment: Base 64 read and write of ASN1 structure 
Name: PEM_write_bio_ASN1_stream; Comment: Streaming ASN1 PEM write 
Name: asn1_write_micalg; Comment: Generate the MIME "micalg" parameter from RFC3851, RFC4490 
Name: SMIME_write_ASN1; Comment: SMIME sender 
Name: asn1_output_data; Comment: Handle output of ASN1 data 
Name: SMIME_read_ASN1; Comment: SMIME reader: handle multipart/signed and opaque signing. in multipart case the content is placed in a memory BIO pointed to by "bcont". In opaque this is set to NULL 
Name: SMIME_crlf_copy; Comment: Copy text from one BIO to another making the output CRLF at EOL 
Name: SMIME_text; Comment: Strip off headers if they are text/plain 
Name: multi_split; Comment: Split a multipart/XXX message body into component parts: result is canonical parts in a STACK of bios 
Name: strip_start; Comment: Strip a parameter of whitespace from start of param 
Name: strip_end; Comment: As above but strip from end of string : maybe should handle brackets? 
Name: mime_hdr_find; Comment: Find a header with a given name (if possible) 
Name: mime_bound_check; Comment: -Check for a multipart boundary. Returns: 0 : no boundary 1 : part boundary 2 : final boundary 
Name: do_create; Comment: -Create an OID based on a name value pair. Accept two formats. shortname = 1.2.3.4 shortname = some long name, 1.2.3.4 
Name: do_tcreate; Comment: Create an table entry based on a name value pair. format is oid_name = n1:v1, n2:v2,... where name is "min", "max", "mask" or "flags". 
Name: ASN1_item_pack; Comment: ASN1 packing and unpacking functions 
Name: ASN1_item_unpack; Comment: Extract an ASN1 object from an ASN1_STRING 
Name: ASN1_BIT_STRING_set_bit; Comment: These next 2 functions from Goetz Babin-Ebell. 
Name: ASN1_BIT_STRING_check; Comment: Checks if the given bit string contains only bits specified by the flags vector. Returns 0 if there is at least one bit set in 'a' which is not specified in 'flags', 1 otherwise. 'len' is the length of 'flags'. 
Name: ASN1_item_dup; Comment: ASN1_ITEM version of dup: this follows the model above except we don't need to allocate the buffer. At some point this could be rewritten to directly dup the underlying structure instead of doing and encode and decode. 
Name: asn1_generalizedtime_to_tm; Comment: This is the primary function used to parse ASN1_GENERALIZEDTIME 
Name: twos_complement; Comment: If |pad| is zero, the operation is effectively reduced to memcpy, and if |pad| is 0xff, then it performs two's complement, ~dst + 1. Note that in latter case sequence of zeros yields itself, and so does 0x80 followed by any number of zeros. These properties are used elsewhere below... 
Name: c2i_ibuf; Comment: convert content octets into a big endian buffer. Returns the length of buffer or 0 on error: for malformed INTEGER. If output buffer is NULL just return length. 
Name: asn1_get_uint64; Comment: Convert big endian buffer into uint64_t, return 0 on error 
Name: asn1_put_uint64; Comment: Write uint64_t to big endian buffer and return offset to first written octet. In other words it returns offset in range from 0 to 7, with 0 denoting 8 written octets and 7 - one. 
Name: asn1_get_int64; Comment: signed version of asn1_get_uint64 
Name: c2i_ASN1_INTEGER; Comment: Convert ASN1 INTEGER content octets to ASN1_INTEGER structure 
Name: d2i_ASN1_UINTEGER; Comment: This is a version of d2i_ASN1_INTEGER that ignores the sign bit of ASN1 integers: some broken software can encode a positive INTEGER with its MSB set as negative (it doesn't add a padding zero). 
Name: c2i_uint64_int; Comment: Internal functions used by x_int64.c 
Name: ASN1_mbstring_copy; Comment: These functions take a string in UTF8, ASCII or multibyte form and a mask of permissible ASN1 string types. It then works out the minimal type (using the order Numeric < Printable < IA5 < T61 < BMP < Universal < UTF8) and creates a string of the correct type with the supplied data. Yes this is horrible: it has to be :-( The 'ncopy' form checks minimum and maximum size limits too. 
Name: traverse_string; Comment: This function traverses a string and passes the value of each character to an optional function along with a voidargument. 
Name: in_utf8; Comment: Just count number of characters 
Name: out_utf8; Comment: Determine size of output as a UTF8 String 
Name: type_str; Comment: Determine the "type" of a string: check each character against a supplied "mask". 
Name: cpy_asc; Comment: Copy one byte per character ASCII like strings 
Name: cpy_bmp; Comment: Copy two byte per character BMPStrings 
Name: cpy_univ; Comment: Copy four byte per character UniversalStrings 
Name: cpy_utf8; Comment: Copy to a UTF8String 
Name: send_bio_chars; Comment: Three IO functions for sending data to memory, a BIO and and a FILE pointer. 
Name: do_esc_char; Comment: This function handles display of strings, one character at a time. It is passed an unsigned long for each character because it could come from 2 or even 4 byte forms. 
Name: do_buf; Comment: This function sends each character in a buffer to do_esc_char(). It interprets the content formats and converts to or from UTF8 as appropriate. 
Name: do_hex_dump; Comment: This function hex dumps a buffer of characters 
Name: do_dump; Comment: "dump" a string. This is done when the type is unknown, or the flags request it. We can either dump the content octets or the entire DER encoding. This uses the RFC2253 #01234 format. 
Name: do_print_ex; Comment: This is the main function, print out an ASN1_STRING taking note of various escape and display options. Returns number of characters written or -1 if an error occurred. 
Name: do_indent; Comment: Used for line indenting: print 'indent' spaces 
Name: X509_NAME_print_ex; Comment: Wrappers round the main functions 
Name: ASN1_STRING_to_UTF8; Comment: Utility function: convert any string type to UTF8, returns number of bytes in output string or a negative error code 
Name: ASN1_STRING_set_default_mask_asc; Comment: -This function sets the default to various "flavours" of configuration. based on an ASCII string. Currently this is: MASK:XXXX : a numerical mask value. nobmp : Don't use BMPStrings (just Printable, T61). pkix : PKIX recommendation in RFC2459. utf8only : only use UTF8Strings (RFC2459 recommendation for 2004). default: the default value, Printable, T61, BMP. 
Name: ASN1_STRING_set_by_NID; Comment: The following function generates an ASN1_STRING based on limits in a table. Frequently the types and length of an ASN1_STRING are restricted by a corresponding OID. For example certificates and certificate requests. 
Name: sk_table_cmp; Comment: Now the tables and helper functions for the string table: 
Name: stable_get; Comment: Return a string table pointer which can be modified: either directly from table or a copy of an internal value added to the table. 
Name: determine_days; Comment: Compute the day of the week and the day of the year from the year, month and day. The day of the year is straightforward, the day of the week uses a form of Zeller's congruence. For this months start with March and are numbered 4 through 15. 
Name: ASN1_TIME_to_generalizedtime; Comment: Convert an ASN1_TIME structure to GeneralizedTime 
Name: ASN1_TYPE_cmp; Comment: Returns 0 if they are equal, != 0 otherwise. 
Name: asn1_utctime_to_tm; Comment: This is the primary function used to parse ASN1_UTCTIME 
Name: ASN1_UTCTIME_set_string; Comment: Sets the string via simple copy without cleaning it up 
Name: UTF8_getc; Comment: -This parses a UTF8 string one character at a time. It is passed a pointer to the string and the length of the string. It sets 'value' to the value of the current character. It returns the number of characters read or a negative error code: -1 = string too short -2 = illegal character -3 = subsequent characters not of the form 10xxxxxx -4 = character encoded incorrectly (not minimal length). 
Name: UTF8_putc; Comment: This takes a character 'value' and writes the UTF8 encoded value in 'str' where 'str' is a buffer containing 'len' characters. Returns the number of characters written or -1 if 'len' is too small. 'str' can be set to NULL in which case it just returns the number of characters. It will need at most 6 characters. 
Name: d2i_AutoPrivateKey; Comment: This works like d2i_PrivateKey() except it automatically works out the type 
Name: ASN1_TYPE_get_octetstring; Comment: int max_len: for returned value 
Name: ASN1_TYPE_get_int_octetstring; Comment: int max_len: for returned value 
Name: PKCS5_pbe_set0_algor; Comment: Set an algorithm identifier for a PKCS#5 PBE algorithm 
Name: PKCS5_pbe_set; Comment: Return an algorithm identifier for a PKCS#5 PBE algorithm 
Name: PKCS5_pbe2_set_iv; Comment: Return an algorithm identifier for a PKCS#5 v2.0 PBE algorithm: yes I knowthis is horrible! Extended version to allow application supplied PRF NID and IV. 
Name: PKCS5_pbe2_set_scrypt; Comment: Return an algorithm identifier for a PKCS#5 v2.0 PBE algorithm using scrypt 
Name: pkey_cb; Comment: Minor tweak to operation: zero private key data 
Name: ASN1_item_d2i; Comment: Decode an ASN1 item, this currently behaves just like a standard 'd2i' function. 'in' points to a buffer to read the data from, in future we will have more advanced versions that can input data a piece at a time and this will simply be a special case. 
Name: asn1_item_embed_d2i; Comment: Decode an item, taking care of IMPLICIT tagging, if any. If 'opt' set and tag mismatch return -1 to handle OPTIONAL 
Name: asn1_template_ex_d2i; Comment: Templates are handled with two separate functions. One handles any EXPLICIT tag and the other handles the rest. 
Name: asn1_ex_c2i; Comment: Translate ASN1 content octets into a structure 
Name: asn1_find_end; Comment: This function finds the end of an ASN1 structure when passed its maximum length, whether it is indefinite length and a pointer to the content. This is more efficient than calling asn1_collect because it does not recurse on each indefinite length header. 
Name: asn1_check_eoc; Comment: Check for ASN1 EOC and swallow it if found 
Name: asn1_check_tlen; Comment: Check an ASN1 tag and length: a bit like ASN1_get_object but it sets the length for indefinite length constructed form, we don't know the exact length but we can set an upper bound to the amount of data available minus the header length just read. 
Name: ASN1_item_ndef_i2d; Comment: Top level i2d equivalents: the 'ndef' variant instructs the encoder to use indefinite length constructed encoding, where appropriate 
Name: asn1_item_flags_i2d; Comment: Encode an ASN1 item, this is use by the standard 'i2d' function. 'out' points to a buffer to output the data to. The new i2d has one additional feature. If the output buffer is NULL (i.e. *out == NULL) then a buffer is allocated and populated with the encoding. 
Name: ASN1_item_ex_i2d; Comment: Encode an item, taking care of IMPLICIT tagging (if any). This function performs the normal item handling: it can be used in external types. 
Name: asn1_set_seq_out; Comment: Output the content octets of SET OF or SEQUENCE OF 
Name: asn1_ex_i2c; Comment: Produce content octets from a structure 
Name: ASN1_item_free; Comment: Free up an ASN1 structure 
Name: ASN1_item_ex_new; Comment: Allocate an ASN1 structure 
Name: asn1_primitive_new; Comment: NB: could probably combine most of the real XXX_new() behaviour and junk all the old functions. 
Name: ASN1_SCTX_new; Comment: General ASN1 structure recursive scanner: iterate through all fields passing details to a callback. 
Name: asn1_get_choice_selector; Comment: Given an ASN1_ITEM CHOICE type return the selector value 
Name: asn1_set_choice_selector; Comment: Given an ASN1_ITEM CHOICE type set the selector value, return old value. 
Name: asn1_do_lock; Comment: Do atomic reference counting. The value 'op' decides what to do. If it is +1 then the count is incremented. If |op| is 0, lock is initialised and count is set to 1. If |op| is -1, count is decremented and the return value is the current reference count or 0 if no reference count is active. It returns -1 on initialisation error. Used by ASN1_SEQUENCE construct of X509, X509_REQ, X509_CRL objects 
Name: asn1_get_field_ptr; Comment: Given an ASN1_TEMPLATE get a pointer to a field 
Name: asn1_do_adb; Comment: Handle ANY DEFINED BY template, find the selector, look up the relevant ASN1_TEMPLATE in the table and return it. 
Name: NETSCAPE_SPKI_print; Comment: Print out an SPKI 
Name: X509_ALGOR_set_md; Comment: Set up an X509_ALGOR DigestAlgorithmIdentifier from an EVP_MD 
Name: uint32_new; Comment: 32-bit variants 
Name: uint32_c2i; Comment: Absolute value of INT32_MIN: we can't just use -INT32_MIN as it produces overflow warnings. 
Name: num_bits_ulong; Comment: Originally BN_num_bits_word was called to perform this operation, but trouble is that there is no guarantee that sizeof(long) equals to sizeof(BN_ULONG). BN_ULONG is a configurable type that can be as wide as long, but also double or half... 
Name: BF_cfb64_encrypt; Comment: None 
Name: BF_options; Comment: Blowfish as implemented from 'Blowfish: Springer-Verlag paper' (From LECTURE NOTES IN COMPUTER SCIENCE 809, FAST SOFTWARE ENCRYPTION, CAMBRIDGE SECURITY WORKSHOP, CAMBRIDGE, U.K., DECEMBER 9-11, 1993) 
Name: BF_ofb64_encrypt; Comment: None 
Name: bio_call_callback; Comment: Helper function to work out whether to call the new style callback or the old one, and translate between the two. This has a long return type for consistency with the old callback. Similarly for the "long" used for "inret" 
Name: bio_read_intern; Comment: This is essentially the same as BIO_read_ex() except that it allows 0 or a negative value to indicate failure (retryable or not) in the return. This is for compatibility with the old style BIO_read(), where existing code may make assumptions about the return value that it might get. 
Name: BIO_ctrl_pending; Comment: It is unfortunate to duplicate in functions what the BIO_(w)pending macros do; but those macros have inappropriate return type, and for interfacingfrom other programming languages, C macros aren't much of a help anyway. 
Name: BIO_push; Comment: put the 'bio' on the end of b's list of operators 
Name: BIO_pop; Comment: Remove the first and return the rest 
Name: bwrite_conv; Comment: Conversion for old style bwrite to new style 
Name: bread_conv; Comment: Conversion for old style bread to new style 
Name: bio_nread0; Comment: WARNING: The non-copying interface is largely untested as of yet and may contain bugs. 
Name: bio_nwrite0; Comment: -non-copying interface: provide pointer to region to write to bio_nwrite0: check how much space is available bio_nwrite: also increase length (example usage: bio_nwrite0(), write to buffer, bio_nwrite() or just bio_nwrite(), write to buffer) 
Name: BIO_new_bio_pair; Comment: Exported convenience functions 
Name: BIO_nread0; Comment: BIO_nread0/nread/nwrite0/nwrite are available only for BIO pairs for now (conceivably some other BIOs could allow non-copying reads and writes too.) 
Name: dgram_sctp_write; Comment: dgram_sctp_write - send message on SCTP socket @b: BIO to write to @in: data to send @inl: amount of bytes in @in to send Returns -1 on error or the sent amount of bytes on success 
Name: BIO_dgram_sctp_wait_for_dry; Comment: BIO_dgram_sctp_wait_for_dry - Wait for SCTP SENDER_DRY event @b: The BIO to check for the dry event Wait until the peer confirms all packets have been received, and so that our kernel doesn't have anything to send anymore. This is only received by the peer's kernel, not the application. Returns: -1 on error 0 when not dry yet 1 when dry 
Name: BIO_new_fd; Comment: Dummy placeholder for BIO_s_fd... 
Name: xopenlog; Comment: Unix/Watt32 
Name: BIO_s_mem; Comment: bio->num is used to hold the value to return on 'empty', if it is 0, should_retry is not set 
Name: mem_buf_sync; Comment: Reallocate memory buffer if read pointer differs 
Name: BIO_ADDR_new; Comment: *********************************************************************Address structure 
Name: BIO_ADDR_make; Comment: BIO_ADDR_make - non-public routine to fill a BIO_ADDR with the contents of a struct sockaddr. 
Name: addr_strings; Comment: -addr_strings - helper function to get host and service names @ap: the BIO_ADDR that has the input info @numeric: 0 if actual names should be returned, 1 if the numeric representation should be returned. @hostname: a pointer to a pointer to a memory area to store the host name or numeric representation. Unused if NULL. @service: a pointer to a pointer to a memory area to store the service name or numeric representation. Unused if NULL. The return value is 0 on failure, with the error code in the error stack, and 1 on success. 
Name: BIO_ADDR_sockaddr; Comment: BIO_ADDR_sockaddr - non-public routine to return the struct sockaddr for a given BIO_ADDR. In reality, this is simply a type safe cast. The returned struct sockaddr is const, so it can't be tampered with. 
Name: BIO_ADDR_sockaddr_noconst; Comment: BIO_ADDR_sockaddr_noconst - non-public function that does the same as BIO_ADDR_sockaddr, but returns a non-const. USE WITH CARE, as it allows you to tamper with the data (and thereby the contents of the input BIO_ADDR). 
Name: BIO_ADDR_sockaddr_size; Comment: BIO_ADDR_sockaddr_size - non-public function that returns the size of the struct sockaddr the BIO_ADDR is using. If the protocol family isn't set or is something other than AF_INET, AF_INET6 or AF_UNIX, the size of the BIO_ADDR type is returned. 
Name: BIO_ADDRINFO_next; Comment: *********************************************************************Address info database 
Name: BIO_ADDRINFO_sockaddr_size; Comment: BIO_ADDRINFO_sockaddr_size - non-public function that returns the size of the struct sockaddr inside the BIO_ADDRINFO. 
Name: BIO_ADDRINFO_sockaddr; Comment: BIO_ADDRINFO_sockaddr - non-public function that returns bai_addr as the struct sockaddr it is. 
Name: BIO_parse_hostserv; Comment: -The specs in hostserv can take these forms: host:service => *host = "host", *service = "service" host:* => *host = "host", *service = NULL host: => *host = "host", *service = NULL :service => *host = NULL, *service = "service" *:service => *host = NULL, *service = "service" in case no : is present in the string, the result depends on hostserv_prio, as follows: when hostserv_prio == BIO_PARSE_PRIO_HOST host => *host = "host", *service untouched when hostserv_prio == BIO_PARSE_PRIO_SERV service => *host untouched, *service = "service" 
Name: addrinfo_wrap; Comment: addrinfo_wrap is used to build our own addrinfo "chain".(it has only one entry, so calling it a chain may be a stretch) It should ONLY be called when getaddrinfo() and friends aren't available, OR when dealing with a non IP protocol family, such as AF_UNIX the return value is 1 on success, or 0 on failure, which only happens if a memory allocation error occurred. 
Name: BIO_lookup_ex; Comment: -BIO_lookup_ex - look up the node and service you want to connect to. @node: the node you want to connect to. @service: the service you want to connect to. @lookup_type: declare intent with the result, client or server. @family: the address family you want to use. Use AF_UNSPEC for any, or AF_INET, AF_INET6 or AF_UNIX. @socktype: The socket type you want to use. Can be SOCK_STREAM, SOCK_DGRAM or 0 for all. @protocol: The protocol to use, e.g. IPPROTO_TCP or IPPROTO_UDP or 0 for all. Note that some platforms may not return IPPROTO_SCTP without explicitly requesting it (i.e. IPPROTO_SCTP may not be returned with 0 for the protocol) @res: Storage place for the resulting list of returned addresses This will do a lookup of the node and service that you want to connect to. It returns a linked list of different addresses you can try to connect to. When no longer needed you should call BIO_ADDRINFO_free() to free the result. The return value is 1 on success or 0 in case of error. 
Name: BIO_printf; Comment: *************************************************************************
Name: BIO_snprintf; Comment: As snprintf is not available everywhere, we provide our own implementation. This function has nothing to do with BIOs, but it's closely related to BIO_printf, and we need *some* name prefix ... (XXX the function should be renamed, but to what?) 
Name: BIO_socket; Comment: -BIO_socket - create a socket @domain: the socket domain (AF_INET, AF_INET6, AF_UNIX, ...) @socktype: the socket type (SOCK_STEAM, SOCK_DGRAM) @protocol: the protocol to use (IPPROTO_TCP, IPPROTO_UDP) @options: BIO socket options (currently unused) Creates a socket. This should be called before calling any of BIO_connect and BIO_listen. Returns the file descriptor on success or INVALID_SOCKET on failure. On failure errno is set, and a status is added to the OpenSSL error stack. 
Name: BIO_connect; Comment: -BIO_connect - connect to an address @sock: the socket to connect with @addr: the address to connect to @options: BIO socket options Connects to the address using the given socket and options. Options can be a combination of the following: - BIO_SOCK_KEEPALIVE: enable regularly sending keep-alive messages. - BIO_SOCK_NONBLOCK: Make the socket non-blocking. - BIO_SOCK_NODELAY: don't delay small messages. options holds BIO socket options that can be used You should call this for every address returned by BIO_lookup until the connection is successful. Returns 1 on success or 0 on failure. On failure errno is set and an error status is added to the OpenSSL error stack. 
Name: BIO_bind; Comment: -BIO_bind - bind socket to address @sock: the socket to set @addr: local address to bind to @options: BIO socket options Binds to the address using the given socket and options. Options can be a combination of the following: - BIO_SOCK_REUSEADDR: Try to reuse the address and port combination for a recently closed port. When restarting the program it could be that the port is still in use. If you set to BIO_SOCK_REUSEADDR option it will try to reuse the port anyway. It's recommended that you use this. 
Name: BIO_listen; Comment: -BIO_listen - Creates a listen socket @sock: the socket to listen with @addr: local address to bind to @options: BIO socket options Binds to the address using the given socket and options, then starts listening for incoming connections. Options can be a combination of the following: - BIO_SOCK_KEEPALIVE: enable regularly sending keep-alive messages. - BIO_SOCK_NONBLOCK: Make the socket non-blocking. - BIO_SOCK_NODELAY: don't delay small messages. - BIO_SOCK_REUSEADDR: Try to reuse the address and port combination for a recently closed port. - BIO_SOCK_V6_ONLY: When creating an IPv6 socket, make it listen only for IPv6 addresses and not IPv4 addresses mapped to IPv6. It's recommended that you set up both an IPv6 and IPv4 listen socket, and then check both for new clients that connect to it. You want to set up the socket as non-blocking in that case since else it could hang. Not all operating systems support IPv4 addresses on an IPv6 socket, and for others it's an option. If you pass the BIO_LISTEN_V6_ONLY it will try to create the IPv6 sockets to only listen for IPv6 connection. It could be that the first BIO_listen() call will listen to all the IPv6 and IPv4 addresses and that then trying to bind to the IPv4 address will fail. We can't tell the difference between already listening ourself to it and someone else listening to it when failing and errno is EADDRINUSE, so it's recommended to not give an error in that case if the first call was successful. When restarting the program it could be that the port is still in use. If you set to BIO_SOCK_REUSEADDR option it will try to reuse the port anyway. It's recommended that you use this. 
Name: BIO_accept_ex; Comment: -BIO_accept_ex - Accept new incoming connections @sock: the listening socket @addr: the BIO_ADDR to store the peer address in @options: BIO socket options, applied on the accepted socket. 
Name: BIO_closesocket; Comment: -BIO_closesocket - Close a socket @sock: the socket to close 
Name: blake2b_set_lastblock; Comment: Set that it's the last block we'll compress 
Name: blake2b_init0; Comment: Initialize the hashing state. 
Name: BLAKE2b_Init; Comment: Initialize the hashing context. Always returns 1. 
Name: blake2b_compress; Comment: Permute the state while xoring in the block of data. 
Name: BLAKE2b_Update; Comment: Absorb the input data into the hash state. Always returns 1. 
Name: BLAKE2b_Final; Comment: Calculate the final hash and save it in md. Always returns 1. 
Name: blake2s_set_lastblock; Comment: Set that it's the last block we'll compress 
Name: blake2s_init0; Comment: Initialize the hashing state. 
Name: blake2s_init_param; Comment: init2 xors IV with input parameter block 
Name: BLAKE2s_Init; Comment: Initialize the hashing context. Always returns 1. 
Name: blake2s_compress; Comment: Permute the state while xoring in the block of data. 
Name: BLAKE2s_Update; Comment: Absorb the input data into the hash state. Always returns 1. 
Name: BLAKE2s_Final; Comment: Calculate the final hash and save it in md. Always returns 1. 
Name: BN_add; Comment: signed add of b to a. 
Name: BN_sub; Comment: signed sub of b from a. 
Name: BN_uadd; Comment: unsigned add of b to a, r can be equal to a or b. 
Name: BN_usub; Comment: unsigned subtraction of b from a, a must be larger than b. 
Name: bn_mul_add_words; Comment: None defined(BN_UMULT_HIGH)) 
Name: bn_div_words; Comment: I need to test this some more :-( 
Name: bn_mul_mont; Comment: This is essentially reference implementation, which may or may not result in performance improvement. E.g. on IA-32 this routine was observed to give 40% faster rsa1024 private key operations and 10% faster rsa4096 ones, while on AMD64 it improves rsa1024 sign only by 10% and *worsens* rsa4096 sign by 15%. Once again, it's a reference implementation, one to be used as starting point for platform-specific assembler. Mentioned numbers apply to compiler generated code compiled with and without -DOPENSSL_BN_ASM_MONT and can vary not only from platform to platform, but even for compiler versions. Assembler vs. assembler improvement coefficients can [and are known to] differ and are to be documented elsewhere. 
Name: bn_mul_mont; Comment: Return value of 0 indicates that multiplication/convolution was not performed to signal the caller to fall down to alternative/original code-path. 
Name: BN_get_rfc2409_prime_768; Comment: - "First Oakley Default Group" from RFC2409, section 6.1. The prime is: 2^768 - 2 ^704 - 1 + 2^64 { [2^638 pi] + 149686 }RFC2409 specifies a generator of 2. RFC2412 specifies a generator of of 22. 
Name: BN_get_rfc2409_prime_1024; Comment: - "Second Oakley Default Group" from RFC2409, section 6.2. The prime is: 2^1024 - 2^960 - 1 + 2^64 { [2^894 pi] + 129093 }.RFC2409 specifies a generator of 2. RFC2412 specifies a generator of 22. 
Name: BN_get_rfc3526_prime_1536; Comment: - "1536-bit MODP Group" from RFC3526, Section 2. The prime is: 2^1536 - 2^1472 - 1 + 2^64 { [2^1406 pi] + 741804 }RFC3526 specifies a generator of 2. RFC2312 specifies a generator of 22. 
Name: BN_get_rfc3526_prime_2048; Comment: - "2048-bit MODP Group" from RFC3526, Section 3. The prime is: 2^2048 - 2^1984 - 1 + 2^64 { [2^1918 pi] + 124476 }RFC3526 specifies a generator of 2. 
Name: BN_get_rfc3526_prime_3072; Comment: - "3072-bit MODP Group" from RFC3526, Section 4. The prime is: 2^3072 - 2^3008 - 1 + 2^64 { [2^2942 pi] + 1690314 }RFC3526 specifies a generator of 2. 
Name: BN_get_rfc3526_prime_4096; Comment: - "4096-bit MODP Group" from RFC3526, Section 5. The prime is: 2^4096 - 2^4032 - 1 + 2^64 { [2^3966 pi] + 240904 }RFC3526 specifies a generator of 2. 
Name: BN_get_rfc3526_prime_6144; Comment: - "6144-bit MODP Group" from RFC3526, Section 6. The prime is: 2^6144 - 2^6080 - 1 + 2^64 { [2^6014 pi] + 929484 }RFC3526 specifies a generator of 2. 
Name: BN_get_rfc3526_prime_8192; Comment: - "8192-bit MODP Group" from RFC3526, Section 7. The prime is: 2^8192 - 2^8128 - 1 + 2^64 { [2^8062 pi] + 4743158 }RFC3526 specifies a generator of 2. 
Name: BN_STACK_init; Comment: **********
Name: BN_POOL_init; Comment: *********
Name: bn_div_3_words; Comment: Interface is somewhat quirky, |m| is pointer to most significant limb, and less significant limb is referred at |m[-1]|. This means that caller is responsible for ensuring that |m[-1]| is valid. Second condition that has to be met is that |d0|'s most significant bit has to be set. Or in other words divisor has to be "bit-aligned to the left." bn_div_fixed_top does all this. The subroutine considers four limbs, two of which are "overlapping," hence the name... 
Name: BN_div; Comment: -BN_div computes dv := num / divisor, rounding towards zero, and sets up rm such that dv*divisor + rm = num holds. Thus: dv->neg == num->neg ^ divisor->neg (unless the result is zero) rm->neg == num->neg (unless the remainder is zero) If 'dv' or 'rm' is NULL, the respective value is not returned. 
Name: bn_div_fixed_top; Comment: None 
Name: BN_exp; Comment: this one works - simple but works 
Name: MOD_EXP_CTIME_COPY_TO_PREBUF; Comment: BN_mod_exp_mont_consttime() stores the precomputed powers in a specific layout so that accessing any of these table values shows the same access pattern as far as cache lines are concerned. The following functions are used to transfer a BIGNUM from/to that table. 
Name: BN_mod_exp_mont_consttime; Comment: This variant of BN_mod_exp_mont() uses fixed windows and the special precomputation memory layout to limit data-dependency to a minimum to protect secret exponents (cf. the hyper-threading timing attacks pointed out by Colin Percival, http:www.daemonology.nethyperthreading-considered-harmful) 
Name: BN_mod_exp_simple; Comment: The old fallback, simple version :-) 
Name: BN_mod_inverse_no_branch; Comment: BN_mod_inverse_no_branch is a special version of BN_mod_inverse. It does not contain branches that may leak sensitive information. 
Name: BN_gcd; Comment: - This function is based on the constant-time GCD work by Bernstein and Yang: https:eprint.iacr.org2019266Generalized fast GCD function to allow even inputs. The algorithm first finds the shared powers of 2 between the inputs, and removes them, reducing at least one of the inputs to an odd value. Then it proceeds to calculate the GCD. Before returning the resulting GCD, we take care of adding back the powers of two removed at the beginning. Note 1: we assume the bit length of both inputs is public information, since access to top potentially leaks this information. 
Name: bn_compute_wNAF; Comment: Determine the modified width-(w+1) Non-Adjacent Form (wNAF) of 'scalar'. This is an array r[] of values that are either zero or odd with an absolute value less than 2^w satisfying scalar = _sum_j r[j]*2^j where at most one of any w+1 consecutive digits is non-zero with the exception that the most significant digit may be only w-1 zeros away from that next non-zero digit. 
Name: BN_kronecker; Comment: Returns -2 for errors because both -1 and 0 are valid results. 
Name: BN_set_params; Comment: (1<<bn_limit_bits_mont) 
Name: bn_num_bits_consttime; Comment: This function still leaks `a->dmax`: it's caller's responsibility to expand the input `a` in advance to a public length. 
Name: bn_expand_internal; Comment: The caller MUST check that words > b->dmax before calling this 
Name: bn_expand2; Comment: This is an internal function that should not be used in applications. It ensures that 'b' has enough room for a 'words' word number and initialises any unused part of b->d with leading zeros. It is mostly used by the various BIGNUM routines. If there is an error, NULL is returned. If not, 'b' is returned. 
Name: bn2binpad; Comment: ignore negative 
Name: bn_cmp_part_words; Comment: Here follows a specialised variants of bn_cmp_words(). It has the capability of performing the operation on arrays of different sizes. The sizes of those arrays is expressed through cl, which is the common length ( basically, min(len(a),len(b)) ), and dl, which is the delta between the two lengths, calculated as len(a)-len(b). All lengths are the number of BN_ULONGs... 
Name: BN_consttime_swap; Comment: -Constant-time conditional swap of a and b. a and b are swapped if condition is not 0. nwords is the number of words to swap. Assumes that at least nwords are allocated in both a and b. Assumes that no more than nwords are used by either a or b. 
Name: BN_security_bits; Comment: Bits of security, see SP800-57 
Name: BN_GENCB_set_old; Comment: Populate a BN_GENCB structure with an "old"-style callback 
Name: BN_GENCB_set; Comment: Populate a BN_GENCB structure with a "new"-style callback 
Name: bn_mod_add_fixed_top; Comment: Nonewhich is replaced with addition, subtracting modulus, and conditional move depending on whether or not subtraction borrowed. 
Name: bn_mod_sub_fixed_top; Comment: BN_mod_sub variant that may be used if both a and b are non-negative, a is less than m, while b is of same bit width as m. It's implemented as subtraction followed by two conditional additions. 0 <= a < m 0 <= b < 2^w < 2*m after subtraction -2*m < r = a - b < m Thus it takes up to two conditional additions to make |r| positive. 
Name: BN_mod_sub_quick; Comment: BN_mod_sub variant that may be used if both a and b are non-negative and less than m 
Name: BN_mod_mul; Comment: slow but works 
Name: BN_mod_lshift1_quick; Comment: BN_mod_lshift1 variant that may be used if a is non-negative and less than m 
Name: BN_mod_lshift_quick; Comment: BN_mod_lshift variant that may be used if a is non-negative and less than m 
Name: bn_sub_part_words; Comment: Here follows specialised variants of bn_add_words() and bn_sub_words(). They have the property performing operations on arrays of different sizes. The sizes of those arrays is expressed through cl, which is the common length ( basically, min(len(a),len(b)) ), and dl, which is the delta between the two lengths, calculated as len(a)-len(b). All lengths are the number of BN_ULONGs... For the operations that require a result array as parameter, it must have the length cl+abs(dl). These functions should probably end up in bn_asm.c as soon as there are assembler counterparts for the systems that use assembler files. 
Name: bn_mul_recursive; Comment: dnX may not be positive, but n2/2+dnX has to be 
Name: bn_mul_part_recursive; Comment: tnX may not be negative but less than n 
Name: bn_mul_low_recursive; Comment: -a and b must be the same size, which is n2. r needs to be n2 words and t needs to be n2*2 
Name: BN_bn2hex; Comment: Must 'OPENSSL_free' the returned data 
Name: BN_bn2dec; Comment: Must 'OPENSSL_free' the returned data 
Name: bnrand_range; Comment: random number r: 0 <= r < range 
Name: BN_generate_dsa_nonce; Comment: BN_generate_dsa_nonce generates a random number 0 <= out < range. Unlike BN_rand_range, it also includes the contents of |priv| and |message| in the generation so that an RNG failure isn't fatal as long as |priv| remains secret. This is intended for use in DSA and ECDSA where an RNG weakness leads directly to private key exposure unless this function is used. 
Name: BN_reciprocal; Comment: r := 2^len / m 
Name: bn_lshift_fixed_top; Comment: In respect to shift factor the execution time is invariant of |n % BN_BITS2|, but not |n / BN_BITS2|. Or in other words pre-condition for constant-time-ness is |n < BN_BITS2| or |n / BN_BITS2| being non-secret. 
Name: bn_rshift_fixed_top; Comment: In respect to shift factor the execution time is invariant of |n % BN_BITS2|, but not |n / BN_BITS2|. Or in other words pre-condition for constant-time-ness for sufficiently[!] zero-padded inputs is |n < BN_BITS2| or |n / BN_BITS2| being non-secret. 
Name: BN_sqr; Comment: I've just gone over this and it is now %20 faster on x86 - eay - 27 Jun 96 
Name: bn_sqr_normal; Comment: tmp must have 2*n words 
Name: bn_sqr_recursive; Comment: -r is 2*n words in size, a and b are both n words in size. (There's not actually a 'b' here ...) n must be a power of 2. We multiply and return the result. t must be 2*n words in size We calculate a[0]*b[0] a[0]*b[0]+a[1]*b[1]+(a[0]-a[1])*(b[1]-b[0]) a[1]*b[1] 
Name: bn_x931_derive_pi; Comment: X9.31 prime derivation. This is used to generate the primes pi (p1, p2, q1, q2) from a parameter Xpi by checking successive odd integers. 
Name: BN_X931_derive_prime_ex; Comment: This is the main X9.31 prime derivation function. From parameters Xp1, Xp2 and Xp derive the prime p. If the parameters p1 or p2 are not NULL they will be returned too: this is needed for testing. 
Name: BN_X931_generate_Xpq; Comment: Generate pair of parameters Xp, Xq for X9.31 prime generation. Note: nbits parameter is sum of number of bits in both. 
Name: BN_X931_generate_prime_ex; Comment: Generate primes using X9.31 algorithm. Of the values p, p1, p2, Xp1 and Xp2 only 'p' needs to be non-NULL. If any of the others are not NULL the relevant parameter will be stored in it. Due to the fact that |Xp - Xq| > 2^(nbits - 100) must be satisfied Xp and Xq are generated using the previous function and supplied as input. 
Name: sec_alloc_realloc; Comment: Allocate a block of secure memory; copy over old data if therewas any, and then free it. 
Name: Camellia_cfb128_encrypt; Comment: None 
Name: Camellia_cfb1_encrypt; Comment: N.B. This expects the input to be packed, MS bit first 
Name: Camellia_ofb128_encrypt; Comment: None 
Name: CAST_cfb64_encrypt; Comment: None 
Name: CAST_ofb64_encrypt; Comment: None 
Name: chacha20_core; Comment: chacha_core performs 20 rounds of ChaCha on the input words in|input| and writes the 64 output bytes to |output|. 
Name: make_kn; Comment: Make temporary keys K1 and K2 
Name: cmac_size; Comment: CMAC "ASN1" method. This is just here to indicate the maximum CMAC output length and to free up a CMAC key. 
Name: pkey_cmac_init; Comment: The context structure and "key" is simply a CMAC_CTX 
Name: cms_si_cb; Comment: Minor tweak to operation: free up signer key, cert 
Name: cms_ri_cb; Comment: Free up RecipientInfo additional data 
Name: cms_cb; Comment: CMS streaming support 
Name: CMS_signed_get_attr_count; Comment: CMS SignedData Attribute utilities 
Name: cms_attrib_get; Comment: Retrieve an attribute by nid from a stack of attributes starting at index *lastpos + 1. Returns the attribute or NULL if there is no attribute. If an attribute was found *lastpos returns the index of the found attribute. 
Name: CMS_si_check_attributes; Comment: Check that the signerinfo attributes obey the attribute rules which includes the following checks - If any signed attributes exist then there must be a Content Type and Message Digest attribute in the signed attributes. - The countersignature attribute is an optional unsigned attribute only. - Content Type, Message Digest, and Signing time attributes are signed attributes. Only one instance of each is allowed, with each of these attributes containing a single attribute value in its set. 
Name: cms_CompressedData_create; Comment: CMS CompressedData Utilities 
Name: cms_DigestedData_create; Comment: CMS DigestedData Utilities 
Name: cms_EncryptedContent_init_bio; Comment: Return BIO based on EncryptedContentInfo and key 
Name: cms_get0_enveloped; Comment: CMS EnvelopedData Utilities 
Name: cms_RecipientInfo_ktri_init; Comment: Initialise a ktri based on passed certificate and key 
Name: CMS_add1_recipient_cert; Comment: Add a recipient certificate using appropriate type of RecipientInfo 
Name: cms_RecipientInfo_ktri_encrypt; Comment: Encrypt content key in key transport recipient info 
Name: cms_RecipientInfo_ktri_decrypt; Comment: Decrypt content key from KTRI 
Name: CMS_RecipientInfo_kekri_id_cmp; Comment: Key Encrypted Key (KEK) RecipientInfo routines 
Name: aes_wrap_keylen; Comment: For now hard code AES key wrap info 
Name: cms_RecipientInfo_kekri_encrypt; Comment: Encrypt content key in KEK recipient info 
Name: cms_RecipientInfo_kekri_decrypt; Comment: Decrypt content key in KEK recipient info 
Name: cms_env_set_originfo_version; Comment: Check structures and fixup version numbers (if necessary) 
Name: cms_pkey_get_ri_type; Comment: Get RecipientInfo type (if any) supported by a key (public or private). To retain compatibility with previous behaviour if the ctrl value isn't supported we assume key transport. 
Name: CMS_get1_ReceiptRequest; Comment: ESS services: for now just Signed Receipt related 
Name: cms_msgSigDigest; Comment: Digest a SignerInfo structure for msgSigDigest attribute processing 
Name: cms_msgSigDigest_add1; Comment: Add a msgSigDigest attribute to a SignerInfo 
Name: cms_Receipt_verify; Comment: Verify signed receipt after it has already passed normal CMS verify 
Name: cms_encode_Receipt; Comment: Encode a Receipt into an OCTET STRING read for including into content of a SignedData ContentInfo. 
Name: i2d_CMS_bio_stream; Comment: CMS wrappers round generalised stream and MIME routines 
Name: CMS_RecipientInfo_kari_get0_alg; Comment: Key Agreement Recipient Info (KARI) routines 
Name: cms_kek_cipher; Comment: Derive KEK and decrypt/encrypt with it to produce either the original CEK or the encrypted CEK. 
Name: cms_kari_create_ephemeral_key; Comment: Create ephemeral key and initialise context based on it 
Name: cms_RecipientInfo_kari_init; Comment: Initialise a kari based on passed certificate and key 
Name: cms_RecipientInfo_kari_encrypt; Comment: Encrypt content key in key agreement recipient info 
Name: CMS_get0_content; Comment: Return an OCTET STRING pointer to content. This allows it to be accessed or set later. 
Name: cms_get0_econtent_type; Comment: Return an ASN1_OBJECT pointer to content type. This allows it to be accessed or set later. 
Name: cms_DigestAlgorithm_init_bio; Comment: Create a digest BIO from an X509_ALGOR structure 
Name: cms_DigestAlgorithm_find_ctx; Comment: Locate a message digest content from a BIO chain based on SignerInfo 
Name: kek_unwrap_key; Comment: This is an implementation of the key wrapping mechanism in RFC3211, at some point this should go into EVP. 
Name: cms_RecipientInfo_pwri_crypt; Comment: Encrypt/Decrypt content key in PWRI recipient info 
Name: cms_get0_signed; Comment: CMS SignedData Utilities 
Name: CMS_SignedData_init; Comment: Just initialise SignedData e.g. for certs only structure 
Name: cms_sd_set_version; Comment: Check structures and fixup version numbers (if necessary) 
Name: cms_set_si_contentType_attr; Comment: RFC 5652 Section 11.1 Content Type The content-type attribute within signed-data MUST 1) be present if there are signed attributes 2) match the content type in the signed-data, 3) be a signed attribute. 4) not have more than one copy of the attribute. Note that since the CMS_SignerInfo_sign() always adds the "signing time" attribute, the content type attribute MUST be added also. Assumptions: This assumes that the attribute does not already exist. 
Name: cms_copy_messageDigest; Comment: Copy an existing messageDigest value 
Name: cms_SignedData_init_bio; Comment: Create a chain of digest BIOs from a CMS ContentInfo 
Name: cms_add_cipher_smcap; Comment: Check to see if a cipher exists and if so add S/MIME capabilities 
Name: zlib_zalloc; Comment: memory allocations functions for zlib initialisation 
Name: _CONF_get_section; Comment: Up until OpenSSL 0.9.5a, this was get_section 
Name: _CONF_new_section; Comment: Up until OpenSSL 0.9.5a, this was new_section 
Name: process_include; Comment: Check whether included path is a directory. Returns next BIO to process and in case of a directory also an opened directory context and the include path. 
Name: get_next_file; Comment: Get next file from the directory path. Returns BIO of the next file to read and updates dirctx. 
Name: CONF_set_nconf; Comment: Init a 'CONF' structure from an old LHASH 
Name: CONF_set_default_method; Comment: The following section contains the "CONF classic" functions, rewritten in terms of the new CONF interface. 
Name: NCONF_new; Comment: The following section contains the "New CONF" functions. They are completely centralised around a new CONF structure that may contain basically anything, but at least a method pointer and a table of data. These functions are also written in terms of the bridge functions used by the "CONF classic" functions, for consistency. 
Name: OPENSSL_INIT_new; Comment: These routines call the C malloc/free, to avoid intermixing with OpenSSL function pointers before the library is initialized. 
Name: OPENSSL_load_builtin_modules; Comment: Load all OpenSSL builtin modules 
Name: CONF_modules_load; Comment: Main function: load modules from a CONF structure 
Name: module_load_dso; Comment: Load a module from a DSO 
Name: module_add; Comment: add module to list 
Name: module_find; Comment: Find a module from the list. We allow module names of the form modname.XXXX to just search for modname to allow the same module to be initialized more than once. 
Name: module_init; Comment: initialize a module 
Name: CONF_modules_unload; Comment: Unload any dynamic modules that have a link count of zero: i.e. have no active initialized modules. If 'all' is set then all modules are unloaded including static ones. 
Name: module_free; Comment: unload a single module 
Name: CONF_modules_finish; Comment: finish and free up all modules instances 
Name: module_finish; Comment: finish a module instance 
Name: CONF_module_add; Comment: Add a static module to OpenSSL 
Name: CONF_imodule_get_name; Comment: Utility functions 
Name: CONF_get1_default_config_file; Comment: Return default config file name 
Name: CONF_parse_list; Comment: This function takes a list separated by 'sep' and calls the callback function giving the start and length of each member optionally stripping leading and trailing whitespace. This can be used to parse comma separated lists for example. 
Name: conf_ssl_get; Comment: Returns the set of commands with index |idx| previously searched for via conf_ssl_name_find. Also stores the name of the set of commands in |*name| and the number of commands in the set in |*cnt|. 
Name: conf_ssl_name_find; Comment: Search for the named set of commands given in |name|. On success return the index for the command set in |*idx|. Returns 1 on success or 0 on failure. 
Name: conf_ssl_get_cmd; Comment: Given a command set |cmd|, return details on the command at index |idx| which must be less than the number of commands in the set (as returned by conf_ssl_get). The name of the command will be returned in |*cmdstr| and the argument is returned in |*arg|. 
Name: ct_base64_decode; Comment: Decodes the base64 string |in| into |out|. A new string will be malloc'd and assigned to |out|. This will be owned by the caller. Do not provide a pre-allocated string in |out|. 
Name: CTLOG_new_from_base64; Comment: Allocate, build and returns a new |ct_log| from input |pkey_base64| It returns 1 on success, 0 on decoding failure, or invalid parameter if any -1 on internal (malloc) failure 
Name: ct_v1_log_id_from_pkey; Comment: Converts a log's public key into a SHA256 log ID 
Name: ctlog_store_load_log; Comment: Called by CONF_parse_list, which stops if this returns <= 0, Otherwise, one bad log entry would stop loading of any of the following log entries. It may stop parsing and returns -1 on any internal (malloc) error. 
Name: CTLOG_new; Comment: Initialize a new CTLOG object. Takes ownership of the public key. Copies the name. 
Name: CTLOG_free; Comment: Frees CT log and associated structures 
Name: CTLOG_STORE_get0_log_by_id; Comment: Given a log ID, finds the matching log. Returns NULL if no match found. 
Name: ct_x509_get_ext; Comment: Finds the index of the first extension with the given NID in cert. If there is more than one extension with that NID, *is_duplicated is set to 1, otherwise 0 (unless it is NULL). 
Name: ct_x509_cert_fixup; Comment: Modifies a certificate by deleting extensions and copying the issuer and AKID from the presigner certificate, if necessary. Returns 1 on success, 0 otherwise. 
Name: sct_ctx_update; Comment: Update encoding for SCT signature verification/generation to supplied EVP_MD_CTX. 
Name: DES_cbc_cksum; Comment: Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: DES_ede3_cfb64_encrypt; Comment: None 
Name: DES_ede3_cfb_encrypt; Comment: This is compatible with the single key CFB-r for DES, even thought that's not what EVP needs. 
Name: DES_cfb64_encrypt; Comment: None 
Name: DES_cfb_encrypt; Comment: Until Aug 1 2003 this function did not correctly implement CFB-r, so it will not be compatible with any encryption prior to that date. Ben. 
Name: DES_ecb3_encrypt; Comment: Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: DES_ede3_ofb64_encrypt; Comment: None 
Name: DES_ofb64_encrypt; Comment: None 
Name: DES_ofb_encrypt; Comment: The input and output are loaded in multiples of 8 bits. What this means is that if you have numbits=12 and length=2 the first 12 bits will be retrieved from the first byte and half the second. The second 12 bits will come from the 3rd and half the 4th byte. 
Name: DES_pcbc_encrypt; Comment: Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: DES_set_key_checked; Comment: -return 0 if key parity is odd (correct), return -1 if key parity error, return -2 if illegal weak key. 
Name: DES_xcbc_encrypt; Comment: RSA's DESX 
Name: d2i_dhp; Comment: i2dd2i like DH parameter functions which use the appropriate routine for PKCS#3 DH or X9.42 DH. 
Name: dh_priv_decode; Comment: PKCS#8 DH is defined in PKCS#11 of all places. It is similar to DH in thatthe AlgorithmIdentifier contains the parameters, the private key is explicitly included and the pubkey must be recalculated. 
Name: dh_cb; Comment: Override the default free and new methods 
Name: d2i_DHxparams; Comment: Application public function: read in X9.42 DH parameters into DH structure 
Name: DH_check_params_ex; Comment: -Check that p and g are suitable enough p is odd 1 < g < p - 1 
Name: DH_check_ex; Comment: -Check that p is a safe prime and g is a suitable generator. 
Name: dh_builtin_genparams; Comment: - We generate DH parameters as follows find a prime p which is prime_len bits long, where q=(p-1)2 is also prime. In the following we assume that g is not 0, 1 or p-1, since it would generate only trivial subgroups. For this case, g is a generator of the order-q subgroup if g^q mod p == 1. Or in terms of the Legendre symbol: (gp) == 1. Having said all that, there is another special case method for the generators 2, 3 and 5. Using the quadratic reciprocity law it is possible to solve (gp) == 1 for the special values 2, 3, 5: (2p) == 1 if p mod 8 == 1 or 7. (3p) == 1 if p mod 12 == 1 or 11. (5p) == 1 if p mod 5 == 1 or 4. See for instance: https:en.wikipedia.orgwikiLegendre_symbolSince all safe primes > 7 must satisfy p mod 12 == 11 and all safe primes > 11 must satisfy p mod 5 != 1 we can further improve the condition for g = 2, 3 and 5: for 2, p mod 24 == 23 for 3, p mod 12 == 11 for 5, p mod 60 == 59 However for compatibility with previous versions we use: for 2, p mod 24 == 11 for 5, p mod 60 == 23 
Name: skip_asn1; Comment: Skip past an ASN1 structure: for OBJECT skip content octets too 
Name: dh_sharedinfo_encode; Comment: Encode the DH shared info structure, return an offset to the counter value so we can update the structure without reencoding it. 
Name: dsa_priv_decode; Comment: In PKCS#8 DSA: you just get a private key integer and parameters in theAlgorithmIdentifier the pubkey must be recalculated. 
Name: dsa_cb; Comment: Override the default free and new methods 
Name: DSA_verify; Comment: -returns 1: correct signature 0: incorrect signature -1: error 
Name: dsa_builtin_paramgen2; Comment: This is a parameter generation algorithm for the DSA2 algorithm as described in FIPS 186-3. 
Name: dsa_mod_inverse_fermat; Comment: Compute the inverse of k modulo q. Since q is prime, Fermat's Little Theorem applies, which reduces this to mod-exp operation. Both the exponent and modulus are public information so a mod-exp that doesn't leak the base is sufficient. A newly allocated BIGNUM is returned which the caller must free. 
Name: dl_load; Comment: For this DSO_METHOD, our meth_data STACK will contain; (i) the handle(shl_t) returned from shl_load(). NB: I checked on HPUX11 and shl_t is itself a pointer type so the cast is safe. 
Name: dl_name_converter; Comment: This function is identical to the one in dso_dlfcn.c, but as it is highly unlikely that both the "dl" *and* "dlfcn" variants are being compiled at the same time, there's no great duplicating the code. Figuring out an elegant way to share one copy of the code would be more difficult and would not leave the implementations independent. 
Name: dlfcn_load; Comment: For this DSO_METHOD, our meth_data STACK will contain; (i) the handle(void*) returned from dlopen(). 
Name: dladdr; Comment: This dladdr()-implementation will also find the ptrgl (Pointer Glue) virtual address of a function, which is just located in the DATA segment instead of the TEXT segment. 
Name: DSO_ctrl; Comment: I don't really like these *_ctrl functions very much to be perfectly honest. For one thing, I think I have to return a negative value for any error because possible DSO_ctrl() commands may return values such as "size"s that can legitimately be zero (making the standard "if (DSO_cmd(...))" form that works almost everywhere else fail at odd times. I'd prefer "output" values to be passed by reference and the return value as success/failure like usual ... but we conform when we must... :-) 
Name: vms_unload; Comment: Note that this doesn't actually unload the shared image, as there is no such thing in VMS. Next time it get loaded again, a new copy will actually be loaded. 
Name: do_find_symbol; Comment: We must do this in a separate function because of the way the exception handler works (it makes this function return 
Name: win32_load; Comment: For this DSO_METHOD, our meth_data STACK will contain; (i) a pointer tothe handle (HINSTANCE) returned from LoadLibrary(), and copied. 
Name: x25519_scalar_mulx; Comment: Duplicate of original x25519_scalar_mult_generic, but using fe64_* subroutines. 
Name: x25519_scalar_mult; Comment: Duplicate of original x25519_scalar_mult_generic, but using fe51_* subroutines. 
Name: fe_tobytes; Comment: Preconditions: |h| bounded by 1.12^26,1.12^25,1.12^26,1.12^25,etc. Write p=2^255-19; q=floor(hp).Basic claim: q = floor(2^(-255)(h + 19 2^(-25)h9 + 2^(-1))). Proof: Have |h|<=p so |q|<=1 so |19^2 2^(-255) q|<1/4. Also have |h-2^230 h9|<2^231 so |19 2^(-255)(h-2^230 h9)|<1/4. Write y=2^(-1)-19^2 2^(-255)q-19 2^(-255)(h-2^230 h9). Then 0<y<1. Write r=h-pq. Have 0<=r<=p-1=2^255-20. Thus 0<=r+19(2^-255)r<r+19(2^-255)2^255<=2^255-1. Write x=r+19(2^-255)r+y. Then 0<x<2^255 so floor(2^(-255)x) = 0 so floor(q+2^(-255)x) = q. Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1)) so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q. 
Name: fe_copy; Comment: h = f 
Name: fe_0; Comment: h = 0 
Name: fe_1; Comment: h = 1 
Name: fe_add; Comment: h = f + g Can overlap h with f or g. Preconditions: |f| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. |g| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. Postconditions: |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc. 
Name: fe_sub; Comment: h = f - g Can overlap h with f or g. Preconditions: |f| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. |g| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. Postconditions: |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc. 
Name: fe_mul; Comment: Noneone *19 precomputation can be merged into this, but the resulting data flow is considerably less clean. There are 12 carries below. 10 of them are 2-way parallelizable and vectorizable. Can get away with 11 carries, but then data flow is much deeper. With tighter constraints on inputs can squeeze carries into int32. 
Name: fe_sq; Comment: h = ff Can overlap h with f. Preconditions: |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc. Postconditions: |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc. See fe_mul.c for discussion of implementation strategy. 
Name: fe_neg; Comment: h = -f Preconditions: |f| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. Postconditions: |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. 
Name: fe_cmov; Comment: None replace (f,g) with (f,g) if b == 0. Preconditions: b in {0,1}. 
Name: fe_isnonzero; Comment: return 0 if f == 0 return 1 if f != 0 Preconditions: |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc. 
Name: fe_isnegative; Comment: return 1 if f is in {1,3,5,...,q-2} return 0 if f is in {0,2,4,...,q-1}Preconditions: |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc. 
Name: fe_sq2; Comment: h = 2ff Can overlap h with f. Preconditions: |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc. Postconditions: |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc. See fe_mul.c for discussion of implementation strategy. 
Name: ge_p3_to_p2; Comment: r = p 
Name: ge_p3_to_cached; Comment: r = p 
Name: ge_p1p1_to_p2; Comment: r = p 
Name: ge_p1p1_to_p3; Comment: r = p 
Name: ge_p2_dbl; Comment: r = 2p 
Name: ge_p3_dbl; Comment: r = 2p 
Name: ge_madd; Comment: r = p + q 
Name: ge_msub; Comment: r = p - q 
Name: ge_add; Comment: r = p + q 
Name: ge_sub; Comment: r = p - q 
Name: ge_scalarmult_base; Comment: h = aB where a = a[0]+256*a[1]+...+256^31 a[31] B is the Ed25519 base point (x,4/5) with x positive. Preconditions: a[31] <= 127 
Name: fe_cswap; Comment: None replace (f,g) with (f,g) if b == 0. Preconditions: b in {0,1}. 
Name: fe_mul121666; Comment: h = f121666 Can overlap h with f. Preconditions: |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc. Postconditions: |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc. 
Name: ge_double_scalarmult_vartime; Comment: r = aA + bB where a = a[0]+256*a[1]+...+256^31 a[31]. and b = b[0]+256*b[1]+...+256^31 b[31]. B is the Ed25519 base point (x,4/5) with x positive. 
Name: x25519_sc_reduce; Comment: The set of scalars is _Z/l where l = 2^252 + 27742317777372353535851937790883648493. Input: s[0]+256*s[1]+...+256^63*s[63] = s Output: s[0]+256*s[1]+...+256^31*s[31] = s mod l where l = 2^252 + 27742317777372353535851937790883648493. Overwrites s in place. 
Name: sc_muladd; Comment: Input: a[0]+256*a[1]+...+256^31*a[31] = a b[0]+256*b[1]+...+256^31*b[31] = b c[0]+256*c[1]+...+256^31*c[31] = c Output: s[0]+256*s[1]+...+256^31*s[31] = (ab+c) mod l where l = 2^252 + 27742317777372353535851937790883648493. 
Name: ECDH_KDF_X9_62; Comment: -The old name for ecdh_KDF_X9_63 Retained for ABI compatibility 
Name: ecdh_simple_compute_key; Comment: -This implementation is based on the following primitives in the IEEE 1363 standard: - ECKAS-DH1 - ECSVDP-DH 
Name: ossl_ecdsa_verify; Comment: -returns 1: correct signature 0: incorrect signature -1: error 
Name: ECDSA_do_verify; Comment: -returns 1: correct signature 0: incorrect signature -1: error 
Name: ECDSA_verify; Comment: -returns 1: correct signature 0: incorrect signature -1: error 
Name: EC_GFp_mont_method; Comment: Copyright 2001-2019 The OpenSSL Project Authors. All Rights Reserved. Copyright (c) 2002, Oracle andor its affiliates. All rights reserved Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: ec_GFp_mont_field_inv; Comment: -Computes the multiplicative inverse of a in GF(p), storing the result in r. If a is zero (or equivalent), you'll get a EC_R_CANNOT_INVERT error. We have a Mont structure, so SCA hardening is FLT inversion. 
Name: bin28_to_felem; Comment: Helper functions to convert field elements to/from internal representation 
Name: BN_to_felem; Comment: From OpenSSL BIGNUM to internal representation 
Name: felem_to_BN; Comment: From internal representation to OpenSSL BIGNUM 
Name: felem_one; Comment: - FIELD OPERATIONS Field operations, using the internal representation of field elements. NB! These operations are specific to our point multiplication and cannot be expected to be correct in general - e.g., multiplication with a large scalar will cause an overflow. 
Name: felem_sum; Comment: Sum two field elements: out += in 
Name: felem_diff; Comment: Assumes in[i] < 2^57 
Name: widefelem_diff; Comment: Assumes in[i] < 2^119 
Name: felem_diff_128_64; Comment: in[i] < 2^63 
Name: felem_scalar; Comment: Multiply a field element by a scalar: out = outscalar The scalars we actually use are small, so results fit without overflow 
Name: widefelem_scalar; Comment: Multiply an unreduced field element by a scalar: out = outscalar The scalars we actually use are small, so results fit without overflow 
Name: felem_square; Comment: Square a field element: out = in^2 
Name: felem_mul; Comment: Multiply two field elements: out = in1in2 
Name: felem_reduce; Comment: -Reduce seven 128-bit coefficients to four 64-bit coefficients. Requires in[i] < 2^126, ensures out[0] < 2^56, out[1] < 2^56, out[2] < 2^56, out[3] <= 2^56 + 2^16 
Name: felem_contract; Comment: Reduce to unique minimal representation. Requires 0 <= in < 2*p (always call felem_reduce first) 
Name: felem_neg; Comment: Get negative value: out = -in Requires in[i] < 2^63, ensures out[0] < 2^56, out[1] < 2^56, out[2] < 2^56, out[3] <= 2^56 + 2^16 
Name: felem_is_zero; Comment: Zero-check: returns 1 if input is 0, and 0 otherwise. We know that field elements are reduced to in < 2^225, so we only need to check three cases: 0, 2^224 - 2^96 + 1, and 2^225 - 2^97 + 2 
Name: felem_inv; Comment: Computation chain copied from djb's code 
Name: copy_conditional; Comment: Copy in constant time: if icopy == 1, copy in to out, if icopy == 0, copy out to itself. 
Name: point_double; Comment: -Double an elliptic curve point: (X', Y', Z') = 2(X, Y, Z), where X' = (3(X - Z^2)(X + Z^2))^2 - 8XY^2 Y' = 3(X - Z^2)(X + Z^2)(4XY^2 - X') - 8Y^4 Z' = (Y + Z)^2 - Y^2 - Z^2 = 2YZ Outputs can equal corresponding inputs, i.e., x_out == x_in is allowed, while x_out == y_in is not (maybe this works, but it's not tested). 
Name: point_add; Comment: This function is not entirely constant-time: it includes a branch for checking whether the two input points are equal, (while not equal to the point at infinity). This case never happens during single point multiplication, so there is no timing leak for ECDH or ECDSA signing. 
Name: select_point; Comment: select_point selects the |idx|th point from a precomputation table and copies it to out. The pre_comp array argument should be size of |size| argument 
Name: get_bit; Comment: get_bit returns the |i|th bit in |in| 
Name: batch_mul; Comment: Interleaved point multiplication using precomputed point multiples: The small point multiples 0*P, 1*P, ..., 16*P are in pre_comp[], the scalars in scalars[]. If g_scalar is non-NULL, we also add this multiple of the generator, using certain (large) precomputed multiples in g_pre_comp. Output point (X, Y, Z) is stored in x_out, y_out, z_out 
Name: nistp224_pre_comp_new; Comment: FUNCTIONS TO MANAGE PRECOMPUTATION 
Name: ec_GFp_nistp224_group_init; Comment: OPENSSL EC_METHOD FUNCTIONS 
Name: ec_GFp_nistp224_point_get_affine_coordinates; Comment: Takes the Jacobian coordinates (X, Y, Z) of a point and returns (X', Y') = (X/Z^2, Y/Z^3) 
Name: ec_GFp_nistp224_points_mul; Comment: Computes scalar*generator + _sum scalars[i]*points[i], ignoring NULL values Result is stored in r (r can equal one of the inputs). 
Name: bin32_to_felem; Comment: bin32_to_felem takes a little-endian byte array and converts it into felem form. This assumes that the CPU is little-endian. 
Name: smallfelem_to_bin32; Comment: smallfelem_to_bin32 takes a smallfelem and serialises into a little endian, 32 byte array. This assumes that the CPU is little-endian. 
Name: BN_to_felem; Comment: BN_to_felem converts an OpenSSL BIGNUM into an felem 
Name: smallfelem_to_BN; Comment: felem_to_BN converts an felem into an OpenSSL BIGNUM 
Name: smallfelem_one; Comment: -Field operations ---------------- 
Name: felem_sum; Comment: felem_sum sets out = out + in. 
Name: felem_small_sum; Comment: felem_small_sum sets out = out + in. 
Name: felem_scalar; Comment: felem_scalar sets out = outscalar 
Name: longfelem_scalar; Comment: longfelem_scalar sets out = outscalar 
Name: smallfelem_neg; Comment: -smallfelem_neg sets |out| to |-small| On exit: out[i] < out[i] + 2^105 
Name: felem_diff; Comment: -felem_diff subtracts |in| from |out| On entry: in[i] < 2^104 On exit: out[i] < out[i] + 2^105 
Name: felem_diff_zero107; Comment: -An alternative felem_diff for larger inputs |in| felem_diff_zero107 subtracts |in| from |out| On entry: in[i] < 2^106 On exit: out[i] < out[i] + 2^107 
Name: longfelem_diff; Comment: -longfelem_diff subtracts |in| from |out| On entry: in[i] < 7*2^67 On exit: out[i] < out[i] + 2^70 + 2^40 
Name: felem_shrink; Comment: -felem_shrink converts an felem into a smallfelem. The result isn't quite minimal as the value may be greater than p. On entry: in[i] < 2^109 On exit: out[i] < 2^64 
Name: smallfelem_expand; Comment: smallfelem_expand converts a smallfelem to an felem 
Name: smallfelem_square; Comment: -smallfelem_square sets |out| = |small|^2 On entry: small[i] < 2^64 On exit: out[i] < 72^64 < 2^67 
Name: felem_square; Comment: -felem_square sets |out| = |in|^2 On entry: in[i] < 2^109 On exit: out[i] < 72^64 < 2^67 
Name: smallfelem_mul; Comment: -smallfelem_mul sets |out| = |small1||small2| On entry: small1[i] < 2^64 small2[i] < 2^64 On exit: out[i] < 72^64 < 2^67 
Name: felem_mul; Comment: -felem_mul sets |out| = |in1||in2| On entry: in1[i] < 2^109 in2[i] < 2^109 On exit: out[i] < 72^64 < 2^67 
Name: felem_small_mul; Comment: -felem_small_mul sets |out| = |small1||in2| On entry: small1[i] < 2^64 in2[i] < 2^109 On exit: out[i] < 72^64 < 2^67 
Name: felem_reduce_; Comment: -Internal function for the different flavours of felem_reduce. felem_reduce_ reduces the higher coefficients in[4]-in[7]. On entry: out[0] >= in[6] + 2^32*in[6] + in[7] + 2^32*in[7] out[1] >= in[7] + 2^32*in[4] out[2] >= in[5] + 2^32*in[5] out[3] >= in[4] + 2^32*in[5] + 2^32*in[6] On exit: out[0] <= out[0] + in[4] + 2^32*in[5] out[1] <= out[1] + in[5] + 2^33*in[6] out[2] <= out[2] + in[7] + 2*in[6] + 2^33*in[7] out[3] <= out[3] + 2^32*in[4] + 3*in[7] 
Name: felem_reduce; Comment: -felem_reduce converts a longfelem into an felem. To be called directly after felem_square or felem_mul. On entry: in[0] < 2^64, in[1] < 3*2^64, in[2] < 5*2^64, in[3] < 7*2^64 in[4] < 7*2^64, in[5] < 5*2^64, in[6] < 3*2^64, in[7] < 2*64 On exit: out[i] < 2^101 
Name: felem_reduce_zero105; Comment: -felem_reduce_zero105 converts a larger longfelem into an felem. On entry: in[0] < 2^71 On exit: out[i] < 2^106 
Name: subtract_u64; Comment: subtract_u64 sets *result = *result - v and *carry to one if the subtraction underflowed. 
Name: felem_contract; Comment: felem_contract converts |in| to its unique, minimal representation. On entry: in[i] < 2^109 
Name: smallfelem_is_zero; Comment: -felem_is_zero returns a limb with all bits set if |in| == 0 (mod p) and 0 otherwise. On entry: small[i] < 2^64 
Name: felem_inv; Comment: - felem_inv calculates |out| = |in|^{-1} Based on Fermat's Little Theorem: a^p = a (mod p) a^{p-1} = 1 (mod p) a^{p-2} = a^{-1} (mod p) 
Name: point_double; Comment: - point_double calculates 2(x_in, y_in, z_in) The method is taken from: http:hyperelliptic.orgEFDg1pauto-shortw-jacobian-3.html#doubling-dbl-2001-bOutputs can equal corresponding inputs, i.e., x_out == x_in is allowed. while x_out == y_in is not (maybe this works, but it's not tested). 
Name: point_double_small; Comment: point_double_small is the same as point_double, except that it operates on smallfelems 
Name: copy_conditional; Comment: copy_conditional copies in to out iff mask is all ones. 
Name: copy_small_conditional; Comment: copy_small_conditional copies in to out iff mask is all ones. 
Name: point_add; Comment: - point_add calculates (x1, y1, z1) + (x2, y2, z2) The method is taken from: http:hyperelliptic.orgEFDg1pauto-shortw-jacobian-3.html#addition-add-2007-bl,adapted for mixed addition (z2 = 1, or z2 = 0 for the point at infinity). This function includes a branch for checking whether the two input points are equal, (while not equal to the point at infinity). This case never happens during single point multiplication, so there is no timing leak for ECDH or ECDSA signing. 
Name: point_add_small; Comment: point_add_small is the same as point_add, except that it operates on smallfelems 
Name: select_point; Comment: select_point selects the |idx|th point from a precomputation table and copies it to out. 
Name: batch_mul; Comment: Interleaved point multiplication using precomputed point multiples: The small point multiples 0*P, 1*P, ..., 17*P are in pre_comp[], the scalars in scalars[]. If g_scalar is non-NULL, we also add this multiple of the generator, using certain (large) precomputed multiples in g_pre_comp. Output point (X, Y, Z) is stored in x_out, y_out, z_out 
Name: nistp256_pre_comp_new; Comment: FUNCTIONS TO MANAGE PRECOMPUTATION 
Name: ec_GFp_nistp256_group_init; Comment: OPENSSL EC_METHOD FUNCTIONS 
Name: ec_GFp_nistp256_point_get_affine_coordinates; Comment: Takes the Jacobian coordinates (X, Y, Z) of a point and returns (X', Y') = (X/Z^2, Y/Z^3) 
Name: make_points_affine; Comment: points below is of size |num|, and tmp_smallfelems is of size |num+1| 
Name: ec_GFp_nistp256_points_mul; Comment: Computes scalar*generator + _sum scalars[i]*points[i], ignoring NULL values Result is stored in r (r can equal one of the inputs). 
Name: bin66_to_felem; Comment: bin66_to_felem takes a little-endian byte array and converts it into felem form. This assumes that the CPU is little-endian. 
Name: felem_to_bin66; Comment: felem_to_bin66 takes an felem and serialises into a little endian, 66 byte array. This assumes that the CPU is little-endian. 
Name: felem_to_BN; Comment: felem_to_BN converts an felem into an OpenSSL BIGNUM 
Name: felem_one; Comment: -Field operations ---------------- 
Name: felem_sum64; Comment: felem_sum64 sets out = out + in. 
Name: felem_scalar; Comment: felem_scalar sets out = inscalar 
Name: felem_scalar64; Comment: felem_scalar64 sets out = outscalar 
Name: felem_scalar128; Comment: felem_scalar128 sets out = outscalar 
Name: felem_neg; Comment: -felem_neg sets |out| to |-in| On entry: in[i] < 2^59 + 2^14 On exit: out[i] < 2^62 
Name: felem_diff64; Comment: -felem_diff64 subtracts |in| from |out| On entry: in[i] < 2^59 + 2^14 On exit: out[i] < out[i] + 2^62 
Name: felem_diff_128_64; Comment: -felem_diff_128_64 subtracts |in| from |out| On entry: in[i] < 2^62 + 2^17 On exit: out[i] < out[i] + 2^63 
Name: felem_diff128; Comment: -felem_diff_128_64 subtracts |in| from |out| On entry: in[i] < 2^126 On exit: out[i] < out[i] + 2^127 - 2^69 
Name: felem_square; Comment: -felem_square sets |out| = |in|^2 On entry: in[i] < 2^62 On exit: out[i] < 17max(in[i])max(in[i]) 
Name: felem_mul; Comment: -felem_mul sets |out| = |in1||in2| On entry: in1[i] < 2^64 in2[i] < 2^63 On exit: out[i] < 17max(in1[i])max(in2[i]) 
Name: felem_reduce; Comment: -felem_reduce converts a largefelem to an felem. On entry: in[i] < 2^128 On exit: out[i] < 2^59 + 2^14 
Name: felem_is_zero; Comment: -felem_is_zero returns a limb with all bits set if |in| == 0 (mod p) and 0 otherwise. On entry: in[i] < 2^59 + 2^14 
Name: felem_contract; Comment: -felem_contract converts |in| to its unique, minimal representation. On entry: in[i] < 2^59 + 2^14 
Name: point_add; Comment: - point_add calculates (x1, y1, z1) + (x2, y2, z2) The method is taken from http:hyperelliptic.orgEFDg1pauto-shortw-jacobian-3.html#addition-add-2007-bl,adapted for mixed addition (z2 = 1, or z2 = 0 for the point at infinity). This function includes a branch for checking whether the two input points are equal (while not equal to the point at infinity). See comment below on constant-time. 
Name: select_point; Comment: pre_comp below is of the size provided in |size| 
Name: nistp521_pre_comp_new; Comment: FUNCTIONS TO MANAGE PRECOMPUTATION 
Name: ec_GFp_nistp521_group_init; Comment: OPENSSL EC_METHOD FUNCTIONS 
Name: ec_GFp_nistp521_point_get_affine_coordinates; Comment: Takes the Jacobian coordinates (X, Y, Z) of a point and returns (X', Y') = (X/Z^2, Y/Z^3) 
Name: make_points_affine; Comment: points below is of size |num|, and tmp_felems is of size |num+1/ 
Name: ec_GFp_nistp521_points_mul; Comment: Computes scalar*generator + _sum scalars[i]*points[i], ignoring NULL values Result is stored in r (r can equal one of the inputs). 
Name: ec_GFp_nistp_points_make_affine_internal; Comment: Convert an array of points into affine coordinates. (If the point at infinity is found (Z = 0), it remains unchanged.) This function is essentially an equivalent to EC_POINTs_make_affine(), but works with the internal representation of points as used by ecp_nistp###.c rather thanwith (BIGNUM-based) EC_POINT data structures. point_array is the input/output buffer ('num' points in projective form, i.e. three coordinates each), based on an internal representation of field elements of size 'felem_size'. tmp_felems needs to point to a temporary array of 'num'+1 field elements for storage of intermediate values. 
Name: ec_GFp_nistp_recode_scalar_bits; Comment: - This function looks at 5+1 scalar bits (5 current, 1 adjacent less significant bit), and recodes them into a signed digit for use in fast point multiplication: the use of signed rather than unsigned digits means that fewer points need to be precomputed, given that point inversion is easy (a precomputed point dP makes -dP available as well). BACKGROUND: Signed digits for multiplication were introduced by Booth ("A signed binary multiplication technique", Quart. Journ. Mech. and Applied Math., vol. IV, pt. 2 (1951), pp. 236-240), in that case for multiplication of integers. Booth's original encoding did not generally improve the density of nonzero digits over the binary representation, and was merely meant to simplify the handling of signed factors given in two's complement; but it has since been shown to be the basis of various signed-digit representations that do have further advantages, including the wNAF, using the following general approach: (1) Given a binary representation b_k ... b_2 b_1 b_0, of a nonnegative integer (b_k in {0, 1}), rewrite it in digits 0, 1, -1 by using bit-wise subtraction as follows: b_k b_(k-1) ... b_2 b_1 b_0 - b_k ... b_3 b_2 b_1 b_0 ----------------------------------------- s_(k+1) s_k ... s_3 s_2 s_1 s_0 A left-shift followed by subtraction of the original value yields a new representation of the same value, using signed bits s_i = b_(i-1) - b_i. This representation from Booth's paper has since appeared in the literature under a variety of different names including "reversed binary form", "alternating greedy expansion", "mutual opposite form", and "sign-alternating {+-1}-representation". An interesting property is that among the nonzero bits, values 1 and -1 strictly alternate. (2) Various window schemes can be applied to the Booth representation of integers: for example, right-to-left sliding windows yield the wNAF (a signed-digit encoding independently discovered by various researchers in the 1990s), and left-to-right sliding windows yield a left-to-right equivalent of the wNAF (independently discovered by various researchers around 2004). To prevent leaking information through side channels in point multiplication, we need to recode the given integer into a regular pattern: sliding windows as in wNAFs won't do, we need their fixed-window equivalent -- which is a few decades older: we'll be using the so-called "modified Booth encoding" due to MacSorley ("High-speed arithmetic in binary computers", Proc. IRE, vol. 49 (1961), pp. 67-91), in a radix-2^5 setting. That is, we always combine five signed bits into a signed digit: s_(5j + 4) s_(5j + 3) s_(5j + 2) s_(5j + 1) s_(5j) The sign-alternating property implies that the resulting digit values are integers from -16 to 16. Of course, we don't actually need to compute the signed digits s_i as an intermediate step (that's just a nice way to see how this scheme relates to the wNAF): a direct computation obtains the recoded digit from the six bits b_(5j + 4) ... b_(5j - 1). This function takes those six bits as an integer (0 .. 63), writing the recoded digit to *sign (0 for positive, 1 for negative) and *digit (absolute value, in the range 0 .. 16). Note that this integer essentially provides the input bits "shifted to the left" by one position: for example, the input to compute the least significant recoded digit, given that there's no bit b_-1, has to be b_4 b_3 b_2 b_1 b_0 0. 
Name: _booth_recode_w5; Comment: Recode window to a signed digit, see ecp_nistputil.c for details 
Name: ecp_nistz256_point_double; Comment: Point double: r = 2*a 
Name: ecp_nistz256_point_add; Comment: Point addition: r = a+b 
Name: ecp_nistz256_point_add_affine; Comment: Point addition when b is known to be affine: r = a+b 
Name: ecp_nistz256_mod_inverse; Comment: r = in^-1 mod p 
Name: ecp_nistz256_bignum_to_field_elem; Comment: ecp_nistz256_bignum_to_field_elem copies the contents of |in| to |out| and returns one if it fits. Otherwise it returns zero. 
Name: ecp_nistz256_windowed_mul; Comment: r = sum(scalar[i]*point[i]) 
Name: ecp_nistz256_is_affine_G; Comment: ecp_nistz256_is_affine_G returns one if |generator| is the standard, P-256 generator. 
Name: ecp_nistz256_avx2_mul_g; Comment: ecp_nistz256_avx2_mul_g performs multiplication by G, using only the precomputed table. It does 4 affine point additions in parallel, significantly speeding up point multiplication for a fixed value. 
Name: ecp_nistz256_points_mul; Comment: r = scalar*G + sum(scalars[i]*points[i]) 
Name: ec_GFp_simple_group_init; Comment: Most method functions in this file are designed to work with non-trivial representations of field elements if necessary (see ecp_mont.c): while standard modular addition and subtraction are used, the field_mul and field_sqr methods will be used for multiplication, and field_encode and field_decode (if defined) will be used for converting between representations. Functions ec_GFp_simple_points_make_affine() and ec_GFp_simple_point_get_affine_coordinates() specifically assume that if a non-trivial representation is used, it is a Montgomery representation (i.e. 'encoding' means multiplying by some factor R). 
Name: ec_GFp_simple_field_inv; Comment: -Computes the multiplicative inverse of a in GF(p), storing the result in r. If a is zero (or equivalent), you'll get a EC_R_CANNOT_INVERT error. Since we don't have a Mont structure here, SCA hardening is with blinding. 
Name: ec_GFp_simple_blind_coordinates; Comment: -Apply randomization of EC point projective coordinates: (X, Y ,Z ) = (lambda^2*X, lambda^3*Y, lambda*Z) lambda = [1,group->field) 
Name: ec_GFp_simple_ladder_pre; Comment: - Set s := p, r := 2p. For doubling we use Formula 3 from Izu-Takagi "A fast parallel elliptic curve multiplication resistant against side channel attacks" appendix, as described at https:hyperelliptic.orgEFDg1pauto-shortw-xz.html#doubling-dbl-2002-it-2The input point p will be in randomized Jacobian projective coords: x = X/Z**2, y=Y/Z**3 The output points p, s, and r are converted to standard (homogeneous) projective coords: x = X/Z, y=Y/Z 
Name: ec_GFp_simple_ladder_step; Comment: - Differential addition-and-doubling using Eq. (9) and (10) from Izu-Takagi "A fast parallel elliptic curve multiplication resistant against side channel attacks", as described at https:hyperelliptic.orgEFDg1pauto-shortw-xz.html#ladder-ladd-2002-it-4 
Name: ec_GFp_simple_ladder_post; Comment: None - Y1==0 implies p has order 2, so either r or s are infinity and handled by one of the BN_is_zero(...) branches. 
Name: ecx_key_op; Comment: Setup EVP_PKEY using public, private or generation 
Name: ecx_cmp_parameters; Comment: "parameters" are always equal 
Name: ecdh_cms_set_kdf_param; Comment: Set KDF parameters based on KDF NID 
Name: ec_asn1_group2fieldid; Comment: the function definitions 
Name: d2i_ECPKParameters; Comment: EC_GROUP <-> DER encoding of ECPKPARAMETERS 
Name: d2i_ECPrivateKey; Comment: some EC_KEY functions 
Name: EC_GROUP_new; Comment: functions for EC_GROUP objects 
Name: ec_guess_cofactor; Comment: -Try computing cofactor from the generator order (n) and field cardinality (q). This works for all curves of cryptographic interest. Hasse thm: q + 1 - 2*sqrt(q) <= n*h <= q + 1 + 2*sqrt(q) h_min = (q + 1 - 2*sqrt(q))/n h_max = (q + 1 + 2*sqrt(q))/n h_max - h_min = 4*sqrt(q)/n So if n > 4*sqrt(q) holds, there is only one possible value for h: h = _lfloor (h_min + h_max)/2 _rceil = _lfloor (q + 1)/n _rceil Otherwise, zero cofactor and return success. 
Name: EC_POINT_new; Comment: functions for EC_POINT objects 
Name: EC_POINT_is_on_curve; Comment: Check whether an EC_POINT is on the curve or not. Note that the return value for this function should NOT be treated as a boolean. Return values: 1: The point is on the curve 0: The point is not on the curve -1: An error occurred 
Name: EC_POINTs_mul; Comment: Functions for point multiplication. If group->meth->mul is 0, we use the wNAF-based implementations in ec_mult.c; otherwise we dispatch throughmethods. 
Name: ec_precompute_mont_data; Comment: ec_precompute_mont_data sets |group->mont_data| from |group->order| and returns one on success. On error it returns zero. 
Name: ec_group_do_inverse_ord; Comment: -Default behavior, if group->meth->field_inverse_mod_ord is NULL: - When group->order is even, this function returns an error. - When group->order is otherwise composite, the correctness of the output is not guaranteed. - When x is outside the range [1, group->order), the correctness of the output is not guaranteed. - Otherwise, this function returns the multiplicative inverse in the range [1, group->order). EC_METHODs must implement their own field_inverse_mod_ord for other functionality. 
Name: ec_point_blind_coordinates; Comment: -Coordinate blinding for EC_POINT. The underlying EC_METHOD can optionally implement this function: underlying implementations should return 0 on errors, or 1 on success. This wrapper returns 1 in case the underlying EC_METHOD does not support coordinate blinding. 
Name: ec_scalar_mul_ladder; Comment: -This functions computes a single point multiplication over the EC group, using, at a high level, a Montgomery ladder with conditional swaps, with various timing attack defenses. It performs either a fixed point multiplication (scalargenerator) when point is NULL, or a variable point multiplication (scalarpoint) when point is not NULL. `scalar` cannot be NULL and should be in the range [0,n) otherwise all constant time bets are off (where n is the cardinality of the EC group). This function expects `group->order` and `group->cardinality` to be well defined and non-zero: it fails with an error code otherwise. NB: This says nothing about the constant-timeness of the ladder step implementation (i.e., the default implementation is based on EC_POINT_add and EC_POINT_dbl, which of course are not constant time themselves) or the underlying multiprecision arithmetic. The product is stored in `r`. This is an internal function: callers are in charge of ensuring that the input parameters `group`, `r`, `scalar` and `ctx` are not NULL. Returns 1 on success, 0 otherwise. 
Name: ec_wNAF_mul; Comment: -Compute _sum scalars[i]*points[i], also including scalar*generator in the addition if scalar != NULL 
Name: ec_wNAF_precompute_mult; Comment: None... points[2^(w-1)*(numblocks-1)-1] = (2^(w-1)) 2^(blocksize*(numblocks-2))generator points[2^(w-1)*(numblocks-1)] = 2^(blocksize*(numblocks-1))generator ... points[2^(w-1)*numblocks-1] = (2^(w-1)) 2^(blocksize*(numblocks-1))generator points[2^(w-1)*numblocks] = NULL 
Name: EC_POINT_point2hex; Comment: the return value must be freed (using OPENSSL_free()) 
Name: gf_invert; Comment: Inverse. 
Name: cond_neg_niels; Comment: Operations on [p]niels 
Name: c448_ed448_convert_private_key_to_x448; Comment: In this file because it uses the hash 
Name: gf_serialize; Comment: Serialize to wire format. 
Name: gf_hibit; Comment: Return high bit of x = low bit of 2x mod p 
Name: gf_lobit; Comment: Return high bit of x = low bit of 2x mod p 
Name: gf_deserialize; Comment: Deserialize from wire format; return -1 on success and 0 on failure. 
Name: gf_strong_reduce; Comment: Reduce to canonical form. 
Name: gf_sub; Comment: Subtract two gf elements d=a-b 
Name: gf_add; Comment: Add two field elements d = a+b 
Name: gf_eq; Comment: Compare a==b 
Name: sc_subx; Comment: {extra,accum} - sub +? pMust have extra <= 1 
Name: gf_mul; Comment: Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved. Copyright 2014 Cryptography Research, Inc. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.htmlOriginally written by Mike Hamburg 
Name: skip_dot; Comment: ENGINE config module 
Name: int_ctrl_cmd_is_null; Comment: These internal functions handle 'CMD'-related control commands when the ENGINE in question has asked us to take care of it (ie. the ENGINE did not set the ENGINE_FLAGS_MANUAL_CMD_CTRL flag. 
Name: cipher_init; Comment: Following are the three necessary functions to map OpenSSL functionality with cryptodev. 
Name: digest_init; Comment: Following are the four necessary functions to map OpenSSL functionality with cryptodev. 
Name: devcrypto_unload; Comment: *****************************************************************************LOAD / UNLOAD ****
Name: engine_load_devcrypto_int; Comment: This engine is always built into libcrypto, so it doesn't offer any ability to be dynamically loadable. 
Name: dynamic_data_ctx_free_func; Comment: Because our ex_data element may or may not get allocated depending on whether a "first-use" occurs before the ENGINE is freed, we have a memory leak problem to solve. We can't declare a "new" handler for the ex_data as we don't want a dynamic_data_ctx in *all* ENGINE structures of all types (this is a bug in the design of CRYPTO_EX_DATA). As such, we just declare a "free" handler and that will get called if an ENGINE is being destroyed and there was an ex_data element corresponding to our context type. 
Name: dynamic_set_data_ctx; Comment: Construct the per-ENGINE context. We create it blindly and then use a lock to check for a race - if so, all but one of the threads "racing" will have wasted their time. The alternative involves creating everything inside the lock which is far worse. 
Name: dynamic_get_data_ctx; Comment: This function retrieves the context structure from an ENGINE's "ex_data", or if it doesn't exist yet, sets it up. 
Name: int_def_cb; Comment: Set default algorithms using a string 
Name: engine_unlocked_init; Comment: Initialise a engine type for use (or up its functional reference count if it's already in use). This version is only used internally. 
Name: engine_unlocked_finish; Comment: Free a functional reference to a engine type. This version is only used internally. 
Name: ENGINE_init; Comment: The API (locked) version of "init" 
Name: ENGINE_finish; Comment: The API (locked) version of "finish" 
Name: engine_set_all_null; Comment: Placed here (close proximity to ENGINE_new) so that modifications to the elements of the ENGINE structure are more likely to be caught and changed here. 
Name: engine_cleanup_cb_free; Comment: The API function that performs all cleanup 
Name: ENGINE_set_ex_data; Comment: Now the "ex_data" support 
Name: ENGINE_set_id; Comment: Functions to get/set an ENGINE's elements - mainly to avoid exposing the ENGINE structure itself. 
Name: engine_list_cleanup; Comment: This cleanup function is only needed internally. If it should be called, we register it with the "engine_cleanup_int()" stack to be called during cleanup. 
Name: engine_list_add; Comment: These static functions starting with a lower case "engine_" always take place when global_engine_lock has been locked up. 
Name: ENGINE_get_first; Comment: Get the first/last "ENGINE" type available. 
Name: ENGINE_get_next; Comment: Iterate to the next/previous "ENGINE" type (NULL = end of the list). 
Name: ENGINE_add; Comment: Add another "ENGINE" type into the list. 
Name: ENGINE_remove; Comment: Remove an existing "ENGINE" type from the array. 
Name: bind_helper; Comment: This internal function is used by ENGINE_openssl() and possibly by the "dynamic" ENGINE support too 
Name: ENGINE_set_load_privkey_function; Comment: Basic get/set stuff 
Name: ENGINE_load_private_key; Comment: API functions to load public/private keys 
Name: ENGINE_get_table_flags; Comment: API function manipulating 'table_flags' 
Name: engine_pile_hash; Comment: Internal functions for the "piles" hash table 
Name: engine_table_register; Comment: Privately exposed (via eng_local.h) functions for adding and/or removing ENGINEs from the implementation table 
Name: int_dall; Comment: Table enumeration 
Name: ENGINE_get_pkey_asn1_meth_engine; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references) for a given pkey_asn1_meth 'nid' 
Name: ENGINE_get_pkey_asn1_meth; Comment: Obtains a pkey_asn1_meth implementation from an ENGINE functional reference 
Name: ENGINE_get_pkey_asn1_meths; Comment: Gets the pkey_asn1_meth callback from an ENGINE structure 
Name: ENGINE_set_pkey_asn1_meths; Comment: Sets the pkey_asn1_meth callback in an ENGINE structure 
Name: engine_pkey_asn1_meths_free; Comment: Internal function to free up EVP_PKEY_ASN1_METHOD structures before an ENGINE is destroyed 
Name: ENGINE_get_pkey_asn1_meth_str; Comment: Find a method based on a string. This does a linear search through all implemented algorithms. This is OK in practice because only a small number of algorithms are likely to be implemented in an engine and it is not used for speed critical operations. 
Name: ENGINE_get_cipher_engine; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references) for a given cipher 'nid' 
Name: ENGINE_get_cipher; Comment: Obtains a cipher implementation from an ENGINE functional reference 
Name: ENGINE_get_ciphers; Comment: Gets the cipher callback from an ENGINE structure 
Name: ENGINE_set_ciphers; Comment: Sets the cipher callback in an ENGINE structure 
Name: ENGINE_get_default_DH; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references). 
Name: ENGINE_get_DH; Comment: Obtains an DH implementation from an ENGINE functional reference 
Name: ENGINE_set_DH; Comment: Sets an DH implementation in an ENGINE structure 
Name: ENGINE_get_digest_engine; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references) for a given digest 'nid' 
Name: ENGINE_get_digest; Comment: Obtains a digest implementation from an ENGINE functional reference 
Name: ENGINE_get_digests; Comment: Gets the digest callback from an ENGINE structure 
Name: ENGINE_set_digests; Comment: Sets the digest callback in an ENGINE structure 
Name: ENGINE_get_default_DSA; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references). 
Name: ENGINE_get_DSA; Comment: Obtains an DSA implementation from an ENGINE functional reference 
Name: ENGINE_set_DSA; Comment: Sets an DSA implementation in an ENGINE structure 
Name: ENGINE_get_default_EC; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references). 
Name: ENGINE_get_EC; Comment: Obtains an EC_KEY implementation from an ENGINE functional reference 
Name: ENGINE_set_EC; Comment: Sets an EC_KEY implementation in an ENGINE structure 
Name: ENGINE_get_pkey_meth_engine; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references) for a given pkey_meth 'nid' 
Name: ENGINE_get_pkey_meth; Comment: Obtains a pkey_meth implementation from an ENGINE functional reference 
Name: ENGINE_get_pkey_meths; Comment: Gets the pkey_meth callback from an ENGINE structure 
Name: ENGINE_set_pkey_meths; Comment: Sets the pkey_meth callback in an ENGINE structure 
Name: engine_pkey_meths_free; Comment: Internal function to free up EVP_PKEY_METHOD structures before an ENGINE is destroyed 
Name: ENGINE_get_default_RAND; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references). 
Name: ENGINE_get_RAND; Comment: Obtains an RAND implementation from an ENGINE functional reference 
Name: ENGINE_set_RAND; Comment: Sets an RAND implementation in an ENGINE structure 
Name: ENGINE_get_default_RSA; Comment: Exposed API function to get a functional reference from the implementation table (ie. try to get a functional reference from the tabled structural references). 
Name: ENGINE_get_RSA; Comment: Obtains an RSA implementation from an ENGINE functional reference 
Name: ENGINE_set_RSA; Comment: Sets an RSA implementation in an ENGINE structure 
Name: build_SYS_str_reasons; Comment: SYS_str_reasons is filled with copies of strerror() results at initialization. 'errno' values up to 127 should cover all usual errors, others will be displayed numerically by ERR_error_string. It is crucial that we have something for each reason code that occurs in ERR_str_reasons, or bogus reason strings will be returned for SYSerr(), which always gets an errno value and never one of those 'standard' reason codes. 
Name: err_patch; Comment: Legacy; pack in the library. 
Name: err_load_strings; Comment: Hash in |str| error strings. Assumes the URN_ONCE was done. 
Name: ERR_put_error; Comment: ******************************************************
Name: ERR_error_string; Comment: ERR_error_string_n should be used instead for ret != NULL as ERR_error_string cannot know how large the buffer is 
Name: err_shelve_state; Comment: err_shelve_state returns the current thread local error state and freezes the error module until err_unshelve_state is called. 
Name: err_unshelve_state; Comment: err_unshelve_state restores the error state that was returned by err_shelve_state previously. 
Name: EVP_MD_CTX_reset; Comment: This call frees resources associated with the context 
Name: EVP_DigestFinal; Comment: The caller can assume that this removes any secret data from the context 
Name: EVP_DigestFinal_ex; Comment: The caller can assume that this removes any secret data from the context 
Name: EVP_DecodeUpdate; Comment: --1 for error 0 for last line 1 for full line Note: even though EVP_DecodeUpdate attempts to detect and report end of content, the context doesn't currently remember it and will accept more data in the next call. Therefore, the caller is responsible for checking and rejecting a 0 return value in the middle of content. Note: even though EVP_DecodeUpdate has historically tried to detect end of content based on line length, this has never worked properly. Therefore, we now return 0 when one of the following is true: - Padding or B64_EOF was detected and the last block is complete. - Input has zero-length. -1 is returned if: - Invalid characters are detected. - There is extra trailing padding, or data after padding. - B64_EOF is detected after an incomplete base64 block. 
Name: alg_module_init; Comment: Algorithm configuration module. 
Name: EVP_read_pw_string; Comment: For historical reasons, the standard function for reading passwords is in the DES library -- if someone ever wants to disable DES, this function will fail 
Name: EVP_CIPHER_type; Comment: Convert the various cipher NIDs and dummies to a proper OID NID 
Name: EVP_PBE_alg_add_type; Comment: Add a PBE algorithm 
Name: EVP_PKCS82PKEY; Comment: Extract a private key from a PKCS8 structure 
Name: EVP_PKEY2PKCS8; Comment: Turn a private key into a PKCS8 structure 
Name: EVP_PKEY_get_attr_count; Comment: EVP_PKEY attribute functions 
Name: ctr64_inc; Comment: increment counter (64-bit int) by 1 
Name: s390x_aes_gcm_aad; Comment: -Process additional authenticated data. Returns 0 on success. Code is big-endian. 
Name: s390x_aes_gcm; Comment: -En/de-crypt plain/cipher-text and authenticate ciphertext. Returns 0 for success. Code is big-endian. 
Name: s390x_aes_gcm_setiv; Comment: -Initialize context structure. Code is big-endian. 
Name: s390x_aes_gcm_ctrl; Comment: -Performs various operations on the context structure depending on control type. Returns 1 for success, 0 for failure and -1 for unknown control type. Code is big-endian. 
Name: s390x_aes_gcm_init_key; Comment: -Set key and/or iv. Returns 1 on success. Otherwise 0 is returned. 
Name: s390x_aes_gcm_tls_cipher; Comment: -En/de-crypt and authenticate TLS packet. Returns the number of bytes written if successful. Otherwise -1 is returned. Code is big-endian. 
Name: s390x_aes_gcm_cipher; Comment: -Called from EVP layer to initialize context, process additional authenticated data, en/de-crypt plain/cipher-text and authenticate ciphertext or process a TLS packet, depending on context. Returns bytes written on success. Otherwise -1 is returned. Code is big-endian. 
Name: s390x_aes_ccm_aad; Comment: -Process additional authenticated data. Code is big-endian. 
Name: s390x_aes_ccm; Comment: -En/de-crypt plain/cipher-text. Compute tag from plaintext. Returns 0 for success. 
Name: s390x_aes_ccm_tls_cipher; Comment: -En/de-crypt and authenticate TLS packet. Returns the number of bytes written if successful. Otherwise -1 is returned. 
Name: s390x_aes_ccm_init_key; Comment: -Set key and flag field and/or iv. Returns 1 if successful. Otherwise 0 is returned. 
Name: s390x_aes_ccm_cipher; Comment: -Called from EVP layer to initialize context, process additional authenticated data, en/de-crypt plain/cipher-text and authenticate plaintext or process a TLS packet, depending on context. Returns bytes written on success. Otherwise -1 is returned. 
Name: s390x_aes_ccm_ctrl; Comment: -Performs various operations on the context structure depending on control type. Returns 1 for success, 0 for failure and -1 for unknown control type. Code is big-endian. 
Name: aes_gcm_tls_cipher; Comment: Handle TLS GCM packet format. This consists of the last portion of the IV followed by the payload and finally the tag. On encrypt generate IV, encrypt payload and write the tag. On verify retrieve IV, decrypt payload and verify tag. 
Name: tls1_1_multi_block_encrypt; Comment: n4x is 1 or 2 
Name: aria_init_key; Comment: The subkey for ARIA is generated. 
Name: camellia_init_key; Comment: The subkey for Camellia is generated. 
Name: des_ecb_cipher; Comment: Because of various casts and different names can't use IMPLEMENT_BLOCK_CIPHER 
Name: des_cfb1_cipher; Comment: Although we have a CFB-r implementation for DES, it doesn't pack the right way, so wrap it here 
Name: des_ede_ecb_cipher; Comment: Because of various casts and different args can't use IMPLEMENT_BLOCK_CIPHER 
Name: des_ede3_cfb1_cipher; Comment: Although we have a CFB-r implementation for 3-DES, it doesn't pack the right way, so wrap it here 
Name: idea_ecb_cipher; Comment: NB IDEA_ecb_encrypt doesn't take an 'encrypt' argument so we treat it as a special case 
Name: update512; Comment: See comment in SHA224/256 section 
Name: PKCS5_PBE_add; Comment: Doesn't do anything now: Builtin PBE algorithms in static table. 
Name: PKCS5_PBKDF2_HMAC; Comment: This is an implementation of PKCS#5 v2.0 password based encryption keyderivation function PBKDF2. SHA1 version verified against test vectors posted by Peter Gutmann to the PKCS-TNG mailing list. 
Name: PKCS5_v2_PBE_keyivgen; Comment: Now the key derivation function itself. This is a bit evil because it has to check the ASN1 parameters are valid: and there are quite a few of them... 
Name: EVP_PKEY_sign_init; Comment: ckerr_ignore
Name: trans_cb; Comment: "translation callback" to call EVP_PKEY_CTX callbacks using BN_GENCB style callbacks. 
Name: EVP_PKEY_CTX_str2ctrl; Comment: Utility functions to send a string of hex string to a ctrl 
Name: EVP_PKEY_CTX_md; Comment: Pass a message digest to a ctrl 
Name: pkey_set_type; Comment: Setup a public key ASN1 method and ENGINE from a NID or a string. If pkey is NULL just return 1 or 0 if the algorithm exists. 
Name: hmac_size; Comment: HMAC "ASN1" method. This is just here to indicate the maximum HMAC output length and to free up an HMAC key. 
Name: IDEA_cfb64_encrypt; Comment: None 
Name: IDEA_ofb64_encrypt; Comment: None 
Name: inverse; Comment: taken directly from the 'paper' I'll have a look at it later 
Name: atou64; Comment: Custom uint64_t parser since we do not have strtoull 
Name: OPENSSL_LH_strhash; Comment: The following hash seems to work very well on normal text strings no collisions on /usr/dict/words and it distributes on %2^n quite well, not as good as MD5, but still good. 
Name: MD2; Comment: This is a separate file so that #defines in cryptlib.h can map my MDfunctions to different names 
Name: CRYPTO_ccm128_init; Comment: First you setup M and L parameters and pass the key schedule. This is called once per session setup... 
Name: CRYPTO_ccm128_setiv; Comment: Then you setup per-message nonce and pass the length of the message 
Name: CRYPTO_ccm128_aad; Comment: Then you pass additional authentication data, this is optional 
Name: ctr64_inc; Comment: counter part of nonce may not be larger than L*8 bits, L is not larger than 8, therefore 64-bit counter... 
Name: CRYPTO_cfb128_encrypt; Comment: None 
Name: cfbr_encrypt_block; Comment: This expects a single block of size nbits for both in and out. Note that it corrupts any extra bits in the last byte of out 
Name: CRYPTO_cfb128_1_encrypt; Comment: N.B. This expects the input to be packed, MS bit first 
Name: ctr128_inc; Comment: increment counter (128-bit int) by 1 
Name: CRYPTO_ctr128_encrypt; Comment: The input encrypted as though 128bit counter mode is being used. The extra state information to record how much of the 128bit block we have used is contained in *num, and the encrypted counter is kept in ecount_buf. Both *num and ecount_buf must be initialised with zeros before the first call to CRYPTO_ctr128_encrypt(). This algorithm assumes that the counter is in the x lower bits of the IV (ivec), and that the application has full control over overflow and the rest of the IV. This implementation takes NO responsibility for checking that the counter doesn't overflow into the rest of the IV when incremented. 
Name: ctr96_inc; Comment: increment upper 96 bits of 128-bit counter by 1 
Name: CRYPTO_cts128_encrypt_block; Comment: Trouble with Ciphertext Stealing, CTS, mode is that there is no common official specification, but couple of cipher/application specific ones: RFC2040 and RFC3962. Then there is 'Proposal to Extend CBC Mode By "Ciphertext Stealing"' at NIST site, which deviates from mentioned RFCs. Most notably it allows input to be of block length and it doesn't flip the order of the last two blocks. CTS is being discussed even in ECB context, but it's not adopted for any known application. This implementation provides two interfaces: one compliant with above mentioned RFCs and one compliant with the NIST proposal, both extending CBC mode. 
Name: gcm_ghash_4bit; Comment: Streamed gcm_mult_4bit, see CRYPTO_gcm128_[en|de]crypt for details... Compiler-generated code doesn't seem to give any performance improvement, at least not on x86[_64]. It's here mostly as reference and a placeholder for possible future non-trivial optimization[s]... 
Name: ocb_ntz; Comment: Calculate the number of binary trailing zero's in any given number 
Name: ocb_block_lshift; Comment: Shift a block of 16 bytes left by shift bits 
Name: ocb_double; Comment: Perform a "double" operation as per OCB spec 
Name: ocb_block_xor; Comment: Perform an xor on in1 and in2 - each of len bytes. Store result in out 
Name: ocb_lookup_l; Comment: Lookup L_index in our lookup table. If we haven't already got it we need to calculate it 
Name: CRYPTO_ocb128_new; Comment: Create a new OCB128_CONTEXT 
Name: CRYPTO_ocb128_init; Comment: Initialise an existing OCB128_CONTEXT 
Name: CRYPTO_ocb128_copy_ctx; Comment: Copy an OCB128_CONTEXT object 
Name: CRYPTO_ocb128_setiv; Comment: Set the IV to be used for this operation. Must be 1 - 15 bytes. 
Name: CRYPTO_ocb128_aad; Comment: Provide any AAD. This can be called multiple times. Only the final time can have a partial block 
Name: CRYPTO_ocb128_encrypt; Comment: Provide any data to be encrypted. This can be called multiple times. Only the final time can have a partial block 
Name: CRYPTO_ocb128_decrypt; Comment: Provide any data to be decrypted. This can be called multiple times. Only the final time can have a partial block 
Name: CRYPTO_ocb128_finish; Comment: Calculate the tag and verify it against the supplied tag 
Name: CRYPTO_ocb128_tag; Comment: Retrieve the calculated tag 
Name: CRYPTO_ocb128_cleanup; Comment: Release all resources 
Name: CRYPTO_ofb128_encrypt; Comment: None 
Name: CRYPTO_128_wrap; Comment: * Wrapping according to RFC 3394 section 2.2.1. @param[in] key Key value. @param[in] iv IV value. Length = 8 bytes. NULL = use default_iv. @param[in] in Plaintext as n 64-bit blocks, n >= 2. @param[in] inlen Length of in. @param[out] out Ciphertext. Minimal buffer length = (inlen + 8) bytes. Input and output buffers can overlap if block function supports that. @param[in] block Block processing function. @return 0 if inlen does not consist of n 64-bit blocks, n >= 2. or if inlen > CRYPTO128_WRAP_MAX. Output length if wrapping succeeded. 
Name: crypto_128_unwrap_raw; Comment: * Unwrapping according to RFC 3394 section 2.2.2 steps 1-2. The IV check (step 3) is responsibility of the caller. @param[in] key Key value. @param[out] iv Unchecked IV value. Minimal buffer length = 8 bytes. @param[out] out Plaintext without IV. Minimal buffer length = (inlen - 8) bytes. Input and output buffers can overlap if block function supports that. @param[in] in Ciphertext as n 64-bit blocks. @param[in] inlen Length of in. @param[in] block Block processing function. @return 0 if inlen is out of range [24, CRYPTO128_WRAP_MAX] or if inlen is not a multiple of 8. Output length otherwise. 
Name: CRYPTO_128_unwrap; Comment: * Unwrapping according to RFC 3394 section 2.2.2, including the IV check. The first block of plaintext has to match the supplied IV, otherwise an error is returned. @param[in] key Key value. @param[out] iv IV value to match against. Length = 8 bytes. NULL = use default_iv. @param[out] out Plaintext without IV. Minimal buffer length = (inlen - 8) bytes. Input and output buffers can overlap if block function supports that. @param[in] in Ciphertext as n 64-bit blocks. @param[in] inlen Length of in. @param[in] block Block processing function. @return 0 if inlen is out of range [24, CRYPTO128_WRAP_MAX] or if inlen is not a multiple of 8 or if IV doesn't match expected value. Output length otherwise. 
Name: CRYPTO_128_wrap_pad; Comment: * Wrapping according to RFC 5649 section 4.1. @param[in] key Key value. @param[in] icv (Non-standard) IV, 4 bytes. NULL = use default_aiv. @param[out] out Ciphertext. Minimal buffer length = (inlen + 15) bytes. Input and output buffers can overlap if block function supports that. @param[in] in Plaintext as n 64-bit blocks, n >= 2. @param[in] inlen Length of in. @param[in] block Block processing function. @return 0 if inlen is out of range [1, CRYPTO128_WRAP_MAX]. Output length if wrapping succeeded. 
Name: CRYPTO_128_unwrap_pad; Comment: * Unwrapping according to RFC 5649 section 4.2. @param[in] key Key value. @param[in] icv (Non-standard) IV, 4 bytes. NULL = use default_aiv. @param[out] out Plaintext. Minimal buffer length = (inlen - 8) bytes. Input and output buffers can overlap if block function supports that. @param[in] in Ciphertext as n 64-bit blocks. @param[in] inlen Length of in. @param[in] block Block processing function. @return 0 if inlen is out of range [16, CRYPTO128_WRAP_MAX], or if inlen is not a multiple of 8 or if IV and message length indicator doesn't match. Output length if unwrapping succeeded and IV matches. 
Name: OBJ_txt2obj; Comment: Convert an object name into an ASN1_OBJECT if "noname" is not set then search for short and long names first. This will convert the "dotted" form into an object: unlike OBJ_txt2nid it can be used with any objects, not just registered ones. 
Name: OBJ_create_objects; Comment: Parse a BIO sink to create some extra oid's objects. Line format:<OID:isdigit or '.']><isspace><SN><isspace><LN> 
Name: OCSP_request_add0_id; Comment: Add an OCSP_CERTID to an OCSP request. Return new OCSP_ONEREQ pointer: useful if we want to add extensions. 
Name: OCSP_request_set1_name; Comment: Set requestorName from an X509_NAME structure 
Name: OCSP_request_add1_cert; Comment: Add a certificate to an OCSP request 
Name: OCSP_request_sign; Comment: Sign an OCSP request set the requestorName to the subject name of an optional signers certificate and include one or more optional certificates in the request. Behaves like PKCS7_sign(). 
Name: OCSP_response_status; Comment: Get response status 
Name: OCSP_response_get1_basic; Comment: Extract basic response from OCSP_RESPONSE or NULL if no basic response present. 
Name: OCSP_resp_count; Comment: Return number of OCSP_SINGLERESP responses present in a basic response. 
Name: OCSP_resp_get0; Comment: Extract an OCSP_SINGLERESP response with a given index 
Name: OCSP_resp_find; Comment: Look single response matching a given certificate ID 
Name: OCSP_single_get0_status; Comment: Extract status information from an OCSP_SINGLERESP structure. Note: the revtime and reason values are only set if the certificate status is revoked. Returns numerical value of status. 
Name: OCSP_resp_find_status; Comment: This function combines the previous ones: look up a certificate ID and if found extract status information. Return 0 is successful. 
Name: OCSP_check_validity; Comment: Check validity of thisUpdate and nextUpdate fields. It is possible that the request will take a few seconds to process and/or the time won't be totally accurate. Therefore to avoid rejecting otherwise valid time we allow the times to be within 'nsec' of the current time. Also to avoid accepting very old responses without a nextUpdate field an optional maxage parameter specifies the maximum age the thisUpdate field can be. 
Name: OCSP_REQUEST_get_ext_count; Comment: OCSP request extensions 
Name: OCSP_ONEREQ_get_ext_count; Comment: Single extensions 
Name: OCSP_BASICRESP_get_ext_count; Comment: OCSP Basic response 
Name: OCSP_SINGLERESP_get_ext_count; Comment: OCSP single response extensions 
Name: ocsp_add1_nonce; Comment: Add a nonce to an extension stack. A nonce can be specified or if NULL a random nonce will be generated. Note: OpenSSL 0.9.7d and later create an OCTET STRING containing the nonce, previous versions used the raw nonce. 
Name: OCSP_request_add1_nonce; Comment: Add nonce to an OCSP request 
Name: OCSP_basic_add1_nonce; Comment: Same as above but for a response 
Name: OCSP_check_nonce; Comment: -Check nonce validity in a request and response. Return value reflects result: 1: nonces present and equal. 2: nonces both absent. 3: nonce present in response only. 0: nonces both present and not equal. -1: nonce in request only. For most responders clients can check return > 0. If responder doesn't handle nonces return != 0 may be necessary. return == 0 is always an error. 
Name: OCSP_copy_nonce; Comment: Copy the nonce value (if any) from an OCSP request to a response. 
Name: OCSP_accept_responses_new; Comment: AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER 
Name: OCSP_archive_cutoff_new; Comment: ArchiveCutoff ::= GeneralizedTime 
Name: OCSP_url_svcloc_new; Comment: per ACCESS_DESCRIPTION parameter are oids, of which there are currently two--NID_ad_ocsp, NID_id_ad_caIssuers--and GeneralName value. This method forces NID_ad_ocsp and uniformResourceLocator [6] IA5String. 
Name: parse_http_line1; Comment: Parse the HTTP response. This will look like this: "HTTP/1.0 200 OK". We need to obtain the numeric code and (optional) informational message. 
Name: OCSP_sendreq_bio; Comment: Blocking OCSP request handler: now a special case of non-blocking I/O 
Name: OCSP_cert_to_id; Comment: Convert a certificate and its issuer to an OCSP_CERTID 
Name: OCSP_parse_url; Comment: Parse a URL and split it up into host, port and path components and whether it is SSL. 
Name: OCSP_request_onereq_count; Comment: Utility functions related to sending OCSP responses and extracting relevant information from the request. 
Name: OCSP_response_create; Comment: Create an OCSP response and encode an optional basic response 
Name: OCSP_basic_add1_cert; Comment: Add a certificate to an OCSP request 
Name: OCSP_basic_sign_ctx; Comment: Sign an OCSP response using the parameters contained in the digest context, set the responderID to the subject name in the signer's certificate, and include one or more optional certificates in the response. 
Name: OCSP_basic_verify; Comment: Verify a basic response message 
Name: ocsp_check_ids; Comment: Check the issuer certificate IDs for equality. If there is a mismatch with the same algorithm then there's no point trying to match any certificates against the issuer. If the issuer IDs all match then we just need to check equality against one of them. 
Name: OCSP_request_verify; Comment: Verify an OCSP request. This is fortunately much easier than OCSP response verify. Just find the signers certificate and verify it against a given trust value. 
Name: ocsp_nonce_new; Comment: OCSP nonce. This is needs special treatment because it doesn't have an ASN1 encoding at all: it just contains arbitrary data. 
Name: i2r_ocsp_nocheck; Comment: Nocheck is just a single NULL. Don't print anything and always set it 
Name: pkey_get_rsa; Comment: We treat RSA or DSA private keys as a special case. For private keys we read in an EVP_PKEY structure with PEM_read_bio_PrivateKey() and extract the relevant private key: this means can handle "traditional" and PKCS#8formats transparently. 
Name: PEM_X509_INFO_write_bio; Comment: A TJH addition 
Name: PEM_get_EVP_CIPHER_INFO; Comment: This implements a very limited PEM header parser that does not support the full grammar of rfc1421. In particular, folded headers are not supported, nor is additional whitespace. A robust implementation would make use of a library that turns the headers into a BIO from which one folded line is read at a time, and is then split into a header label and content. We would then parse the content of the headers we care about. This is overkill for just this limited use-case, but presumably we also parse rfc822-style headers for S/MIME, so a common abstraction might well be more generally useful. 
Name: sanitize_line; Comment: Some helpers for PEM_read_bio_ex(). 
Name: get_header_and_data; Comment: * Extract the optional PEM header, with details on the type of content and any encryption used on the contents, and the bulk of the data from the bio. The end of the header is marked by a blank line; if the end-of-input markeris reached prior to a blank line, there is no header. The header and data arguments are BIO** since we may have to swap them if there is no header, for efficiency. We need the name of the PEM-encoded type to verify the end string. 
Name: PEM_read_bio_ex; Comment: *Read in PEM-formatted data from the given BIO. By nature of the PEM format, all content must be printable ASCII (except for line endings). Other characters are malformed input and will be rejected. 
Name: pem_check_suffix; Comment: Check pem string and return prefix length. If for example the pem_str == "RSA PRIVATE KEY" and suffix = "PRIVATE KEY" the return value is 3 for the string "RSA". 
Name: PEM_ASN1_read_bio; Comment: Handle 'other' PEMs: not private keys 
Name: PEM_write_bio_PKCS8PrivateKey_nid; Comment: These functions write a private key in PKCS#8 format: it is a "drop in" replacement for PEM_write_bio_PrivateKey() and friends. As usual if 'enc' is NULL then it uses the unencrypted private key form. The 'nid' versions uses PKCS#5 v1.5 PBE algorithms whereas the others use PKCS#5 v2.0. 
Name: PEM_read_bio_DHparams; Comment: Transparently read in PKCS#3 or X9.42 DH parameters 
Name: read_ledword; Comment: Utility function: read a DWORD (4 byte unsigned integer) in little endian format 
Name: read_lebn; Comment: Read a BIGNUM in little endian format. The docs say that this should take up bitlen/8 bytes. 
Name: PKCS12_item_pack_safebag; Comment: Pack an object into an OCTET STRING and turn into a safebag 
Name: PKCS12_pack_p7data; Comment: Turn a stack of SAFEBAGS into a PKCS#7 data Contentinfo 
Name: PKCS12_pack_p7encdata; Comment: Turn a stack of SAFEBAGS into a PKCS#7 encrypted data ContentInfo 
Name: PKCS12_add_localkeyid; Comment: Add a local keyid to a safebag 
Name: PKCS8_add_keyusage; Comment: Add key usage to PKCS#8 structure 
Name: PKCS12_add_friendlyname_asc; Comment: Add a friendlyname to a safebag 
Name: PKCS12_PBE_add; Comment: PKCS#12 PBE algorithms now in static table 
Name: PKCS12_pbe_crypt; Comment: Encrypt/Decrypt a buffer based on password and algor, result in a OPENSSL_malloc'ed buffer 
Name: PKCS12_item_decrypt_d2i; Comment: Decrypt an OCTET STRING and decode ASN1 structure if zbuf set zero buffer after use. 
Name: PKCS12_item_i2d_encrypt; Comment: Encode ASN1 structure and encrypt, return OCTET STRING if zbuf set zero encoding. 
Name: PKCS12_init; Comment: Initialise a PKCS12 structure to take data 
Name: PKCS12_parse; Comment: Parse and decrypt a PKCS#12 structure returning user key, user cert andother (CA) certs. Note either ca should be NULL, *ca should be NULL, or it should point to a valid STACK structure. pkey and cert can be passed uninitialised. 
Name: parse_pk12; Comment: Parse the outer PKCS#12 structure 
Name: pkcs12_gen_mac; Comment: Generate a MAC 
Name: PKCS12_verify_mac; Comment: Verify the mac 
Name: PKCS12_set_mac; Comment: Set a mac 
Name: PKCS12_setup_mac; Comment: Set up a mac structure 
Name: PKCS12_newpass; Comment: Change the password on a PKCS#12 structure. 
Name: newpass_p12; Comment: Parse the outer PKCS#12 structure 
Name: newpass_bag; Comment: Change password of safebag: only needs handle shrouded keybags 
Name: PKCS12_SAFEBAG_create0_p8inf; Comment: Turn PKCS8 object into a keybag 
Name: PKCS12_SAFEBAG_create0_pkcs8; Comment: Turn PKCS8 object into a shrouded keybag 
Name: OPENSSL_asc2uni; Comment: Cheap and nasty Unicode stuff 
Name: OPENSSL_utf82uni; Comment: OPENSSL_{utf82uni|uni2utf8} perform conversion between UTF-8 and PKCS#12 BMPString format, which is specified as big-endian UTF-16.One should keep in mind that even though BMPString is passed as unsigned char *, it's not the kind of string you can exercise e.g. strlen on. Caller also has to keep in mind that its length is expressed not in number of UTF-16 characters, but in number of bytes the string occupies, and treat it, the length, accordingly. 
Name: BIO_new_PKCS7; Comment: Streaming encode support for PKCS#7 
Name: pk7_cb; Comment: PKCS#7 streaming support 
Name: si_cb; Comment: Minor tweak to operation: free up EVP_PKEY 
Name: ri_cb; Comment: Minor tweak to operation: free up X509 
Name: PKCS7_simple_smimecap; Comment: Basic smime-capabilities OID and optional integer arg 
Name: PKCS7_dataDecode; Comment: int 
Name: i2d_PKCS7_bio_stream; Comment: PKCS#7 wrappers round generalised stream and MIME routines 
Name: add_cipher_smcap; Comment: Check to see if a cipher exists and if so add S/MIME capabilities 
Name: pkcs7_copy_existing_digest; Comment: Search for a digest matching SignerInfo digest type and if found copy across. 
Name: PKCS7_encrypt; Comment: Build a complete PKCS#7 enveloped data 
Name: U8TOU32; Comment: pick 32-bit unsigned integer in little endian order 
Name: U8TOU64; Comment: pick 32-bit unsigned integer in little endian order 
Name: U64TO8; Comment: store a 32-bit unsigned integer in little endian 
Name: U32TO8; Comment: store a 32-bit unsigned integer in little endian 
Name: poly1305_size; Comment: POLY1305 "ASN1" method. This is just here to indicate the maximum POLY1305 output length and to free up a POLY1305 key. 
Name: U8TOU64; Comment: pick 64-bit unsigned integer in little endian order 
Name: U64TO8; Comment: store a 64-bit unsigned integer in little endian 
Name: inc_128; Comment: Implementation of NIST SP 800-90A CTR DRBG. 
Name: ctr_BCC_block; Comment: Process a complete block using BCC algorithm of SP 800-90A 10.3.3 
Name: ctr_BCC_blocks; Comment: Handle several BCC operations for as much data as we need for K and X 
Name: ctr_BCC_init; Comment: Initialise BCC blocks: these have the value 0,1,2 in leftmost positions: see 10.3.1 stage 7. 
Name: ctr_BCC_update; Comment: Process several blocks into BCC algorithm, some possibly partial 
Name: ctr_update; Comment: NB the no-df Update in SP800-90A specifies a constant input length of seedlen, however other uses of this algorithm pad the input with zeroes if necessary and have up to two parameters XORed together, so we handle both cases in this function instead. 
Name: RAND_DRBG_set; Comment: Set/initialize |drbg| to be of type |type|, with optional |flags|. If |type| and |flags| are zero, use the defaults Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_set_defaults; Comment: Set/initialize default |type| and |flag| for new drbg instances. Returns 1 on success, 0 on failure. 
Name: rand_drbg_new; Comment: Allocate memory and initialize a new DRBG. The DRBG is allocated on the secure heap if |secure| is nonzero and the secure heap is enabled. The |parent|, if not NULL, will be used as random source for reseeding. Returns a pointer to the new DRBG instance on success, NULL on failure. 
Name: RAND_DRBG_free; Comment: Uninstantiate |drbg| and free all memory. 
Name: RAND_DRBG_instantiate; Comment: Instantiate |drbg|, after it has been initialized. Use |pers| and |perslen| as prediction-resistance input. Requires that drbg->lock is already locked for write, if non-null. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_uninstantiate; Comment: Uninstantiate |drbg|. Must be instantiated before it can be used. Requires that drbg->lock is already locked for write, if non-null. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_reseed; Comment: Reseed |drbg|, mixing in the specified data Requires that drbg->lock is already locked for write, if non-null. Returns 1 on success, 0 on failure. 
Name: rand_drbg_restart; Comment: Restart |drbg|, using the specified entropy or additional input Tries its best to get the drbg instantiated by all means, regardless of its current state. Optionally, a |buffer| of |len| random bytes can be passed, which is assumed to contain at least |entropy| bits of entropy. If |entropy| > 0, the buffer content is used as entropy input. If |entropy| == 0, the buffer content is used as additional input Returns 1 on success, 0 on failure. This function is used internally only. 
Name: RAND_DRBG_generate; Comment: Generate |outlen| bytes into the buffer at |out|. Reseed if we need to or if |prediction_resistance| is set. Additional input can be sent in |adin| and |adinlen|. Requires that drbg->lock is already locked for write, if non-null. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_bytes; Comment: Generates |outlen| random bytes and stores them in |out|. It will using the given |drbg| to generate the bytes. Requires that drbg->lock is already locked for write, if non-null. Returns 1 on success 0 on failure. 
Name: RAND_DRBG_set_callbacks; Comment: Set the RAND_DRBG callbacks for obtaining entropy and nonce. Setting the callbacks is allowed only if the drbg has not been initialized yet. Otherwise, the operation will fail. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_set_reseed_interval; Comment: Set the reseed interval. The drbg will reseed automatically whenever the number of generate requests exceeds the given reseed interval. If the reseed interval is 0, then this feature is disabled. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_set_reseed_time_interval; Comment: Set the reseed time interval. The drbg will reseed automatically whenever the time elapsed since the last reseeding exceeds the given reseed time interval. For safety, a reseeding will also occur if the clock has been reset to a smaller value. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_set_reseed_defaults; Comment: Set the default values for reseed (time) intervals of new DRBG instances The default values can be set independently for master DRBG instances (without a parent) and slave DRBG instances (with parent). Returns 1 on success, 0 on failure. 
Name: rand_drbg_lock; Comment: Locks the given drbg. Locking a drbg which does not have locking enabled is considered a successful no-op. Returns 1 on success, 0 on failure. 
Name: rand_drbg_unlock; Comment: Unlocks the given drbg. Unlocking a drbg which does not have locking enabled is considered a successful no-op. Returns 1 on success, 0 on failure. 
Name: rand_drbg_enable_locking; Comment: Enables locking for the given drbg Locking can only be enabled if the random generator is in the uninitialized state. Returns 1 on success, 0 on failure. 
Name: RAND_DRBG_set_ex_data; Comment: Get and set the EXDATA 
Name: drbg_setup; Comment: Allocates a new global DRBG on the secure heap (if enabled) and initializes it with default settings. Returns a pointer to the new DRBG instance on success, NULL on failure. 
Name: rand_drbg_cleanup_int; Comment: Clean up the global DRBGs before exit 
Name: drbg_bytes; Comment: Implements the default OpenSSL RAND_bytes() method 
Name: rand_drbg_seedlen; Comment: Calculates the minimum length of a full entropy buffer which is necessary to seed (i.e. instantiate) the DRBG successfully. 
Name: drbg_add; Comment: Implements the default OpenSSL RAND_add() method 
Name: drbg_seed; Comment: Implements the default OpenSSL RAND_seed() method 
Name: drbg_status; Comment: Implements the default OpenSSL RAND_status() method 
Name: RAND_DRBG_get0_master; Comment: Get the master DRBG. Returns pointer to the DRBG on success, NULL on failure. 
Name: RAND_DRBG_get0_public; Comment: Get the public DRBG. Returns pointer to the DRBG on success, NULL on failure. 
Name: RAND_DRBG_get0_private; Comment: Get the private DRBG. Returns pointer to the DRBG on success, NULL on failure. 
Name: RAND_load_file; Comment: Note that these functions are intended for seed files only. Entropy devices and EGD sockets are handled in rand_unix.c If |bytes| is -1 read the complete file; otherwise read the specified amount. 
Name: RAND_query_egd_bytes; Comment: Query an EGD 
Name: rand_acquire_entropy_from_tsc; Comment: Acquire entropy from high-speed clock Since we get some randomness from the low-order bits of the high-speed clock, it can help. Returns the total entropy count, if it exceeds the requested entropy count. Otherwise, returns an entropy count of 0. 
Name: rand_acquire_entropy_from_cpu; Comment: Acquire entropy using Intel-specific cpu instructions Uses the RDSEED instruction if available, otherwise uses RDRAND if available. For the differences between RDSEED and RDRAND, and why RDSEED is the preferred choice, see https:goo.gloK3KcNReturns the total entropy count, if it exceeds the requested entropy count. Otherwise, returns an entropy count of 0. 
Name: rand_drbg_get_entropy; Comment: Implements the get_entropy() callback (see RAND_DRBG_set_callbacks()) If the DRBG has a parent, then the required amount of entropy input is fetched using the parent's RAND_DRBG_generate(). Otherwise, the entropy is polled from the system entropy sources using rand_pool_acquire_entropy(). If a random pool has been added to the DRBG using RAND_add(), then its entropy will be used up first. 
Name: rand_drbg_cleanup_entropy; Comment: Implements the cleanup_entropy() callback (see RAND_DRBG_set_callbacks()) 
Name: rand_drbg_get_nonce; Comment: Implements the get_nonce() callback (see RAND_DRBG_set_callbacks()) 
Name: rand_drbg_cleanup_nonce; Comment: Implements the cleanup_nonce() callback (see RAND_DRBG_set_callbacks()) 
Name: rand_drbg_get_additional_data; Comment: Generate additional data that can be used for the drbg. The data does not need to contain entropy, but it's useful if it contains at least some bits that are unpredictable. Returns 0 on failure. On success it allocates a buffer at |*pout| and returns the length of the data. The buffer should get freed using OPENSSL_secure_clear_free(). 
Name: RAND_keep_random_devices_open; Comment: RAND_close_seed_files() ensures that any seed file descriptors are closed after use. 
Name: RAND_poll; Comment: RAND_poll() reseeds the default RNG using random input The random input is obtained from polling various entropy sources which depend on the operating system and are configurable via the --with-rand-seed configure option. 
Name: rand_pool_new; Comment: Allocate memory and initialize a new random pool 
Name: rand_pool_attach; Comment: Attach new random pool to the given buffer This function is intended to be used only for feeding random data provided by RAND_add() and RAND_seed() into the <master> DRBG. 
Name: rand_pool_free; Comment: Free |pool|, securely erasing its buffer. 
Name: rand_pool_buffer; Comment: Return the |pool|'s buffer to the caller (readonly). 
Name: rand_pool_entropy; Comment: Return the |pool|'s entropy to the caller. 
Name: rand_pool_length; Comment: Return the |pool|'s buffer length to the caller. 
Name: rand_pool_detach; Comment: Detach the |pool| buffer and return it to the caller. It's the responsibility of the caller to free the buffer using OPENSSL_secure_clear_free() or to re-attach it again to the pool using rand_pool_reattach(). 
Name: rand_pool_reattach; Comment: Re-attach the |pool| buffer. It is only allowed to pass the |buffer| which was previously detached from the same pool. 
Name: rand_pool_entropy_available; Comment: Checks whether the |pool|'s entropy is available to the caller. This is the case when entropy count and buffer length are high enough. Returns |entropy| if the entropy count and buffer size is large enough 0 otherwise 
Name: rand_pool_entropy_needed; Comment: Returns the (remaining) amount of entropy needed to fill the random pool. 
Name: rand_pool_grow; Comment: Increase the allocation size -- not usable for an attached pool 
Name: rand_pool_bytes_needed; Comment: Returns the number of bytes needed to fill the pool, assuming the input has 1 / |entropy_factor| entropy bits per data bit. In case of an error, 0 is returned. 
Name: rand_pool_bytes_remaining; Comment: Returns the remaining number of bytes available 
Name: rand_pool_add; Comment: Add random bytes to the random pool. It is expected that the |buffer| contains |len| bytes of random input which contains at least |entropy| bits of randomness. Returns 1 if the added amount is adequate, otherwise 0 
Name: rand_pool_add_begin; Comment: Start to add random bytes to the random pool in-place. Reserves the next |len| bytes for adding random bytes in-place and returns a pointer to the buffer. The caller is allowed to copy up to |len| bytes into the buffer. If |len| == 0 this is considered a no-op and a NULL pointer is returned without producing an error message. After updating the buffer, rand_pool_add_end() needs to be called to finish the update operation (see next comment). 
Name: rand_pool_add_end; Comment: Finish to add random bytes to the random pool in-place. Finishes an in-place update of the random pool started by rand_pool_add_begin() (see previous comment). It is expected that |len| bytes of random input have been added to the buffer which contain at least |entropy| bits of randomness. It is allowed to add less bytes than originally reserved. 
Name: RAND_priv_bytes; Comment: This function is not part of RAND_METHOD, so if we're not using the default method, then just call RAND_bytes(). Otherwise make sure we're instantiated and use the private DRBG. 
Name: rand_pool_init; Comment: empty implementation 
Name: rand_pool_acquire_entropy; Comment: The following algorithm repeatedly samples the real-time clock (RTC) to generate a sequence of unpredictable data. The algorithm relies upon the uneven execution speed of the code (due to factors such as cache misses, interrupts, bus activity, and scheduling) and upon the rather large relative difference between the speed of the clock and the rate at which it can be read. If it is ported to an environment where execution speed is more constant or where the RTC ticks at a much slower rate, or the clock can be read with fewer instructions, it is likely that the results would be far more predictable. This should only be used for legacy platforms. As a precaution, we assume only 2 bits of entropy per byte. 
Name: sysctl_random; Comment: sysctl_random(): Use sysctl() to read a random number from the kernel Returns the number of bytes returned in buf on success, -1 on failure. 
Name: syscall_random; Comment: syscall_random(): Try to get random data using a system call returns the number of bytes returned in buf, or < 0 on error. 
Name: wait_random_seeded; Comment: Ensure that the system randomness source has been adequately seeded. This is done by having the first start of libcrypto, wait until the device /dev/random becomes able to supply a byte of entropy. Subsequent starts of the library and later reseedings do not need to do this. 
Name: check_random_device; Comment: Verify that the file descriptor associated with the random source is still valid. The rationale for doing this is the fact that it is not uncommon for daemons to close all open file handles when daemonizing. So the handle might have been closed or even reused for opening another file. 
Name: get_random_device; Comment: Open a random device if required and return its file descriptor or -1 on error 
Name: close_random_device; Comment: Close a random device making sure it is a random device 
Name: rand_pool_init; Comment: !defined(OPENSSL_RAND_SEED_DEVRANDOM) 
Name: rand_pool_acquire_entropy; Comment: Try the various seeding methods in turn, exit when successful. TODO(DRBG): If more than one entropy source is available, is it preferable to stop as soon as enough entropy has been collected (as favored by @rsalz) or should one rather be defensive and add more entropy than requested and/or from different sources? Currently, the user can select multiple entropy sources in the configure step, yet in practice only the first available source will be used. A more flexible solution has been requested, but currently it is not clear how this can be achieved without overengineering the problem. There are many parameters which could be taken into account when selecting the order and amount of input from the different entropy sources (trust, quality, possibility of blocking). 
Name: get_time_stamp; Comment: Get the current time with the highest possible resolution The time stamp is added to the nonce, so it is optimized for not repeating. The current time is ideal for this purpose, provided the computer's clock is synchronized. 
Name: get_timer_bits; Comment: Get an arbitrary timer value of the highest possible resolution The timer value is added as random noise to the additional data, which is not considered a trusted entropy sourec, so any result is acceptable. 
Name: prepare_item_list; Comment: Input: items_data - an array of lengths and codes items_data_num - number of elements in that array Output: items - pre-allocated ILE3 array to be filled. It's assumed to have items_data_num elements plus one extra for the terminating NULL element databuffer - pre-allocated 32-bit word array. Returns the number of elements used in databuffer 
Name: rand_pool_acquire_entropy; Comment: MAIN ENTROPY ACQUISITION FUNCTIONS ================================== These functions are called by the RAND / DRBG functions 
Name: RC2_cfb64_encrypt; Comment: None 
Name: RC2_ofb64_encrypt; Comment: None 
Name: RC2_ecb_encrypt; Comment: -RC2 as implemented frm a posting from Newsgroups: sci.crypt Subject: Specification for Ron Rivests Cipher No.2 Message-ID: <4fk39f$f70@net.auckland.ac.nz> Date: 11 Feb 1996 06:45:03 GMT 
Name: RC2_set_key; Comment: It has come to my attention that there are 2 versions of the RC2 key schedule. One which is normal, and anther which has a hook to use a reduced key length. BSAFE uses the 'retarded' version. What I previously shipped is the same as specifying 1024 for the 'bits' parameter. Bsafe uses a version where the bits parameter is the same as len*8 
Name: RC4; Comment: -RC4 as implemented from a posting from Newsgroups: sci.crypt Subject: RC4 Algorithm revealed. Message-ID: <sternCvKL4B.Hyy@netcom.com> Date: Wed, 14 Sep 1994 06:35:31 GMT 
Name: RC4_set_key; Comment: -RC4 as implemented from a posting from Newsgroups: sci.crypt Subject: RC4 Algorithm revealed. Message-ID: <sternCvKL4B.Hyy@netcom.com> Date: Wed, 14 Sep 1994 06:35:31 GMT 
Name: RC5_32_cfb64_encrypt; Comment: None 
Name: RC5_32_ofb64_encrypt; Comment: None 
Name: rsa_param_encode; Comment: Set any parameters associated with pkey 
Name: rsa_param_decode; Comment: Decode any parameters and set them in RSA structure 
Name: rsa_md_to_algor; Comment: allocate and set algorithm ID from EVP_MD, default SHA1 
Name: rsa_md_to_mgf1; Comment: Allocate and set MGF1 algorithm ID from EVP_MD 
Name: rsa_algor_to_md; Comment: convert algorithm ID to EVP_MD, default SHA1 
Name: rsa_ctx_to_pss; Comment: Convert EVP_PKEY_CTX in PSS mode into corresponding algorithm parameter, suitable for setting an AlgorithmIdentifier. 
Name: rsa_pss_to_ctx; Comment: From PSS AlgorithmIdentifier set public key parameters. If pkey isn't NULL then the EVP_MD_CTX is setup and initialised. If it is NULL parameters are passed to pkctx instead. 
Name: rsa_item_verify; Comment: Customised RSA item verification routine. This is called when a signature is encountered requiring special handling. We currently only handle PSS. 
Name: rsa_cb; Comment: Override the default free and new methods, and calculate helper products for multi-prime RSA keys. 
Name: rsa_pss_cb; Comment: Free up maskHash 
Name: rsa_oaep_cb; Comment: Free up maskHash 
Name: RSA_generate_key_ex; Comment: NB: this wrapper would normally be placed in rsa_lib.c and the static implementation would probably be in rsa_eay.c. Nonetheless, is kept here so that we don't introduce a new linker dependency. Eg. any application that wasn't previously linking object code related to key-generation won't have to now just because key-generation is part of RSA_METHOD. 
Name: RSA_set0_multi_prime_params; Comment: Is it better to export RSA_PRIME_INFO structure and related functions to let user pass a triplet? 
Name: int; Comment: Can be null 
Name: int; Comment: called at new 
Name: int; Comment: called at free 
Name: rsa_multip_calc_product; Comment: Refill products of primes 
Name: rsa_ossl_private_encrypt; Comment: signing 
Name: rsa_ossl_public_decrypt; Comment: signature verification 
Name: rsa_set_pss_param; Comment: Set PSS parameters when generating a key, if necessary 
Name: pkey_pss_init; Comment: Called for PSS sign or verify initialisation: checks PSS parameter sanity and sets any restrictions on key usage. 
Name: encode_pkcs1; Comment: encode_pkcs1 encodes a DigestInfo prefix of hash |type| and digest |m|, as described in EMSA-PKCS1-v1_5-ENCODE, RFC 3447 section 9.2 step 2. This encodes the DigestInfo (T and tLen) but does not add the padding. On success, it returns one and sets |*out| to a newly allocated buffer containing the result and |*out_len| to its length. The caller must free |*out| with |OPENSSL_free|. Otherwise, it returns zero. 
Name: int_rsa_verify; Comment: int_rsa_verify verifies an RSA signature in |sigbuf| using |rsa|. It may be called in two modes. If |rm| is NULL, it verifies the signature for digest |m|. Otherwise, it recovers the digest from the signature, writing the digest to |rm| and the length to |*prm_len|. |type| is the NID of the digest algorithm to use. It returns one on successful verification and zero otherwise. 
Name: RSA_padding_check_SSLv23; Comment: Copy of RSA_padding_check_PKCS1_type_2 with a twist that rejects padding if nul delimiter is not preceded by 8 consecutive 0x03 bytes. It also preserves error code reporting for backward compatibility. 
Name: RSA_X931_hash_id; Comment: Translate between X931 hash ids and NIDs 
Name: RSA_X931_derive_ex; Comment: X9.31 RSA key derivation and generation 
Name: SEED_ecb_encrypt; Comment: Copyright 2007-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: Theta; Comment: This is straightforward or "maximum clarity" implementation aiming to resemble section 3.2 of the FIPS PUB 202 "SHA-3 Standard: Permutation-Based Hash and Extendible-Output Functions" as much as possible. With one caveat. Because of the way C stores matrices, references to A[x,y] in the specification are presented as A[y][x]. Implementation unrolls inner x-loops so that modulo 5 operations are explicitly pre-computed. 
Name: Round; Comment: This implementation is optimization of above code featuring unroll of even y-loops, their fusion and code motion. It also minimizes temporary storage. Compiler would normally do all these things for you, purpose of manual optimization is to provide "unobscured" reference for assembly implementation [in case this approach is chosen for implementation on some platform]. In the nutshell it's equivalent of "plane-per-plane processing" approach discussed in section 2.4 of "Keccak implementation overview". 
Name: Round; Comment: This is variant of above KECCAK_1X that reduces requirement for temporary storage even further, but at cost of more updates to A[][]. It's less suitable if A[][] is memory bound, but better if it's register bound. 
Name: Round; Comment: This implementation is variant of KECCAK_1X above with outer-most round loop unrolled twice. This allows to take temporary storage out of round procedure and simplify references to it by alternating it with actual data (see round loop below). Originally it was meant rather as reference for an assembly implementation, but it seems to play best with compilers [as well as provide best instruction per processed byte ratio at minimal round unroll factor]... 
Name: FourRounds; Comment: This implementation is KECCAK_1X from above combined 4 times with a twist that allows to omit temporary storage and perform in-place processing. It's discussed in section 2.5 of "Keccak implementation overview". It's likely to be best suited for processors with large register bank... On the other hand processor with large register bank can as well use KECCAK_1X_ALT, it would be as fast but much more compact... 
Name: SHA3_absorb; Comment: SHA3_absorb can be called multiple times, but at each invocation largest multiple of |r| out of |len| bytes are processed. Then remaining amount of bytes is returned. This is done to spare caller trouble of calculating the largest multiple of |r|. |r| can be viewed as blocksize. It is commonly (1600 - 256*n)/8, e.g. 168, 136, 104, 72, but can also be (1600 - 448)/8 = 144. All this means that message padding and intermediate sub-block buffering, byte- or bitwise, is caller's responsibility. 
Name: SHA3_squeeze; Comment: SHA3_squeeze is called once at the end to generate |out| hash value of |len| bytes. 
Name: SHA3_sponge; Comment: None 
Name: sha512_block_data_order; Comment: This code should give better results on 32-bit CPU with less than ~24 registers, both size and performance wise... 
Name: SipHash_Init; Comment: hash_size = crounds = drounds = 0 means SipHash24 with 16-byte output 
Name: siphash_size; Comment: SIPHASH "ASN1" method. This is just here to indicate the maximum SIPHASH output length and to free up a SIPHASH key. 
Name: srp_Calc_xy; Comment: calculate = SHA1(PAD(x) || PAD(y)) 
Name: SRP_check_known_gN_param; Comment: Check if G and N are known parameters. The values have been generated from the ietf-tls-srp draft version 8 
Name: t_fromb64; Comment: Convert a base64 string into raw byte array representation. Returns the length of the decoded data, or -1 on error. 
Name: t_tob64; Comment: Convert a raw byte string into a null-terminated base64 ASCII string. Returns 1 on success or 0 on error. 
Name: SRP_VBASE_init; Comment: this function parses verifier file. Format is: string(index):base64(N):base64(g):0 string(username):base64(v):base64(salt):int(index) 
Name: SRP_VBASE_get_by_user; Comment: DEPRECATED: use SRP_VBASE_get1_by_user instead. This method ignores the configured seed and fails for an unknown user. Ownership of the returned pointer is not released to the caller. In other words, caller must not free the result. 
Name: SRP_VBASE_get1_by_user; Comment: Ownership of the returned pointer is released to the caller. In other words, caller must free the result once done. 
Name: SRP_create_verifier; Comment: create a verifier (*salt,*verifier,g and N are in base64) 
Name: SRP_create_verifier_BN; Comment: create a verifier (*salt,*verifier,g and N are BIGNUMs). If *salt != NULL then the provided salt will be used. On successful exit *verifier will point to a newly allocated BIGNUM containing the verifier and (if a salt was not provided) *salt will be populated with a newly allocated BIGNUM containing a random salt. The caller is responsible for freeing the allocated *salt and *verifier BIGNUMS. 
Name: compute_growth; Comment: Calculate the array growth based on the target size. The growth fraction is a rational number and is defined by a numerator and a denominator. According to Andrew Koenig in his paper "Why Are Vectors Efficient?" from JOOP 11(5) 1998, this factor should be less than the golden ratio (1.618...). We use 3/2 = 1.5 for simplicity of calculation and overflow checking. Another option 8/5 = 1.6 allows for slightly faster growth, although safe computation is more difficult. The limit to avoid overflow is spot on. The modulo three correction term ensures that the limit is the largest number than can be expanded by the growth factor without exceeding the hard limit. Do not call it with |current| lower than 2, or it will infinitely loop. 
Name: sk_reserve; Comment: internal STACK storage allocation 
Name: file_get_pass; Comment: - Password prompting ------------------ 
Name: file_get_pem_pass; Comment: This is used anywhere a pem_password_cb is needed 
Name: try_decode_PKCS12; Comment: PKCS#12 decoder. It operates by decoding all of the blob content,extracting all the interesting data from it and storing them internally, then serving them one piece at a time. 
Name: try_decode_PKCS8Encrypted; Comment: Encrypted PKCS#8 decoder. It operates by just decrypting the given blobinto a new blob, which is returned as an EMBEDDED STORE_INFO. The whole decoding process will then start over with the new blob. 
Name: try_decode_PUBKEY; Comment: Public key decoder. Only supports SubjectPublicKeyInfo formatted keys. 
Name: try_decode_params; Comment: Key parameter decoder. 
Name: try_decode_X509Certificate; Comment: X.509 certificate decoder. 
Name: try_decode_X509CRL; Comment: X.509 CRL decoder. 
Name: if; Comment: If ctx == NULL, the library is looking to know if this loader supports the given search type. 
Name: if; Comment: 10 is the number of characters in "Proc-Type:", which PEM_get_EVP_CIPHER_INFO() requires to be present. If the PEM header has less characters than that, it's not worth spending cycles on it. 
Name: if; Comment: Then, if the expected type is a CRL, check that the extension starts with 'r' 
Name: store_info_new; Comment: Functions to generate OSSL_STORE_INFOs, one function for each type we support having in them as well as a generic constructor. In all cases, ownership of the object is transferred to the OSSL_STORE_INFO and will therefore be freed when the OSSL_STORE_INFO is freed. 
Name: OSSL_STORE_INFO_get_type; Comment: Functions to try to extract data from a OSSL_STORE_INFO. 
Name: OSSL_STORE_INFO_free; Comment: Free the OSSL_STORE_INFO 
Name: OSSL_STORE_SEARCH_by_name; Comment: Search term constructors 
Name: OSSL_STORE_SEARCH_free; Comment: Search term destructor 
Name: OSSL_STORE_SEARCH_get_type; Comment: Search term accessors 
Name: ossl_store_info_new_EMBEDDED; Comment: Internal functions 
Name: OSSL_STORE_LOADER_new; Comment: Functions for manipulating OSSL_STORE_LOADERs 
Name: store_loader_hash; Comment: Functions for registering OSSL_STORE_LOADERs 
Name: PKCS7_to_TS_TST_INFO; Comment: Getting encapsulated TS_TST_INFO object from PKCS7. 
Name: TS_CONF_load_cert; Comment: Function definitions for certificate and key loading. 
Name: ts_CONF_lookup_fail; Comment: Function definitions for handling configuration options. 
Name: def_serial_cb; Comment: Default callback for response generation. 
Name: TS_RESP_CTX_new; Comment: TS_RESP_CTX management functions. 
Name: TS_RESP_create_response; Comment: Main entry method of the response generation. 
Name: ts_RESP_CTX_init; Comment: Initializes the variable part of the context. 
Name: ts_RESP_CTX_cleanup; Comment: Cleans up the variable part of the context. 
Name: ts_RESP_check_request; Comment: Checks the format and content of the request. 
Name: ts_RESP_get_policy; Comment: Returns the TSA policy based on the requested and acceptable policies. 
Name: ts_RESP_create_tst_info; Comment: Creates the TS_TST_INFO object based on the settings of the context. 
Name: ts_RESP_process_extensions; Comment: Processing the extensions of the request. 
Name: ts_RESP_sign; Comment: Functions for signing the TS_TST_INFO structure of the context. 
Name: TS_RESP_set_tst_info; Comment: Caller loses ownership of PKCS7 and TS_TST_INFO objects. 
Name: TS_RESP_verify_signature; Comment: -This function carries out the following tasks: - Checks if there is one and only one signer. - Search for the signing certificate in 'certs' and in the response. - Check the extended key usage and key usage fields of the signer certificate (done by the path validation). - Build and validate the certificate path. - Check if the certificate path meets the requirements of the SigningCertificate ESS signed attribute. - Verify the signature value. - Returns the signer certificate in 'signer', if 'signer' is not NULL. 
Name: ts_verify_cert; Comment: The certificate chain is returned in chain. Caller is responsible for freeing the vector. 
Name: ts_find_cert; Comment: Returns < 0 if certificate is not found, certificate index otherwise. 
Name: ts_find_cert_v2; Comment: Returns < 0 if certificate is not found, certificate index otherwise. 
Name: TS_RESP_verify_response; Comment: -Verifies whether 'response' contains a valid response with regards to the settings of the context: - Gives an error message if the TS_TST_INFO is not present. - Calls _TS_RESP_verify_token to verify the token content. 
Name: TS_RESP_verify_token; Comment: Tries to extract a TS_TST_INFO structure from the PKCS7 token and calls the internal int_TS_RESP_verify_token function for verifying it. 
Name: int_ts_RESP_verify_token; Comment: -Verifies whether the 'token' contains a valid time stamp token with regards to the settings of the context. Only those checks are carried out that are specified in the context: - Verifies the signature of the TS_TST_INFO. - Checks the version number of the response. - Check if the requested and returned policies math. - Check if the message imprints are the same. - Check if the nonces are the same. - Check if the TSA name matches the signer. - Check if the TSA name is the expected TSA. 
Name: ts_check_signer_name; Comment: Check if the specified TSA name matches either the subject or one of the subject alternative names of the TSA certificate. 
Name: ts_find_name; Comment: Returns 1 if name is in gen_names, 0 otherwise. 
Name: UI_add_input_string; Comment: Returns the index to the place in the stack or -1 for error. Uses a direct reference to the prompt. 
Name: UI_dup_input_string; Comment: Same as UI_add_input_string(), excepts it takes a copy of the prompt 
Name: UI_destroy_method; Comment: BIG FSCKING WARNING!!!! If you use this on a statically allocated method (that is, it hasn't been allocated using UI_create_method(), you deserve anything Murphy can throw at you and more! You have been warned. 
Name: UI_null; Comment: The method with all the built-in thingies 
Name: write_string; Comment: The following function makes sure that info and error strings are printed before any prompt. 
Name: read_till_nl; Comment: Internal functions to read a string without echoing 
Name: open_console; Comment: Internal functions to open, handle and close a channel to the console. 
Name: pushsig; Comment: Internal functions to handle signals and act on them 
Name: UI_OpenSSL; Comment: The method with all the built-in console thingies 
Name: X509_NAME_get_index_by_OBJ; Comment: NOTE: you should be passing -1, not 0 as lastpos 
Name: X509_NAME_add_entry; Comment: if set is -1, append to previous set, 0 'a new one', and 1, prepend to the guy we are about to stomp on. 
Name: NETSCAPE_SPKI_b64_decode; Comment: Load a Netscape SPKI from a base64 encoded string 
Name: NETSCAPE_SPKI_b64_encode; Comment: Generate a base64 encoded string from an SPKI 
Name: X509_cmp; Comment: Compare two certificates: they must be identical for this to work. NB: Although "cmp" operations are generally prototyped to take "const" arguments (eg. for use in STACKs), the way X509 handling is - these operations may involve ensuring the hashes are up-to-date and ensuring certain cert information is cached. So this is the point where the "depth-first" constification tree has to halt with an evil cast. 
Name: X509_NAME_hash_old; Comment: I now DER encode the name and hash it. Since I cache the DER encoding, this is reasonably efficient. 
Name: X509_find_by_issuer_and_serial; Comment: Search a stack of X509 for a match 
Name: X509_STORE_CTX_get1_issuer; Comment: -Try to get issuer certificate from store. Due to limitations of the API this can only retrieve a single certificate matching a given subject name. However it will fill the cache with all matching certificates, so we can examine the cache for all matches. Return values are: 1 lookup successful. 0 certificate not found. -1 some other error. 
Name: X509_NAME_oneline; Comment: Limit to ensure we don't overflow: much greater than anything encountered in practice. 
Name: X509_REQ_add_extensions_nid; Comment: Add a STACK_OF extensions to a certificate request: allow alternative OIDs in case we want to create a non standard one. 
Name: X509_REQ_add_extensions; Comment: This is the normal usage: use the "official" OID 
Name: X509_REQ_get_attr_count; Comment: Request attribute functions 
Name: cert_self_signed; Comment: Return 1 is a certificate is self signed 
Name: lookup_cert_match; Comment: Given a certificate try and find an exact match in the store 
Name: verify_cb_cert; Comment: -Inform the verify callback of an error. If B<x> is not NULL it is the error cert, otherwise use the chain cert at B<depth>. If B<err> is not X509_V_OK, that's the error value, otherwise leave unchanged (presumably set by the caller). Returns 0 to abort verification with an error, non-zero to continue. 
Name: verify_cb_crl; Comment: -Inform the verify callback of an error, CRL-specific variant. Here, the error depth and certificate are already set, we just specify the error number. Returns 0 to abort verification with an error, non-zero to continue. 
Name: find_issuer; Comment: Given a STACK_OF(X509) find the issuer of cert (if any) 
Name: check_issued; Comment: Given a possible certificate and issuer check them 
Name: get_issuer_sk; Comment: Alternative lookup method: look from a STACK stored in other_ctx 
Name: check_purpose; Comment: Check EE or CA certificate purpose. For trusted certificates explicit local auxiliary trust can be used to override EKU-restrictions. 
Name: check_chain_extensions; Comment: Check a certificate chains extensions for consistency with the supplied purpose 
Name: check_crl_time; Comment: Check CRL times against values in X509_STORE_CTX 
Name: crl_extension_match; Comment: Compare two CRL extensions for delta checking purposes. They should be both present or both absent. If both present all fields must be identical. 
Name: check_delta_base; Comment: See if a base and delta are compatible 
Name: get_delta_sk; Comment: For a given base CRL find a delta... maybe extend to delta scoring or retrieve a chain of deltas... 
Name: get_crl_score; Comment: For a given CRL return how suitable it is for the supplied certificate 'x'. The return value is a mask of several criteria. If the issuer is not the certificate issuer this is returned in *pissuer. The reasons mask is also used to determine if the CRL is suitable: if no new reasons the CRL is rejected, otherwise reasons is updated. 
Name: check_crl_path; Comment: Check the path of a CRL issuer certificate. This creates a new X509_STORE_CTX and populates it with most of the parameters from the parent. This could be optimised somewhat since a lot of path checking will be duplicated by the parent, but this will rarely be used in practice. 
Name: check_crl_chain; Comment: RFC3280 says nothing about the relationship between CRL path and certificate path, which could lead to situations where a certificate could be revoked or validated by a CA not authorised to do so. RFC5280 is more strict and states that the two paths must end in the same trust anchor, though some discussions remain... until this is resolved we use the RFC5280 version 
Name: idp_check_dp; Comment: -Check for match between two dist point names: three separate cases. 1. Both are relative names and compare X509_NAME types. 2. One full, one relative. Compare X509_NAME to GENERAL_NAMES. 3. Both are full names and compare two GENERAL_NAMES. 4. One is NULL: automatic match. 
Name: crl_crldp_check; Comment: Check CRLDP and IDP 
Name: get_crl_delta; Comment: Retrieve CRL corresponding to current certificate. If deltas enabled try to find a delta CRL too 
Name: check_crl; Comment: Check CRL validity 
Name: cert_crl; Comment: Check certificate against CRL 
Name: x509_check_cert_time; Comment: -Check certificate validity times. If depth >= 0, invoke verification callbacks on error, otherwise just return the validation status. Return 1 on success, 0 otherwise. 
Name: X509_CRL_diff; Comment: Make a delta CRL as the diff between two full CRLs 
Name: X509_STORE_CTX_purpose_inherit; Comment: This function is used to set the X509_STORE_CTX purpose and trust values. This is intended to be used when another structure has its own trust and purpose values which (if set) will be inherited by the ctx. If they aren't set then we will usually have a default purpose in mind which should then be used to set the trust value. An example of this is SSL use: an SSL structure will have its own purpose and trust settings which the application can set: if they aren't set then we use the default of SSL client/server. 
Name: X509_STORE_CTX_set0_trusted_stack; Comment: Set alternative lookup method: just a STACK of trusted certificates. This avoids X509_STORE nastiness where it isn't needed. 
Name: dane_match; Comment: impossible uint8_t 
Name: get_issuer; Comment: Get issuer, without duplicate suppression 
Name: check_key_level; Comment: Check whether the public key of ``cert`` meets the security level of ``ctx``. Returns 1 on success, 0 otherwise. 
Name: check_sig_level; Comment: Check whether the signature digest algorithm of ``cert`` meets the security level of ``ctx``. Should not be checked for trust anchors (whether self-signed or otherwise). Returns 1 on success, 0 otherwise. 
Name: X509_VERIFY_PARAM_inherit; Comment: Macro to test and copy a field if necessary 
Name: X509_VERIFY_PARAM_move_peername; Comment: Move peername from one param structure to another, freeing any name present at the target. If the source is a NULL parameter structure, free and zero the target peername. 
Name: crl_inf_cb; Comment: The X509_CRL_INFO structure needs a bit of customisation. Since we cache the original encoding the signature won't be affected by reordering of the revoked field. 
Name: crl_set_issuers; Comment: Set CRL entry issuer according to CRL certificate issuer extension. Check for unhandled critical CRL entry extensions. 
Name: crl_cb; Comment: The X509_CRL structure needs a bit of customisation. Cache some extensions and hash of the whole CRL. 
Name: setup_idp; Comment: Convert IDP into a more convenient form 
Name: x509_name_canon; Comment: This function generates the canonical encoding of the Name structure. In it all strings are converted to UTF8, leading, trailing and multiple spaces collapsed, converted to lower case and the leading SEQUENCE header removed. In future we could also normalize the UTF8 too. By doing this comparison of Name structures can be rapidly performed by just using memcmp() of the canonical encoding. By omitting the leading SEQUENCE name constraints of type dirName can also be checked with a simple memcmp(). 
Name: asn1_string_canon; Comment: Bitmap of all the types of string that will be canonicalized. 
Name: pubkey_cb; Comment: Minor tweak to operation: free up EVP_PKEY 
Name: x509_pubkey_decode; Comment: Attempt to decode a public key. Returns 1 on success, 0 for a decode failure and -1 for a fatal error e.g. malloc failure. 
Name: d2i_PUBKEY; Comment: Now two pseudo ASN1 routines that take an EVP_PKEY structure and encode or decode as X509_PUBKEY 
Name: rinf_cb; Comment: - X509_REQ_INFO is handled in an unusual way to get round invalid encodings. Some broken certificate requests don't encode the attributes field if it is empty. This is in violation of PKCS#10 but we need to tolerate it. We dothis by making the attributes field OPTIONAL then using the callback to initialise it to an empty STACK. This means that the field will be correctly encoded unless we NULL out the field. As a result we no longer need the req_kludge field because the information is now contained in the attributes field: 1. If it is NULL then it's the invalid omission. 2. If it is empty it is the correct encoding. 3. If it is not empty then some attributes are present. 
Name: d2i_X509_AUX; Comment: X509_AUX ASN1 routines. X509_AUX is the name given to a certificate with extra info tagged on the end. Since these functions set how a certificate is trusted they should only be used when the certificate comes from a reliable source such as local storage. 
Name: i2d_x509_aux_internal; Comment: Serialize trusted certificate to *pp or just return the required buffer length if pp == NULL. We ultimately want to avoid modifying *pp in the error path, but that depends on similar hygiene in lower-level functions. Here we avoid compounding the problem. 
Name: i2d_X509_AUX; Comment: Serialize trusted certificate to *pp, or just return the required buffer length if pp == NULL. When pp is not NULL, but *pp == NULL, we allocate the buffer, but since we're writing two ASN.1 objects back to back, we can't have i2d_X509() do the allocation, nor can we allow i2d_X509_CERT_AUX() to increment the allocated buffer. 
Name: policy_cache_create; Comment: Set cache entry according to CertificatePolicies extension. Note: this destroys the passed CERTIFICATEPOLICIES structure. 
Name: policy_data_free; Comment: Policy Node routines 
Name: policy_data_new; Comment: Create a data based on an existing policy. If 'id' is NULL use the OID in the policy, otherwise use 'id'. This behaviour covers the two types of data in RFC3280: data with from a CertificatePolicies extension and additional data with just the qualifiers of anyPolicy and ID from another source. 
Name: X509_policy_tree_level_count; Comment: X509_POLICY_TREE stuff 
Name: X509_policy_level_node_count; Comment: X509_POLICY_LEVEL stuff 
Name: X509_policy_node_get0_policy; Comment: X509_POLICY_NODE stuff 
Name: policy_cache_set_mapping; Comment: Set policy mapping entries in cache. Note: this modifies the passed POLICY_MAPPINGS structure 
Name: policy_node_match; Comment: See if a policy node matches a policy OID. If mapping enabled look through expected policy set otherwise just valid policy. 
Name: tree_init; Comment: -Return value: <= 0 on error, or positive bit mask: X509_PCY_TREE_VALID: valid tree X509_PCY_TREE_EMPTY: empty tree (including bare TA case) X509_PCY_TREE_EXPLICIT: explicit policy required 
Name: tree_link_matching_nodes; Comment: Return value: 1 on success, 0 otherwise 
Name: tree_link_nodes; Comment: This corresponds to RFC3280 6.1.3(d)(1): link any data from CertificatePolicies onto matching parent or anyPolicy if no match. Return value: 1 on success, 0 otherwise. 
Name: tree_add_unmatched; Comment: This corresponds to RFC3280 6.1.3(d)(2): Create new data for any unmatched policies in the parent and link to anyPolicy. Return value: 1 on success, 0 otherwise. 
Name: tree_link_unmatched; Comment: Return value: 1 on success, 0 otherwise. 
Name: tree_link_any; Comment: Return value: 1 on success, 0 otherwise 
Name: tree_prune; Comment: -Prune the tree: delete any child mapped child data on the current level then proceed up the tree deleting any data with no children. If we ever have no data on a level we can halt because the tree will be empty. Return value: <= 0 error, otherwise one of: X509_PCY_TREE_VALID: valid tree X509_PCY_TREE_EMPTY: empty tree 
Name: tree_add_auth_node; Comment: Return value: 1 on success, 0 otherwise. 
Name: tree_calculate_authority_set; Comment: -Calculate the authority set based on policy tree. The 'pnodes' parameter is used as a store for the set of policy nodes used to calculate the user set. If the authority set is not anyPolicy then pnodes will just point to the authority set. If however the authority set is anyPolicy then the set of valid policies (other than anyPolicy) is store in pnodes. Return value: TREE_CALC_FAILURE on failure, TREE_CALC_OK_NOFREE on success and pnodes need not be freed, TREE_CALC_OK_DOFREE on success and pnodes needs to be freed 
Name: tree_calculate_user_set; Comment: Return value: 1 on success, 0 otherwise. 
Name: tree_evaluate; Comment: -Return value: <= 0 error, otherwise one of: X509_PCY_TREE_VALID: valid tree X509_PCY_TREE_EMPTY: empty tree (see tree_prune()). 
Name: X509_policy_check; Comment: -Application policy checking function. Return codes: X509_PCY_TREE_FAILURE: Failure to satisfy explicit policy X509_PCY_TREE_INVALID: Inconsistent or invalid extensions X509_PCY_TREE_INTERNAL: Internal error, most likely malloc X509_PCY_TREE_VALID: Success (null tree if empty or bare TA) 
Name: length_from_afi; Comment: What's the address length associated with this AFI? 
Name: X509v3_addr_get_afi; Comment: Extract the AFI from an IPAddressFamily. 
Name: addr_expand; Comment: Expand the bitstring form of an address into a raw byte array. At the moment this is coded for simplicity, not speed. 
Name: i2r_address; Comment: i2r handler for one address bitstring. 
Name: i2r_IPAddressOrRanges; Comment: i2r handler for a sequence of addresses and ranges. 
Name: i2r_IPAddrBlocks; Comment: i2r handler for an IPAddrBlocks extension. 
Name: IPAddressOrRange_cmp; Comment: Sort comparison function for a sequence of IPAddressOrRange elements. There's no sane answer we can give if addr_expand() fails, and an assertion failure on externally supplied data is seriously uncool, so we just arbitrarily declare that if given invalid inputs this function returns -1. If this messes up your preferred sort order for garbage input, tough noogies. 
Name: v4IPAddressOrRange_cmp; Comment: IPv4-specific closure over IPAddressOrRange_cmp, since sk_sort() comparison routines are only allowed two arguments. 
Name: v6IPAddressOrRange_cmp; Comment: IPv6-specific closure over IPAddressOrRange_cmp, since sk_sort() comparison routines are only allowed two arguments. 
Name: range_should_be_prefix; Comment: Calculate whether a range collapses to a prefix. See last paragraph of RFC 3779 2.2.3.7. 
Name: make_addressPrefix; Comment: Construct a prefix. 
Name: make_addressRange; Comment: Construct a range. If it can be expressed as a prefix, return a prefix instead. Doing this here simplifies the rest of the code considerably. 
Name: make_IPAddressFamily; Comment: Construct a new address family or find an existing one. 
Name: X509v3_addr_add_inherit; Comment: Add an inheritance element. 
Name: make_prefix_or_range; Comment: Construct an IPAddressOrRange sequence, or return an existing one. 
Name: X509v3_addr_add_prefix; Comment: Add a prefix. 
Name: X509v3_addr_add_range; Comment: Add a range. 
Name: extract_min_max; Comment: Extract min and max values from an IPAddressOrRange. 
Name: X509v3_addr_get_range; Comment: Public wrapper for extract_min_max(). 
Name: IPAddressFamily_cmp; Comment: Sort comparison function for a sequence of IPAddressFamily. The last paragraph of RFC 3779 2.2.3.3 is slightly ambiguous about the ordering: I can read it as meaning that IPv6 without a SAFI comes before IPv4 with a SAFI, which seems pretty weird. The examples in appendix B suggest that the author intended the null-SAFI rule to apply only within a single AFI, which is what I would have expected and is what the following code implements. 
Name: X509v3_addr_is_canonical; Comment: Check whether an IPAddrBLocks is in canonical form. 
Name: IPAddressOrRanges_canonize; Comment: Whack an IPAddressOrRanges into canonical form. 
Name: X509v3_addr_canonize; Comment: Whack an IPAddrBlocks extension into canonical form. 
Name: v2i_IPAddrBlocks; Comment: v2i handler for the IPAddrBlocks extension. 
Name: X509v3_addr_inherits; Comment: Figure out whether extension sues inheritance. 
Name: addr_contains; Comment: Figure out whether parent contains child. 
Name: X509v3_addr_subset; Comment: Test whether a is a subset of b. 
Name: addr_validate_path_internal; Comment: Core code for RFC 3779 2.3 path validation. Returns 1 for success, 0 on error. When returning 0, ctx->error MUST be set to an appropriate value other than X509_V_OK. 
Name: X509v3_addr_validate_path; Comment: RFC 3779 2.3 path validation -- called from X509_verify_cert(). 
Name: X509v3_addr_validate_resource_set; Comment: RFC 3779 2.3 path validation of an extension. Test whether chain covers extension. 
Name: v2i_AUTHORITY_KEYID; Comment: -Currently two options: keyid: use the issuers subject keyid, the value 'always' means its is an error if the issuer certificate doesn't have a key id. issuer: use the issuers cert issuer and serial number. The default is to only use this if keyid is not present. With the option 'always' this is always included. 
Name: copy_issuer; Comment: Append subject altname of issuer to issuer alt name of subject 
Name: copy_email; Comment: Copy any email addresses in a certificate or request to GENERAL_NAMES 
Name: i2r_ASIdentifierChoice; Comment: i2r method for an ASIdentifierChoice. 
Name: i2r_ASIdentifiers; Comment: i2r method for an ASIdentifier extension. 
Name: ASIdOrRange_cmp; Comment: Sort comparison function for a sequence of ASIdOrRange elements. 
Name: X509v3_asid_add_inherit; Comment: Add an inherit element. 
Name: X509v3_asid_add_id_or_range; Comment: Add an ID or range to an ASIdentifierChoice. 
Name: extract_min_max; Comment: Extract min and max values from an ASIdOrRange. 
Name: ASIdentifierChoice_is_canonical; Comment: Check whether an ASIdentifierChoice is in canonical form. 
Name: X509v3_asid_is_canonical; Comment: Check whether an ASIdentifier extension is in canonical form. 
Name: ASIdentifierChoice_canonize; Comment: Whack an ASIdentifierChoice into canonical form. 
Name: X509v3_asid_canonize; Comment: Whack an ASIdentifier extension into canonical form. 
Name: v2i_ASIdentifiers; Comment: v2i method for an ASIdentifier extension. 
Name: X509v3_asid_inherits; Comment: Figure out whether extension uses inheritance. 
Name: asid_contains; Comment: Figure out whether parent contains child. 
Name: X509v3_asid_subset; Comment: Test whether a is a subset of b. 
Name: asid_validate_path_internal; Comment: Core code for RFC 3779 3.3 path validation. 
Name: X509v3_asid_validate_path; Comment: RFC 3779 3.3 path validation -- called from X509_verify_cert(). 
Name: X509v3_asid_validate_resource_set; Comment: RFC 3779 3.3 path validation of an extension. Test whether chain covers extension. 
Name: X509V3_EXT_nconf; Comment: char *value: Value 
Name: X509V3_EXT_nconf_nid; Comment: char *value: Value 
Name: do_ext_nconf; Comment: char *value: Value 
Name: X509V3_EXT_i2d; Comment: Given an internal structure, nid and critical flag create an extension 
Name: v3_check_critical; Comment: Check the extension string for critical flag 
Name: v3_check_generic; Comment: Check extension string for generic extension and return the type 
Name: v3_generic_extension; Comment: Create a generic extension: for now just handle DER type 
Name: X509V3_EXT_add_nconf_sk; Comment: This is the main function: add a bunch of extensions based on a config file section to an extension STACK. 
Name: X509V3_EXT_add_nconf; Comment: Convenience functions to add extensions to a certificate, CRL and request 
Name: X509V3_EXT_CRL_add_nconf; Comment: Same as above but for a CRL 
Name: X509V3_EXT_REQ_add_nconf; Comment: Add extensions to certificate request 
Name: X509V3_get_string; Comment: Config database functions 
Name: X509V3_EXT_conf; Comment: Old conf compatibility functions 
Name: X509V3_EXT_conf_nid; Comment: char *value: Value 
Name: X509V3_EXT_CRL_add_conf; Comment: Same as above but for a CRL 
Name: X509V3_EXT_REQ_add_conf; Comment: Add extensions to certificate request 
Name: GENERAL_NAME_cmp; Comment: Returns 0 if they are equal, != 0 otherwise. 
Name: OTHERNAME_cmp; Comment: Returns 0 if they are equal, != 0 otherwise. 
Name: X509V3_add_standard_extensions; Comment: Legacy function: we don't need to add standard extensions any more because they are now kept in ext_dat.h. 
Name: X509V3_EXT_d2i; Comment: Return an extension internal structure 
Name: X509V3_get_d2i; Comment: -Get critical flag and decoded version of extension from a NID. The "idx" variable returns the last found extension and can be used to retrieve multiple extensions of the same NID. However multiple extensions with the same NID is usually due to a badly encoded certificate so if idx is NULL we choke if multiple extensions exist. The "crit" variable is set to the critical value. The return value is the decoded extension or NULL on error. The actual error can have several different causes, the value of *crit reflects the cause: >= 0, extension found but not decoded (reflects critical value). -1 extension not found. -2 extension occurs more than once. 
Name: X509V3_add1_i2d; Comment: This function is a general extension append, replace and delete utility. The precise operation is governed by the 'flags' value. The 'crit' and 'value' arguments (if relevant) are the extensions internal structure. 
Name: ia5ncasecmp; Comment: We cannot use strncasecmp here because that applies locale specific rules. For example in Turkish 'I' is not the uppercase character for 'i'. We need to do a simple ASCII case comparison ignoring the locale (that is why we use numeric constants below). 
Name: NAME_CONSTRAINTS_check; Comment: -Check a certificate conforms to a specified set of constraints. Return values: X509_V_OK: All constraints obeyed. X509_V_ERR_PERMITTED_VIOLATION: Permitted subtree violation. X509_V_ERR_EXCLUDED_VIOLATION: Excluded subtree violation. X509_V_ERR_SUBTREE_MINMAX: Min or max values present and matching type. X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: Unsupported constraint type. X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: bad unsupported constraint syntax. X509_V_ERR_UNSUPPORTED_NAME_SYNTAX: bad or unsupported syntax of name 
Name: NAME_CONSTRAINTS_check_CN; Comment: Check CN against DNS-ID name constraints. 
Name: nc_dn; Comment: directoryName name constraint matching. The canonical encoding of X509_NAME makes this comparison easy. It is matched if the subtree is a subset of the name. 
Name: X509V3_EXT_val_prn; Comment: Print out a name+value stack 
Name: X509V3_EXT_print; Comment: Main routine: print out a general extension 
Name: X509_check_purpose; Comment: As much as I'd like to make X509_check_purpose use a "const" X509* I really can't because it does recalculate hashes and do other non-const things. 
Name: check_ca; Comment: -CA checks common to all purposes return codes: 0 not a CA 1 is a CA 2 basicConstraints absent so "maybe" a CA 3 basicConstraints absent but self signed V1. 4 basicConstraints absent but keyUsage present and keyCertSign asserted. 
Name: check_ssl_ca; Comment: Check SSL CA: common checks for SSL client and server 
Name: purpose_smime; Comment: common S/MIME checks 
Name: ocsp_helper; Comment: OCSP helper: this is *not* a full OCSP check. It just checks that each CA is valid. Additional checks must be made on the chain. 
Name: X509_check_issued; Comment: -Various checks to see if one certificate issued the second. This can be used to prune a set of possible issuer certificates which have been looked up using some simple method such as by subject name. These are: 1. Check issuer_name(subject) == subject_name(issuer) 2. If akid(subject) exists check it matches issuer 3. If key_usage(issuer) exists check it supports certificate signing returns 0 for OK, positive for reason for mismatch, reasons match codes for X509_verify_cert() 
Name: sxnet_v2i; Comment: NBB: this is used for testing only. It should *not* be used for anything else because it will just take static IDs from the configuration file and they should really be separate values for each user. 
Name: SXNET_add_id_asc; Comment: Add an id given the zone as an ASCII number 
Name: SXNET_add_id_ulong; Comment: Add an id given the zone as an unsigned long 
Name: SXNET_add_id_INTEGER; Comment: Add an id given the zone as an ASN1_INTEGER. Note this version uses the passed integer and doesn't make a copy so don't free it up afterwards. 
Name: STACK_OF; Comment: i2v_TLS_FEATURE converts the TLS_FEATURE structure tls_feature into the STACK_OF(CONF_VALUE) structure ext_list. STACK_OF(CONF_VALUE) is the format used by the CONF library to represent a multi-valued extension. ext_list is returned. 
Name: v2i_TLS_FEATURE; Comment: v2i_TLS_FEATURE converts the multi-valued extension nval into a TLS_FEATURE structure, which is returned if the conversion is successful. In case of error, NULL is returned. 
Name: X509V3_add_value; Comment: Add a CONF_VALUE name value pair to stack 
Name: X509V3_conf_free; Comment: Free function for STACK_OF(CONF_VALUE) 
Name: strip_spaces; Comment: Delete leading and trailing spaces from a string 
Name: name_cmp; Comment: V2I name comparison function: returns zero if 'name' matches cmp or cmp.* 
Name: skip_prefix; Comment: Skip pattern prefix to match "wildcard" subject 
Name: equal_nocase; Comment: Compare while ASCII ignoring case. 
Name: equal_case; Comment: Compare using memcmp. 
Name: equal_email; Comment: RFC 5280, section 7.5, requires that only the domain is compared in a case-insensitive manner. 
Name: wildcard_match; Comment: Compare the prefix and suffix with the subject, and check that the characters in-between are valid. 
Name: equal_wildcard; Comment: Compare using wildcards. 
Name: do_check_string; Comment: Compare an ASN1_STRING to a supplied string. If they match return 1. If cmp_type > 0 only compare if string matches the type, otherwise convert it to UTF8. 
Name: a2i_IPADDRESS; Comment: Convert IP addresses both IPv4 and IPv6 into an OCTET STRING compatible with RFC3280. 
Name: ipv6_hex; Comment: Convert a string of up to 4 hex digits into the corresponding IPv6 form. 
Name: find_friendly_name; Comment: Simple PKCS#12 file reader 
Name: main; Comment: Simple PKCS#12 file creator 
Name: capi_get_pkey; Comment: Given a CAPI_KEY get an EVP_PKEY structure 
Name: capi_rsa_priv_enc; Comment: CryptoAPI RSA operations 
Name: capi_dsa_do_sign; Comment: CryptoAPI DSA operations 
Name: capi_ctx_new; Comment: Initialize a CAPI_CTX structure 
Name: cert_select_simple; Comment: Simple client cert selection function: always select first 
Name: dasync_pub_enc; Comment: RSA implementation 
Name: dasync_cipher_ctrl_helper; Comment: Cipher helper functions 
Name: dasync_aes128_cbc_ctrl; Comment: AES128 CBC Implementation 
Name: dasync_aes128_cbc_hmac_sha1_ctrl; Comment: AES128 CBC HMAC SHA1 Implementation 
Name: ossltest_aes128_init_key; Comment: AES128 Implementation 
Name: padlock_bind_helper; Comment: Prepare the ENGINE structure for registration 
Name: ENGINE_padlock; Comment: Constructor 
Name: padlock_init; Comment: Check availability of the engine 
Name: padlock_available; Comment: Load supported features of the CPU to see if the PadLock is available. 
Name: padlock_aes_init_key; Comment: Prepare the encryption key for PadLock usage 
Name: padlock_rand_bytes; Comment: Wrapper that provides an interface between the API and the raw PadLock RNG 
Name: padlock_rand_status; Comment: Dummy but necessary function 
Name: dtls1_write_app_data_bytes; Comment: Copyright 2005-2019 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: put_value; Comment: Store the |value| of length |len| at location |data| 
Name: wpacket_intern_close; Comment: Internal helper function used by WPACKET_close(), WPACKET_finish() and WPACKET_fill_lengths() to close a sub-packet and write out its length if necessary. If |doclose| is 0 then it goes through the motions of closing (i.e. it fills in all the lengths), but doesn't actually close anything. 
Name: tls1_md5_final_raw; Comment: These functions serialize the state of a hash and thus perform the standard "final" operation without adding the padding and length that such a function typically does. 
Name: ssl3_cbc_record_digest_supported; Comment: ssl3_cbc_record_digest_supported returns 1 iff |ctx| uses a hash function which ssl3_cbc_digest_record supports. 
Name: ssl3_cbc_digest_record; Comment: -ssl3_cbc_digest_record computes the MAC of a decrypted, padded SSLv3/TLS record. ctx: the EVP_MD_CTX from which we take the hash function. ssl3_cbc_record_digest_supported must return true for this EVP_MD_CTX. md_out: the digest output. At most EVP_MAX_MD_SIZE bytes will be written. md_out_size: if non-NULL, the number of output bytes is written here. header: the 13-byte, TLS record header. data: the record data itself, less any preceding explicit IV. data_plus_mac_size: the secret, reported length of the data and MAC once the padding has been removed. data_plus_mac_plus_padding_size: the public length of the whole record, including padding. is_sslv3: non-zero if we are to use SSLv3. Otherwise, TLS. On entry: by virtue of having been through one of the remove_padding functions, above, we know that data_plus_mac_size is large enough to contain a padding byte and MAC. (If the padding was invalid, it might contain the padding too. ) Returns 1 on success or 0 on error 
Name: ssl3_free_digest_list; Comment: Free digest list. Also frees handshake buffer since they are always freed together. 
Name: ssl3_get_cipher_by_char; Comment: This function needs to check if the ciphers required are actually available 
Name: ssl3_choose_cipher; Comment: ssl3_choose_cipher - choose a cipher from those offered by the client @s: SSL connection @clnt: ciphers offered by the client @srvr: ciphers enabled on the server? Returns the selected cipher or NULL when no common ciphers. 
Name: ssl3_renegotiate_check; Comment: Check if we are waiting to do a renegotiation and if so whether now is a good time to do it. If |initok| is true then we are being called from inside the state machine so ignore the result of SSL_in_init(s). Otherwise we should not do a renegotiation if SSL_in_init(s) is true. Returns 1 if we should do a renegotiation now and sets up the state machine for it. Otherwise returns 0. 
Name: ssl_get_algorithm2; Comment: If we are using default SHA1+MD5 algorithms switch to new SHA256 PRF and handshake macs if required. If PSK and using SHA384 for TLS < 1.2 switch to default. 
Name: ssl_fill_hello_random; Comment: Fill a ClientRandom or ServerRandom field of length len. Returns <= 0 on failure, 1 on success. 
Name: ssl_generate_pkey; Comment: Generate a private key from parameters 
Name: ssl_generate_pkey_group; Comment: Generate a private key from a group ID 
Name: ssl_generate_param_group; Comment: Generate parameters from a group ID 
Name: ssl_derive; Comment: Derive secrets for ECDH/DH 
Name: ssl3_do_change_cipher_spec; Comment: Copyright 1995-2018 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: ssl_session_oinit; Comment: Initialise OCTET STRING from buffer and length 
Name: ssl_session_sinit; Comment: Initialise OCTET STRING from string 
Name: ssl_session_strndup; Comment: OPENSSL_strndup an OCTET STRING 
Name: ssl_session_memcpy; Comment: Copy an OCTET STRING, return error if it exceeds maximum length 
Name: ssl_cert_clear_certs; Comment: Free up and clear all certificates and chains 
Name: SSL_add_client_CA; Comment: The following two are older names are to be replaced with SSL(_CTX)_add1_to_CA_list 
Name: ssl_build_cert_chain; Comment: Build a certificate chain for current certificate 
Name: ssl_cipher_info_find; Comment: Utility function for table lookup 
Name: SSL_CIPHER_get_name; Comment: return the actual cipher being used 
Name: SSL_CIPHER_standard_name; Comment: return the actual cipher being used in RFC standard name 
Name: OPENSSL_cipher_name; Comment: return the OpenSSL name based on given RFC standard name 
Name: SSL_CIPHER_get_bits; Comment: number of bits for symmetric cipher 
Name: cmd_SignatureAlgorithms; Comment: Set supported signature algorithms 
Name: cmd_ClientSignatureAlgorithms; Comment: Set supported client signature algorithms 
Name: cmd_Curves; Comment: This is the old name for cmd_Groups - retained for backwards compatibility 
Name: cmd_ECDHParameters; Comment: ECDH temporary parameters 
Name: protocol_from_string; Comment: protocol_from_string - converts a protocol version string to a number Returns -1 on failure or the version on success 
Name: cmd_MinProtocol; Comment: cmd_MinProtocol - Set min protocol version @cctx: config structure to save settings in @value: The min protocol version in string form Returns 1 on success and 0 on failure. 
Name: cmd_MaxProtocol; Comment: cmd_MaxProtocol - Set max protocol version @cctx: config structure to save settings in @value: The max protocol version in string form Returns 1 on success and 0 on failure. 
Name: ssl_conf_cmd_allowed; Comment: Determine if a command is allowed according to cctx flags 
Name: OPENSSL_init_ssl; Comment: If this function is called with a non NULL settings value then it must be called prior to any threads making calls to any OpenSSL functions, i.e. passing a non-null settings value is assumed to be single-threaded. 
Name: ssl_dane_dup; Comment: dane_copy - Copy dane configuration, sans verification state. 
Name: ssl_check_allowed_versions; Comment: Return 0 if there is only one version configured and it was disabled at configure time. Return 1 otherwise. 
Name: SSL_CTX_set_ssl_version; Comment: * Used to change an SSL_CTXs default SSL method type 
Name: SSL_get_finished; Comment: return length of latest Finished message we sent, copy to 'buf' 
Name: SSL_get_peer_finished; Comment: return length of latest Finished message we expected, copy to 'buf' 
Name: SSL_copy_session_id; Comment: Now in theory, since the calling process own 't' it should be safe to modify. We need to be able to read f without being hassled 
Name: SSL_CTX_check_private_key; Comment: Fix this so it checks all the valid key/cert options 
Name: SSL_check_private_key; Comment: Fix this function so that it takes an optional type parameter 
Name: SSL_get_cipher_list; Comment: * The old interface to get the same thing as SSL_get_ciphers() 
Name: cipher_list_tls12_num; Comment: Distinguish between ciphers controlled by set_ciphersuite() and set_cipher_list() when counting. 
Name: SSL_CTX_set_cipher_list; Comment: * specify the ciphers to be used by default by the SSL_CTX 
Name: SSL_set_cipher_list; Comment: * specify the ciphers to be used by the SSL 
Name: SSL_get_servername; Comment: *Return the requested servername (SNI) value. Note that the behaviour varies depending on: - whether this is called by the client or the server, - if we are before or during/after the handshake, - if a resumption or normal handshake is being attempted/has occurred - whether we have negotiated TLSv1.2 (or below) or TLSv1.3 Note that only the host_name type is defined (RFC 3546). 
Name: SSL_select_next_proto; Comment: SSL_select_next_proto implements the standard protocol selection. It is expected that this function is called from the callback set by SSL_CTX_set_next_proto_select_cb. The protocol data is assumed to be a vector of 8-bit, length prefixed byte strings. The length byte itself is not included in the length. A byte string of length 0 is invalid. No byte string may be truncated. The current, but experimental algorithm for selecting the protocol is: 1) If the server doesn't support NPN then this is indicated to the callback. In this case, the client application has to abort the connection or have a default application level protocol. 2) If the server supports NPN, but advertises an empty list then the client selects the first protocol in its list, but indicates via the API that this fallback case was enacted. 3) Otherwise, the client finds the first protocol in the server's list that it supports and selects this protocol. This is because it's assumed that the server has better information about which protocol a client should use. 4) If the client doesn't support any of the server's advertised protocols, then this is treated the same as case 2. It returns either OPENSSL_NPN_NEGOTIATED if a common protocol was found, or OPENSSL_NPN_NO_OVERLAP if the fallback case was reached. 
Name: SSL_get0_next_proto_negotiated; Comment: SSL_get0_next_proto_negotiated sets *data and *len to point to the client's requested protocol for this connection and returns 0. If the client didn't request any protocol, then *data is set to NULL. Note that the client can request any protocol it chooses. The value returned from this function need not be a member of the list of supported protocols provided by the callback. 
Name: SSL_CTX_set_npn_advertised_cb; Comment: SSL_CTX_set_npn_advertised_cb sets a callback that is called when a TLS server needs a list of supported protocols for Next Protocol Negotiation. The returned list must be in wire format. The list is returned by setting |out| to point to it and |outlen| to its length. This memory will not be modified, but one should assume that the SSL* keeps a reference to it. The callback should return SSL_TLSEXT_ERR_OK if it wishes to advertise. Otherwise, no such extension will be included in the ServerHello. 
Name: SSL_CTX_set_npn_select_cb; Comment: SSL_CTX_set_next_proto_select_cb sets a callback that is called when a client needs to select a protocol from the server's provided list. |out| must be set to point to the selected protocol (which may be within |in|). The length of the protocol name must be written into |outlen|. The server's advertised protocols are provided in |in| and |inlen|. The callback can assume that |in| is syntactically valid. The client must select a protocol. It is fatal to the connection if this callback returns a value other than SSL_TLSEXT_ERR_OK. 
Name: SSL_CTX_set_alpn_protos; Comment: SSL_CTX_set_alpn_protos sets the ALPN protocol list on |ctx| to |protos|. |protos| must be in wire-format (i.e. a series of non-empty, 8-bit length-prefixed strings). Returns 0 on success. 
Name: SSL_set_alpn_protos; Comment: SSL_set_alpn_protos sets the ALPN protocol list on |ssl| to |protos|. |protos| must be in wire-format (i.e. a series of non-empty, 8-bit length-prefixed strings). Returns 0 on success. 
Name: SSL_CTX_set_alpn_select_cb; Comment: SSL_CTX_set_alpn_select_cb sets a callback function on |ctx| that is called during ClientHello processing in order to select an ALPN protocol from the client's list of offered protocols. 
Name: SSL_get0_alpn_selected; Comment: SSL_get0_alpn_selected gets the selected ALPN protocol (if any) from |ssl|. On return it sets |*data| to point to |*len| bytes of protocol name (not including the leading length-prefix byte). If the server didn't respond with a negotiated protocol then |*len| will be zero. 
Name: ssl_session_cmp; Comment: NB: If this function (or indeed the hash function which uses a sort of coarser function than this one) is changed, ensure SSL_CTX_has_matching_session_id() is checked accordingly. It relies on being able to construct an SSL_SESSION that will collide with any existing session with a matching session ID. 
Name: SSL_CTX_new; Comment: These wrapper functions should remain rather than redeclaring SSL_SESSION_hash and SSL_SESSION_cmp for void* types and casting each variable. The reason is that the functions aren't static, they're exposed via ssl.h. 
Name: ssl_replace_hash; Comment: None 
Name: ssl_handshake_hash; Comment: Retrieve handshake hashes 
Name: SSL_CTX_get_options; Comment: Get/Set/Clear options in SSL_CTX or SSL, formerly macros, now functions that can return unsigned long, instead of the generic long return value from the control interface. 
Name: ct_move_scts; Comment: Moves SCTs from the |src| stack to the |dst| stack. The source of each SCT will be set to |origin|. If |dst| points to a NULL pointer, a new stack will be created and owned by the caller. Returns the number of SCTs moved, or a negative integer if an error occurs. 
Name: ct_extract_tls_extension_scts; Comment: Look for data collected during ServerHello and parse if found. Returns the number of SCTs extracted. 
Name: ct_extract_ocsp_response_scts; Comment: Checks for an OCSP response and then attempts to extract any SCTs found if it contains an SCT X509 extension. They will be stored in |s->scts|. Returns: - The number of SCTs extracted, assuming an OCSP response exists. - 0 if no OCSP response exists or it contains no SCTs. - A negative integer if an error occurs. 
Name: ct_extract_x509v3_extension_scts; Comment: Attempts to extract SCTs from the peer certificate. Return the number of SCTs extracted, or a negative integer if an error occurs. 
Name: STACK_OF; Comment: Attempts to find all received SCTs by checking TLS extensions, the OCSP response (if it exists) and X509v3 extensions in the certificate. Returns NULL if an error occurs. 
Name: SSL_add_ssl_module; Comment: SSL library configuration module. 
Name: use_certificate_chain_file; Comment: Read a file that contains our certificate in "PEM" format, possibly followed by a sequence of CA certificates that should be sent to the peer in the Certificate message. 
Name: serverinfo_process_buffer; Comment: With a NULL context, this function just checks that the serverinfo data parses correctly. With a non-NULL context, it registers callbacks for the included extensions. 
Name: ssl_session_dup; Comment: Create a new SSL_SESSION and duplicate the contents of |src| into it. If ticket == 0 then no ticket information is duplicated, otherwise it is. 
Name: def_generate_session_id; Comment: SSLv3/TLSv1 has 32 bytes (256 bits) of session ID space. As such, filling the ID with random junk repeatedly until we have no conflict is going to complete in one iteration pretty much "most" of the time (btw: understatement). So, if it takes us 10 iterations and we still can't avoid a conflict - well that's a reasonable point to call it quits. Either the RAND code is broken or someone is trying to open roughly very close to 2^256 SSL sessions to our server. How you might store that many sessions is perhaps a more interesting question ... 
Name: ssl_get_prev_session; Comment: -ssl_get_prev attempts to find an SSL_SESSION to be used to resume this connection. It is only called by servers. hello: The parsed ClientHello data Returns: -1: fatal error 0: no session found 1: a session may have been found. Side effects: - If a session is found then s->session is pointed at it (after freeing an existing session if need be) and s->verify_result is set from the session. - Both for new and resumed sessions, s->ext.ticket_expected is set to 1 if the server should issue a new session ticket (to 0 otherwise). 
Name: SSL_SESSION_list_remove; Comment: locked by SSL_CTX in the calling function 
Name: SSL_state_string_long; Comment: Copyright 1995-2017 The OpenSSL Project Authors. All Rights Reserved. Copyright 2005 Nokia. All rights reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: SSL_SESSION_print_keylog; Comment: print session id and master key in NSS keylog format (RSA Session-ID:<session id> Master-Key:<master key>) 
Name: tls1_PRF; Comment: seed1 through seed5 are concatenated 
Name: tls1_get_supported_groups; Comment: Set *pgroups to the supported groups list and *pgroupslen to the number of groups supported. 
Name: tls_curve_allowed; Comment: See if curve is allowed by security callback 
Name: tls1_in_list; Comment: Return 1 if "id" is in "list" 
Name: tls1_shared_group; Comment: -For nmatch >= 0, return the id of the |nmatch|th shared group or 0 if there is no match. For nmatch == -1, return number of matches For nmatch == -2, return the id of the group to use for a tmp key, or 0 if there is no match. 
Name: tls1_set_groups_list; Comment: Set groups based on a colon separate list 
Name: tls1_get_group_id; Comment: Return group id of a key 
Name: tls1_check_pkey_comp; Comment: Check a key is compatible with compression extension 
Name: tls1_check_group_id; Comment: Check a group id matches preferences 
Name: tls1_check_cert_param; Comment: Check cert parameters compatible with extensions: currently just checks EC certificates have compatible curves and compression. 
Name: tls1_check_ec_tmp_key; Comment: tls1_check_ec_tmp_key - Check EC temporary key compatibility @s: SSL connection @cid: Cipher ID we're considering using Checks that the kECDHE cipher suite we're considering using is compatible with the client extensions. Returns 0 when the cipher can't be used or 1 when it can. 
Name: tls1_lookup_sigalg; Comment: Lookup TLS signature algorithm 
Name: tls1_lookup_md; Comment: Lookup hash: return 0 if invalid or not enabled 
Name: tls1_get_legacy_sigalg; Comment: Returns a signature algorithm when the peer did not send a list of supported signature algorithms. The signature algorithm is fixed for the certificate type. |idx| is a certificate type index (SSL_PKEY_*). When |idx| is -1 the certificate type from |s| will be used. Returns the signature algorithm to use, or NULL on error. 
Name: tls1_set_peer_legacy_sigalg; Comment: Set peer sigalg based key type 
Name: tls_check_sigalg_curve; Comment: Called by servers only. Checks that we have a sig alg that supports the specified EC curve. 
Name: sigalg_security_bits; Comment: Return the number of security bits for the signature algorithm, or 0 on error. 
Name: tls12_check_peer_sigalg; Comment: Check signature algorithm is consistent with sent supported signature algorithms and if so set relevant digest and signature scheme in s. 
Name: ssl_set_client_disabled; Comment: Set a mask of disabled algorithms: an algorithm is disabled if it isn't supported, doesn't appear in supported signature algorithms, isn't supported by the enabled protocol versions or by the security level. This function should only be used for checking which ciphers are supported by the client. Call ssl_cipher_disabled() to check that it's enabled or not. 
Name: ssl_cipher_disabled; Comment: ssl_cipher_disabled - check that a cipher is disabled or not @s: SSL connection that you want to use the cipher on @c: cipher to check @op: Security check that you want to do @ecdhe: If set to 1 then TLSv1 ECDHE ciphers are also allowed in SSLv3 Returns 1 when it's disabled, 0 when enabled. 
Name: tls_get_ticket_from_client; Comment: -Gets the ticket information supplied by the client if any. hello: The parsed ClientHello data ret: (output) on return, if a ticket was decrypted, then this is set to point to the resulting session. 
Name: tls_decrypt_ticket; Comment: -tls_decrypt_ticket attempts to decrypt a session ticket. If s->tls_session_secret_cb is set and we're not doing TLSv1.3 then we are expecting a pre-shared key ciphersuite, in which case we have no use for session tickets and one will never be decrypted, nor will s->ext.ticket_expected be set to 1. Side effects: Sets s->ext.ticket_expected to 1 if the server will have to issue a new session ticket to the client because the client indicated support (and s->tls_session_secret_cb is NULL) but the client either doesn't have a session ticket or we couldn't use the one it gave us, or if s->ctx->ext.ticket_key_cb asked to renew the client's ticket. Otherwise, s->ext.ticket_expected is set to 0. etick: points to the body of the session ticket extension. eticklen: the length of the session tickets extension. sess_id: points at the session ID. sesslen: the length of the session ID. psess: (output) on return, if a ticket was decrypted, then this is set to point to the resulting session. 
Name: tls12_sigalg_allowed; Comment: Check to see if a signature algorithm is allowed 
Name: ssl_set_sig_mask; Comment: Get a mask of disabled public key algorithms based on supported signature algorithms. For example if no signature algorithm supports RSA then RSA is disabled. 
Name: tls12_shared_sigalgs; Comment: Given preference and allowed sigalgs set shared sigalgs 
Name: tls1_set_shared_sigalgs; Comment: Set shared signature algorithms for SSL structures 
Name: tls1_process_sigalgs; Comment: Set preferred digest for each key type 
Name: tls1_set_sigalgs_list; Comment: Set supported signature algorithms based on a colon separated list of the form sig+hash e.g. RSA+SHA512:DSA+SHA512 
Name: ssl_check_ca_name; Comment: Check to see if a certificate issuer name matches list of CA names 
Name: tls1_set_cert_validity; Comment: Set validity of certificates in an SSL structure 
Name: SSL_check_chain; Comment: User level utility function to check a chain is suitable 
Name: ssl_security_cert_chain; Comment: Check security of a chain, if |sk| includes the end entity certificate then |x| is NULL. If |vfy| is 1 then we are verifying a peer chain and not sending one to the peer. Return values: 1 if ok otherwise error code to use 
Name: tls12_get_cert_sigalg_idx; Comment: For TLS 1.2 servers check if we have a certificate which can be used with the signature algorithm "lu" and return index of certificate. 
Name: check_cert_usable; Comment: Checks the given cert against signature_algorithm_cert restrictions sent by the peer (if any) as well as whether the hash from the sigalg is usable with the key. Returns true if the cert is usable and false otherwise. 
Name: has_usable_cert; Comment: Returns true if |s| has a usable certificate configured for use with signature scheme |sig|. "Usable" includes a check for presence as well as applying the signature_algorithm_cert restrictions sent by the peer (if any). Returns false if no usable certificate is found. 
Name: is_cert_usable; Comment: Returns true if the supplied cert |x| and key |pkey| is usable with the specified signature scheme |sig|, or false otherwise. 
Name: find_sig_alg; Comment: Find a signature scheme that works with the supplied certificate |x| and key |pkey|. |x| and |pkey| may be NULL in which case we additionally look at our available certs/keys to find one that works. 
Name: tls_choose_sigalg; Comment: Choose an appropriate signature algorithm based on available certificates Sets chosen certificate and signature algorithm. For servers if we fail to find a required certificate it is a fatal error, an appropriate error code is set and a TLS alert is sent. For clients fatalerrs is set to 0. If a certificate is not suitable it is not a fatal error: we will either try another certificate or not present one to the server. In this case no error is set. 
Name: tls13_hkdf_expand; Comment: Given a |secret|; a |label| of length |labellen|; and |data| of length|datalen| (e.g. typically a hash of the handshake messages), derive a new secret |outlen| bytes long and store it in the location pointed to be |out|. The |data| value may be zero length. Any errors will be treated as fatal if |fatal| is set. Returns 1 on success 0 on failure. 
Name: tls13_derive_key; Comment: Given a |secret| generate a |key| of length |keylen| bytes. Returns 1 on success 0 on failure. 
Name: tls13_derive_iv; Comment: Given a |secret| generate an |iv| of length |ivlen| bytes. Returns 1 on success 0 on failure. 
Name: tls13_generate_secret; Comment: Given the previous secret |prevsecret| and a new input secret |insecret| of length |insecretlen|, generate a new secret and store it in the location pointed to by |outsecret|. Returns 1 on success 0 on failure. 
Name: tls13_generate_handshake_secret; Comment: Given an input secret |insecret| of length |insecretlen| generate the handshake secret. This requires the early secret to already have been generated. Returns 1 on success 0 on failure. 
Name: tls13_generate_master_secret; Comment: Given the handshake secret |prev| of length |prevlen| generate the master secret and store its length in |*secret_size|. Returns 1 on success 0 on failure. 
Name: tls13_final_finish_mac; Comment: Generates the mac for the Finished message. Returns the length of the MAC or 0 on error. 
Name: tls13_setup_key_block; Comment: There isn't really a key block in TLSv1.3, but we still need this function for initialising the cipher and hash. Returns 1 on success or 0 on failure. 
Name: SSL_srp_server_param_with_username; Comment: server side 
Name: SSL_set_srp_server_param_pw; Comment: If the server just has the raw password, make up a verifier entry on the fly 
Name: srp_generate_client_master_secret; Comment: client side 
Name: satsub64be; Comment: mod 128 saturating subtract of two 64-bit values in big-endian order 
Name: dtls1_copy_record; Comment: copy buffered record into SSL structure 
Name: dtls1_read_bytes; Comment: -Return up to 'len' payload bytes received in 'type' records. 'type' is one of the following: - SSL3_RT_HANDSHAKE (when ssl3_get_message calls us) - SSL3_RT_APPLICATION_DATA (when ssl3_read calls us) - 0 (during a shutdown, no data has to be returned) If we don't have stored data to work from, read a SSL/TLS record first (possibly multiple records if we still don't have anything to return). This function must handle any surprises the peer may have for us, such as Alert records (e.g. close_notify) or renegotiation requests. ChangeCipherSpec messages are treated as if they were handshake messages *if* the |recd_type| argument is non NULL. Also if record payloads contain fragments too small to process, we store them until there is enough for the respective protocol (the record protocol may use arbitrary fragmentation and even interleaving): Change cipher spec protocol just 1 byte needed, no need for keeping anything stored Alert protocol 2 bytes needed (AlertLevel, AlertDescription) Handshake protocol 4 bytes needed (HandshakeType, uint24 length) -- we just have to detect unexpected Client Hello and Hello Request messages here, anything else is handled by higher layers Application data protocol none of our business 
Name: dtls1_write_bytes; Comment: Call this to write data in records of type 'type' It will return <= 0 if not all data has been sent or non-blocking IO. 
Name: RECORD_LAYER_read_pending; Comment: Checks if we have unprocessed read ahead data pending 
Name: RECORD_LAYER_processed_read_pending; Comment: Checks if we have decrypted unread record data pending 
Name: ssl3_read_n; Comment: Return values are as per SSL_read() 
Name: ssl3_write_bytes; Comment: Call this to write data in records of type 'type' It will return <= 0 if not all data has been sent or non-blocking IO. 
Name: ssl3_write_pending; Comment: if s->s3->wbuf.left != 0, we need to call thisReturn values are as per SSL_write() 
Name: ssl3_read_bytes; Comment: -Return up to 'len' payload bytes received in 'type' records. 'type' is one of the following: - SSL3_RT_HANDSHAKE (when ssl3_get_message calls us) - SSL3_RT_APPLICATION_DATA (when ssl3_read calls us) - 0 (during a shutdown, no data has to be returned) If we don't have stored data to work from, read a SSL/TLS record first (possibly multiple records if we still don't have anything to return). This function must handle any surprises the peer may have for us, such as Alert records (e.g. close_notify) or renegotiation requests. ChangeCipherSpec messages are treated as if they were handshake messages *if* the |recd_type| argument is non NULL. Also if record payloads contain fragments too small to process, we store them until there is enough for the respective protocol (the record protocol may use arbitrary fragmentation and even interleaving): Change cipher spec protocol just 1 byte needed, no need for keeping anything stored Alert protocol 2 bytes needed (AlertLevel, AlertDescription) Handshake protocol 4 bytes needed (HandshakeType, uint24 length) -- we just have to detect unexpected Client Hello and Hello Request messages here, anything else is handled by higher layers Application data protocol none of our business 
Name: RECORD_LAYER_is_sslv2_record; Comment: Returns true if the current rrec was sent in SSLv2 backwards compatible format and false otherwise. 
Name: RECORD_LAYER_get_rrec_length; Comment: Returns the length in bytes of the current rrec 
Name: SSL3_BUFFER_clear; Comment: Clear the contents of an SSL3_BUFFER but retain any memory allocated. Also retains the default_len setting 
Name: SSL3_RECORD_clear; Comment: Clear the contents of an SSL3_RECORD but retain any memory allocated 
Name: ssl3_record_app_data_waiting; Comment: Peeks ahead into "read_ahead" data to see if we have a whole record waiting for us in the buffer. 
Name: ssl3_get_record; Comment: used only by ssl3_read_bytes 
Name: ssl3_enc; Comment: -ssl3_enc encrypts/decrypts |n_recs| records in |inrecs|. Will call SSLfatal() for internal errors, but not otherwise. Returns: 0: (in non-constant time) if the record is publicly invalid (i.e. too short etc). 1: if the record's padding is valid / the encryption was successful. -1: if the record's padding is invalid or, if sending, an internal error occurred. 
Name: tls1_enc; Comment: -tls1_enc encrypts/decrypts |n_recs| in |recs|. Will call SSLfatal() for internal errors, but not otherwise. Returns: 0: (in non-constant time) if the record is publicly invalid (i.e. too short etc). 1: if the record's padding is valid / the encryption was successful. -1: if the record's padding/AEAD-authenticator is invalid or, if sending, an internal error occurred. 
Name: ssl3_cbc_remove_padding; Comment: -ssl3_cbc_remove_padding removes padding from the decrypted, SSLv3, CBC record in |rec| by updating |rec->length| in constant time. block_size: the block size of the cipher used to encrypt the record. returns: 0: (in non-constant time) if the record is publicly invalid. 1: if the padding was valid -1: otherwise. 
Name: tls1_cbc_remove_padding; Comment: -tls1_cbc_remove_padding removes the CBC padding from the decrypted, TLS, CBC record in |rec| in constant time and returns 1 if the padding is valid and -1 otherwise. It also removes any explicit IV from the start of the record without leaking any timing about whether there was enough space after the padding was removed. block_size: the block size of the cipher used to encrypt the record. returns: 0: (in non-constant time) if the record is publicly invalid. 1: if the padding was valid -1: otherwise. 
Name: dtls1_get_record; Comment: used only by dtls1_read_bytes 
Name: tls13_enc; Comment: -tls13_enc encrypts/decrypts |n_recs| in |recs|. Will call SSLfatal() for internal errors, but not otherwise. Returns: 0: (in non-constant time) if the record is publicly invalid (i.e. too short etc). 1: if the record encryption was successful. -1: if the record's AEAD-authenticator is invalid or, if sending, an internal error occurred. 
Name: validate_context; Comment: Check whether an extension's context matches the current context 
Name: verify_extension; Comment: Verify whether we are allowed to use the extension |type| in the current |context|. Returns 1 to indicate the extension is allowed or unknown or 0 to indicate the extension is not allowed. If returning 1 then |*found| is set to the definition for the extension we found. 
Name: extension_is_relevant; Comment: Check whether the context defined for an extension |extctx| means whether the extension is relevant for the current context |thisctx| or not. Returns 1 if the extension is relevant for this context, and 0 otherwise 
Name: tls_collect_extensions; Comment: Gather a list of all the extensions from the data in |packet]. |context| tells us which message this extension is for. The raw extension data is stored in |res| on success. We don't actually process the content of the extensions yet, except to check their types. This function also runs the initialiser functions for all known extensions if |init| is nonzero (whether we have collected them or not). If successful the caller is responsible for freeing the contents of |res|. Per http:tools.ietf.orghtmlrfc5246#section-7.4.1.4, there may not bemore than one extension of the same type in a ClientHello or ServerHello. This function returns 1 if all extensions are unique and we have parsed their types, and 0 if the extensions contain duplicates, could not be successfully found, or an internal error occurred. We only check duplicates for extensions that we know about. We ignore others. 
Name: tls_parse_extension; Comment: Runs the parser for a given extension with index |idx|. |exts| contains the list of all parsed extensions previously collected by tls_collect_extensions(). The parser is only run if it is applicable for the given |context| and the parser has not already been run. If this is for a Certificate message, then we also provide the parser with the relevant Certificate |x| and its position in the |chainidx| with 0 being the first Certificate. Returns 1 on success or 0 on failure. If an extension is not present this counted as success. 
Name: tls_parse_all_extensions; Comment: Parse all remaining extensions that have not yet been parsed. Also calls the finalisation for all extensions at the end if |fin| is nonzero, whether we collected them or not. Returns 1 for success or 0 for failure. If we are working on a Certificate message then we also pass the Certificate |x| and its position in the |chainidx|, with 0 being the first certificate. 
Name: tls_construct_extensions; Comment: Construct all the extensions relevant to the current |context| and write them to |pkt|. If this is an extension for a Certificate in a Certificate message, then |x| will be set to the Certificate we are handling, and |chainidx| will indicate the position in the chainidx we are processing (with 0 being the first in the chain). Returns 1 on success or 0 on failure. On a failure construction stops at the first extension to fail to construct. 
Name: final_renegotiate; Comment: Built in extension finalisation and initialisation functions. All initialise or finalise the associated extension type for the given |context|. For finalisers |sent| is set to 1 if we saw the extension during parsing, and 0 otherwise. These functions return 1 on success or 0 on failure. 
Name: tls_construct_ctos_maxfragmentlen; Comment: Push a Max Fragment Len extension into ClientHello 
Name: tls_construct_ctos_psk_kex_modes; Comment: Construct a psk_kex_modes extension. 
Name: tls_construct_ctos_psk; Comment: Construct the pre_shared_key extension 
Name: tls_parse_stoc_renegotiate; Comment: Parse the server's renegotiation binding and abort if it's not right 
Name: tls_parse_stoc_maxfragmentlen; Comment: Parse the server's max fragment len extension packet 
Name: ssl_next_proto_validate; Comment: ssl_next_proto_validate validates a Next Protocol Negotiation block. No elements of zero length are allowed and the set of elements must exactly fill the length of the block. Returns 1 on success or 0 on failure. 
Name: custom_ext_add_old_cb_wrap; Comment: Provide thin wrapper callbacks which convert new style arguments to old style 
Name: custom_ext_find; Comment: Find a custom extension from the list. The |role| param is there to support the legacy API where custom extensions for client and server could be set independently on the same SSL_CTX. It is set to ENDPOINT_SERVER if we are trying to find a method relevant to the server, ENDPOINT_CLIENT for the client, or ENDPOINT_BOTH for either 
Name: custom_ext_init; Comment: Initialise custom extensions flags to indicate neither sent nor received. 
Name: custom_ext_parse; Comment: Pass received custom extension data to the application for parsing. 
Name: custom_ext_add; Comment: Request custom extension data from the application and add to the return buffer. 
Name: custom_exts_copy_flags; Comment: Copy the flags from src to dst for any extensions that exist in both 
Name: custom_exts_copy; Comment: Copy table of custom extensions 
Name: SSL_CTX_has_client_custom_ext; Comment: Return true if a client custom extension exists, false otherwise 
Name: SSL_CTX_add_client_custom_ext; Comment: Application level functions to add the old custom extension callbacks 
Name: tls_parse_ctos_renegotiate; Comment: Parse the client's renegotiation binding and abort if it's not right 
Name: tls_parse_ctos_server_name; Comment: -The servername extension is treated as follows: - Only the hostname type is supported with a maximum length of 255. - The servername is rejected if too long or if it contains zeros, in which case an fatal alert is generated. - The servername field is maintained together with the session cache. - When a session is resumed, the servername call back invoked in order to allow the application to position itself to the right context. - The servername is acknowledged if it is new for a session or when it is identical to a previously used for the same session. Applications can control the behaviour. They can at any time set a 'desirable' servername for a new SSL object. This can be the case for example with HTTPS when a Host: header field is received and a renegotiation is requested. In this case, a possible servername presented in the new client hello is only acknowledged if it matches the value of the Host: field. - Applications must use SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION if they provide for changing an explicit servername context for the session, i.e. when the session has been established with a servername extension. - On session reconnect, the servername extension may be absent. 
Name: tls_parse_ctos_alpn; Comment: Save the ALPN extension in a ClientHello.|pkt| holds the contents of the ALPN extension, not including type and length. Returns: 1 on success, 0 on error. 
Name: tls_parse_ctos_psk_kex_modes; Comment: Process a psk_kex_modes extension received in the ClientHello. |pkt| contains the raw PACKET data for the extension. Returns 1 on success or 0 on failure. 
Name: tls_parse_ctos_key_share; Comment: Process a key_share extension received in the ClientHello. |pkt| contains the raw PACKET data for the extension. Returns 1 on success or 0 on failure. 
Name: tls_construct_stoc_renegotiate; Comment: Add the server's renegotiation binding 
Name: tls_construct_stoc_maxfragmentlen; Comment: Add/include the server's max fragment len extension into ServerHello 
Name: ossl_statem_clear; Comment: Clear the state machine state and reset back to MSG_FLOW_UNINITED 
Name: ossl_statem_set_renegotiate; Comment: Set the state machine up ready for a renegotiation handshake 
Name: ossl_statem_fatal; Comment: Put the state machine into an error state and send an alert if appropriate. This is a permanent error for the current connection. 
Name: ossl_statem_in_error; Comment: Discover whether the current connection is in the error state. Valid return values are: 1: Yes 0: No 
Name: ossl_statem_skip_early_data; Comment: Are we in a sensible state to skip over unreadable early data? 
Name: ossl_statem_check_finish_init; Comment: Called when we are in SSL_read*(), SSL_write*(), or SSL_accept() /SSL_connect()/SSL_do_handshake(). Used to test whether we are in an early data state and whether we should attempt to move the handshake on if so. |sending| is 1 if we are attempting to send data (SSL_write*()), 0 if we are attempting to read data (SSL_read*()), or -1 if we are in SSL_do_handshake() or similar. 
Name: state_machine; Comment: The main message flow state machine. We start in the MSG_FLOW_UNINITED or MSG_FLOW_FINISHED state and finish in MSG_FLOW_FINISHED. Valid states and transitions are as follows: MSG_FLOW_UNINITED MSG_FLOW_FINISHED | | +-----------------------+ v MSG_FLOW_WRITING <---> MSG_FLOW_READING | V MSG_FLOW_FINISHED | V [SUCCESS] We may exit at any point due to an error or NBIO event. If an NBIO event occurs then we restart at the point we left off when we are recalled. MSG_FLOW_WRITING and MSG_FLOW_READING have sub-state machines associated with them. In addition to the above there is also the MSG_FLOW_ERROR state. We can move into that state at any point in the event that an irrecoverable error occurs. Valid return values are: 1: Success <=0: NBIO or error 
Name: init_read_state_machine; Comment: Initialise the MSG_FLOW_READING sub-state machine 
Name: read_state_machine; Comment: This function implements the sub-state machine when the message flow is in MSG_FLOW_READING. The valid sub-states and transitions are: READ_STATE_HEADER <--+<-------------+ | | | v | | READ_STATE_BODY -----+-->READ_STATE_POST_PROCESS | | +----------------------------+ v [SUB_STATE_FINISHED] READ_STATE_HEADER has the responsibility for reading in the message header and transitioning the state of the handshake state machine. READ_STATE_BODY reads in the rest of the message and then subsequently processes it. READ_STATE_POST_PROCESS is an optional step that may occur if some post processing activity performed on the message may block. Any of the above states could result in an NBIO event occurring in which case control returns to the calling application. When this function is recalled we will resume in the same state where we left off. 
Name: statem_do_write; Comment: Send a previously constructed message to the peer. 
Name: init_write_state_machine; Comment: Initialise the MSG_FLOW_WRITING sub-state machine 
Name: write_state_machine; Comment: This function implements the sub-state machine when the message flow is in MSG_FLOW_WRITING. The valid sub-states and transitions are: +-> WRITE_STATE_TRANSITION ------> [SUB_STATE_FINISHED] | | | v | WRITE_STATE_PRE_WORK -----> [SUB_STATE_END_HANDSHAKE] | | | v | WRITE_STATE_SEND | | | v | WRITE_STATE_POST_WORK | | +-------------+ WRITE_STATE_TRANSITION transitions the state of the handshake state machine WRITE_STATE_PRE_WORK performs any work necessary to prepare the later sending of the message. This could result in an NBIO event occurring in which case control returns to the calling application. When this function is recalled we will resume in the same state where we left off. WRITE_STATE_SEND sends the message and performs any work to be done after sending. WRITE_STATE_POST_WORK performs any work necessary after the sending of the message has been completed. As for WRITE_STATE_PRE_WORK this could also result in an NBIO event. 
Name: statem_flush; Comment: Flush the write BIO 
Name: ossl_statem_app_data_allowed; Comment: Called by the record layer to determine whether application data is allowed to be received in the current handshake state or not. Return values are: 1: Yes (application data allowed) 0: No (application data not allowed) 
Name: ossl_statem_export_allowed; Comment: This function returns 1 if TLS exporter is ready to export keying material, or 0 if otherwise. 
Name: ossl_statem_export_early_allowed; Comment: Return 1 if early TLS exporter is ready to export keying material, or 0 if otherwise. 
Name: cert_req_allowed; Comment: Is a CertificateRequest message allowed at the moment or not? Return values are: 1: Yes 0: No 
Name: key_exchange_expected; Comment: Should we expect the ServerKeyExchange message or not? Return values are: 1: Yes 0: No 
Name: ossl_statem_client13_read_transition; Comment: ossl_statem_client_read_transition() encapsulates the logic for the allowed handshake state transitions when a TLS1.3 client is reading messages from the server. The message type that the server has sent is provided in |mt|. The current state is in |s->statem.hand_state|. Return values are 1 for success (transition allowed) and 0 on error (transition not allowed) 
Name: ossl_statem_client_read_transition; Comment: ossl_statem_client_read_transition() encapsulates the logic for the allowed handshake state transitions when the client is reading messages from the server. The message type that the server has sent is provided in |mt|. The current state is in |s->statem.hand_state|. Return values are 1 for success (transition allowed) and 0 on error (transition not allowed) 
Name: ossl_statem_client13_write_transition; Comment: ossl_statem_client13_write_transition() works out what handshake state to move to next when the TLSv1.3 client is writing messages to be sent to the server. 
Name: ossl_statem_client_write_transition; Comment: ossl_statem_client_write_transition() works out what handshake state to move to next when the client is writing messages to be sent to the server. 
Name: ossl_statem_client_pre_work; Comment: Perform any pre work that needs to be done prior to sending a message from the client to the server. 
Name: ossl_statem_client_post_work; Comment: Perform any work that needs to be done after sending a message from the client to the server. 
Name: ossl_statem_client_construct_message; Comment: Get the message construction function and message type for sending from the client Valid return values are: 1: Success 0: Error 
Name: ossl_statem_client_max_message_size; Comment: Returns the maximum allowed length for the current message that we are reading. Excludes the message header. 
Name: ossl_statem_client_process_message; Comment: Process a message that the client has been received from the server. 
Name: ossl_statem_client_post_process_message; Comment: Perform any further processing required following the receipt of a message from the server 
Name: tls_process_cert_status_body; Comment: In TLSv1.3 this is called from the extensions code, otherwise it is used to parse a separate message. Returns 1 on success or 0 on failure 
Name: tls_process_initial_server_flight; Comment: Perform miscellaneous checks and processing after we have received the server's initial flight. In TLS1.3 this is after the Server Finished message. In <=TLS1.2 this is after the ServerDone message. Returns 1 on success or 0 on failure. 
Name: ssl3_check_client_certificate; Comment: Check a certificate can be used for client authentication. Currently check cert exists, if we have a suitable digest for TLS 1.2 if static DH client certificates can be used and optionally checks suitability for Suite B. 
Name: dtls1_do_write; Comment: send s->init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or SSL3_RT_CHANGE_CIPHER_SPEC) 
Name: dtls1_max_handshake_message_len; Comment: dtls1_max_handshake_message_len returns the maximum number of bytes permitted in a DTLS handshake message for |s|. The minimum is 16KB, but may be greater if the maximum certificate list size requires it. 
Name: dtls1_retrieve_buffered_fragment; Comment: Returns 1 if there is a buffered fragment available, 0 if not, or -1 on a fatal error. 
Name: dtls_construct_change_cipher_spec; Comment: -for these 2 messages, we need to ssl->enc_read_ctx re-init ssl->rlayer.read_sequence zero ssl->s3->read_mac_secret re-init ssl->session->read_sym_enc assign ssl->session->read_compression assign ssl->session->read_hash assign 
Name: dtls_wait_for_dry; Comment: Wait for a dry event. Should only be called at a point in the handshake where we are not expecting any data from the peer except an alert. 
Name: dtls1_set_message_header_int; Comment: don't actually do the writing, wait till the MTU has been retrieved 
Name: ssl3_do_write; Comment: send s->init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or SSL3_RT_CHANGE_CIPHER_SPEC) 
Name: ssl3_take_mac; Comment: ssl3_take_mac calculates the Finished MAC for the handshakes messages seen to far. 
Name: ssl_add_cert_to_wpacket; Comment: Add a certificate to the WPACKET 
Name: ssl_add_cert_chain; Comment: Add certificate chain to provided WPACKET 
Name: tls_finish_handshake; Comment: Tidy up after the end of a handshake. In the case of SCTP this may result in NBIO events. If |clearbufs| is set then init_buf and the wbio buffer is freed up as well. 
Name: ssl_method_error; Comment: ssl_method_error - Check whether an SSL_METHOD is enabled. @s: The SSL handle for the candidate method @method: the intended method. Returns 0 on success, or an SSL error reason on failure. 
Name: is_tls13_capable; Comment: Only called by servers. Returns 1 if the server has a TLSv1.3 capable certificate type, or has PSK or a certificate callback configured. Otherwise returns 0. 
Name: ssl_version_supported; Comment: ssl_version_supported - Check that the specified `version` is supported by `SSL *` instance @s: The SSL handle for the candidate method @version: Protocol version to test against Returns 1 when supported, otherwise 0 
Name: ssl_check_version_downgrade; Comment: ssl_check_version_downgrade - In response to RFC7507 SCSV version fallback indication from a client check whether we're using the highest supported protocol version. @s server SSL handle. Returns 1 when using the highest enabled version, 0 otherwise. 
Name: ssl_set_version_bound; Comment: ssl_set_version_bound - set an upper or lower bound on the supported (D)TLS protocols, provided the initial (D)TLS method is version-flexible. This function sanity-checks the proposed value and makes sure the method is version-flexible, then sets the limit if all is well. @method_version: The version of the current SSL_METHOD. @version: the intended limit. @bound: pointer to limit to be updated. Returns 1 on success, 0 on failure. 
Name: ssl_choose_server_version; Comment: ssl_choose_server_version - Choose server (D)TLS version. Called when the client HELLO is received to select the final server protocol version and the version specific method. @s: server SSL handle. Returns 0 on success or an SSL error reason number on failure. 
Name: ssl_choose_client_version; Comment: ssl_choose_client_version - Choose client (D)TLS version. Called when the server HELLO is received to select the final client protocol version and the version specific method. @s: client SSL handle. @version: The proposed version from the server's HELLO. @extensions: The extensions received Returns 1 on success or 0 on error. 
Name: ssl_get_min_max_version; Comment: ssl_get_min_max_version - get minimum and maximum protocol version @s: The SSL connection @min_version: The minimum supported version @max_version: The maximum supported version @real_max: The highest version below the lowest compile time version hole where that hole lies above at least one run-time enabled protocol. Work out what version we should be using for the initial ClientHello if the version is initially (D)TLS_ANY_VERSION. We apply any explicit SSL_OP_NO_xxx options, the MinProtocol and MaxProtocol configuration commands, any Suite B constraints and any floor imposed by the security level here, so we don't advertise the wrong protocol version to only reject the outcome later. Computing the right floor matters. If, e.g., TLS 1.0 and 1.2 are enabled, TLS 1.1 is disabled, but the security level, Suite-B and/or MinProtocol only allow TLS 1.2, we want to advertise TLS1.2, *not* TLS1. Returns 0 on success or an SSL error reason number on failure. On failure min_version and max_version will also be set to 0. 
Name: ssl_set_client_hello_version; Comment: ssl_set_client_hello_version - Work out what version we should be using for the initial ClientHello.legacy_version field. @s: client SSL handle. Returns 0 on success or an SSL error reason number on failure. 
Name: create_synthetic_message_hash; Comment: Replace ClientHello1 in the transcript hash with a synthetic message 
Name: construct_key_exchange_tbs; Comment: Create a buffer containing data to be signed for server key exchange 
Name: tls13_save_handshake_digest_for_pha; Comment: Saves the current handshake digest for Post-Handshake Auth, Done after ClientFinished is processed, done exactly once 
Name: tls13_restore_handshake_digest_for_pha; Comment: Restores the Post-Handshake Auth handshake digest Done just before sending/processing the Cert Request 
Name: ossl_statem_server13_read_transition; Comment: ossl_statem_server13_read_transition() encapsulates the logic for the allowed handshake state transitions when a TLSv1.3 server is reading messages from the client. The message type that the client has sent is provided in |mt|. The current state is in |s->statem.hand_state|. Return values are 1 for success (transition allowed) and 0 on error (transition not allowed) 
Name: ossl_statem_server_read_transition; Comment: ossl_statem_server_read_transition() encapsulates the logic for the allowed handshake state transitions when the server is reading messages from the client. The message type that the client has sent is provided in |mt|. The current state is in |s->statem.hand_state|. Return values are 1 for success (transition allowed) and 0 on error (transition not allowed) 
Name: send_server_key_exchange; Comment: Should we send a ServerKeyExchange message? Valid return values are: 1: Yes 0: No 
Name: send_certificate_request; Comment: Should we send a CertificateRequest message? Valid return values are: 1: Yes 0: No 
Name: ossl_statem_server13_write_transition; Comment: ossl_statem_server13_write_transition() works out what handshake state to move to next when a TLSv1.3 server is writing messages to be sent to the client. 
Name: ossl_statem_server_write_transition; Comment: ossl_statem_server_write_transition() works out what handshake state to move to next when the server is writing messages to be sent to the client. 
Name: ossl_statem_server_pre_work; Comment: Perform any pre work that needs to be done prior to sending a message from the server to the client. 
Name: ossl_statem_server_post_work; Comment: Perform any work that needs to be done after sending a message from the server to the client. 
Name: ossl_statem_server_construct_message; Comment: Get the message construction function and message type for sending from the server Valid return values are: 1: Success 0: Error 
Name: ossl_statem_server_max_message_size; Comment: Returns the maximum allowed length for the current message that we are reading. Excludes the message header. 
Name: ossl_statem_server_process_message; Comment: Process a message that the server has received from the client. 
Name: ossl_statem_server_post_process_message; Comment: Perform any further processing required following the receipt of a message from the client 
Name: ssl_check_srp_ext_ClientHello; Comment: Returns 1 on success, 0 for retryable error, -1 for fatal error 
Name: ssl_check_for_safari; Comment: -ssl_check_for_safari attempts to fingerprint Safari using OS X SecureTransport using the TLS extension block in |hello|. Safari, since 10.6, sends exactly these extensions, in this order: SNI, elliptic_curves ec_point_formats signature_algorithms (for TLSv1.2 only) We wish to fingerprint Safari because they broke ECDHE-ECDSA support in 10.8, but they advertise support. So enabling ECDHE-ECDSA ciphers breaks them. Sadly we cannot differentiate 10.6, 10.7 and 10.8.4 (which work), from 10.8..10.8.3 (which don't work). 
Name: tls_handle_status_request; Comment: Call the status request callback if needed. Upon success, returns 1. Upon failure, returns 0. 
Name: tls_handle_alpn; Comment: Call the alpn_select callback if needed. Upon success, returns 1. Upon failure, returns 0. 
Name: tls_construct_cert_status_body; Comment: In TLSv1.3 this is called from the extensions code, otherwise it is used to create a separate message. Returns 1 on success or 0 on failure. 
Name: tls_process_next_proto; Comment: tls_process_next_proto reads a Next Protocol Negotiation handshake message. It sets the next_proto member in s if found 
Name: main; Comment: Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: do_decode; Comment: do_decode returns a tristate: -1 Couldn't decode 0 decoded structure wasn't what was expected (failure) 1 decoded structure was what was expected (success) 
Name: do_encode; Comment: do_encode returns a tristate: -1 Couldn't encode 0 encoded DER wasn't what was expected (failure) 1 encoded DER was what was expected (success) 
Name: do_enc_dec; Comment: Do an encode/decode round trip 
Name: do_decode_custom; Comment: Attempt to decode a custom encoding of the test structure 
Name: do_encode_custom; Comment: Attempt to encode the test structure and compare it to custom DER 
Name: test_tbl_standard; Comment: *********************************************************************Test of a_strnid's tbl_standard **
Name: validate_client_hello; Comment: Returns 1 for initial ClientHello, 2 for ClientHello with cookie 
Name: send_record; Comment: Create header, HMAC, pad, encrypt and send a record 
Name: test_open_streams; Comment: Replace testutil output routines. We do this to eliminate possible sources of BIO error 
Name: test_vprintf_stdout; Comment: This works out as long as caller doesn't use any "fancy" formats. But we are caller's caller, and test_str_eq is the only one called, and it uses only "%s", which is not "fancy"... 
Name: findattr; Comment: Look for |key| in the stanza and return it or NULL if not found. 
Name: parse_bigBN; Comment: Parse BIGNUM from sparse hex-strings, return |BN_hex2bn| result. 
Name: parseBN; Comment: Parse BIGNUM, return number of bytes parsed. 
Name: rand_neg; Comment: Return a "random" flag for if a BN should be negated. 
Name: test_modexp_mont5; Comment: Test constant-time modular exponentiation with 1024-bit inputs, which on x86_64 cause a different code branch to be taken. 
Name: test_default_cipherlist_clear; Comment: SSL_CTX_set_cipher_list() should fail if it clears all TLSv1.2 ciphers. 
Name: change_path; Comment: changes path to that of the filename 
Name: glue2bio; Comment: Glue an array of strings together. Return a BIO and put the string into |*out| so we can free it. 
Name: CRL_from_strings; Comment: Create a CRL from an array of strings. 
Name: X509_from_strings; Comment: Create an X509 from an array of strings. 
Name: verify; Comment: Verify |leaf| certificate (chained up to |root|). |crls| if not NULL, is a list of CRLs to include in the verification. It is also free'd before returning, which is kinda yucky but convenient. Returns a value from X509_V_ERR_xxx or X509_V_OK. 
Name: STACK_OF; Comment: Create a stack of CRL's. Upref each one because we call pop_free on the stack and need to keep the CRL's around until the test exits. Yes this crashes on malloc failure; it forces us to debug. 
Name: test_default_ct_policy_eval_ctx_time_is_now; Comment: Tests that the CT_POLICY_EVAL_CTX default time is approximately now. Allow +-10 minutes, as it may compensate for clock skew. 
Name: setup_tests; Comment: Usage: d2i_test <name> <type> <file>, e.g. d2i_test generalname bad_generalname.der 
Name: hexdecode; Comment: Hex decoder that tolerates optional whitespace 
Name: single_kat; Comment: Do a single KAT test. Return 0 on failure. 
Name: init; Comment: Initialise a DRBG based on selftest data 
Name: instantiate; Comment: Initialise and instantiate DRBG based on selftest data 
Name: error_check; Comment: Perform extensive error checking as required by SP800-90. Induce several failure modes and check an error condition is set. 
Name: get_entropy_hook; Comment: Intercepts and counts calls to the get_entropy() callback 
Name: hook_drbg; Comment: Installs a hook for the get_entropy() callback of the given drbg 
Name: unhook_drbg; Comment: Installs the hook for the get_entropy() callback of the given drbg 
Name: reset_hook_ctx; Comment: Resets the given hook context 
Name: reset_drbg_hook_ctx; Comment: Resets all drbg hook contexts 
Name: test_drbg_reseed; Comment: Generates random output using RAND_bytes() and RAND_priv_bytes() and checks whether the three shared DRBGs were reseeded as expected. |expect_success|: expected outcome (as reported by RAND_status()) |master|, |public|, |private|: pointers to the three shared DRBGs |expect_xxx_reseed| = 1: it is expected that the specified DRBG is reseeded 0: it is expected that the specified DRBG is not reseeded -1: don't check whether the specified DRBG was reseeded or not |reseed_time|: if nonzero, used instead of time(NULL) to set the |before_reseed| time. 
Name: test_drbg_reseed_after_fork; Comment: Test whether master, public and private DRBG are reseeded after forking the process. 
Name: test_rand_drbg_reseed; Comment: Test whether the default rand_method (RAND_OpenSSL()) is setup correctly, in particular whether reseeding works as designed. 
Name: test_rand_seed; Comment: Test that instantiation with RAND_seed() works as expected If no os entropy source is available then RAND_seed(buffer, bufsize) is expected to succeed if and only if the buffer length is at least rand_drbg_seedlen(master) bytes. If an os entropy source is available then RAND_seed(buffer, bufsize) is expected to succeed always. 
Name: test_rand_add; Comment: Test that adding additional data with RAND_add() works as expected when the master DRBG is instantiated (and below its reseed limit). This should succeed regardless of whether an os entropy source is available or not. 
Name: single_kat_no_reseed; Comment: Do a single NO_RESEED KAT: Instantiate Generate Random Bits (pr=false) Generate Random Bits (pr=false) Uninstantiate Return 0 on failure. 
Name: single_kat_pr_false; Comment: -Do a single PR_FALSE KAT: Instantiate Reseed Generate Random Bits (pr=false) Generate Random Bits (pr=false) Uninstantiate Return 0 on failure. 
Name: single_kat_pr_true; Comment: -Do a single PR_TRUE KAT: Instantiate Generate Random Bits (pr=true) Generate Random Bits (pr=true) Uninstantiate Return 0 on failure. 
Name: load_dsa_params; Comment: These parameters are from test/recipes/04-test_pem_data/dsaparam.pem, converted using dsaparam -C 
Name: x9_62_tests; Comment: - This function hijacks the RNG to feed it the chosen ECDSA key and nonce. The ECDSA KATs are from: - the X9.62 draft (4) - NIST CAVP (720) It uses the low-level ECDSA_sign_setup instead of EVP to control the RNG. NB: This is not how applications should use ECDSA; this is only for testing.Tests the library can successfully: - generate public keys that matches those KATs - create ECDSA signatures that match those KATs - accept those signatures as valid 
Name: test_builtin; Comment: -Positive and negative ECDSA testing through EVP interface: - EVP_DigestSign (this is the one-shot version) - EVP_DigestVerify Tests the library can successfully: - create a key - create a signature - accept that signature - reject that signature with a different public key - reject that signature if its length is not correct - reject that signature after modifying the message - accept that signature after un-modifying the message - reject that signature after modifying the signature - accept that signature after un-modifying the signature 
Name: walk_curve; Comment: Perform a deterministic walk on the curve, by starting from |point| and using the X-coordinate of the previous point as the next scalar for point multiplication. Returns the X-coordinate of the end result or NULL on error. 
Name: setup_tests; Comment: Stress test the curve. If the '-num' argument is given, runs the loop |num| times and prints the resulting X-coordinate. Otherwise runs the test the default number of times and compares against the expected result. 
Name: group_field_tests; Comment: sanity checks field_inv function pointer in EC_METHOD 
Name: field_tests; Comment: wrapper for group_field_tests for explicit curve params and EC_METHOD 
Name: field_tests_ecp_simple; Comment: test EC_GFp_simple_method directly 
Name: field_tests_ecp_mont; Comment: test EC_GFp_mont_method directly 
Name: field_tests_ec2_simple; Comment: test EC_GF2m_simple_method directly 
Name: field_tests_default; Comment: test default method for a named curve 
Name: test_encrypt; Comment: Test function to check operation has been redirected 
Name: get_test_pkey; Comment: Return a test EVP_PKEY value 
Name: preserves_system_error; Comment: Test that querying the error queue preserves the OS error. 
Name: test_invalide_ec_char2_pub_range_decode; Comment: Tests the range of the decoded EC char2 public point. See ec_GF2m_simple_oct2point(). 
Name: test_EVP_PKCS82PKEY; Comment: Tests loading a bad key in PKCS8 format 
Name: memory_err_compare; Comment: Compare two memory regions for equality, returning zero if they differ. However, if there is expected to be an error and the actual error matches then the memory is expected to be different so handle this case without producing unnecessary test framework output. 
Name: evp_test_buffer_append; Comment: append buffer to a list 
Name: evp_test_buffer_ncopy; Comment: replace last buffer in list with copies of itself 
Name: evp_test_buffer_set_count; Comment: set repeat count for last buffer in list 
Name: evp_test_buffer_do; Comment: call "fn" with each element of the list in turn 
Name: unescape; Comment: Unescape some sequences in string literals (only _n for now). Return an allocated buffer, set |out_len|. If |input_len| is zero, get an empty buffer but set length to zero. 
Name: parse_bin; Comment: For a hex string "value" convert to a binary allocated buffer. Return 1 on success or 0 on failure. 
Name: openssl_free; Comment: Because OPENSSL_free is a macro, it can't be passed as a function pointer 
Name: pkey_test_init; Comment: Perform public key operation setup: lookup key, allocated ctx and call the appropriate initialisation function 
Name: parse_uint64; Comment: Parse unsigned decimal 64 bit integer value 
Name: kdf_test_init; Comment: Perform public key operation setup: lookup key, allocated ctx and call the appropriate initialisation function 
Name: void_test_parse; Comment: For tests that do not accept any custom keywords. 
Name: check_test_error; Comment: Check for errors in the test structure; return 1 if okay, else 0. 
Name: run_test; Comment: Run a parsed test. Log a message and return 0 on error. 
Name: key_unsupported; Comment: Is the key type an unsupported algorithm? 
Name: take_value; Comment: NULL out the value from |pp| but return it. This "steals" a pointer. 
Name: parse; Comment: Read and parse one test. Return 0 if failure, 1 if okay. 
Name: exnew; Comment: SIMPLE EX_DATA IMPLEMENTATION Apps explicitly set/get ex_data as needed 
Name: a_is_zero_mod_one; Comment: Test that r == 0 in test_exp_mod_zero(). Returns one on success, returns zero and prints debug output otherwise. 
Name: test_mod_exp_zero; Comment: test_mod_exp_zero tests that x**0 mod 1 == 0. It returns zero on success. 
Name: check_time; Comment: Time checking test code. Check times are identical for a wide range of offsets. This should be run on a machine with 64 bit time_t or it will trigger the very errors the routines fix. 
Name: test_tls13; Comment: Test that we never negotiate TLSv1.3 if using GOST 
Name: ctx_data_free_data; Comment: |ctx_data| itself is stack-allocated. 
Name: select_server_ctx; Comment: Select the appropriate server CTX.Returns SSL_TLSEXT_ERR_OK if a match was found. If |ignore| is 1, returns SSL_TLSEXT_ERR_NOACK on mismatch. Otherwise, returns SSL_TLSEXT_ERR_ALERT_FATAL on mismatch. An empty SNI extension also returns SSL_TSLEXT_ERR_NOACK. 
Name: servername_ignore_cb; Comment: (RFC 6066): If the server understood the ClientHello extension but does not recognize the server name, the server SHOULD take one of two actions: either abort the handshake by sending a fatal-level unrecognized_name(112) alert or continue the handshake. This behaviour is up to the application to configure; we test bothconfigurations to ensure the state machine propagates the result correctly. 
Name: parse_protos; Comment: Parse the comma-separated list into TLS format. 
Name: client_npn_cb; Comment: The client SHOULD select the first protocol advertised by the server that it also supports. In the event that the client doesn't support any of server's protocols, or the server doesn't advertise any, it SHOULD select the first protocol that it supports. 
Name: server_alpn_cb; Comment: The server SHOULD select the most highly preferred protocol that it supports and that is also advertised by the client. In the event that the server supports no protocols that the client advertises, then the server SHALL respond with a fatal "no_application_protocol" alert. 
Name: configure_handshake_ctx; Comment: Configure callbacks and other properties that can't be set directly in the server/client CONF. 
Name: configure_handshake_ssl; Comment: Configure per-SSL callbacks and other properties. 
Name: do_handshake_step; Comment: Note that we could do the handshake transparently under an SSL_write, but separating the steps is more helpful for debugging test failures. 
Name: do_app_data_step; Comment: -Send/receive some application data. The read-write sequence is Peer A: (R) W - first read will yield no data Peer B: R W ... Peer A: R W Peer B: R W Peer A: R 
Name: do_shutdown_step; Comment: RFC 5246 says: Note that as of TLS 1.1, failure to properly close a connection no longer requires that a session not be resumed. This is a change from TLS 1.0 to conform with widespread implementation practice. However, (a) OpenSSL requires that a connection be shutdown for all protocol versions. (b) We test lower versions, too. So we just implement shutdown. We do a full bidirectional shutdown so that we can compare sent and received close_notify alerts and get some test coverage for SSL_shutdown as a bonus. 
Name: handshake_status; Comment: Determine the handshake outcome. last_status: the status of the peer to have acted last. previous_status: the status of the peer that didn't act last. client_spoke_last: 1 if the client went last. 
Name: dup_str; Comment: Convert unsigned char buf's that shouldn't contain any NUL-bytes to char. 
Name: do_handshake_internal; Comment: Note that |extra| points to the correct client/server configuration within |test_ctx|. When configuring the handshake, general mode settings are taken from |test_ctx|, and client/server-specific settings should be taken from |extra|. The configuration code should never reach into |test_ctx->extra| or |test_ctx->resume_extra| directly. (We could refactor test mode settings into a substructure. This would result in cleaner argument passing but would complicate the test configuration parsing.) 
Name: test_mdc2; Comment: *********************************************************************Test of mdc2 internal functions **
Name: main; Comment: We use a proper main function here instead of the custom main from the test framework because the CRYPTO_mem_leaks_fp function cannot be called a second time without trying to use a null pointer. The test framework calls this function as part of its close down. A work around is to call putenv("OPENSSL_DEBUG_MEMORY=0"); before exitingbut that is worse than avoiding the test framework's main. 
Name: test_pbelu; Comment: Password based encryption (PBE) table ordering test. Attempt to look up all supported algorithms. 
Name: test_asn1_meths; Comment: Test of EVP_PKEY_ASN1_METHOD ordering 
Name: test_pkey_meths; Comment: Test of EVP_PKEY_METHOD ordering 
Name: main; Comment: shlibloadtest should not use the normal test framework because we don't want it to link against libcrypto (which the framework uses). The point of the test is to check dynamic loading and unloading of libcrypto/libssl. 
Name: run_srp; Comment: use 256 bits on each side 
Name: run_srp_kat; Comment: SRP test vectors from RFC5054 
Name: test_ccs_change_cipher; Comment: Very focused test to exercise a single case in the server-side state machine, when the ChangeCipherState message needs to actually change from one cipher to a different cipher (i.e., not changing from null encryption to real encryption). 
Name: test_ssl_set_bio; Comment: Tests calls to SSL_set_bio() under various conditions. For the first 3333 = 81 tests we do 2 calls to SSL_set_bio() with various combinations of valid BIOs or NULL being set for the rbio/wbio. We then do more tests where we create a successful connection first using our standard connection setup functions, and then call SSL_set_bio() with various combinations of valid BIOs or NULL. We then repeat these tests following a failed connection. In this last case we are looking to check that SSL_set_bio() functions correctly in the case where s->bbio is not NULL. 
Name: setupearly_data_test; Comment: Helper method to setup objects for early data test. Caller frees objects on error. 
Name: test_early_data_replay_int; Comment: idx == 0: Standard early_data setup idx == 1: early_data setup using read_ahead usecb == 0: Don't use a custom early data callback usecb == 1: Use a custom early data callback and reject the early data usecb == 2: Use a custom early data callback and accept the early data confopt == 0: Configure anti-replay directly confopt == 1: Configure anti-replay using SSL_CONF 
Name: early_data_skip_helper; Comment: Helper function to test that a server attempting to read early data can handle a connection from a client where the early data should be skipped. testtype: 0 == No HRR testtype: 1 == HRR testtype: 2 == HRR, invalid early_data sent after HRR testtype: 3 == recv_max_early_data set to 0 
Name: test_early_data_skip; Comment: Test that a server attempting to read early data can handle a connection from a client where the early data is not acceptable. 
Name: test_early_data_skip_hrr; Comment: Test that a server attempting to read early data can handle a connection from a client where an HRR occurs. 
Name: test_early_data_skip_hrr_fail; Comment: Test that a server attempting to read early data can handle a connection from a client where an HRR occurs and correctly fails if early_data is sent after the HRR 
Name: test_early_data_skip_abort; Comment: Test that a server attempting to read early data will abort if it tries to skip over too much. 
Name: test_early_data_not_sent; Comment: Test that a server attempting to read early data can handle a connection from a client that doesn't send any. 
Name: test_early_data_psk; Comment: Test that a PSK can be used to send early_data 
Name: test_early_data_not_expected; Comment: Test that a server that doesn't try to read early data can handle a client sending some. 
Name: test_early_data_tls1_2; Comment: Test that a server attempting to read early data can handle a connection from a TLSv1.2 client. 
Name: test_set_ciphersuite; Comment: Test configuring the TLSv1.3 ciphersuites Test 0: Set a default ciphersuite in the SSL_CTX (no explicit cipher_list) Test 1: Set a non-default ciphersuite in the SSL_CTX (no explicit cipher_list) Test 2: Set a default ciphersuite in the SSL (no explicit cipher_list) Test 3: Set a non-default ciphersuite in the SSL (no explicit cipher_list) Test 4: Set a default ciphersuite in the SSL_CTX (SSL_CTX cipher_list) Test 5: Set a non-default ciphersuite in the SSL_CTX (SSL_CTX cipher_list) Test 6: Set a default ciphersuite in the SSL (SSL_CTX cipher_list) Test 7: Set a non-default ciphersuite in the SSL (SSL_CTX cipher_list) Test 8: Set a default ciphersuite in the SSL (SSL cipher_list) Test 9: Set a non-default ciphersuite in the SSL (SSL cipher_list) 
Name: test_tls13_ciphersuite; Comment: Test TLSv1.3 Cipher Suite Test 0 = Set TLS1.3 cipher on context Test 1 = Set TLS1.3 cipher on SSL Test 2 = Set TLS1.3 and TLS1.2 cipher on context Test 3 = Set TLS1.3 and TLS1.2 cipher on SSL 
Name: test_tls13_psk; Comment: Test TLSv1.3 PSKs Test 0 = Test new style callbacks Test 1 = Test both new and old style callbacks Test 2 = Test old style callbacks Test 3 = Test old style callbacks with no certificate 
Name: test_custom_exts; Comment: Custom call back tests. Test 0: Old style callbacks in TLSv1.2 Test 1: New style callbacks in TLSv1.2 Test 2: New style callbacks in TLSv1.2 with SNI Test 3: New style callbacks in TLSv1.3. Extensions in CH and EE Test 4: New style callbacks in TLSv1.3. Extensions in CH, SH, EE, Cert + NST 
Name: test_serverinfo; Comment: Test loading of serverinfo data in various formats. test_sslmessages actually tests to make sure the extensions appear in the handshake 
Name: test_export_key_mat_early; Comment: Test that SSL_export_keying_material_early() produces expected results. There are no test vectors so all we do is test that both sides of the communication produce the same results for different protocol versions. 
Name: test_key_update; Comment: Test KeyUpdate. 
Name: test_key_update_in_write; Comment: Test we can handle a KeyUpdate (update requested) message while write data is pending. Test 0: Client sends KeyUpdate while Server is writing Test 1: Server sends KeyUpdate while Client is writing 
Name: get_MFL_from_client_hello; Comment: Parse CH and retrieve any MFL extension value if present 
Name: test_srp; Comment: SRP tests Test 0: Simple successful SRP connection, new vbase Test 1: Connection failure due to bad password, new vbase Test 2: Simple successful SRP connection, vbase loaded from existing file Test 3: Connection failure due to bad password, vbase loaded from existing file Test 4: Simple successful SRP connection, vbase loaded from new file Test 5: Connection failure due to bad password, vbase loaded from new file 
Name: test_info_callback; Comment: Test the info callback gets called when we expect it to. Test 0: TLSv1.2, server Test 1: TLSv1.2, client Test 2: TLSv1.3, server Test 3: TLSv1.3, client Test 4: TLSv1.3, server, early_data Test 5: TLSv1.3, client, early_data 
Name: test_ticket_callbacks; Comment: Test the various ticket callbacks Test 0: TLSv1.2, no ticket key callback, no ticket, no renewal Test 1: TLSv1.3, no ticket key callback, no ticket, no renewal Test 2: TLSv1.2, no ticket key callback, no ticket, renewal Test 3: TLSv1.3, no ticket key callback, no ticket, renewal Test 4: TLSv1.2, no ticket key callback, ticket, no renewal Test 5: TLSv1.3, no ticket key callback, ticket, no renewal Test 6: TLSv1.2, no ticket key callback, ticket, renewal Test 7: TLSv1.3, no ticket key callback, ticket, renewal Test 8: TLSv1.2, ticket key callback, ticket, no renewal Test 9: TLSv1.3, ticket key callback, ticket, no renewal Test 10: TLSv1.2, ticket key callback, ticket, renewal Test 11: TLSv1.3, ticket key callback, ticket, renewal 
Name: test_shutdown; Comment: Test bi-directional shutdown. Test 0: TLSv1.2 Test 1: TLSv1.2, server continues to read/write after client shutdown Test 2: TLSv1.3, no pending NewSessionTicket messages Test 3: TLSv1.3, pending NewSessionTicket messages Test 4: TLSv1.3, server continues to read/write after client shutdown, server sends key update, client reads it Test 5: TLSv1.3, server continues to read/write after client shutdown, server sends CertificateRequest, client reads and ignores it Test 6: TLSv1.3, server continues to read/write after client shutdown, client doesn't read it 
Name: test_cert_cb_int; Comment: Test the certificate callback. Test 0: Callback fails Test 1: Success - no SSL_set_SSL_CTX() in the callback Test 2: Success - SSL_set_SSL_CTX() in the callback Test 3: Success - Call SSL_check_chain from the callback Test 4: Failure - SSL_check_chain fails from callback due to bad cert in the chain Test 5: Failure - SSL_check_chain fails from callback due to bad ee cert 
Name: test_ca_names_int; Comment: Test setting certificate authorities on both client and server. Test 0: SSL_CTX_set0_CA_list() only Test 1: Both SSL_CTX_set0_CA_list() and SSL_CTX_set_client_CA_list() Test 2: Only SSL_CTX_set_client_CA_list() 
Name: test_servername; Comment: Test 0: Client sets servername and server acknowledges it (TLSv1.2) Test 1: Client sets servername and server does not acknowledge it (TLSv1.2) Test 2: Client sets inconsistent servername on resumption (TLSv1.2) Test 3: Client does not set servername on initial handshake (TLSv1.2) Test 4: Client does not set servername on resumption handshake (TLSv1.2) Test 5: Client sets servername and server acknowledges it (TLSv1.3) Test 6: Client sets servername and server does not acknowledge it (TLSv1.3) Test 7: Client sets inconsistent servername on resumption (TLSv1.3) Test 8: Client does not set servername on initial handshake(TLSv1.3) Test 9: Client does not set servername on resumption handshake (TLSv1.3) 
Name: test_func; Comment: There are 9 passes in the tests 0 = control test tests during writes 1 = free buffers 2 = + allocate buffers after free 3 = + allocate buffers again 4 = + free buffers after allocation tests during reads 5 = + free buffers 6 = + free buffers again 7 = + allocate buffers after free 8 = + free buffers after allocation 
Name: bio_f_tls_corrupt_filter; Comment: Note: Not thread safe! 
Name: ossl_sleep; Comment: Fallback to a busy wait 
Name: bio_f_tls_dump_filter; Comment: Note: Not thread safe! 
Name: create_ssl_objects; Comment: NOTE: Transfers control of the BIOs - this function will free them on error 
Name: create_bare_ssl_connection; Comment: Create an SSL connection, but does not ready any post-handshake NewSessionTicket messages. If |read| is set and we're using DTLS then we will attempt to SSL_read on the connection once we've completed one half of it, to ensure any retransmits get triggered. 
Name: create_ssl_connection; Comment: Create an SSL connection including any post handshake NewSessionTicket messages. 
Name: next_protos_parse; Comment: -next_protos_parse parses a comma separated list of strings into a string in a format suitable for passing to SSL_CTX_set_next_protos_advertised. outlen: (output) set to the length of the resulting buffer on success. in: a NUL terminated string like "abc,def,ghi" returns: a malloced buffer or NULL on failure. 
Name: custom_ext_0_cli_add_cb; Comment: -Four test cases for custom extensions: 0 - no ClientHello extension or ServerHello response 1 - ClientHello with "abc", no response 2 - ClientHello with "abc", empty response 3 - ClientHello with "abc", "defg" response 
Name: custom_ext_0_srv_parse_cb; Comment: custom_ext_0_cli_add_cb returns 0 - the server won't receive a callback for this extension 
Name: custom_ext_0_srv_add_cb; Comment: 'add' callbacks are only called if the 'parse' callback is called 
Name: set_protocol_version; Comment: set_protocol_version - Sets protocol version minimum or maximum Returns 0 on failure and 1 on success 
Name: get_dh512; Comment: -These DH parameters have been generated as follows: $ openssl dhparam -C -noout 512 $ openssl dhparam -C -noout 1024 $ openssl dhparam -C -noout -dsaparam 1024 (The third function has been renamed to avoid name conflicts.) 
Name: psk_key2bn; Comment: convert the PSK key (psk_key) in ascii to binary (psk) 
Name: test_ssl_cert_table; Comment: Sanity check of ssl_cert_table 
Name: check_test; Comment: This could be further simplified by constructing an expected HANDSHAKE_RESULT, and implementing comparison methods for its fields. 
Name: parse_expected_key_type; Comment: Expected key and signature types 
Name: parse_expected_sign_hash; Comment: Expected signing hash 
Name: multihexstr2buf; Comment: Same thing as OPENSSL_hexstr2buf() but enables us to pass the string in 3 chunks 
Name: ssl3_digest_cached_records; Comment: Mocked out implementations of various functions 
Name: ssl_handshake_hash; Comment: Give a hash of the currently set handshake 
Name: test_secret; Comment: End of mocked out code 
Name: test_pem_password_cb; Comment: Old style PEM password callback 
Name: test_old; Comment: Test wrapping old style PEM password callback in a UI method through the use of UI utility functions 
Name: test_new_ui; Comment: Test of UI. This uses the UI method defined in apps/apps.c 
Name: test_alt_chains_cert_forgery; Comment: Test for CVE-2015-1793 (Alternate Chains Certificate Forgery) Chain is as follows: rootCA (self-signed) | interCA | subinterCA subinterCA (self-signed) | | leaf ------------------ | bad rootCA, interCA, subinterCA, subinterCA (ss) all have CA=TRUE leaf and bad have CA=FALSE subinterCA and subinterCA (ss) have the same subject name and keys interCA (but not rootCA) and subinterCA (ss) are in the trusted store (roots.pem) leaf and subinterCA are in the untrusted list (untrusted.pem) bad is the certificate being verified (bad.pem) Versions vulnerable to CVE-2015-1793 will fail to detect that leaf has CA=FALSE, and will therefore incorrectly verify bad 
Name: main; Comment: A simple helper for the perl function OpenSSL::Test::openssl_versions 
Name: glue_strings; Comment: Glue an array of strings together and return it as an allocated string. Optionally return the whole length of this string in |out_len| 
Name: test_diff_header; Comment: Output a diff header 
Name: test_string_null_empty; Comment: Formatted string output routines 
Name: test_fail_string_message; Comment: Wrapper routines so that the underlying code can be shared. The first is the call from inside the test utilities when a conditional fails. The second is the user's call to dump a string. 
Name: hex_convert_memory; Comment: A basic memory byte to hex digit converter with allowance for spacing every so often. 
Name: test_bignum_header_line; Comment: Output the header line for the bignum 
Name: test_bignum_zero_print; Comment: Print a bignum zero taking care to include the correct sign. This routine correctly deals with a NULL bignum pointer as input. 
Name: convert_bn_memory; Comment: Convert a section of memory from inside a bignum into a displayable string with appropriate visual aid spaces inserted. 
Name: test_fail_bignum_common; Comment: Common code to display either one or two bignums, including the diff pointers for changes (only when there are two). 
Name: test_fail_bignum_message; Comment: Wrapper routines so that the underlying code can be shared. The first two are calls from inside the test utilities when a conditional fails. The third is the user's call to dump a bignum. 
Name: test_memory_null_empty; Comment: Handle zero length blocks of memory or NULL pointers to memory 
Name: test_fail_memory_common; Comment: Common code to display one or two blocks of memory. 
Name: test_fail_memory_message; Comment: Wrapper routines so that the underlying code can be shared. The first is the call from inside the test utilities when a conditional fails. The second is the user's call to dump memory. 
Name: test_printf_stdout; Comment: Copyright 2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: read_key; Comment: Read a PEM block. Return 1 if okay, 0 on error. 
Name: test_readstanza; Comment: Read next test stanza; return 1 if found, 0 on EOF or error. 
Name: write_string; Comment: Output a string to the specified bio and return 1 if successful. 
Name: tap_write_ex; Comment: Write some data. This function implements a simple state machine that detects new lines. It indents the output and prefixes it with a '#' character.It returns the number of input characters that were output in in_size. More characters than this will likely have been output however any calling code will be unable to correctly assess the actual number of characters emitted and would be prone to failure if the actual number were returned. The BIO_data field is used as our state. If it is NULL, we've just seen a new line. If it is not NULL, we're processing characters in a line. 
Name: test_fail_message_prefix; Comment: Output a failed test first line. All items are optional are generally not preinted if passed as NULL. The special cases are for prefix where "ERROR" is assumed and for left and right where a non-failure message is produced if either is NULL. 
Name: global_init; Comment: Copyright 2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: cleanup_tests; Comment: Copyright 2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https:www.openssl.orgsourcelicense.html 
Name: agent_query_synchronous; Comment: aqsync.c: the agent_query_synchronous() wrapper function. This is a very small thing to have to put in its own module, but it wants to be shared between back ends, and exist in any SSH client program and also Pageant, and _nowhere else_ (because it pulls in the main agent_query). 
Name: random_save_seed; Comment: Stub implementations of functions not used in non-ssh versions. 
Name: log_eventlog; Comment: Stubs to let everything else link sensibly. 
Name: cmdline_get_passwd_input; Comment: Similar interface to get_userpass_input(), except that here a -1 return means that we aren't capable of processing the prompt and someone else should do it. 
Name: cmdline_process_param; Comment: None if 0, they are processed normally. (-1 is a special value used by pterm to count arguments for a preliminary pass through the argument list; it causes immediate return with an appropriate value with no action taken.) Return value is 2 if both arguments were used; 1 if only p was used; 0 if the parameter wasn't one we recognised; -2 if itshould have been 2 but value was NULL. 
Name: conf_cmp; Comment: Because 'struct key' is the first element in 'struct conf_entry', it's safe (guaranteed by the C standard) to cast arbitrarily back and forth between the two types. Therefore, we only need one comparison function, which can double as a main sort function for the tree (comparing two conf_entry structures with each other) and a search function (looking up an externally supplied key). 
Name: free_key; Comment: Free any dynamic data items pointed to by a 'struct key'. We don't free the structure itself, since it's probably part of a larger allocated block. 
Name: copy_key; Comment: Copy a 'struct key' into another one, copying its dynamic data if necessary. 
Name: free_value; Comment: Free any dynamic data items pointed to by a 'struct value'. We don't free the value itself, since it's probably part of a larger allocated block. 
Name: copy_value; Comment: Copy a 'struct value' into another one, copying its dynamic data if necessary. 
Name: free_entry; Comment: Free an entire 'struct conf_entry' and its dynamic data. 
Name: config_protocolbuttons_handler; Comment: We export this function so that platform-specific config routines can use it to conveniently identify the protocol radio buttons in order to add to them. 
Name: load_selected_session; Comment: Helper function to load the session selected in the list box, if any, as this is done in more than one place below. Returns 0 for failure. 
Name: ctrl_path_compare; Comment: Return the number of matching path elements at the starts of p1 and p2,or INT_MAX if the paths are identical. 
Name: ctrl_find_set; Comment: Find the index of first controlset in a controlbox for a given path. If that path doesn't exist, return the index where it should be inserted. 
Name: ctrl_find_path; Comment: Find the index of next controlset in a controlbox for a given path, or -1 if no such controlset exists. If -1 is passed as input, finds the first. 
Name: ctrl_settitle; Comment: Set up a panel title. 
Name: ctrl_getset; Comment: Retrieve a pointer to a controlset, creating it if absent. 
Name: ctrl_alloc_with_free; Comment: Allocate some private data in a controlbox. 
Name: ctrl_columns; Comment: `ncolumns' is followed by that many percentages, as integers. 
Name: ctrl_radiobuttons; Comment: `ncolumns' is followed by (alternately) radio button titles and intorptrs, until a NULL in place of a title string is seen. Each title is expected to be followed by a shortcut _iff_ `shortcut' is NO_SHORTCUT. 
Name: do_text; Comment: functions required by terminal.c 
Name: platform_default_s; Comment: Default settings that are specific to Unix plink. 
Name: import_possible; Comment: Given a key type, determine whether we know how to import it. 
Name: import_target_type; Comment: Given a key type, determine what native key type (SSH_KEYTYPE_SSH1 or SSH_KEYTYPE_SSH2) it will come out as once we've imported it. 
Name: import_encrypted; Comment: Determine whether a foreign key is encrypted. 
Name: import_ssh1; Comment: Import an SSH-1 key. 
Name: import_ssh2; Comment: Import an SSH-2 key. 
Name: export_ssh1; Comment: Export an SSH-1 key. 
Name: export_ssh2; Comment: Export an SSH-2 key. 
Name: strip_crlf; Comment: Strip trailing CRs and LFs at the end of a line of text. 
Name: ber_write_id_len; Comment: Write an ASN.1/BER identifier and length pair. Returns the number of bytes consumed. Assumes dest contains enough space. Will avoid writing anything if dest is NULL, but still return amount of space required. 
Name: openssh_auto_write; Comment: ----------------------------------------------------------------------The switch function openssh_auto_write(), which chooses one of the concrete OpenSSH output formats based on the key type. 
Name: logwrite; Comment: Internal wrapper function which must be called for _all_ output to the log file. It takes care of opening the log file if it isn't open, buffering data if it's in the process of being opened asynchronously, etc. 
Name: logprintf; Comment: Convenience wrapper on logwrite() which printf-formats the string. 
Name: logflush; Comment: Flush any open log file. 
Name: logfopen; Comment: Open the log file. Takes care of detecting an already-existing file and asking the user whether they want to append, overwrite or cancel logging. 
Name: logtraffic; Comment: Log session traffic. 
Name: log_eventlog; Comment: Log an Event Log entry. Used in SSH packet logging mode; this isalso as convenient a place as any to put the output of Event Log entries to stderr when a command-line tool is in verbose mode. (In particular, this is a better place to put it than in the front ends, because it only has to be done once for all platforms. Platforms which don't have a meaningful stderr can just avoid defining FLAG_STDERR. 
Name: log_packet; Comment: Log an SSH packet. If n_blanks != 0, blank or omit some parts. Set of blanking areas must be in increasing order. 
Name: xlatlognam; Comment: translate format codes into time/date strings and insert them into log file name "&Y":YYYY "&m":MM "&d":DD "&T":hhmmss "&h":<hostname> "&&":& 
Name: flipThisRun; Comment: Flips the text buffer, according to max level, and all higher levels Input: from: text buffer, on which to apply flipping level: resolved levels buffer max: the maximum level found in this line (should be unsigned char) count: line size in bidi_char 
Name: findIndexOfRun; Comment: Finds the index of a run with level equals tlevel 
Name: getType; Comment: Returns the bidi character type of ch. The data table in this function is constructed from the Unicode Character Database, downloadable from unicode.org at the URL http:www.unicode.orgPublicUNIDATAUnicodeData.txt by the following fragment of Perl: perl -ne 'split ";"; $num = hex $_[0]; $type = $_[4];' -e '$fl = ($_[1] =~ First ? 1 : $_[1] =~ Last ? 2 : 0);' -e 'if ($type eq $runtype and ($runend == $num-1 or ' -e ' ($fl==2 and $pfl==1))) {$runend = $num;} else { &reset; }' -e '$pfl=$fl; END { &reset }; sub reset {' -e 'printf" {0x%04x, 0x%04x, %s},_n",$runstart,$runend,$runtype' -e ' if defined $runstart and $runtype ne "ON";' -e '$runstart=$runend=$num; $runtype=$type;}' UnicodeData.txt 
Name: is_rtl; Comment: Function exported to front ends to allow them to identify bidi-active characters (in case, for example, the platform's text display function can't conveniently be prevented from doing its own bidi and so special treatment is required for characters that would cause the bidi algorithm to activate). This function is passed a single Unicode code point, and returns nonzero if the presence of this code point can possibly cause the bidi algorithm to do any reordering. Thus, any string composed entirely of characters for which is_rtl() returns zero should be safe to pass to a bidi-active platform display function without fear. (is_rtl() must therefore also return true for any character which would be affected by Arabic shaping, but this isn't important because all such characters are right-to-left so it would have flagged them anyway.) 
Name: setOverrideBits; Comment: The most significant 2 bits of each level are used to store Override status of each character This function sets the override bits of level according to the value in override, and reurns the new byte. 
Name: getPreviousLevel; Comment: Find the most recent run of the same value in `level', and return the value _before_ it. Used to process U+202C POP DIRECTIONAL FORMATTING. 
Name: do_shape; Comment: The Main shaping function, and the only one to be usedby the outside world. line: buffer to apply shaping to. this must be passed by doBidi() first to: output buffer for the shaped data count: number of characters in line 
Name: do_bidi; Comment: The Main Bidi Function, and the only function that should be used by the outside world. line: a buffer of size count containing text to apply the Bidirectional algorithm to. 
Name: doMirror; Comment: Bad, Horrible function takes a pointer to a character that is checked for having a mirror glyph. 
Name: parse_blocksize; Comment: Parse a string block size specification. This is approximately a subset of the block size specs supported by GNU fileutils: "nk" = n kilobytes "nM" = n megabytes "nG" = n gigabytes All numbers are decimal, and suffixes refer to powers of two. Case-insensitive. 
Name: ctrlparse; Comment: Parse a ^C style character specification. Returns NULL in `next' if we didn't recognise it as a control character, in which case `c' should be ignored. The precise current parsing is an oddity inherited from the terminal answerback-string parsing code. All sequences start with ^; all except^<123> are two characters. The ones that are worth keeping are probably: ^?__ 127 ^@A-Z[_]^__ 0-31 a-z_ 1-26 <num>_ specified by number (decimal, 0octal, 0xHEX) ~__ ^ escape 
Name: host_strchr_internal; Comment: Find a character in a string, unless it's a colon contained within square brackets. Used for untangling strings of the form 'host:port', where host can be an IPv6 literal. We provide several variants of this function, with semantics like various standard string.h functions. 
Name: host_strduptrim; Comment: Trim square brackets off the outside of an IPv6 address literal. Leave all other strings unchanged. Returns a fresh dynamically allocated string. 
Name: dupstr; Comment: ----------------------------------------------------------------------String handling routines. 
Name: dupcat; Comment: Allocate the concatenation of N strings. Terminate arg list with NULL. 
Name: dupvprintf_inner; Comment: Do an sprintf(), but into a custom-allocated buffer. Currently I'm doing this via vsnprintf. This has worked so far, but it's not good, because vsnprintf is not available on all platforms. There's an ifdef to use `_vsnprintf', which seems to be the local name for it on Windows. Other platforms may lack it completely, in which case it'll be time to rewrite this function in a totally different way. The only `properly' portable solution I can think of is to implement my own format string scanner, which figures out an upper bound for the length of each formatting directive, allocates the buffer as it goes along, and calls sprintf() to actually process each directive. If I ever need to actually do this, some caveats: - It's very hard to find a reliable upper bound for floating-point values. %f, in particular, when supplied with a number near to the upper or lower limit of representable numbers, could easily take several hundred characters. It's probably feasible to predict this statically using the constants in <float.h>, or even to predict it dynamically by looking at the exponent of the specific float provided, but it won't be fun. - Don't forget to _check_, after calling sprintf, that it's used at most the amount of space we had available. - Fault any formatting directive we don't fully understand. The aim here is to _guarantee_ that we never overflow the buffer, because this is a security-critical function. If we see a directive we don't know about, we should panic and die rather than run any risk. 
Name: fgetline; Comment: Read an entire line of text from a file. Return a buffer malloced to be as big as necessary (caller must free). 
Name: chomp; Comment: Perl-style 'chomp', for a line we just read with fgetline. Unlike Perl chomp, however, we're deliberately forgiving of strange line-ending conventions. Also we forgive NULL on input, so you can just write 'line = chomp(fgetline(fp));' and not bother checkingfor NULL until afterwards. 
Name: base64_encode_atom; Comment: ----------------------------------------------------------------------Core base64 encoding and decoding routines. 
Name: debug_printf; Comment: defined in per-platform *misc.c 
Name: conf_launchable; Comment: Determine whether or not a Conf represents a session which can sensibly be launched right now. 
Name: smemclr; Comment: Securely wipe memory. The actual wiping is no different from what memset would do: the point of 'securely' is to try to be sure over-clever compilers won't optimise away memsets on variables that are about to be freed or go out of scope. See https:buildsecurityin.us-cert.govbsi-ruleshomeg1771-BSI.htmlSome platforms (e.g. Windows) may provide their own version of this function. 
Name: validate_manual_hostkey; Comment: Validate a manual host key specification (either entered in the GUI, or via -hostkey). If valid, we return TRUE, and update 'key' to contain a canonicalised version of the key string in 'key' (which is guaranteed to take up at most as much space as the original version), suitable for putting into the Conf. If not valid, we return FALSE. 
Name: schedule_timer; Comment: notiming.c: stub version of timing API. Used in any tool which needs a subsystem linked against the timing API but doesn't want to actually provide timing. For example, key generation tools need the random number generator, but they don't want the hassle of calling noise_regular() at regular intervals - and they don't _need_ it either, since they have their own rigorous and different means of noise collection. 
Name: random_byte; Comment: We need this to link with the RSA code, because rsaencrypt() pads its data with random bytes. Since we only use rsadecrypt() and the signing functions, which are deterministic, this should never be called. If it _is_ called, there is a _serious_ problem, because it won't generate true random numbers. So we must scream, panic, and exit immediately if that should happen. 
Name: cmpkeys_rsa; Comment: Key comparison function for the 2-3-4 tree of RSA keys. 
Name: cmpkeys_ssh2; Comment: Key comparison function for the 2-3-4 tree of SSH-2 keys. 
Name: cmpkeys_ssh2_asymm; Comment: Key comparison function for looking up a blob in the 2-3-4 tree of SSH-2 keys. 
Name: pageant_make_keylist1; Comment: Create an SSH-1 key list in a malloc'ed buffer; return itslength. 
Name: pageant_make_keylist2; Comment: Create an SSH-2 key list in a malloc'ed buffer; return itslength. 
Name: pageant_forget_passphrases; Comment: After processing a list of filenames, we want to forget the passphrases. 
Name: pfd_connect; Comment: Called when receiving a PORT OPEN from the server to make a connection to a destination host. On success, returns NULL and fills in *pf_ret. On error, returns a dynamically allocated error message string. 
Name: pfl_accepting; Comment: called when someone connects to the local port 
Name: pfl_listen; Comment: Add a new port-forwarding listener from srcaddr:port -> desthost:destport. On success, returns NULL and fills in *pl_ret. On error, returns a dynamically allocated error message string. 
Name: pfl_terminate; Comment: Terminate a listener. 
Name: pfd_send; Comment: Called to send data down the raw connection. 
Name: proxy_activate; Comment: Call this when proxy negotiation is complete, so that this socket can begin working normally. 
Name: sk_proxy_plug; Comment: basic proxy socket functions 
Name: plug_proxy_log; Comment: basic proxy plug functions 
Name: proxy_for_destination; Comment: This function can accept a NULL pointer as `addr', in which case it will only check the host name. 
Name: get_line_end; Comment: ----------------------------------------------------------------------HTTP CONNECT proxy type. 
Name: proxy_socks4_negotiate; Comment: SOCKS version 4 
Name: proxy_socks5_negotiate; Comment: SOCKS version 5 
Name: format_telnet_command; Comment: ----------------------------------------------------------------------`Telnet' proxy type. (This is for ad-hoc proxies where you connect to the proxy's telnet port and send a command such as `connect host port'. The command is configurable, since this proxy type is typically not standardised or at all well-defined.) 
Name: fatalbox; Comment: Print an error message and perform a fatal exit. 
Name: agent_schedule_callback; Comment: In pscp, all agent requests should be synchronous, so this is a never-called stub. 
Name: from_backend; Comment: length and phys. size of buffer 
Name: ssh_scp_init; Comment: Loop through the ssh connection and authentication process. 
Name: bump; Comment: Print an error message and exit after closing the SSH link. 
Name: sftp_wait_for_reply; Comment: Wait for the reply to a single SFTP request. Parallels the same function in psftp.c (but isn't centralised into sftp.c because the latter module handles SFTP only and shouldn't assume that SFTP is the only thing going on by calling connection_fatal). 
Name: do_cmd; Comment: Open an SSH connection to user@host and execute cmd. 
Name: print_stats; Comment: Update statistic information about current file. 
Name: colon; Comment: Find a colon in str and return a pointer to the colon. This is used to separate hostname from filename. 
Name: is_dots; Comment: Determine whether a string is entirely composed of dots. 
Name: response; Comment: Wait for a response from the other side. Return 0 if ok, -1 if error. 
Name: sftp_ls_compare; Comment: ----------------------------------------------------------------------sftp-based replacement for the hacky `pscp -ls'. 
Name: scp_sink_setup; Comment: Yes, I know; I have an scp_sink_setup _and_ an scp_sink_init.That's bad. The difference is that scp_sink_setup is called once right at the start, whereas scp_sink_init is called to initialise every level of recursion in the protocol. 
Name: run_err; Comment: ---------------------------------------------------------------------- Send an error message to the other side and to the screen. Increment error counter. 
Name: source; Comment: Execute the source part of the SCP protocol. 
Name: rsource; Comment: Recursively send the contents of a directory. 
Name: sink; Comment: Execute the sink part of the SCP protocol. 
Name: toremote; Comment: We will copy local files to a remote server. 
Name: tolocal; Comment: We will copy files from a remote server to the local machine. 
Name: get_dir_list; Comment: We will issue a list command to get a remote directory. 
Name: usage; Comment: Short description of parameters. 
Name: psftp_main; Comment: Main program. (Called `psftp_main' because it gets called from sftp.c; bit silly, I know, but it had to be called _something_.) 
Name: sftp_wait_for_reply; Comment: ----------------------------------------------------------------------Manage sending requests and waiting for replies. 
Name: canonify; Comment: Attempt to canonify a pathname starting from the pwd. If canonification fails, at least fall back to returning a _valid_ pathname (though it may be ugly, eg /home/simon/../foobar). 
Name: sftp_name_compare; Comment: qsort comparison routine for fxp_name structures. Sorts by real file name. 
Name: bare_name_compare; Comment: Likewise, but for a bare char *. 
Name: sftp_get_file; Comment: ----------------------------------------------------------------------The meat of the `get' and `put' commands. 
Name: wildcard_iterate; Comment: General function to match a potential wildcard in a filename argument and iterate over every matching file. Used in several PSFTP commands (rmdir, rm, chmod, mv). 
Name: is_wildcard; Comment: Handy helper function. 
Name: sftp_cmd_ls; Comment: List a directory. If no arguments are given, list pwd; otherwiselist the directory given in words[1]. 
Name: sftp_cmd_cd; Comment: Change directories. We do this by canonifying the new name, then trying to OPENDIR it. Only if that succeeds do we set the new pwd. 
Name: sftp_cmd_pwd; Comment: Print current directory. Easy as pie. 
Name: sftp_general_get; Comment: Get a file and save it at the local end. We have three very similar commands here. The basic one is `get'; `reget' differs in that it checks for the existence of the destination file and starts from where a previous aborted transfer left off; `mget'differs in that it interprets all its arguments as files to transfer (never as a different local name for a remote file) and can handle wildcards. 
Name: sftp_general_put; Comment: Send a file and store it at the remote end. We have three very similar commands here. The basic one is `put'; `reput' differs in that it checks for the existence of the destination file and starts from where a previous aborted transfer left off; `mput'differs in that it interprets all its arguments as files to transfer (never as a different remote name for a local file) and can handle wildcards. 
Name: sftp_getcmd; Comment: ----------------------------------------------------------------------Command line reading and parsing. 
Name: agent_schedule_callback; Comment: In psftp, all agent requests should be synchronous, so this is a never-called stub. 
Name: psftp_connect; Comment: Connect to a host. 
Name: psftp_main; Comment: Main program. Parse arguments etc. 
Name: raw_init; Comment: Called to set up the raw connection. Returns an error message, or NULL on success. Also places the canonical host name into `realhost'. It must be freed by the caller. 
Name: raw_reconfig; Comment: Stub routine (we don't have any need to reconfigure this backend). 
Name: raw_send; Comment: Called to send data down the raw connection. 
Name: raw_sendbuffer; Comment: Called to query the current socket sendability status. 
Name: raw_size; Comment: Called to set the size of the window 
Name: raw_special; Comment: Send raw special codes. We only handle outgoing EOF here. 
Name: raw_get_specials; Comment: Return a list of the special codes that make sense in this protocol. 
Name: raw_cfg_info; Comment: cfg_info for Raw does nothing at all. 
Name: rlogin_init; Comment: Called to set up the rlogin connection. Returns an error message, or NULL on success. Also places the canonical host name into `realhost'. It must be freed by the caller. 
Name: rlogin_reconfig; Comment: Stub routine (we don't have any need to reconfigure this backend). 
Name: rlogin_send; Comment: Called to send data down the rlogin connection. 
Name: rlogin_sendbuffer; Comment: Called to query the current socket sendability status. 
Name: rlogin_size; Comment: Called to set the size of the window 
Name: rlogin_special; Comment: Send rlogin special codes. 
Name: rlogin_get_specials; Comment: Return a list of the special codes that make sense in this protocol. 
Name: rlogin_cfg_info; Comment: cfg_info for rlogin does nothing at all. 
Name: backend_from_name; Comment: Convenience functions to access the backends[] array (which is only present in tools that manage settings). 
Name: gppfont; Comment: gppfont and gppfile cannot have local defaults, since the very format of a Filename or FontSpec is platform-dependent. So the platform-dependent functions MUST return some sort of value. 
Name: gppmap; Comment: Read a set of name-value pairs in the format we occasionally use: NAME_tVALUE_0NAME_tVALUE_0_0 in memory NAME=VALUE,NAME=VALUE, in storage If there's no "=VALUE" (e.g. just NAME,NAME,NAME) then those keys are mapped to the empty string. 
Name: wmap; Comment: Write a set of name/value pairs in the above format, or just the names if include_values is FALSE. 
Name: gprefs_from_str; Comment: Helper function to parse a comma-separated list of strings into a preference list array of values. Any missing values are added to the end and duplicates are weeded. XXX: assumes vals in 'mapping' are small +ve integers 
Name: gprefs; Comment: Read a preference list. 
Name: wprefs; Comment: Write out a preference list. 
Name: sftp_pkt_ensure; Comment: ----------------------------------------------------------------------SFTP packet construction functions. 
Name: sftp_pkt_adduint64; Comment: None}
Name: sftp_pkt_getbyte; Comment: ----------------------------------------------------------------------SFTP packet decode functions. 
Name: sftp_send; Comment: ----------------------------------------------------------------------Send and receive packet functions. 
Name: mkstr; Comment: ----------------------------------------------------------------------String handling routines. 
Name: fxp_got_status; Comment: Deal with (and free) an FXP_STATUS packet. Return 1 if SSH_FX_OK, 0 if SSH_FX_EOF, and -1 for anything else (error). Also place the status into fxp_errtype. 
Name: fxp_init; Comment: Perform exchange of init/version packets. Return 0 on failure. 
Name: fxp_realpath_send; Comment: Canonify a pathname. 
Name: fxp_open_send; Comment: Open a file. 
Name: fxp_opendir_send; Comment: Open a directory. 
Name: fxp_close_send; Comment: Close a file/dir. 
Name: fxp_stat_send; Comment: Retrieve the attributes of a file. We have fxp_stat which works on filenames, and fxp_fstat which works on open file handles. 
Name: fxp_setstat_send; Comment: Set the attributes of a file. 
Name: fxp_read_send; Comment: Read from a file. Returns the number of bytes read, or -1 on an error, or possibly 0 if EOF. (I'm not entirely sure whether it will return 0 on EOF, or return -1 and store SSH_FX_EOF in the error indicator. It might even depend on the SFTP server.) 
Name: fxp_readdir_send; Comment: Read from a directory. 
Name: fxp_write_send; Comment: Write to a file. Returns 0 on error, 1 on OK. 
Name: fxp_free_names; Comment: Free up an fxp_names structure. 
Name: fxp_dup_name; Comment: Duplicate an fxp_name structure. 
Name: fxp_free_name; Comment: Free up an fxp_name structure. 
Name: fxp_get_userdata; Comment: Store user data in an sftp_request structure. 
Name: xfer_download_gotpkt; Comment: Returns INT_MIN to indicate that it didn't even get as far as fxp_read_recv and hence has not freed pktin. 
Name: xfer_upload_gotpkt; Comment: Returns INT_MIN to indicate that it didn't even get as far as fxp_write_recv and hence has not freed pktin. 
Name: ssh_tty_parse_specchar; Comment: Helper functions for parsing tty-related config. 
Name: if; Comment: do nothing 
Name: 			if; Comment: ___If the user specified a new original password ___(IYSWIM), overwrite any previously specified ___one. ___(A side effect is that the user doesn't have to ___re-enter it if they louse up the new password.) ___ 
Name: aes_encrypt_nb_4; Comment: Core encrypt routines, expecting word32 inputs read big-endian from the byte-oriented input stream. 
Name: aes_decrypt_nb_4; Comment: Core decrypt routines, expecting word32 inputs read big-endian from the byte-oriented input stream. 
Name: aes_setup; Comment: Set up an AESContext. `keylen' and `blocklen' are measured in bytes; each can be either 16 (128-bit), 24 (192-bit), or 32(256-bit). 
Name: arcfour_make_context; Comment: We don't implement Arcfour in SSH-1 because it's utterly insecure in several ways. See CERT Vulnerability Notes VU#25309, VU#665372, and VU#565052. We don't implement the "arcfour" algorithm in SSH-2 because it doesn't stir the cipher state before emitting keystream, and hence is likely to leak data about the key. 
Name: blowfish_make_context; Comment: -- Interface with PuTTY -- 
Name: internal_add; Comment: Internal addition. Sets c = a - b, where 'a', 'b' and 'c' are all big-endian arrays of 'len' BignumInts. Returns the carry off the top. 
Name: internal_sub; Comment: Internal subtraction. Sets c = a - b, where 'a', 'b' and 'c' are all big-endian arrays of 'len' BignumInts. Any borrow from the top is ignored. 
Name: internal_mul_low; Comment: Variant form of internal_mul used for the initial step of Montgomery reduction. Only bothers outputting 'len' words (everything above that is thrown away). 
Name: monty_reduce; Comment: Montgomery reduction. Expects x to be a big-endian array of 2len BignumInts whose value satisfies 0 <= x < rn (where r = 2^(len BIGNUM_INT_BITS) is the Montgomery base). Returns in the same array a value x' which is congruent to xr^{-1} mod n, and satisfies 0 <=x' < n. 'n' and 'mninv' should be big-endian arrays of 'len' BignumInts each, containing respectively n and the multiplicative inverse of -n mod r. 'tmp' is an array of BignumInt used as scratch space, of length at least 3*len + mul_compute_scratch(len). 
Name: internal_mod; Comment: Compute a = a % m. Input in first alen words of a and first mlen words of m. Output in first alen words of a (of which first alen-mlen words will be zero). Quotient is accumulated in the `quotient' array, which is a Bignum rather than the internal bigendian format. 'recip' must be the result of calling reciprocal_word() on the top BIGNUM_INT_BITS of the modulus (denoted m0 in comments below), with the topmost set bit normalised to the MSB of the input to reciprocal_word. 'rshift' is how far left the top nonzero word of the modulus had to be shifted to set that top bit. 
Name: modpow_simple; Comment: Compute (base ^ exp) % mod, the pedestrian way. 
Name: modpow; Comment: Compute (base ^ exp) % mod. Uses the Montgomery multiplication technique where possible, falling back to modpow_simple otherwise. 
Name: modmul; Comment: Compute (pq) % mod. The most significant word of mod MUST be non-zero. We assume that the result array is the same size as the mod array. 
Name: bigdivmod; Comment: Compute p % mod. The most significant word of mod MUST be non-zero. We assume that the result array is the same size as the mod array. We optionally write out a quotient if `quotient' is non-NULL. We can avoid writing out the result if `result' is NULL. 
Name: decbn; Comment: Decrement a number. 
Name: ssh1_read_bignum; Comment: Read an SSH-1-format bignum from a data buffer. Return the number of bytes consumed, or -1 if there wasn't enough data. 
Name: bignum_bitcount; Comment: Return the bit count of a bignum, for SSH-1 encoding. 
Name: ssh1_bignum_length; Comment: Return the byte length of a bignum when SSH-1 encoded. 
Name: ssh2_bignum_length; Comment: Return the byte length of a bignum when SSH-2 encoded. 
Name: bignum_byte; Comment: Return a byte from a bignum; 0 is least significant, etc. 
Name: bignum_bit; Comment: Return a bit from a bignum; 0 is least significant, etc. 
Name: bignum_set_bit; Comment: Set a bit in a bignum; 0 is least significant, etc. 
Name: ssh1_write_bignum; Comment: Write a SSH-1-format bignum into a buffer. It is assumed the buffer is big enough. Returns the number of bytes used. 
Name: bignum_cmp; Comment: Compare two bignums. Returns like strcmp. 
Name: bignum_rshift; Comment: Right-shift one bignum to form another. 
Name: bignum_lshift; Comment: Left-shift one bignum to form another. 
Name: bigmuladd; Comment: Non-modular multiplication and addition. 
Name: bigmul; Comment: Non-modular multiplication. 
Name: bigadd; Comment: Simple addition. 
Name: bigsub; Comment: Subtraction. Returns a-b, or NULL if the result would come out negative (recall that this entire bignum module only handles positive numbers). 
Name: bignum_bitmask; Comment: Create a bignum which is the bitmask covering another one. That is, the smallest integer which is >= N and is also one less than a power of two. 
Name: bignum_from_long; Comment: Convert an unsigned long into a bignum. 
Name: bignum_add_long; Comment: Add a long to a bignum. 
Name: bignum_mod_short; Comment: Compute the residue of a bignum, modulo a (max 16-bit) short. 
Name: bigdiv; Comment: Simple division. 
Name: bigmod; Comment: Simple remainder. 
Name: biggcd; Comment: Greatest common divisor. 
Name: modinv; Comment: Modular inverse, using Euclid's extended algorithm. 
Name: bignum_decimal; Comment: Render a bignum into decimal. Return a malloced string holding the decimal representation. 
Name: chacha20_key; Comment: Initialise context with 256bit key 
Name: chacha20_decrypt; Comment: Decrypt is encrypt... It's xor against a PRNG... 
Name: poly1305_key; Comment: Takes a 256 bit key 
Name: poly1305_feed_chunk; Comment: Feed up to 16 bytes (should only be less for the last chunk) 
Name: poly1305_finalise; Comment: Finalise and populate buffer with 16 byte with MAC 
Name: poly_op; Comment: The generic poly operation used before generate and verify 
Name: check_crc; Comment: detect if a block is used in a particular pattern 
Name: detect_attack; Comment: Detect a crc32 compensation attack on a packet 
Name: main; Comment: Small standalone utility which allows encryption and decryption of single cipher blocks in the XDM-AUTHORIZATION-1 style. Written during the rework of X authorisation for connection sharing, to check the corner case when xa1_firstblock matches but the rest of the authorisation is bogus. Just compile this file on its own with the above ifdef symbol predefined: gcc -DTEST_XDM_AUTH -o sshdes sshdes.c 
Name: dh_init; Comment: Common DH initialisation. 
Name: dh_setup_group; Comment: Initialise DH for a standard group. 
Name: dh_setup_gex; Comment: Initialise DH for a server-supplied group. 
Name: dh_cleanup; Comment: Clean up and free a context. 
Name: dh_create_e; Comment: DH stage 1: invent a number x between 1 and q, and compute e = g^x mod p. Return e. If `nbits' is greater than zero, it is used as an upper limit for the number of bits in x. This is safe provided that (a) you use twice as many bits in x as the number of bits you expect to use in your session key, and (b) the DH group is a safe prime (which SSH demands that it must be). P. C. van Oorschot, M. J. Wiener "On Diffie-Hellman Key Agreement with Short Exponents". Advances in Cryptology: Proceedings of Eurocrypt '96 Springer-Verlag, May 1996. 
Name: dh_validate_f; Comment: DH stage 2-epsilon: given a number f, validate it to ensure it's in range. (RFC 4253 section 8: "Values of 'e' or 'f' that are not in the range [1, p-1] MUST NOT be sent or accepted by either side." Also, we rule out 1 and p-1 too, since that's easy to do and since they lead to obviously weak keys that even a passive eavesdropper can figure out.) 
Name: dh_find_K; Comment: DH stage 2: given a number f, compute K = f^x mod p. 
Name: dss_newkey; Comment: forward reference 
Name: initialise_wcurve; Comment: ----------------------------------------------------------------------Elliptic curve definitions 
Name: ec_aminus3; Comment: Return 1 if a is -3 % p, otherwise return 0This is used because there are some maths optimisations 
Name: ecf_add; Comment: ----------------------------------------------------------------------Elliptic curve field maths 
Name: ec_point_free; Comment: ----------------------------------------------------------------------Memory functions 
Name: ecp_normalise; Comment: Returns 1 on success and 0 on memory error 
Name: ecp_mul; Comment: Not static because it is used by sshecdsag.c to generate a new key 
Name: ec_public; Comment: ----------------------------------------------------------------------Public point from private 
Name: _ecdsa_verify; Comment: ----------------------------------------------------------------------Basic sign and verify routines 
Name: getstring; Comment: ----------------------------------------------------------------------Misc functions 
Name: ec_alg_by_oid; Comment: ----------------------------------------------------------------------Helper functions for finding key algorithms and returning auxiliary data. 
Name: ssh_gssapi_init; Comment: Dummy function so this source file defines something if NO_GSSAPI is defined. 
Name: MD5Init; Comment: ----------------------------------------------------------------------Outer MD5 algorithm: take an arbitrary length byte string, convert it into 16-word blocks with the prescribed padding at the end, and pass those blocks to the core MD5 algorithm. 
Name: hmacmd5_make_context; Comment: ----------------------------------------------------------------------The above is the MD5 algorithm itself. Now we implement the HMAC wrapper on it. Some of these functions are exported directly, because they are useful elsewhere (SOCKS5 CHAP authentication uses HMAC-MD5). 
Name: ssh_gss_setup; Comment: For platforms not supporting GSSAPI 
Name: primegen; Comment: Generate a prime. We can deal with various extra properties of the prime: - to speed up use in RSA, we can arrange to select a prime with the property (prime % modulus) != residue. - for use in DSA, we can arrange to select a prime which is one more than a multiple of a dirty great bignum. In this case `bits' gives the size of the factor by which we _multiply_ that bignum, rather than the size of the whole number. - for the basically cosmetic purposes of generating keys of the length actually specified rather than off by one bit, we permit the caller to provide an unsigned integer 'firstbits' which will match the top few bits of the returned prime. (That is, there will exist some n such that (returnvalue >> n) == firstbits.) If 'firstbits' is not needed, specifying it to either 0 or 1 is an adequate no-op. 
Name: invent_firstbits; Comment: Invent a pair of values suitable for use as 'firstbits' in the above function, such that their product is at least 2. This is used for generating both RSA and DSA keys which have exactly the specified number of bits rather than one fewer - if you generate an a-bit and a b-bit number completely at random and multiply them together, you could end up with either an (ab-1)-bit number or an (ab)-bit number. The former happens log(2)*2-1 of the time (about 39%) and, though actually harmless, every time it occurs it has a non-zero probability of sparking a user email along the lines of 'Hey, I asked PuTTYgen for a 2048-bit key and I only got 2047 bits! Bug!' 
Name: rsakey_encrypted; Comment: See whether an RSA key is encrypted. Return its comment field as well. 
Name: rsakey_pubblob; Comment: Return a malloc'ed chunk of memory containing the public blob of an RSA key, as given in the agent protocol (modulus bits, exponent, modulus). 
Name: saversakey; Comment: Save an RSA key file. Return nonzero on success. 
Name: read_header; Comment: PuTTY's own format for SSH-2 keys is as follows: The file is text. Lines are terminated by CRLF, although CR-only and LF-only are tolerated on input. The first line says "PuTTY-User-Key-File-2: " plus the name of the algorithm ("ssh-dss", "ssh-rsa" etc). The next line says "Encryption: " plus an encryption type. Currently the only supported encryption types are "aes256-cbc" and "none". The next line says "Comment: " plus the comment string. Next there is a line saying "Public-Lines: " plus a number N. The following N lines contain a base64 encoding of the public part of the key. This is encoded as the standard SSH-2 public key blob (with no initial length): so for RSA, for example, it will read string "ssh-rsa" mpint exponent mpint modulus Next, there is a line saying "Private-Lines: " plus a number N, and then N lines containing the (potentially encrypted) private part of the key. For the key type "ssh-rsa", this will be composed of mpint private_exponent mpint p (the larger of the two primes) mpint q (the smaller prime) mpint iqmp (the inverse of q modulo p) data padding (to reach a multiple of the cipher block size) And for "ssh-dss", it will be composed of mpint x (the private key parameter) [ string hash 20-byte hash of mpints p || q || g only in old format ] Finally, there is a line saying "Private-MAC: " plus a hex representation of a HMAC-SHA-1 of: string name of algorithm ("ssh-dss", "ssh-rsa") string encryption type string comment string public-blob string private-plaintext (the plaintext version of the private part, including the final padding) The key to the MAC is itself a SHA-1 hash of: data "putty-private-key-file-mac-key" data passphrase (An empty passphrase is used for unencrypted keys.) If the key is encrypted, the encryption key is derived from the passphrase by means of a succession of SHA-1 hashes. Each hash is the hash of: uint32 sequence-number data passphrase where the sequence-number increases from zero. As many of these hashes are used as necessary. For backwards compatibility with snapshots between 0.51 and 0.52, we also support the older key file format, which begins with "PuTTY-User-Key-File-1" (version number differs). In this format the Private-MAC: field only covers the private-plaintext field and nothing else (and without the 4-byte string length on the front too). Moreover, the Private-MAC: field can be replaced with a Private-Hash: field which is a plain SHA-1 hash instead of an HMAC (this was generated for unencrypted keys). 
Name: ssh1_pubkey_str; Comment: ----------------------------------------------------------------------Output public keys. 
Name: ssh2_fingerprint_blob; Comment: ----------------------------------------------------------------------Utility functions to compute SSH-2 fingerprints in a uniform way. 
Name: key_type_fp; Comment: ----------------------------------------------------------------------Determine the type of a private key file. 
Name: key_type_to_str; Comment: Convert the type word to a string, for `wrong type' error messages. 
Name: random_byte; Comment: Special dummy version of the RNG for use when fuzzing. 
Name: crt_modpow; Comment: Compute (base ^ exp) % mod, provided mod == pq, with p,q distinct primes, and iqmp is the multiplicative inverse of q mod p. Uses Chinese Remainder Theorem to speed computation up over the obvious implementation of a single big modpow. 
Name: rsa_privkey_op; Comment: This function is a wrapper on modpow(). It has the same effect as modpow(), but employs RSA blinding to protect against timing attacks and also uses the Chinese Remainder Theorem (implemented above, in crt_modpow()) to speed up the main operation. 
Name: rsa_fingerprint; Comment: Generate a fingerprint string for the key. Compatible with the OpenSSH fingerprint code. 
Name: rsa_verify; Comment: Verify that the public data in an RSA key matches the private data. We also check the private data itself: we ensure that p > q and that iqmp really is the inverse of q mod p. 
Name: rsa_public_blob; Comment: Public key blob as used by Pageant: exponent before modulus. 
Name: rsa_public_blob_len; Comment: Given a public blob, determine its length. 
Name: getstring; Comment: ----------------------------------------------------------------------Implementation of the ssh-rsa signing key type. 
Name: rsa2_newkey; Comment: forward reference 
Name: rsa_generate; Comment: we like this prime 
Name: SHA256_Init; Comment: ----------------------------------------------------------------------Outer SHA256 algorithm: take an arbitrary length byte string, convert it into 16-word blocks with the prescribed padding at the end, and pass those blocks to the core SHA256 algorithm. 
Name: sha256_init; Comment: Thin abstraction for things where hashes are pluggable. 
Name: sha256_make_context; Comment: ----------------------------------------------------------------------The above is the SHA-256 algorithm itself. Now we implement the HMAC wrapper on it. 
Name: SHA512_Init; Comment: ----------------------------------------------------------------------Outer SHA512 algorithm: take an arbitrary length byte string, convert it into 16-doubleword blocks with the prescribed padding at the end, and pass those blocks to the core SHA512 algorithm. 
Name: sha512_init; Comment: Thin abstraction for things where hashes are pluggable. 
Name: SHA_Core_Init; Comment: ----------------------------------------------------------------------Core SHA algorithm: processes 16-word blocks into a message digest. 
Name: SHA_Init; Comment: ----------------------------------------------------------------------Outer SHA algorithm: take an arbitrary length byte string, convert it into 16-word blocks with the prescribed padding at the end, and pass those blocks to the core SHA algorithm. 
Name: sha1_init; Comment: Thin abstraction for things where hashes are pluggable. 
Name: sha1_make_context; Comment: ----------------------------------------------------------------------The above is the SHA-1 algorithm itself. Now we implement the HMAC wrapper on it. 
Name: share_xchannel_add_message; Comment: Append a message to the end of an xchannel's queue, with the length and type code filled in and the data block allocated but uninitialised. 
Name: ssh_share_sockname; Comment: Decide on the string used to identify the connection point between upstream and downstream (be it a Windows named pipe or a Unix-domain socket or whatever else). I wondered about making this a SHA hash of all sorts of pieces of the PuTTY configuration - essentially everything PuTTY uses to know where and how to make a connection, including all the proxy details (or rather, all the _relevant_ ones - only including settings that other settings didn't prevent from having any effect), plus the username. However, I think it's better to keep it really simple: the connection point identifier is derived from the hostname and port used to index the host-key cache (not necessarily where we _physically_ connected to, in cases involving proxies or CONF_loghost), plus the username if one is specified. The per-platform code will quite likely hash or obfuscate this name in turn, for privacy from other users; failing that, it mighttransform it to avoid dangerous filename characters and so on. But that doesn't matter to us: for us, the point is that two session configurations which return the same string from this function will be treated as potentially shareable with each other. 
Name: ssh_connection_sharing_init; Comment: Init function for connection sharing. We either open a listening socket and become an upstream, or connect to an existing one and become a downstream, or do neither. We are responsible for deciding which of these to do (including checking the Conf to see if connection sharing is even enabled in the first place). If we become a downstream, we return the Socket with which we connected to the upstream; otherwise (whether or not we have established anupstream) we return NULL. 
Name: zlib_disable_compression; Comment: Turn off actual LZ77 analysis for one block, to facilitate construction of a precise-length IGNORE packet. Returns the length adjustment (which is only valid for packets < 65536 bytes, but that seems reasonable enough). 
Name: zlib_mkonetab; Comment: Build a single-level decode table for elements [minlength,maxlength) of the provided code/length tables, and recurse to build subtables. 
Name: zlib_mktable; Comment: Build a decode table, given a set of Huffman tree lengths. 
Name: option_side_effects; Comment: Generate side effects of enabling or disabling an option. 
Name: telnet_init; Comment: Called to set up the Telnet connection. Returns an error message, or NULL on success. Also places the canonical host name into `realhost'. It must be freed by the caller. 
Name: telnet_reconfig; Comment: Reconfigure the Telnet backend. There's no immediate action necessary, in this backend: we just save the fresh config for any subsequent negotiations. 
Name: telnet_send; Comment: Called to send data down the Telnet connection. 
Name: telnet_sendbuffer; Comment: Called to query the current socket sendability status. 
Name: telnet_size; Comment: Called to set the size of the window from Telnet's POV. 
Name: telnet_special; Comment: Send Telnet special codes. 
Name: telnet_cfg_info; Comment: cfg_info for Telnet does nothing at all. 
Name: cc_check; Comment: Diagnostic function: verify that a termline has a correct combining character structure. This is a performance-intensive check, so it's no longer enabled by default. 
Name: add_cc; Comment: Add a combining character to a character cell. 
Name: clear_cc; Comment: Clear the combining character list in a character cell. 
Name: termchars_equal_override; Comment: Compare two character cells for equality. Special case required in do_paint() where we override what we expect the chr and attr fields to be. 
Name: copy_termchar; Comment: Copy a character cell. (Requires a pointer to the destination termline, so as to access its free list.) 
Name: move_termchar; Comment: Move a character cell within its termline. 
Name: resizeline; Comment: Resize a line to make it `cols' columns wide. 
Name: sblines; Comment: Get the number of lines in the scrollback. 
Name: lineptr; Comment: Retrieve a line of the screen or of the scrollback, according to whether the y coordinate is non-negative or negative (respectively). 
Name: check_line_size; Comment: Coerce a termline to the terminal's current width. Unlike the optional resize in lineptr() above, this is potentially destructive of text, since it can shrink as well as grow the line. We call this whenever a termline is actually going to be modified. Helpfully, putting a single call to this function in check_boundary deals with _nearly_ all such cases, leaving only a few things like bulk erase and ESC#8 to handle separately. 
Name: seen_disp_event; Comment: Call this whenever the terminal window state changes, to queue an update. 
Name: term_schedule_tblink; Comment: Call when the terminal's blinking-text settings change, or when a text blink has just occurred. 
Name: term_schedule_cblink; Comment: Likewise with cursor blinks. 
Name: term_reset_cblink; Comment: Call to reset cursor blinking on new output. 
Name: term_schedule_vbell; Comment: Call to begin a visual bell. 
Name: power_on; Comment: Set up power-on settings for the terminal. If 'clear' is false, don't actually clear the primary screen, and position the cursor below the last non-blank line (scrolling if necessary). 
Name: term_update; Comment: Force a screen update. 
Name: term_seen_key_event; Comment: Called from front end when a keypress occurs, to trigger anything magical that needs to happen in that situation. 
Name: term_pwron; Comment: Same as power_on(), but an external function. 
Name: term_copy_stuff_from_conf; Comment: We copy a bunch of stuff out of the Conf structure into local fields in the Terminal structure, to avoid the repeated tree234 lookups which would be involved in fetching them from the former every time. 
Name: term_reconfig; Comment: When the user reconfigures us, we need to check the forbidden- alternate-screen config option, disable raw mouse mode if the user has disabled mouse reporting, and abandon a print job if the user has disabled printing. 
Name: term_clrsb; Comment: Clear the scrollback. 
Name: term_init; Comment: Initialise the terminal. 
Name: term_size; Comment: Set up the terminal for a given size. 
Name: term_provide_resize_fn; Comment: Hand a function and context pointer to the terminal which it can use to notify a back end of resizes. 
Name: find_last_nonempty_line; Comment: Find the bottom line on the screen that has any content.If only the top line has content, returns 0. If no lines have content, return -1. 
Name: swap_screen; Comment: Swap screens. If `reset' is TRUE and we have been asked to switch to the alternate screen, we must bring most of its configuration from the main screen and erase the contents of the alternate screen completely. (This is even true if we're already on it! Blame xterm.) 
Name: update_sbar; Comment: Update the scroll bar. 
Name: check_selection; Comment: Check whether the region bounded by the two pointers intersects the scroll region, and de-select the on-screen selection if so. 
Name: scroll; Comment: Scroll the screen. (`lines' is +ve for scrolling forward, -ve for backward.) `sb' is TRUE if the scrolling is permitted to affect the scrollback buffer. 
Name: save_scroll; Comment: Add a scroll of a region on the screen into the pending scroll list. `lines' is +ve for scrolling forward, -ve for backward. If the scroll is on the same area as the last scroll in the list, merge them. 
Name: scroll_display; Comment: Scroll the physical display, and our conception of it in disptext. 
Name: move; Comment: Move the cursor to a given position, clipping at boundaries. We may or may not want to clip at the scroll margin: marg_clip is 0 not to, 1 to disallow _passing_ the margins, and 2 to disallow even _being_ outside the margins. 
Name: save_cursor; Comment: Save or restore the cursor and SGR mode. 
Name: check_boundary; Comment: This function is called before doing _anything_ which affects only part of a line of text. It is used to mark the boundary between two character positions, and it indicates that some sort of effect is going to happen on only one side of that boundary. The effect of this function is to check whether a CJK double-width character is straddling the boundary, and to remove it and replace it with two spaces if so. (Of course, one or other of those spaces is then likely to be replaced with something else again, as a result of whatever happens next.) Also, if the boundary is at the right-hand _edge_ of the screen, it implies something deliberate is being done to the rightmost column position; hence we must clear LATTR_WRAPPED2. The input to the function is the coordinates of the _second_ character of the pair. 
Name: erase_lots; Comment: Erase a large portion of the screen: the whole screen, or the whole line, or parts thereof. 
Name: insch; Comment: Insert or delete characters within the current line. n is +ve if insertion is desired, and -ve for deletion. 
Name: toggle_mode; Comment: Toggle terminal mode `mode' to state `state'. (`query' indicates whether the mode is a DEC private one or a normal one.) 
Name: do_osc; Comment: Process an OSC sequence: set window title or icon name. 
Name: term_print_setup; Comment: ANSI printing routines. 
Name: term_out; Comment: Remove everything currently in `inbuf' and stick it up on the in-memory display. There's a big state machine in here to process escape sequences... 
Name: term_bidi_cache_hit; Comment: To prevent having to run the reasonably tricky bidi algorithm too many times, we maintain a cache of the last lineful of data fed to the algorithm on each line of the display. 
Name: term_bidi_line; Comment: Prepare the bidi information for a screen line. Returns the transformed list of termchars, or NULL if no transformation at all took place (because bidi is disabled). If return was non-NULL, auxiliary information such as the forward and reverse mappings of permutation position are available in term->post_bidi_cache[scr_y].*. 
Name: do_paint; Comment: Given a context, update the window. Out of paranoia, we don't allow WM_PAINT responses to do scrolling optimisations. 
Name: term_invalidate; Comment: Invalidate the whole screen so it will be repainted in full. 
Name: term_paint; Comment: Paint the window in response to a WM_PAINT message. 
Name: term_scroll; Comment: Attempt to scroll the scrollback. The second parameter gives the position we want to scroll to; the first is +1 to denote thatthis position is relative to the beginning of the scrollback, -1 to denote it is relative to the end, and 0 to denote that it is relative to the current position. 
Name: term_scroll_to_selection; Comment: Scroll the scrollback to centre it on the beginning or end of the current selection, if any. 
Name: wordtype; Comment: The wordness array is mainly for deciding the disposition of the US-ASCII characters. 
Name: sel_spread_half; Comment: Spread the selection outwards according to the selection mode. 
Name: term_data_untrusted; Comment: Write untrusted data to the terminal. The only control character that should be honoured is _n (which will behave as a CRLF). 
Name: term_get_ttymode; Comment: Provide "auto" settings for remote tty modes, suitable for an application with a terminal window. 
Name: term_get_userpass_input; Comment: Process some terminal data in the course of username/password input. 
Name: run_timers; Comment: Call to run any timers whose time has reached the present. Returns the time (in ticks) expected until the next timer after that triggers. 
Name: expire_timer_context; Comment: Call to expire all timers associated with a given context. 
Name: newtree234; Comment: Create a 2-3-4 tree. 
Name: freenode234; Comment: Free a 2-3-4 tree (not including freeing the elements). 
Name: countnode234; Comment: Internal function to count a node. 
Name: count234; Comment: Count the elements in a tree. 
Name: add234_internal; Comment: Add an element e to a 2-3-4 tree t. Returns e on success, or if an existing element compares equal, returns that. 
Name: index234; Comment: Look up the element at a given numeric index in a 2-3-4 tree. Returns NULL if the index is out of range. 
Name: findrelpos234; Comment: Find an element e in a sorted 2-3-4 tree t. Returns NULL if not found. e is always passed as the first argument to cmp, so cmp can be an asymmetric function if desired. cmp can also be passed as NULL, in which case the compare function from the tree proper will be used. 
Name: delpos234_internal; Comment: Delete an element e in a 2-3-4 tree. Does not free the element, merely removes all links to it from the tree nodes. 
Name: error; Comment: Error reporting function. 
Name: randomnumber; Comment: Nonechange it if not. 
Name: bisearch; Comment: auxiliary function for binary search in interval table 
Name: mk_wcwidth; Comment: The following two functions define the column width of an ISO 10646 character as follows: - The null character (U+0000) has a column width of 0. - Other C0C1 control characters and DEL will lead to a return value of -1. - Non-spacing and enclosing combining characters (general category code Mn or Me in the Unicode database) have a column width of 0. - SOFT HYPHEN (U+00AD) has a column width of 1. - Other format characters (general category code Cf in the Unicode database) and ZERO WIDTH SPACE (U+200B) have a column width of 0. - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF) have a column width of 0. - Spacing characters in the East Asian Wide (W) or East Asian Full-width (F) category as defined in Unicode Technical Report #11 have a column width of 2. - All remaining characters (including all printable ISO 8859-1 and WGL4 characters, Unicode control characters, etc.) have a column width of 1. This implementation assumes that wchar_t characters are encoded in ISO 10646. 
Name: mk_wcwidth_cjk; Comment: The following functions are the same as mk_wcwidth() and mk_wcswidth(), except that spacing characters in the East Asian Ambiguous (A) category as defined in Unicode Technical Report #11have a column width of 2. This variant might be useful for users of CJK legacy encodings who want to migrate to UCS without changing the traditional terminal character-width behaviour. It is not otherwise recommended for general use. 
Name: wc_error; Comment: Error reporting is done by returning various negative values from the wildcard routines. Passing any such value to wc_error will give a human-readable message. 
Name: wc_match_fragment; Comment: This is the routine that tests a target string to see if an initial substring of it matches a fragment. If successful, it returns 1, and advances both `fragment' and `target' past the fragment and matching substring respectively. If unsuccessful it returns zero. If the wildcard fragment suffers a syntax error, it returns <0 and the precise value indexes into wc_error. 
Name: wc_match; Comment: This is the real wildcard matching routine. It returns 1 for a successful match, 0 for an unsuccessful match, and <0 for a syntax error in the wildcard. 
Name: wc_unescape; Comment: Another utility routine that translates a non-wildcard string into its raw equivalent by removing any escaping backslashes. Expects a target string buffer of anything up to the length of the original wildcard. You can also pass NULL as the output buffer if you're only interested in the return value. Returns 1 on success, or 0 if a wildcard character was encountered. In the latter case the output string MAY not be zero-terminated and you should not use it for anything! 
Name: x11_verify; Comment: 20 minute clock skew should be OK 
Name: x11_get_screen_number; Comment: When setting up X forwarding, we should send the screen number from the specified local display. This function extracts it from the display string. 
Name: x11_init; Comment: Called to set up the X11Connection structure, though this does not yet connect to an actual server. 
Name: x11_send; Comment: Called to send data down the raw connection. 
Name: x11_identify_auth_proto; Comment: Utility functions used by connection sharing to convert textual representations of an X11 auth protocol name + hex cookie into our usual integer protocol id and binary auth data. 
Name: x11_make_greeting; Comment: Construct an X11 greeting packet, including making up the right authorisation data. 
Name: read_sbcs; Comment: The charset_spec for any single-byte character set should provide read_sbcs() as its read function, and its `data' field should be a wchar_t string constant containing the 256 entries of the translation table. 
Name: read_utf8; Comment: UTF-8 has no associated data, so `charset' may be ignored. 
Name: write_utf8; Comment: UTF-8 is a stateless multi-byte encoding (in the sense that just after any character has been completed, the state is always the same); hence when writing it, there is no need to use thecharset_state. 
Name: main; Comment: This front end only works in GTK 3. If that's not what we've got,it's easier to just turn this program into a trivial stub by ifdef in the source than it is to remove it in the makefile edifice. 
Name: columns_map; Comment: These appear to be thoroughly tedious functions; the only reasonwe have to reimplement them at all is because we defined our own format for our GList of children... 
Name: columns_focus; Comment: Override GtkContainer's focus movement so the user can explicitly specify the tab order. 
Name: post_main; Comment: Replacement code for the gtk_quit_add() function, which GTK2 - in their unbounded wisdom - deprecated without providing any usable replacement, and which we were using to ensure that our idle function for toplevel callbacks was only run from the outermost gtk_main(). We must make sure that all our subsidiary calls to gtk_main() are followed by a call to post_main(), so that the idle function can be re-established when we end up back at the top level. 
Name: gtkcomm_setup; Comment: ----------------------------------------------------------------------Setup function. The real main program must call this. 
Name: dlg_listbox_clear; Comment: The `listbox' functions can also apply to combo boxes. 
Name: dlg_listbox_addwithid; Comment: Each listbox entry may have a numeric id associated with it. Note that some front ends only permit a string to be stored at each position, which means that _if_ you put two identical strings in any listbox then you MUST not assign them different IDs and expect to get meaningful results back. 
Name: dlg_listbox_index; Comment: dlg_listbox_index returns <0 if no single element is selected. 
Name: dlg_update_start; Comment: Bracketing a large set of updates in these two functions will cause the front end (if possible) to delay updating the screen until it's all complete, thus avoiding flicker. 
Name: dlg_beep; Comment: During event processing, you might well want to give an error indication to the user. dlg_beep() is a quick and easy generic error; dlg_error() puts up a message-box or equivalent. 
Name: dlg_end; Comment: This function signals to the front end that the dialog's processing is completed, and passes an integer value (typically a success status). 
Name: widget_focus; Comment: ----------------------------------------------------------------------Signal handlers while the dialog box is active. 
Name: listitem_key; Comment: GTK 1 list box event handlers. 
Name: listbox_doubleclick; Comment: GTK 2 list box event handlers. 
Name: layout_ctrls; Comment: ---------------------------------------------------------------------- This function does the main layout work: it reads a controlset, it creates the relevant GTK controls, and returns a GtkWidget containing the result. (This widget might be a title of some sort, it might be a Columns containing many controls, or it might be a GtkFrame containing a Columns; whatever it is, it'sdefinitely a GtkWidget and should probably be added to a GtkVbox.) `win' is required for setting the default button. If it is non-NULL, all buttons created will be default-capable (so they have extra space round them for the default highlight). 
Name: askalg; Comment: Ask whether the selected algorithm is acceptable (since it was below the configured 'warn' threshold). 
Name: pangofont_check_desc_makes_sense; Comment: This function is used to rigorously validate a PangoFontDescription. Later versions of Pango have a nasty habit of accepting _any_ old string as input to pango_font_description_from_string and returning a font description which can actually be used to display text, even if they have to do it by falling back to their most default font. This is doubtless helpful in some situations, but not here, because we need to know if a Pango font string actually _makes sense_ in order to fall back to treating it as an X font name if it doesn't. So we check that the font family is actually one supported by Pango. 
Name: unifont_do_prefix; Comment: Function which takes a font name and processes the optional scheme prefix. Returns the tail of the font name suitable for passing to individual font scheme functions, and also provides a subrange of the unifont_types[] array above. The return values `start' and `end' denote a half-open interval in unifont_types[]; that is, the correct way to iterate over them is for (i = start; i < end; i++) {...} 
Name: our_dialog_new; Comment: ---------------------------------------------------------------------- Functions to arrange controls in a basically dialog-like window. The best method for doing this has varied wildly with versions of GTK, hence the set of wrapper functions here. In GTK 1, a GtkDialog has an 'action_area' at the bottom, which is a GtkHBox which stretches to cover the full width of the dialog. So we can either add buttons or other widgets to that box directly, or alternatively we can fill the hbox with some layout class of our own such as a Columns widget. In GTK 2, the action area has become a GtkHButtonBox, and its layout behaviour seems to be different and not what we want. So instead we abandon the dialog's action area completely: we gtk_widget_hide() it in the below code, and we also call gtk_dialog_set_has_separator() to remove the separator above it. We then insert our own action area into the end of the dialog's main vbox, and add our own separator above that. In GTK 3, we typically don't even want to use GtkDialog at all, because GTK 3 has become a lot more restrictive about what you can sensibly use GtkDialog for - it deprecates direct access to the action area in favour of making you provide nothing but dialog-ending buttons in the form of (text, response code) pairs, so you can't put any other kind of control in there, or fiddle with alignment and positioning, or even have a button that _doesn't_ end the dialog (e.g. 'View Licence' in our About box). So instead of GtkDialog, we use a straight-up GtkWindow and have it contain a vbox as its (unique) child widget; and we implement the action areaby adding a separator and another widget at the bottom of that vbox. 
Name: platform_default_fontspec; Comment: Default settings that are specific to pterm. 
Name: frontend_echoedit_update; Comment: Dummy routine, only required in plink. 
Name: translate_button; Comment: Translate a raw mouse button designation (LEFT, MIDDLE, RIGHT) into a cooked one (SELECT, EXTEND, PASTE). In Unix, this is not configurable; the X button arrangement isrock-solid across all applications, everyone has a three-button mouse or a means of faking it, and there is no need to switch buttons around at all. 
Name: get_window; Comment: Return the top-level GtkWindow associated with a particular front end instance. 
Name: set_iconic; Comment: Minimise or restore the window in response to a server-side request. 
Name: move_window; Comment: Move the window in response to a server-side request. 
Name: set_zorder; Comment: Move the window to the top or bottom of the z-order in response to a server-side request. 
Name: refresh_window; Comment: Refresh the window in response to a server-side request. 
Name: set_zoomed; Comment: Maximise or restore the window in response to a server-side request. 
Name: is_iconic; Comment: Report whether the window is iconic, for terminal reports. 
Name: get_window_pos; Comment: Report the window's position, for terminal reports. 
Name: get_window_pixels; Comment: Report the window's pixel size, for terminal reports. 
Name: get_window_title; Comment: Return the window or icon title. 
Name: main; Comment: When we're not compiling for OS X, it's easier to just turn thisprogram into a trivial hello-world by ifdef in the source than it is to remove it in the makefile edifice. 
Name: char_index; Comment: This linked-list based system is a bit overkill, but I enjoy an algorithmic challenge. We essentially do an incremental radix sort of all the existing environment variable names: initially divide them into 26 buckets by their first letter (discarding those that don't have a letter at that position), then subdivide each bucket in turn into 26 sub-buckets, and so on. We maintain each bucket as a linked list, and link their heads together into a secondary list that functions as a queue (meaning that we go breadth-first, processing all the buckets of a given depth before moving on to the next depth down). At any stage, if we find one of our 26 sub-buckets is empty, that's our unused prefix. The running time is O(number of stringslength of output), and I doubt it's possible to do better. 
Name: get_program_path; Comment: There are several ways to try to retrieve the pathname to the running executable: (a) Declare main() as taking four arguments int main(int argc, char argv, char envp, char apple); and look at apple[0]. (b) Use sysctl(KERN_PROCARGS) to get the process arguments for the current pid. This involves two steps: - sysctl(mib, 2, &argmax, &argmax_size, NULL, 0) + mib is an array[2] of int containing { CTL_KERN, KERN_ARGMAX } + argmax is an int + argmax_size is a size_t initialised to sizeof(argmax) + returns in argmax the amount of memory you need for the next call. - sysctl(mib, 3, procargs, &procargs_size, NULL, 0) + mib is an array[3] of int containing { CTL_KERN, KERN_PROCARGS, current pid } + procargs is a buffer of size 'argmax' + procargs_size is a size_t initialised to argmax + returns in the procargs buffer a collection of zero-terminated strings of which the first is the program name. (c) Call _NSGetExecutablePath, once to find out the needed buffer size and again to fetch the actual path. (d) Use Objective-C and Cocoa and call [[[NSProcessInfo processInfo] arguments] objectAtIndex: 0]. So, how do those work in various cases? Experiments show: - if you run the program as 'binary' (or whatever you called it) and rely on the shell to search your PATH, all four methods return a sensible-looking absolute pathname. - if you run the program as './binary', (a) and (b) return just "./binary", which has a particularly bad race condition if you try to convert it into an absolute pathname using realpath(3). (c) returns "/full/path/to/./binary", which still needs realpath(3)ing to get rid of that ".", but at least it's _trying_ to be fully qualified. (d) returns "/full/path/to/binary" - full marks! + Similar applies if you run it via a more interesting relative path such as one with a ".." in: (c) gives you an absolute path containing a ".." element, whereas (d) has sorted that out. - if you run the program via a path with a symlink on, _none_ of these options successfully returns a path without the symlink. That last point suggests that even (d) is not a perfect solution on its own, and you'll have to realpath() whatever you get back from it regardless. And (d) is extra inconvenient because it returns an NSString, which is implicitly Unicode, so it's not clear how you turn that back into a charrepresenting a correct Unix pathname (what charset should you interpret it in?). Also because you have to bring in all of ObjC and Cocoa, which for a low-level Unix API client like this seems like overkill. So my conclusion is that (c) is most practical for these purposes. 
Name: dirname_wrapper; Comment: ----------------------------------------------------------------------Wrapper on dirname(3) which mallocs its return value to whatever size is needed. 
Name: alloc_cat; Comment: ----------------------------------------------------------------------mallocing string concatenation function. 
Name: main; Comment: ----------------------------------------------------------------------Main program. 
Name: agent_try_read; Comment: Attempt to read from an agent socket fd. Returns 0 if the expected response is as yet incomplete; returns 1 if it's either complete(conn->retbuf non-NULL and filled with something useful) or has failed totally (conn->retbuf is NULL). 
Name: cleanup_exit; Comment: Clean up and exit. 
Name: block_and_read; Comment: Wrapper around Unix read(2), suitable for use on a file descriptor that's been set into nonblocking mode. Handles EAGAINEWOULDBLOCK by means of doing a one-fd select and then trying again; all othererrors (including errors from select) are returned to the caller. 
Name: askappend; Comment: Ask whether to wipe a session log file before writing to it. Returns 2 for wipe, 1 for append, 0 for cancel (don't log). 
Name: old_keyfile_warning; Comment: Warn about the obsolescent key file format. Uniquely among these functions, this one does _not_ expect a frontend handle. This means that if PuTTY is ported to a platform which requires frontend handles, this function will be an anomaly. Fortunately, the problem it addresses will not have been present on that platform, so it can plausibly be implemented as an empty function. 
Name: console_open; Comment: Special functions to read and print to the console for password prompts and the like. Uses devtty or stdinstderr, in that order of preference; also sanitises escape sequences out of the text, onthe basis that it might have been sent by a hostile SSH server doing malicious keyboard-interactive. 
Name: platform_get_x_display; Comment: X11-forwarding-related things suitable for console. 
Name: gss_init; Comment: Run-time binding against a choice of GSSAPI implementations. We try loading several libraries, and produce an entry in ssh_gss_libraries[] for each one. 
Name: ssh_gss_setup; Comment: Dynamically load gssapi libs. 
Name: pgp_fingerprints; Comment: Display the fingerprints of the PGP Master Keys to the user. (This is here rather than in uxcons because it's appropriate even for Unix GUI apps.) 
Name: cloexec; Comment: Set and clear fcntl options on a file descriptor. We don't realistically expect any of these operations to fail (the most plausible error condition is EBADF, but we always believe ourselves to be passing a valid fd so even that's an assertion-fail sort of response), so we don't make any effort to return sensible error codes to the caller - we just log to standard error and die unceremoniously. However, nonblock and no_nonblock do return the previous state of O_NONBLOCK. 
Name: sk_extractaddr_tmp; Comment: This constructs a SockAddr that points at one specific sub-address of a parent SockAddr. The returned SockAddr does not own all its own memory: it points into the old one's data structures, so it MUST NOT be used after the old one is freed, and it MUST NOT be passed to sk_addr_free. (The latter is why it's returned by value rather than dynamically allocated - that should clue in anyone writing a call to it that something is weird about it.) 
Name: socket_error_callback; Comment: Deal with socket errors detected in try_send(). 
Name: try_send; Comment: The function which tries to send on a socket once it's deemed writable. 
Name: sk_addr_error; Comment: Special error values are returned from sk_namelookup and sk_new if there's a problem. These functions extract an error message, or return NULL if there's no problem. 
Name: buildinfo_gtk_version; Comment: uxnogtk.c: link into non-GUI Unix programs so that they can tell buildinfo about a lack of GTK. 
Name: noise_get_heavy; Comment: This function is called once, at PuTTY startup. It will do some slightly silly things such as fetching an entire process listing and scanning /tmp, load the saved random seed from disk, and also read 32 bytes out of /dev/urandom. 
Name: noise_get_light; Comment: This function is called every time the random pool needs stirring, and will acquire the system time. 
Name: noise_regular; Comment: This function is called on a timer, and grabs as much changeable system data as it can quickly get its hands on. 
Name: noise_ultralight; Comment: This function is called on every keypress or mouse move, and will add the current time to the noise pool. It gets the scan code or mouse position passed in, and adds that too. 
Name: x11_closing; Comment: These functions are part of the plug for our connection to the X display, so they do get called. They needn't actually do anything, except that x11_closing has to signal back to the main loop that it's time to terminate. 
Name: get_ttychar; Comment: Helper function to extract a special character from a termios. 
Name: from_tty; Comment: Handle data from a local tty in PARMRK format. 
Name: printer_start_enum; Comment: There's no sensible way to enumerate printers under Unix, since practically any valid Unix command is a valid printer :-) So these are useless stub functions, and uxcfg.c will disable the drop-down list in the printer configurer. 
Name: sk_localproxy_plug; Comment: basic proxy socket functions 
Name: pty_compare_by_fd; Comment: We store our pty backends in a tree sorted by master fd, so that when we get an uxsel notification we know which backend instance is the owner of the pty that caused it. 
Name: pty_compare_by_pid; Comment: We also have a tree sorted by child pid, so that when we wait() in response to the signal we know which backend instance is the owner of the process that caused the signal. 
Name: pty_pre_init; Comment: Pre-initialisation. This is here to get around the fact that GTK doesn't like being run in setuidsetgid programs (probably sensibly). So before we initialise GTK - and therefore before we even process the command line - we check to see if we're running set[ug]id. If so, we open our pty master _now_, chown it as necessary, and drop privileges. We can always close it again later. If we're potentially going to be doing utmp as well, we also fork off a utmp helper process and communicate with it by means of a pipe; the utmp helper will keep privileges in orderto clean up utmp when we exit (i.e. when its end of our pipe closes). 
Name: pty_init; Comment: Called to set up the pty. Returns an error message, or NULL on success. Also places the canonical host name into `realhost'. It must be freed by the caller. 
Name: pty_free; Comment: Stub routine (never called in pterm). 
Name: pty_send; Comment: Called to send data down the pty. 
Name: pty_sendbuffer; Comment: Called to query the current socket sendability status. 
Name: pty_size; Comment: Called to set the size of the window 
Name: pty_special; Comment: Send special codes. 
Name: pty_get_specials; Comment: Return a list of the special codes that make sense in this protocol. 
Name: platform_get_x_display; Comment: X11-forwarding-related things suitable for Gtk app. 
Name: uxsel_set; Comment: Here is the interface to fd-supplying modules. They supply an fd, a set of read/write/execute states, and a callback function for when the fd satisfies one of those states. Repeated calls to uxsel_set on the same fd are perfectly legal and serve to change the rwx state (typically you only want to select an fd for writing when you actually have pending data you want to write to it!). 
Name: next_fd; Comment: And here is the interface to select-functionality-supplying modules. 
Name: serial_compare_by_fd; Comment: We store our serial backends in a tree sorted by fd, so that when we get an uxsel notification we know which backend instance is the owner of the serial port that caused it. 
Name: serial_init; Comment: Called to set up the serial connection. Returns an error message, or NULL on success. Also places the canonical host name into `realhost'. It must be freed by the caller. 
Name: serial_send; Comment: Called to send data down the serial connection. 
Name: serial_sendbuffer; Comment: Called to query the current sendability status. 
Name: serial_size; Comment: Called to set the size of the window 
Name: serial_special; Comment: Send serial special codes. 
Name: serial_get_specials; Comment: Return a list of the special codes that make sense in this protocol. 
Name: serial_cfg_info; Comment: cfg_info for Serial does nothing at all. 
Name: x_get_default; Comment: In PSFTP our selects are synchronous, so these functions are empty stubs. 
Name: platform_default_s; Comment: Default settings that are specific to PSFTP. 
Name: psftp_lcd; Comment: Set local current directory. Returns NULL on success, or else an error message which must be freed after printing. 
Name: psftp_getcwd; Comment: Get local current directory. Returns a string which must be freed. 
Name: close_wfile; Comment: Closes and frees the WFile 
Name: seek_file; Comment: Seek offset bytes through file, from whence, where whence is FROM_START, FROM_CURRENT, or FROM_END 
Name: ssh_sftp_do_select; Comment: Do a select() between all currently active network fds and optionally stdin. 
Name: ssh_sftp_loop_iteration; Comment: Wait for some network data and process it. 
Name: ssh_sftp_get_cmdline; Comment: Read a PSFTP command line from stdin. 
Name: main; Comment: Main program: do platform-specific initialisation and then call psftp_main(). 
Name: void; Comment: Calling signal() is non-portable, as it varies in meaning between platforms and depending on feature macros, and has stupid semantics at least some of the time. This function provides the same interface as the libc function, but provides consistent semantics. It assumes POSIX semantics for sigaction() (so you might need to do some more work if you port to something ancient like SunOS 4) 
Name: verify_host_key; Comment: Lines in the host keys file are of the form type@port:hostname keydata e.g. rsa@22:foovax.example.org 0x23,0x293487364395345345....2343 
Name: is_dbcs_leadbyte; Comment: Unix Unicode-handling routines. 
Name: init_ucs; Comment: Return value is TRUE if pterm is to run in direct-to-font mode. 
Name: pgp_fingerprints; Comment: Display the fingerprints of the PGP Master Keys to the user. 
Name: bartitle; Comment: A title bar across the top of a sub-dialog. 
Name: beginbox; Comment: Begin a grouping box, with or without a group title. 
Name: endbox; Comment: End a grouping box. 
Name: editboxfw; Comment: A static line, followed by a full-width edit box. 
Name: combobox; Comment: A static line, followed by a full-width combo box. 
Name: radioline; Comment: A set of radio buttons on the same line, with a static above them. `nacross' dictates how many parts the line is divided into (you might want this not to equal the number of buttons if you needed to line up some 2s and some 3s to look good in the same panel). There's a bit of a hack in here to ensure that if nacross exceeds the actual number of buttons, the rightmost button really does get all the space right to the edge of the line, so you can do things like (*) Button1 (*) Button2 (*) ButtonWithReallyLongTitle 
Name: bareradioline; Comment: A set of radio buttons on the same line, without a static above them. Otherwise just like radioline. 
Name: radiobig; Comment: A set of radio buttons on multiple lines, with a static above them. 
Name: checkbox; Comment: A single standalone checkbox. 
Name: staticwrap; Comment: Wrap a piece of text for a static text control. Returns the wrapped text (a malloc'ed string containing _ns), and also returns the number of lines required. 
Name: statictext; Comment: A single standalone static text control. 
Name: paneltitle; Comment: An owner-drawn static text control for a panel title. 
Name: staticbtn; Comment: A button on the right hand side, with a static to its left. 
Name: button; Comment: A simple push button. 
Name: static2btn; Comment: Like staticbtn, but two buttons. 
Name: staticedit_internal; Comment: An edit control on the right hand side, with a static to its left. 
Name: staticddl; Comment: A drop-down list box on the right hand side, with a static to its left. 
Name: staticcombo; Comment: A combo box on the right hand side, with a static to its left. 
Name: staticddlbig; Comment: A static, with a full-width drop-down list box below it. 
Name: bigeditctrl; Comment: A big multiline edit control with a static labelling it. 
Name: listbox; Comment: A list box with a static labelling it. 
Name: ersatztab; Comment: A tab-control substitute when a real tab control is unavailable. 
Name: editbutton; Comment: A static line, followed by an edit control on the left hand side and a button on the right. 
Name: prefslist; Comment: A special control for manipulating an ordered preference list (eg. for cipher selection). XXX: this is a rough hack and could be improved. 
Name: pl_moveitem; Comment: Helper function for prefslist: move item in list box. 
Name: handle_prefslist; Comment: Handler for prefslist above. Return value has bit 0 set if the dialog box procedure needs to return TRUE from handling this message; it has bit 1 set if achange may have been made in the contents of the list. 
Name: progressbar; Comment: A progress bar (from Common Controls). We like our progress bars to be smooth and unbroken, without those ugly divisions; someolder compilers may not support that, but that's life. 
Name: shortcut_escape; Comment: This function takes a string, escapes all the ampersands, and places a single (unescaped) ampersand in front of the first occurrence of the given shortcut character (which may be NO_SHORTCUT). Return value is a malloc'ed copy of the processed version of the string. 
Name: winctrl_handle_command; Comment: The dialog-box procedure calls this function to handle Windows messages on a control we manage. 
Name: winctrl_context_help; Comment: This function can be called to produce context help on a control. Returns TRUE if it has actually launched some help. 
Name: dlg_findbyctrl; Comment: Now the various functions that the platform-independent mechanism can call to access the dialog box entries. 
Name: platform_default_fontspec; Comment: windefs.c: default settings that are specific to Windows. 
Name: force_normal; Comment: defined in window.c 
Name: NullDlgProc; Comment: Null dialog procedure. 
Name: create_controls; Comment: Create the panelfuls of controls in the configuration box. 
Name: GenericMainDlgProc; Comment: This function is the configuration box. (Being a dialog procedure, in general it returns 0 if the default dialog processing should be performed, and 1 if it should not.) 
Name: do_select; Comment: Set up, or shut down, an AsyncSelect. Called from winnet.c. 
Name: update_savedsess_menu; Comment: Refresh the saved-session submenu from `sesslist'. 
Name: update_specials_menu; Comment: Update the Special Commands submenu. 
Name: set_raw_mouse_mode; Comment: set or clear the "raw mouse message" mode 
Name: connection_fatal; Comment: Print a message box and close the connection. 
Name: cmdline_error; Comment: Report an error at the command-line parsing stage. 
Name: wm_netevent_callback; Comment: Actually do the job requested by a WM_NETEVENT 
Name: conftopalette; Comment: Copy the colour palette from the configuration data into defpal. This is non-trivial because the colour indices are different. 
Name: systopalette; Comment: Override bit of defpal with colours from the system. (NB that this takes a copy the system colours at the time this is called, so subsequent colour scheme changes don't take effect. To fix that we'd probably want to be using GetSysColorBrush() and the like.) 
Name: init_palette; Comment: Set up the colour palette. 
Name: exact_textout; Comment: This is a wrapper to ExtTextOut() to force Windows to display the precise glyphs we give it. Otherwise it would do its own bidi and Arabic shaping, and we would end up uncertain which characters it had put where. 
Name: general_textout; Comment: The exact_textout() wrapper, unfortunately, destroys the useful Windows `font linking' behaviour: automatic handling of Unicode code points not supported in this font by falling back to a font which does contain them. Therefore, we adopt a multi-layered approach: for any potentially-bidi text, we use exact_textout(), and for everything else we use a simple ExtTextOut as we did before exact_textout() was introduced. 
Name: init_fonts; Comment: Initialise all the fonts we will need initially. There may be as many as three or as few as one. The other (potentially) twenty-one fonts are done if/when they are needed. We also: - check the font width and height, correcting our guesses if necessary. - verify that the bold font is the same width as the ordinary one, and engage shadow bolding if not. - verify that the underlined font is the same width as the ordinary one (manual underlining by means of line drawing can be done in a pinch). 
Name: translate_button; Comment: Translate a raw mouse button designation (LEFT, MIDDLE, RIGHT) into a cooked one (SELECT, EXTEND, PASTE). 
Name: sys_cursor; Comment: Move the system caret. (We maintain one, even though it's invisible, for the benefit of blind people: apparently some helper software tracks the system caret, so we should arrange to have one.) 
Name: do_text_internal; Comment: Draw a line of text in the window, at given character coordinates, in given attributes. We are allowed to fiddle with the contents of `text'. 
Name: do_text; Comment: Wrapper that handles combining characters. 
Name: char_width; Comment: This function gets the actual width of a character in the normal font. 
Name: TranslateKey; Comment: Translate a WM_(SYS)?KEY(UP|DOWN) message into a string of ASCII codes. Returns number of bytes used, zero to drop the message, -1 to forward the message to Windows, or another negative number to indicate a NUL-terminated "special" string. 
Name: ssh_gss_init; Comment: Dummy function so this source file defines something if NO_GSSAPI is defined. 
Name: handle_input_threadfunc; Comment: The actual thread procedure for an input thread. 
Name: handle_throttle; Comment: This is called after a succcessful read, or from the `unthrottle' function. It decides whether or not to begin a new read operation. 
Name: make_shell_link; Comment: Function to make an IShellLink describing a particular PuTTY command. If 'appname' is null, the command run will be the one returned by GetModuleFileName, i.e. our own executable; if it'snon-null then it will be assumed to be a filename in the same directory as our own executable, and the return value will be NULL if that file doesn't exist. If 'sessionname' is null then no command line will be passed to the program. If it's non-null, the command line will be that text prefixed with an @ (to load a PuTTY saved session). Hence, you can launch a saved session using make_shell_link(NULL, sessionname), and launch another app using e.g. make_shell_link("puttygen.exe", NULL). 
Name: update_jumplist_from_registry; Comment: Updates jumplist from registry. 
Name: clear_jumplist; Comment: Clears the entire jumplist. 
Name: add_session_to_jumplist; Comment: Adds a saved session to the Windows 7 jumplist. 
Name: remove_session_from_jumplist; Comment: Removes a saved session from the Windows jumplist. 
Name: set_explicit_app_user_model_id; Comment: Set Explicit App User Model Id to fix removable media error with jump lists 
Name: smemclr; Comment: Windows implementation of smemclr (see misc.c) using SecureZeroMemory. 
Name: minefield_c_realloc; Comment: realloc _always_ moves the chunk, for rapid detection of code that assumes it won't. 
Name: ipv4_is_local_addr; Comment: 0=not yet, -1=failed, >0=number 
Name: first_socket; Comment: For Plink: enumerate all sockets currently active. 
Name: noise_get_heavy; Comment: This function is called once, at PuTTY startup. 
Name: noise_get_light; Comment: This function is called every time the random pool needs stirring, and will acquire the system time in all available forms. 
Name: noise_regular; Comment: This function is called on a timer, and it will monitor frequently changing quantities such as the state of physical and virtual memory, the state of the process's message queue, which window is in the foreground, which owns the clipboard, etc. 
Name: noise_ultralight; Comment: This function is called on every keypress or mouse move, and will add the current Windows time and performance monitor counter to the noise pool. It gets the scan code or mouse position passed in. 
Name: modalfatalbox; Comment: Print a modal (Really Bad) message box and perform a fatal exit. 
Name: nonfatal; Comment: Print a non-fatal message box and do not exit. 
Name: PassphraseProc; Comment: Dialog-box function for the passphrase box. 
Name: prompt_keyfile; Comment: Prompt for a key file. Assumes the filename buffer is of size FILENAME_MAX. 
Name: LicenceProc; Comment: Dialog-box function for the Licence box. 
Name: AboutProc; Comment: Dialog-box function for the About box. 
Name: old_keyfile_warning; Comment: Warn about the obsolescent key file format. 
Name: ui_set_state; Comment: Small UI helper function to switch the state of the main dialog by enabling and disabling controls and menu items. 
Name: ui_update_key_type_ctrls; Comment: Helper functions to set the key type, taking care of keeping the menu and radio button selections in sync and also showing/hiding the appropriate size/curve control for the current key type. 
Name: MainDlgProc; Comment: Dialog-box function for the main PuTTYgen dialog box. 
Name: unmungestr; Comment: Un-munge session names out of the registry. 
Name: keylist_update; Comment: Update the visible key list. 
Name: prompt_add_keyfile; Comment: Prompt for a key file to add, and add it. 
Name: KeyListProc; Comment: Dialog-box function for the key list box. 
Name: AddTrayIcon; Comment: Set up a system tray icon 
Name: update_sessions; Comment: Update the saved-sessions menu. 
Name: get_default_sid; Comment: Versions of Pageant prior to 0.61 expected this SID on incoming communications. For backwards compatibility, and more particularly for compatibility with derived works of PuTTY still using the old Pageant client code, we accept it as an alternative to the one returned from get_user_sid() in winpgntc.c. 
Name: spawn_cmd; Comment: Fork and Exec the command in cmdline. [DBW] 
Name: agent_schedule_callback; Comment: This is a can't-happen stub, since Pageant never makes asynchronous agent requests. 
Name: agent_exists; Comment: random goop 
Name: restrict_process_acl; Comment: Nonecovers the rest of this file, because when PuTTY is compiled without the ability to restrict its ACL, we don't want it to silently pretend to honour the instruction to do so. 
Name: ssh_sftp_loop_iteration; Comment: Wait for some network data and process it. We have two variants of this function. One uses select() so that it's compatible with WinSock 1. The other uses WSAEventSelect and MsgWaitForMultipleObjects, so that we can consistently use WSAEventSelect throughout; this enables us to also implementssh_sftp_get_cmdline() using a parallel mechanism. 
Name: main; Comment: ----------------------------------------------------------------------Main program. Parse arguments etc. 
Name: ; Comment: Internal function supporting the jump list registry code. All the functions to add, remove and read the list have substantially similar content, so this is a generalisation of all of them which transforms the list in the registry by prepending 'add' (if non-null), removing 'rem' from what's left (if non-null), and returning the resulting concatenated list of strings in 'out' (if non-null). 
Name: add_to_jumplist_registry; Comment: Adds a new entry to the jumplist entries in the registry. 
Name: remove_from_jumplist_registry; Comment: Removes an item from the jumplist entries in the registry. 
Name: get_jumplist_registry_entries; Comment: Returns the jumplist entries from the registry. Caller must freethe returned pointer. 
Name: registry_recursive_remove; Comment: Recursively delete a registry key and everything under it. 
Name: cp_enumerate; Comment: Return the nth code page in the list, for use in the GUI configurer. 
Name: request_file; Comment: `of' is expected to be initialised with most interesting fields, but this function does some administrivia. (assume `of' was memset to 0) save==1 -> GetSaveFileName; save==0 -> GetOpenFileName`state' is optional. 
Name: message_box_help_callback; Comment: Callback function to launch context help. 
Name: GetDlgItemText_alloc; Comment: Handy wrapper around GetDlgItemText which doesn't make you invent an arbitrary length limit on the output string. Returned string is dynamically allocated; caller must free. 
Name: split_into_argv; Comment: Split a complete command line into argc/argv, attempting to do it exactly the same way the Visual Studio C library would do it (so that our console utilities, which receive argc and argv already broken apart by the C library, will have their command lines processed in the same way as the GUI utilities which get a whole command line and must call this function). Does not modify the input command line. The final parameter (argstart) is used to return a second array of charpointers, the same length as argv, each one pointing at the start of the corresponding element of argv in the original command line. So if you get half way through processing your command line in argc/argv form and then decide you want to treat the rest as a raw string, you can. If you don't want to, `argstart' can be safely left NULL. 
Name: _llseek; Comment: no __NR__llseek on compilation machine - might give it explicitly 
Name: do_poll; Comment: Returns -1 for error, 0 for nothing found, QS_IN_POLL or QS_OUT_POLL 
Name: read_capacity; Comment: Return of 0 -> success, -1 -> failure, 2 -> try again 
Name: normal_in_operation; Comment: 0 -> ok, 1 -> short read, -1 -> error 
Name: normal_out_operation; Comment: 0 -> ok, -1 -> error 
Name: sg_fin_in_operation; Comment: Returns 1 for retryable, 0 for ok, -ve for error 
Name: sg_fin_out_operation; Comment: Returns 1 for retryable, 0 for ok, -ve for error 
Name: sg_finish_io; Comment: -1 -> unrecoverable error, 0 -> successful, 1 -> try again 
Name: sg_prepare; Comment: Returns scsi_type or -1 for error 
Name: prepare_rq_elems; Comment: Return 0 for ok, anything else for errors 
Name: decider; Comment: Returns a "QS" code and req index, or QS_IDLE and position of first idle (-1 if no idle position). Returns -1 on poll error. 
Name: sg_read; Comment: Returns 0 if everything ok 
Name: sg_sat_decode_fixed_sense; Comment: Returns length of decoded fixed format sense for SAT ATA pass-throughcommand, else returns 0. If returns 0 (expected sense data not found) then '_0' placed in first byte of bp. 
Name: getopt_internal; Comment: getopt_internal -- *_Parse argc/argv argument vector. Called by user level routines. Returns -2 if -- is found (can be long option or end of options marker). 
Name: getopt_long; Comment: getopt_long -- *_Parse argc/argv argument vector. 
Name: sg_cmds_version; Comment: other lengths lock up some devices 
Name: sg_cmds_open_device; Comment: Returns file descriptor >= 0 if successful. If error in Unix returns negated errno. 
Name: sg_cmds_open_flags; Comment: Returns file descriptor >= 0 if successful. If error in Unix returns negated errno. 
Name: sg_cmds_close_device; Comment: Returns 0 if successful. If error in Unix returns negated errno. 
Name: sg_cmds_process_resp; Comment: This is a helper function used by sg_cmds_* implementations after the call to the pass-through. pt_res is returned from do_scsi_pt(). If valid sense data is found it is decoded and output to sg_warnings_strm (def: stderr); depending on the 'noisy' and 'verbose' settings. Returns -2 for "sense" category (may not be fatal), -1 for failed, 0, or a positive number. If 'mx_di_len > 0' then asks pass-through for resid and returns (mx_di_len - resid); otherwise returns 0. So for data-in it should returnthe actual number of bytes received. For data-out (to device) or no data call with 'mx_di_len' set to 0 or less. If -2 returned then sense category output via 'o_sense_cat' pointer (if not NULL). Note that several sense categories also have data in bytes received; -2 is still returned. 
Name: sg_ll_inquiry; Comment: Invokes a SCSI INQUIRY command and yields the response. Returns 0 whensuccessful, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_simple_inquiry; Comment: Yields most of first 36 bytes of a standard INQUIRY (evpd==0) response.Returns 0 when successful, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_test_unit_ready_progress; Comment: Noneif found writes value [0..65535] else write -1. Returns 0 when successful, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_test_unit_ready; Comment: Invokes a SCSI TEST UNIT READY command.'pack_id' is just for diagnostics, safe to set to 0. Returns 0 when successful, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_request_sense; Comment: Invokes a SCSI REQUEST SENSE command. Returns 0 when successful, variousSG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_report_luns; Comment: Invokes a SCSI REPORT LUNS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_sync_cache_10; Comment: Invokes a SCSI SYNCHRONIZE CACHE (10) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_readcap_16; Comment: Invokes a SCSI READ CAPACITY (16) command. Returns 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_readcap_10; Comment: Invokes a SCSI READ CAPACITY (10) command. Returns 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_mode_sense6; Comment: Invokes a SCSI MODE SENSE (6) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_mode_sense10; Comment: Invokes a SCSI MODE SENSE (10) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_mode_select6; Comment: Invokes a SCSI MODE SELECT (6) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_mode_select10; Comment: Invokes a SCSI MODE SELECT (10) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_mode_page_offset; Comment: MODE SENSE commands yield a response that has block descriptors followedby mode pages. In most cases users are interested in the first mode page. This function returns the (byte) offset of the start of the first mode page. Set mode_sense_6 to 1 for MODE SENSE (6) and 0 for MODE SENSE (10). Returns >= 0 is successful or -1 if failure. If there is a failure a message is written to err_buff if err_buff_len > 0. 
Name: sg_get_mode_page_controls; Comment: Fetches current, changeable, default and/or saveable modes pages as indicated by pcontrol_arr for given pg_code and sub_pg_code. If mode6==0 then use MODE SENSE (10) else use MODE SENSE (6). If flexible set and mode data length seems wrong then try and fix (compensating hack for bad device or driver). pcontrol_arr should have 4 elements for output of current, changeable, default and saved values respectively. Each element should be NULL or at least mx_mpage_len bytes long. Return of 0 -> overall success, various SG_LIB_CAT_ positive values or -1 -> other errors. If success_mask pointer is not NULL then first zeros it. Then set bits 0, 1, 2 andor 3 if the current, changeable, default and saved values respectively have been fetched. If error on current page then stops and returns that error; otherwise continues if an error isdetected but returns the first error encountered. 
Name: sg_ll_log_sense; Comment: Invokes a SCSI LOG SENSE command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_log_select; Comment: Invokes a SCSI LOG SELECT command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_start_stop_unit; Comment: Invokes a SCSI START STOP UNIT command (SBC + MMC).Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors. SBC-3 and MMC partially overlap on the power_condition_modifier(sbc) and format_layer_number(mmc) fields. They also overlap on the noflush(sbc) and fl(mmc) one bit field. This is the cause of the awkardly named pc_mod__fl_num and noflush__fl arguments to this function. 
Name: sg_ll_prevent_allow; Comment: Invokes a SCSI PREVENT ALLOW MEDIUM REMOVAL command[was in SPC-3 but displaced from SPC-4 into SBC-3, MMC-5, SSC-3] prevent==0 allows removal, prevent==1 prevents removal ... Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_get_lba_status; Comment: Invokes a SCSI GET LBA STATUS command (SBC). Returns 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_report_tgt_prt_grp2; Comment: Invokes a SCSI REPORT TARGET PORT GROUPS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_set_tgt_prt_grp; Comment: Invokes a SCSI SET TARGET PORT GROUPS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_report_referrals; Comment: Invokes a SCSI REPORT REFERRALS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_send_diag; Comment: Invokes a SCSI SEND DIAGNOSTIC command. Foreground, extended self tests can take a long time, if so set long_duration flag in which case the timout is set to 7200 seconds; if the value of long_duration is > 7200 then thatvalue is taken as the timeout value in seconds. Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_receive_diag; Comment: Invokes a SCSI RECEIVE DIAGNOSTIC RESULTS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_read_defect10; Comment: Invokes a SCSI READ DEFECT DATA (10) command (SBC). Return of 0 -> successvarious SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_read_media_serial_num; Comment: Invokes a SCSI READ MEDIA SERIAL NUMBER command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_report_id_info; Comment: Invokes a SCSI REPORT IDENTIFYING INFORMATION command. This command wascalled REPORT DEVICE IDENTIFIER prior to spc4r07. Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_set_id_info; Comment: Invokes a SCSI SET IDENTIFYING INFORMATION command. This command wascalled SET DEVICE IDENTIFIER prior to spc4r07. Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_format_unit; Comment: Invokes a FORMAT UNIT (SBC-3) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_format_unit2; Comment: Invokes a FORMAT UNIT (SBC-4) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors. FFMT field added in sbc4r10 [20160121] 
Name: sg_ll_reassign_blocks; Comment: Invokes a SCSI REASSIGN BLOCKS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_persistent_reserve_in; Comment: Invokes a SCSI PERSISTENT RESERVE IN command (SPC). Returns 0when successful, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_persistent_reserve_out; Comment: Invokes a SCSI PERSISTENT RESERVE OUT command (SPC). Returns 0when successful, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_read_long10; Comment: Invokes a SCSI READ LONG (10) command (SBC). Note that 'xfer_len'is in bytes. Returns 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_read_long16; Comment: Invokes a SCSI READ LONG (16) command (SBC). Note that 'xfer_len'is in bytes. Returns 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_write_long10; Comment: Invokes a SCSI WRITE LONG (10) command (SBC). Note that 'xfer_len'is in bytes. Returns 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_write_long16; Comment: Invokes a SCSI WRITE LONG (16) command (SBC). Note that 'xfer_len'is in bytes. Returns 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_verify10; Comment: Invokes a SCSI VERIFY (10) command (SBC and MMC).Note that 'veri_len' is in blocks while 'data_out_len' is in bytes. Returns of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_verify16; Comment: Invokes a SCSI VERIFY (16) command (SBC and MMC).Note that 'veri_len' is in blocks while 'data_out_len' is in bytes. Returns of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_ata_pt; Comment: Invokes a ATA PASS-THROUGH (12 or 16) SCSI command (SAT). If cdb_len is 12 then a ATA PASS-THROUGH (12) command is called. If cdb_len is 16 then a ATA PASS-THROUGH (16) command is called. If cdb_len is any other value -1 is returned. After copying from cdbp to an internal buffer, the first byte (i.e. offset 0) is set to 0xa1 if cdb_len is 12; or isset to 0x85 if cdb_len is 16. The last byte (offset 11 or offset 15) is set to 0x0 in the internal buffer. If timeout_secs <= 0 then the timeout is set to 60 seconds. For data in or out transfers set dinp or doutp, and dlen to the number of bytes to transfer. If dlen is zero then no data transfer is assumed. If sense buffer obtained then it is written to sensep, else sensep[0] is set to 0x0. If ATA return descriptor is obtained then written to ata_return_dp, else ata_return_dp[0] is set to 0x0. Either sensep or ata_return_dp (or both) may be NULL pointers. Returns SCSI status value (>= 0) or -1 if other error. Users are expected to check the sense buffer themselves. If available the data in resid is written to residp. Note in SAT-2 and later, fixed format sense data may be placed in *sensep in which case sensep[0]==0x70 . 
Name: sg_ll_read_buffer; Comment: Invokes a SCSI READ BUFFER command (SPC). Return of 0 -> successvarious SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_write_buffer; Comment: Invokes a SCSI WRITE BUFFER command (SPC). Return of 0 -> successvarious SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_unmap; Comment: Invokes a SCSI UNMAP command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_unmap_v2; Comment: Invokes a SCSI UNMAP (SBC-3) command. Version 2 adds anchor field(sbc3r22). Otherwise same as sg_ll_unmap() . 
Name: sg_ll_read_block_limits; Comment: Invokes a SCSI READ BLOCK LIMITS command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_receive_copy_results; Comment: Invokes a SCSI RECEIVE COPY RESULTS command. Actually cover all currentuses of opcode 0x84 (Third-party copy IN). Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_extended_copy; Comment: Invokes a SCSI EXTENDED COPY (LID1) command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_3party_copy_out; Comment: Handles various service actions associated with opcode 0x83 which iscalled THIRD PARTY COPY OUT. These include the EXTENDED COPY(LID1 and LID4), POPULATE TOKEN and WRITE USING TOKEN commands. Return of 0 -> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_set_cd_speed; Comment: Invokes a SCSI SET CD SPEED command (MMC).Return of 0 -> success, SG_LIB_CAT_INVALID_OP -> command not supported, SG_LIB_CAT_ILLEGAL_REQ -> bad field in cdb, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_NOT_READY -> device not ready, SG_LIB_CAT_ABORTED_COMMAND, -1 -> other failure 
Name: sg_ll_get_config; Comment: Invokes a SCSI GET CONFIGURATION command (MMC-3,4,5).Returns 0 when successful, SG_LIB_CAT_INVALID_OP if command not supported, SG_LIB_CAT_ILLEGAL_REQ if field in cdb not supported, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_ABORTED_COMMAND, else -1 
Name: sg_ll_get_performance; Comment: Invokes a SCSI GET PERFORMANCE command (MMC-3...6).Returns 0 when successful, SG_LIB_CAT_INVALID_OP if command not supported, SG_LIB_CAT_ILLEGAL_REQ if field in cdb not supported, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_ABORTED_COMMAND, else -1 
Name: sg_ll_set_streaming; Comment: Invokes a SCSI SET STREAMING command (MMC). Return of 0 -> success,SG_LIB_CAT_INVALID_OP -> Set Streaming not supported, SG_LIB_CAT_ILLEGAL_REQ -> bad field in cdb, SG_LIB_CAT_ABORTED_COMMAND, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_NOT_READY -> device not ready, -1 -> other failure 
Name: sg_linux_sense_print; Comment: Returns 1 if no errors found and thus nothing printed; otherwise prints error/warning (prefix by 'leadin') and returns 0. 
Name: sg_chk_n_print3; Comment: Returns 1 if no errors found and thus nothing printed; otherwise returns 0. 
Name: sg_chk_n_print; Comment: Returns 1 if no errors found and thus nothing printed; otherwise returns 0. 
Name: my_snprintf; Comment: Want safe, 'n += snprintf(b + n, blen - n, ...)' style sequence of functions. Returns number number of chars placed in cp excluding the trailing null char. So for cp_max_len > 0 the return value is always < cp_max_len; for cp_max_len <= 1 the return value is 0 and no charsare written to cp. Note this means that when cp_max_len = 1, this function assumes that cp[0] is the null character and does nothing (and returns 0). 
Name: get_value_name; Comment: Searches 'arr' for match on 'value' then 'peri_type'. If matches 'value' but not 'peri_type' then yields first 'value' match entry. Last element of 'arr' has NULL 'name'. If no match returns NULL. 
Name: sg_set_warnings_strm; Comment: If this function is not called, sg_warnings_strm will be NULL and all users(mainly fprintf() ) need to check and substitute stderr as required 
Name: sg_get_sense_key; Comment: Get sense key from sense buffer. If successful returns a sense key valuebetween 0 and 15. If sense buffer cannot be decode, returns -1 . 
Name: sg_get_sense_key_str; Comment: Yield string associated with sense_key value. Returns 'buff'. 
Name: sg_get_asc_ascq_str; Comment: Yield string associated with ASC/ASCQ values. Returns 'buff'. 
Name: sg_scsi_sense_desc_find; Comment: Attempt to find the first SCSI sense data descriptor that matches thegiven 'desc_type'. If found return pointer to start of sense data descriptor; otherwise (including fixed format sense data) returns NULL. 
Name: sg_get_sense_info_fld; Comment: Returns 1 if valid bit set, 0 if valid bit clear. Irrespective theinformation field is written out via 'info_outp' (except when it is NULL). Handles both fixed and descriptor sense formats. 
Name: sg_get_sense_filemark_eom_ili; Comment: Returns 1 if any of the 3 bits (i.e. FILEMARK, EOM or ILI) are set.In descriptor format if the stream commands descriptor not found then returns 0. Writes 1 or 0 corresponding to these bits to the last three arguments if they are non-NULL. 
Name: sg_get_sense_progress_fld; Comment: Returns 1 if SKSV is set and sense key is NO_SENSE or NOT_READY. Alsoreturns 1 if progress indication sense data descriptor found. Places progress field from sense data where progress_outp points. If progress field is not available returns 0 and *progress_outp is unaltered. Handles both fixed and descriptor sense formats. Hint: if 1 is returned *progress_outp may be multiplied by 100 then divided by 65536 to get the percentage completion. 
Name: sg_get_sense_descriptors_str; Comment: Decode descriptor format sense descriptors (assumes sense buffer isin descriptor format) 
Name: sg_get_sense_sat_pt_fixed_str; Comment: Decode SAT ATA PASS-THROUGH fixed format sense 
Name: sg_get_sense_str; Comment: Fetch sense information 
Name: sg_print_sense; Comment: Print sense information 
Name: sg_scsi_normalize_sense; Comment: See description in sg_lib.h header file 
Name: sg_err_category_sense; Comment: Returns a SG_LIB_CAT_* value. If cannot decode sense_buffer or a lesscommon sense key then return SG_LIB_CAT_SENSE .
Name: sg_get_command_size; Comment: Beware: gives wrong answer for variable length command (opcode=0x7f) 
Name: sg_vpd_dev_id_iter; Comment: Iterates to next designation descriptor in the device identification VPD page. The 'initial_desig_desc' should point to start of first descriptor with 'page_len' being the number of valid bytes in that and following descriptors. To start, 'off' should point to a negative value, thereafter it should point to the value yielded by the previous call. If 0 returned then 'initial_desig_desc + off' should be a valid descriptor; returns -1 if normal end condition and -2 for an abnormaltermination. Matches association, designator_type and/or code_set when any of those values are greater than or equal to zero. 
Name: sg_get_category_sense_str; Comment: Yield string associated with sense++ category. Returns 'buff' (or pointerto "Bad sense category" if 'buff' is NULL). If sense_cat unknown then yield "Sense category: <sense_cat>" string. 
Name: dStrHexFp; Comment: Note the ASCII-hex output goes to stdout. [Most other output from functionsin this file go to sg_warnings_strm (default stderr).] 'no_ascii' allows for 3 output types: > 0 each line has address then up to 16 ASCII-hex bytes = 0 in addition, the bytes are listed in ASCII to the right < 0 only the ASCII-hex bytes are listed (i.e. without address) 
Name: dStrHexStr; Comment: Read 'len' bytes from 'str' and output as ASCII-Hex bytes (spaceseparated) to 'b' not to exceed 'b_len' characters. Each line starts with 'leadin' (NULL for no leadin) and there are 16 bytes per line with an extra space between the 8th and 9th bytes. 'format' is unused (currently), set to 0 . Returns number of bytes written to 'b' excluding the trailing '_0'. 
Name: sg_is_big_endian; Comment: Returns 1 when executed on big endian machine; else returns 0.Useful for displaying ATA identify words (which need swapping on a big endian machine). 
Name: dWordHex; Comment: Note the ASCII-hex output goes to stdout. [Most other output from functionsin this file go to sg_warnings_strm (default stderr).] 'no_ascii' allows for 3 output types: > 0 each line has address then up to 8 ASCII-hex 16 bit words = 0 in addition, the ASCI bytes pairs are listed to the right = -1 only the ASCII-hex words are listed (i.e. without address) = -2 only the ASCII-hex words, formatted for "hdparm --Istdin" < -2 same as -1 If 'swapb' non-zero then bytes in each word swapped. Needs to be set for ATA IDENTIFY DEVICE response on big-endian machines. 
Name: sg_get_num; Comment: If the number in 'buf' can be decoded or the multiplier is unknownthen -1 is returned. Accepts a hex prefix (0x or 0X) or a decimal multiplier suffix (as per GNU's dd (since 2002: SI and IEC 60027-2)). Main (SI) multipliers supported: K, M, G. Ignore leading spaces and tabs; accept comma, space, tab and hash as terminator. 
Name: sg_get_num_nomult; Comment: If the number in 'buf' can not be decoded then -1 is returned. Accepts a hex prefix (0x or 0X) or a 'h' (or 'H') suffix; otherwise decimal isassumed. Does not accept multipliers. Accept a comma (","), a whitespace or newline as terminator. 
Name: sg_get_llnum; Comment: If the number in 'buf' can be decoded or the multiplier is unknownthen -1LL is returned. Accepts a hex prefix (0x or 0X) or a decimal multiplier suffix (as per GNU's dd (since 2002: SI and IEC 60027-2)). Main (SI) multipliers supported: K, M, G, T, P. Ignore leading spaces and tabs; accept comma, space, tab and hash as terminator. 
Name: sg_ata_get_chars; Comment: Extract character sequence from ATA words as in the model stringin a IDENTIFY DEVICE response. Returns number of characters written to 'ochars' before 0 character is found or 'num' words are processed. 
Name: sg_set_binary_mode; Comment: Set binary mode on fd. Does nothing in Unix. Returns negative number on failure. 
Name: sg_set_text_mode; Comment: For Unix the following functions are dummies. 
Name: scsi_pt_open_device; Comment: Returns >= 0 if successful. If error in Unix returns negated errno. 
Name: scsi_pt_open_flags; Comment: Similar to scsi_pt_open_device() but takes Unix style open flags OR-edtogether. The 'flags' argument is ignored in FreeBSD. Returns >= 0 if successful, otherwise returns negated errno. 
Name: scsi_pt_close_device; Comment: Returns 0 if successful. If error in Unix returns negated errno. 
Name: set_scsi_pt_data_in; Comment: Setup for data transfer from device 
Name: set_scsi_pt_data_out; Comment: Setup for data transfer toward device 
Name: do_scsi_pt; Comment: Executes SCSI command (or at least forwards it to lower layers).Clears os_err field prior to active call (whose result may set it again). 
Name: scsi_pt_open_flags; Comment: Returns >= 0 if successful, otherwise returns negated errno. 
Name: set_scsi_pt_task_management; Comment: Note that task management function codes are transport specific 
Name: get_scsi_pt_transport_err_str; Comment: Returns b which will contain a null char terminated string (ifmax_b_len > 0). That string should decode Linux driver and host status values. 
Name: get_scsi_pt_resid; Comment: N.B. Returns din_resid and ignores dout_resid 
Name: get_scsi_pt_transport_err_str; Comment: Returns b which will contain a null char terminated string (ifmax_b_len > 0). Combined driver and transport (called "host" in Linux kernel) statuses 
Name: do_scsi_pt_v3; Comment: Executes SCSI command using sg v3 interface 
Name: scsi_pt_open_flags; Comment: Similar to scsi_pt_open_device() but takes Unix style open flags OR-edtogether. The 'flags' argument is ignored in OSF-1. Returns >= 0 if successful, otherwise returns negated errno. 
Name: set_scsi_pt_data_in; Comment: from device 
Name: set_scsi_pt_data_out; Comment: to device 
Name: scsi_pt_open_flags; Comment: Similar to scsi_pt_open_device() but takes Unix style open flags OR-edtogether. The 'flags' argument is ignored in Solaris. Returns >= 0 if successful, otherwise returns negated errno. 
Name: scsi_pt_win32_direct; Comment: Request SPT direct interface when state_direct is 1, state_direct setto 0 for the SPT indirect interface. 
Name: scsi_pt_win32_spt_state; Comment: Returns current SPT interface state, 1 for direct, 0 for indirect 
Name: scsi_pt_open_flags; Comment: Similar to scsi_pt_open_device() but takes Unix style open flags OR-ed together. The 'flags' argument is ignored in Windows. Returns >= 0 if successful, otherwise returns negated errno. Optionally accept leading "__._". If given something of the form "SCSI<num>:<bus>,<target>,<lun>" where the values in angle brackets are integers, then will attempt to open "__._SCSI<num>:" and save the other three values for the DeviceIoControl call. The trailing ".<lun>" is optionally and if not given 0 is assumed. Since "PhysicalDrive" is a lot of keystrokes, "PD" is accepted and converted to the longer form. 
Name: scsi_pt_close_device; Comment: Returns 0 if successful. If device_id seems wild returns -ENODEV,other errors return 0. If CloseHandle() fails and verbose > 0 then outputs warning with value from GetLastError(). The verbose value defaults to zero and is potentially set from the most recent call to scsi_pt_open_device() or do_scsi_pt(). 
Name: do_scsi_pt_direct; Comment: Executes SCSI command (or at least forwards it to lower layers)using direct interface. Clears os_err field prior to active call (whose result may set it again). 
Name: do_scsi_pt_indirect; Comment: Executes SCSI command (or at least forwards it to lower layers) usingindirect interface. Clears os_err field prior to active call (whose result may set it again). 
Name: do_scsi_io; Comment: Returns 0 -> ok, 1 -> general error, 2 -> unknown opcode, 3 -> unsupported field in cdb, 4 -> unsupported param in data-in 
Name: modePageOffset; Comment: Offset into mode sense (6 or 10 byte) response that actual mode pagestarts at (relative to resp[0]). Returns -1 if problem 
Name: get_mode_page6; Comment: Reads mode (sub-)page via 6 byte MODE SENSE, returns 0 if ok 
Name: get_mode_page10; Comment: Reads mode (sub-)page via 10 byte MODE SENSE, returns 0 if ok 
Name: put_mode_page6; Comment: Contents should point to the mode parameter header that we obtained in a prior read operation. This way we do not have to work out the format of the beast. Assume 0 or 1 block descriptors. 
Name: put_mode_page10; Comment: Contents should point to the mode parameter header that we obtained in a prior read operation. This way we do not have to work out the format of the beast. Assume 0 or 1 block descriptors. 
Name: cdvd_feature; Comment: This is not a standard t10.org MMC mode page (it is now "protocol specific lu" mode page). This definition was found in Hitachi GF-2050/GF-2055 DVD-RAM drive SCSI reference manual. 
Name: sas_proto_spec_port; Comment: Protocol specific mode page for SAS, short format (subpage 0) 
Name: sas_phy_control_discover; Comment: Protocol specific mode page for SAS, phy control + discover (subpage 1) 
Name: sas_shared_spec_port; Comment: SAS(2) SSP, shared protocol specific port mode subpage (subpage 2) 
Name: show_devices; Comment: Print out a list of the known devices on the system 
Name: scsi_read_capacity; Comment: Return of 0 -> success, see sg_ll_read_capacity*() otherwise 
Name: read_blkdev_capacity; Comment: BLKSSZGET macros problematic (from <linux/fs.h> or <sys/mount.h>). 
Name: sg_read; Comment: Returns 0 -> successful, various SG_LIB_CAT_* positive values,-2 -> recoverable (ENOMEM), -1 -> unrecoverable error 
Name: sg_write; Comment: Returns 0 -> successful, various SG_LIB_CAT_* positive values,-2 -> recoverable (ENOMEM), -1 -> unrecoverable error 
Name: tsafe_strerror; Comment: Make safe_strerror() thread safe 
Name: sg_finish_io; Comment: 0 -> successful, SG_LIB_CAT_UNIT_ATTENTION or SG_LIB_CAT_ABORTED_COMMAND -> try again, SG_LIB_CAT_NOT_READY, SG_LIB_CAT_MEDIUM_HARD, -1 other errors 
Name: sg_compare_and_write; Comment: Returns 0 for success, SG_LIB_CAT_MISCOMPARE if compare fails,various other SG_LIB_CAT_*, otherwise -1 . 
Name: sg_read_low; Comment: 0 -> successful, SG_LIB_SYNTAX_ERROR -> unable to build cdb, SG_LIB_CAT_UNIT_ATTENTION -> try again, SG_LIB_CAT_MEDIUM_HARD_WITH_INFO -> 'io_addrp' written to, SG_LIB_CAT_MEDIUM_HARD -> no info field, SG_LIB_CAT_NOT_READY, SG_LIB_CAT_ABORTED_COMMAND, -2 -> ENOMEM -1 other errors 
Name: sg_read; Comment: 0 -> successful, SG_LIB_SYNTAX_ERROR -> unable to build cdb, SG_LIB_CAT_UNIT_ATTENTION -> try again, SG_LIB_CAT_NOT_READY, SG_LIB_CAT_MEDIUM_HARD, SG_LIB_CAT_ABORTED_COMMAND, -2 -> ENOMEM, -1 other errors 
Name: sg_write; Comment: 0 -> successful, SG_LIB_SYNTAX_ERROR -> unable to build cdb, SG_LIB_CAT_NOT_READY, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_MEDIUM_HARD, SG_LIB_CAT_ABORTED_COMMAND, -2 -> recoverable (ENOMEM), -1 -> unrecoverable error + others 
Name: process_flags; Comment: Process arguments given to 'iflag=" or 'oflag=" options. Returns 0on success, 1 on error. 
Name: process_conv; Comment: Process arguments given to 'conv=" option. Returns 0 on success,1 on error. 
Name: open_if; Comment: Returns open input file descriptor (>= 0) or a negative value(-SG_LIB_FILE_ERROR or -SG_LIB_CAT_OTHER) if error. 
Name: open_of; Comment: Returns open output file descriptor (>= 0), -1 for don'tbother opening (e.g. /dev/null), or a more negative value (-SG_LIB_FILE_ERROR or -SG_LIB_CAT_OTHER) if error. 
Name: f2hex_arr; Comment: Read ASCII hex bytes from fname (a file named '-' taken as stdin). There should be either one entry per line or a comma, space or tab separated list of bytes. If no_space is set then a string of ACSII hex digits is expected, 2 per byte. Everything from and including a '#'on a line is ignored. Returns 0 if ok, or 1 if error. 
Name: sg_ll_format_medium; Comment: Invokes a SCSI FORMAT MEDIUM command (SSC). Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: scsi_format_unit; Comment: Return 0 on success, else see sg_ll_format_unit2() 
Name: scsi_format_medium; Comment: Return 0 on success, else see sg_ll_format_medium() above 
Name: print_read_cap; Comment: Returns block size or -2 if do_16==0 and the number of blocks is toobig, or returns -1 for other error. 
Name: decode_lba_status_desc; Comment: Decodes given LBA status descriptor passing back the starting LBA,the number of blocks and returns the provisioning status, -1 for error. 
Name: cl_new_process; Comment: Processes command line options according to new option format. Returns0 is ok, else SG_LIB_SYNTAX_ERROR is returned. 
Name: cl_old_process; Comment: Processes command line options according to old option format. Returns0 is ok, else SG_LIB_SYNTAX_ERROR is returned. 
Name: cl_process; Comment: Process command line options. First check using new option format unlessthe SG3_UTILS_OLD_OPTS environment variable is defined which causes the old option format to be checked first. Both new and old format can be countermanded by a '-O' and '-N' options respectively. As soon as either of these options is detected (when processing the other format), processing stops and is restarted using the other format. Clear? 
Name: f2hex_arr; Comment: Read ASCII hex bytes or binary from fname (a file named '-' taken as stdin). If reading ASCII hex then there should be either one entry per line or a comma, space or tab separated list of bytes. If no_space is set then a string of ACSII hex digits is expected, 2 per byte. Everything from and including a '#' on a line is ignored. Returns 0 if ok, or 1 iferror. 
Name: pt_inquiry; Comment: Local version of sg_ll_inquiry() [found in libsgutils] that additionallypasses back resid. Same return values as sg_ll_inquiry() (0 is good). 
Name: encode_whitespaces; Comment: Strip initial and trailing whitespaces; convert one or repeated whitespaces to a single "_"; convert non-printable characters to "." and if there are no valid (i.e. printable) characters return 0. Process 'str' in place (i.e. it's input and output) and return the length of the output, excluding the trailing '_0'. To cover any potential unicode string an intermediate zero is skipped; twoconsecutive zeroes indicate a string termination. 
Name: decode_ascii_inf; Comment: ASCII Information VPD pages (page numbers: 0x1 to 0x7f) 
Name: decode_net_man_vpd; Comment: VPD_MAN_NET_ADDR 
Name: decode_mode_policy_vpd; Comment: VPD_MODE_PG_POLICY 
Name: decode_scsi_ports_vpd; Comment: VPD_SCSI_PORTS 
Name: decode_dev_ids; Comment: These are target port, device server (i.e. target) and LU identifiers 
Name: decode_transport_id; Comment: Transport IDs are initiator port identifiers, typically other than the initiator port issuing a SCSI command. 
Name: decode_x_inq_vpd; Comment: VPD_EXT_INQ Extended Inquiry 
Name: decode_softw_inf_id; Comment: VPD_SOFTW_INF_ID 
Name: decode_ata_info_vpd; Comment: VPD_ATA_INFO 
Name: decode_power_condition; Comment: VPD_POWER_CONDITION 
Name: decode_b0_vpd; Comment: OSD information, osd 
Name: decode_b1_vpd; Comment: VPD_MAN_ASS_SN ssc 
Name: decode_b3_vpd; Comment: VPD_REFERRALS sbc 
Name: vpd_fetch_page_from_dev; Comment: When sg_fd >= 0 fetch VPD page from device; mxlen is command line--maxlen=LEN option (def: 0) or -1 for a VPD page with a short length (1 byte). When sg_fd < 0 then mxlen bytes have been read from --inhex=FN file. Returns 0 for success. 
Name: fetch_unit_serial_num; Comment: Returns 0 if Unit Serial Number VPD page contents found, else seesg_ll_inquiry() return values 
Name: std_inq_process; Comment: Process a standard INQUIRY response. Returns 0 if successful 
Name: cmddt_process; Comment: Returns 0 if successful 
Name: cmddt_process; Comment: Returns 0. 
Name: vpd_mainly_hex; Comment: Returns 0 if successful 
Name: vpd_decode; Comment: Returns 0 if successful 
Name: try_ata_identify; Comment: Returns 0 if successful, else errno of error 
Name: process_cl_new; Comment: Processes command line options according to new option format. Returns0 is ok, else SG_LIB_SYNTAX_ERROR is returned. 
Name: process_cl_old; Comment: Processes command line options according to old option format. Returns0 is ok, else SG_LIB_SYNTAX_ERROR is returned. 
Name: process_cl; Comment: Process command line options. First check using new option format unlessthe SG3_UTILS_OLD_OPTS environment variable is defined which causes the old option format to be checked first. Both new and old format can be countermanded by a '-O' and '-N' options respectively. As soon as either of these options is detected (when processing the other format), processing stops and is restarted using the other format. Clear? 
Name: all_bits_set; Comment: Assumes an integral numbers of bytes pointed to by 'xp' of length'num_bytes' given. [So the number of bits modulo 8 must be zero.] Returns true if all bytes are 0xff (which is the same as all bits being set), else returns false. 
Name: do_logs; Comment: Call LOG SENSE twice: the first time ask for 4 byte response to determine actual length of response; then a second time requesting the min(actual_len, mx_resp_len) bytes. If the calculated length for the second fetch is odd then it is incremented (perhaps should be made modulo 4 in the future for SAS). Returns 0 if ok, SG_LIB_CAT_INVALID_OP for log_sense not supported, SG_LIB_CAT_ILLEGAL_REQ for bad field in log sense command, SG_LIB_CAT_NOT_READY, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_ABORTED_COMMAND and -1 for other errors. 
Name: get_pcb_str; Comment: DS made obsolete in spc4r03; TMC and ETC made obsolete in spc5r03. 
Name: show_supported_pgs_page; Comment: SUPP_PAGES_LPAGE [0x0,0x0] 
Name: show_supported_pgs_sub_page; Comment: SUPP_PAGES_LPAGE,SUPP_SPGS_SUBPG [0x0,0xff] or all subpages of a givenpage code: [<pg_code>,0xff] 
Name: show_buffer_over_under_run_page; Comment: BUFF_OVER_UNDER_LPAGE [0x1] introduced: SPC-2 
Name: show_error_counter_page; Comment: [0x2, 0x3, 0x4, 0x5] introduced: SPC-3 
Name: show_non_medium_error_page; Comment: NON_MEDIUM_LPAGE [0x6] introduced: SPC-2 
Name: show_power_condition_transitions_page; Comment: PCT_LPAGE [0x1a] introduced: SPC-4 
Name: show_environmental_reporting_page; Comment: ENV_REPORTING_SUBPG [0xd,0x1] introduced: SPC-5 (rev 02) 
Name: show_environmental_limits_page; Comment: ENV_LIMITS_SUBPG [0xd,0x2] introduced: SPC-5 (rev 02) 
Name: show_tape_usage_page; Comment: Tape usage: Vendor specific (LTO-5 and LTO-6): 0x30 
Name: show_tape_capacity_page; Comment: Tape capacity: vendor specific (LTO-5 and LTO-6 ?): 0x31 
Name: show_data_compression_page; Comment: Data compression: originally vendor specific 0x32 (LTO-5), thenssc-4 standardizes it at 0x1b 
Name: show_last_n_error_page; Comment: LAST_N_ERR_LPAGE [0x7] introduced: SPC-2 
Name: show_last_n_deferred_error_page; Comment: LAST_N_DEFERRED_LPAGE [0xb] introduced: SPC-2 
Name: show_self_test_page; Comment: SELF_TEST_LPAGE [0x10] introduced: SPC-3 
Name: show_temperature_page; Comment: TEMPERATURE_LPAGE [0xd] introduced: SPC-3 
Name: show_start_stop_page; Comment: START_STOP_LPAGE [0xe] introduced: SPC-3 
Name: show_app_client_page; Comment: APP_CLIENT_LPAGE [0xf] introduced: SPC-3 
Name: show_ie_page; Comment: IE_LPAGE [0x2f] introduced: SPC-3 
Name: show_sas_phy_event_info; Comment: called for SAS port of PROTO_SPECIFIC_LPAGE [0x18] 
Name: show_sas_port_param; Comment: helper for SAS port of PROTO_SPECIFIC_LPAGE [0x18] 
Name: show_protocol_specific_page; Comment: PROTO_SPECIFIC_LPAGE [0x18] 
Name: show_stats_perform_page; Comment: STATS_LPAGE [0x19], subpages: 0x0 to 0x1f introduced: SPC-4 
Name: show_cache_stats_page; Comment: STATS_LPAGE [0x19], CACHE_STATS_SUBPG [0x20] introduced: SPC-4 
Name: show_format_status_page; Comment: FORMAT_STATUS_LPAGE [0x8] introduced: SBC-2 
Name: show_non_volatile_cache_page; Comment: Non-volatile cache page [0x17] introduced: SBC-2 
Name: show_lb_provisioning_page; Comment: LB_PROV_LPAGE [0xc] introduced: SBC-3 
Name: show_utilization_page; Comment: UTILIZATION_SUBPG [0xe,0x1] introduced: SBC-4 
Name: show_solid_state_media_page; Comment: SOLID_STATE_MEDIA_LPAGE [0x11] introduced: SBC-3 
Name: show_dt_device_status_page; Comment: DT device status [0x11] (ssc, adc) 
Name: show_ata_pt_results_page; Comment: SAT_ATA_RESULTS_LPAGE (SAT-2) [0x16] 
Name: show_background_scan_results_page; Comment: Background scan results [0x15,0] for disk introduced: SBC-3 
Name: show_pending_defects_page; Comment: PENDING_DEFECTS_SUBPG [0x15,0x1] introduced: SBC-4 
Name: show_background_op_page; Comment: BACKGROUND_OP_SUBPG [0x15,0x2] introduced: SBC-4 rev 7 
Name: show_lps_misalignment_page; Comment: LPS misalignment page [0x15,0x3] introduced: SBC-4 rev 10 
Name: show_sequential_access_page; Comment: Sequential access device page [0xc] for tape 
Name: show_device_stats_page; Comment: 0x14 for tape and ADC 
Name: show_media_stats_page; Comment: 0x14 for media changer 
Name: show_element_stats_page; Comment: 0x15 for media changer 
Name: show_tape_diag_data_page; Comment: 0x16 for tape 
Name: show_mchanger_diag_data_page; Comment: 0x16 for media changer 
Name: volume_stats_partition; Comment: Helper for show_volume_stats_page() 
Name: show_volume_stats_page; Comment: Volume Statistics log page (ssc-4) [0x17, 0x1-0xf] 
Name: show_tape_alert_ssc_page; Comment: TAPE_ALERT_LPAGE [0x2e] 
Name: show_seagate_cache_page; Comment: 0x37 
Name: show_seagate_factory_page; Comment: 0x3e 
Name: decode_lun; Comment: Decoded according to SAM-5 rev 10. Note that one draft: BCC rev 0,defines its own "bridge addressing method" in place of the SAM-3 "logical addressing method". 
Name: t10_2linux_lun64bitBR; Comment: Copy of t10_lun --> Linux unsigned int (i.e. 32 bit ) present in Linuxkernel, up to least lk 3.8.0, extended to 64 bits. BEWARE: for sizeof(int==4) this function is BROKEN and is left here as as example and may soon be removed. 
Name: scan_for_first; Comment: scan for directory entry that is either a symlink or a directory 
Name: if_directory_chdir; Comment: Return 1 if directory, else 0 
Name: if_directory_ch2generic; Comment: Return 1 if directory, else 0 
Name: get_value; Comment: Return 1 if found, else 0 if problems 
Name: opcode_num_compare; Comment: returns -1 when left < right, 0 when left == right, else returns 1 
Name: opcode_alpha_compare; Comment: returns -1 when left < right, 0 when left == right, else returns 1 
Name: decode_transport_id; Comment: If num_tids==0 then only one TransportID is assumed with len bytes init. If num_tids>0 then that many TransportIDs is assumed, each in an element that is MX_TID_LEN bytes long (and the 'len' argument is ignored). 
Name: compact_transportid_array; Comment: Compact the 2 dimensional transportid_arr into a one dimensionalarray in place returning the length. 
Name: decode_sym_transportid; Comment: Decode various symbolic forms of TransportIDs into SPC-4 format.Returns 1 if one found, else returns 0. 
Name: decode_file_tids; Comment: Read one or more TransportIDs from the given file or stdin. Reads fromstdin when 'fnp' is NULL. Returns 0 if successful, 1 otherwise. 
Name: build_transportid; Comment: Build transportid array which may contain one or more TransportIDs.A single TransportID can appear on the command line either as a list of comma (or single space) separated ASCII hex bytes, or in some transport protocol specific form (e.g. "sas,5000c50005b32001"). One or more TransportIDs may be given in a file (syntax: "file=<name>") or read from stdin in (when "-" is given). Fuller description in manpage of sg_persist(8). Returns 0 if successful, else 1 . 
Name: my_memalign; Comment: Allocate aligned memory (heap) starting on page boundary 
Name: sg_bread; Comment: -3 medium/hardware error, -2 -> not ready, 0 -> successful, 1 -> recoverable (ENOMEM), 2 -> try again (e.g. unit attention), 3 -> try again (e.g. aborted command), -1 -> other unrecoverable error 
Name: sg_ll_read_attr; Comment: Invokes a SCSI READ ATTRIBUTE command (SPC+SMC). Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: all_ffs_or_last_fe; Comment: Returns 1 if 'ucp' all 0xff bytes, returns 2 is all 0xff bytes apartfrom last being 0xfe; otherwise returns 0. 
Name: ll_read_buffer_10; Comment: Invokes a SCSI READ BUFFER(10) command (spc5r02). Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: ll_read_buffer_16; Comment: Invokes a SCSI READ BUFFER(16) command (spc5r02). Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: process_read_long; Comment: Returns 0 if successful 
Name: get_llnum; Comment: Trying to decode multipliers as sg_get_llnum() [in sg_libs] does wouldonly confuse things here, so use this local trimmed version 
Name: build_lba_arr; Comment: Read numbers (up to 64 bits in size) from command line (comma (or(single) space) separated list) or from stdin (one per line, comma separated list or space separated list). Assumed decimal unless prefixed by '0x', '0X' or contains trailing 'h' or 'H' (which indicate hex). Returns 0 if ok, or 1 if error. 
Name: decode_referral_desc; Comment: Decodes given user data referral segment descriptorthe number of blocks and returns the number of bytes processed, -1 for error. 
Name: sg_ll_report_zones; Comment: Invokes a SCSI REPORT ZONES command (ZBC). Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_reset_write_pointer; Comment: Invokes a SCSI RESET WRITE POINTER command (ZBC). Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: read_safte_configuration; Comment: Buffer ID 0x0: Read Enclosure Configuration (mandatory) 
Name: do_safte_encl_status; Comment: Buffer ID 0x01: Read Enclosure Status (mandatory) 
Name: do_safte_usage_statistics; Comment: Buffer ID 0x02: Read Usage Statistics (optional) 
Name: do_safte_slot_insertions; Comment: Buffer ID 0x03: Read Device Insertions (optional) 
Name: do_safte_slot_status; Comment: Buffer ID 0x04: Read Device Slot Status (mandatory) 
Name: do_safte_global_flags; Comment: Buffer ID 0x05: Read Global Flags (optional) 
Name: do_sanitize; Comment: Invoke SCSI SANITIZE command. Returns 0 if successful, otherwise error 
Name: do_read_log_ext; Comment: N.B. "log_addr" is the log page number, "page_in_log" is usually zero 
Name: scsi_inq; Comment: fallback INQUIRY using scsi mid-level's SCSI_IOCTL_SEND_COMMAND ioctl 
Name: swapbytes; Comment: Copies n bytes (or n-1 if n is odd) from in to out, but swaps adjacentsbytes. 
Name: trim; Comment: Copies in to out, but removes leading and trailing whitespace. 
Name: formatdriveidstring; Comment: Convenience function for formatting strings from ata_identify_device 
Name: printswap; Comment: Function for printing ASCII byte-swapped strings, skipping whitespace. Please note that this is needed on both big- and little-endian hardware. 
Name: check_devices; Comment: Updates storage_arr based on sep. Returns 1 if update occurred, 0 ifno update occured. 
Name: do_senddiag; Comment: Return of 0 -> success, otherwise see sg_ll_send_diag() 
Name: do_modes_0a; Comment: Get expected extended self-test time from mode page 0xa (for '-e') 
Name: build_diag_page; Comment: Returns 0 if ok, or 1 if error. 
Name: parse_index; Comment: Return 0 for okay, else an error 
Name: cl_process; Comment: process command line options and argument. Returns 0 if ok. 
Name: get_llnum; Comment: Returns 64 bit signed integer given in either decimal or in hex. Thehex number is either preceded by "0x" or followed by "h". Returns -1 on error (so check for "-1" string before using this function). 
Name: parse_cgs_str; Comment: Parse clear/get/set string. Uses 'buff' for scratch area. Returns 0on success, else -1. 
Name: find_out_diag_page_desc; Comment: Fetch diagnostic page name (control or out). Returns NULL if not found. 
Name: do_senddiag; Comment: Return of 0 -> success, SG_LIB_CAT_* positive values or -1 -> otherfailures 
Name: find_diag_page_desc; Comment: Fetch diagnostic page name (status and/or control). Returns NULL if notfound. 
Name: find_in_diag_page_desc; Comment: Fetch diagnostic page name (status or in). Returns NULL if not found. 
Name: find_element_tname; Comment: Fetch element type name. Returns NULL if not found. 
Name: active_et_aesp; Comment: Returns 1 if el_type (element type) is of interest to the AdditionalElement Status page. Otherwise return 0. 
Name: do_rec_diag; Comment: Return of 0 -> success, SG_LIB_CAT_* positive values or -1 -> otherfailures 
Name: ses_configuration_sdg; Comment: DPC_CONFIGURATION [0x1]Display Configuration diagnostic page. 
Name: populate_type_desc_hdr_arr; Comment: DPC_CONFIGURATIONReturns total number of type descriptor headers written to 'tdhp' or -1 if there is a problem 
Name: ses_enc_status_dp; Comment: DPC_ENC_STATUS [0x2]Display enclosure status diagnostic page. 
Name: ses_threshold_sdg; Comment: DPC_THRESHOLD [0x5] 
Name: ses_element_desc_sdg; Comment: DPC_ELEM_DESC [0x7]This page essentially contains names of overall and individual elements. 
Name: ses_additional_elem_sdg; Comment: DPC_ADD_ELEM_STATUS [0xa]Previously called "Device element status descriptor". Changed "device" to "additional" to allow for SAS expander and SATA devices 
Name: ses_subenc_help_sdg; Comment: DPC_SUBENC_HELP_TEXT [0xb] 
Name: ses_subenc_string_sdg; Comment: DPC_SUBENC_STRING [0xc] 
Name: ses_subenc_nickname_sdg; Comment: DPC_SUBENC_NICKNAME [0xf] 
Name: ses_supported_pages_sdg; Comment: DPC_SUPPORTED_SES [0xd] 
Name: ses_download_code_sdg; Comment: DPC_DOWNLOAD_MICROCODE [0xe] 
Name: read_hex; Comment: Reads hex data from command line, stdin or a file. Returns 0 on success,1 otherwise. 
Name: ses_process_status_page; Comment: Display "status" page (op->page_code). Return 0 for success. 
Name: join_work; Comment: Fetch Configuration, Enclosure Status, Element Descriptor, AdditionalElement Status and optionally Threshold In pages, place in static arrays. Collate (join) overall and individual elements into the static join_arr[]. Returns 0 for success, any other return value is an error. 
Name: strcase_eq; Comment: Returns 1 if strings equal (same length, characters same or only differby case), else returns 0. Assumes 7 bit ASCII (English alphabet). 
Name: cgs_enc_ctl_stat; Comment: DPC_ENC_STATUS DPC_ENC_CONTROLDo clear/get/set (cgs) on Enclosure Control/Status page. Return 0 for ok -2 for acronym not found, else -1 . 
Name: cgs_threshold; Comment: DPC_THRESHOLDDo clear/get/set (cgs) on Threshold In/Out page. Return 0 for ok, -2 for acronym not found, else -1 . 
Name: cgs_additional_el; Comment: DPC_ADD_ELEM_STATUSDo get (cgs) on Additional element status page. Return 0 for ok, -2 for acronym not found, else -1 . 
Name: ses_cgs; Comment: Do --clear, --get or --set .Returns 0 for success, any other return value is an error. 
Name: ses_set_nickname; Comment: Called when '--nickname=SEN' given. First calls status page to fetchthe generation code. Returns 0 for success, any other return value is an error. 
Name: enumerate_work; Comment: Output from --enumerate or --list option. Note that the output isdifferent when the option is given twice. 
Name: build_port_arr; Comment: trailing 'h' or 'H' (which indicate hex). Returns 0 if ok, 1 if error. 
Name: build_state_arr; Comment: Returns 0 if ok, 1 if error. 
Name: do_checksum; Comment: return 0 if good, else 2222 
Name: sg_ll_rep_timestamp; Comment: Invokes a SCSI REPORT TIMESTAMP command. Return of 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_set_timestamp; Comment: Invokes the SET TIMESTAMP command. Return of 0 -> success, variousSG_LIB_CAT_* positive values or -1 -> other errors 
Name: build_lba_arr; Comment: Read numbers (up to 64 bits in size) from command line (comma (or(single) space) separated list). Assumed decimal unless prefixed by '0x', '0X' or contains trailing 'h' or 'H' (which indicate hex). Returns 0 if ok, or 1 if error. 
Name: build_num_arr; Comment: Read numbers (up to 32 bits in size) from command line (comma (or(single) space) separated list). Assumed decimal unless prefixed by '0x', '0X' or contains trailing 'h' or 'H' (which indicate hex). Returns 0 if ok, or 1 if error. 
Name: build_joint_arr; Comment: Read numbers from filename (or stdin) line by line (comma (or(single) space) separated list). Assumed decimal unless prefixed by '0x', '0X' or contains trailing 'h' or 'H' (which indicate hex). Returns 0 if ok, or 1 if error. 
Name: decode_dev_ids_quiet; Comment: Prints outs an abridged set of device identification designators selected by association, designator type and/or code set. 
Name: decode_dev_ids; Comment: Prints outs device identification designators selected by association, designator type and/or code set. 
Name: decode_x_inq_vpd; Comment: VPD_EXT_INQ Extended Inquiry VPD 
Name: decode_power_condition; Comment: VPD_POWER_CONDITION 0x8a 
Name: decode_dev_const_vpd; Comment: VPD_DEVICE_CONSTITUENTS 0x8b 
Name: decode_power_consumption_vpd; Comment: VPD_POWER_CONSUMPTION 
Name: decode_rod_descriptor; Comment: This is xcopy(LID4) related: "ROD" == Representation Of DataUsed by VPD_3PARTY_COPY 
Name: decode_3party_copy_vpd; Comment: VPD_3PARTY_COPY [3PC, third party copy] 
Name: decode_proto_lu_vpd; Comment: VPD_PROTO_LU 
Name: decode_proto_port_vpd; Comment: VPD_PROTO_PORT 
Name: decode_b0_vpd; Comment: VPD_OSD_INFO osd 
Name: decode_b1_vpd; Comment: VPD_SECURITY_TOKEN osd 
Name: decode_block_lb_prov_vpd; Comment: VPD_LB_PROVISIONING 
Name: decode_sup_block_lens_vpd; Comment: VPD_SUP_BLOCK_LENS 0xb4 
Name: decode_block_dev_char_ext_vpd; Comment: VPD_BLOCK_DEV_C_EXTENS 0xb5 
Name: decode_lb_protection_vpd; Comment: VPD_LB_PROTECTION (SSC) [added in ssc5r02a] 
Name: decode_tapealert_supported_vpd; Comment: VPD_TA_SUPPORTED 
Name: decode_b2_vpd; Comment: VPD_TA_SUPPORTED ssc 
Name: decode_b3_vpd; Comment: VPD_AUTOMATION_DEV_SN ssc 
Name: decode_b4_vpd; Comment: VPD_DTDE_ADDRESS ssc 
Name: decode_b5_vpd; Comment: VPD_BLOCK_DEV_C_EXTENS sbc 
Name: decode_zbdc_vpd; Comment: VPD_ZBC_DEV_CHARS sbc or zbc 
Name: decode_b7_vpd; Comment: VPD_BLOCK_LIMITS_EXT sbc 
Name: svpd_unable_to_decode; Comment: Returns 0 if successful 
Name: svpd_decode_t10; Comment: Returns 0 if successful, else see sg_ll_inquiry() 
Name: svpd_enumerate_vendor; Comment: if vend_prod_num < -1 then list vendor_product ids + vendor pages, =-1list only vendor_product ids, else list pages for that vend_prod_num 
Name: svpd_decode_vendor; Comment: Returns 0 if successful, see sg_ll_inquiry() plus SG_LIB_SYNTAX_ERROR for unsupported page 
Name: sg_ll_write_buffer_v2; Comment: Invokes a SCSI WRITE BUFFER command (SPC). Return of 0 ->success, SG_LIB_CAT_INVALID_OP -> invalid opcode, SG_LIB_CAT_ILLEGAL_REQ -> bad field in cdb, SG_LIB_CAT_UNIT_ATTENTION, SG_LIB_CAT_NOT_READY -> device not ready, SG_LIB_CAT_ABORTED_COMMAND, -1 -> other failure 
Name: run_scsi_transaction; Comment: Invokes a SCSI WRITE AND VERIFY according with CDB. Returns 0 -> success,various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_write_verify10; Comment: Invokes a SCSI WRITE AND VERIFY (10) command (SBC). Returns 0 -> success,* various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_ll_write_verify16; Comment: Invokes a SCSI WRITE AND VERIFY (16) command (SBC). Returns 0 -> success,* various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: build_mode_page; Comment: Read hex numbers from command line or stdin. On the command line caneither be comma or space separated list. Space separated list need to be quoted. For stdin (indicated by *inp=='-') there should be either one entry per line, a comma separated list or space separated list. Returns 0 if ok, or 1 if error. 
Name: build_mask; Comment: Read hex numbers from command line (comma separated list).Can also be (single) space separated list but needs to be quoted on the command line. Returns 0 if ok, or 1 if error. 
Name: open_sg; Comment: Returns a file descriptor on success (0 or greater), -1 for an openerror, -2 for a standard INQUIRY problem. 
Name: sg_ll_zone_out; Comment: Invokes the zone out command indicated by 'sa' (ZBC). Return of 0-> success, various SG_LIB_CAT_* positive values or -1 -> other errors 
Name: sg_set_text_mode; Comment: Non Unix OSes distinguish between text and binary files. Set text mode on fd. Does nothing in Unix. Returns negative number on failure. 
Name: num_chs_in_str; Comment: Returns the number of times 'ch' is found in string 's' given thestring's length. 
Name: my_snprintf; Comment: Want safe, 'n += snprintf(b + n ...)' like function. If cp_max_len is 1 then assume cp is pointing to a null char and do nothing. Returns number number of chars placed in cp excluding the trailing null char. So for cp_max_len > 0 the return value is always < cp_max_len; for cp_max_len<= 0 the return value is 0 (and no chars are written to cp). 
Name: timeOfDay; Comment: Return the current wall-clock time 
Name: beginTimer; Comment: ** Begin timing an operation 
Name: timeDiff; Comment: Return the difference of two time_structs in seconds 
Name: endTimer; Comment: ** Print the timing results. 
Name: hasTimer; Comment: ** Check to see if we have timer support. Return 1 if necessary ** support found (or found previously). 
Name: timeDiff; Comment: Return the difference of two FILETIME structs in seconds 
Name: shell_out_of_memory; Comment: Indicate out-of-memory and exit. 
Name: shellOomFault; Comment: This routine is called when a simulated OOM occurs. It is broken** out as a separate routine to make it easy to set a breakpoint on ** the OOM 
Name: oomMalloc; Comment: This routine is a replacement malloc() that is used to simulate** Out-Of-Memory (OOM) errors for testing purposes. 
Name: registerOomSimulator; Comment: Register the OOM simulator. This must occur before any memory** allocations 
Name: utf8_width_print; Comment: ** Output string zUtf to stream pOut as w characters. If w is negative, ** then right-justify the text. W is the width in UTF-8 characters, not ** in bytes. This is different from the %*.*s specification in printf ** since with %*.*s the width is measured in bytes, not characters. 
Name: isNumber; Comment: ** Determines if a string is a number of not. 
Name: strlen30; Comment: ** Compute a string length that is limited to what can be stored in ** lower 30 bits of a 32-bit signed integer. 
Name: strlenChar; Comment: ** Return the length of a string in characters. Multibyte UTF8 characters ** count as a single character. 
Name: local_getline; Comment: ** This routine reads a line of text from FILE in, stores ** the text in memory obtained from malloc() and returns a pointer ** to the text. NULL is returned at end of file, or if malloc() ** fails. ** ** If zLine is not NULL then it is a malloced buffer returned from ** a previous call to this routine that may be reused. 
Name: one_input_line; Comment: ** Retrieve a single line of input text. ** ** If in==0 then read from standard input and prompt before each line. ** If isContinuation is true, then a continuation prompt is appropriate. ** If isContinuation is zero, then the main prompt should be used. ** ** If zPrior is not NULL then it is a buffer from a prior call to this ** routine that can be reused. ** ** The result is stored in space obtained from malloc() and must either ** be freed by the caller or else passed back into this routine via the ** zPrior argument for reuse. 
Name: hexDigitValue; Comment: ** Return the value of a hexadecimal digit. Return -1 if the input ** is not a hex digit. 
Name: integerValue; Comment: ** Interpret zArg as an integer value, possibly with suffixes. 
Name: initText; Comment: ** Initialize and destroy a ShellText object 
Name: appendText; Comment: zIn is either a pointer to a NULL-terminated string in memory obtained** from malloc(), or a NULL pointer. The string pointed to by zAppend is ** added to zIn, and the result returned in memory obtained from malloc(). ** zIn, if it was not NULL, is freed. ** ** If the third argument, quote, is not '_0', then it is used as a ** quote character for zAppend. 
Name: quoteChar; Comment: ** Attempt to determine if identifier zName needs to be quoted, either ** because it contains non-alphanumeric characters, or because it is an ** SQLite keyword. Be conservative in this estimate: When in doubt assume ** that quoting is required. ** ** Return '"' if quoting is required. Return 0 if no quoting is required. 
Name: shellModuleSchema; Comment: ** SQL function: shell_module_schema(X) ** ** Return a fake schema for the table-valued function or eponymous virtual ** table X. 
Name: shellAddSchemaName; Comment: None** ** Also works on ** ** CREATE INDEX ** CREATE UNIQUE INDEX ** CREATE VIEW ** CREATE TRIGGER ** CREATE VIRTUAL TABLE ** ** This UDF is used by the .schema command to insert the schema name of ** attached databases into the middle of the sqlite_schema.sql field. 
Name: windirent_getenv; Comment: ** Implementation of the POSIX getenv() function using the Win32 API. ** This function is not thread-safe. 
Name: opendir; Comment: ** Implementation of the POSIX opendir() function using the MSVCRT. 
Name: readdir; Comment: ** Implementation of the POSIX readdir() function using the MSVCRT. 
Name: readdir_r; Comment: ** Implementation of the POSIX readdir_r() function using the MSVCRT. 
Name: closedir; Comment: ** Implementation of the POSIX closedir() function using the MSVCRT. 
Name: KeccakF1600Step; Comment: ** A single step of the Keccak mixing function for a 1600-bit state 
Name: SHA3Init; Comment: ** Initialize a new hash. iSize determines the size of the hash ** in bits and should be one of 224, 256, 384, or 512. Or iSize ** can be zero to use the default hash size of 256 bits. 
Name: SHA3Update; Comment: ** Make consecutive calls to the SHA3Update function to add new content ** to the hash 
Name: SHA3Final; Comment: ** After all content has been added, invoke SHA3Final() to compute ** the final hash. The function returns a pointer to the binary ** hash value. 
Name: sha3Func; Comment: ** Implementation of the sha3(X,SIZE) function. ** ** Return a BLOB which is the SIZE-bit SHA3 hash of X. The default ** size is 256. If X is a BLOB, it is hashed as is. ** For all other non-NULL types of input, X is converted into a UTF-8 string ** and the string is hashed without the trailing 0x00 terminator. The hash ** of a NULL value is NULL. 
Name: sha3QueryFunc; Comment: ** Implementation of the sha3_query(SQL,SIZE) function. ** ** This function compiles and runs the SQL statement(s) given in the ** argument. The results are hashed using a SIZE-bit SHA3. The default ** size is 256. ** ** The format of the byte stream that is hashed is summarized as follows: ** ** S<n>:<sql> ** R ** N ** I<int> ** F<ieee-float> ** B<size>:<bytes> ** T<size>:<text> ** ** <sql> is the original SQL text for each statement run and <n> is ** the size of that text. The SQL text is UTF-8. A single R character ** occurs before the start of each row. N means a NULL value. ** I mean an 8-byte little-endian integer <int>. F is a floating point ** number with an 8-byte little-endian IEEE floating point value <ieee-float>. ** B means blobs of <size> bytes. T means text rendered as <size> ** bytes of UTF-8. The <n> and <size> values are expressed as an ASCII ** text integers. ** ** For each SQL statement in the X input, there is one S segment. Each ** S segment is followed by zero or more R segments, one for each row in the ** result set. After each R, there are one or more N, I, F, B, or T segments, ** one for each column in the result set. Segments are concatentated directly ** with no delimiters of any kind. 
Name: readFileContents; Comment: ** Set the result stored by context ctx to a blob containing the ** contents of file zName. Or, leave the result unchanged (NULL) ** if the file does not exist or is unreadable. ** ** If the file exceeds the SQLite blob size limit, through an ** SQLITE_TOOBIG error. ** ** Throw an SQLITE_IOERR if there are difficulties pulling the file ** off of disk. 
Name: readfileFunc; Comment: ** Implementation of the "readfile(X)" SQL function. The entire content ** of the file named X is read and returned as a BLOB. NULL is returned ** if the file does not exist or is unreadable. 
Name: ctxErrorMsg; Comment: ** Set the error message contained in context ctx to the results of ** vprintf(zFmt, ...). 
Name: fileTimeToUnixTime; Comment: ** This function is designed to convert a Win32 FILETIME structure into the ** number of seconds since the Unix Epoch (1970-01-01 00:00:00 UTC). 
Name: statTimesToUtc; Comment: ** This function attempts to normalize the time values found in the stat() ** buffer to UTC. This is necessary on Win32, where the runtime library ** appears to return these values as local times. 
Name: fileStat; Comment: ** This function is used in place of stat(). On Windows, special handling ** is required in order for the included time to be returned as UTC. On all ** other systems, this function simply calls stat(). 
Name: fileLinkStat; Comment: ** This function is used in place of lstat(). On Windows, special handling ** is required in order for the included time to be returned as UTC. On all ** other systems, this function simply calls lstat(). 
Name: makeDirectory; Comment: ** Argument zFile is the name of a file that will be created and/or written ** by SQL function writefile(). This function ensures that the directory ** zFile will be written to exists, creating it if required. The permissions ** for any path components created by this function are set in accordance ** with the current umask. ** ** If an OOM condition is encountered, SQLITE_NOMEM is returned. Otherwise, ** SQLITE_OK is returned if the directory is successfully created, or ** SQLITE_ERROR otherwise. 
Name: writefileFunc; Comment: ** Implementation of the "writefile(W,X[,Y[,Z]]])" SQL function. ** Refer to header comments at the top of this file for details. 
Name: lsModeFunc; Comment: ** SQL function: lsmode(MODE) ** ** Given a numberic st_mode from stat(), convert it into a human-readable ** text string in the style of "ls -l". 
Name: fsdirConnect; Comment: ** Construct a new fsdir virtual table object. 
Name: fsdirDisconnect; Comment: ** This method is the destructor for fsdir vtab objects. 
Name: fsdirOpen; Comment: ** Constructor for a new fsdir_cursor object. 
Name: fsdirResetCursor; Comment: ** Reset a cursor back to the state it was in when first returned ** by fsdirOpen(). 
Name: fsdirClose; Comment: ** Destructor for an fsdir_cursor. 
Name: fsdirSetErrmsg; Comment: ** Set the error message for the virtual table associated with cursor ** pCur to the results of vprintf(zFmt, ...). 
Name: fsdirNext; Comment: ** Advance an fsdir_cursor to its next row of output. 
Name: fsdirRowid; Comment: ** Return the rowid for the current row. In this implementation, the ** first row returned is assigned rowid value 1, and each subsequent ** row a value 1 more than that of the previous. 
Name: fsdirEof; Comment: ** Return TRUE if the cursor has been moved off of the last ** row of output. 
Name: fsdirFilter; Comment: ** xFilter callback. ** ** idxNum==1 PATH parameter only ** idxNum==2 Both PATH and DIR supplied 
Name: fsdirBestIndex; Comment: ** SQLite will invoke this method one or more times while planning a query ** that uses the generate_series virtual table. This routine needs to create ** a query plan for each invocation and compute an estimated cost for that ** plan. ** ** In this implementation idxNum is used to represent the ** query plan. idxStr is unused. ** ** The query plan is represented by values of idxNum: ** ** (1) The path value is supplied by argv[0] ** (2) Path is in argv[0] and dir is in argv[1] 
Name: fsdirRegister; Comment: ** Register the "fsdir" virtual table. 
Name: completionConnect; Comment: ** The completionConnect() method is invoked to create a new ** completion_vtab that describes the completion virtual table. ** ** Think of this routine as the constructor for completion_vtab objects. ** ** All this routine needs to do is: ** ** (1) Allocate the completion_vtab object and initialize all fields. ** ** (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the ** result set of queries against completion will look like. 
Name: completionDisconnect; Comment: ** This method is the destructor for completion_cursor objects. 
Name: completionOpen; Comment: ** Constructor for a new completion_cursor object. 
Name: completionCursorReset; Comment: ** Reset the completion_cursor. 
Name: completionClose; Comment: ** Destructor for a completion_cursor. 
Name: completionNext; Comment: ** Advance a completion_cursor to its next row of output. ** ** The ->ePhase, ->j, and ->pStmt fields of the completion_cursor object ** record the current state of the scan. This routine sets ->zCurrentRow ** to the current row of output and then returns. If no more rows remain, ** then ->ePhase is set to COMPLETION_EOF which will signal the virtual ** table that has reached the end of its scan. ** ** The current implementation just lists potential identifiers and ** keywords and filters them by zPrefix. Future enhancements should ** take zLine into account to try to restrict the set of identifiers and ** keywords based on what would be legal at the current point of input. 
Name: completionRowid; Comment: ** Return the rowid for the current row. In this implementation, the ** rowid is the same as the output value. 
Name: completionEof; Comment: ** Return TRUE if the cursor has been moved off of the last ** row of output. 
Name: completionFilter; Comment: ** This method is called to "rewind" the completion_cursor object back ** to the first row of output. This method is always called at least ** once prior to any call to completionColumn() or completionRowid() or ** completionEof(). 
Name: completionBestIndex; Comment: ** SQLite will invoke this method one or more times while planning a query ** that uses the completion virtual table. This routine needs to create ** a query plan for each invocation and compute an estimated cost for that ** plan. ** ** There are two hidden parameters that act as arguments to the table-valued ** function: "prefix" and "wholeline". Bit 0 of idxNum is set if "prefix" ** is available and bit 1 is set if "wholeline" is available. 
Name: apndClose; Comment: ** Close an apnd-file. 
Name: apndRead; Comment: ** Read data from an apnd-file. 
Name: apndWriteMark; Comment: ** Add the append-mark onto the end of the file. 
Name: apndWrite; Comment: ** Write data to an apnd-file. 
Name: apndTruncate; Comment: ** Truncate an apnd-file. 
Name: apndSync; Comment: ** Sync an apnd-file. 
Name: apndFileSize; Comment: ** Return the current file-size of an apnd-file. 
Name: apndLock; Comment: ** Lock an apnd-file. 
Name: apndUnlock; Comment: ** Unlock an apnd-file. 
Name: apndCheckReservedLock; Comment: ** Check if another file-handle holds a RESERVED lock on an apnd-file. 
Name: apndFileControl; Comment: ** File control method. For custom operations on an apnd-file. 
Name: apndSectorSize; Comment: ** Return the sector-size in bytes for an apnd-file. 
Name: apndDeviceCharacteristics; Comment: ** Return the device characteristic flags supported by an apnd-file. 
Name: apndShmMap; Comment: Create a shared memory file mapping 
Name: apndShmLock; Comment: Perform locking on a shared-memory segment 
Name: apndShmBarrier; Comment: Memory barrier operation on shared memory 
Name: apndShmUnmap; Comment: Unmap a shared memory segment 
Name: apndFetch; Comment: Fetch a page of a memory-mapped file 
Name: apndUnfetch; Comment: Release a memory-mapped page 
Name: apndIsOrdinaryDatabaseFile; Comment: ** Check to see if the file is an ordinary SQLite database file. 
Name: apndOpen; Comment: ** Open an apnd file handle. 
Name: apndDelete; Comment: ** All other VFS methods are pass-thrus. 
Name: sqlite3_appendvfs_init; Comment: ** This routine is called when the extension is loaded. ** Register the new VFS. 
Name: memtraceMalloc; Comment: Methods that trace memory allocations 
Name: sqlite3MemTraceActivate; Comment: Begin tracing memory allocations to out. 
Name: sqlite3MemTraceDeactivate; Comment: Deactivate memory tracing 
Name: uintCollFunc; Comment: ** Compare text in lexicographic order, except strings of digits ** compare in numeric order. 
Name: decimal_clear; Comment: ** Release memory held by a Decimal, but do not free the object itself. 
Name: decimal_free; Comment: ** Destroy a Decimal object 
Name: decimal_new; Comment: ** Allocate a new Decimal object. Initialize it to the number given ** by the input string. 
Name: decimal_result; Comment: ** Make the given Decimal the result. 
Name: decimalFunc; Comment: ** SQL Function: decimal(X) ** ** Convert input X into decimal and then back into text 
Name: decimal_cmp; Comment: ** Compare to Decimal objects. Return negative, 0, or positive if the ** first object is less than, equal to, or greater than the second. ** ** Preconditions for this routine: ** ** pA!=0 ** pA->isNull==0 ** pB!=0 ** pB->isNull==0 
Name: decimalCmpFunc; Comment: ** SQL Function: decimal_cmp(X, Y) ** ** Return negative, zero, or positive if X is less then, equal to, or ** greater than Y. 
Name: decimal_expand; Comment: ** Expand the Decimal so that it has a least nDigit digits and nFrac ** digits to the right of the decimal point. 
Name: decimal_add; Comment: ** Add the value pB into pA. ** ** Both pA and pB might become denormalized by this routine. 
Name: decimalCollFunc; Comment: ** Compare text in decimal order. 
Name: decimalAddFunc; Comment: ** SQL Function: decimal_add(X, Y) ** decimal_sub(X, Y) ** ** Return the sum or difference of X and Y. 
Name: decimalSumStep; Comment: Aggregate funcion: decimal_sum(X)** ** Works like sum() except that it uses decimal arithmetic for unlimited ** precision. 
Name: decimalMulFunc; Comment: ** SQL Function: decimal_mul(X, Y) ** ** Return the product of X and Y. ** ** All significant digits after the decimal point are retained. ** Trailing zeros after the decimal point are omitted as long as ** the number of digits after the decimal point is no less than ** either the number of digits in either input. 
Name: ieee754func; Comment: ** Implementation of the ieee754() function 
Name: ieee754func_from_blob; Comment: ** Functions to convert between blobs and floats. 
Name: seriesConnect; Comment: ** The seriesConnect() method is invoked to create a new ** series_vtab that describes the generate_series virtual table. ** ** Think of this routine as the constructor for series_vtab objects. ** ** All this routine needs to do is: ** ** (1) Allocate the series_vtab object and initialize all fields. ** ** (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the ** result set of queries against generate_series will look like. 
Name: seriesDisconnect; Comment: ** This method is the destructor for series_cursor objects. 
Name: seriesOpen; Comment: ** Constructor for a new series_cursor object. 
Name: seriesClose; Comment: ** Destructor for a series_cursor. 
Name: seriesNext; Comment: ** Advance a series_cursor to its next row of output. 
Name: seriesRowid; Comment: ** Return the rowid for the current row. In this implementation, the ** first row returned is assigned rowid value 1, and each subsequent ** row a value 1 more than that of the previous. 
Name: seriesEof; Comment: ** Return TRUE if the cursor has been moved off of the last ** row of output. 
Name: seriesFilter; Comment: ** This method is called to "rewind" the series_cursor object back ** to the first row of output. This method is always called at least ** once prior to any call to seriesColumn() or seriesRowid() or ** seriesEof(). ** ** The query plan selected by seriesBestIndex is passed in the idxNum ** parameter. (idxStr is not used in this implementation.) idxNum ** is a bitmask showing which constraints are available: ** ** 1: start=VALUE ** 2: stop=VALUE ** 4: step=VALUE ** ** Also, if bit 8 is set, that means that the series should be output ** in descending order rather than in ascending order. ** ** This routine should initialize the cursor and position it so that it ** is pointing at the first row, or pointing off the end of the table ** (so that seriesEof() will return true) if the table is empty. 
Name: seriesBestIndex; Comment: ** SQLite will invoke this method one or more times while planning a query ** that uses the generate_series virtual table. This routine needs to create ** a query plan for each invocation and compute an estimated cost for that ** plan. ** ** In this implementation idxNum is used to represent the ** query plan. idxStr is unused. ** ** The query plan is represented by bits in idxNum: ** ** (1) start = $value -- constraint exists ** (2) stop = $value -- constraint exists ** (4) step = $value -- constraint exists ** (8) output in descending order 
Name: zipfileCtxErrorMsg; Comment: ** Set the error message contained in context ctx to the results of ** vprintf(zFmt, ...). 
Name: zipfileDequote; Comment: ** If string zIn is quoted, dequote it in place. Otherwise, if the string ** is not quoted, do nothing. 
Name: zipfileConnect; Comment: ** Construct a new ZipfileTab virtual table object. ** ** argv[0] -> module name ("zipfile") ** argv[1] -> database name ** argv[2] -> table name ** argv[...] -> "column name" and other module argument fields. 
Name: zipfileEntryFree; Comment: ** Free the ZipfileEntry structure indicated by the only argument. 
Name: zipfileCleanupTransaction; Comment: ** Release resources that should be freed at the end of a write ** transaction. 
Name: zipfileDisconnect; Comment: ** This method is the destructor for zipfile vtab objects. 
Name: zipfileOpen; Comment: ** Constructor for a new ZipfileCsr object. 
Name: zipfileResetCursor; Comment: ** Reset a cursor back to the state it was in when first returned ** by zipfileOpen(). 
Name: zipfileClose; Comment: ** Destructor for an ZipfileCsr. 
Name: zipfileTableErr; Comment: ** Set the error message for the virtual table associated with cursor ** pCsr to the results of vprintf(zFmt, ...). 
Name: zipfileGetU16; Comment: ** Read and return a 16-bit little-endian unsigned integer from buffer aBuf. 
Name: zipfileGetU32; Comment: ** Read and return a 32-bit little-endian unsigned integer from buffer aBuf. 
Name: zipfilePutU16; Comment: ** Write a 16-bit little endiate integer into buffer aBuf. 
Name: zipfilePutU32; Comment: ** Write a 32-bit little endiate integer into buffer aBuf. 
Name: zipfileReadCDS; Comment: ** Decode the CDS record in buffer aBuf into (*pCDS). Return SQLITE_ERROR ** if the record is not well-formed, or SQLITE_OK otherwise. 
Name: zipfileReadLFH; Comment: ** Decode the LFH record in buffer aBuf into (*pLFH). Return SQLITE_ERROR ** if the record is not well-formed, or SQLITE_OK otherwise. 
Name: zipfileScanExtra; Comment: ** Buffer aExtra (size nExtra bytes) contains zip archive "extra" fields. ** Scan through this buffer to find an "extra-timestamp" field. If one ** exists, extract the 32-bit modification-timestamp from it and store ** the value in output parameter *pmTime. ** ** Zero is returned if no extra-timestamp record could be found (and so ** *pmTime is left unchanged), or non-zero otherwise. ** ** The general format of an extra field is: ** ** Header ID 2 bytes ** Data Size 2 bytes ** Data N bytes 
Name: zipfileMtime; Comment: Convert the standard MS-DOS timestamp stored in the mTime and mDate fields of the CDS structure passed as the only argument to a 32-bit UNIX seconds-since-the-epoch timestamp. Return the result. "Standard" MS-DOS time format: File modification time: Bits 00-04: seconds divided by 2 Bits 05-10: minute Bits 11-15: hour File modification date: Bits 00-04: day Bits 05-08: month (1-12) Bits 09-15: years from 1980 https:msdn.microsoft.comen-uslibrary9kkf9tah.aspx
Name: zipfileMtimeToDos; Comment: ** The opposite of zipfileMtime(). This function populates the mTime and ** mDate fields of the CDS structure passed as the first argument according ** to the UNIX timestamp value passed as the second. 
Name: zipfileNext; Comment: ** Advance an ZipfileCsr to its next row of output. 
Name: zipfileEof; Comment: ** Return TRUE if the cursor is at EOF. 
Name: zipfileAddEntry; Comment: ** Add object pNew to the linked list that begins at ZipfileTab.pFirstEntry ** and ends with pLastEntry. If argument pBefore is NULL, then pNew is added ** to the end of the list. Otherwise, it is added to the list immediately ** before pBefore (which is guaranteed to be a part of said list). 
Name: zipfileFilter; Comment: ** xFilter callback. 
Name: zipfileBestIndex; Comment: ** xBestIndex callback. 
Name: zipfileComparePath; Comment: ** Both (const char*) arguments point to nul-terminated strings. Argument ** nB is the value of strlen(zB). This function returns 0 if the strings are ** identical, ignoring any trailing '/' character in either path. 
Name: zipfileTime; Comment: ** Return the current time as a 32-bit timestamp in UNIX epoch format (like ** time(2)). 
Name: zipfileGetTime; Comment: ** Return a 32-bit timestamp in UNIX epoch format. ** ** If the value passed as the only argument is either NULL or an SQL NULL, ** return the current time. Otherwise, return the value stored in (*pVal) ** cast to a 32-bit unsigned integer. 
Name: zipfileRemoveEntryFromList; Comment: ** Unless it is NULL, entry pOld is currently part of the pTab->pFirstEntry ** linked list. Remove it from the list and free the object. 
Name: zipfileUpdate; Comment: ** xUpdate method. 
Name: zipfileSerializeCDS; Comment: ** Serialize the CDS structure into buffer aBuf[]. Return the number ** of bytes written. 
Name: zipfileStep; Comment: ** xStep() callback for the zipfile() aggregate. This can be called in ** any of the following ways: ** ** SELECT zipfile(name,data) ... ** SELECT zipfile(name,mode,mtime,data) ... ** SELECT zipfile(name,mode,mtime,data,method) ... 
Name: zipfileFinal; Comment: ** xFinalize() callback for zipfile aggregate function. 
Name: zipfileRegister; Comment: ** Register the "zipfile" virtual table. 
Name: sqlarCompressFunc; Comment: ** Implementation of the "sqlar_compress(X)" SQL function. ** ** If the type of X is SQLITE_BLOB, and compressing that blob using ** zlib utility function compress() yields a smaller blob, return the ** compressed blob. Otherwise, return a copy of X. ** ** SQLar uses the "zlib format" for compressed content. The zlib format ** contains a two-byte identification header and a four-byte checksum at ** the end. This is different from ZIP which uses the raw deflate format. ** ** Future enhancements to SQLar might add support for new compression formats. ** If so, those new formats will be identified by alternative headers in the ** compressed data. 
Name: sqlarUncompressFunc; Comment: ** Implementation of the "sqlar_uncompress(X,SZ)" SQL function ** ** Parameter SZ is interpreted as an integer. If it is less than or ** equal to zero, then this function returns a copy of X. Or, if ** SZ is equal to the size of X when interpreted as a blob, also ** return a copy of X. Otherwise, decompress blob X using zlib ** utility function uncompress() and return the results (another ** blob). 
Name: idxMalloc; Comment: ** Allocate and return nByte bytes of zeroed memory using sqlite3_malloc(). ** If the allocation fails, set *pRc to SQLITE_NOMEM and return NULL. 
Name: idxHashInit; Comment: ** Initialize an IdxHash hash table. 
Name: idxHashClear; Comment: ** Reset an IdxHash hash table. 
Name: idxHashString; Comment: ** Return the index of the hash bucket that the string specified by the ** arguments to this function belongs. 
Name: idxHashAdd; Comment: ** If zKey is already present in the hash table, return non-zero and do ** nothing. Otherwise, add an entry with key zKey and payload string zVal to ** the hash table passed as the second argument. 
Name: idxHashFind; Comment: ** If zKey/nKey is present in the hash table, return a pointer to the ** hash-entry object. 
Name: idxHashSearch; Comment: ** If the hash table contains an entry with a key equal to the string ** passed as the final two arguments to this function, return a pointer ** to the payload string. Otherwise, if zKey/nKey is not present in the ** hash table, return NULL. 
Name: idxNewConstraint; Comment: ** Allocate and return a new IdxConstraint object. Set the IdxConstraint.zColl ** variable to point to a copy of nul-terminated string zColl. 
Name: expertConnect; Comment: ** This function is the implementation of both the xConnect and xCreate ** methods of the r-tree virtual table. ** ** argv[0] -> module name ** argv[1] -> database name ** argv[2] -> table name ** argv[...] -> column names... 
Name: expertOpen; Comment: ** Virtual table module xOpen method. 
Name: expertClose; Comment: ** Virtual table module xClose method. 
Name: expertEof; Comment: ** Virtual table module xEof method. ** ** Return non-zero if the cursor does not currently point to a valid ** record (i.e if the scan has finished), or zero otherwise. 
Name: expertNext; Comment: ** Virtual table module xNext method. 
Name: expertRowid; Comment: ** Virtual table module xRowid method. 
Name: expertColumn; Comment: ** Virtual table module xColumn method. 
Name: expertFilter; Comment: ** Virtual table module xFilter method. 
Name: idxFinalize; Comment: ** Finalize SQL statement pStmt. If (*pRc) is SQLITE_OK when this function ** is called, set it to the return value of sqlite3_finalize() before ** returning. Otherwise, discard the sqlite3_finalize() return value. 
Name: idxAppendText; Comment: ** This function is a no-op if *pRc is set to anything other than ** SQLITE_OK when it is called. ** ** If *pRc is initially set to SQLITE_OK, then the text specified by ** the printf() style arguments is appended to zIn and the result returned ** in a buffer allocated by sqlite3_malloc(). sqlite3_free() is called on ** zIn before returning. 
Name: idxIdentifierRequiresQuotes; Comment: ** Return true if zId must be quoted in order to use it as an SQL ** identifier, or false otherwise. 
Name: idxFindConstraint; Comment: ** Return true if list pList (linked by IdxConstraint.pLink) contains ** a constraint compatible with *p. Otherwise return false. 
Name: idxCreateCandidates; Comment: ** Create candidate indexes in database [dbm] based on the data in ** linked-list pScan. 
Name: idxConstraintFree; Comment: ** Free all elements of the linked list starting at pConstraint. 
Name: idxScanFree; Comment: ** Free all elements of the linked list starting from pScan up until pLast ** (pLast is not freed). 
Name: idxStatementFree; Comment: ** Free all elements of the linked list starting from pStatement up ** until pLast (pLast is not freed). 
Name: idxTableFree; Comment: ** Free the linked list of IdxTable objects starting at pTab. 
Name: idxWriteFree; Comment: ** Free the linked list of IdxWrite objects starting at pTab. 
Name: idxRemFunc; Comment: ** Implementation of scalar function rem(). 
Name: idxPopulateStat1; Comment: ** This function is called as part of sqlite3_expert_analyze(). Candidate ** indexes have already been created in database sqlite3expert.dbm, this ** function populates sqlite_stat1 table in the same database. ** ** The stat1 data is generated by querying the 
Name: sqlite3_expert_new; Comment: ** Allocate a new sqlite3expert object. 
Name: sqlite3_expert_config; Comment: ** Configure an sqlite3expert object. 
Name: sqlite3_expert_count; Comment: ** Return the total number of statements that have been added to this ** sqlite3expert using sqlite3_expert_sql(). 
Name: sqlite3_expert_report; Comment: ** Return a component of the report. 
Name: sqlite3_expert_destroy; Comment: ** Free an sqlite3expert object. 
Name: dbdataConnect; Comment: ** Connect to an sqlite_dbdata (pAux==0) or sqlite_dbptr (pAux!=0) virtual ** table. 
Name: dbdataDisconnect; Comment: ** Disconnect from or destroy a sqlite_dbdata or sqlite_dbptr virtual table. 
Name: dbdataBestIndex; Comment: ** This function interprets two types of constraints: ** ** schema=? ** pgno=? ** ** If neither are present, idxNum is set to 0. If schema=? is present, ** the 0x01 bit in idxNum is set. If pgno=? is present, the 0x02 bit ** in idxNum is set. ** ** If both parameters are present, schema is in position 0 and pgno in ** position 1. 
Name: dbdataOpen; Comment: ** Open a new sqlite_dbdata or sqlite_dbptr cursor. 
Name: dbdataResetCursor; Comment: ** Restore a cursor object to the state it was in when first allocated ** by dbdataOpen(). 
Name: dbdataClose; Comment: ** Close an sqlite_dbdata or sqlite_dbptr cursor. 
Name: get_uint16; Comment: ** Utility methods to decode 16 and 32-bit big-endian unsigned integers. 
Name: dbdataGetVarint; Comment: ** Read a varint. Put the value in *pVal and return the number of bytes. 
Name: dbdataValueBytes; Comment: ** Return the number of bytes of space used by an SQLite value of type ** eType. 
Name: dbdataValue; Comment: ** Load a value of type eType from buffer pData and use it to set the ** result of context object pCtx. 
Name: dbdataNext; Comment: ** Move an sqlite_dbdata or sqlite_dbptr cursor to the next entry. 
Name: dbdataEof; Comment: ** Return true if the cursor is at EOF. 
Name: dbdataDbsize; Comment: ** Determine the size in pages of database zSchema (where zSchema is ** "main", "temp" or the name of an attached database) and set ** pCsr->szDb accordingly. If successful, return SQLITE_OK. Otherwise, ** an SQLite error code. 
Name: dbdataFilter; Comment: ** xFilter method for sqlite_dbdata and sqlite_dbptr. 
Name: dbdataColumn; Comment: ** Return a column for the sqlite_dbdata or sqlite_dbptr table. 
Name: dbdataRowid; Comment: ** Return the rowid for an sqlite_dbdata or sqlite_dptr table. 
Name: sqlite3DbdataRegister; Comment: ** Invoke this routine to register the "sqlite_dbdata" virtual table module 
Name: shellLog; Comment: ** A callback for the sqlite3_log() interface. 
Name: shellPutsFunc; Comment: ** SQL function: shell_putsnl(X) ** ** Write the text X to the screen (or whatever output is being directed) ** adding a newline at the end, and then return X. 
Name: outputModePush; Comment: ** Save or restore the current output mode 
Name: output_hex_blob; Comment: ** Output the given string as a hex-encoded blob (eg. X'1234' ) 
Name: output_quoted_string; Comment: ** Output the given string as a quoted string using SQL quoting conventions. ** ** See also: output_quoted_escaped_string() 
Name: output_quoted_escaped_string; Comment: ** Output the given string as a quoted string using SQL quoting conventions. ** Additionallly , escape the "_n" and "_r" characters so that they do not ** get corrupted by end-of-line translation facilities in some operating ** systems. ** ** This is like output_quoted_string() but with the addition of the _r_n ** escape mechanism. 
Name: output_c_string; Comment: ** Output the given string as a quoted according to C or TCL quoting rules. 
Name: output_json_string; Comment: ** Output the given string as a quoted according to JSON quoting rules. 
Name: output_html_string; Comment: ** Output the given string with characters that are special to ** HTML escaped. 
Name: output_csv; Comment: ** Output a single term of CSV. Actually, p->colSeparator is used for ** the separator, which may or may not be a comma. p->nullValue is ** the null value. Strings are quoted if necessary. The separator ** is only issued if bSep is true. 
Name: interrupt_handler; Comment: ** This routine runs when the user presses Ctrl-C 
Name: shellAuth; Comment: ** When the ".auth ON" is set, the following authorizer callback is ** invoked. It always returns SQLITE_OK. 
Name: printSchemaLine; Comment: ** Print a schema statement. Part of MODE_Semi and MODE_Pretty output. ** ** This routine converts some CREATE TABLE statements for shadow tables ** in FTS3/4/5 into CREATE TABLE IF NOT EXISTS statements. 
Name: wsToEol; Comment: ** Return true if string z[] has nothing but whitespace and comments to the ** end of the first line. 
Name: eqp_append; Comment: ** Add a new entry to the EXPLAIN QUERY PLAN data 
Name: eqp_reset; Comment: ** Free and reset the EXPLAIN QUERY PLAN data that has been collected ** in p->sGraph. 
Name: eqp_next_row; Comment: Return the next EXPLAIN QUERY PLAN line with iEqpId that occurs after** pOld, or return the first such line if pOld is NULL 
Name: eqp_render_level; Comment: Render a single level of the graph that has iEqpId as its parent. Called** recursively to render sublevels. 
Name: eqp_render; Comment: ** Display and reset the EXPLAIN QUERY PLAN data 
Name: progress_handler; Comment: ** Progress handler callback. 
Name: print_dashes; Comment: ** Print N dashes 
Name: print_row_separator; Comment: ** Print a markdown or table-style row separator using ascii-art 
Name: sqlite3StatusValue; Comment: ** Return the current value of a status parameter. The caller must ** be holding the appropriate mutex. 
Name: sqlite3StatusUp; Comment: ** Add N to the value of a status record. The caller must hold the ** appropriate mutex. (Locking is checked by assert()). ** ** The StatusUp() routine can accept positive or negative values for N. ** The value of N is added to the current status value and the high-water ** mark is adjusted if necessary. ** ** The StatusDown() routine lowers the current value by N. The highwater ** mark is unchanged. N must be non-negative for StatusDown(). 
Name: sqlite3StatusHighwater; Comment: ** Adjust the highwater mark if necessary. ** The caller must hold the appropriate mutex. 
Name: sqlite3_status64; Comment: ** Query status information. 
Name: countLookasideSlots; Comment: ** Return the number of LookasideSlot elements on the linked list 
Name: sqlite3LookasideUsed; Comment: ** Count the number of slots of lookaside memory that are outstanding 
Name: getDigits; Comment: ** Convert zDate into one or more integers according to the conversion ** specifier zFormat. ** ** zFormat[] contains 4 characters for each integer converted, except for ** the last integer which is specified by three characters. The meaning ** of a four-character format specifiers ABCD is: ** ** A: number of digits to convert. Always "2" or "4". ** B: minimum value. Always "0" or "1". ** C: maximum value, decoded as: ** a: 12 ** b: 14 ** c: 24 ** d: 31 ** e: 59 ** f: 9999 ** D: the separator character, or _000 to indicate this is the ** last number to convert. ** ** Example: To translate an ISO-8601 date YYYY-MM-DD, the format would ** be "40f-21a-20c". The "40f-" indicates the 4-digit year followed by "-". ** The "21a-" indicates the 2-digit month followed by "-". The "20c" indicates ** the 2-digit day which is the last integer in the set. ** ** The function returns the number of successful conversions. 
Name: parseTimezone; Comment: ** Parse a timezone extension on the end of a date-time. ** The extension is of the form: ** ** (+/-)HH:MM ** ** Or the "zulu" notation: ** ** Z ** ** If the parse is successful, write the number of minutes ** of change in p->tz and return 0. If a parser error occurs, ** return non-zero. ** ** A missing specifier is not considered an error. 
Name: parseHhMmSs; Comment: ** Parse times of the form HH:MM or HH:MM:SS or HH:MM:SS.FFFF. ** The HH, MM, and SS must each be exactly 2 digits. The ** fractional seconds FFFF can be one or more digits. ** ** Return 1 if there is a parsing error and 0 on success. 
Name: datetimeError; Comment: ** Put the DateTime object into its error state. 
Name: computeJD; Comment: ** Convert from YYYY-MM-DD HH:MM:SS to julian day. We always assume ** that the YYYY-MM-DD is according to the Gregorian calendar. ** ** Reference: Meeus page 61 
Name: parseYyyyMmDd; Comment: ** Parse dates of the form ** ** YYYY-MM-DD HH:MM:SS.FFF ** YYYY-MM-DD HH:MM:SS ** YYYY-MM-DD HH:MM ** YYYY-MM-DD ** ** Write the result into the DateTime structure and return 0 ** on success and 1 if the input string is not a well-formed ** date. 
Name: setDateTimeToCurrent; Comment: ** Set the time to the current time reported by the VFS. ** ** Return the number of errors. 
Name: setRawDateNumber; Comment: ** Input "r" is a numeric quantity which might be a julian day number, ** or the number of seconds since 1970. If the value if r is within ** range of a julian day number, install it as such and set validJD. ** If the value is a valid unix timestamp, put it in p->s and set p->rawS. 
Name: parseDateOrTime; Comment: ** Attempt to parse the given string into a julian day number. Return ** the number of errors. ** ** The following are acceptable forms for the input string: ** ** YYYY-MM-DD HH:MM:SS.FFF +/-HH:MM ** DDDD.DD ** now ** ** In the first form, the +/-HH:MM is always optional. The fractional ** seconds extension (the ".FFF") is optional. The seconds portion ** (":SS.FFF") is option. The year and date can be omitted as long ** as there is a time string. The time string can be omitted as long ** as there is a year and date. 
Name: validJulianDay; Comment: ** Return TRUE if the given julian day number is within range. ** ** The input is the JulianDay times 86400000. 
Name: computeYMD; Comment: ** Compute the Year, Month, and Day from the julian day number. 
Name: computeHMS; Comment: ** Compute the Hour, Minute, and Seconds from the julian day number. 
Name: computeYMD_HMS; Comment: ** Compute both YMD and HMS 
Name: clearYMD_HMS_TZ; Comment: ** Clear the YMD and HMS and the TZ 
Name: osLocaltime; Comment: ** The following routine implements the rough equivalent of localtime_r() ** using whatever operating-system specific localtime facility that ** is available. This routine returns 0 on success and ** non-zero on any kind of error. ** ** If the sqlite3GlobalConfig.bLocaltimeFault variable is true then this ** routine will always fail. ** ** EVIDENCE-OF: R-62172-00036 In this implementation, the standard C ** library function localtime_r() is used to assist in the calculation of ** local time. 
Name: isDate; Comment: ** Process time function arguments. argv[0] is a date-time stamp. ** argv[1] and following are modifiers. Parse them all and write ** the resulting time into the DateTime structure p. Return 0 ** on success and 1 if there are any errors. ** ** If there are zero parameters (if even argv[0] is undefined) ** then assume a default value of "now" for argv[0]. 
Name: juliandayFunc; Comment: ** julianday( TIMESTRING, MOD, MOD, ...) ** ** Return the julian day number of the date specified in the arguments 
Name: datetimeFunc; Comment: ** datetime( TIMESTRING, MOD, MOD, ...) ** ** Return YYYY-MM-DD HH:MM:SS 
Name: timeFunc; Comment: ** time( TIMESTRING, MOD, MOD, ...) ** ** Return HH:MM:SS 
Name: dateFunc; Comment: ** date( TIMESTRING, MOD, MOD, ...) ** ** Return YYYY-MM-DD 
Name: strftimeFunc; Comment: ** strftime( FORMAT, TIMESTRING, MOD, MOD, ...) ** ** Return a string described by FORMAT. Conversions as follows: ** ** %d day of month ** %f ** fractional seconds SS.SSS ** %H hour 00-24 ** %j day of year 000-366 ** %J ** julian day number ** %m month 01-12 ** %M minute 00-59 ** %s seconds since 1970-01-01 ** %S seconds 00-59 ** %w day of week 0-6 sunday==0 ** %W week of year 00-53 ** %Y year 0000-9999 ** %% % 
Name: ctimeFunc; Comment: ** current_time() ** ** This function returns the same value as time('now'). 
Name: cdateFunc; Comment: ** current_date() ** ** This function returns the same value as date('now'). 
Name: ctimestampFunc; Comment: ** current_timestamp() ** ** This function returns the same value as datetime('now'). 
Name: currentTimeFunc; Comment: ** If the library is compiled to omit the full-scale date and time ** handling (to get a smaller binary), the following minimal version ** of the functions current_time(), current_date() and current_timestamp() ** are included instead. This is to support column declarations that ** include "DEFAULT CURRENT_TIME" etc. ** ** This function uses the C-library functions time(), gmtime() ** and strftime(). The format string to pass to strftime() is supplied ** as the user-data for the function. 
Name: sqlite3RegisterDateTimeFunctions; Comment: ** This function registered all of the above C functions as SQL ** functions. This should be the only routine in this file with ** external linkage. 
Name: sqlite3OsClose; Comment: ** The following routines are convenience wrappers around methods ** of the sqlite3_file object. This is mostly just syntactic sugar. All ** of this would be completely automatic if SQLite were coded using ** C++ instead of plain old C. 
Name: sqlite3OsFileControl; Comment: ** Use sqlite3OsFileControl() when we are doing something that might fail ** and we need to know about the failures. Use sqlite3OsFileControlHint() ** when simply tossing information over the wall to the VFS and we do not ** really care if the VFS receives and understands the information since it ** is only a hint and can be safely ignored. The sqlite3OsFileControlHint() ** routine has no return value since the return value would be meaningless. 
Name: sqlite3OsFetch; Comment: The real implementation of xFetch and xUnfetch 
Name: sqlite3OsFetch; Comment: No-op stubs to use when memory-mapped I/O is disabled 
Name: sqlite3OsOpen; Comment: ** The next group of routines are convenience wrappers around the ** VFS methods. 
Name: sqlite3OsInit; Comment: ** This function is a wrapper around the OS specific implementation of ** sqlite3_os_init(). The purpose of the wrapper is to provide the ** ability to simulate a malloc failure, so that the handling of an ** error in sqlite3_os_init() by the upper layers can be tested. 
Name: sqlite3_vfs_find; Comment: ** Locate a VFS by name. If no name is given, simply return the ** first VFS on the list. 
Name: vfsUnlink; Comment: ** Unlink a VFS from the linked list 
Name: sqlite3_vfs_register; Comment: ** Register a VFS with the system. It is harmless to register the same ** VFS multiple times. The new VFS becomes the default if makeDflt is ** true. 
Name: sqlite3_vfs_unregister; Comment: ** Unregister a VFS so that it is no longer accessible. 
Name: sqlite3BenignMallocHooks; Comment: ** Register hooks to call when sqlite3BeginBenignMalloc() and ** sqlite3EndBenignMalloc() are called, respectively. 
Name: sqlite3BeginBenignMalloc; Comment: ** This (sqlite3EndBenignMalloc()) is called by SQLite code to indicate that ** subsequent malloc failures are benign. A call to sqlite3EndBenignMalloc() ** indicates that subsequent malloc failures are non-benign. 
Name: sqlite3MemSetDefault; Comment: ** This routine is the only routine in this file with external linkage. ** ** Populate the low-level memory allocation function pointers in ** sqlite3GlobalConfig.m with pointers to the routines in this file. 
Name: sqlite3MemMalloc; Comment: ** Like malloc(), but remember the size of the allocation ** so that we can find it later using sqlite3MemSize(). ** ** For this low-level routine, we are guaranteed that nByte>0 because ** cases of nByte<=0 will be intercepted and dealt with by higher level ** routines. 
Name: sqlite3MemFree; Comment: ** Like free() but works for allocations obtained from sqlite3MemMalloc() ** or sqlite3MemRealloc(). ** ** For this low-level routine, we already know that pPrior!=0 since ** cases where pPrior==0 will have been intecepted and dealt with ** by higher-level routines. 
Name: sqlite3MemSize; Comment: ** Report the allocated size of a prior return from xMalloc() ** or xRealloc(). 
Name: sqlite3MemRealloc; Comment: ** Like realloc(). Resize an allocation previously obtained from ** sqlite3MemMalloc(). ** ** For this low-level interface, we know that pPrior!=0. Cases where ** pPrior==0 while have been intercepted by higher-level routine and ** redirected to xMalloc. Similarly, we know that nByte>0 because ** cases where nByte<=0 will have been intercepted by higher-level ** routines and redirected to xFree. 
Name: sqlite3MemRoundup; Comment: ** Round up a request size to the next valid allocation size. 
Name: sqlite3MemInit; Comment: ** Initialize this module. 
Name: sqlite3MemShutdown; Comment: ** Deinitialize this module. 
Name: adjustStats; Comment: ** Adjust memory usage statistics 
Name: sqlite3MemsysGetHeader; Comment: ** Given an allocation, find the MemBlockHdr for that allocation. ** ** This routine checks the guards at either end of the allocation and ** if they are incorrect it asserts. 
Name: sqlite3MemSize; Comment: ** Return the number of bytes currently allocated at address p. 
Name: sqlite3MemInit; Comment: ** Initialize the memory allocation subsystem. 
Name: sqlite3MemShutdown; Comment: ** Deinitialize the memory allocation subsystem. 
Name: randomFill; Comment: ** Fill a buffer with pseudo-random bytes. This is used to preset ** the content of a new memory allocation to unpredictable values and ** to clear the content of a freed allocation to unpredictable values. 
Name: sqlite3MemMalloc; Comment: ** Allocate nByte bytes of memory. 
Name: sqlite3MemFree; Comment: ** Free memory. 
Name: sqlite3MemRealloc; Comment: ** Change the size of an existing memory allocation. ** ** For this debugging implementation, we *always* make a copy of the ** allocation into a new place in memory. In this way, if the ** higher level code is using pointer to the old allocation, it is ** much more likely to break and we are much more liking to find ** the error. 
Name: sqlite3MemSetDefault; Comment: ** Populate the low-level memory allocation function pointers in ** sqlite3GlobalConfig.m with pointers to the routines in this file. 
Name: sqlite3MemdebugSetType; Comment: ** Set the "type" of an allocation. 
Name: sqlite3MemdebugBacktrace; Comment: ** Set the number of backtrace levels kept for each allocation. ** A value of zero turns off backtracing. The number is always rounded ** up to a multiple of 2. 
Name: sqlite3MemdebugSettitle; Comment: ** Set the title string for subsequent allocations. 
Name: sqlite3MemdebugDump; Comment: ** Open the file indicated and write a log of all unfreed memory ** allocations into that log. 
Name: sqlite3MemdebugMallocCount; Comment: ** Return the number of times sqlite3MemMalloc() has been called. 
Name: memsys3UnlinkFromList; Comment: ** Unlink the chunk at mem3.aPool[i] from list it is currently ** on. *pRoot is the list that i is a member of. 
Name: memsys3Unlink; Comment: ** Unlink the chunk at index i from ** whatever list is currently a member of. 
Name: memsys3LinkIntoList; Comment: ** Link the chunk at mem3.aPool[i] so that is on the list rooted ** at *pRoot. 
Name: memsys3Link; Comment: ** Link the chunk at index i into either the appropriate ** small chunk list, or into the large chunk hash table. 
Name: memsys3Enter; Comment: ** If the STATIC_MEM mutex is not already held, obtain it now. The mutex ** will already be held (obtained by code in malloc.c) if ** sqlite3GlobalConfig.bMemStat is true. 
Name: memsys3OutOfMemory; Comment: ** Called when we are unable to satisfy an allocation of nBytes. 
Name: memsys3Checkout; Comment: ** Chunk i is a free chunk that has been unlinked. Adjust its ** size parameters for check-out and return a pointer to the ** user portion of the chunk. 
Name: memsys3FromKeyBlk; Comment: ** Carve a piece off of the end of the mem3.iKeyBlk free chunk. ** Return a pointer to the new allocation. Or, if the key chunk ** is not large enough, return 0. 
Name: memsys3Merge; Comment: ** *pRoot is the head of a list of free chunks of the same size ** or same size hash. In other words, *pRoot is an entry in either ** mem3.aiSmall[] or mem3.aiHash[]. ** ** This routine examines all entries on the given list and tries ** to coalesce each entries with adjacent free chunks. ** ** If it sees a chunk that is larger than mem3.iKeyBlk, it replaces ** the current mem3.iKeyBlk with the new larger chunk. In order for ** this mem3.iKeyBlk replacement to work, the key chunk must be ** linked into the hash tables. That is not the normal state of ** affairs, of course. The calling routine must link the key ** chunk before invoking this routine, then must unlink the (possibly ** changed) key chunk once this routine has finished. 
Name: memsys3MallocUnsafe; Comment: ** Return a block of memory of at least nBytes in size. ** Return NULL if unable. ** ** This function assumes that the necessary mutexes, if any, are ** already held by the caller. Hence "Unsafe". 
Name: memsys3FreeUnsafe; Comment: ** Free an outstanding memory allocation. ** ** This function assumes that the necessary mutexes, if any, are ** already held by the caller. Hence "Unsafe". 
Name: memsys3Size; Comment: ** Return the size of an outstanding allocation, in bytes. The ** size returned omits the 8-byte header overhead. This only ** works for chunks that are currently checked out. 
Name: memsys3Roundup; Comment: ** Round up a request size to the next valid allocation size. 
Name: memsys3Malloc; Comment: ** Allocate nBytes of memory. 
Name: memsys3Free; Comment: ** Free memory. 
Name: memsys3Realloc; Comment: ** Change the size of an existing memory allocation 
Name: memsys3Init; Comment: ** Initialize this module. 
Name: memsys3Shutdown; Comment: ** Deinitialize this module. 
Name: sqlite3Memsys3Dump; Comment: ** Open the file indicated and write a log of all unfreed memory ** allocations into that log. 
Name: sqlite3MemGetMemsys3; Comment: ** This routine is the only routine in this file with external ** linkage. ** ** Populate the low-level memory allocation function pointers in ** sqlite3GlobalConfig.m with pointers to the routines in this file. The ** arguments specify the block of memory to manage. ** ** This routine is only called by sqlite3_config(), and therefore ** is not required to be threadsafe (it is not). 
Name: memsys5Unlink; Comment: ** Unlink the chunk at mem5.aPool[i] from list it is currently ** on. It should be found on mem5.aiFreelist[iLogsize]. 
Name: memsys5Link; Comment: ** Link the chunk at mem5.aPool[i] so that is on the iLogsize ** free list. 
Name: memsys5Enter; Comment: ** Obtain or release the mutex needed to access global data structures. 
Name: memsys5Size; Comment: ** Return the size of an outstanding allocation, in bytes. ** This only works for chunks that are currently checked out. 
Name: memsys5MallocUnsafe; Comment: ** Return a block of memory of at least nBytes in size. ** Return NULL if unable. Return NULL if nBytes==0. ** ** The caller guarantees that nByte is positive. ** ** The caller has obtained a mutex prior to invoking this ** routine so there is never any chance that two or more ** threads can be in this routine at the same time. 
Name: memsys5FreeUnsafe; Comment: ** Free an outstanding memory allocation. 
Name: memsys5Malloc; Comment: ** Allocate nBytes of memory. 
Name: memsys5Free; Comment: ** Free memory. ** ** The outer layer memory allocator prevents this routine from ** being called with pPrior==0. 
Name: memsys5Realloc; Comment: ** Change the size of an existing memory allocation. ** ** The outer layer memory allocator prevents this routine from ** being called with pPrior==0. ** ** nBytes is always a value obtained from a prior call to ** memsys5Round(). Hence nBytes is always a non-negative power ** of two. If nBytes==0 that means that an oversize allocation ** (an allocation larger than 0x40000000) was requested and this ** routine should return 0 without freeing pPrior. 
Name: memsys5Roundup; Comment: ** Round up a request size to the next valid allocation size. If ** the allocation is too large to be handled by this allocation system, ** return 0. ** ** All allocations must be a power of two and must be expressed by a ** 32-bit signed integer. Hence the largest allocation is 0x40000000 ** or 1073741824 bytes. 
Name: memsys5Log; Comment: ** Return the ceiling of the logarithm base 2 of iValue. ** ** Examples: memsys5Log(1) -> 0 ** memsys5Log(2) -> 1 ** memsys5Log(4) -> 2 ** memsys5Log(5) -> 3 ** memsys5Log(8) -> 3 ** memsys5Log(9) -> 4 
Name: memsys5Init; Comment: ** Initialize the memory allocator. ** ** This routine is not threadsafe. The caller must be holding a mutex ** to prevent multiple threads from entering at the same time. 
Name: memsys5Shutdown; Comment: ** Deinitialize this module. 
Name: sqlite3Memsys5Dump; Comment: ** Open the file indicated and write a log of all unfreed memory ** allocations into that log. 
Name: sqlite3MemGetMemsys5; Comment: ** This routine is the only routine in this file with external ** linkage. It returns a pointer to a static sqlite3_mem_methods ** struct populated with the memsys5 methods. 
Name: checkMutexInit; Comment: ** Initialize and deinitialize the mutex subsystem. 
Name: checkMutexAlloc; Comment: ** Allocate a mutex. 
Name: checkMutexFree; Comment: ** Free a mutex. 
Name: checkMutexEnter; Comment: ** Enter the mutex. 
Name: checkMutexTry; Comment: ** Enter the mutex (do not block). 
Name: checkMutexLeave; Comment: ** Leave the mutex. 
Name: sqlite3MutexWarnOnContention; Comment: ** Mark the SQLITE_MUTEX_RECURSIVE mutex passed as the only argument as ** one on which there should be no contention. 
Name: sqlite3MutexInit; Comment: ** Initialize the mutex system. 
Name: sqlite3MutexEnd; Comment: ** Shutdown the mutex system. This call frees resources allocated by ** sqlite3MutexInit(). 
Name: sqlite3_mutex_alloc; Comment: ** Retrieve a pointer to a static mutex or allocate a new dynamic one. 
Name: sqlite3_mutex_free; Comment: ** Free a dynamic mutex. 
Name: sqlite3_mutex_enter; Comment: ** Obtain the mutex p. If some other thread already has the mutex, block ** until it can be obtained. 
Name: sqlite3_mutex_try; Comment: ** Obtain the mutex p. If successful, return SQLITE_OK. Otherwise, if another ** thread holds the mutex and it cannot be obtained, return SQLITE_BUSY. 
Name: sqlite3_mutex_leave; Comment: ** The sqlite3_mutex_leave() routine exits a mutex that was previously ** entered by the same thread. The behavior is undefined if the mutex ** is not currently entered. If a NULL pointer is passed as an argument ** this function is a no-op. 
Name: sqlite3_mutex_held; Comment: ** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are ** intended for use inside assert() statements. 
Name: noopMutexAlloc; Comment: ** Stub routines for all mutex methods. ** ** This routines provide no mutual exclusion or error checking. 
Name: debugMutexHeld; Comment: ** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are ** intended for use inside assert() statements. 
Name: debugMutexAlloc; Comment: ** The sqlite3_mutex_alloc() routine allocates a new ** mutex and returns a pointer to it. If it returns NULL ** that means that a mutex could not be allocated. 
Name: debugMutexFree; Comment: ** This routine deallocates a previously allocated mutex. 
Name: debugMutexEnter; Comment: ** The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt ** to enter a mutex. If another thread is already within the mutex, ** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return ** SQLITE_BUSY. The sqlite3_mutex_try() interface returns SQLITE_OK ** upon successful entry. Mutexes created using SQLITE_MUTEX_RECURSIVE can ** be entered multiple times by the same thread. In such cases the, ** mutex must be exited an equal number of times before another thread ** can enter. If the same thread tries to enter any other kind of mutex ** more than once, the behavior is undefined. 
Name: debugMutexLeave; Comment: ** The sqlite3_mutex_leave() routine exits a mutex that was ** previously entered by the same thread. The behavior ** is undefined if the mutex is not currently entered or ** is not currently allocated. SQLite will never do either. 
Name: sqlite3MemoryBarrier; Comment: ** Try to provide a memory barrier operation, needed for initialization ** and also for the implementation of xShmBarrier in the VFS in cases ** where SQLite is compiled without mutexes. 
Name: pthreadMutexAlloc; Comment: ** The sqlite3_mutex_alloc() routine allocates a new ** mutex and returns a pointer to it. If it returns NULL ** that means that a mutex could not be allocated. SQLite ** will unwind its stack and return an error. The argument ** to sqlite3_mutex_alloc() is one of these integer constants: ** ** <ul> ** <li> SQLITE_MUTEX_FAST ** <li> SQLITE_MUTEX_RECURSIVE ** <li> SQLITE_MUTEX_STATIC_MAIN ** <li> SQLITE_MUTEX_STATIC_MEM ** <li> SQLITE_MUTEX_STATIC_OPEN ** <li> SQLITE_MUTEX_STATIC_PRNG ** <li> SQLITE_MUTEX_STATIC_LRU ** <li> SQLITE_MUTEX_STATIC_PMEM ** <li> SQLITE_MUTEX_STATIC_APP1 ** <li> SQLITE_MUTEX_STATIC_APP2 ** <li> SQLITE_MUTEX_STATIC_APP3 ** <li> SQLITE_MUTEX_STATIC_VFS1 ** <li> SQLITE_MUTEX_STATIC_VFS2 ** <li> SQLITE_MUTEX_STATIC_VFS3 ** </ul> ** ** The first two constants cause sqlite3_mutex_alloc() to create ** a new mutex. The new mutex is recursive when SQLITE_MUTEX_RECURSIVE ** is used but not necessarily so when SQLITE_MUTEX_FAST is used. ** The mutex implementation does not need to make a distinction ** between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does ** not want to. But SQLite will only request a recursive mutex in ** cases where it really needs one. If a faster non-recursive mutex ** implementation is available on the host platform, the mutex subsystem ** might return such a mutex in response to SQLITE_MUTEX_FAST. ** ** The other allowed parameters to sqlite3_mutex_alloc() each return ** a pointer to a static preexisting mutex. Six static mutexes are ** used by the current version of SQLite. Future versions of SQLite ** may add additional static mutexes. Static mutexes are for internal ** use by SQLite only. Applications that use SQLite mutexes should ** use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or ** SQLITE_MUTEX_RECURSIVE. ** ** Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST ** or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc() ** returns a different mutex on every call. But for the static ** mutex types, the same mutex is returned on every call that has ** the same type number. 
Name: pthreadMutexFree; Comment: ** This routine deallocates a previously ** allocated mutex. SQLite is careful to deallocate every ** mutex that it allocates. 
Name: pthreadMutexEnter; Comment: ** The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt ** to enter a mutex. If another thread is already within the mutex, ** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return ** SQLITE_BUSY. The sqlite3_mutex_try() interface returns SQLITE_OK ** upon successful entry. Mutexes created using SQLITE_MUTEX_RECURSIVE can ** be entered multiple times by the same thread. In such cases the, ** mutex must be exited an equal number of times before another thread ** can enter. If the same thread tries to enter any other kind of mutex ** more than once, the behavior is undefined. 
Name: pthreadMutexLeave; Comment: ** The sqlite3_mutex_leave() routine exits a mutex that was ** previously entered by the same thread. The behavior ** is undefined if the mutex is not currently entered or ** is not currently allocated. SQLite will never do either. 
Name: winMutexHeld; Comment: ** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are ** intended for use only inside assert() statements. 
Name: sqlite3MemoryBarrier; Comment: ** Try to provide a memory barrier operation, needed for initialization ** and also for the xShmBarrier method of the VFS in cases when SQLite is ** compiled without mutexes (SQLITE_THREADSAFE=0). 
Name: winMutexInit; Comment: os_win.c 
Name: winMutexAlloc; Comment: ** The sqlite3_mutex_alloc() routine allocates a new ** mutex and returns a pointer to it. If it returns NULL ** that means that a mutex could not be allocated. SQLite ** will unwind its stack and return an error. The argument ** to sqlite3_mutex_alloc() is one of these integer constants: ** ** <ul> ** <li> SQLITE_MUTEX_FAST ** <li> SQLITE_MUTEX_RECURSIVE ** <li> SQLITE_MUTEX_STATIC_MAIN ** <li> SQLITE_MUTEX_STATIC_MEM ** <li> SQLITE_MUTEX_STATIC_OPEN ** <li> SQLITE_MUTEX_STATIC_PRNG ** <li> SQLITE_MUTEX_STATIC_LRU ** <li> SQLITE_MUTEX_STATIC_PMEM ** <li> SQLITE_MUTEX_STATIC_APP1 ** <li> SQLITE_MUTEX_STATIC_APP2 ** <li> SQLITE_MUTEX_STATIC_APP3 ** <li> SQLITE_MUTEX_STATIC_VFS1 ** <li> SQLITE_MUTEX_STATIC_VFS2 ** <li> SQLITE_MUTEX_STATIC_VFS3 ** </ul> ** ** The first two constants cause sqlite3_mutex_alloc() to create ** a new mutex. The new mutex is recursive when SQLITE_MUTEX_RECURSIVE ** is used but not necessarily so when SQLITE_MUTEX_FAST is used. ** The mutex implementation does not need to make a distinction ** between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does ** not want to. But SQLite will only request a recursive mutex in ** cases where it really needs one. If a faster non-recursive mutex ** implementation is available on the host platform, the mutex subsystem ** might return such a mutex in response to SQLITE_MUTEX_FAST. ** ** The other allowed parameters to sqlite3_mutex_alloc() each return ** a pointer to a static preexisting mutex. Six static mutexes are ** used by the current version of SQLite. Future versions of SQLite ** may add additional static mutexes. Static mutexes are for internal ** use by SQLite only. Applications that use SQLite mutexes should ** use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or ** SQLITE_MUTEX_RECURSIVE. ** ** Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST ** or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc() ** returns a different mutex on every call. But for the static ** mutex types, the same mutex is returned on every call that has ** the same type number. 
Name: winMutexFree; Comment: ** This routine deallocates a previously ** allocated mutex. SQLite is careful to deallocate every ** mutex that it allocates. 
Name: winMutexEnter; Comment: ** The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt ** to enter a mutex. If another thread is already within the mutex, ** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return ** SQLITE_BUSY. The sqlite3_mutex_try() interface returns SQLITE_OK ** upon successful entry. Mutexes created using SQLITE_MUTEX_RECURSIVE can ** be entered multiple times by the same thread. In such cases the, ** mutex must be exited an equal number of times before another thread ** can enter. If the same thread tries to enter any other kind of mutex ** more than once, the behavior is undefined. 
Name: winMutexLeave; Comment: ** The sqlite3_mutex_leave() routine exits a mutex that was ** previously entered by the same thread. The behavior ** is undefined if the mutex is not currently entered or ** is not currently allocated. SQLite will never do either. 
Name: sqlite3_release_memory; Comment: ** Attempt to release up to n bytes of non-essential memory currently ** held by SQLite. An example of non-essential memory is memory used to ** cache database pages that are not currently in use. 
Name: sqlite3MallocMutex; Comment: ** Return the memory allocator mutex. sqlite3_status() needs it. 
Name: sqlite3_memory_alarm; Comment: ** Deprecated external interface. It used to set an alarm callback ** that was invoked when memory usage grew too large. Now it is a ** no-op. 
Name: sqlite3_soft_heap_limit64; Comment: ** Set the soft heap-size limit for the library. An argument of ** zero disables the limit. A negative argument is a no-op used to ** obtain the return value. ** ** The return value is the value of the heap limit just before this ** interface was called. ** ** If the hard heap limit is enabled, then the soft heap limit cannot ** be disabled nor raised above the hard heap limit. 
Name: sqlite3_hard_heap_limit64; Comment: ** Set the hard heap-size limit for the library. An argument of zero ** disables the hard heap limit. A negative argument is a no-op used ** to obtain the return value without affecting the hard heap limit. ** ** The return value is the value of the hard heap limit just prior to ** calling this interface. ** ** Setting the hard heap limit will also activate the soft heap limit ** and constrain the soft heap limit to be no more than the hard heap ** limit. 
Name: sqlite3MallocInit; Comment: ** Initialize the memory allocation subsystem. 
Name: sqlite3HeapNearlyFull; Comment: ** Return true if the heap is currently under memory pressure - in other ** words if the amount of heap used is close to the limit set by ** sqlite3_soft_heap_limit(). 
Name: sqlite3MallocEnd; Comment: ** Deinitialize the memory allocation subsystem. 
Name: sqlite3_memory_used; Comment: ** Return the amount of memory currently checked out. 
Name: sqlite3_memory_highwater; Comment: ** Return the maximum amount of memory that has ever been ** checked out since either the beginning of this process ** or since the most recent reset. 
Name: sqlite3MallocAlarm; Comment: ** Trigger the alarm 
Name: mallocWithAlarm; Comment: ** Do a memory allocation with statistics and alarms. Assume the ** lock is already held. 
Name: sqlite3Malloc; Comment: ** Allocate memory. This routine is like sqlite3_malloc() except that it ** assumes the memory subsystem has already been initialized. 
Name: sqlite3_malloc; Comment: ** This version of the memory allocation is for use by the application. ** First make sure the memory subsystem is initialized, then do the ** allocation. 
Name: sqlite3MallocSize; Comment: ** Return the size of a memory allocation previously obtained from ** sqlite3Malloc() or sqlite3_malloc(). 
Name: sqlite3_free; Comment: ** Free memory previously obtained from sqlite3Malloc(). 
Name: measureAllocationSize; Comment: ** Add the size of memory allocation "p" to the count in ** *db->pnBytesFreed. 
Name: sqlite3DbFreeNN; Comment: ** Free memory that might be associated with a particular database ** connection. Calling sqlite3DbFree(D,X) for X==0 is a harmless no-op. ** The sqlite3DbFreeNN(D,X) version requires that X be non-NULL. 
Name: sqlite3Realloc; Comment: ** Change the size of an existing memory allocation 
Name: sqlite3_realloc; Comment: ** The public interface to sqlite3Realloc. Make sure that the memory ** subsystem is initialized prior to invoking sqliteRealloc. 
Name: sqlite3MallocZero; Comment: ** Allocate and zero memory. 
Name: sqlite3DbMallocZero; Comment: ** Allocate and zero memory. If the allocation fails, make ** the mallocFailed flag in the connection pointer. 
Name: dbMallocRawFinish; Comment: Finish the work of sqlite3DbMallocRawNN for the unusual and** slower case when the allocation cannot be fulfilled using lookaside. 
Name: sqlite3DbMallocRaw; Comment: None** ** In other words, if a subsequent malloc (ex: "b") worked, it is assumed ** that all prior mallocs (ex: "a") worked too. ** ** The sqlite3MallocRawNN() variant guarantees that the "db" parameter is ** not a NULL pointer. 
Name: sqlite3DbRealloc; Comment: ** Resize the block of memory pointed to by p to n bytes. If the ** resize fails, set the mallocFailed flag in the connection object. 
Name: sqlite3DbReallocOrFree; Comment: ** Attempt to reallocate p. If the reallocation fails, then free p ** and set the mallocFailed flag in the database connection. 
Name: sqlite3DbStrDup; Comment: ** Make a copy of a string in memory obtained from sqliteMalloc(). These ** functions call sqlite3MallocRaw() directly instead of sqliteMalloc(). This ** is because when memory debugging is turned on, these two functions are ** called via macros that record the current file and line number in the ** ThreadData structure. 
Name: sqlite3DbSpanDup; Comment: ** The text between zStart and zEnd represents a phrase within a larger ** SQL statement. Make a copy of this phrase in space obtained form ** sqlite3DbMalloc(). Omit leading and trailing whitespace. 
Name: sqlite3SetString; Comment: ** Free any prior content in *pz and replace it with a copy of zNew. 
Name: sqlite3OomFault; Comment: ** Call this routine to record the fact that an OOM (out-of-memory) error ** has happened. This routine will set db->mallocFailed, and also ** temporarily disable the lookaside memory allocator and interrupt ** any running VDBEs. 
Name: sqlite3OomClear; Comment: ** This routine reactivates the memory allocator and clears the ** db->mallocFailed flag as necessary. ** ** The memory allocator is not restarted if there are running ** VDBEs. 
Name: apiHandleError; Comment: ** Take actions at the end of an API call to deal with error codes. 
Name: sqlite3ApiExit; Comment: ** This function must be called before exiting any API function (i.e. ** returning control to the user) that has called sqlite3_malloc or ** sqlite3_realloc. ** ** The returned value is normally a copy of the second argument to this ** function. However, if a malloc() failure has occurred since the previous ** invocation SQLITE_NOMEM is returned instead. ** ** If an OOM as occurred, then the connection error-code (the value ** returned by sqlite3_errcode()) is set to SQLITE_NOMEM. 
Name: et_getdigit; Comment: ** "*val" is a double such that 0.1 <= *val < 10.0 ** Return the ascii code for the leading digit of *val, then ** multiply "*val" by 10.0 to renormalize. ** ** Example: ** input: *val = 3.14159 ** output: *val = 1.4159 function return = '3' ** ** The counter *cnt is incremented each time. After counter exceeds ** 16 (the number of significant digits in a 64-bit float) '0' is ** always returned. 
Name: setStrAccumError; Comment: ** Set the StrAccum object to an error mode. 
Name: getIntArg; Comment: ** Extra argument values from a PrintfArguments object 
Name: printfTempBuf; Comment: ** Allocate memory for a temporary buffer needed for printf rendering. ** ** If the requested size of the temp buffer is larger than the size ** of the output buffer in pAccum, then cause an SQLITE_TOOBIG error. ** Do the size check before the memory allocation to prevent rogue ** SQL from requesting large allocations using the precision or width ** field of the printf() function. 
Name: sqlite3StrAccumEnlarge; Comment: ** Enlarge the memory allocation on a StrAccum object so that it is ** able to accept at least N more bytes of text. ** ** Return the number of bytes of text that StrAccum is able to accept ** after the attempted enlargement. The value returned might be zero. 
Name: sqlite3_str_appendchar; Comment: ** Append N copies of character c to the given string buffer. 
Name: enlargeAndAppend; Comment: ** The StrAccum "p" is not large enough to accept N new bytes of z[]. ** So enlarge if first, then do the append. ** ** This is a helper routine to sqlite3_str_append() that does special-case ** work (enlarging the buffer) using tail recursion, so that the ** sqlite3_str_append() routine can use fast calling semantics. 
Name: sqlite3_str_append; Comment: ** Append N bytes of text from z to the StrAccum object. Increase the ** size of the memory allocation for StrAccum if necessary. 
Name: sqlite3_str_appendall; Comment: ** Append the complete text of zero-terminated string z[] to the p string. 
Name: strAccumFinishRealloc; Comment: ** Finish off a string by making sure it is zero-terminated. ** Return a pointer to the resulting string. Return a NULL ** pointer if any kind of error was encountered. 
Name: sqlite3_str_finish; Comment: Finalize a string created using sqlite3_str_new().
Name: sqlite3_str_errcode; Comment: Return any error code associated with p 
Name: sqlite3_str_length; Comment: Return the current length of p in bytes 
Name: sqlite3_str_value; Comment: Return the current value for p 
Name: sqlite3_str_reset; Comment: ** Reset an StrAccum string. Reclaim all malloced memory. 
Name: sqlite3StrAccumInit; Comment: ** Initialize a string accumulator. ** ** p: The accumulator to be initialized. ** db: Pointer to a database connection. May be NULL. Lookaside ** memory is used if not NULL. db->mallocFailed is set appropriately ** when not NULL. ** zBase: An initial buffer. May be NULL in which case the initial buffer ** is malloced. ** n: Size of zBase in bytes. If total space requirements never exceed ** n then no memory allocations ever occur. ** mx: Maximum number of bytes to accumulate. If mx==0 then no memory ** allocations will ever occur. 
Name: sqlite3_str_new; Comment: Allocate and initialize a new dynamic string object 
Name: sqlite3VMPrintf; Comment: ** Print into memory obtained from sqliteMalloc(). Use the internal ** %-conversion extensions. 
Name: sqlite3MPrintf; Comment: ** Print into memory obtained from sqliteMalloc(). Use the internal ** %-conversion extensions. 
Name: sqlite3_vmprintf; Comment: ** Print into memory obtained from sqlite3_malloc(). Omit the internal ** %-conversion extensions. 
Name: sqlite3_mprintf; Comment: ** Print into memory obtained from sqlite3_malloc()(). Omit the internal ** %-conversion extensions. 
Name: sqlite3_vsnprintf; Comment: ** sqlite3_snprintf() works like snprintf() except that it ignores the ** current locale settings. This is important for SQLite because we ** are not able to use a "," as the decimal point in place of "." as ** specified by some locales. ** ** Oops: The first two arguments of sqlite3_snprintf() are backwards ** from the snprintf() standard. Unfortunately, it is too late to change ** this without breaking compatibility, so we just have to live with the ** mistake. ** ** sqlite3_vsnprintf() is the varargs version. 
Name: renderLogMsg; Comment: ** This is the routine that actually formats the sqlite3_log() message. ** We house it in a separate routine from sqlite3_log() to avoid using ** stack space on small-stack systems when logging is disabled. ** ** sqlite3_log() must render into a static buffer. It cannot dynamically ** allocate memory because it might be called while the memory allocator ** mutex is held. ** ** sqlite3_str_vappendf() might ask for *temporary* memory allocations for ** certain format characters (%q) or for very large precisions or widths. ** Care must be taken that any sqlite3_log() calls that occur while the ** memory mutex is held do not use these mechanisms. 
Name: sqlite3_log; Comment: ** Format and write a message to the log if logging is enabled. 
Name: sqlite3DebugPrintf; Comment: ** A version of printf() that understands %lld. Used for debugging. ** The printf() built into some versions of windows does not understand %lld ** and segfaults if you give it a long long int. 
Name: sqlite3_str_appendf; Comment: ** variable-argument wrapper around sqlite3_str_vappendf(). The bFlags argument ** can contain the bit SQLITE_PRINTF_INTERNAL enable internal formats. 
Name: sqlite3TreeViewPush; Comment: ** Add a new subitem to the tree. The moreToFollow flag indicates that this ** is not the last item in the tree. 
Name: sqlite3TreeViewPop; Comment: ** Finished with one layer of the tree 
Name: sqlite3TreeViewLine; Comment: ** Generate a single line of output for the tree, with a prefix that contains ** all the appropriate tree lines 
Name: sqlite3TreeViewItem; Comment: ** Shorthand for starting a new tree item that consists of a single label 
Name: sqlite3TreeViewWith; Comment: ** Generate a human-readable description of a WITH clause. 
Name: sqlite3TreeViewSrcList; Comment: ** Generate a human-readable description of a SrcList object. 
Name: sqlite3TreeViewSelect; Comment: ** Generate a human-readable description of a Select object. 
Name: sqlite3TreeViewWindow; Comment: ** Generate a human-readable explanation for a Window object 
Name: sqlite3TreeViewWinFunc; Comment: ** Generate a human-readable explanation for a Window Function object 
Name: sqlite3TreeViewExpr; Comment: ** Generate a human-readable explanation of an expression tree. 
Name: sqlite3TreeViewBareExprList; Comment: ** Generate a human-readable explanation of an expression list. 
Name: sqlite3_randomness; Comment: ** Return N random bytes. 
Name: sqlite3ThreadJoin; Comment: Get the results of the thread 
Name: sqlite3VdbeMemTranslate; Comment: ** This routine transforms the internal text encoding used by pMem to ** desiredEnc. It is an error if the string is already of the desired ** encoding, or if *pMem does not contain a string value. 
Name: sqlite3VdbeMemHandleBom; Comment: ** This routine checks for a byte-order mark at the beginning of the ** UTF-16 string stored in *pMem. If one is present, it is removed and ** the encoding of the Mem adjusted. This routine does not do any ** byte-swapping, it just sets Mem.enc appropriately. ** ** The allocation (static, dynamic etc.) and encoding of the Mem may be ** changed by this function. 
Name: sqlite3Utf8CharLen; Comment: ** pZ is a UTF-8 encoded unicode string. If nByte is less than zero, ** return the number of unicode characters in pZ up to (but not including) ** the first 0x00 byte. If nByte is not less than zero, return the ** number of unicode characters in the first nByte of pZ (or up to ** the first 0x00, whichever comes first). 
Name: sqlite3Utf8To8; Comment: ** Translate UTF-8 to UTF-8. ** ** This has the effect of making sure that the string is well-formed ** UTF-8. Miscoded characters are removed. ** ** The translation is done in-place and aborted if the output ** overruns the input. 
Name: sqlite3Utf16to8; Comment: ** Convert a UTF-16 string in the native encoding into a UTF-8 string. ** Memory to hold the UTF-8 string is obtained from sqlite3_malloc and must ** be freed by the calling function. ** ** NULL is returned if there is an allocation error. 
Name: sqlite3Utf16ByteLen; Comment: ** zIn is a UTF-16 encoded unicode string at least nChar characters long. ** Return the number of bytes in the first nChar unicode characters ** in pZ. nChar must be non-negative. 
Name: sqlite3UtfSelfTest; Comment: ** This routine is called from the TCL test function "translate_selftest". ** It checks that the primitives for serializing and deserializing ** characters in each encoding are inverses of each other. 
Name: sqlite3IsNaN; Comment: ** Return true if the floating point value is Not a Number (NaN). 
Name: sqlite3Strlen30; Comment: ** Compute a string length that is limited to what can be stored in ** lower 30 bits of a 32-bit signed integer. ** ** The value returned will never be negative. Nor will it ever be greater ** than the actual length of the string. For very long strings (greater ** than 1GiB) the value returned might be less than the true string length. 
Name: sqlite3ColumnType; Comment: ** Return the declared type of a column. Or return zDflt if the column ** has no declared type. ** ** The column type is an extra string stored after the zero-terminator on ** the column name if and only if the COLFLAG_HASTYPE flag is set. 
Name: sqlite3ErrorFinish; Comment: ** Helper function for sqlite3Error() - called rarely. Broken out into ** a separate routine to avoid unnecessary register saves on entry to ** sqlite3Error(). 
Name: sqlite3Error; Comment: ** Set the current error code to err_code and clear any prior error message. ** Also set iSysErrno (by calling sqlite3System) if the err_code indicates ** that would be appropriate. 
Name: sqlite3SystemError; Comment: ** Load the sqlite3.iSysErrno field if that is an appropriate thing ** to do based on the SQLite error code in rc. 
Name: sqlite3ErrorWithMsg; Comment: ** Set the most recent error code and error string for the sqlite ** handle "db". The error code is set to "err_code". ** ** If it is not NULL, string zFormat specifies the format of the ** error string in the style of the printf functions: The following ** format characters are allowed: ** ** %s Insert a string ** %z A string that should be freed after use ** %d Insert an integer ** %T Insert a token ** %S Insert the first element of a SrcList ** ** zFormat and any string tokens that follow it are assumed to be ** encoded in UTF-8. ** ** To clear the most recent error for sqlite handle "db", sqlite3Error ** should be called with err_code set to SQLITE_OK and zFormat set ** to NULL. 
Name: sqlite3ErrorMsg; Comment: ** Add an error message to pParse->zErrMsg and increment pParse->nErr. ** The following formatting characters are allowed: ** ** %s Insert a string ** %z A string that should be freed after use ** %d Insert an integer ** %T Insert a token ** %S Insert the first element of a SrcList ** ** This function should be used to report any error that occurs while ** compiling an SQL statement (i.e. within sqlite3_prepare()). The ** last thing the sqlite3_prepare() function does is copy the error ** stored by this function into the database handle using sqlite3Error(). ** Functions sqlite3Error() or sqlite3ErrorWithMsg() should be used ** during statement execution (sqlite3_step() etc.). 
Name: sqlite3ErrorToParser; Comment: ** If database connection db is currently parsing SQL, then transfer ** error code errCode to that parser if the parser has not already ** encountered some other kind of error. 
Name: sqlite3Dequote; Comment: ** Convert an SQL-style quoted string into a normal string by removing ** the quote characters. The conversion is done in-place. If the ** input does not begin with a quote character, then this routine ** is a no-op. ** ** The input string must be zero-terminated. A new zero-terminator ** is added to the dequoted string. ** ** The return value is -1 if no dequoting occurs or the length of the ** dequoted string, exclusive of the zero terminator, if dequoting does ** occur. ** ** 2002-02-14: This routine is extended to remove MS-Access style ** brackets from around identifiers. For example: "[a-b-c]" becomes ** "a-b-c". 
Name: sqlite3TokenInit; Comment: ** Generate a Token object from a string 
Name: sqlite3_stricmp; Comment: ** Some systems have stricmp(). Others have strcasecmp(). Because ** there is no consistency, we will define our own. ** ** IMPLEMENTATION-OF: R-30243-02494 The sqlite3_stricmp() and ** sqlite3_strnicmp() APIs allow applications and extensions to compare ** the contents of two buffers containing UTF-8 strings in a ** case-independent fashion, using the same definition of "case ** independence" that SQLite uses internally when comparing identifiers. 
Name: sqlite3StrIHash; Comment: ** Compute an 8-bit hash on a string that is insensitive to case differences 
Name: sqlite3Pow10; Comment: ** Compute 10 to the E-th power. Examples: E==1 results in 10. ** E==2 results in 100. E==50 results in 1.0e50. ** ** This routine only works for values of E between 1 and 341. 
Name: sqlite3Int64ToText; Comment: ** Render an signed 64-bit integer as text. Store the result in zOut[]. ** ** The caller must ensure that zOut[] is at least 21 bytes in size. 
Name: compare2pow63; Comment: ** Compare the 19-character string zNum against the text representation ** value 2^63: 9223372036854775808. Return negative, zero, or positive ** if zNum is less than, equal to, or greater than the string. ** Note that zNum must contain exactly 19 characters. ** ** Unlike memcmp() this routine is guaranteed to return the difference ** in the values of the last digit if the only difference is in the ** last digit. So, for example, ** ** compare2pow63("9223372036854775800", 1) ** ** will return -8. 
Name: sqlite3Atoi64; Comment: ** Convert zNum to a 64-bit signed integer. zNum must be decimal. This ** routine does *not* accept hexadecimal notation. ** ** Returns: ** ** -1 Not even a prefix of the input text looks like an integer ** 0 Successful transformation. Fits in a 64-bit signed integer. ** 1 Excess non-space text after the integer value ** 2 Integer too large for a 64-bit signed integer or is malformed ** 3 Special case of 9223372036854775808 ** ** length is the number of bytes in the string (bytes, not characters). ** The string is not necessarily zero-terminated. The encoding is ** given by enc. 
Name: sqlite3DecOrHexToI64; Comment: ** Transform a UTF-8 integer literal, in either decimal or hexadecimal, ** into a 64-bit signed integer. This routine accepts hexadecimal literals, ** whereas sqlite3Atoi64() does not. ** ** Returns: ** ** 0 Successful transformation. Fits in a 64-bit signed integer. ** 1 Excess text after the integer value ** 2 Integer too large for a 64-bit signed integer or is malformed ** 3 Special case of 9223372036854775808 
Name: sqlite3GetInt32; Comment: ** If zNum represents an integer that will fit in 32-bits, then set ** *pValue to that integer and return true. Otherwise return false. ** ** This routine accepts both decimal and hexadecimal notation for integers. ** ** Any non-numeric characters that following zNum are ignored. ** This is different from sqlite3Atoi64() which requires the ** input number to be zero-terminated. 
Name: sqlite3Atoi; Comment: ** Return a 32-bit integer value extracted from a string. If the ** string is not an integer, just return 0. 
Name: sqlite3GetUInt32; Comment: ** Try to convert z into an unsigned 32-bit integer. Return true on ** success and false if there is an error. ** ** Only decimal notation is accepted. 
Name: putVarint64; Comment: ** Write a 64-bit variable-length integer to memory starting at p[0]. ** The length of data write will be between 1 and 9 bytes. The number ** of bytes written is returned. ** ** A variable-length integer consists of the lower 7 bits of each byte ** for all bytes that have the 8th bit set and one byte with the 8th ** bit clear. Except, if we get to the 9th byte, it stores the full ** 8 bits and is the last byte. 
Name: sqlite3GetVarint; Comment: ** Read a 64-bit variable-length integer from memory starting at p[0]. ** Return the number of bytes read. The value is stored in *v. 
Name: sqlite3GetVarint32; Comment: ** Read a 32-bit variable-length integer from memory starting at p[0]. ** Return the number of bytes read. The value is stored in *v. ** ** If the varint stored in p[0] is larger than can fit in a 32-bit unsigned ** integer, then set *v to 0xffffffff. ** ** A MACRO version, getVarint32, is provided which inlines the ** single-byte case. All code should use the MACRO version as ** this function assumes the single-byte case has already been handled. 
Name: sqlite3VarintLen; Comment: ** Return the number of bytes that will be needed to store the given ** 64-bit integer. 
Name: sqlite3Get4byte; Comment: ** Read or write a four-byte big-endian integer value. 
Name: sqlite3HexToInt; Comment: ** Translate a single byte of Hex into an integer. ** This routine only works if h really is a valid hexadecimal ** character: 0..9a..fA..F 
Name: sqlite3HexToBlob; Comment: ** Convert a BLOB literal of the form "x'hhhhhh'" into its binary ** value. Return a pointer to its binary value. Space to hold the ** binary value has been obtained from malloc and must be freed by ** the calling routine. 
Name: logBadConnection; Comment: ** Log an error that is an API call on a connection pointer that should ** not have been used. The "type" of connection pointer is given as the ** argument. The zType is a word like "NULL" or "closed" or "invalid". 
Name: sqlite3SafetyCheckOk; Comment: ** Check to make sure we have a valid db pointer. This test is not ** foolproof but it does provide some measure of protection against ** misuse of the interface such as passing in db pointers that are ** NULL or which have been previously closed. If this routine returns ** 1 it means that the db pointer is valid and 0 if it should not be ** dereferenced for any reason. The calling function should invoke ** SQLITE_MISUSE immediately. ** ** sqlite3SafetyCheckOk() requires that the db pointer be valid for ** use. sqlite3SafetyCheckSickOrOk() allows a db pointer that failed to ** open properly and is not fit for general use but which can be ** used as an argument to sqlite3_errmsg() or sqlite3_close(). 
Name: sqlite3AddInt64; Comment: ** Attempt to add, substract, or multiply the 64-bit signed value iB against ** the other 64-bit signed integer at *pA and store the result in *pA. ** Return 0 on success. Or if the operation would have resulted in an ** overflow, leave *pA unchanged and return 1. 
Name: sqlite3AbsInt32; Comment: ** Compute the absolute value of a 32-bit signed integer, of possible. Or ** if the integer has a value of -2147483648, return +2147483647 
Name: sqlite3FileSuffix3; Comment: ** If SQLITE_ENABLE_8_3_NAMES is set at compile-time and if the database ** filename in zBaseFilename is a URI with the "8_3_names=1" parameter and ** if filename in z[] has a suffix (a.k.a. "extension") that is longer than ** three characters, then shorten the suffix on z[] to be the last three ** characters of the original suffix. ** ** If SQLITE_ENABLE_8_3_NAMES is set to 2 at compile-time, then always ** do the suffix shortening regardless of URI parameter. ** ** Examples: ** ** test.db-journal => test.nal ** test.db-wal => test.wal ** test.db-shm => test.shm ** test.db-mj7f3319fa => test.9fa 
Name: sqlite3LogEstAdd; Comment: ** Find (an approximate) sum of two LogEst values. This computation is ** not a simple "+" operator because LogEst is stored as a logarithmic ** value. ** 
Name: sqlite3LogEst; Comment: ** Convert an integer into a LogEst. In other words, compute an ** approximation for 10*log2(x). 
Name: sqlite3LogEstFromDouble; Comment: ** Convert a double into a LogEst ** In other words, compute an approximation for 10*log2(x). 
Name: sqlite3LogEstToInt; Comment: ** Convert a LogEst into an integer. ** ** Note that this routine is only used when one or more of various ** non-standard compile-time options is enabled. 
Name: sqlite3VListNumToName; Comment: ** Return a pointer to the name of a variable in the given VList that ** has the value iVal. Or return a NULL if there is no such variable in ** the list 
Name: sqlite3VListNameToNum; Comment: ** Return the number of the variable named zName, if it is in VList. ** or return 0 if there is no such variable. 
Name: sqlite3HashInit; Comment: Turn bulk memory into a hash table object by initializing the** fields of the Hash structure. ** ** "pNew" is a pointer to the hash table that is to be initialized. 
Name: sqlite3HashClear; Comment: Remove all entries from a hash table. Reclaim all memory.** Call this routine to delete a hash table or to reset a hash table ** to the empty state. 
Name: strHash; Comment: ** The hashing function. 
Name: rehash; Comment: Resize the hash table so that it cantains "new_size" buckets.** ** The hash table might fail to resize if sqlite3_malloc() fails or ** if the new size is the same as the prior size. ** Return TRUE if the resize occurs and false if not. 
Name: sqlite3HashFind; Comment: Attempt to locate an element of the hash table pH with a key** that matches pKey. Return the data for this element if it is ** found, or NULL if there is no match. 
Name: sqlite3HashInsert; Comment: Insert an element into the hash table pH. The key is pKey** and the data is "data". ** ** If no element exists with a matching key, then a new ** element is created and NULL is returned. ** ** If another element already exists with the same key, then the ** new data replaces the old data and the old data is returned. ** The key is not copied in this instance. If a malloc fails, then ** the new data is returned and the hash table is unchanged. ** ** If the "data" parameter to this function is NULL, then the ** element corresponding to "key" is removed from the hash table. 
Name: posixOpen; Comment: ** Different Unix systems declare open() in different ways. Same use ** open(const char*,int,mode_t). Others use open(const char*,int,...). ** The difference is important when using a pointer to the function. ** ** The safest way to deal with the problem is to always use this wrapper ** which always has the same well-defined interface. 
Name: robustFchown; Comment: ** On some systems, calls to fchown() will trigger a message in a security ** log if they come from non-root processes. So avoid calling fchown() if ** we are not running as root. 
Name: unixGetSystemCall; Comment: ** Return the value of a system call. Return NULL if zName is not a ** recognized system call name. NULL is also returned if the system call ** is currently undefined. 
Name: unixNextSystemCall; Comment: ** Return the name of the first system call after zName. If zName==NULL ** then return the name of the first system call. Return NULL if zName ** is the last system call or if zName is not the name of a valid ** system call. 
Name: robust_open; Comment: ** Invoke open(). Do so multiple times, until it either succeeds or ** fails for some reason other than EINTR. ** ** If the file creation mode "m" is 0 then set it to the default for ** SQLite. The default is SQLITE_DEFAULT_FILE_PERMISSIONS (normally ** 0644) as modified by the system umask. If m is not 0, then ** make the file creation mode be exactly m ignoring the umask. ** ** The m parameter will be non-zero only when creating -wal, -journal, ** and -shm files. We want those files to have *exactly* the same ** permissions as their original database, unadulterated by the umask. ** In that way, if a database file is -rw-rw-rw or -rw-rw-r-, and a ** transaction crashes and leaves behind hot journals, then any ** process that is able to write to the database will also be able to ** recover the hot journals. 
Name: azFileLock; Comment: ** Helper function for printing out trace information from debugging ** binaries. This returns the string representation of the supplied ** integer lock-type. 
Name: lockTrace; Comment: ** Print out information about all locking operations. ** ** This routine is used for troubleshooting locks on multithreaded ** platforms. Enable by compiling with the -DSQLITE_LOCK_TRACE ** command-line option on the compiler. This code is normally ** turned off. 
Name: robust_ftruncate; Comment: ** Retry ftruncate() calls that fail due to EINTR ** ** All calls to ftruncate() within this file should be made through ** this wrapper. On the Android platform, bypassing the logic below ** could lead to a corrupt database. 
Name: sqliteErrorFromPosixError; Comment: ** This routine translates a standard POSIX errno code into something ** useful to the clients of the sqlite3 functions. Specifically, it is ** intended to translate a variety of "try again" errors into SQLITE_BUSY ** and a variety of "please close the file descriptor NOW" errors into ** SQLITE_IOERR ** ** Errors during initialization of locks, or file system support for locks, ** should handle ENOLCK, ENOTSUP, EOPNOTSUPP separately. 
Name: vxworksSimplifyName; Comment: ** Simplify a filename into its canonical form ** by making the following changes: ** ** removing any trailing and duplicate / ** convert /./ into just / ** convert /A/../ where A is any simple name into just / ** ** Changes are made in-place. Return the new name length. ** ** The original filename is in z[0..n-1]. Return the number of ** characters in the simplified name. 
Name: vxworksFindFileId; Comment: ** Find a unique file ID for the given absolute pathname. Return ** a pointer to the vxworksFileId object. This pointer is the unique ** file ID. ** ** The nRef field of the vxworksFileId object is incremented before ** the object is returned. A new vxworksFileId object is created ** and added to the global list if necessary. ** ** If a memory allocation error occurs, return NULL. 
Name: vxworksReleaseFileId; Comment: ** Decrement the reference count on a vxworksFileId object. Free ** the object when the reference count reaches zero. 
Name: unixFileMutexHeld; Comment: ** True if the inode mutex (on the unixFile.pFileMutex field) is held, or not. ** This routine is used only within assert() to help verify correct mutex ** usage. 
Name: robust_close; Comment: ** Close a file descriptor. ** ** We assume that close() almost always works, since it is only in a ** very sick application or on a very sick platform that it might fail. ** If it does fail, simply leak the file descriptor, but do log the ** error. ** ** Note that it is not safe to retry close() after EINTR since the ** file descriptor might have already been reused by another thread. ** So we don't even try to recover from an EINTR. Just log the error ** and move on. 
Name: storeLastErrno; Comment: ** Set the pFile->lastErrno. Do this in a subroutine as that provides ** a convenient place to set a breakpoint. 
Name: closePendingFds; Comment: ** Close all file descriptors accumuated in the unixInodeInfo->pUnused list. 
Name: releaseInodeInfo; Comment: ** Release a unixInodeInfo structure previously allocated by findInodeInfo(). ** ** The global mutex must be held when this routine is called, but the mutex ** on the inode being deleted must NOT be held. 
Name: fileHasMoved; Comment: ** Return TRUE if pFile has been renamed or unlinked since it was first opened. 
Name: verifyDbFile; Comment: ** Check a unixFile that is a database. Verify the following: ** ** (1) There is exactly one hard link on the file ** (2) The file is not a symbolic link ** (3) The file has not been renamed or unlinked ** ** Issue sqlite3_log(SQLITE_WARNING,...) messages if anything is not right. 
Name: unixCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, set *pResOut ** to a non-zero value otherwise *pResOut is set to zero. The return value ** is set to SQLITE_OK unless an I/O error occurs during lock checking. 
Name: unixFileLock; Comment: ** Attempt to set a system-lock on the file pFile. The lock is ** described by pLock. ** ** If the pFile was opened read/write from unix-excl, then the only lock ** ever obtained is an exclusive lock, and it is obtained exactly once ** the first time any lock is attempted. All subsequent system locking ** operations become no-ops. Locking operations still happen internally, ** in order to coordinate access between separate database connections ** within this process, but all of that is handled in memory and the ** operating system does not participate. ** ** This function is a pass-through to fcntl(F_SETLK) if pFile is using ** any VFS other than "unix-excl" or if pFile is opened on "unix-excl" ** and is read-only. ** ** Zero is returned if the call completes successfully, or -1 if a call ** to fcntl() fails. In this case, errno is set appropriately (by fcntl()). 
Name: unixLock; Comment: ** Lock the file with the lock specified by parameter eFileLock - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** This routine will only increase a lock. Use the sqlite3OsUnlock() ** routine to lower a locking level. 
Name: setPendingFd; Comment: ** Add the file descriptor used by file handle pFile to the corresponding ** pUnused list. 
Name: posixUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. ** ** If handleNFSUnlock is true, then on downgrading an EXCLUSIVE_LOCK to SHARED ** the byte range is divided into 2 parts and the first part is unlocked then ** set to a read lock, then the other part is simply unlocked. This works ** around a bug in BSD NFS lockd (also seen on MacOSX 10.3+) that fails to ** remove the write lock on a region when a read lock is set. 
Name: unixUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. 
Name: closeUnixFile; Comment: ** This function performs the parts of the "close file" operation ** common to all locking schemes. It closes the directory and file ** handles, if they are valid, and sets all fields of the unixFile ** structure to 0. ** ** It is *not* necessary to hold the mutex when this routine is called, ** even on VxWorks. A mutex will be acquired on VxWorks by the ** vxworksReleaseFileId() routine. 
Name: unixClose; Comment: ** Close a file. 
Name: nolockCheckReservedLock; Comment: *********************************************************************************************************** No-op Locking ********************************** ** ** Of the various locking implementations available, this is by far the ** simplest: locking is ignored. No attempt is made to lock the database ** file for reading or writing. ** ** This locking mode is appropriate for use on read-only databases ** (ex: databases that are burned into CD-ROM, for example.) It can ** also be used if the application employs some external mechanism to ** prevent simultaneous access of the same database by two or more ** database connections. But there is a serious risk of database ** corruption if this locking mode is used in situations where multiple ** database connections are accessing the same database file at the same ** time and one or more of those connections are writing. 
Name: nolockClose; Comment: ** Close the file. 
Name: dotlockCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, set *pResOut ** to a non-zero value otherwise *pResOut is set to zero. The return value ** is set to SQLITE_OK unless an I/O error occurs during lock checking. ** ** In dotfile locking, either a lock exists or it does not. So in this ** variation of CheckReservedLock(), *pResOut is set to true if any lock ** is held on the file and false if the file is unlocked. 
Name: dotlockLock; Comment: ** Lock the file with the lock specified by parameter eFileLock - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** This routine will only increase a lock. Use the sqlite3OsUnlock() ** routine to lower a locking level. ** ** With dotfile locking, we really only support state (4): EXCLUSIVE. ** But we track the other locking levels internally. 
Name: dotlockUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. ** ** When the locking level reaches NO_LOCK, delete the lock file. 
Name: dotlockClose; Comment: ** Close a file. Make sure the lock has been released before closing. 
Name: flockCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, set *pResOut ** to a non-zero value otherwise *pResOut is set to zero. The return value ** is set to SQLITE_OK unless an I/O error occurs during lock checking. 
Name: flockLock; Comment: ** Lock the file with the lock specified by parameter eFileLock - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** flock() only really support EXCLUSIVE locks. We track intermediate ** lock states in the sqlite3_file structure, but all locks SHARED or ** above are really EXCLUSIVE locks and exclude all other processes from ** access the file. ** ** This routine will only increase a lock. Use the sqlite3OsUnlock() ** routine to lower a locking level. 
Name: flockUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. 
Name: flockClose; Comment: ** Close a file. 
Name: semXCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, set *pResOut ** to a non-zero value otherwise *pResOut is set to zero. The return value ** is set to SQLITE_OK unless an I/O error occurs during lock checking. 
Name: semXLock; Comment: ** Lock the file with the lock specified by parameter eFileLock - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** Semaphore locks only really support EXCLUSIVE locks. We track intermediate ** lock states in the sqlite3_file structure, but all locks SHARED or ** above are really EXCLUSIVE locks and exclude all other processes from ** access the file. ** ** This routine will only increase a lock. Use the sqlite3OsUnlock() ** routine to lower a locking level. 
Name: semXUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. 
Name: semXClose; Comment: ** Close a file. 
Name: afpCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, set *pResOut ** to a non-zero value otherwise *pResOut is set to zero. The return value ** is set to SQLITE_OK unless an I/O error occurs during lock checking. 
Name: afpLock; Comment: ** Lock the file with the lock specified by parameter eFileLock - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** This routine will only increase a lock. Use the sqlite3OsUnlock() ** routine to lower a locking level. 
Name: afpUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. 
Name: afpClose; Comment: ** Close a file & cleanup AFP specific locking context 
Name: nfsUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. 
Name: seekAndRead; Comment: Seek to the offset passed as the second argument, then read cnt bytes into pBuf. Return the number of bytes actually read. NB: If you define USE_PREAD or USE_PREAD64, then it might also be necessary to define _XOPEN_SOURCE to be 500. This varies from one system to another. Since SQLite does not define USE_PREAD in any form by default, we will not attempt to define _XOPEN_SOURCE. See tickets #2741 and #2681.** ** To avoid stomping the errno value on a failed read the lastErrno value ** is set before returning. 
Name: unixRead; Comment: ** Read data from a file into a buffer. Return SQLITE_OK if all ** bytes were read successfully and SQLITE_IOERR if anything goes ** wrong. 
Name: seekAndWrite; Comment: ** Seek to the offset in id->offset then read cnt bytes into pBuf. ** Return the number of bytes actually read. Update the offset. ** ** To avoid stomping the errno value on a failed write the lastErrno value ** is set before returning. 
Name: unixWrite; Comment: ** Write data from a buffer into a file. Return SQLITE_OK on success ** or some other error code on failure. 
Name: full_fsync; Comment: ** The fsync() system call does not work as advertised on many ** unix systems. The following procedure is an attempt to make ** it work better. ** ** The SQLITE_NO_SYNC macro disables all fsync()s. This is useful ** for testing when we want to run through the test suite quickly. ** You are strongly advised *not* to deploy with SQLITE_NO_SYNC ** enabled, however, since with SQLITE_NO_SYNC enabled, an OS crash ** or power failure will likely corrupt the database file. ** ** SQLite sets the dataOnly flag if the size of the file is unchanged. ** The idea behind dataOnly is that it should only write the file content ** to disk, not the inode. We only set dataOnly if the file size is ** unchanged since the file size is part of the inode. However, ** Ted Ts'o tells us that fdatasync() will also write the inode if the ** file size has changed. The only real difference between fdatasync() ** and fsync(), Ted tells us, is that fdatasync() will not flush the ** inode if the mtime or owner or other inode attributes have changed. ** We only care about the file size, not the other file attributes, so ** as far as SQLite is concerned, an fdatasync() is always adequate. ** So, we always use fdatasync() if it is available, regardless of ** the value of the dataOnly flag. 
Name: openDirectory; Comment: ** Open a file descriptor to the directory containing file zFilename. ** If successful, *pFd is set to the opened file descriptor and ** SQLITE_OK is returned. If an error occurs, either SQLITE_NOMEM ** or SQLITE_CANTOPEN is returned and *pFd is set to an undefined ** value. ** ** The directory file descriptor is used for only one thing - to ** fsync() a directory to make sure file creation and deletion events ** are flushed to disk. Such fsyncs are not needed on newer ** journaling filesystems, but are required on older filesystems. ** ** This routine can be overridden using the xSetSysCall interface. ** The ability to override this routine was added in support of the ** chromium sandbox. Opening a directory is a security risk (we are ** told) so making it overrideable allows the chromium sandbox to ** replace this routine with a harmless no-op. To make this routine ** a no-op, replace it with a stub that returns SQLITE_OK but leaves ** *pFd set to a negative number. ** ** If SQLITE_OK is returned, the caller is responsible for closing ** the file descriptor *pFd using close(). 
Name: unixSync; Comment: ** Make sure all writes to a particular file are committed to disk. ** ** If dataOnly==0 then both the file itself and its metadata (file ** size, access time, etc) are synced. If dataOnly!=0 then only the ** file data is synced. ** ** Under Unix, also make sure that the directory entry for the file ** has been created by fsync-ing the directory that contains the file. ** If we do not do this and we encounter a power failure, the directory ** entry for the journal might not exist after we reboot. The next ** SQLite to access the file will not know that the journal exists (because ** the directory entry for the journal was never created) and the transaction ** will not roll back - possibly leading to database corruption. 
Name: unixTruncate; Comment: ** Truncate an open file to a specified size 
Name: unixFileSize; Comment: ** Determine the current size of a file in bytes 
Name: fcntlSizeHint; Comment: ** This function is called to handle the SQLITE_FCNTL_SIZE_HINT ** file-control operation. Enlarge the database to nBytes in size ** (rounded up to the next chunk-size). If the database is already ** nBytes or larger, this routine is a no-op. 
Name: unixModeBit; Comment: ** If *pArg is initially negative then this is a query. Set *pArg to ** 1 or 0 depending on whether or not bit mask of pFile->ctrlFlags is set. ** ** If *pArg is 0 or 1, then clear or set the mask bit of pFile->ctrlFlags. 
Name: unixFileControl; Comment: ** Information and control of an open file handle. 
Name: unixSectorSize; Comment: ** Return the sector size in bytes of the underlying block device for ** the specified file. This is almost always 512 bytes, but may be ** larger for some devices. ** ** SQLite code assumes this function cannot fail. It also assumes that ** if two files are created in the same file-system directory (i.e. ** a database and its journal file) that the sector size will be the ** same for both. 
Name: unixDeviceCharacteristics; Comment: ** Return the device characteristics for the file. ** ** This VFS is set up to return SQLITE_IOCAP_POWERSAFE_OVERWRITE by default. ** However, that choice is controversial since technically the underlying ** file system does not always provide powersafe overwrites. (In other ** words, after a power-loss event, parts of the file that were never ** written might end up being altered.) However, non-PSOW behavior is very, ** very rare. And asserting PSOW makes a large reduction in the amount ** of required I/O for journaling, since a lot of padding is eliminated. ** Hence, while POWERSAFE_OVERWRITE is on by default, there is a file-control ** available to turn it off and URI query parameter available to turn it off. 
Name: unixGetpagesize; Comment: ** Return the system page size. ** ** This function should not be called directly by other code in this file. ** Instead, it should be called via macro osGetpagesize(). 
Name: unixShmRegionPerMap; Comment: ** Return the minimum number of 32KB shm regions that should be mapped at ** a time, assuming that each mapping must be an integer multiple of the ** current system page-size. ** ** Usually, this is 1. The exception seems to be systems that are configured ** to use 64KB pages - in this case each mapping must cover at least two ** shm regions. 
Name: unixShmPurge; Comment: Purge the unixShmNodeList list of all entries with unixShmNode.nRef==0. This is not a VFS shared-memory method; it is a utility function called** by VFS shared-memory methods. 
Name: unixLockSharedMemory; Comment: ** The DMS lock has not yet been taken on shm file pShmNode. Attempt to ** take it now. Return SQLITE_OK if successful, or an SQLite error ** code otherwise. ** ** If the DMS cannot be locked because this is a readonly_shm=1 ** connection and no other process already holds a lock, return ** SQLITE_READONLY_CANTINIT and set pShmNode->isUnlocked=1. 
Name: unixOpenSharedMemory; Comment: Open a shared-memory area associated with open database file pDbFd. This particular implementation uses mmapped files. The file used to implement shared-memory is in the same directory as the open database file and has the same name as the open database file with the "-shm" suffix added. For example, if the database file is "homeuser1config.db" then the file that is created and mmapped for shared memory will be called "homeuser1config.db-shm". Another approach to is to use files in devshm or devtmp or an some other tmpfs mount. But if a file in a different directory from the database file is used, then differing access permissions or a chroot() might cause two different processes on the same database to end up using different files for shared memory - meaning that their memory would not really be shared - resulting in database corruption. Nevertheless, this tmpfs file usage can be enabled at compile-time using -DSQLITE_SHM_DIRECTORY="devshm" or the equivalent. The use of the SQLITE_SHM_DIRECTORY compile-time option results in an incompatible build of SQLite; builds of SQLite** that with differing SQLITE_SHM_DIRECTORY settings attempt to use the ** same database file at the same time, database corruption will likely ** result. The SQLITE_SHM_DIRECTORY compile-time option is considered ** "unsupported" and may go away in a future SQLite release. ** ** When opening a new shared-memory file, if no other instances of that ** file are currently open, in this process or in other processes, then ** the file must be truncated to zero length or have its header cleared. ** ** If the original database file (pDbFd) is using the "unix-excl" VFS ** that means that an exclusive lock is held on the database file and ** that no other processes are able to read or write the database. In ** that case, we do not really need shared memory. No shared memory ** file is created. The shared memory will be simulated with heap memory. 
Name: unixUnmapfile; Comment: ** If it is currently memory mapped, unmap file pFd. 
Name: unixMapfile; Comment: ** Memory map or remap the file opened by file-descriptor pFd (if the file ** is already mapped, the existing mapping is replaced by the new). Or, if ** there already exists a mapping for this file, and there are still ** outstanding xFetch() references to it, this function is a no-op. ** ** If parameter nByte is non-negative, then it is the requested size of ** the mapping to create. Otherwise, if nByte is less than zero, then the ** requested size is the size of the file on disk. The actual size of the ** created mapping is either the requested size or the value configured ** using SQLITE_FCNTL_MMAP_LIMIT, whichever is smaller. ** ** SQLITE_OK is returned if no error occurs (even if the mapping is not ** recreated as a result of outstanding references) or an SQLite error ** code otherwise. 
Name: unixFetch; Comment: ** If possible, return a pointer to a mapping of file fd starting at offset ** iOff. The mapping must be valid for at least nAmt bytes. ** ** If such a pointer can be obtained, store it in *pp and return SQLITE_OK. ** Or, if one cannot but no error occurs, set *pp to 0 and return SQLITE_OK. ** Finally, if an error does occur, return an SQLite error code. The final ** value of *pp is undefined in this case. ** ** If this function does return a pointer, the caller must eventually ** release the reference by calling unixUnfetch(). 
Name: unixUnfetch; Comment: ** If the third argument is non-NULL, then this function releases a ** reference obtained by an earlier call to unixFetch(). The second ** argument passed to this function must be the same as the corresponding ** argument that was passed to the unixFetch() invocation. ** ** Or, if the third argument is NULL, then this function is being called ** to inform the VFS layer that, according to POSIX, any existing mapping ** may now be invalid and should be unmapped. 
Name: unixTempFileDir; Comment: ** Return the name of a directory in which to put temporary files. ** If no suitable temporary file directory can be found, return NULL. 
Name: unixGetTempname; Comment: ** Create a temporary file name in zBuf. zBuf must be allocated ** by the calling process and must be big enough to hold at least ** pVfs->mxPathname bytes. 
Name: findReusableFd; Comment: Search for an unused file descriptor that was opened on the database file (not a journal or super-journal file) identified by pathname zPath with SQLITE_OPEN_XXX flags matching those passed as the second argument to this function. Such a file descriptor may exist if a database connection was closed but the associated file descriptor could not be closed because some other file descriptor open on the same file is holding a file-lock. Refer to comments in the unixClose() function and the lengthy comment describing "Posix Advisory Locking" at the start of this file for further details. Also, ticket #4018.** ** If a suitable file descriptor is found, then it is returned. If no ** such file descriptor is located, -1 is returned. 
Name: unixBackupDir; Comment: ** If the last component of the pathname in z[0]..z[j-1] is something ** other than ".." then back it out and return true. If the last ** component is empty or if it is ".." then return false. 
Name: unixDlError; Comment: ** SQLite calls this function immediately after a call to unixDlSym() or ** unixDlOpen() fails (returns a null pointer). If a more detailed error ** message is available, it is written to zBufOut. If no error message ** is available, zBufOut is left unmodified and SQLite uses a default ** error message. 
Name: unixRandomness; Comment: ** Write nBuf bytes of random data to the supplied buffer zBuf. 
Name: unixSleep; Comment: ** Sleep for a little while. Return the amount of time slept. ** The argument is the number of microseconds we want to sleep. ** The return value is the number of microseconds of sleep actually ** requested from the underlying operating system, a number which ** might be greater than or equal to the argument, but not less ** than the argument. 
Name: unixCurrentTimeInt64; Comment: ** Find the current time (in Universal Coordinated Time). Write into *piNow ** the current time and date as a Julian Day number times 86_400_000. In ** other words, write into *piNow the number of milliseconds since the Julian ** epoch of noon in Greenwich on November 24, 4714 B.C according to the ** proleptic Gregorian calendar. ** ** On success, return SQLITE_OK. Return SQLITE_ERROR if the time and date ** cannot be found. 
Name: unixCurrentTime; Comment: ** Find the current time (in Universal Coordinated Time). Write the ** current time and date as a Julian Day number into *prNow and ** return 0. Return 1 if the time and date cannot be found. 
Name: unixGetLastError; Comment: ** The xGetLastError() method is designed to return a better ** low-level error message when operating-system problems come up ** during SQLite operation. Only the integer return code is currently ** used. 
Name: proxyGetLockPath; Comment: ** The proxy lock file path for the database at dbPath is written into lPath, ** which must point to valid, writable memory large enough for a maxLen length ** file path. 
Name: proxyCreateLockPath; Comment: ** Creates the lock file and any missing directories in lockPath 
Name: proxyGetHostID; Comment: get the host ID via gethostuuid(), pHostID must point to PROXY_HOSTIDLEN** bytes of writable memory. 
Name: proxyBreakConchLock; Comment: ** Takes an open conch file, copies the contents to a new path and then moves ** it back. The newly created file's file descriptor is assigned to the ** conch file structure and finally the original conch file descriptor is ** closed. Returns zero if successful. 
Name: proxyConchLock; Comment: Take the requested lock on the conch file and break a stale lock if the** host id matches. 
Name: proxyTakeConch; Comment: Takes the conch by taking a shared lock and read the contents conch, if** lockPath is non-NULL, the host ID and lock file path must match. A NULL ** lockPath means that the lockPath in the conch file will be used if the ** host IDs match, or a new lock path will be generated automatically ** and written to the conch file. 
Name: proxyReleaseConch; Comment: ** If pFile holds a lock on a conch file, then release that lock. 
Name: proxyCreateConchPathname; Comment: ** Given the name of a database file, compute the name of its conch file. ** Store the conch filename in memory obtained from sqlite3_malloc64(). ** Make *pConchPath point to the new name. Return SQLITE_OK on success ** or SQLITE_NOMEM if unable to obtain memory. ** ** The caller is responsible for ensuring that the allocated memory ** space is eventually freed. ** ** *pConchPath is set to NULL if a memory allocation error occurs. 
Name: switchLockProxyPath; Comment: Takes a fully configured proxy locking-style unix file and switches** the local lock file path 
Name: proxyGetDbPathForUnixFile; Comment: ** pFile is a file that has been opened by a prior xOpen call. dbPath ** is a string buffer at least MAXPATHLEN+1 characters in size. ** ** This routine find the filename associated with pFile and writes it ** int dbPath. 
Name: proxyTransformUnixFile; Comment: ** Takes an already filled in unix file and alters it so all file locking ** will be performed on the local proxy lock file. The following fields ** are preserved in the locking context so that they can be restored and ** the unix structure properly cleaned up at close time: ** ->lockingContext ** ->pMethod 
Name: proxyFileControl; Comment: ** This routine handles sqlite3_file_control() calls that are specific ** to proxy locking. 
Name: proxyCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, set *pResOut ** to a non-zero value otherwise *pResOut is set to zero. The return value ** is set to SQLITE_OK unless an I/O error occurs during lock checking. 
Name: proxyLock; Comment: ** Lock the file with the lock specified by parameter eFileLock - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** This routine will only increase a lock. Use the sqlite3OsUnlock() ** routine to lower a locking level. 
Name: proxyUnlock; Comment: ** Lower the locking level on file descriptor pFile to eFileLock. eFileLock ** must be either NO_LOCK or SHARED_LOCK. ** ** If the locking level of the file descriptor is already at or below ** the requested locking level, this routine is a no-op. 
Name: proxyClose; Comment: ** Close a file that uses proxy locks. 
Name: sqlite3_os_init; Comment: ** Initialize the operating system interface. ** ** This routine registers all VFS implementations for unix-like operating ** systems. This routine, and the sqlite3_os_end() routine that follows, ** should be the only routines in this file that are visible from other ** files. ** ** This routine is called once during SQLite initialization and by a ** single thread. The memory allocation and mutex subsystems have not ** necessarily been initialized when this routine is called, and so they ** should not be used. 
Name: sqlite3_os_end; Comment: ** Shutdown the operating system interface. ** ** Some operating systems might need to do some cleanup in this routine, ** to release dynamically allocated objects. But not on unix. ** This routine is a no-op for unix. 
Name: winGetSystemCall; Comment: ** Return the value of a system call. Return NULL if zName is not a ** recognized system call name. NULL is also returned if the system call ** is currently undefined. 
Name: winNextSystemCall; Comment: ** Return the name of the first system call after zName. If zName==NULL ** then return the name of the first system call. Return NULL if zName ** is the last system call or if zName is not the name of a valid ** system call. 
Name: sqlite3_win32_compact_heap; Comment: ** If a Win32 native heap has been configured, this function will attempt to ** compact it. Upon success, SQLITE_OK will be returned. Upon failure, one ** of SQLITE_NOMEM, SQLITE_ERROR, or SQLITE_NOTFOUND will be returned. The ** "pnLargest" argument, if non-zero, will be used to return the size of the ** largest committed free block in the heap, in bytes. 
Name: sqlite3_win32_reset_heap; Comment: ** If a Win32 native heap has been configured, this function will attempt to ** destroy and recreate it. If the Win32 native heap is not isolated and/or ** the sqlite3_memory_used() function does not return zero, SQLITE_BUSY will ** be returned and no changes will be made to the Win32 native heap. 
Name: sqlite3_win32_write_debug; Comment: ** This function outputs the specified (ANSI) string to the Win32 debugger ** (if available). 
Name: sqlite3_win32_is_nt; Comment: ** This function determines if the machine is running a version of Windows ** based on the NT kernel. 
Name: winMemMalloc; Comment: ** Allocate nBytes of memory. 
Name: winMemFree; Comment: ** Free memory. 
Name: winMemRealloc; Comment: ** Change the size of an existing memory allocation 
Name: winMemSize; Comment: ** Return the size of an outstanding allocation, in bytes. 
Name: winMemRoundup; Comment: ** Round up a request size to the next valid allocation size. 
Name: winMemInit; Comment: ** Initialize this module. 
Name: winMemShutdown; Comment: ** Deinitialize this module. 
Name: sqlite3MemGetWin32; Comment: ** Populate the low-level memory allocation function pointers in ** sqlite3GlobalConfig.m with pointers to the routines in this file. The ** arguments specify the block of memory to manage. ** ** This routine is only called by sqlite3_config(), and therefore ** is not required to be threadsafe (it is not). 
Name: winUtf8ToUnicode; Comment: ** Convert a UTF-8 string to Microsoft Unicode. ** ** Space to hold the returned string is obtained from sqlite3_malloc(). 
Name: winUnicodeToUtf8; Comment: ** Convert a Microsoft Unicode string to UTF-8. ** ** Space to hold the returned string is obtained from sqlite3_malloc(). 
Name: winMbcsToUnicode; Comment: ** Convert an ANSI string to Microsoft Unicode, using the ANSI or OEM ** code page. ** ** Space to hold the returned string is obtained from sqlite3_malloc(). 
Name: winUnicodeToMbcs; Comment: ** Convert a Microsoft Unicode string to a multi-byte character string, ** using the ANSI or OEM code page. ** ** Space to hold the returned string is obtained from sqlite3_malloc(). 
Name: winMbcsToUtf8; Comment: ** Convert a multi-byte character string to UTF-8. ** ** Space to hold the returned string is obtained from sqlite3_malloc(). 
Name: winUtf8ToMbcs; Comment: ** Convert a UTF-8 string to a multi-byte character string. ** ** Space to hold the returned string is obtained from sqlite3_malloc(). 
Name: sqlite3_win32_utf8_to_unicode; Comment: ** This is a public wrapper for the winUtf8ToUnicode() function. 
Name: sqlite3_win32_unicode_to_utf8; Comment: ** This is a public wrapper for the winUnicodeToUtf8() function. 
Name: sqlite3_win32_mbcs_to_utf8; Comment: ** This is a public wrapper for the winMbcsToUtf8() function. 
Name: sqlite3_win32_mbcs_to_utf8_v2; Comment: ** This is a public wrapper for the winMbcsToUtf8() function. 
Name: sqlite3_win32_utf8_to_mbcs; Comment: ** This is a public wrapper for the winUtf8ToMbcs() function. 
Name: sqlite3_win32_utf8_to_mbcs_v2; Comment: ** This is a public wrapper for the winUtf8ToMbcs() function. 
Name: winGetLastErrorMsg; Comment: ** The return value of winGetLastErrorMsg ** is zero if the error message fits in the buffer, or non-zero ** otherwise (if the message was truncated). 
Name: winRetryIoerr; Comment: ** If a ReadFile() or WriteFile() error occurs, invoke this routine ** to see if it should be retried. Return TRUE to retry. Return FALSE ** to give up with an error. 
Name: winLogIoerr; Comment: ** Log a I/O error retry episode. 
Name: localtime; Comment: # include <time.h> 
Name: winceMutexAcquire; Comment: ** Acquire a lock on the handle h 
Name: winceCreateLock; Comment: ** Create the mutex and shared memory used for locking in the file ** descriptor pFile 
Name: winceDestroyLock; Comment: ** Destroy the part of winFile that deals with wince locks 
Name: winceLockFile; Comment: ** An implementation of the LockFile() API of Windows for CE 
Name: winceUnlockFile; Comment: ** An implementation of the UnlockFile API of Windows for CE 
Name: winLockFile; Comment: ** Lock a file region. 
Name: winUnlockFile; Comment: ** Unlock a file region. 
Name: winSeekFile; Comment: ** Move the current position of the file handle passed as the first ** argument to offset iOffset within the file. If successful, return 0. ** Otherwise, set pFile->lastErrno and return non-zero. 
Name: winTruncate; Comment: ** Truncate an open file to a specified size 
Name: winSync; Comment: ** Make sure all writes to a particular file are committed to disk. 
Name: winFileSize; Comment: ** Determine the current size of a file in bytes 
Name: winGetReadLock; Comment: ** Acquire a reader lock. ** Different API routines are called depending on whether or not this ** is Win9x or WinNT. 
Name: winUnlockReadLock; Comment: ** Undo a readlock 
Name: winLock; Comment: ** Lock the file with the lock specified by parameter locktype - one ** of the following: ** ** (1) SHARED_LOCK ** (2) RESERVED_LOCK ** (3) PENDING_LOCK ** (4) EXCLUSIVE_LOCK ** ** Sometimes when requesting one lock state, additional lock states ** are inserted in between. The locking might fail on one of the later ** transitions leaving the lock state different from what it started but ** still short of its goal. The following chart shows the allowed ** transitions and the inserted intermediate states: ** ** UNLOCKED -> SHARED ** SHARED -> RESERVED ** SHARED -> (PENDING) -> EXCLUSIVE ** RESERVED -> (PENDING) -> EXCLUSIVE ** PENDING -> EXCLUSIVE ** ** This routine will only increase a lock. The winUnlock() routine ** erases all locks at once and returns us immediately to locking level 0. ** It is not possible to lower the locking level one step at a time. You ** must go straight to locking level 0. 
Name: winCheckReservedLock; Comment: ** This routine checks if there is a RESERVED lock held on the specified ** file by this or any other process. If such a lock is held, return ** non-zero, otherwise zero. 
Name: winNolockLock; Comment: *********************************************************************************************************** No-op Locking ********************************** ** ** Of the various locking implementations available, this is by far the ** simplest: locking is ignored. No attempt is made to lock the database ** file for reading or writing. ** ** This locking mode is appropriate for use on read-only databases ** (ex: databases that are burned into CD-ROM, for example.) It can ** also be used if the application employs some external mechanism to ** prevent simultaneous access of the same database by two or more ** database connections. But there is a serious risk of database ** corruption if this locking mode is used in situations where multiple ** database connections are accessing the same database file at the same ** time and one or more of those connections are writing. 
Name: winModeBit; Comment: ** If *pArg is initially negative then this is a query. Set *pArg to ** 1 or 0 depending on whether or not bit mask of pFile->ctrlFlags is set. ** ** If *pArg is 0 or 1, then clear or set the mask bit of pFile->ctrlFlags. 
Name: winFileControl; Comment: ** Control and query of the open file handle. 
Name: winSectorSize; Comment: ** Return the sector size in bytes of the underlying block device for ** the specified file. This is almost always 512 bytes, but may be ** larger for some devices. ** ** SQLite code assumes this function cannot fail. It also assumes that ** if two files are created in the same file-system directory (i.e. ** a database and its journal file) that the sector size will be the ** same for both. 
Name: winDeviceCharacteristics; Comment: ** Return a vector of device characteristics. 
Name: winShmPurge; Comment: Purge the winShmNodeList list of all entries with winShmNode.nRef==0. This is not a VFS shared-memory method; it is a utility function called** by VFS shared-memory methods. 
Name: winLockSharedMemory; Comment: ** The DMS lock has not yet been taken on shm file pShmNode. Attempt to ** take it now. Return SQLITE_OK if successful, or an SQLite error ** code otherwise. ** ** If the DMS cannot be locked because this is a readonly_shm=1 ** connection and no other process already holds a lock, return ** SQLITE_READONLY_CANTINIT and set pShmNode->isUnlocked=1. 
Name: winOpenSharedMemory; Comment: ** Open the shared-memory area associated with database file pDbFd. ** ** When opening a new shared-memory file, if no other instances of that ** file are currently open, in this process or in other processes, then ** the file must be truncated to zero length or have its header cleared. 
Name: winMapfile; Comment: ** Memory map or remap the file opened by file-descriptor pFd (if the file ** is already mapped, the existing mapping is replaced by the new). Or, if ** there already exists a mapping for this file, and there are still ** outstanding xFetch() references to it, this function is a no-op. ** ** If parameter nByte is non-negative, then it is the requested size of ** the mapping to create. Otherwise, if nByte is less than zero, then the ** requested size is the size of the file on disk. The actual size of the ** created mapping is either the requested size or the value configured ** using SQLITE_FCNTL_MMAP_SIZE, whichever is smaller. ** ** SQLITE_OK is returned if no error occurs (even if the mapping is not ** recreated as a result of outstanding references) or an SQLite error ** code otherwise. 
Name: winFetch; Comment: ** If possible, return a pointer to a mapping of file fd starting at offset ** iOff. The mapping must be valid for at least nAmt bytes. ** ** If such a pointer can be obtained, store it in *pp and return SQLITE_OK. ** Or, if one cannot but no error occurs, set *pp to 0 and return SQLITE_OK. ** Finally, if an error does occur, return an SQLite error code. The final ** value of *pp is undefined in this case. ** ** If this function does return a pointer, the caller must eventually ** release the reference by calling winUnfetch(). 
Name: winUnfetch; Comment: ** If the third argument is non-NULL, then this function releases a ** reference obtained by an earlier call to winFetch(). The second ** argument passed to this function must be the same as the corresponding ** argument that was passed to the winFetch() invocation. ** ** Or, if the third argument is NULL, then this function is being called ** to inform the VFS layer that, according to POSIX, any existing mapping ** may now be invalid and should be unmapped. 
Name: winConvertToUtf8Filename; Comment: ** Convert a filename from whatever the underlying operating system ** supports for filenames into UTF-8. Space to hold the result is ** obtained from malloc and must be freed by the calling function. 
Name: winConvertFromUtf8Filename; Comment: ** Convert a UTF-8 filename into whatever form the underlying ** operating system wants filenames in. Space to hold the result ** is obtained from malloc and must be freed by the calling ** function. 
Name: winMakeEndInDirSep; Comment: ** This function returns non-zero if the specified UTF-8 string buffer ** ends with a directory separator character or one was successfully ** added to it. 
Name: winGetTempname; Comment: ** Create a temporary file name and store the resulting pointer into pzBuf. ** The pointer returned in pzBuf must be freed via sqlite3_free(). 
Name: winIsDir; Comment: ** Return TRUE if the named file is really a directory. Return false if ** it is something other than a directory, or if there is any kind of memory ** allocation failure. 
Name: winIsLongPathPrefix; Comment: ** Returns non-zero if the specified path name starts with the "long path" ** prefix. 
Name: winIsDriveLetterAndColon; Comment: ** Returns non-zero if the specified path name starts with a drive letter ** followed by a colon character. 
Name: winIsVerbatimPathname; Comment: ** Returns non-zero if the specified path name should be used verbatim. If ** non-zero is returned from this function, the calling function must simply ** use the provided path name verbatim -OR- resolve it into a full path name ** using the GetFullPathName Win32 API function (if available). 
Name: winDlOpen; Comment: ** Interfaces for opening a shared library, finding entry points ** within the shared library, and closing the shared library. 
Name: xorMemory; Comment: Mix sz bytes of entropy into p. 
Name: winRandomness; Comment: ** Write up to nBuf bytes of randomness into zBuf. 
Name: winSleep; Comment: ** Sleep for a little while. Return the amount of time slept. 
Name: winCurrentTimeInt64; Comment: ** Find the current time (in Universal Coordinated Time). Write into *piNow ** the current time and date as a Julian Day number times 86_400_000. In ** other words, write into *piNow the number of milliseconds since the Julian ** epoch of noon in Greenwich on November 24, 4714 B.C according to the ** proleptic Gregorian calendar. ** ** On success, return SQLITE_OK. Return SQLITE_ERROR if the time and date ** cannot be found. 
Name: winCurrentTime; Comment: ** Find the current time (in Universal Coordinated Time). Write the ** current time and date as a Julian Day number into *prNow and ** return 0. Return 1 if the time and date cannot be found. 
Name: winGetLastError; Comment: None }** ** However if an error message is supplied, it will be incorporated ** by sqlite into the error message available to the user using ** sqlite3_errmsg(), possibly making IO errors easier to debug. 
Name: sqlite3_os_init; Comment: ** Initialize and deinitialize the operating system interface. 
Name: memdbClose; Comment: ** Close an memdb-file. ** ** The pData pointer is owned by the application, so there is nothing ** to free. Unless the SQLITE_DESERIALIZE_FREEONCLOSE flag is set, ** in which case we own the pData pointer and need to free it. 
Name: memdbRead; Comment: ** Read data from an memdb-file. 
Name: memdbEnlarge; Comment: ** Try to enlarge the memory allocation to hold at least sz bytes 
Name: memdbWrite; Comment: ** Write data to an memdb-file. 
Name: memdbTruncate; Comment: ** Truncate an memdb-file. ** ** In rollback mode (which is always the case for memdb, as it does not ** support WAL mode) the truncate() method is only used to reduce ** the size of a file, never to increase the size. 
Name: memdbSync; Comment: ** Sync an memdb-file. 
Name: memdbFileSize; Comment: ** Return the current file-size of an memdb-file. 
Name: memdbLock; Comment: ** Lock an memdb-file. 
Name: memdbCheckReservedLock; Comment: ** Check if another file-handle holds a RESERVED lock on an memdb-file. 
Name: memdbFileControl; Comment: ** File control method. For custom operations on an memdb-file. 
Name: memdbSectorSize; Comment: ** Return the sector-size in bytes for an memdb-file. 
Name: memdbDeviceCharacteristics; Comment: ** Return the device characteristic flags supported by an memdb-file. 
Name: memdbFetch; Comment: Fetch a page of a memory-mapped file 
Name: memdbUnfetch; Comment: Release a memory-mapped page 
Name: memdbOpen; Comment: ** Open an mem file handle. 
Name: memdbDelete; Comment: ** Delete the file located at zPath. If the dirSync argument is true, ** ensure the file-system modifications are synced to disk before ** returning. 
Name: memdbAccess; Comment: ** Test for access permissions. Return true if the requested permission ** is available, or false otherwise. ** ** With memdb, no files ever exist on disk. So always return false. 
Name: memdbFullPathname; Comment: ** Populate buffer zOut with the full canonical pathname corresponding ** to the pathname in zPath. zOut is guaranteed to point to a buffer ** of at least (INST_MAX_PATHNAME+1) bytes. 
Name: memdbDlOpen; Comment: ** Open the dynamic library located at zPath and return a handle. 
Name: memdbDlError; Comment: ** Populate the buffer zErrMsg (size nByte bytes) with a human readable ** utf-8 string describing the most recent error encountered associated ** with dynamic libraries. 
Name: void; Comment: ** Return a pointer to the symbol zSymbol in the dynamic library pHandle. 
Name: memdbDlClose; Comment: ** Close the dynamic library handle pHandle. 
Name: memdbRandomness; Comment: ** Populate the buffer pointed to by zBufOut with nByte bytes of ** random data. 
Name: memdbSleep; Comment: ** Sleep for nMicro microseconds. Return the number of microseconds ** actually slept. 
Name: memdbCurrentTime; Comment: ** Return the current time as a Julian Day number in *pTimeOut. 
Name: memdbFromDbSchema; Comment: ** Translate a database connection pointer and schema name into a ** MemFile pointer. 
Name: sqlite3MemdbInit; Comment: ** This routine is called when the extension is loaded. ** Register the new VFS. 
Name: sqlite3BitvecCreate; Comment: ** Create a new bitmap object able to handle bits between 0 and iSize, ** inclusive. Return a pointer to the new object. Return NULL if ** malloc fails. 
Name: sqlite3BitvecTestNotNull; Comment: ** Check to see if the i-th bit is set. Return true or false. ** If p is NULL (if the bitmap has not been created) or if ** i is out of range, then return false. 
Name: sqlite3BitvecSet; Comment: ** Set the i-th bit. Return 0 on success and an error code if ** anything goes wrong. ** ** This routine might cause sub-bitmaps to be allocated. Failing ** to get the memory needed to hold the sub-bitmap is the only ** that can go wrong with an insert, assuming p and i are valid. ** ** The calling function must ensure that p is a valid Bitvec object ** and that the value for "i" is within range of the Bitvec object. ** Otherwise the behavior is undefined. 
Name: sqlite3BitvecClear; Comment: ** Clear the i-th bit. ** ** pBuf must be a pointer to at least BITVEC_SZ bytes of temporary storage ** that BitvecClear can use to rebuilt its hash table. 
Name: sqlite3BitvecDestroy; Comment: ** Destroy a bitmap object. Reclaim all memory used. 
Name: sqlite3BitvecSize; Comment: ** Return the value of the iSize parameter specified when Bitvec *p ** was created. 
Name: sqlite3BitvecBuiltinTest; Comment: ** This routine runs an extensive test of the Bitvec code. ** ** The input is an array of integers that acts as a program ** to test the Bitvec. The integers are opcodes followed ** by 0, 1, or 3 operands, depending on the opcode. Another ** opcode follows immediately after the last operand. ** ** There are 6 opcodes numbered from 0 through 5. 0 is the ** "halt" opcode and causes the test to end. ** ** 0 Halt and return the number of errors ** 1 N S X Set N bits beginning with S and incrementing by X ** 2 N S X Clear N bits beginning with S and incrementing by X ** 3 N Set N randomly chosen bits ** 4 N Clear N randomly chosen bits ** 5 N S X Set N bits from S increment X in array only, not in bitvec ** ** The opcodes 1 through 4 perform set and clear operations are performed ** on both a Bitvec object and on a linear array of bits obtained from malloc. ** Opcode 5 works on the linear array only, not on the Bitvec. ** Opcode 5 is used to deliberately induce a fault in order to ** confirm that error detection works. ** ** At the conclusion of the test the linear array is compared ** against the Bitvec object. If there are any differences, ** an error is returned. If they are the same, zero is returned. ** ** If a memory allocation error occurs, return -1. 
Name: pcacheManageDirtyList; Comment: ** Manage pPage's participation on the dirty list. Bits of the addRemove ** argument determines what operation to do. The 0x01 bit means first ** remove pPage from the dirty list. The 0x02 means add pPage back to ** the dirty list. Doing both moves pPage to the front of the dirty list. 
Name: pcacheUnpin; Comment: ** Wrapper around the pluggable caches xUnpin method. If the cache is ** being used for an in-memory database, this function is a no-op. 
Name: numberOfCachePages; Comment: ** Compute the number of pages of cache requested. p->szCache is the ** cache size requested by the "PRAGMA cache_size" statement. 
Name: sqlite3PcacheInitialize; Comment: ************************************************** General Interfaces ******** ** Initialize and shutdown the page cache subsystem. Neither of these ** functions are threadsafe. 
Name: sqlite3PcacheSetPageSize; Comment: ** Change the page size for PCache object. The caller must ensure that there ** are no outstanding page references when this function is called. 
Name: sqlite3PcacheRelease; Comment: ** Decrement the reference count on a page. If the page is clean and the ** reference count drops to 0, then it is made eligible for recycling. 
Name: sqlite3PcacheRef; Comment: ** Increase the reference count of a supplied page by 1. 
Name: sqlite3PcacheDrop; Comment: ** Drop a page from the cache. There must be exactly one reference to the ** page. This function deletes that reference, so after it returns the ** page pointed to by p is invalid. 
Name: sqlite3PcacheMakeDirty; Comment: ** Make sure the page is marked as dirty. If it isn't dirty already, ** make it so. 
Name: sqlite3PcacheMakeClean; Comment: ** Make sure the page is marked as clean. If it isn't clean already, ** make it so. 
Name: sqlite3PcacheCleanAll; Comment: ** Make every page in the cache clean. 
Name: sqlite3PcacheClearWritable; Comment: ** Clear the PGHDR_NEED_SYNC and PGHDR_WRITEABLE flag from all dirty pages. 
Name: sqlite3PcacheClearSyncFlags; Comment: ** Clear the PGHDR_NEED_SYNC flag from all dirty pages. 
Name: sqlite3PcacheMove; Comment: ** Change the page number of page p to newPgno. 
Name: sqlite3PcacheTruncate; Comment: ** Drop every cache entry whose page number is greater than "pgno". The ** caller must ensure that there are no outstanding references to any pages ** other than page 1 with a page number greater than pgno. ** ** If there is a reference to page 1 and the pgno parameter passed to this ** function is 0, then the data area associated with page 1 is zeroed, but ** the page object is not dropped. 
Name: sqlite3PcacheClose; Comment: ** Close a cache. 
Name: sqlite3PcacheClear; Comment: ** Discard the contents of the cache. 
Name: pcacheMergeDirtyList; Comment: ** Merge two lists of pages connected by pDirty and in pgno order. ** Do not bother fixing the pDirtyPrev pointers. 
Name: sqlite3PcacheDirtyList; Comment: ** Return a list of all dirty pages in the cache, sorted by page number. 
Name: sqlite3PcacheRefCount; Comment: ** Return the total number of references to all pages held by the cache. ** ** This is not the total number of pages referenced, but the sum of the ** reference count for all pages. 
Name: sqlite3PcachePageRefcount; Comment: ** Return the number of references to the page supplied as an argument. 
Name: sqlite3PcachePagecount; Comment: ** Return the total number of pages in the cache. 
Name: sqlite3PcacheGetCachesize; Comment: ** Get the suggested cache-size value. 
Name: sqlite3PcacheSetCachesize; Comment: ** Set the suggested cache-size value. 
Name: sqlite3PcacheSetSpillsize; Comment: ** Set the suggested cache-spill value. Make no changes if if the ** argument is zero. Return the effective cache-spill size, which will ** be the larger of the szSpill and szCache. 
Name: sqlite3PcacheShrink; Comment: ** Free up as much memory as possible from the page cache. 
Name: sqlite3PCachePercentDirty; Comment: ** Return the number of dirty pages currently in the cache, as a percentage ** of the configured cache size. 
Name: sqlite3PCacheIsDirty; Comment: ** Return true if there are one or more dirty pages in the cache. Else false. 
Name: sqlite3PcacheIterateDirty; Comment: ** For all dirty pages currently in the cache, invoke the specified ** callback. This is only used if the SQLITE_CHECK_PAGES macro is ** defined. 
Name: sqlite3PCacheBufferSetup; Comment: ** This function is called during initialization if a static buffer is ** supplied to use for the page-cache by passing the SQLITE_CONFIG_PAGECACHE ** verb to sqlite3_config(). Parameter pBuf points to an allocation large ** enough to contain 'n' buffers of 'sz' bytes each. ** ** This routine is called from sqlite3_initialize() and so it is guaranteed ** to be serialized already. There is no need for further mutexing. 
Name: pcache1InitBulk; Comment: ** Try to initialize the pCache->pFree and pCache->pBulk fields. Return ** true if pCache->pFree ends up containing one or more free pages. 
Name: pcache1Alloc; Comment: ** Malloc function used within this file to allocate space from the buffer ** configured using sqlite3_config(SQLITE_CONFIG_PAGECACHE) option. If no ** such buffer exists or there is no space left in it, this function falls ** back to sqlite3Malloc(). ** ** Multiple threads can run this routine at the same time. Global variables ** in pcache1 need to be protected via mutex. 
Name: pcache1Free; Comment: ** Free an allocated buffer obtained from pcache1Alloc(). 
Name: pcache1MemSize; Comment: ** Return the size of a pcache allocation 
Name: pcache1AllocPage; Comment: ** Allocate a new page object initially associated with cache pCache. 
Name: pcache1FreePage; Comment: ** Free a page object allocated by pcache1AllocPage(). 
Name: sqlite3PageMalloc; Comment: ** Malloc function used by SQLite to obtain space from the buffer configured ** using sqlite3_config(SQLITE_CONFIG_PAGECACHE) option. If no such buffer ** exists, this function falls back to sqlite3Malloc(). 
Name: sqlite3PageFree; Comment: ** Free an allocated buffer obtained from sqlite3PageMalloc(). 
Name: pcache1UnderMemoryPressure; Comment: ** Return true if it desirable to avoid allocating a new page cache ** entry. ** ** If memory was allocated specifically to the page cache using ** SQLITE_CONFIG_PAGECACHE but that memory has all been used, then ** it is desirable to avoid allocating a new page cache entry because ** presumably SQLITE_CONFIG_PAGECACHE was suppose to be sufficient ** for all page cache needs and we should not need to spill the ** allocation onto the heap. ** ** Or, the heap is used for all page cache memory but the heap is ** under memory pressure, then again it is desirable to avoid ** allocating a new page cache entry in order to avoid stressing ** the heap even further. 
Name: pcache1ResizeHash; Comment: ** This function is used to resize the hash table used by the cache passed ** as the first argument. ** ** The PCache mutex must be held when this function is called. 
Name: pcache1PinPage; Comment: ** This function is used internally to remove the page pPage from the ** PGroup LRU list, if is part of it. If pPage is not part of the PGroup ** LRU list, then this function is a no-op. ** ** The PGroup mutex must be held when this function is called. 
Name: pcache1RemoveFromHash; Comment: ** Remove the page supplied as an argument from the hash table ** (PCache1.apHash structure) that it is currently stored in. ** Also free the page if freePage is true. ** ** The PGroup mutex must be held when this function is called. 
Name: pcache1EnforceMaxPage; Comment: ** If there are currently more than nMaxPage pages allocated, try ** to recycle pages to reduce the number allocated to nMaxPage. 
Name: pcache1Init; Comment: ** Implementation of the sqlite3_pcache.xInit method. 
Name: pcache1Shutdown; Comment: ** Implementation of the sqlite3_pcache.xShutdown method. ** Note that the static mutex allocated in xInit does ** not need to be freed. 
Name: pcache1Create; Comment: ** Implementation of the sqlite3_pcache.xCreate method. ** ** Allocate a new cache. 
Name: pcache1Cachesize; Comment: ** Implementation of the sqlite3_pcache.xCachesize method. ** ** Configure the cache_size limit for a cache. 
Name: pcache1Shrink; Comment: ** Implementation of the sqlite3_pcache.xShrink method. ** ** Free up as much memory as possible. 
Name: pcache1Pagecount; Comment: ** Implementation of the sqlite3_pcache.xPagecount method. 
Name: pcache1FetchStage2; Comment: ** Implement steps 3, 4, and 5 of the pcache1Fetch() algorithm described ** in the header of the pcache1Fetch() procedure. ** ** This steps are broken out into a separate procedure because they are ** usually not needed, and by avoiding the stack initialization required ** for these steps, the main pcache1Fetch() procedure can run faster. 
Name: pcache1FetchNoMutex; Comment: ** Implementation of the sqlite3_pcache.xFetch method. ** ** Fetch a page by key value. ** ** Whether or not a new page may be allocated by this function depends on ** the value of the createFlag argument. 0 means do not allocate a new ** page. 1 means allocate a new page if space is easily available. 2 ** means to try really hard to allocate a new page. ** ** For a non-purgeable cache (a cache used as the storage for an in-memory ** database) there is really no difference between createFlag 1 and 2. So ** the calling function (pcache.c) will never have a createFlag of 1 on ** a non-purgeable cache. ** ** There are three different approaches to obtaining space for a page, ** depending on the value of parameter createFlag (which may be 0, 1 or 2). ** ** 1. Regardless of the value of createFlag, the cache is searched for a ** copy of the requested page. If one is found, it is returned. ** ** 2. If createFlag==0 and the page is not already in the cache, NULL is ** returned. ** ** 3. If createFlag is 1, and the page is not already in the cache, then ** return NULL (do not allocate a new page) if any of the following ** conditions are true: ** ** (a) the number of pages pinned by the cache is greater than ** PCache1.nMax, or ** ** (b) the number of pages pinned by the cache is greater than ** the sum of nMax for all purgeable caches, less the sum of ** nMin for all other purgeable caches, or ** ** 4. If none of the first three conditions apply and the cache is marked ** as purgeable, and if one of the following is true: ** ** (a) The number of pages allocated for the cache is already ** PCache1.nMax, or ** ** (b) The number of pages allocated for all purgeable caches is ** already equal to or greater than the sum of nMax for all ** purgeable caches, ** ** (c) The system is under memory pressure and wants to avoid ** unnecessary pages cache entry allocations ** ** then attempt to recycle a page from the LRU list. If it is the right ** size, return the recycled buffer. Otherwise, free the buffer and ** proceed to step 5. ** ** 5. Otherwise, allocate and return a new page buffer. ** ** There are two versions of this routine. pcache1FetchWithMutex() is ** the general case. pcache1FetchNoMutex() is a faster implementation for ** the common case where pGroup->mutex is NULL. The pcache1Fetch() wrapper ** invokes the appropriate routine. 
Name: pcache1Unpin; Comment: ** Implementation of the sqlite3_pcache.xUnpin method. ** ** Mark a page as unpinned (eligible for asynchronous recycling). 
Name: pcache1Rekey; Comment: ** Implementation of the sqlite3_pcache.xRekey method. 
Name: pcache1Truncate; Comment: ** Implementation of the sqlite3_pcache.xTruncate method. ** ** Discard all unpinned pages in the cache with a page number equal to ** or greater than parameter iLimit. Any pinned pages with a page number ** equal to or greater than iLimit are implicitly unpinned. 
Name: pcache1Destroy; Comment: ** Implementation of the sqlite3_pcache.xDestroy method. ** ** Destroy a cache allocated using pcache1Create(). 
Name: sqlite3PCacheSetDefault; Comment: ** This function is called during initialization (sqlite3_initialize()) to ** install the default pluggable cache module, assuming the user has not ** already provided an alternative. 
Name: sqlite3Pcache1Mutex; Comment: ** Return the global mutex used by this PCACHE implementation. The ** sqlite3_status() routine needs access to this mutex. 
Name: sqlite3PcacheReleaseMemory; Comment: ** This function is called to free superfluous dynamically allocated memory ** held by the pager system. Memory in use by any SQLite pager allocated ** by the current thread may be sqlite3_free()ed. ** ** nReq is the number of bytes of memory required. Once this much has ** been released, the function returns. The return value is the total number ** of bytes of memory released. 
Name: sqlite3RowSetInit; Comment: ** Allocate a RowSet object. Return NULL if a memory allocation ** error occurs. 
Name: sqlite3RowSetClear; Comment: ** Deallocate all chunks from a RowSet. This frees all memory that ** the RowSet has allocated over its lifetime. This routine is ** the destructor for the RowSet. 
Name: sqlite3RowSetDelete; Comment: ** Deallocate all chunks from a RowSet. This frees all memory that ** the RowSet has allocated over its lifetime. This routine is ** the destructor for the RowSet. 
Name: rowSetEntryAlloc; Comment: ** Allocate a new RowSetEntry object that is associated with the ** given RowSet. Return a pointer to the new and completely uninitialized ** object. ** ** In an OOM situation, the RowSet.db->mallocFailed flag is set and this ** routine returns NULL. 
Name: sqlite3RowSetInsert; Comment: ** Insert a new value into a RowSet. ** ** The mallocFailed flag of the database connection is set if a ** memory allocation fails. 
Name: rowSetEntrySort; Comment: ** Sort all elements on the list of RowSetEntry objects into order of ** increasing v. 
Name: rowSetNDeepTree; Comment: ** Convert a sorted list of elements (connected by pRight) into a binary ** tree with depth of iDepth. A depth of 1 means the tree contains a single ** node taken from the head of *ppList. A depth of 2 means a tree with ** three nodes. And so forth. ** ** Use as many entries from the input list as required and update the ** *ppList to point to the unused elements of the list. If the input ** list contains too few elements, then construct an incomplete tree ** and leave *ppList set to NULL. ** ** Return a pointer to the root of the constructed binary tree. 
Name: rowSetListToTree; Comment: ** Convert a sorted list of elements into a binary tree. Make the tree ** as deep as it needs to be in order to contain the entire list. 
Name: sqlite3RowSetNext; Comment: ** Extract the smallest element from the RowSet. ** Write the element into *pRowid. Return 1 on success. Return ** 0 if the RowSet is already empty. ** ** After this routine has been called, the sqlite3RowSetInsert() ** routine may not be called again. ** ** This routine may not be called after sqlite3RowSetTest() has ** been used. Older versions of RowSet allowed that, but as the ** capability was not used by the code generator, it was removed ** for code economy. 
Name: sqlite3RowSetTest; Comment: ** Check to see if element iRowid was inserted into the rowset as ** part of any insert batch prior to iBatch. Return 1 or 0. ** ** If this is the first test of a new batch and if there exist entries ** on pRowSet->pEntry, then sort those entries into the forest at ** pRowSet->pForest so that they can be tested. 
Name: sqlite3PagerDirectReadOk; Comment: ** Return true if page pgno can be read directly from the database file ** by the b-tree layer. This is the case if: ** ** the database file is open, ** there are no dirty pages in the cache, and ** the desired page is not currently in the wal file. 
Name: assert_pager_state; Comment: None** ** This function runs many asserts to try to find inconsistencies in ** the internal state of the Pager object. 
Name: print_pager_state; Comment: ** Return a pointer to a human readable string in a static buffer ** containing the state of the Pager object passed as an argument. This ** is intended to be used within debuggers. For example, as an alternative ** to "print *pPager" in gdb: ** ** (gdb) printf "%s", print_pager_state(pPager) ** ** This routine has external linkage in order to suppress compiler warnings ** about an unused function. It is enclosed within SQLITE_DEBUG and so does ** not appear in normal builds. 
Name: setGetterMethod; Comment: ** Set the Pager.xGet method for the appropriate routine used to fetch ** content from the pager. 
Name: subjRequiresPage; Comment: ** Return true if it is necessary to write page *pPg into the sub-journal. ** A page needs to be written into the sub-journal if there exists one ** or more open savepoints for which: ** ** The page-number is less than or equal to PagerSavepoint.nOrig, and ** The bit corresponding to the page-number is not set in ** PagerSavepoint.pInSavepoint. 
Name: pageInJournal; Comment: ** Return true if the page is already in the journal file. 
Name: read32bits; Comment: ** Read a 32-bit integer from the given file descriptor. Store the integer ** that is read in *pRes. Return SQLITE_OK if everything worked, or an ** error code is something goes wrong. ** ** All values are stored on disk as big-endian. 
Name: write32bits; Comment: ** Write a 32-bit integer into the given file descriptor. Return SQLITE_OK ** on success or an error code is something goes wrong. 
Name: pagerUnlockDb; Comment: Unlock the database file to level eLock, which must be either NO_LOCK or SHARED_LOCK. Regardless of whether or not the call to xUnlock() succeeds, set the Pager.eLock variable to match the (attempted) new lock. Except, if Pager.eLock is set to UNKNOWN_LOCK when this function is called, do not modify it. See the comment above the #define of** UNKNOWN_LOCK for an explanation of this. 
Name: pagerLockDb; Comment: Lock the database file to level eLock, which must be either SHARED_LOCK, RESERVED_LOCK or EXCLUSIVE_LOCK. If the caller is successful, set the Pager.eLock variable to the new locking state. Except, if Pager.eLock is set to UNKNOWN_LOCK when this function is called, do not modify it unless the new locking state is EXCLUSIVE_LOCK. See the comment above the #define of UNKNOWN_LOCK for an explanation** of this. 
Name: jrnlBufferSize; Comment: ** This function determines whether or not the atomic-write or ** atomic-batch-write optimizations can be used with this pager. The ** atomic-write optimization can be used if: ** ** (a) the value returned by OsDeviceCharacteristics() indicates that ** a database page may be written atomically, and ** (b) the value returned by OsSectorSize() is less than or equal ** to the page size. ** ** If it can be used, then the value returned is the size of the journal ** file when it contains rollback data for exactly one page. ** ** The atomic-batch-write optimization can be used if OsDeviceCharacteristics() ** returns a value with the SQLITE_IOCAP_BATCH_ATOMIC bit set. -1 is ** returned in this case. ** ** If neither optimization can be used, 0 is returned. 
Name: pager_datahash; Comment: ** Return a 32-bit hash of the page data for pPage. 
Name: readSuperJournal; Comment: ** When this is called the journal file for pager pPager must be open. ** This function attempts to read a super-journal file name from the ** end of the file and, if successful, copies it into memory supplied ** by the caller. See comments above writeSuperJournal() for the format ** used to store a super-journal file name at the end of a journal file. ** ** zSuper must point to a buffer of at least nSuper bytes allocated by ** the caller. This should be sqlite3_vfs.mxPathname+1 (to ensure there is ** enough space to write the super-journal name). If the super-journal ** name in the journal is longer than nSuper bytes (including a ** nul-terminator), then this is handled as if no super-journal name ** were present in the journal. ** ** If a super-journal file name is present at the end of the journal ** file, then it is copied into the buffer pointed to by zSuper. A ** nul-terminator byte is appended to the buffer following the ** super-journal file name. ** ** If it is determined that no super-journal file name is present ** zSuper[0] is set to 0 and SQLITE_OK returned. ** ** If an error occurs while reading from the journal file, an SQLite ** error code is returned. 
Name: journalHdrOffset; Comment: ** Return the offset of the sector boundary at or immediately ** following the value in pPager->journalOff, assuming a sector ** size of pPager->sectorSize bytes. ** ** i.e for a sector size of 512: ** ** Pager.journalOff Return value ** --------------------------------------- ** 0 0 ** 512 512 ** 100 512 ** 2000 2048 ** 
Name: zeroJournalHdr; Comment: ** The journal file must be open when this function is called. ** ** This function is a no-op if the journal file has not been written to ** within the current transaction (i.e. if Pager.journalOff==0). ** ** If doTruncate is non-zero or the Pager.journalSizeLimit variable is ** set to 0, then truncate the journal file to zero bytes in size. Otherwise, ** zero the 28-byte header at the start of the journal file. In either case, ** if the pager is not in no-sync mode, sync the journal file immediately ** after writing or truncating it. ** ** If Pager.journalSizeLimit is set to a positive, non-zero value, and ** following the truncation or zeroing described above the size of the ** journal file in bytes is larger than this value, then truncate the ** journal file to Pager.journalSizeLimit bytes. The journal file does ** not need to be synced following this operation. ** ** If an IO error occurs, abandon processing and return the IO error code. ** Otherwise, return SQLITE_OK. 
Name: writeJournalHdr; Comment: ** The journal file must be open when this routine is called. A journal ** header (JOURNAL_HDR_SZ bytes) is written into the journal file at the ** current location. ** ** The format for the journal header is as follows: ** - 8 bytes: Magic identifying journal format. ** - 4 bytes: Number of records in journal, or -1 no-sync mode is on. ** - 4 bytes: Random number used for page hash. ** - 4 bytes: Initial database page count. ** - 4 bytes: Sector size used by the process that wrote this journal. ** - 4 bytes: Database page size. ** ** Followed by (JOURNAL_HDR_SZ - 28) bytes of unused space. 
Name: writeSuperJournal; Comment: ** Write the supplied super-journal name into the journal file for pager ** pPager at the current location. The super-journal name must be the last ** thing written to a journal file. If the pager is in full-sync mode, the ** journal file descriptor is advanced to the next sector boundary before ** anything is written. The format is: ** ** + 4 bytes: PAGER_MJ_PGNO. ** + N bytes: super-journal filename in utf-8. ** + 4 bytes: N (length of super-journal name in bytes, no nul-terminator). ** + 4 bytes: super-journal name checksum. ** + 8 bytes: aJournalMagic[]. ** ** The super-journal page checksum is the sum of the bytes in thesuper-journal ** name, where each byte is interpreted as a signed 8-bit integer. ** ** If zSuper is a NULL pointer (occurs for a single database transaction), ** this call is a no-op. 
Name: pager_reset; Comment: ** Discard the entire contents of the in-memory page-cache. 
Name: sqlite3PagerDataVersion; Comment: ** Return the pPager->iDataVersion value 
Name: releaseAllSavepoints; Comment: ** Free all structures in the Pager.aSavepoint[] array and set both ** Pager.aSavepoint and Pager.nSavepoint to zero. Close the sub-journal ** if it is open and the pager is not in exclusive mode. 
Name: addToSavepointBitvecs; Comment: ** Set the bit number pgno in the PagerSavepoint.pInSavepoint ** bitvecs of all open savepoints. Return SQLITE_OK if successful ** or SQLITE_NOMEM if a malloc failure occurs. 
Name: pager_unlock; Comment: ** This function is a no-op if the pager is in exclusive mode and not ** in the ERROR state. Otherwise, it switches the pager to PAGER_OPEN ** state. ** ** If the pager is not in exclusive-access mode, the database file is ** completely unlocked. If the file is unlocked and the file-system does ** not exhibit the UNDELETABLE_WHEN_OPEN property, the journal file is ** closed (if it is open). ** ** If the pager is in ERROR state when this function is called, the ** contents of the pager cache are discarded before switching back to ** the OPEN state. Regardless of whether the pager is in exclusive-mode ** or not, any journal file left in the file-system will be treated ** as a hot-journal and rolled back the next time a read-transaction ** is opened (by this or by any other connection). 
Name: pager_error; Comment: ** This function is called whenever an IOERR or FULL error that requires ** the pager to transition into the ERROR state may ahve occurred. ** The first argument is a pointer to the pager structure, the second ** the error-code about to be returned by a pager API function. The ** value returned is a copy of the second argument to this function. ** ** If the second argument is SQLITE_FULL, SQLITE_IOERR or one of the ** IOERR sub-codes, the pager enters the ERROR state and the error code ** is stored in Pager.errCode. While the pager remains in the ERROR state, ** all major API calls on the Pager will immediately return Pager.errCode. ** ** The ERROR state indicates that the contents of the pager-cache ** cannot be trusted. This state can be cleared by completely discarding ** the contents of the pager-cache. If a transaction was active when ** the persistent error occurred, then the rollback journal may need ** to be replayed to restore the contents of the database file (as if ** it were a hot-journal). 
Name: pagerFlushOnCommit; Comment: ** The write transaction open on pPager is being committed (bCommit==1) ** or rolled back (bCommit==0). ** ** Return TRUE if and only if all dirty pages should be flushed to disk. ** ** Rules: ** ** For non-TEMP databases, always sync to disk. This is necessary ** for transactions to be durable. ** ** Sync TEMP database only on a COMMIT (not a ROLLBACK) when the backing ** file has been created already (via a spill on pagerStress()) and ** when the number of dirty pages in memory exceeds 25% of the total ** cache size. 
Name: pager_end_transaction; Comment: ** This routine ends a transaction. A transaction is usually ended by ** either a COMMIT or a ROLLBACK operation. This routine may be called ** after rollback of a hot-journal, or if an error occurs while opening ** the journal file or writing the very first journal-header of a ** database transaction. ** ** This routine is never called in PAGER_ERROR state. If it is called ** in PAGER_NONE or PAGER_SHARED state and the lock held is less ** exclusive than a RESERVED lock, it is a no-op. ** ** Otherwise, any active savepoints are released. ** ** If the journal file is open, then it is "finalized". Once a journal ** file has been finalized it is not possible to use it to roll back a ** transaction. Nor will it be considered to be a hot-journal by this ** or any other database connection. Exactly how a journal is finalized ** depends on whether or not the pager is running in exclusive mode and ** the current journal-mode (Pager.journalMode value), as follows: ** ** journalMode==MEMORY ** Journal file descriptor is simply closed. This destroys an ** in-memory journal. ** ** journalMode==TRUNCATE ** Journal file is truncated to zero bytes in size. ** ** journalMode==PERSIST ** The first 28 bytes of the journal file are zeroed. This invalidates ** the first journal header in the file, and hence the entire journal ** file. An invalid journal file cannot be rolled back. ** ** journalMode==DELETE ** The journal file is closed and deleted using sqlite3OsDelete(). ** ** If the pager is running in exclusive mode, this method of finalizing ** the journal file is never used. Instead, if the journalMode is ** DELETE and the pager is in exclusive mode, the method described under ** journalMode==PERSIST is used instead. ** ** After the journal is finalized, the pager moves to PAGER_READER state. ** If running in non-exclusive rollback mode, the lock on the file is ** downgraded to a SHARED_LOCK. ** ** SQLITE_OK is returned if no error occurs. If an error occurs during ** any of the IO operations to finalize the journal file or unlock the ** database then the IO error code is returned to the user. If the ** operation to finalize the journal file fails, then the code still ** tries to unlock the database file if not in exclusive mode. If the ** unlock operation fails as well, then the first error code related ** to the first error encountered (the journal finalization one) is ** returned. 
Name: pagerUnlockAndRollback; Comment: ** Execute a rollback if a transaction is active and unlock the ** database file. ** ** If the pager has already entered the ERROR state, do not attempt ** the rollback at this time. Instead, pager_unlock() is called. The ** call to pager_unlock() will discard all in-memory pages, unlock ** the database file and move the pager back to OPEN state. If this ** means that there is a hot-journal left in the file-system, the next ** connection to obtain a shared lock on the pager (which may be this one) ** will roll it back. ** ** If the pager has not already entered the ERROR state, but an IO or ** malloc error occurs during a rollback, then this will itself cause ** the pager to enter the ERROR state. Which will be cleared by the ** call to pager_unlock(), as described above. 
Name: pager_cksum; Comment: ** Parameter aData must point to a buffer of pPager->pageSize bytes ** of data. Compute and return a checksum based ont the contents of the ** page of data and the current value of pPager->cksumInit. ** ** This is not a real checksum. It is really just the sum of the ** random initial value (pPager->cksumInit) and every 200th byte ** of the page data, starting with byte offset (pPager->pageSize%200). ** Each byte is interpreted as an 8-bit unsigned integer. ** ** Changing the formula used to compute this checksum results in an ** incompatible journal file format. ** ** If journal corruption occurs due to a power failure, the most likely ** scenario is that one end or the other of the record will be changed. ** It is much less likely that the two ends of the journal record will be ** correct and the middle be corrupt. Thus, this "checksum" scheme, ** though fast and simple, catches the mostly likely kind of corruption. 
Name: pager_delsuper; Comment: ** Parameter zSuper is the name of a super-journal file. A single journal ** file that referred to the super-journal file has just been rolled back. ** This routine checks if it is possible to delete the super-journal file, ** and does so if it is. ** ** Argument zSuper may point to Pager.pTmpSpace. So that buffer is not ** available for use within this function. ** ** When a super-journal file is created, it is populated with the names ** of all of its child journals, one after another, formatted as utf-8 ** encoded text. The end of each child journal file is marked with a ** nul-terminator byte (0x00). i.e. the entire contents of a super-journal ** file for a transaction involving two databases might be: ** ** "/home/bill/a.db-journal_x00/home/bill/b.db-journal_x00" ** ** A super-journal file may only be deleted once all of its child ** journals have been rolled back. ** ** This function reads the contents of the super-journal file into ** memory and loops through each of the child journal names. For ** each child journal, it checks if: ** ** if the child journal exists, and if so ** if the child journal contains a reference to super-journal ** file zSuper ** ** If a child journal can be found that matches both of the criteria ** above, this function returns without doing anything. Otherwise, if ** no such child journal can be found, file zSuper is deleted from ** the file-system using sqlite3OsDelete(). ** ** If an IO error within this function, an error code is returned. This ** function allocates memory by calling sqlite3Malloc(). If an allocation ** fails, SQLITE_NOMEM is returned. Otherwise, if no IO or malloc errors ** occur, SQLITE_OK is returned. ** ** TODO: This function allocates a single block of memory to load ** the entire contents of the super-journal file. This could be ** a couple of kilobytes or so - potentially larger than the page ** size. 
Name: pager_truncate; Comment: ** This function is used to change the actual size of the database ** file in the file-system. This only happens when committing a transaction, ** or rolling back a transaction (including rolling back a hot-journal). ** ** If the main database file is not open, or the pager is not in either ** DBMOD or OPEN state, this function is a no-op. Otherwise, the size ** of the file is changed to nPage pages (nPage*pPager->pageSize bytes). ** If the file on disk is currently larger than nPage pages, then use the VFS ** xTruncate() method to truncate it. ** ** Or, it might be the case that the file on disk is smaller than ** nPage pages. Some operating system implementations can get confused if ** you try to truncate a file to some size that is larger than it ** currently is, so detect this case and write a single zero byte to ** the end of the new file instead. ** ** If successful, return SQLITE_OK. If an IO error occurs while modifying ** the database file, return the error code to the caller. 
Name: sqlite3SectorSize; Comment: ** Return a sanitized version of the sector-size of OS file pFile. The ** return value is guaranteed to lie between 32 and MAX_SECTOR_SIZE. 
Name: setSectorSize; Comment: ** Set the value of the Pager.sectorSize variable for the given ** pager based on the value returned by the xSectorSize method ** of the open database file. The sector size will be used ** to determine the size and alignment of journal header and ** super-journal pointers within created journal files. ** ** For temporary files the effective sector size is always 512 bytes. ** ** Otherwise, for non-temporary files, the effective sector size is ** the value returned by the xSectorSize() method rounded up to 32 if ** it is less than 32, or rounded down to MAX_SECTOR_SIZE if it ** is greater than MAX_SECTOR_SIZE. ** ** If the file has the SQLITE_IOCAP_POWERSAFE_OVERWRITE property, then set ** the effective sector size to its minimum value (512). The purpose of ** pPager->sectorSize is to define the "blast radius" of bytes that ** might change if a crash occurs while writing to a single byte in ** that range. But with POWERSAFE_OVERWRITE, the blast radius is zero ** (that is what POWERSAFE_OVERWRITE means), so we minimize the sector ** size. For backwards compatibility of the rollback journal file format, ** we cannot reduce the effective sector size below 512. 
Name: pager_playback; Comment: ** Playback the journal and thus restore the database file to ** the state it was in before we started making changes. ** ** The journal file format is as follows: ** ** (1) 8 byte prefix. A copy of aJournalMagic[]. ** (2) 4 byte big-endian integer which is the number of valid page records ** in the journal. If this value is 0xffffffff, then compute the ** number of page records from the journal size. ** (3) 4 byte big-endian integer which is the initial value for the ** sanity checksum. ** (4) 4 byte integer which is the number of pages to truncate the ** database to during a rollback. ** (5) 4 byte big-endian integer which is the sector size. The header ** is this many bytes in size. ** (6) 4 byte big-endian integer which is the page size. ** (7) zero padding out to the next sector size. ** (8) Zero or more pages instances, each as follows: ** + 4 byte page number. ** + pPager->pageSize bytes of data. ** + 4 byte checksum ** ** When we speak of the journal header, we mean the first 7 items above. ** Each entry in the journal is an instance of the 8th item. ** ** Call the value from the second bullet "nRec". nRec is the number of ** valid page entries in the journal. In most cases, you can compute the ** value of nRec from the size of the journal file. But if a power ** failure occurred while the journal was being written, it could be the ** case that the size of the journal file had already been increased but ** the extra entries had not yet made it safely to disk. In such a case, ** the value of nRec computed from the file size would be too large. For ** that reason, we always use the nRec value in the header. ** ** If the nRec value is 0xffffffff it means that nRec should be computed ** from the file size. This value is used when the user selects the ** no-sync option for the journal. A power failure could lead to corruption ** in this case. But for things like temporary table (which will be ** deleted when the power is restored) we don't care. ** ** If the file opened as the journal file is not a well-formed ** journal file then all pages up to the first corrupted page are rolled ** back (or no pages if the journal header is corrupted). The journal file ** is then deleted and SQLITE_OK returned, just as if no corruption had ** been encountered. ** ** If an I/O or malloc() error occurs, the journal-file is not deleted ** and an error code is returned. ** ** The isHot parameter indicates that we are trying to rollback a journal ** that might be a hot journal. Or, it could be that the journal is ** preserved because of JOURNALMODE_PERSIST or JOURNALMODE_TRUNCATE. ** If the journal really is hot, reset the pager cache prior rolling ** back any content. If the journal is merely persistent, no reset is ** needed. 
Name: readDbPage; Comment: ** Read the content for page pPg out of the database file (or out of ** the WAL if that is where the most recent copy if found) into ** pPg->pData. A shared lock or greater must be held on the database ** file before this function is called. ** ** If page 1 is read, then the value of Pager.dbFileVers[] is set to ** the value read from the database file. ** ** If an IO error occurs, then the IO error is returned to the caller. ** Otherwise, SQLITE_OK is returned. 
Name: pager_write_changecounter; Comment: ** Update the value of the change-counter at offsets 24 and 92 in ** the header and the sqlite version number at offset 96. ** ** This is an unconditional update. See also the pager_incr_changecounter() ** routine which only updates the change-counter if the update is actually ** needed, as determined by the pPager->changeCountDone state variable. 
Name: pagerUndoCallback; Comment: ** This function is invoked once for each page that has already been ** written into the log file when a WAL transaction is rolled back. ** Parameter iPg is the page number of said page. The pCtx argument ** is actually a pointer to the Pager structure. ** ** If page iPg is present in the cache, and has no outstanding references, ** it is discarded. Otherwise, if there are one or more outstanding ** references, the page content is reloaded from the database. If the ** attempt to reload content from the database is required and fails, ** return an SQLite error code. Otherwise, SQLITE_OK. 
Name: pagerRollbackWal; Comment: ** This function is called to rollback a transaction on a WAL database. 
Name: pagerBeginReadTransaction; Comment: ** Begin a read transaction on the WAL. ** ** This routine used to be called "pagerOpenSnapshot()" because it essentially ** makes a snapshot of the database at the current point in time and preserves ** that snapshot for use by the reader in spite of concurrently changes by ** other writers or checkpointers. 
Name: pagerPagecount; Comment: ** This function is called as part of the transition from PAGER_OPEN ** to PAGER_READER state to determine the size of the database file ** in pages (assuming the page size currently stored in Pager.pageSize). ** ** If no error occurs, SQLITE_OK is returned and the size of the database ** in pages is stored in *pnPage. Otherwise, an error code (perhaps ** SQLITE_IOERR_FSTAT) is returned and *pnPage is left unmodified. 
Name: pagerOpenWalIfPresent; Comment: ** Check if the *-wal file that corresponds to the database opened by pPager ** exists if the database is not empy, or verify that the *-wal file does ** not exist (by deleting it) if the database file is empty. ** ** If the database is not empty and the *-wal file exists, open the pager ** in WAL mode. If the database is empty or if no *-wal file exists and ** if no error occurs, make sure Pager.journalMode is not set to ** PAGER_JOURNALMODE_WAL. ** ** Return SQLITE_OK or an error code. ** ** The caller must hold a SHARED lock on the database file to call this ** function. Because an EXCLUSIVE lock on the db file is required to delete ** a WAL on a none-empty database, this ensures there is no race condition ** between the xAccess() below and an xDelete() being executed by some ** other connection. 
Name: pagerPlaybackSavepoint; Comment: ** Playback savepoint pSavepoint. Or, if pSavepoint==NULL, then playback ** the entire super-journal file. The case pSavepoint==NULL occurs when ** a ROLLBACK TO command is invoked on a SAVEPOINT that is a transaction ** savepoint. ** ** When pSavepoint is not NULL (meaning a non-transaction savepoint is ** being rolled back), then the rollback consists of up to three stages, ** performed in the order specified: ** ** Pages are played back from the main journal starting at byte ** offset PagerSavepoint.iOffset and continuing to ** PagerSavepoint.iHdrOffset, or to the end of the main journal ** file if PagerSavepoint.iHdrOffset is zero. ** ** If PagerSavepoint.iHdrOffset is not zero, then pages are played ** back starting from the journal header immediately following ** PagerSavepoint.iHdrOffset to the end of the main journal file. ** ** Pages are then played back from the sub-journal file, starting ** with the PagerSavepoint.iSubRec and continuing to the end of ** the journal file. ** ** Throughout the rollback process, each time a page is rolled back, the ** corresponding bit is set in a bitvec structure (variable pDone in the ** implementation below). This is used to ensure that a page is only ** rolled back the first time it is encountered in either journal. ** ** If pSavepoint is NULL, then pages are only played back from the main ** journal file. There is no need for a bitvec in this case. ** ** In either case, before playback commences the Pager.dbSize variable ** is reset to the value that it held at the start of the savepoint ** (or transaction). No page with a page-number greater than this value ** is played back. If one is encountered it is simply skipped. 
Name: sqlite3PagerSetCachesize; Comment: ** Change the maximum number of in-memory pages that are allowed ** before attempting to recycle clean and unused pages. 
Name: sqlite3PagerSetSpillsize; Comment: ** Change the maximum number of in-memory pages that are allowed ** before attempting to spill pages to journal. 
Name: pagerFixMaplimit; Comment: ** Invoke SQLITE_FCNTL_MMAP_SIZE based on the current value of szMmap. 
Name: sqlite3PagerSetMmapLimit; Comment: ** Change the maximum size of any memory mapping made of the database file. 
Name: sqlite3PagerShrink; Comment: ** Free as much memory as possible from the pager. 
Name: sqlite3PagerSetPagesize; Comment: ** Change the page size used by the Pager object. The new page size ** is passed in *pPageSize. ** ** If the pager is in the error state when this function is called, it ** is a no-op. The value returned is the error state error code (i.e. ** one of SQLITE_IOERR, an SQLITE_IOERR_xxx sub-code or SQLITE_FULL). ** ** Otherwise, if all of the following are true: ** ** the new page size (value of *pPageSize) is valid (a power ** of two between 512 and SQLITE_MAX_PAGE_SIZE, inclusive), and ** ** there are no outstanding page references, and ** ** the database is either not an in-memory database or it is ** an in-memory database that currently consists of zero pages. ** ** then the pager object page size is set to *pPageSize. ** ** If the page size is changed, then this function uses sqlite3PagerMalloc() ** to obtain a new Pager.pTmpSpace buffer. If this allocation attempt ** fails, SQLITE_NOMEM is returned and the page size remains unchanged. ** In all other cases, SQLITE_OK is returned. ** ** If the page size is not changed, either because one of the enumerated ** conditions above is not true, the pager was in error state when this ** function was called, or because the memory allocation attempt failed, ** then *pPageSize is set to the old, retained page size before returning. 
Name: sqlite3PagerTempSpace; Comment: ** Return a pointer to the "temporary page" buffer held internally ** by the pager. This is a buffer that is big enough to hold the ** entire content of a database page. This buffer is used internally ** during rollback and will be overwritten whenever a rollback ** occurs. But other modules are free to use it too, as long as ** no rollbacks are happening. 
Name: sqlite3PagerMaxPageCount; Comment: ** Attempt to set the maximum database page count if mxPage is positive. ** Make no changes if mxPage is zero or negative. And never reduce the ** maximum page count below the current size of the database. ** ** Regardless of mxPage, return the current maximum page count. 
Name: sqlite3PagerReadFileheader; Comment: ** Read the first N bytes from the beginning of the file into memory ** that pDest points to. ** ** If the pager was opened on a transient file (zFilename==""), or ** opened on a file less than N bytes in size, the output buffer is ** zeroed and SQLITE_OK returned. The rationale for this is that this ** function is used to read database headers, and a new transient or ** zero sized database has a header than consists entirely of zeroes. ** ** If any IO error apart from SQLITE_IOERR_SHORT_READ is encountered, ** the error code is returned to the caller and the contents of the ** output buffer undefined. 
Name: sqlite3PagerPagecount; Comment: ** This function may only be called when a read-transaction is open on ** the pager. It returns the total number of pages in the database. ** ** However, if the file is between 1 and <page-size> bytes in size, then ** this is considered a 1 page file. 
Name: pager_wait_on_lock; Comment: ** Try to obtain a lock of type locktype on the database file. If ** a similar or greater lock is already held, this function is a no-op ** (returning SQLITE_OK immediately). ** ** Otherwise, attempt to obtain the lock using sqlite3OsLock(). Invoke ** the busy callback if the lock is currently not available. Repeat ** until the busy callback returns false or until the attempt to ** obtain the lock succeeds. ** ** Return SQLITE_OK on success and an error code if we cannot obtain ** the lock. If the lock is obtained successfully, set the Pager.state ** variable to locktype before returning. 
Name: sqlite3PagerTruncateImage; Comment: ** Truncate the in-memory database file image to nPage pages. This ** function does not actually modify the database file on disk. It ** just sets the internal state of the pager object so that the ** truncation will be done when the current transaction is committed. ** ** This function is only called right before committing a transaction. ** Once this function has been called, the transaction must either be ** rolled back or committed. It is not safe to call this function and ** then continue writing to the database. 
Name: pagerSyncHotJournal; Comment: ** This function is called before attempting a hot-journal rollback. It ** syncs the journal file to disk, then sets pPager->journalHdr to the ** size of the journal file so that the pager_playback() routine knows ** that the entire journal file has been synced. ** ** Syncing a hot-journal to disk before attempting to roll it back ensures ** that if a power-failure occurs during the rollback, the process that ** attempts rollback following system recovery sees the same journal ** content as this process. ** ** If everything goes as planned, SQLITE_OK is returned. Otherwise, ** an SQLite error code. 
Name: pagerReleaseMapPage; Comment: ** Release a reference to page pPg. pPg must have been returned by an ** earlier call to pagerAcquireMapPage(). 
Name: pagerFreeMapHdrs; Comment: ** Free all PgHdr objects stored in the Pager.pMmapFreelist list. 
Name: databaseIsUnmoved; Comment: Verify that the database file has not be deleted or renamed out from** under the pager. Return SQLITE_OK if the database is still where it ought ** to be on disk. Return non-zero (SQLITE_READONLY_DBMOVED or some other error ** code from sqlite3OsAccess()) if the database has gone missing. 
Name: sqlite3PagerClose; Comment: ** Shutdown the page cache. Free all memory and close all files. ** ** If a transaction was in progress when this routine is called, that ** transaction is rolled back. All outstanding pages are invalidated ** and their memory is freed. Any attempt to use a page associated ** with this page cache after this function returns will likely ** result in a coredump. ** ** This function always succeeds. If a transaction is active an attempt ** is made to roll it back. If an error occurs during the rollback ** a hot journal may be left in the filesystem but no error is returned ** to the caller. 
Name: sqlite3PagerPagenumber; Comment: ** Return the page number for page pPg. 
Name: sqlite3PagerRef; Comment: ** Increment the reference count for page pPg. 
Name: syncJournal; Comment: None }** ** If successful, this routine clears the PGHDR_NEED_SYNC flag of every ** page currently held in memory before returning SQLITE_OK. If an IO ** error is encountered, then the IO error code is returned to the caller. 
Name: pager_write_pagelist; Comment: ** The argument is the first in a linked list of dirty pages connected ** by the PgHdr.pDirty pointer. This function writes each one of the ** in-memory pages in the list to the database file. The argument may ** be NULL, representing an empty list. In this case this function is ** a no-op. ** ** The pager must hold at least a RESERVED lock when this function ** is called. Before writing anything to the database file, this lock ** is upgraded to an EXCLUSIVE lock. If the lock cannot be obtained, ** SQLITE_BUSY is returned and no data is written to the database file. ** ** If the pager is a temp-file pager and the actual file-system file ** is not yet open, it is created and opened before any data is ** written out. ** ** Once the lock has been upgraded and, if necessary, the file opened, ** the pages are written out to the database file in list order. Writing ** a page is skipped if it meets either of the following criteria: ** ** The page number is greater than Pager.dbSize, or ** The PGHDR_DONT_WRITE flag is set on the page. ** ** If writing out a page causes the database file to grow, Pager.dbFileSize ** is updated accordingly. If page 1 is written out, then the value cached ** in Pager.dbFileVers[] is updated to match the new value stored in ** the database file. ** ** If everything is successful, SQLITE_OK is returned. If an IO error ** occurs, an IO error code is returned. Or, if the EXCLUSIVE lock cannot ** be obtained, SQLITE_BUSY is returned. 
Name: openSubJournal; Comment: ** Ensure that the sub-journal file is open. If it is already open, this ** function is a no-op. ** ** SQLITE_OK is returned if everything goes according to plan. An ** SQLITE_IOERR_XXX error code is returned if a call to sqlite3OsOpen() ** fails. 
Name: subjournalPage; Comment: ** Append a record of the current state of page pPg to the sub-journal. ** ** If successful, set the bit corresponding to pPg->pgno in the bitvecs ** for all open savepoints before returning. ** ** This function returns SQLITE_OK if everything is successful, an IO ** error code if the attempt to write to the sub-journal fails, or ** SQLITE_NOMEM if a malloc fails while setting a bit in a savepoint ** bitvec. 
Name: pagerStress; Comment: ** This function is called by the pcache layer when it has reached some ** soft memory limit. The first argument is a pointer to a Pager object ** (cast as a void*). The pager is always 'purgeable' (not an in-memory ** database). The second argument is a reference to a page that is ** currently dirty but has no outstanding references. The page ** is always associated with the Pager object passed as the first ** argument. ** ** The job of this function is to make pPg clean by writing its contents ** out to the database file, if possible. This may involve syncing the ** journal file. ** ** If successful, sqlite3PcacheMakeClean() is called on the page and ** SQLITE_OK returned. If an IO error occurs while trying to make the ** page clean, the IO error code is returned. If the page cannot be ** made clean for some other reason, but no error occurs, then SQLITE_OK ** is returned by sqlite3PcacheMakeClean() is not called. 
Name: sqlite3PagerFlush; Comment: ** Flush all unreferenced dirty pages to disk. 
Name: sqlite3_database_file_object; Comment: ** Return the sqlite3_file for the main database given the name ** of the corresonding WAL or Journal name as passed into ** xOpen. 
Name: hasHotJournal; Comment: ** This function is called after transitioning from PAGER_UNLOCK to ** PAGER_SHARED state. It tests if there is a hot journal present in ** the file-system for the given pager. A hot journal is one that ** needs to be played back. According to this function, a hot-journal ** file exists if the following criteria are met: ** ** The journal file exists in the file system, and ** No process holds a RESERVED or greater lock on the database file, and ** The database file itself is greater than 0 bytes in size, and ** The first byte of the journal file exists and is not 0x00. ** ** If the current size of the database file is 0 but a journal file ** exists, that is probably an old journal left over from a prior ** database with the same name. In this case the journal file is ** just deleted using OsDelete, *pExists is set to 0 and SQLITE_OK ** is returned. ** ** This routine does not check if there is a super-journal filename ** at the end of the file. If there is, and that super-journal file ** does not exist, then the journal file is not really hot. In this ** case this routine will return a false-positive. The pager_playback() ** routine will discover that the journal file is not really hot and ** will not roll it back. ** ** If a hot-journal file is found to exist, *pExists is set to 1 and ** SQLITE_OK returned. If no hot-journal file is present, *pExists is ** set to 0 and SQLITE_OK returned. If an IO error occurs while trying ** to determine whether or not a hot-journal file exists, the IO error ** code is returned and the value of *pExists is undefined. 
Name: sqlite3PagerSharedLock; Comment: ** This function is called to obtain a shared lock on the database file. ** It is illegal to call sqlite3PagerGet() until after this function ** has been successfully called. If a shared-lock is already held when ** this function is called, it is a no-op. ** ** The following operations are also performed by this function. ** ** 1) If the pager is currently in PAGER_OPEN state (no lock held ** on the database file), then an attempt is made to obtain a ** SHARED lock on the database file. Immediately after obtaining ** the SHARED lock, the file-system is checked for a hot-journal, ** which is played back if present. Following any hot-journal ** rollback, the contents of the cache are validated by checking ** the 'change-counter' field of the database file header and ** discarded if they are found to be invalid. ** ** 2) If the pager is running in exclusive-mode, and there are currently ** no outstanding references to any pages, and is in the error state, ** then an attempt is made to clear the error state by discarding ** the contents of the page cache and rolling back any open journal ** file. ** ** If everything is successful, SQLITE_OK is returned. If an IO error ** occurs while locking the database, checking for a hot-journal file or ** rolling back a journal file, the IO error code is returned. 
Name: pagerUnlockIfUnused; Comment: ** If the reference count has reached zero, rollback any active ** transaction and unlock the pager. ** ** Except, in locking_mode=EXCLUSIVE when there is nothing to in ** the rollback journal, the unlock is not performed and there is ** nothing to rollback, so this routine is a no-op. 
Name: sqlite3PagerLookup; Comment: ** Acquire a page if it is already in the in-memory cache. Do ** not read the page from disk. Return a pointer to the page, ** or 0 if the page is not in cache. ** ** See also sqlite3PagerGet(). The difference between this routine ** and sqlite3PagerGet() is that _get() will go to the disk and read ** in the page if the page is not already in cache. This routine ** returns NULL if the page is not in cache or if a disk I/O error ** has ever happened. 
Name: sqlite3PagerUnrefNotNull; Comment: ** Release a page reference. ** ** The sqlite3PagerUnref() and sqlite3PagerUnrefNotNull() may only be ** used if we know that the page being released is not the last page. ** The btree layer always holds page1 open until the end, so these first ** to routines can be used to release any page other than BtShared.pPage1. ** ** Use sqlite3PagerUnrefPageOne() to release page1. This latter routine ** checks the total number of outstanding pages and if the number of ** pages reaches zero it drops the database lock. 
Name: pager_open_journal; Comment: ** This function is called at the start of every write transaction. ** There must already be a RESERVED or EXCLUSIVE lock on the database ** file when this routine is called. ** ** Open the journal file for pager pPager and write a journal header ** to the start of it. If there are active savepoints, open the sub-journal ** as well. This function is only used when the journal file is being ** opened to write a rollback log for a transaction. It is not used ** when opening a hot journal file to roll it back. ** ** If the journal file is already open (as it may be in exclusive mode), ** then this function just writes a journal header to the start of the ** already open file. ** ** Whether or not the journal file is opened by this function, the ** Pager.pInJournal bitvec structure is allocated. ** ** Return SQLITE_OK if everything is successful. Otherwise, return ** SQLITE_NOMEM if the attempt to allocate Pager.pInJournal fails, or ** an IO error code if opening or writing the journal file fails. 
Name: sqlite3PagerBegin; Comment: ** Begin a write-transaction on the specified pager object. If a ** write-transaction has already been opened, this function is a no-op. ** ** If the exFlag argument is false, then acquire at least a RESERVED ** lock on the database file. If exFlag is true, then acquire at least ** an EXCLUSIVE lock. If such a lock is already held, no locking ** functions need be called. ** ** If the subjInMemory argument is non-zero, then any sub-journal opened ** within this transaction will be opened as an in-memory file. This ** has no effect if the sub-journal is already opened (as it may be when ** running in exclusive mode) or if the transaction does not require a ** sub-journal. If the subjInMemory argument is zero, then any required ** sub-journal is implemented in-memory if pPager is an in-memory database, ** or using a temporary file otherwise. 
Name: pagerAddPageToRollbackJournal; Comment: ** Write page pPg onto the end of the rollback journal. 
Name: pager_write; Comment: ** Mark a single data page as writeable. The page is written into the ** main journal or sub-journal as required. If the page is written into ** one of the journals, the corresponding bit is set in the ** Pager.pInJournal bitvec and the PagerSavepoint.pInSavepoint bitvecs ** of any open savepoints as appropriate. 
Name: pagerWriteLargeSector; Comment: ** This is a variant of sqlite3PagerWrite() that runs when the sector size ** is larger than the page size. SQLite makes the (reasonable) assumption that ** all bytes of a sector are written together by hardware. Hence, all bytes of ** a sector need to be journalled in case of a power loss in the middle of ** a write. ** ** Usually, the sector size is less than or equal to the page size, in which ** case pages can be individually written. This routine only runs in the ** exceptional case where the page size is smaller than the sector size. 
Name: sqlite3PagerWrite; Comment: ** Mark a data page as writeable. This routine must be called before ** making changes to a page. The caller must check the return value ** of this function and be careful not to change any page data unless ** this routine returns SQLITE_OK. ** ** The difference between this function and pager_write() is that this ** function also deals with the special case where 2 or more pages ** fit on a single disk sector. In this case all co-resident pages ** must have been written to the journal file before returning. ** ** If an error occurs, SQLITE_NOMEM or an IO error code is returned ** as appropriate. Otherwise, SQLITE_OK. 
Name: sqlite3PagerDontWrite; Comment: ** A call to this routine tells the pager that it is not necessary to ** write the information on page pPg back to the disk, even though ** that page might be marked as dirty. This happens, for example, when ** the page has been added as a leaf of the freelist and so its ** content no longer matters. ** ** The overlying software layer calls this routine when all of the data ** on the given page is unused. The pager marks the page as clean so ** that it does not get written to disk. ** ** Tests show that this optimization can quadruple the speed of large ** DELETE operations. ** ** This optimization cannot be used with a temp-file, as the page may ** have been dirty at the start of the transaction. In that case, if ** memory pressure forces page pPg out of the cache, the data does need ** to be written out to disk so that it may be read back in if the ** current transaction is rolled back. 
Name: pager_incr_changecounter; Comment: ** This routine is called to increment the value of the database file ** change-counter, stored as a 4-byte big-endian integer starting at ** byte offset 24 of the pager file. The secondary change counter at ** 92 is also updated, as is the SQLite version number at offset 96. ** ** But this only happens if the pPager->changeCountDone flag is false. ** To avoid excess churning of page 1, the update only happens once. ** See also the pager_write_changecounter() routine that does an ** unconditional update of the change counters. ** ** If the isDirectMode flag is zero, then this is done by calling ** sqlite3PagerWrite() on page 1, then modifying the contents of the ** page data. In this case the file will be updated when the current ** transaction is committed. ** ** The isDirectMode flag may only be non-zero if the library was compiled ** with the SQLITE_ENABLE_ATOMIC_WRITE macro defined. In this case, ** if isDirect is non-zero, then the database file is updated directly ** by writing an updated version of page 1 using a call to the ** sqlite3OsWrite() function. 
Name: sqlite3PagerSync; Comment: ** Sync the database file to disk. This is a no-op for in-memory databases ** or pages with the Pager.noSync flag set. ** ** If successful, or if called on a pager for which it is a no-op, this ** function returns SQLITE_OK. Otherwise, an IO error code is returned. 
Name: sqlite3PagerExclusiveLock; Comment: ** This function may only be called while a write-transaction is active in ** rollback. If the connection is in WAL mode, this call is a no-op. ** Otherwise, if the connection does not already have an EXCLUSIVE lock on ** the database file, an attempt is made to obtain one. ** ** If the EXCLUSIVE lock is already held or the attempt to obtain it is ** successful, or the connection is in WAL mode, SQLITE_OK is returned. ** Otherwise, either SQLITE_BUSY or an SQLITE_IOERR_XXX error code is ** returned. 
Name: sqlite3PagerCommitPhaseTwo; Comment: ** When this function is called, the database file has been completely ** updated to reflect the changes made by the current transaction and ** synced to disk. The journal file still exists in the file-system ** though, and if a failure occurs at this point it will eventually ** be used as a hot-journal and the current transaction rolled back. ** ** This function finalizes the journal file, either by deleting, ** truncating or partially zeroing it, so that it cannot be used ** for hot-journal rollback. Once this is done the transaction is ** irrevocably committed. ** ** If an error occurs, an IO error code is returned and the pager ** moves into the error state. Otherwise, SQLITE_OK is returned. 
Name: sqlite3PagerRollback; Comment: ** If a write transaction is open, then all changes made within the ** transaction are reverted and the current write-transaction is closed. ** The pager falls back to PAGER_READER state if successful, or PAGER_ERROR ** state if an error occurs. ** ** If the pager is already in PAGER_ERROR state when this function is called, ** it returns Pager.errCode immediately. No work is performed in this case. ** ** Otherwise, in rollback mode, this function performs two functions: ** ** 1) It rolls back the journal file, restoring all database file and ** in-memory cache pages to the state they were in when the transaction ** was opened, and ** ** 2) It finalizes the journal file, so that it is not used for hot ** rollback at any point in the future. ** ** Finalization of the journal file (task 2) is only performed if the ** rollback is successful. ** ** In WAL mode, all cache-entries containing data modified within the ** current transaction are either expelled from the cache or reverted to ** their pre-transaction state by re-reading data from the database or ** WAL files. The WAL transaction is then closed. 
Name: sqlite3PagerIsreadonly; Comment: ** Return TRUE if the database file is opened read-only. Return FALSE ** if the database is (in theory) writable. 
Name: sqlite3PagerRefcount; Comment: ** Return the sum of the reference counts for all pages held by pPager. 
Name: sqlite3PagerMemUsed; Comment: ** Return the approximate number of bytes of memory currently ** used by the pager and its associated cache. 
Name: sqlite3PagerPageRefcount; Comment: ** Return the number of references to the specified page. 
Name: sqlite3PagerStats; Comment: ** This routine is used for testing and analysis only. 
Name: sqlite3PagerCacheStat; Comment: ** Parameter eStat must be one of SQLITE_DBSTATUS_CACHE_HIT, _MISS, _WRITE, ** or _WRITE+1. The SQLITE_DBSTATUS_CACHE_WRITE+1 case is a translation ** of SQLITE_DBSTATUS_CACHE_SPILL. The _SPILL case is not contiguous because ** it was added later. ** ** Before returning, *pnVal is incremented by the ** current cache hit or miss count, according to the value of eStat. If the ** reset parameter is non-zero, the cache hit or miss count is zeroed before ** returning. 
Name: sqlite3PagerIsMemdb; Comment: ** Return true if this is an in-memory or temp-file backed pager. 
Name: pagerOpenSavepoint; Comment: ** Check that there are at least nSavepoint savepoints open. If there are ** currently less than nSavepoints open, then open one or more savepoints ** to make up the difference. If the number of savepoints is already ** equal to nSavepoint, then this function is a no-op. ** ** If a memory allocation fails, SQLITE_NOMEM is returned. If an error ** occurs while opening the sub-journal file, then an IO error code is ** returned. Otherwise, SQLITE_OK. 
Name: sqlite3PagerSavepoint; Comment: ** This function is called to rollback or release (commit) a savepoint. ** The savepoint to release or rollback need not be the most recently ** created savepoint. ** ** Parameter op is always either SAVEPOINT_ROLLBACK or SAVEPOINT_RELEASE. ** If it is SAVEPOINT_RELEASE, then release and destroy the savepoint with ** index iSavepoint. If it is SAVEPOINT_ROLLBACK, then rollback all changes ** that have occurred since the specified savepoint was created. ** ** The savepoint to rollback or release is identified by parameter ** iSavepoint. A value of 0 means to operate on the outermost savepoint ** (the first created). A value of (Pager.nSavepoint-1) means operate ** on the most recently created savepoint. If iSavepoint is greater than ** (Pager.nSavepoint-1), then this function is a no-op. ** ** If a negative value is passed to this function, then the current ** transaction is rolled back. This is different to calling ** sqlite3PagerRollback() because this function does not terminate ** the transaction or unlock the database, it just restores the ** contents of the database to its original state. ** ** In any case, all savepoints with an index greater than iSavepoint ** are destroyed. If this is a release operation (op==SAVEPOINT_RELEASE), ** then savepoint iSavepoint is also destroyed. ** ** This function may return SQLITE_NOMEM if a memory allocation fails, ** or an IO error code if an IO error occurs while rolling back a ** savepoint. If no errors occur, SQLITE_OK is returned. 
Name: sqlite3PagerFilename; Comment: ** Return the full pathname of the database file. ** ** Except, if the pager is in-memory only, then return an empty string if ** nullIfMemDb is true. This routine is called with nullIfMemDb==1 when ** used to report the filename to the user, for compatibility with legacy ** behavior. But when the Btree needs to know the filename for matching to ** shared cache, it uses nullIfMemDb==0 so that in-memory databases can ** participate in shared-cache. ** ** The return value to this routine is always safe to use with ** sqlite3_uri_parameter() and sqlite3_filename_database() and friends. 
Name: sqlite3PagerVfs; Comment: ** Return the VFS structure for the pager. 
Name: sqlite3PagerFile; Comment: ** Return the file handle for the database file associated ** with the pager. This might return NULL if the file has ** not yet been opened. 
Name: sqlite3PagerJrnlFile; Comment: ** Return the file handle for the journal file (if it exists). ** This will be either the rollback journal or the WAL file. 
Name: sqlite3PagerJournalname; Comment: ** Return the full pathname of the journal file. 
Name: sqlite3PagerMovepage; Comment: ** Move the page pPg to location pgno in the file. ** ** There must be no references to the page previously located at ** pgno (which we call pPgOld) though that page is allowed to be ** in cache. If the page previously located at pgno is not already ** in the rollback journal, it is not put there by by this routine. ** ** References to the page pPg remain valid. Updating any ** meta-data associated with pPg (i.e. data stored in the nExtra bytes ** allocated along with the page) is the responsibility of the caller. ** ** A transaction must be active when this routine is called. It used to be ** required that a statement transaction was not active, but this restriction ** has been removed (CREATE INDEX needs to move a page when a statement ** transaction is active). ** ** If the fourth argument, isCommit, is non-zero, then this page is being ** moved as part of a database reorganization just before the transaction ** is being committed. In this case, it is guaranteed that the database page ** pPg refers to will not be written to again within this transaction. ** ** This function may return SQLITE_NOMEM or an IO error code if an error ** occurs. Otherwise, it returns SQLITE_OK. 
Name: sqlite3PagerRekey; Comment: ** The page handle passed as the first argument refers to a dirty page ** with a page number other than iNew. This function changes the page's ** page number to iNew and sets the value of the PgHdr.flags field to ** the value passed as the third parameter. 
Name: sqlite3PagerGetData; Comment: ** Return a pointer to the data for the specified page. 
Name: sqlite3PagerGetExtra; Comment: ** Return a pointer to the Pager.nExtra bytes of "extra" space ** allocated along with the specified page. 
Name: sqlite3PagerLockingMode; Comment: ** Get/set the locking-mode for this pager. Parameter eMode must be one ** of PAGER_LOCKINGMODE_QUERY, PAGER_LOCKINGMODE_NORMAL or ** PAGER_LOCKINGMODE_EXCLUSIVE. If the parameter is not _QUERY, then ** the locking-mode is set to the value specified. ** ** The returned value is either PAGER_LOCKINGMODE_NORMAL or ** PAGER_LOCKINGMODE_EXCLUSIVE, indicating the current (possibly updated) ** locking-mode. 
Name: sqlite3PagerSetJournalMode; Comment: ** Set the journal-mode for this pager. Parameter eMode must be one of: ** ** PAGER_JOURNALMODE_DELETE ** PAGER_JOURNALMODE_TRUNCATE ** PAGER_JOURNALMODE_PERSIST ** PAGER_JOURNALMODE_OFF ** PAGER_JOURNALMODE_MEMORY ** PAGER_JOURNALMODE_WAL ** ** The journalmode is set to the value specified if the change is allowed. ** The change may be disallowed for the following reasons: ** ** An in-memory database can only have its journal_mode set to _OFF ** or _MEMORY. ** ** Temporary databases cannot have _WAL journalmode. ** ** The returned indicate the current (possibly updated) journal-mode. 
Name: sqlite3PagerGetJournalMode; Comment: ** Return the current journal mode. 
Name: sqlite3PagerOkToChangeJournalMode; Comment: ** Return TRUE if the pager is in a state where it is OK to change the ** journalmode. Journalmode changes can only happen when the database ** is unmodified. 
Name: sqlite3PagerJournalSizeLimit; Comment: ** Get/set the size-limit used for persistent journal files. ** ** Setting the size limit to -1 means no limit is enforced. ** An attempt to set a limit smaller than -1 is a no-op. 
Name: sqlite3PagerBackupPtr; Comment: ** Return a pointer to the pPager->pBackup variable. The backup module ** in backup.c maintains the content of this variable. This module ** uses it opaquely as an argument to sqlite3BackupRestart() and ** sqlite3BackupUpdate() only. 
Name: sqlite3PagerClearCache; Comment: ** Unless this is an in-memory or temporary database, clear the pager cache. 
Name: sqlite3PagerWalSupported; Comment: ** Return true if the underlying VFS for the given pager supports the ** primitives necessary for write-ahead logging. 
Name: pagerExclusiveLock; Comment: ** Attempt to take an exclusive lock on the database file. If a PENDING lock ** is obtained instead, immediately release it. 
Name: pagerOpenWal; Comment: ** Call sqlite3WalOpen() to open the WAL handle. If the pager is in ** exclusive-locking mode when this function is called, take an EXCLUSIVE ** lock on the database file and use heap-memory to store the wal-index ** in. Otherwise, use the normal shared-memory. 
Name: sqlite3PagerCloseWal; Comment: ** This function is called to close the connection to the log file prior ** to switching from WAL to rollback mode. ** ** Before closing the log file, this function attempts to take an ** EXCLUSIVE lock on the database file. If this cannot be obtained, an ** error (SQLITE_BUSY) is returned and the log connection is not closed. ** If successful, the EXCLUSIVE lock is not released before returning. 
Name: sqlite3PagerWalWriteLock; Comment: ** If pager pPager is a wal-mode database not in exclusive locking mode, ** invoke the sqlite3WalWriteLock() function on the associated Wal object ** with the same db and bLock parameters as were passed to this function. ** Return an SQLite error code if an error occurs, or SQLITE_OK otherwise. 
Name: sqlite3PagerWalDb; Comment: ** Set the database handle used by the wal layer to determine if ** blocking locks are required. 
Name: sqlite3PagerSnapshotGet; Comment: ** If this is a WAL database, obtain a snapshot handle for the snapshot ** currently open. Otherwise, return an error. 
Name: sqlite3PagerSnapshotOpen; Comment: ** If this is a WAL database, store a pointer to pSnapshot. Next time a ** read transaction is opened, attempt to read from the snapshot it ** identifies. If this is not a WAL database, return an error. 
Name: sqlite3PagerSnapshotRecover; Comment: ** If this is a WAL database, call sqlite3WalSnapshotRecover(). If this ** is not a WAL database, return an error. 
Name: sqlite3PagerSnapshotCheck; Comment: ** The caller currently has a read transaction open on the database. ** If this is not a WAL database, SQLITE_ERROR is returned. Otherwise, ** this function takes a SHARED lock on the CHECKPOINTER slot and then ** checks if the snapshot passed as the second argument is still ** available. If so, SQLITE_OK is returned. ** ** If the snapshot is not available, SQLITE_ERROR is returned. Or, if ** the CHECKPOINTER lock cannot be obtained, SQLITE_BUSY. If any error ** occurs (any value other than SQLITE_OK is returned), the CHECKPOINTER ** lock is released before returning. 
Name: sqlite3PagerSnapshotUnlock; Comment: ** Release a lock obtained by an earlier successful call to ** sqlite3PagerSnapshotCheck(). 
Name: sqlite3PagerWalFramesize; Comment: ** A read-lock must be held on the pager when this function is called. If ** the pager is in WAL mode and the WAL file currently contains one or more ** frames, return the size in bytes of the page images stored within the ** WAL frames. Otherwise, if this is not a WAL database or the WAL file ** is empty, return 0. 
Name: walCkptInfo; Comment: ** Return a pointer to the WalCkptInfo structure in the wal-index. 
Name: walIndexHdr; Comment: ** Return a pointer to the WalIndexHdr structure in the wal-index. 
Name: walShmBarrier; Comment: ** If there is the possibility of concurrent access to the SHM file ** from multiple threads and/or processes, then do a memory barrier. 
Name: walIndexWriteHdr; Comment: ** Write the header information in pWal->hdr into the wal-index. ** ** The checksum on pWal->hdr is updated before it is written. 
Name: walLockName; Comment: ** Names of locks. This routine is used to provide debugging output and is not ** a part of an ordinary build. 
Name: walLockShared; Comment: ** Set or release locks on the WAL. Locks are either shared or exclusive. ** A lock cannot be moved directly between shared and exclusive - it must go ** through the unlocked state first. ** ** In locking_mode=EXCLUSIVE, all of these routines become no-ops. 
Name: walHash; Comment: ** Compute a hash on a page number. The resulting hash value must land ** between 0 and (HASHTABLE_NSLOT-1). The walHashNext() function advances ** the hash to the next value in the event of a collision. 
Name: walFramePage; Comment: ** Return the number of the wal-index page that contains the hash-table ** and page-number array that contain entries corresponding to WAL frame ** iFrame. The wal-index is broken up into 32KB pages. Wal-index pages ** are numbered starting from 0. 
Name: walFramePgno; Comment: ** Return the page number associated with frame iFrame in this WAL. 
Name: walCleanupHash; Comment: ** Remove entries from the hash table that point to WAL slots greater ** than pWal->hdr.mxFrame. ** ** This function is called whenever pWal->hdr.mxFrame is decreased due ** to a rollback or savepoint. ** ** At most only the hash table containing pWal->hdr.mxFrame needs to be ** updated. Any later hash tables will be automatically cleared when ** pWal->hdr.mxFrame advances to the point where those hash tables are ** actually needed. 
Name: walIndexAppend; Comment: ** Set an entry in the wal-index that will map database page number ** pPage into WAL frame iFrame. 
Name: walIndexRecover; Comment: ** Recover the wal-index by reading the write-ahead log file. ** ** This routine first tries to establish an exclusive lock on the ** wal-index to prevent other threads/processes from doing anything ** with the WAL or wal-index while recovery is running. The ** WAL_RECOVER_LOCK is also held so that other threads will know ** that this thread is running recovery. If unable to establish ** the necessary locks, this routine returns SQLITE_BUSY. 
Name: walIndexClose; Comment: ** Close an open wal-index. 
Name: sqlite3WalLimit; Comment: ** Change the size to which the WAL file is trucated on each reset. 
Name: walIteratorFree; Comment: ** Free an iterator allocated by walIteratorInit(). 
Name: walIteratorInit; Comment: ** Construct a WalInterator object that can be used to loop over all ** pages in the WAL following frame nBackfill in ascending order. Frames ** nBackfill or earlier may be included - excluding them is an optimization ** only. The caller must hold the checkpoint lock. ** ** On success, make *pp point to the newly allocated WalInterator object ** return SQLITE_OK. Otherwise, return an error code. If this routine ** returns an error, the value of *pp is undefined. ** ** The calling routine should invoke walIteratorFree() to destroy the ** WalIterator object when it has finished with it. 
Name: walEnableBlocking; Comment: ** Attempt to enable blocking locks. Blocking locks are enabled only if (a) ** they are supported by the VFS, and (b) the database handle is configured ** with a busy-timeout. Return 1 if blocking locks are successfully enabled, ** or 0 otherwise. 
Name: walDisableBlocking; Comment: ** Disable blocking locks. 
Name: sqlite3WalWriteLock; Comment: ** If parameter bLock is true, attempt to enable blocking locks, take ** the WRITER lock, and then disable blocking locks. If blocking locks ** cannot be enabled, no attempt to obtain the WRITER lock is made. Return ** an SQLite error code if an error occurs, or SQLITE_OK otherwise. It is not ** an error if blocking locks can not be enabled. ** ** If the bLock parameter is false and the WRITER lock is held, release it. 
Name: sqlite3WalDb; Comment: ** Set the database handle used to determine if blocking locks are required. 
Name: walLockWriter; Comment: ** Take an exclusive WRITE lock. Blocking if so configured. 
Name: walPagesize; Comment: ** The cache of the wal-index header must be valid to call this function. ** Return the page-size in bytes used by the database. 
Name: walRestartHdr; Comment: ** The following is guaranteed when this function is called: ** ** a) the WRITER lock is held, ** b) the entire log file has been checkpointed, and ** c) any existing readers are reading exclusively from the database ** file - there are no readers that may attempt to read a frame from ** the log file. ** ** This function updates the shared-memory structures so that the next ** client to write to the database (which may be this one) does so by ** writing frames into the start of the log file. ** ** The value of parameter salt1 is used as the aSalt[1] value in the ** new wal-index header. It should be passed a pseudo-random value (i.e. ** one obtained from sqlite3_randomness()). 
Name: walLimitSize; Comment: ** If the WAL file is currently larger than nMax bytes in size, truncate ** it to exactly nMax bytes. If an error occurs while doing so, ignore it. 
Name: walIndexTryHdr; Comment: ** Try to read the wal-index header. Return 0 on success and 1 if ** there is a problem. ** ** The wal-index is in shared memory. Another thread or process might ** be writing the header at the same time this procedure is trying to ** read it, which might result in inconsistency. A dirty read is detected ** by verifying that both copies of the header are the same and also by ** a checksum on the header. ** ** If and only if the read is consistent and the header is different from ** pWal->hdr, then pWal->hdr is updated to the content of the new header ** and *pChanged is set to 1. ** ** If the checksum cannot be verified return non-zero. If the header ** is read successfully and the checksum verified, return zero. 
Name: walIndexReadHdr; Comment: ** Read the wal-index header from the wal-index and into pWal->hdr. ** If the wal-header appears to be corrupt, try to reconstruct the ** wal-index from the WAL before returning. ** ** Set *pChanged to 1 if the wal-index header value in pWal->hdr is ** changed by this operation. If pWal->hdr is unchanged, set *pChanged ** to 0. ** ** If the wal-index header is successfully read, return SQLITE_OK. ** Otherwise an SQLite error code. 
Name: walBeginShmUnreliable; Comment: ** Open a transaction in a connection where the shared-memory is read-only ** and where we cannot verify that there is a separate write-capable connection ** on hand to keep the shared-memory up-to-date with the WAL file. ** ** This can happen, for example, when the shared-memory is implemented by ** memory-mapping a *-shm file, where a prior writer has shut down and ** left the *-shm file on disk, and now the present connection is trying ** to use that database but lacks write permission on the *-shm file. ** Other scenarios are also possible, depending on the VFS implementation. ** ** Precondition: ** ** The *-wal file has been read and an appropriate wal-index has been ** constructed in pWal->apWiData[] using heap memory instead of shared ** memory. ** ** If this function returns SQLITE_OK, then the read transaction has ** been successfully opened. In this case output variable (*pChanged) ** is set to true before returning if the caller should discard the ** contents of the page cache before proceeding. Or, if it returns ** WAL_RETRY, then the heap memory wal-index has been discarded and ** the caller should retry opening the read transaction from the ** beginning (including attempting to map the *-shm file). ** ** If an error occurs, an SQLite error code is returned. 
Name: walTryBeginRead; Comment: ** Attempt to start a read transaction. This might fail due to a race or ** other transient condition. When that happens, it returns WAL_RETRY to ** indicate to the caller that it is safe to retry immediately. ** ** On success return SQLITE_OK. On a permanent failure (such an ** I/O error or an SQLITE_BUSY because another process is running ** recovery) return a positive error code. ** ** The useWal parameter is true to force the use of the WAL and disable ** the case where the WAL is bypassed because it has been completely ** checkpointed. If useWal==0 then this routine calls walIndexReadHdr() ** to make a copy of the wal-index header into pWal->hdr. If the ** wal-index header has changed, *pChanged is set to 1 (as an indication ** to the caller that the local page cache is obsolete and needs to be ** flushed.) When useWal==1, the wal-index header is assumed to already ** be loaded and the pChanged parameter is unused. ** ** The caller must set the cnt parameter to the number of prior calls to ** this routine during the current read attempt that returned WAL_RETRY. ** This routine will start taking more aggressive measures to clear the ** race conditions after multiple WAL_RETRY returns, and after an excessive ** number of errors will ultimately return SQLITE_PROTOCOL. The ** SQLITE_PROTOCOL return indicates that some other process has gone rogue ** and is not honoring the locking protocol. There is a vanishingly small ** chance that SQLITE_PROTOCOL could be returned because of a run of really ** bad luck when there is lots of contention for the wal-index, but that ** possibility is so small that it can be safely neglected, we believe. ** ** On success, this routine obtains a read lock on ** WAL_READ_LOCK(pWal->readLock). The pWal->readLock integer is ** in the range 0 <= pWal->readLock < WAL_NREADER. If pWal->readLock==(-1) ** that means the Wal does not hold any read lock. The reader must not ** access any database page that is modified by a WAL frame up to and ** including frame number aReadMark[pWal->readLock]. The reader will ** use WAL frames up to and including pWal->hdr.mxFrame if pWal->readLock>0 ** Or if pWal->readLock==0, then the reader will ignore the WAL ** completely and get all content directly from the database file. ** If the useWal parameter is 1 then the WAL will never be ignored and ** this routine will always set pWal->readLock>0 on success. ** When the read transaction is completed, the caller must release the ** lock on WAL_READ_LOCK(pWal->readLock) and set pWal->readLock to -1. ** ** This routine uses the nBackfill and aReadMark[] fields of the header ** to select a particular WAL_READ_LOCK() that strives to let the ** checkpoint process do as much work as possible. This routine might ** update values of the aReadMark[] array in the header, but if it does ** so it takes care to hold an exclusive lock on the corresponding ** WAL_READ_LOCK() while changing values. 
Name: sqlite3WalSnapshotRecover; Comment: ** Attempt to reduce the value of the WalCkptInfo.nBackfillAttempted ** variable so that older snapshots can be accessed. To do this, loop ** through all wal frames from nBackfillAttempted to (nBackfill+1), ** comparing their content to the corresponding page with the database ** file, if any. Set nBackfillAttempted to the frame number of the ** first frame for which the wal file content matches the db file. ** ** This is only really safe if the file-system is such that any page ** writes made by earlier checkpointers were atomic operations, which ** is not always true. It is also possible that nBackfillAttempted ** may be left set to a value larger than expected, if a wal frame ** contains content that duplicate of an earlier version of the same ** page. ** ** SQLITE_OK is returned if successful, or an SQLite error code if an ** error occurs. It is not an error if nBackfillAttempted cannot be ** decreased at all. 
Name: sqlite3WalBeginReadTransaction; Comment: ** Begin a read transaction on the database. ** ** This routine used to be called sqlite3OpenSnapshot() and with good reason: ** it takes a snapshot of the state of the WAL and wal-index for the current ** instant in time. The current thread will continue to use this snapshot. ** Other threads might append new content to the WAL and wal-index but ** that extra content is ignored by the current thread. ** ** If the database contents have changes since the previous read ** transaction, then *pChanged is set to 1 before returning. The ** Pager layer will use this to know that its cache is stale and ** needs to be flushed. 
Name: sqlite3WalEndReadTransaction; Comment: ** Finish with a read transaction. All this does is release the ** read-lock. 
Name: sqlite3WalDbsize; Comment: ** Return the size of the database in pages (or zero, if unknown). 
Name: sqlite3WalBeginWriteTransaction; Comment: ** This function starts a write transaction on the WAL. ** ** A read transaction must have already been started by a prior call ** to sqlite3WalBeginReadTransaction(). ** ** If another thread or process has written into the database since ** the read transaction was started, then it is not possible for this ** thread to write as doing so would cause a fork. So this routine ** returns SQLITE_BUSY in that case and no write transaction is started. ** ** There can only be a single writer active at a time. 
Name: sqlite3WalEndWriteTransaction; Comment: ** End a write transaction. The commit has already been done. This ** routine merely releases the lock. 
Name: sqlite3WalUndo; Comment: ** If any data has been written (but not committed) to the log file, this ** function moves the write-pointer back to the start of the transaction. ** ** Additionally, the callback function is invoked for each frame written ** to the WAL since the start of the transaction. If the callback returns ** other than SQLITE_OK, it is not invoked again and the error code is ** returned to the caller. ** ** Otherwise, if the callback function does not return an error, this ** function returns SQLITE_OK. 
Name: sqlite3WalSavepoint; Comment: ** Argument aWalData must point to an array of WAL_SAVEPOINT_NDATA u32 ** values. This function populates the array with values required to ** "rollback" the write position of the WAL handle back to the current ** point in the event of a savepoint rollback (via WalSavepointUndo()). 
Name: sqlite3WalSavepointUndo; Comment: ** Move the write position of the WAL back to the point identified by ** the values in the aWalData[] array. aWalData must point to an array ** of WAL_SAVEPOINT_NDATA u32 values that has been previously populated ** by a call to WalSavepoint(). 
Name: walRestartLog; Comment: ** This function is called just before writing a set of frames to the log ** file (see sqlite3WalFrames()). It checks to see if, instead of appending ** to the current log file, it is possible to overwrite the start of the ** existing log file with the new frames (i.e. "reset" the log). If so, ** it sets pWal->hdr.mxFrame to 0. Otherwise, pWal->hdr.mxFrame is left ** unchanged. ** ** SQLITE_OK is returned if no error is encountered (regardless of whether ** or not pWal->hdr.mxFrame is modified). An SQLite error code is returned ** if an error occurs. 
Name: walRewriteChecksums; Comment: ** This function is called as part of committing a transaction within which ** one or more frames have been overwritten. It updates the checksums for ** all frames written to the wal file by the current transaction starting ** with the earliest to have been overwritten. ** ** SQLITE_OK is returned if successful, or an SQLite error code otherwise. 
Name: sqlite3WalCallback; Comment: Return the value to pass to a sqlite3_wal_hook callback, the** number of frames in the WAL at the point of the last commit since ** sqlite3WalCallback() was called. If no commits have occurred since ** the last call, then return 0. 
Name: sqlite3WalExclusiveMode; Comment: ** This function is called to change the WAL subsystem into or out ** of locking_mode=EXCLUSIVE. ** ** If op is zero, then attempt to change from locking_mode=EXCLUSIVE ** into locking_mode=NORMAL. This means that we must acquire a lock ** on the pWal->readLock byte. If the WAL is already in locking_mode=NORMAL ** or if the acquisition of the lock fails, then return 0. If the ** transition out of exclusive-mode is successful, return 1. This ** operation must occur while the pager is still holding the exclusive ** lock on the main database file. ** ** If op is one, then change from locking_mode=NORMAL into ** locking_mode=EXCLUSIVE. This means that the pWal->readLock must ** be released. Return 1 if the transition is made and 0 if the ** WAL is already in exclusive-locking mode - meaning that this ** routine is a no-op. The pager must already hold the exclusive lock ** on the main database file before invoking this operation. ** ** If op is negative, then do a dry-run of the op==1 case but do ** not actually change anything. The pager uses this to see if it ** should acquire the database exclusive lock prior to invoking ** the op==1 case. 
Name: sqlite3WalHeapMemory; Comment: ** Return true if the argument is non-NULL and the WAL module is using ** heap-memory for the wal-index. Otherwise, if the argument is NULL or the ** WAL module is using shared-memory, return false. 
Name: sqlite3WalSnapshotGet; Comment: Create a snapshot object. The content of a snapshot is opaque to** every other subsystem, so the WAL module can put whatever it needs ** in the object. 
Name: sqlite3WalSnapshotOpen; Comment: Try to open on pSnapshot when the next read-transaction starts
Name: sqlite3_snapshot_cmp; Comment: ** Return a +ve value if snapshot p1 is newer than p2. A -ve value if ** p1 is older than p2 and zero if p1 and p2 are the same snapshot. 
Name: sqlite3WalSnapshotCheck; Comment: ** The caller currently has a read transaction open on the database. ** This function takes a SHARED lock on the CHECKPOINTER slot and then ** checks if the snapshot passed as the second argument is still ** available. If so, SQLITE_OK is returned. ** ** If the snapshot is not available, SQLITE_ERROR is returned. Or, if ** the CHECKPOINTER lock cannot be obtained, SQLITE_BUSY. If any error ** occurs (any value other than SQLITE_OK is returned), the CHECKPOINTER ** lock is released before returning. 
Name: sqlite3WalSnapshotUnlock; Comment: ** Release a lock obtained by an earlier successful call to ** sqlite3WalSnapshotCheck(). 
Name: sqlite3WalFramesize; Comment: ** If the argument is not NULL, it points to a Wal object that holds a ** read-lock. This function returns the database page-size if it is known, ** or zero if it is not (or if pWal is NULL). 
Name: sqlite3WalFile; Comment: Return the sqlite3_file object for the WAL file
Name: lockBtreeMutex; Comment: ** Obtain the BtShared mutex associated with B-Tree handle p. Also, ** set BtShared.db to the database handle associated with p and the ** p->locked boolean to true. 
Name: unlockBtreeMutex; Comment: ** Release the BtShared mutex associated with B-Tree handle p and ** clear the p->locked boolean. 
Name: sqlite3BtreeEnter; Comment: ** Enter a mutex on the given BTree object. ** ** If the object is not sharable, then no mutex is ever required ** and this routine is a no-op. The underlying mutex is non-recursive. ** But we keep a reference count in Btree.wantToLock so the behavior ** of this interface is recursive. ** ** To avoid deadlocks, multiple Btrees are locked in the same order ** by all database connections. The p->pNext is a list of other ** Btrees belonging to the same database connection as the p Btree ** which need to be locked after p. If we cannot get a lock on ** p, then first unlock all of the others on p->pNext, then wait ** for the lock to become available on p, then relock all of the ** subsequent Btrees that desire a lock. 
Name: btreeLockCarefully; Comment: This is a helper function for sqlite3BtreeLock(). By moving** complex, but seldom used logic, out of sqlite3BtreeLock() and ** into this routine, we avoid unnecessary stack pointer changes ** and thus help the sqlite3BtreeLock() routine to run much faster ** in the common case. 
Name: sqlite3BtreeLeave; Comment: ** Exit the recursive mutex on a Btree. 
Name: sqlite3BtreeHoldsMutex; Comment: ** Return true if the BtShared mutex is held on the btree, or if the ** B-Tree is not marked as sharable. ** ** This routine is used only from within assert() statements. 
Name: btreeEnterAll; Comment: ** Enter the mutex on every Btree associated with a database ** connection. This is needed (for example) prior to parsing ** a statement since we will be comparing table and column names ** against all schemas and we do not want those schemas being ** reset out from under us. ** ** There is a corresponding leave-all procedures. ** ** Enter the mutexes in accending order by BtShared pointer address ** to avoid the possibility of deadlock when two threads with ** two or more btrees in common both try to lock all their btrees ** at the same instant. 
Name: sqlite3BtreeHoldsAllMutexes; Comment: ** Return true if the current thread holds the database connection ** mutex and all required BtShared mutexes. ** ** This routine is used inside assert() statements only. 
Name: sqlite3SchemaMutexHeld; Comment: ** Return true if the correct mutexes are held for accessing the ** db->aDb[iDb].pSchema structure. The mutexes required for schema ** access are: ** ** (1) The mutex on db ** (2) if iDb!=1, then the mutex on db->aDb[iDb].pBt. ** ** If pSchema is not NULL, then iDb is computed from pSchema and ** db using sqlite3SchemaToIndex(). 
Name: sqlite3BtreeEnter; Comment: The following are special cases for mutex enter routines for use in single threaded applications that use shared cache. Except for these two routines, all mutex operations are no-ops in that case and are null #defines in btree.h. If shared cache is disabled, then all btree mutex routines, including the ones below, are no-ops and are null #defines in btree.h.
Name: sqlite3BtreeEnterCursor; Comment: ** Enter a mutex on a Btree given a cursor owned by that Btree. ** ** These entry points are used by incremental I/O only. Enter() is required ** any time OMIT_SHARED_CACHE is not defined, regardless of whether or not ** the build is threadsafe. Leave() is only required by threadsafe builds. 
Name: sqlite3_enable_shared_cache; Comment: ** Enable or disable the shared pager and schema features. ** ** This routine has no effect on existing database connections. ** The shared cache setting effects only future calls to ** sqlite3_open(), sqlite3_open16(), or sqlite3_open_v2(). 
Name: sqlite3BtreeSeekCount; Comment: ** Return and reset the seek counter for a Btree object. 
Name: querySharedCacheTableLock; Comment: ** Query to see if Btree handle p may obtain a lock of type eLock ** (READ_LOCK or WRITE_LOCK) on the table with root-page iTab. Return ** SQLITE_OK if the lock may be obtained (by calling ** setSharedCacheTableLock()), or SQLITE_LOCKED if not. 
Name: setSharedCacheTableLock; Comment: ** Add a lock on the table with root-page iTable to the shared-btree used ** by Btree handle p. Parameter eLock must be either READ_LOCK or ** WRITE_LOCK. ** ** This function assumes the following: ** ** (a) The specified Btree object p is connected to a sharable ** database (one with the BtShared.sharable flag set), and ** ** (b) No other Btree objects hold a lock that conflicts ** with the requested lock (i.e. querySharedCacheTableLock() has ** already been called and returned SQLITE_OK). ** ** SQLITE_OK is returned if the lock is added successfully. SQLITE_NOMEM ** is returned if a malloc attempt fails. 
Name: clearAllSharedCacheTableLocks; Comment: ** Release all the table locks (locks obtained via calls to ** the setSharedCacheTableLock() procedure) held by Btree object p. ** ** This function assumes that Btree p has an open read or write ** transaction. If it does not, then the BTS_PENDING flag ** may be incorrectly cleared. 
Name: downgradeAllSharedCacheTableLocks; Comment: ** This function changes all write-locks held by Btree p into read-locks. 
Name: cursorOwnsBtShared; Comment: Verify that the cursor and the BtShared agree about what is the current** database connetion. This is important in shared-cache mode. If the database ** connection pointers get out-of-sync, it is possible for routines like ** btreeInitPage() to reference an stale connection pointer that references a ** a connection that has already closed. This routine is used inside assert() ** statements only and for the purpose of double-checking that the btree code ** does keep the database connection pointers up-to-date. 
Name: invalidateAllOverflowCache; Comment: ** Invalidate the overflow page-list cache for all cursors opened ** on the shared btree structure pBt. 
Name: btreeSetHasContent; Comment: ** Set bit pgno of the BtShared.pHasContent bitvec. This is called ** when a page that previously contained data becomes a free-list leaf ** page. ** ** The BtShared.pHasContent bitvec exists to work around an obscure ** bug caused by the interaction of two useful IO optimizations surrounding ** free-list leaf pages: ** ** 1) When all data is deleted from a page and the page becomes ** a free-list leaf page, the page is not written to the database ** (as free-list leaf pages contain no meaningful data). Sometimes ** such a page is not even journalled (as it will not be modified, ** why bother journalling it?). ** ** 2) When a free-list leaf page is reused, its content is not read ** from the database or written to the journal file (why should it ** be, if it is not at all meaningful?). ** ** By themselves, these optimizations work fine and provide a handy ** performance boost to bulk delete or insert operations. However, if ** a page is moved to the free-list and then reused within the same ** transaction, a problem comes up. If the page is not journalled when ** it is moved to the free-list and it is also not journalled when it ** is extracted from the free-list and reused, then the original data ** may be lost. In the event of a rollback, it may not be possible ** to restore the database to its original configuration. ** ** The solution is the BtShared.pHasContent bitvec. Whenever a page is ** moved to become a free-list leaf page, the corresponding bit is ** set in the bitvec. Whenever a leaf page is extracted from the free-list, ** optimization 2 above is omitted if the corresponding bit is already ** set in BtShared.pHasContent. The contents of the bitvec are cleared ** at the end of every transaction. 
Name: btreeGetHasContent; Comment: ** Query the BtShared.pHasContent vector. ** ** This function is called when a free-list leaf page is removed from the ** free-list for reuse. It returns false if it is safe to retrieve the ** page from the pager layer with the 'no-content' flag set. True otherwise. 
Name: btreeClearHasContent; Comment: ** Clear (destroy) the BtShared.pHasContent bitvec. This should be ** invoked at the conclusion of each write-transaction. 
Name: btreeReleaseAllCursorPages; Comment: ** Release all of the apPage[] pages for a cursor. 
Name: saveCursorKey; Comment: ** The cursor passed as the only argument must point to a valid entry ** when this function is called (i.e. have eState==CURSOR_VALID). This ** function saves the current cursor key in variables pCur->nKey and ** pCur->pKey. SQLITE_OK is returned if successful or an SQLite error ** code otherwise. ** ** If the cursor is open on an intkey table, then the integer key ** (the rowid) is stored in pCur->nKey and pCur->pKey is left set to ** NULL. If the cursor is open on a non-intkey table, then pCur->pKey is ** set to point to a malloced buffer pCur->nKey bytes in size containing ** the key. 
Name: saveCursorPosition; Comment: ** Save the current cursor position in the variables BtCursor.nKey ** and BtCursor.pKey. The cursor's state is set to CURSOR_REQUIRESEEK. ** ** The caller must ensure that the cursor is valid (has eState==CURSOR_VALID) ** prior to calling this routine. 
Name: saveAllCursors; Comment: ** Save the positions of all cursors (except pExcept) that are open on ** the table with root-page iRoot. "Saving the cursor position" means that ** the location in the btree is remembered in such a way that it can be ** moved back to the same spot after the btree has been modified. This ** routine is called just before cursor pExcept is used to modify the ** table, for example in BtreeDelete() or BtreeInsert(). ** ** If there are two or more cursors on the same btree, then all such ** cursors should have their BTCF_Multiple flag set. The btreeCursor() ** routine enforces that rule. This routine only needs to be called in ** the uncommon case when pExpect has the BTCF_Multiple flag set. ** ** If pExpect!=NULL and if no other cursors are found on the same root-page, ** then the BTCF_Multiple flag on pExpect is cleared, to avoid another ** pointless call to this routine. ** ** Implementation note: This routine merely checks to see if any cursors ** need to be saved. It calls out to saveCursorsOnList() in the (unusual) ** event that cursors are in need to being saved. 
Name: sqlite3BtreeClearCursor; Comment: ** Clear the current cursor position. 
Name: btreeRestoreCursorPosition; Comment: ** Restore the cursor to the position it was in (or as close to as possible) ** when saveCursorPosition() was called. Note that this call deletes the ** saved position info stored by saveCursorPosition(), so there can be ** at most one effective restoreCursorPosition() call after each ** saveCursorPosition(). 
Name: sqlite3BtreeCursorHasMoved; Comment: ** Determine whether or not a cursor has moved from the position where ** it was last placed, or has been invalidated for any other reason. ** Cursors can move when the row they are pointing at is deleted out ** from under them, for example. Cursor might also move if a btree ** is rebalanced. ** ** Calling this routine with a NULL cursor pointer returns false. ** ** Use the separate sqlite3BtreeCursorRestore() routine to restore a cursor ** back to where it ought to be if this routine returns true. 
Name: sqlite3BtreeFakeValidCursor; Comment: ** Return a pointer to a fake BtCursor object that will always answer ** false to the sqlite3BtreeCursorHasMoved() routine above. The fake ** cursor returned must not be used with any other Btree interface. 
Name: sqlite3BtreeCursorRestore; Comment: ** This routine restores a cursor back to its original position after it ** has been moved by some outside activity (such as a btree rebalance or ** a row having been deleted out from under the cursor). ** ** On success, the *pDifferentRow parameter is false if the cursor is left ** pointing at exactly the same row. *pDifferntRow is the row the cursor ** was pointing to has been deleted, forcing the cursor to point to some ** nearby row. ** ** This routine should only be called for a cursor that just returned ** TRUE from sqlite3BtreeCursorHasMoved(). 
Name: sqlite3BtreeCursorHint; Comment: ** Provide hints to the cursor. The particular hint given (and the type ** and number of the varargs parameters) is determined by the eHintType ** parameter. See the definitions of the BTREE_HINT_* macros for details. 
Name: sqlite3BtreeCursorHintFlags; Comment: ** Provide flag hints to the cursor. 
Name: ptrmapPageno; Comment: ** Given a page number of a regular database page, return the page ** number for the pointer-map page that contains the entry for the ** input page number. ** ** Return 0 (not a valid page) for pgno==1 since there is ** no pointer map associated with page 1. The integrity_check logic ** requires that ptrmapPageno(*,1)!=1. 
Name: ptrmapPut; Comment: ** Write an entry into the pointer map. ** ** This routine updates the pointer map entry for page number 'key' ** so that it maps to type 'eType' and parent page number 'pgno'. ** ** If *pRC is initially non-zero (non-SQLITE_OK) then this routine is ** a no-op. If an error occurs, the appropriate error code is written ** into *pRC. 
Name: ptrmapGet; Comment: ** Read an entry from the pointer map. ** ** This routine retrieves the pointer map entry for page 'key', writing ** the type and parent page number to *pEType and *pPgno respectively. ** An error code is returned if something goes wrong, otherwise SQLITE_OK. 
Name: cellSizePtr; Comment: ** The following routines are implementations of the MemPage.xCellSize ** method. ** ** Compute the total number of bytes that a Cell needs in the cell ** data area of the btree-page. The return number includes the cell ** data header and the local payload, but not any overflow page or ** the space used by the cell pointer. ** ** cellSizePtrNoPayload() => table internal nodes ** cellSizePtr() => all index nodes & table leaf nodes 
Name: cellSize; Comment: This variation on cellSizePtr() is used inside of assert() statements** only. 
Name: ptrmapPutOvflPtr; Comment: ** The cell pCell is currently part of page pSrc but will ultimately be part ** of pPage. (pSrc and pPager are often the same.) If pCell contains a ** pointer to an overflow page, insert an entry into the pointer-map for ** the overflow page that will be valid after pCell has been moved to pPage. 
Name: defragmentPage; Comment: ** Defragment the page given. This routine reorganizes cells within the ** page so that there are no free-blocks on the free-block list. ** ** Parameter nMaxFrag is the maximum amount of fragmented space that may be ** present in the page after this routine returns. ** ** EVIDENCE-OF: R-44582-60138 SQLite may from time to time reorganize a ** b-tree page so that there are no freeblocks or fragment bytes, all ** unused bytes are contained in the unallocated space region, and all ** cells are packed tightly at the end of the page. 
Name: pageFindSlot; Comment: ** Search the free-list on page pPg for space to store a cell nByte bytes in ** size. If one can be found, return a pointer to the space and remove it ** from the free-list. ** ** If no suitable space can be found on the free-list, return NULL. ** ** This function may detect corruption within pPg. If corruption is ** detected then *pRc is set to SQLITE_CORRUPT and NULL is returned. ** ** Slots on the free list that are between 1 and 3 bytes larger than nByte ** will be ignored if adding the extra space to the fragmentation count ** causes the fragmentation count to exceed 60. 
Name: allocateSpace; Comment: ** Allocate nByte bytes of space from within the B-Tree page passed ** as the first argument. Write into *pIdx the index into pPage->aData[] ** of the first byte of allocated space. Return either SQLITE_OK or ** an error code (usually SQLITE_CORRUPT). ** ** The caller guarantees that there is sufficient space to make the ** allocation. This routine might need to defragment in order to bring ** all the space together, however. This routine will avoid using ** the first two bytes past the cell pointer area since presumably this ** allocation is being made in order to insert a new cell, so we will ** also end up needing a new cell pointer. 
Name: freeSpace; Comment: ** Return a section of the pPage->aData to the freelist. ** The first byte of the new free block is pPage->aData[iStart] ** and the size of the block is iSize bytes. ** ** Adjacent freeblocks are coalesced. ** ** Even though the freeblock list was checked by btreeComputeFreeSpace(), ** that routine will not detect overlap between cells or freeblocks. Nor ** does it detect cells or freeblocks that encrouch into the reserved bytes ** at the end of the page. So do additional corruption checks inside this ** routine and return SQLITE_CORRUPT if any problems are found. 
Name: decodeFlags; Comment: ** Decode the flags byte (the first byte of the header) for a page ** and initialize fields of the MemPage structure accordingly. ** ** Only the following combinations are supported. Anything different ** indicates a corrupt database files: ** ** PTF_ZERODATA ** PTF_ZERODATA | PTF_LEAF ** PTF_LEAFDATA | PTF_INTKEY ** PTF_LEAFDATA | PTF_INTKEY | PTF_LEAF 
Name: btreeComputeFreeSpace; Comment: ** Compute the amount of freespace on the page. In other words, fill ** in the pPage->nFree field. 
Name: btreeCellSizeCheck; Comment: ** Do additional sanity check after btreeInitPage() if ** PRAGMA cell_size_check=ON 
Name: btreeInitPage; Comment: ** Initialize the auxiliary information for a disk block. ** ** Return SQLITE_OK on success. If we see that the page does ** not contain a well-formed database page, then return ** SQLITE_CORRUPT. Note that a return of SQLITE_OK does not ** guarantee that the page is well-formed. It only shows that ** we failed to detect any corruption. 
Name: zeroPage; Comment: ** Set up a raw page so that it looks like a database page holding ** no entries. 
Name: btreePageFromDbPage; Comment: ** Convert a DbPage obtained from the pager into a MemPage used by ** the btree layer. 
Name: btreePageLookup; Comment: ** Retrieve a page from the pager cache. If the requested page is not ** already in the pager cache return NULL. Initialize the MemPage.pBt and ** MemPage.aData elements if needed. 
Name: btreePagecount; Comment: ** Return the size of the database file in pages. If there is any kind of ** error, return ((unsigned int)-1). 
Name: releasePageNotNull; Comment: ** Release a MemPage. This should be called once for each prior ** call to btreeGetPage. ** ** Page1 is a special case and must be released using releasePageOne(). 
Name: pageReinit; Comment: ** During a rollback, when the pager reloads information into the cache ** so that the cache is restored to its original state at the start of ** the transaction, for each page restored this routine is called. ** ** This routine needs to reset the extra data section at the end of the ** page to agree with the restored data. 
Name: btreeInvokeBusyHandler; Comment: ** Invoke the busy handler for a btree. 
Name: removeFromSharingList; Comment: ** Decrement the BtShared.nRef counter. When it reaches zero, ** remove the BtShared structure from the sharing list. Return ** true if the BtShared.nRef counter reaches zero and return ** false if it is still positive. 
Name: allocateTempSpace; Comment: ** Make sure pBt->pTmpSpace points to an allocation of ** MX_CELL_SIZE(pBt) bytes with a 4-byte prefix for a left-child ** pointer. 
Name: freeTempSpace; Comment: ** Free the pBt->pTmpSpace allocation 
Name: sqlite3BtreeClose; Comment: ** Close an open database and invalidate all cursors. 
Name: sqlite3BtreeSetCacheSize; Comment: ** Change the "soft" limit on the number of pages in the cache. ** Unused and unmodified pages will be recycled when the number of ** pages in the cache exceeds this soft limit. But the size of the ** cache is allowed to grow larger than this limit if it contains ** dirty pages or pages still in active use. 
Name: sqlite3BtreeSetSpillSize; Comment: ** Change the "spill" limit on the number of pages in the cache. ** If the number of pages exceeds this limit during a write transaction, ** the pager might attempt to "spill" pages to the journal early in ** order to free up memory. ** ** The value returned is the current spill size. If zero is passed ** as an argument, no changes are made to the spill size setting, so ** using mxPage of 0 is a way to query the current spill size. 
Name: sqlite3BtreeSetMmapLimit; Comment: ** Change the limit on the amount of the database file that may be ** memory mapped. 
Name: sqlite3BtreeSetPageSize; Comment: ** Change the default pages size and the number of reserved bytes per page. ** Or, if the page size has already been fixed, return SQLITE_READONLY ** without changing anything. ** ** The page size must be a power of 2 between 512 and 65536. If the page ** size supplied does not meet this constraint then the page size is not ** changed. ** ** Page sizes are constrained to be a power of two so that the region ** of the database file used for locking (beginning at PENDING_BYTE, ** the first byte past the 1GB boundary, 0x40000000) needs to occur ** at the beginning of a page. ** ** If parameter nReserve is less than zero, then the number of reserved ** bytes per page is left unchanged. ** ** If the iFix!=0 then the BTS_PAGESIZE_FIXED flag is set so that the page size ** and autovacuum mode can no longer be changed. 
Name: sqlite3BtreeGetPageSize; Comment: ** Return the currently defined page size 
Name: sqlite3BtreeGetReserveNoMutex; Comment: ** This function is similar to sqlite3BtreeGetReserve(), except that it ** may only be called if it is guaranteed that the b-tree mutex is already ** held. ** ** This is useful in one special case in the backup API code where it is ** known that the shared b-tree mutex is held, but the mutex on the ** database handle that owns *p is not. In this case if sqlite3BtreeEnter() ** were to be called, it might collide with some other operation on the ** database handle that owns *p, causing undefined behavior. 
Name: sqlite3BtreeGetRequestedReserve; Comment: ** Return the number of bytes of space at the end of every page that ** are intentually left unused. This is the "reserved" space that is ** sometimes used by extensions. ** ** The value returned is the larger of the current reserve size and ** the latest reserve size requested by SQLITE_FILECTRL_RESERVE_BYTES. ** The amount of reserve can only grow - never shrink. 
Name: sqlite3BtreeMaxPageCount; Comment: ** Set the maximum page count for a database if mxPage is positive. ** No changes are made if mxPage is 0 or negative. ** Regardless of the value of mxPage, return the maximum page count. 
Name: sqlite3BtreeSecureDelete; Comment: ** Change the values for the BTS_SECURE_DELETE and BTS_OVERWRITE flags: ** ** newFlag==0 Both BTS_SECURE_DELETE and BTS_OVERWRITE are cleared ** newFlag==1 BTS_SECURE_DELETE set and BTS_OVERWRITE is cleared ** newFlag==2 BTS_SECURE_DELETE cleared and BTS_OVERWRITE is set ** newFlag==(-1) No changes ** ** This routine acts as a query if newFlag is less than zero ** ** With BTS_OVERWRITE set, deleted content is overwritten by zeros, but ** freelist leaf pages are not written back to the database. Thus in-page ** deleted content is cleared, but freelist deleted content is not. ** ** With BTS_SECURE_DELETE, operation is like BTS_OVERWRITE with the addition ** that freelist leaf pages are written back into the database, increasing ** the amount of disk I/O. 
Name: sqlite3BtreeSetAutoVacuum; Comment: ** Change the 'auto-vacuum' property of the database. If the 'autoVacuum' ** parameter is non-zero, then auto-vacuum mode is enabled. If zero, it ** is disabled. The default value for the auto-vacuum property is ** determined by the SQLITE_DEFAULT_AUTOVACUUM macro. 
Name: sqlite3BtreeGetAutoVacuum; Comment: ** Return the value of the 'auto-vacuum' property. If auto-vacuum is ** enabled 1 is returned. Otherwise 0. 
Name: lockBtree; Comment: ** Get a reference to pPage1 of the database file. This will ** also acquire a readlock on that file. ** ** SQLITE_OK is returned on success. If the file is not a ** well-formed database file, then SQLITE_CORRUPT is returned. ** SQLITE_BUSY is returned if the database is locked. SQLITE_NOMEM ** is returned if we run out of memory. 
Name: countValidCursors; Comment: ** Return the number of cursors open on pBt. This is for use ** in assert() expressions, so it is only compiled if NDEBUG is not ** defined. ** ** Only write cursors are counted if wrOnly is true. If wrOnly is ** false then all cursors are counted. ** ** For the purposes of this routine, a cursor is any cursor that ** is capable of reading or writing to the database. Cursors that ** have been tripped into the CURSOR_FAULT state are not counted. 
Name: unlockBtreeIfUnused; Comment: ** If there are no outstanding cursors and we are not in the middle ** of a transaction but there is a read lock on the database, then ** this routine unrefs the first page of the database file which ** has the effect of releasing the read lock. ** ** If there is a transaction in progress, this routine is a no-op. 
Name: newDatabase; Comment: ** If pBt points to an empty file then convert that empty file ** into a new empty database by initializing the first page of ** the database. 
Name: sqlite3BtreeNewDb; Comment: ** Initialize the first page of the database file (creating a database ** consisting of a single page and no schema objects). Return SQLITE_OK ** if successful, or an SQLite error code otherwise. 
Name: sqlite3BtreeBeginTrans; Comment: ** Attempt to start a new transaction. A write-transaction ** is started if the second argument is nonzero, otherwise a read- ** transaction. If the second argument is 2 or more and exclusive ** transaction is started, meaning that no other process is allowed ** to access the database. A preexisting transaction may not be ** upgraded to exclusive by calling this routine a second time - the ** exclusivity flag only works for a new transaction. ** ** A write-transaction must be started before attempting any ** changes to the database. None of the following routines ** will work unless a transaction is started first: ** ** sqlite3BtreeCreateTable() ** sqlite3BtreeCreateIndex() ** sqlite3BtreeClearTable() ** sqlite3BtreeDropTable() ** sqlite3BtreeInsert() ** sqlite3BtreeDelete() ** sqlite3BtreeUpdateMeta() ** ** If an initial attempt to acquire the lock fails because of lock contention ** and the database was previously unlocked, then invoke the busy handler ** if there is one. But if there was previously a read-lock, do not ** invoke the busy handler - just return SQLITE_BUSY. SQLITE_BUSY is ** returned when there is already a read-lock in order to avoid a deadlock. ** ** Suppose there are two processes A and B. A has a read lock and B has ** a reserved lock. B tries to promote to exclusive but is blocked because ** of A's read lock. A tries to promote to reserved but is blocked by B. ** One or the other of the two processes must give way or there can be ** no progress. By returning SQLITE_BUSY and not invoking the busy callback ** when A already has a read lock, we encourage A to give up and let B ** proceed. 
Name: setChildPtrmaps; Comment: ** Set the pointer-map entries for all children of page pPage. Also, if ** pPage contains cells that point to overflow pages, set the pointer ** map entries for the overflow pages as well. 
Name: modifyPagePointer; Comment: ** Somewhere on pPage is a pointer to page iFrom. Modify this pointer so ** that it points to iTo. Parameter eType describes the type of pointer to ** be modified, as follows: ** ** PTRMAP_BTREE: pPage is a btree-page. The pointer points at a child ** page of pPage. ** ** PTRMAP_OVERFLOW1: pPage is a btree-page. The pointer points at an overflow ** page pointed to by one of the cells on pPage. ** ** PTRMAP_OVERFLOW2: pPage is an overflow-page. The pointer points at the next ** overflow page in the list. 
Name: incrVacuumStep; Comment: ** Perform a single step of an incremental-vacuum. If successful, return ** SQLITE_OK. If there is no work to do (and therefore no point in ** calling this function again), return SQLITE_DONE. Or, if an error ** occurs, return some other error code. ** ** More specifically, this function attempts to re-organize the database so ** that the last page of the file currently in use is no longer in use. ** ** Parameter nFin is the number of pages that this database would contain ** were this function called until it returns SQLITE_DONE. ** ** If the bCommit parameter is non-zero, this function assumes that the ** caller will keep calling incrVacuumStep() until it returns SQLITE_DONE ** or an error. bCommit is passed true for an auto-vacuum-on-commit ** operation, or false for an incremental vacuum. 
Name: finalDbSize; Comment: ** The database opened by the first argument is an auto-vacuum database ** nOrig pages in size containing nFree free pages. Return the expected ** size of the database in pages following an auto-vacuum operation. 
Name: sqlite3BtreeIncrVacuum; Comment: ** A write-transaction must be opened before calling this function. ** It performs a single unit of work towards an incremental vacuum. ** ** If the incremental vacuum is finished after this function has run, ** SQLITE_DONE is returned. If it is not finished, but no error occurred, ** SQLITE_OK is returned. Otherwise an SQLite error code. 
Name: autoVacuumCommit; Comment: ** This routine is called prior to sqlite3PagerCommit when a transaction ** is committed for an auto-vacuum database. ** ** If SQLITE_OK is returned, then *pnTrunc is set to the number of pages ** the database file should be truncated to during the commit process. ** i.e. the database has been reorganized so that only the first *pnTrunc ** pages are in use. 
Name: sqlite3BtreeCommitPhaseOne; Comment: ** This routine does the first phase of a two-phase commit. This routine ** causes a rollback journal to be created (if it does not already exist) ** and populated with enough information so that if a power loss occurs ** the database can be restored to its original state by playing back ** the journal. Then the contents of the journal are flushed out to ** the disk. After the journal is safely on oxide, the changes to the ** database are written into the database file and flushed to oxide. ** At the end of this call, the rollback journal still exists on the ** disk and we are still holding all locks, so the transaction has not ** committed. See sqlite3BtreeCommitPhaseTwo() for the second phase of the ** commit process. ** ** This call is a no-op if no write-transaction is currently active on pBt. ** ** Otherwise, sync the database file for the btree pBt. zSuperJrnl points to ** the name of a super-journal file that should be written into the ** individual journal file, or is NULL, indicating no super-journal file ** (single database transaction). ** ** When this is called, the super-journal should already have been ** created, populated with this journal pointer and synced to disk. ** ** Once this is routine has returned, the only thing required to commit ** the write-transaction for this database file is to delete the journal. 
Name: btreeEndTransaction; Comment: ** This function is called from both BtreeCommitPhaseTwo() and BtreeRollback() ** at the conclusion of a transaction. 
Name: sqlite3BtreeCommitPhaseTwo; Comment: ** Commit the transaction currently in progress. ** ** This routine implements the second phase of a 2-phase commit. The ** sqlite3BtreeCommitPhaseOne() routine does the first phase and should ** be invoked prior to calling this routine. The sqlite3BtreeCommitPhaseOne() ** routine did all the work of writing information out to disk and flushing the ** contents so that they are written onto the disk platter. All this ** routine has to do is delete or truncate or zero the header in the ** the rollback journal (which causes the transaction to commit) and ** drop locks. ** ** Normally, if an error occurs while the pager layer is attempting to ** finalize the underlying journal file, this function returns an error and ** the upper layer will attempt a rollback. However, if the second argument ** is non-zero then this b-tree transaction is part of a multi-file ** transaction. In this case, the transaction has already been committed ** (by deleting a super-journal file) and the caller will ignore this ** functions return code. So, even if an error occurs in the pager layer, ** reset the b-tree objects internal state to indicate that the write ** transaction has been closed. This is quite safe, as the pager will have ** transitioned to the error state. ** ** This will release the write lock on the database file. If there ** are no active cursors, it also releases the read lock. 
Name: sqlite3BtreeCommit; Comment: ** Do both phases of a commit. 
Name: sqlite3BtreeTripAllCursors; Comment: ** This routine sets the state to CURSOR_FAULT and the error ** code to errCode for every cursor on any BtShared that pBtree ** references. Or if the writeOnly flag is set to 1, then only ** trip write cursors and leave read cursors unchanged. ** ** Every cursor is a candidate to be tripped, including cursors ** that belong to other database connections that happen to be ** sharing the cache with pBtree. ** ** This routine gets called when a rollback occurs. If the writeOnly ** flag is true, then only write-cursors need be tripped - read-only ** cursors save their current positions so that they may continue ** following the rollback. Or, if writeOnly is false, all cursors are ** tripped. In general, writeOnly is false if the transaction being ** rolled back modified the database schema. In this case b-tree root ** pages may be moved or deleted from the database altogether, making ** it unsafe for read cursors to continue. ** ** If the writeOnly flag is true and an error is encountered while ** saving the current position of a read-only cursor, all cursors, ** including all read-cursors are tripped. ** ** SQLITE_OK is returned if successful, or if an error occurs while ** saving a cursor position, an SQLite error code. 
Name: btreeSetNPage; Comment: ** Set the pBt->nPage field correctly, according to the current ** state of the database. Assume pBt->pPage1 is valid. 
Name: sqlite3BtreeRollback; Comment: ** Rollback the transaction in progress. ** ** If tripCode is not SQLITE_OK then cursors will be invalidated (tripped). ** Only write cursors are tripped if writeOnly is true but all cursors are ** tripped if writeOnly is false. Any attempt to use ** a tripped cursor will result in an error. ** ** This will release the write lock on the database file. If there ** are no active cursors, it also releases the read lock. 
Name: sqlite3BtreeBeginStmt; Comment: ** Start a statement subtransaction. The subtransaction can be rolled ** back independently of the main transaction. You must start a transaction ** before starting a subtransaction. The subtransaction is ended automatically ** if the main transaction commits or rolls back. ** ** Statement subtransactions are used around individual SQL statements ** that are contained within a BEGIN...COMMIT block. If a constraint ** error occurs within the statement, the effect of that one statement ** can be rolled back without having to rollback the entire transaction. ** ** A statement sub-transaction is implemented as an anonymous savepoint. The ** value passed as the second parameter is the total number of savepoints, ** including the new anonymous savepoint, open on the B-Tree. i.e. if there ** are no active savepoints and no other statement-transactions open, ** iStatement is 1. This anonymous savepoint can be released or rolled back ** using the sqlite3BtreeSavepoint() function. 
Name: sqlite3BtreeSavepoint; Comment: ** The second argument to this function, op, is always SAVEPOINT_ROLLBACK ** or SAVEPOINT_RELEASE. This function either releases or rolls back the ** savepoint identified by parameter iSavepoint, depending on the value ** of op. ** ** Normally, iSavepoint is greater than or equal to zero. However, if op is ** SAVEPOINT_ROLLBACK, then iSavepoint may also be -1. In this case the ** contents of the entire transaction are rolled back. This is different ** from a normal transaction rollback, as no locks are released and the ** transaction remains open. 
Name: sqlite3BtreeCursorSize; Comment: ** Return the size of a BtCursor object in bytes. ** ** This interfaces is needed so that users of cursors can preallocate ** sufficient storage to hold a cursor. The BtCursor object is opaque ** to users so they cannot do the sizeof() themselves - they must call ** this routine. 
Name: sqlite3BtreeCursorZero; Comment: ** Initialize memory that will be converted into a BtCursor object. ** ** The simple approach here would be to memset() the entire object ** to zero. But it turns out that the apPage[] and aiIdx[] arrays ** do not need to be zeroed and they are large, so we can save a lot ** of run-time by skipping the initialization of those elements. 
Name: sqlite3BtreeCloseCursor; Comment: ** Close a cursor. The read lock on the database file is released ** when the last cursor is closed. 
Name: sqlite3BtreeCursorIsValid; Comment: ** Return true if the given BtCursor is valid. A valid cursor is one ** that is currently pointing to a row in a (non-empty) table. ** This is a verification routine is used only within assert() statements. 
Name: sqlite3BtreeIntegerKey; Comment: ** Return the value of the integer key or "rowid" for a table btree. ** This routine is only valid for a cursor that is pointing into a ** ordinary table btree. If the cursor points to an index btree or ** is invalid, the result of this routine is undefined. 
Name: sqlite3BtreeCursorPin; Comment: ** Pin or unpin a cursor. 
Name: sqlite3BtreeOffset; Comment: ** Return the offset into the database file for the start of the ** payload to which the cursor is pointing. 
Name: sqlite3BtreePayloadSize; Comment: ** Return the number of bytes of payload for the entry that pCur is ** currently pointing to. For table btrees, this will be the amount ** of data. For index btrees, this will be the size of the key. ** ** The caller must guarantee that the cursor is pointing to a non-NULL ** valid entry. In other words, the calling procedure must guarantee ** that the cursor has Cursor.eState==CURSOR_VALID. 
Name: sqlite3BtreeMaxRecordSize; Comment: ** Return an upper bound on the size of any record for the table ** that the cursor is pointing into. ** ** This is an optimization. Everything will still work if this ** routine always returns 2147483647 (which is the largest record ** that SQLite can handle) or more. But returning a smaller value might ** prevent large memory allocations when trying to interpret a ** corrupt datrabase. ** ** The current implementation merely returns the size of the underlying ** database file. 
Name: sqlite3BtreePayload; Comment: ** Read part of the payload for the row at which that cursor pCur is currently ** pointing. "amt" bytes will be transferred into pBuf[]. The transfer ** begins at "offset". ** ** pCur can be pointing to either a table or an index b-tree. ** If pointing to a table btree, then the content section is read. If ** pCur is pointing to an index b-tree then the key section is read. ** ** For sqlite3BtreePayload(), the caller must ensure that pCur is pointing ** to a valid row in the table. For sqlite3BtreePayloadChecked(), the ** cursor might be invalid or might need to be restored before being read. ** ** Return SQLITE_OK on success or an error code if anything goes ** wrong. An error is returned if "offset+amt" is larger than ** the available payload. 
Name: sqlite3BtreePayloadFetch; Comment: ** For the entry that cursor pCur is point to, return as ** many bytes of the key or data as are available on the local ** b-tree page. Write the number of available bytes into *pAmt. ** ** The pointer returned is ephemeral. The key/data may move ** or be destroyed on the next call to any Btree routine, ** including calls from other threads against the same cache. ** Hence, a mutex on the BtShared should be held prior to calling ** this routine. ** ** These routines is used to get quick access to key and data ** in the common case where no overflow pages are used. 
Name: moveToChild; Comment: ** Move the cursor down to a new child page. The newPgno argument is the ** page number of the child page to move to. ** ** This function returns SQLITE_CORRUPT if the page-header flags field of ** the new child page does not match the flags field of the parent (i.e. ** if an intkey page appears to be the parent of a non-intkey page, or ** vice-versa). 
Name: assertParentIndex; Comment: ** Page pParent is an internal (non-leaf) tree page. This function ** asserts that page number iChild is the left-child if the iIdx'th ** cell in page pParent. Or, if iIdx is equal to the total number of ** cells in pParent, that page number iChild is the right-child of ** the page. 
Name: moveToParent; Comment: ** Move the cursor up to the parent page. ** ** pCur->idx is set to the cell index that contains the pointer ** to the page we are coming from. If we are coming from the ** right-most child page then pCur->idx is set to one more than ** the largest cell index. 
Name: moveToRoot; Comment: ** Move the cursor to point to the root page of its b-tree structure. ** ** If the table has a virtual root page, then the cursor is moved to point ** to the virtual root page instead of the actual root page. A table has a ** virtual root page when the actual root page contains no cells and a ** single child page. This can only happen with the table rooted at page 1. ** ** If the b-tree structure is empty, the cursor state is set to ** CURSOR_INVALID and this routine returns SQLITE_EMPTY. Otherwise, ** the cursor is set to point to the first cell located on the root ** (or virtual root) page and the cursor state is set to CURSOR_VALID. ** ** If this function returns successfully, it may be assumed that the ** page-header flags indicate that the [virtual] root-page is the expected ** kind of b-tree page (i.e. if when opening the cursor the caller did not ** specify a KeyInfo structure the flags byte is set to 0x05 or 0x0D, ** indicating a table b-tree, or if the caller did specify a KeyInfo ** structure the flags byte is set to 0x02 or 0x0A, indicating an index ** b-tree). 
Name: moveToLeftmost; Comment: ** Move the cursor down to the left-most leaf entry beneath the ** entry to which it is currently pointing. ** ** The left-most leaf is the one with the smallest key - the first ** in ascending order. 
Name: moveToRightmost; Comment: ** Move the cursor down to the right-most leaf entry beneath the ** page to which it is currently pointing. Notice the difference ** between moveToLeftmost() and moveToRightmost(). moveToLeftmost() ** finds the left-most entry beneath the *entry* whereas moveToRightmost() ** finds the right-most entry beneath the *page*. ** ** The right-most entry is the one with the largest key - the last ** key in ascending order. 
Name: sqlite3BtreeFirst; Comment: Move the cursor to the first entry in the table. Return SQLITE_OK** on success. Set *pRes to 0 if the cursor actually points to something ** or set *pRes to 1 if the table is empty. 
Name: sqlite3BtreeLast; Comment: Move the cursor to the last entry in the table. Return SQLITE_OK** on success. Set *pRes to 0 if the cursor actually points to something ** or set *pRes to 1 if the table is empty. 
Name: sqlite3BtreeEof; Comment: ** Return TRUE if the cursor is not pointing at an entry of the table. ** ** TRUE will be returned after a call to sqlite3BtreeNext() moves ** past the last entry in the table or sqlite3BtreePrev() moves past ** the first entry. TRUE is also returned if the table is empty. 
Name: sqlite3BtreeRowCountEst; Comment: ** Return an estimate for the number of rows in the table that pCur is ** pointing to. Return a negative number if no estimate is currently ** available. 
Name: btreeNext; Comment: ** Advance the cursor to the next entry in the database. ** Return value: ** ** SQLITE_OK success ** SQLITE_DONE cursor is already pointing at the last element ** otherwise some kind of error occurred ** ** The main entry point is sqlite3BtreeNext(). That routine is optimized ** for the common case of merely incrementing the cell counter BtCursor.aiIdx ** to the next cell on the current page. The (slower) btreeNext() helper ** routine is called when it is necessary to move to a different page or ** to restore the cursor. ** ** If bit 0x01 of the F argument in sqlite3BtreeNext(C,F) is 1, then the ** cursor corresponds to an SQL index and this routine could have been ** skipped if the SQL index had been a unique index. The F argument ** is a hint to the implement. SQLite btree implementation does not use ** this hint, but COMDB2 does. 
Name: btreePrevious; Comment: ** Step the cursor to the back to the previous entry in the database. ** Return values: ** ** SQLITE_OK success ** SQLITE_DONE the cursor is already on the first element of the table ** otherwise some kind of error occurred ** ** The main entry point is sqlite3BtreePrevious(). That routine is optimized ** for the common case of merely decrementing the cell counter BtCursor.aiIdx ** to the previous cell on the current page. The (slower) btreePrevious() ** helper routine is called when it is necessary to move to a different page ** or to restore the cursor. ** ** If bit 0x01 of the F argument to sqlite3BtreePrevious(C,F) is 1, then ** the cursor corresponds to an SQL index and this routine could have been ** skipped if the SQL index had been a unique index. The F argument is a ** hint to the implement. The native SQLite btree implementation does not ** use this hint, but COMDB2 does. 
Name: freePage2; Comment: ** This function is used to add page iPage to the database file free-list. ** It is assumed that the page is not already a part of the free-list. ** ** The value passed as the second argument to this function is optional. ** If the caller happens to have a pointer to the MemPage object ** corresponding to page iPage handy, it may pass it as the second value. ** Otherwise, it may pass NULL. ** ** If a pointer to a MemPage object is passed as the second argument, ** its reference count is not altered by this function. 
Name: dropCell; Comment: ** Remove the i-th cell from pPage. This routine effects pPage only. ** The cell content is not freed or deallocated. It is assumed that ** the cell content has been copied someplace else. This routine just ** removes the reference to the cell from pPage. ** ** "sz" must be the number of bytes in the cell. 
Name: populateCellCache; Comment: ** Make sure the cell sizes at idx, idx+1, ..., idx+N-1 have been ** computed. 
Name: computeCellSize; Comment: ** Return the size of the Nth element of the cell array 
Name: balance_quick; Comment: ** This version of balance() handles the common special case where ** a new entry is being inserted on the extreme right-end of the ** tree, in other words, when the new entry will become the largest ** entry in the tree. ** ** Instead of trying to balance the 3 right-most leaf pages, just add ** a new page to the right-hand side and put the one new entry in ** that page. This leaves the right side of the tree somewhat ** unbalanced. But odds are that we will be inserting new entries ** at the end soon afterwards so the nearly empty page will quickly ** fill up. On average. ** ** pPage is the leaf page which is the right-most page in the tree. ** pParent is its parent. pPage must have a single overflow entry ** which is also the right-most entry on the page. ** ** The pSpace buffer is used to store a temporary copy of the divider ** cell that will be inserted into pParent. Such a cell consists of a 4 ** byte page number followed by a variable length integer. In other ** words, at most 13 bytes. Hence the pSpace buffer must be at ** least 13 bytes in size. 
Name: ptrmapCheckPages; Comment: ** This function does not contribute anything to the operation of SQLite. ** it is sometimes activated temporarily while debugging code responsible ** for setting pointer-map entries. 
Name: copyNodeContent; Comment: ** This function is used to copy the contents of the b-tree node stored ** on page pFrom to page pTo. If page pFrom was not a leaf page, then ** the pointer-map entries for each child page are updated so that the ** parent page stored in the pointer map is page pTo. If pFrom contained ** any cells with overflow page pointers, then the corresponding pointer ** map entries are also updated so that the parent page is page pTo. ** ** If pFrom is currently carrying any overflow cells (entries in the ** MemPage.apOvfl[] array), they are not copied to pTo. ** ** Before returning, page pTo is reinitialized using btreeInitPage(). ** ** The performance of this function is not critical. It is only used by ** the balance_shallower() and balance_deeper() procedures, neither of ** which are called often under normal circumstances. 
Name: balance_deeper; Comment: ** This function is called when the root page of a b-tree structure is ** overfull (has one or more overflow pages). ** ** A new child page is allocated and the contents of the current root ** page, including overflow cells, are copied into the child. The root ** page is then overwritten to make it an empty page with the right-child ** pointer pointing to the new page. ** ** Before returning, all pointer-map entries corresponding to pages ** that the new child-page now contains pointers to are updated. The ** entry corresponding to the new right-child pointer of the root ** page is also updated. ** ** If successful, *ppChild is set to contain a reference to the child ** page and SQLITE_OK is returned. In this case the caller is required ** to call releasePage() on *ppChild exactly once. If an error occurs, ** an error code is returned and *ppChild is set to 0. 
Name: anotherValidCursor; Comment: ** Return SQLITE_CORRUPT if any cursor other than pCur is currently valid ** on the same B-tree as pCur. ** ** This can if a database is corrupt with two or more SQL tables ** pointing to the same b-tree. If an insert occurs on one SQL table ** and causes a BEFORE TRIGGER to do a secondary insert on the other SQL ** table linked to the same b-tree. If the secondary insert causes a ** rebalance, that can change content out from under the cursor on the ** first SQL table, violating invariants on the first insert. 
Name: balance; Comment: ** The page that pCur currently points to has just been modified in ** some way. This function figures out if this modification means the ** tree needs to be balanced, and if so calls the appropriate balancing ** routine. Balancing routines are: ** ** balance_quick() ** balance_deeper() ** balance_nonroot() 
Name: btreeOverwriteCell; Comment: ** Overwrite the cell that cursor pCur is pointing to with fresh content ** contained in pX. 
Name: sqlite3BtreeDelete; Comment: ** Delete the entry that the cursor is pointing to. ** ** If the BTREE_SAVEPOSITION bit of the flags parameter is zero, then ** the cursor is left pointing at an arbitrary location after the delete. ** But if that bit is set, then the cursor is left in a state such that ** the next call to BtreeNext() or BtreePrev() moves it to the same row ** as it would have been on if the call to BtreeDelete() had been omitted. ** ** The BTREE_AUXDELETE bit of flags indicates that is one of several deletes ** associated with a single table entry and its indexes. Only one of those ** deletes is considered the "primary" delete. The primary delete occurs ** on a cursor that is not a BTREE_FORDELETE cursor. All but one delete ** operation on non-FORDELETE cursors is tagged with the AUXDELETE flag. ** The BTREE_AUXDELETE bit is a hint that is not used by this implementation, ** but which might be used by alternative storage engines. 
Name: btreeCreateTable; Comment: ** Create a new BTree table. Write into *piTable the page ** number for the root page of the new table. ** ** The type of type is determined by the flags parameter. Only the ** following values of flags are currently in use. Other values for ** flags might not work: ** ** BTREE_INTKEY|BTREE_LEAFDATA Used for SQL tables with rowid keys ** BTREE_ZERODATA Used for SQL indices 
Name: sqlite3BtreeClearTable; Comment: ** Delete all information from a single table in the database. iTable is ** the page number of the root of the table. After this routine returns, ** the root page is empty, but still exists. ** ** This routine will fail with SQLITE_LOCKED if there are any open ** read cursors on the table. Open write cursors are moved to the ** root of the table. ** ** If pnChange is not NULL, then table iTable must be an intkey table. The ** integer value pointed to by pnChange is incremented by the number of ** entries in the table. 
Name: sqlite3BtreeClearTableOfCursor; Comment: ** Delete all information from the single table that pCur is open on. ** ** This routine only work for pCur on an ephemeral table. 
Name: btreeDropTable; Comment: ** Erase all information in a table and add the root of the table to ** the freelist. Except, the root of the principle table (the one on ** page 1) is never added to the freelist. ** ** This routine will fail with SQLITE_LOCKED if there are any open ** cursors on the table. ** ** If AUTOVACUUM is enabled and the page at iTable is not the last ** root page in the database file, then the last root page ** in the database file is moved into the slot formerly occupied by ** iTable and that last slot formerly occupied by the last root page ** is added to the freelist instead of iTable. In this say, all ** root pages are kept at the beginning of the database file, which ** is necessary for AUTOVACUUM to work right. *piMoved is set to the ** page number that used to be the last root page in the file before ** the move. If no page gets moved, *piMoved is set to 0. ** The last root page is recorded in meta[3] and the value of ** meta[3] is updated by this procedure. 
Name: sqlite3BtreeGetMeta; Comment: ** This function may only be called if the b-tree connection already ** has a read or write transaction open on the database. ** ** Read the meta-information out of a database file. Meta[0] ** is the number of free pages currently in the database. Meta[1] ** through meta[15] are available for use by higher layers. Meta[0] ** is read-only, the others are read/write. ** ** The schema layer numbers meta values differently. At the schema ** layer (and the SetCookie and ReadCookie opcodes) the number of ** free pages is not visible. So Cookie[0] is the same as Meta[1]. ** ** This routine treats Meta[BTREE_DATA_VERSION] as a special case. Instead ** of reading the value out of the header, it instead loads the "DataVersion" ** from the pager. The BTREE_DATA_VERSION value is not actually stored in the ** database file. It is a number computed by the pager. But its access ** pattern is the same as header meta values, and so it is convenient to ** read it from this routine. 
Name: sqlite3BtreeUpdateMeta; Comment: ** Write meta-information back into the database. Meta[0] is ** read-only and may not be written. 
Name: sqlite3BtreeCount; Comment: ** The first argument, pCur, is a cursor opened on some b-tree. Count the ** number of entries in the b-tree and write the result to *pnEntry. ** ** SQLITE_OK is returned if the operation is successfully executed. ** Otherwise, if an error is encountered (i.e. an IO error or database ** corruption) an SQLite error code is returned. 
Name: sqlite3BtreePager; Comment: ** Return the pager associated with a BTree. This routine is used for ** testing and debugging only. 
Name: checkAppendMsg; Comment: ** Append a message to the error message string. 
Name: getPageReferenced; Comment: ** Return non-zero if the bit in the IntegrityCk.aPgRef[] array that ** corresponds to page iPg is already set. 
Name: setPageReferenced; Comment: ** Set the bit in the IntegrityCk.aPgRef[] array that corresponds to page iPg. 
Name: checkRef; Comment: ** Add 1 to the reference count for page iPage. If this is the second ** reference to the page, add an error message to pCheck->zErrMsg. ** Return 1 if there are 2 or more references to the page and 0 if ** if this is the first reference to the page. ** ** Also check that the page number is in bounds. 
Name: btreeHeapInsert; Comment: ** An implementation of a min-heap. ** ** aHeap[0] is the number of elements on the heap. aHeap[1] is the ** root element. The daughter nodes of aHeap[N] are aHeap[N*2] ** and aHeap[N*2+1]. ** ** The heap property is this: Every node is less than or equal to both ** of its daughter nodes. A consequence of the heap property is that the ** root node aHeap[1] is always the minimum value currently in the heap. ** ** The btreeHeapInsert() routine inserts an unsigned 32-bit number onto ** the heap, preserving the heap property. The btreeHeapPull() routine ** removes the root element from the heap (the minimum value in the heap) ** and then moves other nodes around as necessary to preserve the heap ** property. ** ** This heap is used for cell overlap and coverage testing. Each u32 ** entry represents the span of a cell or freeblock on a btree page. ** The upper 16 bits are the index of the first byte of a range and the ** lower 16 bits are the index of the last byte of that range. 
Name: sqlite3BtreeGetFilename; Comment: ** Return the full pathname of the underlying database file. Return ** an empty string if the database is in-memory or a TEMP database. ** ** The pager filename is invariant as long as the pager is ** open so it is safe to access without the BtShared mutex. 
Name: sqlite3BtreeGetJournalname; Comment: ** Return the pathname of the journal file for this database. The return ** value of this routine is the same regardless of whether the journal file ** has been created or not. ** ** The pager journal filename is invariant as long as the pager is ** open so it is safe to access without the BtShared mutex. 
Name: sqlite3BtreeTxnState; Comment: ** Return one of SQLITE_TXN_NONE, SQLITE_TXN_READ, or SQLITE_TXN_WRITE ** to describe the current transaction state of Btree p. 
Name: sqlite3BtreeCheckpoint; Comment: ** Run a checkpoint on the Btree passed as the first argument. ** ** Return SQLITE_LOCKED if this or any other connection has an open ** transaction on the shared-cache the argument Btree is connected to. ** ** Parameter eMode is one of SQLITE_CHECKPOINT_PASSIVE, FULL or RESTART. 
Name: sqlite3BtreeIsInBackup; Comment: ** Return true if there is currently a backup running on Btree p. 
Name: sqlite3BtreeSchema; Comment: ** This function returns a pointer to a blob of memory associated with ** a single shared-btree. The memory is used by client code for its own ** purposes (for example, to store a high-level schema associated with ** the shared-btree). The btree layer manages reference counting issues. ** ** The first time this is called on a shared-btree, nBytes bytes of memory ** are allocated, zeroed, and returned to the caller. For each subsequent ** call the nBytes parameter is ignored and a pointer to the same blob ** of memory returned. ** ** If the nBytes parameter is 0 and the blob of memory has not yet been ** allocated, a null pointer is returned. If the blob has already been ** allocated, it is returned as normal. ** ** Just before the shared-btree is closed, the function passed as the ** xFree argument when the memory allocation was made is invoked on the ** blob of allocated memory. The xFree function should not call sqlite3_free() ** on the memory, the btree layer does that. 
Name: sqlite3BtreeSchemaLocked; Comment: ** Return SQLITE_LOCKED_SHAREDCACHE if another user of the same shared ** btree as the argument handle holds an exclusive lock on the ** sqlite_schema table. Otherwise SQLITE_OK. 
Name: sqlite3BtreeLockTable; Comment: ** Obtain a lock on the table whose root page is iTab. The ** lock is a write lock if isWritelock is true or a read lock ** if it is false. 
Name: sqlite3BtreePutData; Comment: ** Argument pCsr must be a cursor opened for writing on an ** INTKEY table currently pointing at a valid table entry. ** This function modifies the data stored as part of that entry. ** ** Only the data content may only be modified, it is not possible to ** change the length of the data stored. If this function is called with ** parameters that attempt to write past the end of the existing data, ** no modifications are made and SQLITE_CORRUPT is returned. 
Name: sqlite3BtreeIncrblobCursor; Comment: ** Mark this cursor as an incremental blob cursor. 
Name: sqlite3BtreeSetVersion; Comment: ** Set both the "read version" (single byte at byte offset 18) and ** "write version" (single byte at byte offset 19) fields in the database ** header to iVersion. 
Name: sqlite3BtreeCursorHasHint; Comment: ** Return true if the cursor has a hint specified. This routine is ** only used from within assert() statements 
Name: sqlite3BtreeIsReadonly; Comment: ** Return true if the given Btree is read-only. 
Name: sqlite3BtreeSharable; Comment: ** Return true if the Btree passed as the only argument is sharable. 
Name: sqlite3BtreeConnectionCount; Comment: ** Return the number of connections to the BtShared object accessed by ** the Btree handle passed as the only argument. For private caches ** this is always 1. For shared caches it may be 1 or greater. 
Name: findBtree; Comment: ** Return a pointer corresponding to database zDb (i.e. "main", "temp") ** in connection handle pDb. If such a database cannot be found, return ** a NULL pointer and write an error message to pErrorDb. ** ** If the "temp" database is requested, it may need to be opened by this ** function. If an error occurs while doing so, return 0 and write an ** error message to pErrorDb. 
Name: setDestPgsz; Comment: ** Attempt to set the page size of the destination to match the page size ** of the source. 
Name: checkReadTransaction; Comment: ** Check that there is no open read-transaction on the b-tree passed as the ** second argument. If there is not, return SQLITE_OK. Otherwise, if there ** is an open read-transaction, return SQLITE_ERROR and leave an error ** message in database handle db. 
Name: isFatalError; Comment: ** Argument rc is an SQLite error code. Return true if this error is ** considered fatal if encountered during a backup operation. All errors ** are considered fatal except for SQLITE_BUSY and SQLITE_LOCKED. 
Name: backupTruncateFile; Comment: ** If pFile is currently larger than iSize bytes, then truncate it to ** exactly iSize bytes. If pFile is not larger than iSize bytes, then ** this function is a no-op. ** ** Return SQLITE_OK if everything is successful, or an SQLite error ** code if an error occurs. 
Name: attachBackupObject; Comment: ** Register this backup object with the associated source pager for ** callbacks when pages are changed or the cache invalidated. 
Name: sqlite3_backup_step; Comment: ** Copy nPage pages from the source b-tree to the destination. 
Name: sqlite3_backup_finish; Comment: ** Release all resources associated with an sqlite3_backup* handle. 
Name: sqlite3_backup_remaining; Comment: ** Return the number of pages still to be backed up as of the most recent ** call to sqlite3_backup_step(). 
Name: sqlite3_backup_pagecount; Comment: ** Return the total number of pages in the source database as of the most ** recent call to sqlite3_backup_step(). 
Name: backupUpdate; Comment: ** This function is called after the contents of page iPage of the ** source database have been modified. If page iPage has already been ** copied into the destination database, then the data written to the ** destination is now invalidated. The destination copy of iPage needs ** to be updated with the new data before the backup operation is ** complete. ** ** It is assumed that the mutex associated with the BtShared object ** corresponding to the source database is held when this function is ** called. 
Name: sqlite3BackupRestart; Comment: ** Restart the backup process. This is called when the pager layer ** detects that the database has been modified by an external database ** connection. In this case there is no way of knowing which of the ** pages that have been copied into the destination database are still ** valid and which are not, so the entire process needs to be restarted. ** ** It is assumed that the mutex associated with the BtShared object ** corresponding to the source database is held when this function is ** called. 
Name: sqlite3BtreeCopyFile; Comment: ** Copy the complete content of pBtFrom into pBtTo. A transaction ** must be active for both files. ** ** The size of file pTo may be reduced by this operation. If anything ** goes wrong, the transaction on pTo is rolled back. If successful, the ** transaction is committed before returning. 
Name: vdbeMemRenderNum; Comment: ** Render a Mem object which is one of MEM_Int, MEM_Real, or MEM_IntReal ** into a buffer. 
Name: sqlite3VdbeMemValidStrRep; Comment: Validity checks on pMem. pMem holds a string. (1) Check that string value of pMem agrees with its integer or real value. (2) Check that the string is correctly zero terminated A single int or real value always converts to the same strings. But many different strings can be converted into the same int or real. If a table contains a numeric value and an index is based on the corresponding string value, then it is important that the string be derived from the numeric value, not the other way around, to ensure that the index and table are consistent. See ticket https:www.sqlite.orgsrcinfo343634942dd54ab (2018-01-31) for** an example. ** ** This routine looks at pMem to verify that if it has both a numeric ** representation and a string representation then the string rep has ** been derived from the numeric and not the other way around. It returns ** true if everything is ok and false if there is a problem. ** ** This routine is for use inside of assert() statements only. 
Name: sqlite3VdbeChangeEncoding; Comment: ** If pMem is an object with a valid string representation, this routine ** ensures the internal encoding for the string representation is ** 'desiredEnc', one of SQLITE_UTF8, SQLITE_UTF16LE or SQLITE_UTF16BE. ** ** If pMem is not a string object, or the encoding of the string ** representation is already stored using the requested encoding, then this ** routine is a no-op. ** ** SQLITE_OK is returned if the conversion is successful (or not required). ** SQLITE_NOMEM may be returned if a malloc() fails during conversion ** between formats. 
Name: sqlite3VdbeMemGrow; Comment: ** Make sure pMem->z points to a writable allocation of at least n bytes. ** ** If the bPreserve argument is true, then copy of the content of ** pMem->z into the new allocation. pMem must be either a string or ** blob if bPreserve is true. If bPreserve is false, any prior content ** in pMem->z is discarded. 
Name: sqlite3VdbeMemClearAndResize; Comment: ** Change the pMem->zMalloc allocation to be at least szNew bytes. ** If pMem->zMalloc already meets or exceeds the requested size, this ** routine is a no-op. ** ** Any prior string or blob content in the pMem object may be discarded. ** The pMem->xDel destructor is called, if it exists. Though MEM_Str ** and MEM_Blob values may be discarded, MEM_Int, MEM_Real, MEM_IntReal, ** and MEM_Null values are preserved. ** ** Return SQLITE_OK on success or an error code (probably SQLITE_NOMEM) ** if unable to complete the resizing. 
Name: vdbeMemAddTerminator; Comment: ** It is already known that pMem contains an unterminated string. ** Add the zero terminator. ** ** Three bytes of zero are added. In this way, there is guaranteed ** to be a double-zero byte at an even byte boundary in order to ** terminate a UTF16 string, even if the initial size of the buffer ** is an odd number of bytes. 
Name: sqlite3VdbeMemMakeWriteable; Comment: ** Change pMem so that its MEM_Str or MEM_Blob value is stored in ** MEM.zMalloc, where it can be safely written. ** ** Return SQLITE_OK on success or SQLITE_NOMEM if malloc fails. 
Name: sqlite3VdbeMemNulTerminate; Comment: ** Make sure the given Mem is _u0000 terminated. 
Name: sqlite3VdbeMemStringify; Comment: ** Add MEM_Str to the set of representations for the given Mem. This ** routine is only called if pMem is a number of some kind, not a NULL ** or a BLOB. ** ** Existing representations MEM_Int, MEM_Real, or MEM_IntReal are invalidated ** if bForce is true but are retained if bForce is false. ** ** A MEM_Null value will never be passed to this function. This function is ** used for converting values to text for returning to the user (i.e. via ** sqlite3_value_text()), or for ensuring that values to be used as btree ** keys are strings. In the former case a NULL pointer is returned the ** user and the latter is an internal programming error. 
Name: sqlite3VdbeMemFinalize; Comment: ** Memory cell pMem contains the context of an aggregate function. ** This routine calls the finalize method for that function. The ** result of the aggregate is stored back into pMem. ** ** Return SQLITE_ERROR if the finalizer reports an error. SQLITE_OK ** otherwise. 
Name: vdbeMemClearExternAndSetNull; Comment: ** If the memory cell contains a value that must be freed by ** invoking the external callback in Mem.xDel, then this routine ** will free that value. It also sets Mem.flags to MEM_Null. ** ** This is a helper routine for sqlite3VdbeMemSetNull() and ** for sqlite3VdbeMemRelease(). Use those other routines as the ** entry point for releasing Mem resources. 
Name: vdbeMemClear; Comment: ** Release memory held by the Mem p, both external memory cleared ** by p->xDel and memory in p->zMalloc. ** ** This is a helper routine invoked by sqlite3VdbeMemRelease() in ** the unusual case where there really is memory in p that needs ** to be freed. 
Name: sqlite3VdbeMemRelease; Comment: ** Release any memory resources held by the Mem. Both the memory that is ** free by Mem.xDel and the Mem.zMalloc allocation are freed. ** ** Use this routine prior to clean up prior to abandoning a Mem, or to ** reset a Mem back to its minimum memory utilization. ** ** Use sqlite3VdbeMemSetNull() to release just the Mem.xDel space ** prior to inserting new content into the Mem. 
Name: doubleToInt64; Comment: ** Convert a 64-bit IEEE double into a 64-bit signed integer. ** If the double is out of range of a 64-bit signed integer then ** return the closest available 64-bit signed integer. 
Name: memIntValue; Comment: ** Return some kind of integer value which is the best we can do ** at representing the value that *pMem describes as an integer. ** If pMem is an integer, then the value is exact. If pMem is ** a floating-point then the value returned is the integer part. ** If pMem is a string or blob, then we make an attempt to convert ** it into an integer and return that. If pMem represents an ** an SQL-NULL value, return 0. ** ** If pMem represents a string value, its encoding might be changed. 
Name: memRealValue; Comment: ** Return the best representation of pMem that we can get into a ** double. If pMem is already a double or an integer, return its ** value. If it is a string or blob, try to convert it to a double. ** If it is a NULL, return 0.0. 
Name: sqlite3VdbeBooleanValue; Comment: ** Return 1 if pMem represents true, and return 0 if pMem represents false. ** Return the value ifNull if pMem is NULL. 
Name: sqlite3VdbeIntegerAffinity; Comment: ** The MEM structure is already a MEM_Real. Try to also make it a ** MEM_Int if we can. 
Name: sqlite3VdbeMemIntegerify; Comment: ** Convert pMem to type integer. Invalidate any prior representations. 
Name: sqlite3VdbeMemRealify; Comment: ** Convert pMem so that it is of type MEM_Real. ** Invalidate any prior representations. 
Name: sqlite3RealSameAsInt; Comment: Compare a floating point value to an integer. Return true if the two** values are the same within the precision of the floating point value. ** ** This function assumes that i was obtained by assignment from r1. ** ** For some versions of GCC on 32-bit machines, if you do the more obvious ** comparison of "r1==(double)i" you sometimes get an answer of false even ** though the r1 and (double)i values are bit-for-bit the same. 
Name: sqlite3VdbeMemNumerify; Comment: ** Convert pMem so that it has type MEM_Real or MEM_Int. ** Invalidate any prior representations. ** ** Every effort is made to force the conversion, even if the input ** is a string that does not look completely like a number. Convert ** as much of the string as we can and ignore the rest. 
Name: sqlite3VdbeMemCast; Comment: ** Cast the datatype of the value in pMem according to the affinity ** "aff". Casting is different from applying affinity in that a cast ** is forced. In other words, the value is converted into the desired ** affinity even if that results in loss of data. This routine is ** used (for example) to implement the SQL "cast()" operator. 
Name: sqlite3VdbeMemInit; Comment: ** Initialize bulk memory to be a consistent Mem object. ** ** The minimum amount of initialization feasible is performed. 
Name: sqlite3VdbeMemSetNull; Comment: ** Delete any previous value and set the value stored in *pMem to NULL. ** ** This routine calls the Mem.xDel destructor to dispose of values that ** require the destructor. But it preserves the Mem.zMalloc memory allocation. ** To free all resources, use sqlite3VdbeMemRelease(), which both calls this ** routine to invoke the destructor and deallocates Mem.zMalloc. ** ** Use this routine to reset the Mem prior to insert a new value. ** ** Use sqlite3VdbeMemRelease() to complete erase the Mem prior to abandoning it. 
Name: sqlite3VdbeMemSetZeroBlob; Comment: ** Delete any previous value and set the value to be a BLOB of length ** n containing all zeros. 
Name: vdbeReleaseAndSetInt64; Comment: ** The pMem is known to contain content that needs to be destroyed prior ** to a value change. So invoke the destructor, then set the value to ** a 64-bit integer. 
Name: sqlite3VdbeMemSetInt64; Comment: ** Delete any previous value and set the value stored in *pMem to val, ** manifest type INTEGER. 
Name: sqlite3VdbeMemSetPointer; Comment: ** Set the value stored in *pMem should already be a NULL. ** Also store a pointer to go with it. 
Name: sqlite3VdbeMemSetDouble; Comment: ** Delete any previous value and set the value stored in *pMem to val, ** manifest type REAL. 
Name: sqlite3VdbeMemIsRowSet; Comment: ** Return true if the Mem holds a RowSet object. This routine is intended ** for use inside of assert() statements. 
Name: sqlite3VdbeMemSetRowSet; Comment: ** Delete any previous value and set the value of pMem to be an ** empty boolean index. ** ** Return SQLITE_OK on success and SQLITE_NOMEM if a memory allocation ** error occurs. 
Name: sqlite3VdbeMemTooBig; Comment: ** Return true if the Mem object contains a TEXT or BLOB that is ** too large - whose size exceeds SQLITE_MAX_LENGTH. 
Name: sqlite3VdbeMemAboutToChange; Comment: ** This routine prepares a memory cell for modification by breaking ** its link to a shallow copy and by marking any current shallow ** copies of this cell as invalid. ** ** This is used for testing and debugging only - to help ensure that shallow ** copies (created by OP_SCopy) are not misused. 
Name: vdbeClrCopy; Comment: ** Make an shallow copy of pFrom into pTo. Prior contents of ** pTo are freed. The pFrom->z field is not duplicated. If ** pFrom->z is used, then pTo->z points to the same thing as pFrom->z ** and flags gets srcType (either MEM_Ephem or MEM_Static). 
Name: sqlite3VdbeMemCopy; Comment: ** Make a full copy of pFrom into pTo. Prior contents of pTo are ** freed before the copy is made. 
Name: sqlite3VdbeMemMove; Comment: ** Transfer the contents of pFrom to pTo. Any existing value in pTo is ** freed. If pFrom contains ephemeral data, a copy is made. ** ** pFrom contains an SQL NULL when this routine returns. 
Name: valueToText; Comment: ** The pVal argument is known to be a value other than NULL. ** Convert it into a string with encoding enc and return a pointer ** to a zero-terminated version of that string. 
Name: sqlite3ValueText; Comment: This function is only available internally, it is not part of the** external API. It works in a similar way to sqlite3_value_text(), ** except the data returned is in the encoding specified by the second ** parameter, which must be one of SQLITE_UTF16BE, SQLITE_UTF16LE or ** SQLITE_UTF8. ** ** (2006-02-16:) The enc value can be or-ed with SQLITE_UTF16_ALIGNED. ** If that is the case, then the result must be aligned on an even byte ** boundary. 
Name: sqlite3ValueNew; Comment: ** Create a new sqlite3_value object. 
Name: valueNew; Comment: ** Allocate and return a pointer to a new sqlite3_value object. If ** the second argument to this function is NULL, the object is allocated ** by calling sqlite3ValueNew(). ** ** Otherwise, if the second argument is non-zero, then this function is ** being called indirectly by sqlite3Stat4ProbeSetValue(). If it has not ** already been allocated, allocate the UnpackedRecord structure that ** that function will return to its caller here. Then return a pointer to ** an sqlite3_value within the UnpackedRecord.a[] array. 
Name: sqlite3Stat4ProbeFree; Comment: ** Unless it is NULL, the argument must be an UnpackedRecord object returned ** by an earlier call to sqlite3Stat4ProbeSetValue(). This call deletes ** the object. 
Name: sqlite3ValueFree; Comment: ** Free an sqlite3_value object 
Name: valueBytes; Comment: ** The sqlite3ValueBytes() routine returns the number of bytes in the ** sqlite3_value object assuming that it uses the encoding "enc". ** The valueBytes() routine is a helper function. 
Name: sqlite3VdbeCreate; Comment: ** Create a new virtual database engine. 
Name: sqlite3VdbeParser; Comment: ** Return the Parse object that owns a Vdbe object. 
Name: sqlite3VdbeError; Comment: ** Change the error string stored in Vdbe.zErrMsg 
Name: sqlite3VdbeSetSql; Comment: ** Remember the SQL string for a prepared statement. 
Name: sqlite3VdbeAddDblquoteStr; Comment: ** Add a new element to the Vdbe->pDblStr list. 
Name: sqlite3VdbeSwap; Comment: ** Swap all content between two VDBE structures. 
Name: growOpArray; Comment: ** Resize the Vdbe.aOp array so that it is at least nOp elements larger ** than its current size. nOp is guaranteed to be less than or equal ** to 1024/sizeof(Op). ** ** If an out-of-memory error occurs while resizing the array, return ** SQLITE_NOMEM. In this case Vdbe.aOp and Vdbe.nOpAlloc remain ** unchanged (this is so that any opcodes already allocated can be ** correctly deallocated along with the rest of the Vdbe). 
Name: test_addop_breakpoint; Comment: This routine is just a convenient place to set a breakpoint that will** fire after each opcode is inserted and displayed using ** "PRAGMA vdbe_addoptrace=on". Parameters "pc" (program counter) and ** pOp are available to make the breakpoint conditional. ** ** Other useful labels for breakpoints include: ** test_trace_breakpoint(pc,pOp) ** sqlite3CorruptError(lineno) ** sqlite3MisuseError(lineno) ** sqlite3CantopenError(lineno) 
Name: growOp3; Comment: ** Add a new instruction to the list of instructions current in the ** VDBE. Return the address of the new instruction. ** ** Parameters: ** ** p Pointer to the VDBE ** ** op The opcode for this instruction ** ** p1, p2, p3 Operands ** ** Use the sqlite3VdbeResolveLabel() function to fix an address and ** the sqlite3VdbeChangeP4() function to change the value of the P4 ** operand. 
Name: sqlite3VdbeGoto; Comment: Generate code for an unconditional jump to instruction iDest
Name: sqlite3VdbeLoadString; Comment: Generate code to cause the string zStr to be loaded into** register iDest 
Name: sqlite3VdbeMultiLoad; Comment: ** Generate code that initializes multiple registers to string or integer ** constants. The registers begin with iDest and increase consecutively. ** One register is initialized for each characgter in zTypes[]. For each ** "s" character in zTypes[], the register is a string if the argument is ** not NULL, or OP_Null if the value is a null pointer. For each "i" character ** in zTypes[], the register is initialized to an integer. ** ** If the input string does not end with "X" then an OP_ResultRow instruction ** is generated for the values inserted. 
Name: sqlite3VdbeExplainParent; Comment: ** Return the address of the current EXPLAIN QUERY PLAN baseline. ** 0 means "none". 
Name: sqlite3VdbeExplain; Comment: ** Add a new OP_Explain opcode. ** ** If the bPush flag is true, then make this opcode the parent for ** subsequent Explains until sqlite3VdbeExplainPop() is called. 
Name: sqlite3VdbeExplainPop; Comment: ** Pop the EXPLAIN QUERY PLAN stack one level. 
Name: sqlite3VdbeAddParseSchemaOp; Comment: ** Add an OP_ParseSchema opcode. This routine is broken out from ** sqlite3VdbeAddOp4() since it needs to also needs to mark all btrees ** as having been used. ** ** The zWhere string must have been obtained from sqlite3_malloc(). ** This routine will take ownership of the allocated memory. 
Name: sqlite3VdbeEndCoroutine; Comment: Insert the end of a co-routine
Name: sqlite3VdbeMakeLabel; Comment: ** Create a new symbolic label for an instruction that has yet to be ** coded. The symbolic label is really just a negative number. The ** label can be used as the P2 value of an operation. Later, when ** the label is resolved to a specific address, the VDBE will scan ** through its operation list and change all values of P2 which match ** the label into the resolved address. ** ** The VDBE knows that a P2 value is a label because labels are ** always negative and P2 values are suppose to be non-negative. ** Hence, a negative P2 value is a label that has yet to be resolved. ** (Later:) This is only true for opcodes that have the OPFLG_JUMP ** property. ** ** Variable usage notes: ** ** Parse.aLabel[x] Stores the address that the x-th label resolves ** into. For testing (SQLITE_DEBUG), unresolved ** labels stores -1, but that is not required. ** Parse.nLabelAlloc Number of slots allocated to Parse.aLabel[] ** Parse.nLabel The *negative* of the number of labels that have ** been issued. The negative is stored because ** that gives a performance improvement over storing ** the equivalent positive value. 
Name: resizeResolveLabel; Comment: ** Resolve label "x" to be the address of the next instruction to ** be inserted. The parameter "x" must have been obtained from ** a prior call to sqlite3VdbeMakeLabel(). 
Name: sqlite3VdbeRunOnlyOnce; Comment: ** Mark the VDBE as one that can only be run one time. 
Name: sqlite3VdbeReusable; Comment: ** Mark the VDBE as one that can only be run multiple times. 
Name: sqlite3VdbeIncrWriteCounter; Comment: ** Increment the nWrite counter in the VDBE if the cursor is not an ** ephemeral cursor, or if the cursor argument is NULL. 
Name: sqlite3VdbeAssertAbortable; Comment: ** Assert if an Abort at this point in time might result in a corrupt ** database. 
Name: resolveP2Values; Comment: ** This routine is called after all opcodes have been inserted. It loops ** through all the opcodes and fixes up some details. ** ** (1) For each jump instruction with a negative P2 value (a label) ** resolve the P2 value to an actual address. ** ** (2) Compute the maximum number of arguments used by any SQL function ** and store that value in *pMaxFuncArgs. ** ** (3) Update the Vdbe.readOnly and Vdbe.bIsReader flags to accurately ** indicate what the prepared statement actually does. ** ** (4) Initialize the p4.xAdvance pointer on opcodes that use it. ** ** (5) Reclaim the memory allocated for storing labels. ** ** This routine will only function correctly if the mkopcodeh.tcl generator ** script numbers the opcodes correctly. Changes to this routine must be ** coordinated with changes to mkopcodeh.tcl. 
Name: sqlite3VdbeCurrentAddr; Comment: ** Return the address of the next instruction to be inserted. 
Name: sqlite3VdbeTakeOpArray; Comment: ** This function returns a pointer to the array of opcodes associated with ** the Vdbe passed as the first argument. It is the callers responsibility ** to arrange for the returned array to be eventually freed using the ** vdbeFreeOpArray() function. ** ** Before returning, *pnOp is set to the number of entries in the returned ** array. Also, *pnMaxArg is set to the larger of its current value and ** the number of entries in the Vdbe.apArg[] array required to execute the ** returned program. 
Name: sqlite3VdbeChangeOpcode; Comment: ** Change the value of the opcode, or P1, P2, P3, or P5 operands ** for a specific instruction. 
Name: sqlite3VdbeJumpHere; Comment: ** Change the P2 operand of instruction addr so that it points to ** the address of the next instruction to be coded. 
Name: sqlite3VdbeJumpHereOrPopInst; Comment: ** Change the P2 operand of the jump instruction at addr so that ** the jump lands on the next opcode. Or if the jump instruction was ** the previous opcode (and is thus a no-op) then simply back up ** the next instruction counter by one slot so that the jump is ** overwritten by the next inserted opcode. ** ** This routine is an optimization of sqlite3VdbeJumpHere() that ** strives to omit useless byte-code like this: ** ** 7 Once 0 8 0 ** 8 ... 
Name: freeEphemeralFunction; Comment: ** If the input FuncDef structure is ephemeral, then free it. If ** the FuncDef is not ephermal, then do nothing. 
Name: freeP4Mem; Comment: ** Delete a P4 value if necessary. 
Name: vdbeFreeOpArray; Comment: ** Free the space allocated for aOp and any p4 values allocated for the ** opcodes contained within. If aOp is not NULL it is assumed to contain ** nOp entries. 
Name: sqlite3VdbeLinkSubProgram; Comment: ** Link the SubProgram object passed as the second argument into the linked ** list at Vdbe.pSubProgram. This list is used to delete all sub-program ** objects when the VM is no longer required. 
Name: sqlite3VdbeHasSubProgram; Comment: ** Return true if the given Vdbe has any SubPrograms. 
Name: sqlite3VdbeChangeToNoop; Comment: ** Change the opcode at addr into OP_Noop 
Name: sqlite3VdbeDeletePriorOpcode; Comment: ** If the last opcode is "op" and it is not a jump destination, ** then remove it. Return true if and only if an opcode was removed. 
Name: vdbeChangeP4Full; Comment: ** Change the value of the P4 operand for a specific instruction. ** This routine is useful when a large program is loaded from a ** static array using sqlite3VdbeAddOpList but we want to make a ** few minor changes to the program. ** ** If n>=0 then the P4 operand is dynamic, meaning that a copy of ** the string is made into memory obtained from sqlite3_malloc(). ** A value of n==0 means copy bytes of zP4 up to and including the ** first null byte. If n>0 then copy n+1 bytes of zP4. ** ** Other values of n (P4_STATIC, P4_COLLSEQ etc.) indicate that zP4 points ** to a string or structure that is guaranteed to exist for the lifetime of ** the Vdbe. In these cases we can just copy the pointer. ** ** If addr<0 then change P4 on the most recently inserted instruction. 
Name: sqlite3VdbeAppendP4; Comment: ** Change the P4 operand of the most recently coded instruction ** to the value defined by the arguments. This is a high-speed ** version of sqlite3VdbeChangeP4(). ** ** The P4 operand must not have been previously defined. And the new ** P4 must not be P4_INT32. Use sqlite3VdbeChangeP4() in either of ** those cases. 
Name: sqlite3VdbeSetP4KeyInfo; Comment: ** Set the P4 on the most recently added opcode to the KeyInfo for the ** index given. 
Name: vdbeVComment; Comment: ** Change the comment on the most recently coded instruction. Or ** insert a No-op and add the comment to that new instruction. This ** makes the code easier to read during debugging. None of this happens ** in a production build. 
Name: sqlite3VdbeSetLineNumber; Comment: ** Set the value if the iSrcLine field for the previously coded instruction. 
Name: sqlite3VdbeGetOp; Comment: ** Return the opcode for a given address. If the address is -1, then ** return the most recently inserted opcode. ** ** If a memory allocation error has occurred prior to the calling of this ** routine, then a pointer to a dummy VdbeOp will be returned. That opcode ** is readable but not writable, though it is cast to a writable value. ** The return of a dummy opcode allows the call to continue functioning ** after an OOM fault without having to check to see if the return from ** this routine is a valid pointer. But because the dummy.opcode is 0, ** dummy will never be written to. This is verified by code inspection and ** by running with Valgrind. 
Name: translateP; Comment: ** Return an integer value for one of the parameters to the opcode pOp ** determined by character c. 
Name: displayP4Expr; Comment: ** Translate the P4.pExpr value for an OP_CursorHint opcode into text ** that can be displayed in the P4 column of EXPLAIN output. 
Name: sqlite3VdbeDisplayP4; Comment: ** Compute a string that describes the P4 parameter for an opcode. ** Use zTemp for any required temporary buffer space. 
Name: sqlite3VdbeUsesBtree; Comment: ** Declare to the Vdbe that the BTree object at db->aDb[i] is used. ** ** The prepared statements need to know in advance the complete set of ** attached databases that will be use. A mask of these databases ** is maintained in p->btreeMask. The p->lockMask value is the subset of ** p->btreeMask of databases that will require a lock. 
Name: sqlite3VdbeEnter; Comment: ** If SQLite is compiled to support shared-cache mode and to be threadsafe, ** this routine obtains the mutex associated with each BtShared structure ** that may be accessed by the VM passed as an argument. In doing so it also ** sets the BtShared.db member of each of the BtShared structures, ensuring ** that the correct busy-handler callback is invoked if required. ** ** If SQLite is not threadsafe but does support shared-cache mode, then ** sqlite3BtreeEnter() is invoked to set the BtShared.db variables ** of all of BtShared structures accessible via the database handle ** associated with the VM. ** ** If SQLite is not threadsafe and does not support shared-cache mode, this ** function is a no-op. ** ** The p->btreeMask field is a bitmask of all btrees that the prepared ** statement p will ever use. Let N be the number of bits in p->btreeMask ** corresponding to btrees that use shared cache. Then the runtime of ** this routine is N*N. But as N is rarely more than 1, this should not ** be a problem. 
Name: vdbeLeave; Comment: ** Unlock all of the btrees previously locked by a call to sqlite3VdbeEnter(). 
Name: sqlite3VdbePrintOp; Comment: ** Print a single opcode. This routine is used for debugging only. 
Name: initMemArray; Comment: ** Initialize an array of N Mem element. 
Name: releaseMemArray; Comment: ** Release an array of N Mem elements 
Name: sqlite3VdbeFrameIsValid; Comment: ** Verify that pFrame is a valid VdbeFrame pointer. Return true if it is ** and false if something is wrong. ** ** This routine is intended for use inside of assert() statements only. 
Name: sqlite3VdbeFrameMemDel; Comment: ** This is a destructor on a Mem object (which is really an sqlite3_value) ** that deletes the Frame object that is attached to it as a blob. ** ** This routine does not delete the Frame right away. It merely adds the ** frame to a list of frames to be deleted when the Vdbe halts. 
Name: sqlite3VdbeFrameDelete; Comment: ** Delete a VdbeFrame object and its contents. VdbeFrame objects are ** allocated by the OP_Program opcode in sqlite3VdbeExec(). 
Name: sqlite3VdbePrintSql; Comment: ** Print the SQL that was used to generate a VDBE program. 
Name: sqlite3VdbeIOTraceSql; Comment: ** Print an IOTRACE message showing SQL content. 
Name: sqlite3VdbeRewind; Comment: ** Rewind the VDBE back to the beginning in preparation for ** running it. 
Name: sqlite3VdbeFreeCursor; Comment: ** Close a VDBE cursor and release all the resources that cursor ** happens to hold. 
Name: closeCursorsInFrame; Comment: ** Close all cursors in the current frame. 
Name: sqlite3VdbeFrameRestore; Comment: ** Copy the values stored in the VdbeFrame structure to its Vdbe. This ** is used, for example, when a trigger sub-program is halted to restore ** control to the main program. 
Name: closeAllCursors; Comment: ** Close all cursors. ** ** Also release any dynamic memory held by the VM in the Vdbe.aMem memory ** cell array. This is necessary as the memory cell array may contain ** pointers to VdbeFrame objects, which may in turn contain pointers to ** open cursors. 
Name: sqlite3VdbeSetNumCols; Comment: ** Set the number of result columns that will be returned by this SQL ** statement. This is now set at compile time, rather than during ** execution of the vdbe program so that sqlite3_column_count() can ** be called on an SQL statement before sqlite3_step(). 
Name: vdbeCommit; Comment: ** A read or write transaction may or may not be active on database handle ** db. If a transaction is active, commit it. If there is a ** write-transaction spanning more than one database file, this routine ** takes care of the super-journal trickery. 
Name: vdbeCloseStatement; Comment: ** If the Vdbe passed as the first argument opened a statement-transaction, ** close it now. Argument eOp must be either SAVEPOINT_ROLLBACK or ** SAVEPOINT_RELEASE. If it is SAVEPOINT_ROLLBACK, then the statement ** transaction is rolled back. If eOp is SAVEPOINT_RELEASE, then the ** statement transaction is committed. ** ** If an IO error occurs, an SQLITE_IOERR_XXX error code is returned. ** Otherwise SQLITE_OK. 
Name: sqlite3VdbeHalt; Comment: ** This routine is called the when a VDBE tries to halt. If the VDBE ** has made changes and is in autocommit mode, then commit those ** changes. If a rollback is needed, then do the rollback. ** ** This routine is the only way to move the state of a VM from ** SQLITE_MAGIC_RUN to SQLITE_MAGIC_HALT. It is harmless to ** call this on a VM that is in the SQLITE_MAGIC_HALT state. ** ** Return an error code. If the commit could not complete because of ** lock contention, return SQLITE_BUSY. If SQLITE_BUSY is returned, it ** means the close did not happen and needs to be repeated. 
Name: sqlite3VdbeResetStepResult; Comment: ** Each VDBE holds the result of the most recent sqlite3_step() call ** in p->rc. This routine sets that result back to SQLITE_OK. 
Name: sqlite3VdbeTransferError; Comment: ** Copy the error code and error message belonging to the VDBE passed ** as the first argument to its database handle (so that they will be ** returned by calls to sqlite3_errcode() and sqlite3_errmsg()). ** ** This function does not clear the VDBE error code or message, just ** copies them to the database handle. 
Name: vdbeInvokeSqllog; Comment: ** If an SQLITE_CONFIG_SQLLOG hook is registered and the VM has been run, ** invoke it. 
Name: sqlite3VdbeReset; Comment: ** Clean up a VDBE after execution but do not delete the VDBE just yet. ** Write any error messages into *pzErrMsg. Return the result code. ** ** After this routine is run, the VDBE should be ready to be executed ** again. ** ** To look at it another way, this routine resets the state of the ** virtual machine from VDBE_MAGIC_RUN or VDBE_MAGIC_HALT back to ** VDBE_MAGIC_INIT. 
Name: sqlite3VdbeFinalize; Comment: ** Clean up and delete a VDBE after execution. Return an integer which is ** the result code. Write any error message text into *pzErrMsg. 
Name: sqlite3VdbeDeleteAuxData; Comment: ** If parameter iOp is less than zero, then invoke the destructor for ** all auxiliary data pointers currently cached by the VM passed as ** the first argument. ** ** Or, if iOp is greater than or equal to zero, then the destructor is ** only invoked for those auxiliary data pointers created by the user ** function invoked by the OP_Function opcode at instruction iOp of ** VM pVdbe, and only then if: ** ** the associated function parameter is the 32nd or later (counting ** from left to right), or ** ** the corresponding bit in argument mask is clear (where the first ** function parameter corresponds to bit 0 etc.). 
Name: sqlite3VdbeClearObject; Comment: ** Free all memory associated with the Vdbe passed as the second argument, ** except for object itself, which is preserved. ** ** The difference between this function and sqlite3VdbeDelete() is that ** VdbeDelete() also unlinks the Vdbe from the list of VMs associated with ** the database connection and frees the object itself. 
Name: sqlite3VdbeDelete; Comment: ** Delete an entire VDBE. 
Name: sqlite3VdbeFinishMoveto; Comment: ** The cursor "p" has a pending seek operation that has not yet been ** carried out. Seek the cursor now. If an error occurs, return ** the appropriate error code. 
Name: handleMovedCursor; Comment: ** Something has moved cursor "p" out of place. Maybe the row it was ** pointed to was deleted out from under it. Or maybe the btree was ** rebalanced. Whatever the cause, try to restore "p" to the place it ** is supposed to be pointing. If the row was deleted out from under the ** cursor, set the cursor to point to a NULL row. 
Name: sqlite3VdbeCursorRestore; Comment: ** Check to ensure that the cursor is valid. Restore the cursor ** if need be. Return any I/O error from the restore operation. 
Name: sqlite3VdbeCursorMoveto; Comment: ** Make sure the cursor p is ready to read or write the row to which it ** was last positioned. Return an error code if an OOM fault or I/O error ** prevents us from positioning the cursor to its correct position. ** ** If a MoveTo operation is pending on the given cursor, then do that ** MoveTo now. If no move is pending, check to see if the row has been ** deleted out from under the cursor and if it has, mark the row as ** a NULL row. ** ** If the cursor is already pointing to the correct row and that row has ** not been deleted out from under the cursor, then this routine is a no-op. 
Name: sqlite3VdbeSerialType; Comment: ** Return the serial-type for the value stored in pMem. ** ** This routine might convert a large MEM_IntReal value into MEM_Real. ** ** 2019-07-11: The primary user of this subroutine was the OP_MakeRecord ** opcode in the byte-code engine. But by moving this routine in-line, we ** can omit some redundant tests and make that opcode a lot faster. So ** this routine is now only used by the STAT3 logic and STAT3 support has ** ended. The code is kept here for historical reference only. 
Name: sqlite3VdbeSerialTypeLen; Comment: ** Return the length of the data corresponding to the supplied serial-type. 
Name: sqlite3VdbeSerialPut; Comment: ** Write the serialized data blob for the value stored in pMem into ** buf. It is assumed that the caller has allocated sufficient space. ** Return the number of bytes written. ** ** nBuf is the amount of space left in buf[]. The caller is responsible ** for allocating enough space to buf[] to hold the entire field, exclusive ** of the pMem->u.nZero bytes for a MEM_Zero value. ** ** Return the number of bytes actually written into buf[]. The number ** of bytes in the zero-filled tail is included in the return value only ** if those bytes were zeroed in buf[]. 
Name: isAllZero; Comment: ** The input pBlob is guaranteed to be a Blob that is not marked ** with MEM_Zero. Return true if it could be a zero-blob. 
Name: sqlite3BlobCompare; Comment: ** Compare two blobs. Return negative, zero, or positive if the first ** is less than, equal to, or greater than the second, respectively. ** If one blob is a prefix of the other, then the shorter is the lessor. 
Name: sqlite3IntFloatCompare; Comment: ** Do a comparison between a 64-bit signed integer and a 64-bit floating-point ** number. Return negative, zero, or positive if the first (i64) is less than, ** equal to, or greater than the second (double). 
Name: sqlite3MemCompare; Comment: ** Compare the values contained by the two memory cells, returning ** negative, zero or positive if pMem1 is less than, equal to, or greater ** than pMem2. Sorting order is NULL's first, followed by numbers (integers ** and reals) sorted numerically, followed by text ordered by the collating ** sequence pColl and finally blob's ordered by memcmp(). ** ** Two NULL values are considered equal by this function. 
Name: vdbeRecordDecodeInt; Comment: ** The first argument passed to this function is a serial-type that ** corresponds to an integer - all values between 1 and 9 inclusive ** except 7. The second points to a buffer containing an integer value ** serialized according to serial_type. This function deserializes ** and returns the value. 
Name: sqlite3VdbeFindCompare; Comment: ** Return a pointer to an sqlite3VdbeRecordCompare() compatible function ** suitable for comparing serialized records to the unpacked record passed ** as the only argument. 
Name: sqlite3VdbeIdxRowid; Comment: ** pCur points at an index entry created using the OP_MakeRecord opcode. ** Read the rowid (the last field in the record) and store it in *rowid. ** Return SQLITE_OK if everything works, or an error code otherwise. ** ** pCur might be pointing to text obtained from a corrupt database file. ** So the content cannot be trusted. Do appropriate checks on the content. 
Name: sqlite3VdbeSetChanges; Comment: ** This routine sets the value to be returned by subsequent calls to ** sqlite3_changes() on the database handle 'db'. 
Name: sqlite3VdbeCountChanges; Comment: ** Set a flag in the vdbe to update the change counter when it is finalised ** or reset. 
Name: sqlite3ExpirePreparedStatements; Comment: ** Mark every prepared statement associated with a database connection ** as expired. ** ** An expired statement means that recompilation of the statement is ** recommend. Statements expire when things happen that make their ** programs obsolete. Removing user-defined functions or collating ** sequences, or changing an authorization function are the types of ** things that make prepared statements obsolete. ** ** If iCode is 1, then expiration is advisory. The statement should ** be reprepared before being restarted, but if it is already running ** it is allowed to run to completion. ** ** Internally, this function just sets the Vdbe.expired flag on all ** prepared statements. The flag is set to 1 for an immediate expiration ** and set to 2 for an advisory expiration. 
Name: sqlite3VdbeDb; Comment: ** Return the database associated with the Vdbe. 
Name: sqlite3VdbePrepareFlags; Comment: ** Return the SQLITE_PREPARE flags for a Vdbe. 
Name: sqlite3VdbeGetBoundValue; Comment: ** Return a pointer to an sqlite3_value structure containing the value bound ** parameter iVar of VM v. Except, if the value is an SQL NULL, return ** 0 instead. Unless it is NULL, apply affinity aff (one of the SQLITE_AFF_* ** constants) to the value before returning it. ** ** The returned value must be freed by the caller using sqlite3ValueFree(). 
Name: sqlite3VdbeSetVarmask; Comment: ** Configure SQL variable iVar so that binding a new value to it signals ** to sqlite3_reoptimize() that re-preparing the statement may result ** in a better query plan. 
Name: sqlite3NotPureFunc; Comment: ** Cause a function to throw an error if it was call from OP_PureFunc ** rather than OP_Function. ** ** OP_PureFunc means that the function must be deterministic, and should ** throw an error if it is given inputs that would make it non-deterministic. ** This routine is invoked by date/time functions that use non-deterministic ** features such as 'now'. 
Name: sqlite3VtabImportErrmsg; Comment: ** Transfer error message text from an sqlite3_vtab.zErrMsg (text stored ** in memory obtained from sqlite3_malloc) into a Vdbe.zErrMsg (text stored ** in memory obtained from sqlite3DbMalloc). 
Name: vdbeFreeUnpacked; Comment: ** If the second argument is not NULL, release any allocations associated ** with the memory cells in the p->aMem[] array. Also free the UnpackedRecord ** structure itself, using sqlite3DbFree(). ** ** This function is used to free UnpackedRecord structures allocated by ** the vdbeUnpackRecord() function found in vdbeapi.c. 
Name: sqlite3_expired; Comment: ** Return TRUE (non-zero) of the statement supplied as an argument needs ** to be recompiled. A statement needs to be recompiled whenever the ** execution environment changes in a way that would alter the program ** that sqlite3_prepare() generates. For example, if new functions or ** collating sequences are registered or if an authorizer function is ** added or changed. 
Name: vdbeSafety; Comment: ** Check on a Vdbe to make sure it has not been finalized. Log ** an error and return true if it has been finalized (or is otherwise ** invalid). Return false if it is ok. 
Name: invokeProfileCallback; Comment: ** Invoke the profile callback. This routine is only called if we already ** know that the profile callback is defined and needs to be invoked. 
Name: sqlite3_finalize; Comment: ** The following routine destroys a virtual machine that is created by ** the sqlite3_compile() routine. The integer returned is an SQLITE_ ** success/failure code that describes the result of executing the virtual ** machine. ** ** This routine sets the error code and string returned by ** sqlite3_errcode(), sqlite3_errmsg() and sqlite3_errmsg16(). 
Name: sqlite3_reset; Comment: ** Terminate the current execution of an SQL statement and reset it ** back to its starting state so that it can be reused. A success code from ** the prior execution is returned. ** ** This routine sets the error code and string returned by ** sqlite3_errcode(), sqlite3_errmsg() and sqlite3_errmsg16(). 
Name: sqlite3_clear_bindings; Comment: ** Set all the parameters in the compiled SQL statement to NULL. 
Name: sqlite3_value_blob; Comment: *************************** sqlite3_value_ ********************************* The following routines extract information from a Mem or sqlite3_value ** structure. 
Name: sqlite3_value_type; Comment: EVIDENCE-OF: R-12793-43283 Every value in SQLite has one of five** fundamental datatypes: 64-bit signed integer 64-bit IEEE floating ** point number string BLOB NULL 
Name: sqlite3_value_nochange; Comment: Return true if a parameter to xUpdate represents an unchanged column 
Name: sqlite3_value_frombind; Comment: Return true if a parameter value originated from an sqlite3_bind() 
Name: sqlite3_value_dup; Comment: Make a copy of an sqlite3_value object
Name: sqlite3_value_free; Comment: Destroy an sqlite3_value object previously obtained from** sqlite3_value_dup(). 
Name: sqlite3_result_error_toobig; Comment: Force an SQLITE_TOOBIG error. 
Name: sqlite3_result_error_nomem; Comment: An SQLITE_NOMEM error. 
Name: sqlite3ResultIntReal; Comment: Force the INT64 value currently stored as the result to be** a MEM_IntReal value. See the SQLITE_TESTCTRL_RESULT_INTREAL ** test-control. 
Name: doWalCallbacks; Comment: ** This function is called after a transaction has been committed. It ** invokes callbacks registered with sqlite3_wal_hook() as required. 
Name: sqlite3Step; Comment: ** Execute the statement pStmt, either until a row of data is ready, the ** statement is completely executed or an error occurs. ** ** This routine implements the bulk of the logic behind the sqlite_step() ** API. The only thing omitted is the automatic recompile if a ** schema change has occurred. That detail is handled by the ** outer sqlite3_step() wrapper procedure. 
Name: sqlite3_step; Comment: ** This is the top-level implementation of sqlite3_step(). Call ** sqlite3Step() to do most of the work. If a schema error occurs, ** call sqlite3Reprepare() and try again. 
Name: sqlite3_user_data; Comment: ** Extract the user data from a sqlite3_context structure and return a ** pointer to it. 
Name: sqlite3_context_db_handle; Comment: ** Extract the user data from a sqlite3_context structure and return a ** pointer to it. ** ** IMPLEMENTATION-OF: R-46798-50301 The sqlite3_context_db_handle() interface ** returns a copy of the pointer to the database connection (the 1st ** parameter) of the sqlite3_create_function() and ** sqlite3_create_function16() routines that originally registered the ** application defined function. 
Name: sqlite3_vtab_nochange; Comment: ** If this routine is invoked from within an xColumn method of a virtual ** table, then it returns true if and only if the the call is during an ** UPDATE operation and the value of the column will not be modified ** by the UPDATE. ** ** If this routine is called from any context other than within the ** xColumn method of a virtual table, then the return value is meaningless ** and arbitrary. ** ** Virtual table implements might use this routine to optimize their ** performance by substituting a NULL result, or some other light-weight ** value, as a signal to the xUpdate routine that the column is unchanged. 
Name: sqlite3StmtCurrentTime; Comment: ** Return the current time for a statement. If the current time ** is requested more than once within the same run of a single prepared ** statement, the exact same time is returned for each invocation regardless ** of the amount of time that elapses between invocations. In other words, ** the time returned is always the time of the first call. 
Name: createAggContext; Comment: ** Create a new aggregate context for p and return a pointer to ** its pMem->z element. 
Name: sqlite3_aggregate_context; Comment: ** Allocate or return the aggregate context for a user function. A new ** context is allocated on the first call. Subsequent calls return the ** same context that was returned on prior calls. 
Name: sqlite3_get_auxdata; Comment: ** Return the auxiliary data pointer, if any, for the iArg'th argument to ** the user-function defined by pCtx. ** ** The left-most argument is 0. ** ** Undocumented behavior: If iArg is negative then access a cache of ** auxiliary data pointers that is available to all functions within a ** single prepared statement. The iArg values must match. 
Name: sqlite3_set_auxdata; Comment: ** Set the auxiliary data pointer and delete function, for the iArg'th ** argument to the user-function defined by pCtx. Any previous value is ** deleted by calling the delete function specified when it was set. ** ** The left-most argument is 0. ** ** Undocumented behavior: If iArg is negative then make the data available ** to all functions within the current prepared statement using iArg as an ** access code. 
Name: sqlite3_aggregate_count; Comment: ** Return the number of times the Step function of an aggregate has been ** called. ** ** This function is deprecated. Do not use it for new code. It is ** provide only to avoid breaking legacy code. New aggregate function ** implementations should keep their own counts within their aggregate ** context. 
Name: sqlite3_column_count; Comment: ** Return the number of columns in the result set for the statement pStmt. 
Name: sqlite3_data_count; Comment: ** Return the number of values available from the current row of the ** currently executing statement pStmt. 
Name: columnNullValue; Comment: ** Return a pointer to static memory containing an SQL NULL value. 
Name: columnMem; Comment: ** Check to see if column iCol of the given statement is valid. If ** it is, return a pointer to the Mem for the value of that column. ** If iCol is not valid, return a pointer to a Mem which has a value ** of NULL. 
Name: columnMallocFailure; Comment: ** This function is called after invoking an sqlite3_value_XXX function on a ** column value (i.e. a value returned by evaluating an SQL expression in the ** select list of a SELECT statement) that may cause a malloc() failure. If ** malloc() has failed, the threads mallocFailed flag is cleared and the result ** code of statement pStmt set to SQLITE_NOMEM. ** ** Specifically, this is called from within: ** ** sqlite3_column_int() ** sqlite3_column_int64() ** sqlite3_column_text() ** sqlite3_column_text16() ** sqlite3_column_real() ** sqlite3_column_bytes() ** sqlite3_column_bytes16() ** sqiite3_column_blob() 
Name: sqlite3_column_blob; Comment: *************************** sqlite3_column_ ********************************* The following routines are used to access elements of the current row ** in the result set. 
Name: sqlite3_column_name; Comment: ** Return the name of the Nth column of the result set returned by SQL ** statement pStmt. 
Name: sqlite3_column_decltype; Comment: ** Return the column declaration type (if applicable) of the 'i'th column ** of the result set of SQL statement pStmt. 
Name: sqlite3_column_database_name; Comment: ** Return the name of the database from which a result column derives. ** NULL is returned if the result column is an expression or constant or ** anything else which is not an unambiguous reference to a database column. 
Name: sqlite3_column_table_name; Comment: ** Return the name of the table from which a result column derives. ** NULL is returned if the result column is an expression or constant or ** anything else which is not an unambiguous reference to a database column. 
Name: sqlite3_column_origin_name; Comment: ** Return the name of the table column from which a result column derives. ** NULL is returned if the result column is an expression or constant or ** anything else which is not an unambiguous reference to a database column. 
Name: vdbeUnbind; Comment: ** Unbind the value bound to variable i in virtual machine p. This is the ** the same as binding a NULL value to the column. If the "i" parameter is ** out of range, then SQLITE_RANGE is returned. Othewise SQLITE_OK. ** ** A successful evaluation of this routine acquires the mutex on p. ** the mutex is released if any kind of error occurs. ** ** The error code stored in database p->db is overwritten with the return ** value in any case. 
Name: sqlite3_bind_blob; Comment: ** Bind a blob value to an SQL statement variable. 
Name: sqlite3_bind_parameter_count; Comment: ** Return the number of wildcards that can be potentially bound to. ** This routine is added to support DBD::SQLite. 
Name: sqlite3_bind_parameter_name; Comment: ** Return the name of a wildcard parameter. Return NULL if the index ** is out of range or if the wildcard is unnamed. ** ** The result is always UTF-8. 
Name: sqlite3VdbeParameterIndex; Comment: ** Given a wildcard parameter name, return the index of the variable ** with that name. If there is no variable with the given name, ** return 0. 
Name: sqlite3TransferBindings; Comment: ** Transfer all bindings from the first statement over to the second. 
Name: sqlite3_transfer_bindings; Comment: ** Deprecated external interface. Internal/core SQLite code ** should call sqlite3TransferBindings. ** ** It is misuse to call this routine with statements from different ** database connections. But as this is a deprecated interface, we ** will not bother to check for that condition. ** ** If the two statements contain a different number of bindings, then ** an SQLITE_ERROR is returned. Nothing else can go wrong, so otherwise ** SQLITE_OK is returned. 
Name: sqlite3_db_handle; Comment: ** Return the sqlite3* database handle to which the prepared statement given ** in the argument belongs. This is the same database handle that was ** the first argument to the sqlite3_prepare() that was used to create ** the statement in the first place. 
Name: sqlite3_stmt_readonly; Comment: ** Return true if the prepared statement is guaranteed to not modify the ** database. 
Name: sqlite3_stmt_isexplain; Comment: ** Return 1 if the statement is an EXPLAIN and return 2 if the ** statement is an EXPLAIN QUERY PLAN 
Name: sqlite3_stmt_busy; Comment: ** Return true if the prepared statement is in need of being reset. 
Name: sqlite3_next_stmt; Comment: ** Return a pointer to the next prepared statement after pStmt associated ** with database connection pDb. If pStmt is NULL, return the first ** prepared statement for the database connection. Return NULL if there ** are no more. 
Name: sqlite3_stmt_status; Comment: ** Return the value of a status counter for a prepared statement 
Name: sqlite3_sql; Comment: ** Return the SQL associated with a prepared statement 
Name: sqlite3_expanded_sql; Comment: ** Return the SQL associated with a prepared statement with ** bound parameters expanded. Space to hold the returned string is ** obtained from sqlite3_malloc(). The caller is responsible for ** freeing the returned string by passing it to sqlite3_free(). ** ** The SQLITE_TRACE_SIZE_LIMIT puts an upper bound on the size of ** expanded bound parameters. 
Name: sqlite3_normalized_sql; Comment: ** Return the normalized SQL associated with a prepared statement. 
Name: vdbeUnpackRecord; Comment: ** Allocate and populate an UnpackedRecord structure based on the serialized ** record in nKey/pKey. Return a pointer to the new UnpackedRecord structure ** if successful, or a NULL pointer if an OOM error is encountered. 
Name: sqlite3_preupdate_old; Comment: ** This function is called from within a pre-update callback to retrieve ** a field of the row currently being updated or deleted. 
Name: sqlite3_preupdate_count; Comment: ** This function is called from within a pre-update callback to retrieve ** the number of columns in the row being updated, deleted or inserted. 
Name: sqlite3_preupdate_depth; Comment: ** This function is designed to be called from within a pre-update callback ** only. It returns zero if the change that caused the callback was made ** immediately by a user SQL statement. Or, if the change was made by a ** trigger program, it returns the number of trigger programs currently ** on the stack (1 for a top-level trigger, 2 for a trigger fired by a ** top-level trigger etc.). ** ** For the purposes of the previous paragraph, a foreign key CASCADE, SET NULL ** or SET DEFAULT action is considered a trigger. 
Name: sqlite3_preupdate_new; Comment: ** This function is called from within a pre-update callback to retrieve ** a field of the row currently being updated or inserted. 
Name: sqlite3_stmt_scanstatus_reset; Comment: ** Zero all counters associated with the sqlite3_stmt_scanstatus() data. 
Name: findNextHostParameter; Comment: ** zSql is a zero-terminated string of UTF-8 SQL text. Return the number of ** bytes in this text up to but excluding the first character in ** a host parameter. If the text contains no host parameters, return ** the total number of bytes in the text. 
Name: test_trace_breakpoint; Comment: This routine provides a convenient place to set a breakpoint during** tracing with PRAGMA vdbe_trace=on. The breakpoint fires right after ** each opcode is printed. Variables "pc" (program counter) and pOp are ** available to add conditionals to the breakpoint. GDB example: ** ** break test_trace_breakpoint if pc=22 ** ** Other useful labels for breakpoints include: ** test_addop_breakpoint(pc,pOp) ** sqlite3CorruptError(lineno) ** sqlite3MisuseError(lineno) ** sqlite3CantopenError(lineno) 
Name: alsoAnInt; Comment: ** The string in pRec is known to look like an integer and to have a ** floating point value of rValue. Return true and set *piValue to the ** integer value if the string is in range to be an integer. Otherwise, ** return false. 
Name: applyNumericAffinity; Comment: ** Try to convert a value into a numeric representation if we can ** do so without loss of information. In other words, if the string ** looks like a number, convert it into a number. If it does not ** look like a number, leave it alone. ** ** If the bTryForInt flag is true, then extra effort is made to give ** an integer representation. Strings that look like floating point ** values but which have no fractional component (example: '48.00') ** will have a MEM_Int representation when bTryForInt is true. ** ** If bTryForInt is false, then if the input string contains a decimal ** point or exponential notation, the result is only MEM_Real, even ** if there is an exact integer representation of the quantity. 
Name: sqlite3_value_numeric_type; Comment: ** Try to convert the type of a function argument or a result column ** into a numeric representation. Use either INTEGER or REAL whichever ** is appropriate. But only do the conversion if it is possible without ** loss of information and return the revised type of the argument. 
Name: sqlite3ValueApplyAffinity; Comment: ** Exported version of applyAffinity(). This one works on sqlite3_value*, ** not the internal Mem* type. 
Name: computeNumericType; Comment: ** pMem currently only holds a string type (or maybe a BLOB that we can ** interpret as a string if we want to). Compute its corresponding ** numeric type, if has one. Set the pMem->u.r and pMem->u.i fields ** accordingly. 
Name: numericType; Comment: ** Return the numeric type for pMem, either MEM_Int or MEM_Real or both or ** none. ** ** Unlike applyNumericAffinity(), this routine does not modify pMem->flags. ** But it does set pMem->u.r and pMem->u.i appropriately. 
Name: sqlite3VdbeMemPrettyPrint; Comment: ** Write a nice string representation of the contents of cell pMem ** into buffer zBuf, length nBuf. 
Name: memTracePrint; Comment: ** Print the value of a register for tracing purposes: 
Name: sqlite3VdbeRegisterDump; Comment: ** Show the values of all registers in the virtual machine. Used for ** interactive debugging. 
Name: out2PrereleaseWithClear; Comment: ** Return the register of pOp->p2 after first preparing it to be ** overwritten with an integer value. 
Name: blobSeekToRow; Comment: ** This function is used by both blob_open() and blob_reopen(). It seeks ** the b-tree cursor associated with blob handle p to point to row iRow. ** If successful, SQLITE_OK is returned and subsequent calls to ** sqlite3_blob_read() or sqlite3_blob_write() access the specified row. ** ** If an error occurs, or if the specified row does not exist or does not ** contain a value of type TEXT or BLOB in the column nominated when the ** blob handle was opened, then an error code is returned and *pzErr may ** be set to point to a buffer containing an error message. It is the ** responsibility of the caller to free the error message buffer using ** sqlite3DbFree(). ** ** If an error does occur, then the b-tree cursor is closed. All subsequent ** calls to sqlite3_blob_read(), blob_write() or blob_reopen() will ** immediately return SQLITE_ABORT. 
Name: sqlite3_blob_close; Comment: ** Close a blob handle that was previously created using ** sqlite3_blob_open(). 
Name: blobReadWrite; Comment: ** Perform a read or write operation on a blob 
Name: sqlite3_blob_read; Comment: ** Read data from a blob handle. 
Name: sqlite3_blob_write; Comment: ** Write data to a blob handle. 
Name: sqlite3_blob_bytes; Comment: ** Query a blob handle for the size of the data. ** ** The Incrblob.nByte field is fixed for the lifetime of the Incrblob ** so no mutex is required for access. 
Name: sqlite3_blob_reopen; Comment: ** Move an existing blob handle to point to a different row of the same ** database table. ** ** If an error occurs, or if the specified row does not exist or does not ** contain a blob or text value, then an error code is returned and the ** database handle error code and message set. If this happens, then all ** subsequent calls to sqlite3_blob_xxx() functions (except blob_close()) ** immediately return SQLITE_ABORT. 
Name: vdbePmaReaderClear; Comment: ** Free all memory belonging to the PmaReader object passed as the ** argument. All structure fields are set to zero before returning. 
Name: vdbePmaReadVarint; Comment: ** Read a varint from the stream of data accessed by p. Set *pnOut to ** the value read. 
Name: vdbeSorterMapFile; Comment: ** Attempt to memory map file pFile. If successful, set *pp to point to the ** new mapping and return SQLITE_OK. If the mapping is not attempted ** (because the file is too large or the VFS layer is configured not to use ** mmap), return SQLITE_OK and set *pp to NULL. ** ** Or, if an error occurs, return an SQLite error code. The final value of ** *pp is undefined in this case. 
Name: vdbePmaReaderNext; Comment: ** Advance PmaReader pReadr to the next key in its PMA. Return SQLITE_OK if ** no error occurs, or an SQLite error code if one does. 
Name: vdbeSorterRecordFree; Comment: ** Free the list of sorted records starting at pRecord. 
Name: vdbeSortSubtaskCleanup; Comment: ** Free all resources owned by the object indicated by argument pTask. All ** fields of *pTask are zeroed before returning. 
Name: vdbeSorterJoinThread; Comment: ** Join thread pTask->thread. 
Name: vdbeSorterJoinAll; Comment: ** Join all outstanding threads launched by SorterWrite() to create ** level-0 PMAs. 
Name: vdbeMergeEngineNew; Comment: ** Allocate a new MergeEngine object capable of handling up to ** nReader PmaReader inputs. ** ** nReader is automatically rounded up to the next power of two. ** nReader may not exceed SORTER_MAX_MERGE_COUNT even after rounding up. 
Name: vdbeMergeEngineFree; Comment: ** Free the MergeEngine object passed as the only argument. 
Name: vdbeIncrFree; Comment: ** Free all resources associated with the IncrMerger object indicated by ** the first argument. 
Name: sqlite3VdbeSorterReset; Comment: ** Reset a sorting cursor back to its original empty state. 
Name: sqlite3VdbeSorterClose; Comment: ** Free any cursor components allocated by sqlite3VdbeSorterXXX routines. 
Name: vdbeSorterExtendFile; Comment: ** The first argument is a file-handle open on a temporary file. The file ** is guaranteed to be nByte bytes or smaller in size. This function ** attempts to extend the file to nByte bytes in size and to ensure that ** the VFS has memory mapped it. ** ** Whether or not the file does end up memory mapped of course depends on ** the specific VFS implementation. 
Name: vdbeSortAllocUnpacked; Comment: ** If it has not already been allocated, allocate the UnpackedRecord ** structure at pTask->pUnpacked. Return SQLITE_OK if successful (or ** if no allocation was required), or SQLITE_NOMEM otherwise. 
Name: vdbeSorterGetCompare; Comment: ** Return the SorterCompare function to compare values collected by the ** sorter object passed as the only argument. 
Name: vdbeSorterSort; Comment: ** Sort the linked list of records headed at pTask->pList. Return ** SQLITE_OK if successful, or an SQLite error code (i.e. SQLITE_NOMEM) if ** an error occurs. 
Name: vdbePmaWriteBlob; Comment: ** Write nData bytes of data to the PMA. Return SQLITE_OK ** if successful, or an SQLite error code if an error occurs. 
Name: vdbePmaWriterFinish; Comment: ** Flush any buffered data to disk and clean up the PMA-writer object. ** The results of using the PMA-writer after this call are undefined. ** Return SQLITE_OK if flushing the buffered data succeeds or is not ** required. Otherwise, return an SQLite error code. ** ** Before returning, set *piEof to the offset immediately following the ** last byte written to the file. 
Name: vdbePmaWriteVarint; Comment: ** Write value iVal encoded as a varint to the PMA. Return ** SQLITE_OK if successful, or an SQLite error code if an error occurs. 
Name: vdbeSorterListToPMA; Comment: ** Write the current contents of in-memory linked-list pList to a level-0 ** PMA in the temp file belonging to sub-task pTask. Return SQLITE_OK if ** successful, or an SQLite error code otherwise. ** ** The format of a PMA is: ** ** A varint. This varint contains the total number of bytes of content ** in the PMA (not including the varint itself). ** ** One or more records packed end-to-end in order of ascending keys. ** Each record consists of a varint followed by a blob of data (the ** key). The varint is the number of bytes in the blob of data. 
Name: vdbeSorterFlushThread; Comment: ** The main routine for background threads that write level-0 PMAs. 
Name: vdbeSorterFlushPMA; Comment: ** Flush the current contents of VdbeSorter.list to a new PMA, possibly ** using a background thread. 
Name: vdbeIncrPopulate; Comment: ** Read keys from pIncr->pMerger and populate pIncr->aFile[1]. The format ** of the data stored in aFile[1] is the same as that used by regular PMAs, ** except that the number-of-bytes varint is omitted from the start. 
Name: vdbeIncrPopulateThread; Comment: ** The main routine for background threads that populate aFile[1] of ** multi-threaded IncrMerger objects. 
Name: vdbeIncrBgPopulate; Comment: ** Launch a background thread to populate aFile[1] of pIncr. 
Name: vdbeIncrSwap; Comment: ** This function is called when the PmaReader corresponding to pIncr has ** finished reading the contents of aFile[0]. Its purpose is to "refill" ** aFile[0] such that the PmaReader should start rereading it from the ** beginning. ** ** For single-threaded objects, this is accomplished by literally reading ** keys from pIncr->pMerger and repopulating aFile[0]. ** ** For multi-threaded objects, all that is required is to wait until the ** background thread is finished (if it is not already) and then swap ** aFile[0] and aFile[1] in place. If the contents of pMerger have not ** been exhausted, this function also launches a new background thread ** to populate the new aFile[1]. ** ** SQLITE_OK is returned on success, or an SQLite error code otherwise. 
Name: vdbeIncrMergerSetThreads; Comment: ** Set the "use-threads" flag on object pIncr. 
Name: vdbePmaReaderIncrMergeInit; Comment: ** The PmaReader passed as the first argument is guaranteed to be an ** incremental-reader (pReadr->pIncr!=0). This function serves to open ** and/or initialize the temp file related fields of the IncrMerge ** object at (pReadr->pIncr). ** ** If argument eMode is set to INCRINIT_NORMAL, then all PmaReaders ** in the sub-tree headed by pReadr are also initialized. Data is then ** loaded into the buffers belonging to pReadr and it is set to point to ** the first key in its range. ** ** If argument eMode is set to INCRINIT_TASK, then pReadr is guaranteed ** to be a multi-threaded PmaReader and this function is being called in a ** background thread. In this case all PmaReaders in the sub-tree are ** initialized as for INCRINIT_NORMAL and the aFile[1] buffer belonging to ** pReadr is populated. However, pReadr itself is not set up to point ** to its first key. A call to vdbePmaReaderNext() is still required to do ** that. ** ** The reason this function does not call vdbePmaReaderNext() immediately ** in the INCRINIT_TASK case is that vdbePmaReaderNext() assumes that it has ** to block on thread (pTask->thread) before accessing aFile[1]. But, since ** this entire function is being run by thread (pTask->thread), that will ** lead to the current background thread attempting to join itself. ** ** Finally, if argument eMode is set to INCRINIT_ROOT, it may be assumed ** that pReadr->pIncr is a multi-threaded IncrMerge objects, and that all ** child-trees have already been initialized using IncrInit(INCRINIT_TASK). ** In this case vdbePmaReaderNext() is called on all child PmaReaders and ** the current PmaReader set to point to the first key in its range. ** ** SQLITE_OK is returned if successful, or an SQLite error code otherwise. 
Name: vdbePmaReaderBgIncrInit; Comment: ** The main routine for vdbePmaReaderIncrMergeInit() operations run in ** background threads. 
Name: vdbePmaReaderIncrInit; Comment: ** If the PmaReader passed as the first argument is not an incremental-reader ** (if pReadr->pIncr==0), then this function is a no-op. Otherwise, it invokes ** the vdbePmaReaderIncrMergeInit() function with the parameters passed to ** this routine to initialize the incremental merge. ** ** If the IncrMerger object is multi-threaded (IncrMerger.bUseThread==1), ** then a background thread is launched to call vdbePmaReaderIncrMergeInit(). ** Or, if the IncrMerger is single threaded, the same function is called ** using the current thread. 
Name: vdbeSorterTreeDepth; Comment: ** Return the depth of a tree comprising nPMA PMAs, assuming a fanout of ** SORTER_MAX_MERGE_COUNT. The returned value does not include leaf nodes. ** ** i.e. ** ** nPMA<=16 -> TreeDepth() == 0 ** nPMA<=256 -> TreeDepth() == 1 ** nPMA<=65536 -> TreeDepth() == 2 
Name: vdbeSorterSetupMerge; Comment: ** This function is called as part of an sqlite3VdbeSorterRewind() operation ** on a sorter that has written two or more PMAs to temporary files. It sets ** up either VdbeSorter.pMerger (for single threaded sorters) or pReader ** (for multi-threaded sorters) so that it can be used to iterate through ** all records stored in the sorter. ** ** SQLITE_OK is returned if successful, or an SQLite error code otherwise. 
Name: sqlite3VdbeSorterRewind; Comment: ** Once the sorter has been populated by calls to sqlite3VdbeSorterWrite, ** this function is called to prepare for iterating through the records ** in sorted order. 
Name: sqlite3VdbeSorterNext; Comment: ** Advance to the next element in the sorter. Return value: ** ** SQLITE_OK success ** SQLITE_DONE end of data ** otherwise some kind of error. 
Name: sqlite3VdbeSorterRowkey; Comment: ** Copy the current sorter key into the memory cell pOut. 
Name: bytecodevtabConnect; Comment: ** Create a new bytecode() table-valued function. 
Name: bytecodevtabDisconnect; Comment: ** This method is the destructor for bytecodevtab objects. 
Name: bytecodevtabOpen; Comment: ** Constructor for a new bytecodevtab_cursor object. 
Name: bytecodevtabCursorClear; Comment: ** Clear all internal content from a bytecodevtab cursor. 
Name: bytecodevtabClose; Comment: ** Destructor for a bytecodevtab_cursor. 
Name: bytecodevtabNext; Comment: ** Advance a bytecodevtab_cursor to its next row of output. 
Name: bytecodevtabEof; Comment: ** Return TRUE if the cursor has been moved off of the last ** row of output. 
Name: bytecodevtabRowid; Comment: ** Return the rowid for the current row. In this implementation, the ** rowid is the same as the output value. 
Name: bytecodevtabFilter; Comment: ** Initialize a cursor. ** ** idxNum==0 means show all subprograms ** idxNum==1 means show only the main bytecode and omit subprograms. 
Name: bytecodevtabBestIndex; Comment: ** We must have a single stmt=? constraint that will be passed through ** into the xFilter method. If there is no valid stmt=? constraint, ** then return an SQLITE_CONSTRAINT error. 
Name: memjrnlFreeChunks; Comment: ** Free the list of FileChunk structures headed at MemJournal.pFirst. 
Name: memjrnlCreateFile; Comment: ** Flush the contents of memory to a real file on disk. 
Name: memjrnlTruncate; Comment: ** Truncate the file. ** ** If the journal file is already on disk, truncate it there. Or, if it ** is still in main memory but is being truncated to zero bytes in size, ** ignore 
Name: memjrnlClose; Comment: ** Close the file. 
Name: memjrnlSync; Comment: ** Sync the file. ** ** If the real file has been created, call its xSync method. Otherwise, ** syncing an in-memory journal is a no-op. 
Name: memjrnlFileSize; Comment: ** Query the size of the file in bytes. 
Name: sqlite3MemJournalOpen; Comment: ** Open an in-memory journal file. 
Name: sqlite3JournalCreate; Comment: ** If the argument p points to a MemJournal structure that is not an ** in-memory-only journal file (i.e. is one that was opened with a +ve ** nSpill parameter or as SQLITE_OPEN_MAIN_JOURNAL), and the underlying ** file has not yet been created, create it now. 
Name: sqlite3JournalIsInMemory; Comment: ** The file-handle passed as the only argument is open on a journal file. ** Return true if this "journal file" is currently stored in heap memory, ** or false otherwise. 
Name: sqlite3JournalSize; Comment: ** Return the number of bytes required to store a JournalFile that uses vfs ** pVfs to create the underlying on-disk files. 
Name: walkWindowList; Comment: ** Walk all expressions linked into the list of Window objects passed ** as the second argument. 
Name: walkExpr; Comment: ** Walk an expression tree. Invoke the callback once for each node ** of the expression, while descending. (In other words, the callback ** is invoked before visiting children.) ** ** The return value from the callback should be one of the WRC_* ** constants to specify how to proceed with the walk. ** ** WRC_Continue Continue descending down the tree. ** ** WRC_Prune Do not descend into child nodes, but allow ** the walk to continue with sibling nodes. ** ** WRC_Abort Do no more callbacks. Unwind the stack and ** return from the top-level walk call. ** ** The return value from this routine is WRC_Abort to abandon the tree walk ** and WRC_Continue to continue. 
Name: sqlite3WalkExprList; Comment: ** Call sqlite3WalkExpr() for every expression in list p or until ** an abort request is seen. 
Name: sqlite3WalkSelectExpr; Comment: ** Walk all expressions associated with SELECT statement p. Do ** not invoke the SELECT callback on p, but do (of course) invoke ** any expr callbacks and SELECT callbacks that come from subqueries. ** Return WRC_Abort or WRC_Continue. 
Name: sqlite3WalkSelect; Comment: None** ** Return WRC_Continue under normal conditions. Return WRC_Abort if ** there is an abort request. ** ** If the Walker does not have an xSelectCallback() then this routine ** is a no-op returning WRC_Continue. 
Name: sqlite3WalkerDepthIncrease; Comment: Increase the walkerDepth when entering a subquery, and** descrease when leaving the subquery. 
Name: sqlite3ExprWalkNoop; Comment: ** No-op routine for the parse-tree walker. ** ** When this routine is the Walker.xExprCallback then expression trees ** are walked without any actions being taken at each node. Presumably, ** when this routine is used for Walker.xExprCallback then ** Walker.xSelectCallback is set to do something useful for every ** subquery in the parser tree. 
Name: sqlite3SelectWalkNoop; Comment: ** No-op routine for the parse-tree walker for SELECT statements. ** subquery in the parser tree. 
Name: incrAggDepth; Comment: ** Walk the expression tree pExpr and increase the aggregate function ** depth (the Expr.op2 field) by N on every TK_AGG_FUNCTION node. ** This needs to occur when copying a TK_AGG_FUNCTION node from an ** outer query into an inner subquery. ** ** incrAggFunctionDepth(pExpr,n) is the main routine. incrAggDepth(..) ** is a helper function - a callback for the tree walker. ** ** See also the sqlite3WindowExtraAggFuncDepth() routine in window.c 
Name: nameInUsingClause; Comment: ** Return TRUE if the name zCol occurs anywhere in the USING clause. ** ** Return FALSE if the USING clause is NULL or if it does not contain ** zCol. 
Name: sqlite3MatchEName; Comment: ** Subqueries stores the original database, table and column names for their ** result sets in ExprList.a[].zSpan, in the form "DATABASE.TABLE.COLUMN". ** Check to see if the zSpan given to this routine matches the zDb, zTab, ** and zCol. If any of zDb, zTab, and zCol are NULL then those fields will ** match anything. 
Name: areDoubleQuotedStringsEnabled; Comment: ** Return TRUE if the double-quoted string mis-feature should be supported. 
Name: sqlite3ExprColUsed; Comment: ** The argument is guaranteed to be a non-NULL Expr node of type TK_COLUMN. ** return the appropriate colUsed mask. 
Name: sqlite3CreateColumnExpr; Comment: ** Allocate and return a pointer to an expression to load the column iCol ** from datasource iSrc in SrcList pSrc. 
Name: exprProbability; Comment: ** Expression p should encode a floating point value between 1.0 and 0.0. ** Return 1024 times this value. Or return -1 if p is not a floating point ** value between 1.0 and 0.0. 
Name: resolveExprStep; Comment: ** This routine is callback for sqlite3WalkExpr(). ** ** Resolve symbolic names into TK_COLUMN operators for the current ** node in the expression tree. Return 0 to continue the search down ** the tree or 2 to abort the tree walk. ** ** This routine also does error checking and name resolution for ** function names. The operator for aggregate functions is changed ** to TK_AGG_FUNCTION. 
Name: resolveRemoveWindowsCb; Comment: ** Walker callback for windowRemoveExprFromSelect(). 
Name: windowRemoveExprFromSelect; Comment: ** Remove any Window objects owned by the expression pExpr from the ** Select.pWin list of Select object pSelect. 
Name: resolveSelectStep; Comment: ** Resolve names in the SELECT statement p and all of its descendants. 
Name: sqlite3TableColumnAffinity; Comment: ** Return the affinity character for a single column of a table. 
Name: sqlite3ExprSkipCollate; Comment: ** Skip over any TK_COLLATE operators. 
Name: sqlite3ExprSkipCollateAndLikely; Comment: ** Skip over any TK_COLLATE operators and/or any unlikely() ** or likelihood() or likely() functions at the root of an ** expression. 
Name: sqlite3ExprCollSeq; Comment: ** Return the collation sequence for the expression pExpr. If ** there is no defined collating sequence, return NULL. ** ** See also: sqlite3ExprNNCollSeq() ** ** The sqlite3ExprNNCollSeq() works the same exact that it returns the ** default collation if pExpr has no defined collation. ** ** The collating sequence might be determined by a COLLATE operator ** or by the presence of a column with a defined collating sequence. ** COLLATE operators take first precedence. Left operands take ** precedence over right operands. 
Name: sqlite3ExprNNCollSeq; Comment: ** Return the collation sequence for the expression pExpr. If ** there is no defined collating sequence, return a pointer to the ** defautl collation sequence. ** ** See also: sqlite3ExprCollSeq() ** ** The sqlite3ExprCollSeq() routine works the same except that it ** returns NULL if there is no defined collation. 
Name: sqlite3ExprCollSeqMatch; Comment: ** Return TRUE if the two expressions have equivalent collating sequences. 
Name: sqlite3CompareAffinity; Comment: ** pExpr is an operand of a comparison operator. aff2 is the ** type affinity of the other operand. This routine returns the ** type affinity that should be used for the comparison operator. 
Name: comparisonAffinity; Comment: ** pExpr is a comparison operator. Return the type affinity that should ** be applied to both operands prior to doing the comparison. 
Name: sqlite3IndexAffinityOk; Comment: ** pExpr is a comparison expression, eg. '=', '<', IN(...) etc. ** idx_affinity is the affinity of an indexed column. Return true ** if the index with affinity idx_affinity may be used to implement ** the comparison in pExpr. 
Name: sqlite3BinaryCompareCollSeq; Comment: ** Return a pointer to the collation sequence that should be used by ** a binary comparison operator comparing pLeft and pRight. ** ** If the left hand expression has a collating sequence type, then it is ** used. Otherwise the collation sequence for the right hand expression ** is used, or the default (BINARY) if neither expression has a collating ** type. ** ** Argument pRight (but not pLeft) may be a null pointer. In this case, ** it is not considered. 
Name: sqlite3ExprCompareCollSeq; Comment: Expresssion p is a comparison operator. Return a collation sequence** appropriate for the comparison operator. ** ** This is normally just a wrapper around sqlite3BinaryCompareCollSeq(). ** However, if the OP_Commuted flag is set, then the order of the operands ** is reversed in the sqlite3BinaryCompareCollSeq() call so that the ** correct collating sequence is found. 
Name: sqlite3ExprIsVector; Comment: ** Return true if expression pExpr is a vector, or false otherwise. ** ** A vector is defined as any expression that results in two or more ** columns of result. Every TK_VECTOR node is an vector because the ** parser will not generate a TK_VECTOR with fewer than two entries. ** But a TK_SELECT might be either a vector or a scalar. It is only ** considered a vector if it has two or more result columns. 
Name: sqlite3ExprVectorSize; Comment: ** If the expression passed as the only argument is of type TK_VECTOR ** return the number of expressions in the vector. Or, if the expression ** is a sub-select, return the number of columns in the sub-select. For ** any other type of expression, return 1. 
Name: sqlite3VectorFieldSubexpr; Comment: ** Return a pointer to a subexpression of pVector that is the i-th ** column of the vector (numbered starting with 0). The caller must ** ensure that i is within range. ** ** If pVector is really a scalar (and "scalar" here includes subqueries ** that return a single column!) then return pVector unmodified. ** ** pVector retains ownership of the returned subexpression. ** ** If the vector is a (SELECT ...) then the expression returned is ** just the expression for the i-th term of the result set, and may ** not be ready for evaluation because the table cursor has not yet ** been positioned. 
Name: exprCodeSubselect; Comment: ** If expression pExpr is of type TK_SELECT, generate code to evaluate ** it. Return the register in which the result is stored (or, if the ** sub-select returns more than one column, the first in an array ** of registers in which the result is stored). ** ** If pExpr is not a TK_SELECT expression, return 0. 
Name: sqlite3ExprCheckHeight; Comment: ** Check that argument nHeight is less than or equal to the maximum ** expression depth allowed. If it is not, leave an error message in ** pParse. 
Name: heightOfExpr; Comment: The following three functions, heightOfExpr(), heightOfExprList()** and heightOfSelect(), are used to determine the maximum height ** of any expression tree referenced by the structure passed as the ** first argument. ** ** If this maximum height is greater than the current value pointed ** to by pnHeight, the second parameter, then set *pnHeight to that ** value. 
Name: exprSetHeight; Comment: ** Set the Expr.nHeight variable in the structure passed as an ** argument. An expression with no children, Expr.pList or ** Expr.pSelect member has a height of 1. Any other expression ** has a height equal to the maximum height of any other ** referenced Expr plus one. ** ** Also propagate EP_Propagate flags up from Expr.x.pList to Expr.flags, ** if appropriate. 
Name: sqlite3ExprSetHeightAndFlags; Comment: ** Set the Expr.nHeight variable using the exprSetHeight() function. If ** the height is greater than the maximum allowed expression depth, ** leave an error in pParse. ** ** Also propagate all EP_Propagate flags from the Expr.x.pList into ** Expr.flags. 
Name: sqlite3SelectExprHeight; Comment: ** Return the maximum height of any expression tree referenced ** by the select statement passed as an argument. 
Name: sqlite3ExprSetHeightAndFlags; Comment: ** Propagate all EP_Propagate flags from the Expr.x.pList into ** Expr.flags. 
Name: sqlite3ExprAttachSubtrees; Comment: ** Attach subtrees pLeft and pRight to the Expr node pRoot. ** ** If pRoot==NULL that means that a memory allocation error has occurred. ** In that case, delete the subtrees pLeft and pRight. 
Name: sqlite3PExprAddSelect; Comment: ** Add pSelect to the Expr.x.pSelect field. Or, if pExpr is NULL (due ** do a memory allocation failure) then delete the pSelect object. 
Name: sqlite3ExprAnd; Comment: ** Join two expressions using an AND operator. If either expression is ** NULL, then just return the other expression. ** ** If one side or the other of the AND is known to be false, then instead ** of returning an AND expression, just return a constant expression with ** a value of false. 
Name: sqlite3ExprAssignVarNumber; Comment: ** Assign a variable number to an expression that encodes a wildcard ** in the original SQL statement. ** ** Wildcards consisting of a single "?" are assigned the next sequential ** variable number. ** ** Wildcards of the form "?nnn" are assigned the number "nnn". We make ** sure "nnn" is not too big to avoid a denial of service attack when ** the SQL statement comes from an external source. ** ** Wildcards of the form ":aaa", "@aaa", or "$aaa" are assigned the same number ** as the previous instance of the same wildcard. Or if this is the first ** instance of the wildcard, the next sequential variable number is ** assigned. 
Name: sqlite3ExprDeleteNN; Comment: ** Recursively delete an expression tree. 
Name: sqlite3ExprUnmapAndDelete; Comment: Invoke sqlite3RenameExprUnmap() and sqlite3ExprDelete() on the** expression. 
Name: exprStructSize; Comment: ** Return the number of bytes allocated for the expression structure ** passed as the first argument. This is always one of EXPR_FULLSIZE, ** EXPR_REDUCEDSIZE or EXPR_TOKENONLYSIZE. 
Name: dupedExprStructSize; Comment: ** The dupedExpr*Size() routines each return the number of bytes required ** to store a copy of an expression or expression tree. They differ in ** how much of the tree is measured. ** ** dupedExprStructSize() Size of only the Expr structure ** dupedExprNodeSize() Size of Expr + space for token ** dupedExprSize() Expr + token + subtree components ** *************************************************************************** ** ** The dupedExprStructSize() function returns two values OR-ed together: ** (1) the space required for a copy of the Expr structure only and ** (2) the EP_xxx flags that indicate what the structure size should be. ** The return values is always one of: ** ** EXPR_FULLSIZE ** EXPR_REDUCEDSIZE | EP_Reduced ** EXPR_TOKENONLYSIZE | EP_TokenOnly ** ** The size of the structure can be found by masking the return value ** of this routine with 0xfff. The flags can be found by masking the ** return value with EP_Reduced|EP_TokenOnly. ** ** Note that with flags==EXPRDUP_REDUCE, this routines works on full-size ** (unreduced) Expr objects as they or originally constructed by the parser. ** During expression analysis, extra information is computed and moved into ** later parts of the Expr object and that extra information might get chopped ** off if the expression is reduced. Note also that it does not work to ** make an EXPRDUP_REDUCE copy of a reduced expression. It is only legal ** to reduce a pristine expression tree from the parser. The implementation ** of dupedExprStructSize() contain multiple assert() statements that attempt ** to enforce this constraint. 
Name: dupedExprNodeSize; Comment: ** This function returns the space in bytes required to store the copy ** of the Expr structure and a copy of the Expr.u.zToken string (if that ** string is defined.) 
Name: dupedExprSize; Comment: ** Return the number of bytes required to create a duplicate of the ** expression passed as the first argument. The second argument is a ** mask containing EXPRDUP_XXX flags. ** ** The value returned includes space to create a copy of the Expr struct ** itself and the buffer referred to by Expr.u.zToken, if any. ** ** If the EXPRDUP_REDUCE flag is set, then the return value includes ** space to duplicate all Expr nodes in the tree formed by Expr.pLeft ** and Expr.pRight variables (but not for any structures pointed to or ** descended from the Expr.x.pList or Expr.x.pSelect variables). 
Name: exprDup; Comment: ** This function is similar to sqlite3ExprDup(), except that if pzBuffer ** is not NULL then *pzBuffer is assumed to point to a buffer large enough ** to store the copy of expression p, the copies of p->u.zToken ** (if applicable), and the copies of the p->pLeft and p->pRight expressions, ** if any. Before returning, *pzBuffer is set to the first byte past the ** portion of the buffer copied into by this function. 
Name: gatherSelectWindowsCallback; Comment: ** The gatherSelectWindows() procedure and its helper routine ** gatherSelectWindowsCallback() are used to scan all the expressions ** an a newly duplicated SELECT statement and gather all of the Window ** objects found there, assembling them onto the linked list at Select->pWin. 
Name: sqlite3ExprDup; Comment: ** The following group of routines make deep copies of expressions, ** expression lists, ID lists, and select statements. The copies can ** be deleted (by being passed to their respective ...Delete() routines) ** without effecting the originals. ** ** The expression list, ID, and source lists return by sqlite3ExprListDup(), ** sqlite3IdListDup(), and sqlite3SrcListDup() can not be further expanded ** by subsequent calls to sqlite*ListAppend() routines. ** ** Any tables that the SrcList might point to are not duplicated. ** ** The flags parameter contains a combination of the EXPRDUP_XXX flags. ** If the EXPRDUP_REDUCE flag is set, then the structure returned is a ** truncated version of the usual Expr structure that will be stored as ** part of the in-memory representation of the database schema. 
Name: sqlite3ExprListSetSortOrder; Comment: ** Set the sort order for the last element on the given ExprList. 
Name: sqlite3ExprListCheckLength; Comment: ** If the expression list pEList contains more than iLimit elements, ** leave an error message in pParse. 
Name: exprListDeleteNN; Comment: ** Delete an entire expression list. 
Name: sqlite3ExprListFlags; Comment: ** Return the bitwise-OR of all Expr.flags fields in the given ** ExprList. 
Name: sqlite3SelectWalkFail; Comment: ** This is a SELECT-node callback for the expression walker that ** always "fails". By "fail" in this case, we mean set ** pWalker->eCode to zero and abort. ** ** This callback is used by multiple expression walkers. 
Name: sqlite3IsTrueOrFalse; Comment: ** Check the input string to see if it is "true" or "false" (in any case). ** ** If the string is.... Return ** "true" EP_IsTrue ** "false" EP_IsFalse ** anything else 0 
Name: sqlite3ExprIdToTrueFalse; Comment: ** If the input expression is an ID with the name "true" or "false" ** then convert it into an TK_TRUEFALSE term. Return non-zero if ** the conversion happened, and zero if the expression is unaltered. 
Name: sqlite3ExprTruthValue; Comment: ** The argument must be a TK_TRUEFALSE Expr node. Return 1 if it is TRUE ** and 0 if it is FALSE. 
Name: sqlite3ExprSimplifiedAndOr; Comment: ** If pExpr is an AND or OR expression, try to simplify it by eliminating ** terms that are always true or false. Return the simplified expression. ** Or return the original expression if no simplification is possible. ** ** Examples: ** ** (x<10) AND true => (x<10) ** (x<10) AND false => false ** (x<10) AND (y=22 OR false) => (x<10) AND (y=22) ** (x<10) AND (y=22 OR true) => (x<10) ** (y=22) OR true => true 
Name: exprNodeIsConstant; Comment: ** These routines are Walker callbacks used to check expressions to ** see if they are "constant" for some definition of constant. The ** Walker.eCode value determines the type of "constant" we are looking ** for. ** ** These callback routines are used to implement the following: ** ** sqlite3ExprIsConstant() pWalker->eCode==1 ** sqlite3ExprIsConstantNotJoin() pWalker->eCode==2 ** sqlite3ExprIsTableConstant() pWalker->eCode==3 ** sqlite3ExprIsConstantOrFunction() pWalker->eCode==4 or 5 ** ** In all cases, the callbacks set Walker.eCode=0 and abort if the expression ** is found to not be a constant. ** ** The sqlite3ExprIsConstantOrFunction() is used for evaluating DEFAULT ** expressions in a CREATE TABLE statement. The Walker.eCode value is 5 ** when parsing an existing schema out of the sqlite_schema table and 4 ** when processing a new CREATE TABLE statement. A bound parameter raises ** an error for new statements, but is silently converted ** to NULL for existing schemas. This allows sqlite_schema tables that ** contain a bound parameter because they were generated by older versions ** of SQLite to be parsed by newer versions of SQLite without raising a ** malformed schema error. 
Name: sqlite3ExprIsConstant; Comment: ** Walk an expression tree. Return non-zero if the expression is constant ** and 0 if it involves variables or function calls. ** ** For the purposes of this function, a double-quoted string (ex: "abc") ** is considered a variable but a single-quoted string (ex: 'abc') is ** a constant. 
Name: sqlite3ExprIsConstantNotJoin; Comment: ** Walk an expression tree. Return non-zero if ** ** (1) the expression is constant, and ** (2) the expression does originate in the ON or USING clause ** of a LEFT JOIN, and ** (3) the expression does not contain any EP_FixedCol TK_COLUMN ** operands created by the constant propagation optimization. ** ** When this routine returns true, it indicates that the expression ** can be added to the pParse->pConstExpr list and evaluated once when ** the prepared statement starts up. See sqlite3ExprCodeRunJustOnce(). 
Name: sqlite3ExprIsTableConstant; Comment: ** Walk an expression tree. Return non-zero if the expression is constant ** for any single row of the table with cursor iCur. In other words, the ** expression must not refer to any non-deterministic function nor any ** table other than iCur. 
Name: exprNodeIsConstantOrGroupBy; Comment: ** sqlite3WalkExpr() callback used by sqlite3ExprIsConstantOrGroupBy(). 
Name: sqlite3ExprIsConstantOrGroupBy; Comment: ** Walk the expression tree passed as the first argument. Return non-zero ** if the expression consists entirely of constants or copies of terms ** in pGroupBy that sort with the BINARY collation sequence. ** ** This routine is used to determine if a term of the HAVING clause can ** be promoted into the WHERE clause. In order for such a promotion to work, ** the value of the HAVING clause term must be the same for all members of ** a "group". The requirement that the GROUP BY term must be BINARY ** assumes that no other collating sequence will have a finer-grained ** grouping than binary. In other words (A=B COLLATE binary) implies ** A=B in every other collating sequence. The requirement that the ** GROUP BY be BINARY is stricter than necessary. It would also work ** to promote HAVING clauses that use the same alternative collating ** sequence as the GROUP BY term, but that is much harder to check, ** alternative collating sequences are uncommon, and this is only an ** optimization, so we take the easy way out and simply require the ** GROUP BY to use the BINARY collating sequence. 
Name: sqlite3ExprIsConstantOrFunction; Comment: ** Walk an expression tree for the DEFAULT field of a column definition ** in a CREATE TABLE statement. Return non-zero if the expression is ** acceptable for use as a DEFAULT. That is to say, return non-zero if ** the expression is constant or a function call with constant arguments. ** Return and 0 if there are any variables. ** ** isInit is true when parsing from sqlite_schema. isInit is false when ** processing a new CREATE TABLE statement. When isInit is true, parameters ** (such as ? or $abc) in the expression are converted into NULL. When ** isInit is false, parameters raise an error. Parameters should not be ** allowed in a CREATE TABLE statement, but some legacy versions of SQLite ** allowed it, so we need to support it when reading sqlite_schema for ** backwards compatibility. ** ** If isInit is true, set EP_FromDDL on every TK_FUNCTION node. ** ** For the purposes of this function, a double-quoted string (ex: "abc") ** is considered a variable but a single-quoted string (ex: 'abc') is ** a constant. 
Name: sqlite3ExprContainsSubquery; Comment: ** Walk an expression tree. Return 1 if the expression contains a ** subquery of some kind. Return 0 if there are no subqueries. 
Name: sqlite3ExprIsInteger; Comment: ** If the expression p codes a constant integer that is small enough ** to fit in a 32-bit integer, return 1 and put the value of the integer ** in *pValue. If the expression is not an integer or if it is too big ** to fit in a signed 32-bit integer, return 0 and leave *pValue unchanged. 
Name: sqlite3ExprCanBeNull; Comment: ** Return FALSE if there is no chance that the expression can be NULL. ** ** If the expression might be NULL or if the expression is too complex ** to tell return TRUE. ** ** This routine is used as an optimization, to skip OP_IsNull opcodes ** when we know that a value cannot be NULL. Hence, a false positive ** (returning TRUE when in fact the expression can never be NULL) might ** be a small performance hit but is otherwise harmless. On the other ** hand, a false negative (returning FALSE when the result could be NULL) ** will likely result in an incorrect answer. So when in doubt, return ** TRUE. 
Name: sqlite3ExprNeedsNoAffinityChange; Comment: ** Return TRUE if the given expression is a constant which would be ** unchanged by OP_Affinity with the affinity given in the second ** argument. ** ** This routine is used to determine if the OP_Affinity operation ** can be omitted. When in doubt return FALSE. A false negative ** is harmless. A false positive, however, can result in the wrong ** answer. 
Name: sqlite3IsRowid; Comment: ** Return TRUE if the given string is a row-id column name. 
Name: sqlite3SetHasNullFlag; Comment: ** Generate code that checks the left-most column of index table iCur to see if ** it contains any NULL entries. Cause the register at regHasNull to be set ** to a non-NULL value if iCur contains no NULLs. Cause register regHasNull ** to be set to NULL if iCur contains one or more NULL values. 
Name: sqlite3InRhsIsConstant; Comment: ** The argument is an IN operator with a list (not a subquery) on the ** right-hand side. Return TRUE if that list is constant. 
Name: exprINAffinity; Comment: ** Argument pExpr is an (?, ?...) IN(...) expression. This ** function allocates and returns a nul-terminated string containing ** the affinities to be used for each column of the comparison. ** ** It is the responsibility of the caller to ensure that the returned ** string is eventually freed using sqlite3DbFree(). 
Name: sqlite3SubselectError; Comment: ** Load the Parse object passed as the first argument with an error ** message of the form: ** ** "sub-select returns N columns - expected M" 
Name: sqlite3VectorErrorMsg; Comment: ** Expression pExpr is a vector that has been used in a context where ** it is not permitted. If pExpr is a sub-select vector, this routine ** loads the Parse object with a message of the form: ** ** "sub-select returns N columns - expected 1" ** ** Or, if it is a regular scalar vector: ** ** "row value misused" 
Name: sqlite3ExprCheckIN; Comment: ** Expr pIn is an IN(...) expression. This function checks that the ** sub-select on the RHS of the IN() operator has the same number of ** columns as the vector on the LHS. Or, if the RHS of the IN() is not ** a sub-query, that the LHS is a vector of size 1. 
Name: codeReal; Comment: ** Generate an instruction that will put the floating point ** value described by z[0..n-1] into register iMem. ** ** The z[] string will probably not be zero-terminated. But the ** z[n] character is guaranteed to be something that does not look ** like the continuation of the number. 
Name: codeInteger; Comment: ** Generate an instruction that will put the integer describe by ** text z[0..n-1] into register iMem. ** ** Expr.u.zToken is always UTF8 and zero-terminated. 
Name: sqlite3ExprCodeGeneratedColumn; Comment: ** Generate code that will compute the value of generated column pCol ** and store the result in register regOut 
Name: sqlite3ExprCodeMove; Comment: ** Generate code to move content from registers iFrom...iFrom+nReg-1 ** over to iTo..iTo+nReg-1. 
Name: exprToRegister; Comment: ** Convert a scalar expression node to a TK_REGISTER referencing ** register iReg. The caller must ensure that iReg already contains ** the correct value for the expression. 
Name: exprCodeVector; Comment: ** Evaluate an expression (either a vector or a scalar expression) and store ** the result in continguous temporary registers. Return the index of ** the first register used to store the result. ** ** If the returned result register is a temporary scalar, then also write ** that register number into *piFreeable. If the returned result register ** is not a temporary or if the expression is a vector set *piFreeable ** to 0. 
Name: setDoNotMergeFlagOnCopy; Comment: ** If the last opcode is a OP_Copy, then set the do-not-merge flag (p5) ** so that a subsequent copy will not be merged into this one. 
Name: sqlite3ExprCodeTarget; Comment: ** Generate code into the current Vdbe to evaluate the given ** expression. Attempt to store the results in register "target". ** Return the register where results are stored. ** ** With this routine, there is no guarantee that results will ** be stored in target. The result might be stored in some other ** register if it is convenient to do so. The calling function ** must check the return code and move the results to the desired ** register. 
Name: sqlite3ExprCodeTemp; Comment: ** Generate code to evaluate an expression and store the results ** into a register. Return the register number where the results ** are stored. ** ** If the register is a temporary register that can be deallocated, ** then write its number into *pReg. If the result register is not ** a temporary, then set *pReg to zero. ** ** If pExpr is a constant, then this routine might generate this ** code to fill the register in the initialization section of the ** VDBE program, in order to factor it out of the evaluation loop. 
Name: sqlite3ExprCode; Comment: ** Generate code that will evaluate expression pExpr and store the ** results in register target. The results are guaranteed to appear ** in register target. 
Name: sqlite3ExprCodeCopy; Comment: ** Make a transient copy of expression pExpr and then code it using ** sqlite3ExprCode(). This routine works just like sqlite3ExprCode() ** except that the input expression is guaranteed to be unchanged. 
Name: sqlite3ExprCodeFactorable; Comment: ** Generate code that will evaluate expression pExpr and store the ** results in register target. The results are guaranteed to appear ** in register target. If the expression is constant, then this routine ** might choose to code the expression at initialization time. 
Name: sqlite3ExprIfTrue; Comment: ** Generate code for a boolean expression such that a jump is made ** to the label "dest" if the expression is true but execution ** continues straight thru if the expression is false. ** ** If the expression evaluates to NULL (neither true nor false), then ** take the jump if the jumpIfNull flag is SQLITE_JUMPIFNULL. ** ** This code depends on the fact that certain token values (ex: TK_EQ) ** are the same as opcode values (ex: OP_Eq) that implement the corresponding ** operation. Special comments in vdbe.c and the mkopcodeh.awk script in ** the make process cause these values to align. Assert()s in the code ** below verify that the numbers are aligned correctly. 
Name: sqlite3ExprIfFalse; Comment: ** Generate code for a boolean expression such that a jump is made ** to the label "dest" if the expression is false but execution ** continues straight thru if the expression is true. ** ** If the expression evaluates to NULL (neither true nor false) then ** jump if jumpIfNull is SQLITE_JUMPIFNULL or fall through if jumpIfNull ** is 0. 
Name: sqlite3ExprIfFalseDup; Comment: ** Like sqlite3ExprIfFalse() except that a copy is made of pExpr before ** code generation, and that copy is deleted after code generation. This ** ensures that the original pExpr is unchanged. 
Name: exprCompareVariable; Comment: ** Expression pVar is guaranteed to be an SQL variable. pExpr may be any ** type of expression. ** ** If pExpr is a simple SQL value - an integer, real, string, blob ** or NULL value - then the VDBE currently being prepared is configured ** to re-prepare each time a new value is bound to variable pVar. ** ** Additionally, if pExpr is a simple SQL value and the value is the ** same as that currently bound to variable pVar, non-zero is returned. ** Otherwise, if the values are not the same or if pExpr is not a simple ** SQL value, zero is returned. 
Name: sqlite3ExprCompare; Comment: ** Do a deep comparison of two expression trees. Return 0 if the two ** expressions are completely identical. Return 1 if they differ only ** by a COLLATE operator at the top level. Return 2 if there are differences ** other than the top-level COLLATE operator. ** ** If any subelement of pB has Expr.iTable==(-1) then it is allowed ** to compare equal to an equivalent element in pA with Expr.iTable==iTab. ** ** The pA side might be using TK_REGISTER. If that is the case and pB is ** not using TK_REGISTER but is otherwise equivalent, then still return 0. ** ** Sometimes this routine will return 2 even if the two expressions ** really are equivalent. If we cannot prove that the expressions are ** identical, we return 2 just to be safe. So if this routine ** returns 2, then you do not really know for certain if the two ** expressions are the same. But if you get a 0 or 1 return, then you ** can be sure the expressions are the same. In the places where ** this routine is used, it does not hurt to get an extra 2 - that ** just might result in some slightly slower code. But returning ** an incorrect 0 or 1 could lead to a malfunction. ** ** If pParse is not NULL then TK_VARIABLE terms in pA with bindings in ** pParse->pReprepare can be matched against literals in pB. The ** pParse->pVdbe->expmask bitmask is updated for each variable referenced. ** If pParse is NULL (the normal case) then any TK_VARIABLE term in ** Argument pParse should normally be NULL. If it is not NULL and pA or ** pB causes a return value of 2. 
Name: sqlite3ExprListCompare; Comment: ** Compare two ExprList objects. Return 0 if they are identical, 1 ** if they are certainly different, or 2 if it is not possible to ** determine if they are identical or not. ** ** If any subelement of pB has Expr.iTable==(-1) then it is allowed ** to compare equal to an equivalent element in pA with Expr.iTable==iTab. ** ** This routine might return non-zero for equivalent ExprLists. The ** only consequence will be disabled optimizations. But this routine ** must never return 0 if the two ExprList objects are different, or ** a malfunction will result. ** ** Two NULL pointers are considered to be the same. But a NULL pointer ** always differs from a non-NULL pointer. 
Name: sqlite3ExprCompareSkip; Comment: ** Like sqlite3ExprCompare() except COLLATE operators at the top-level ** are ignored. 
Name: sqlite3ExprImpliesExpr; Comment: ** Return true if we can prove the pE2 will always be true if pE1 is ** true. Return false if we cannot complete the proof or if pE2 might ** be false. Examples: ** ** pE1: x==5 pE2: x==5 Result: true ** pE1: x>0 pE2: x==5 Result: false ** pE1: x=21 pE2: x=21 OR y=43 Result: true ** pE1: x!=123 pE2: x IS NOT NULL Result: true ** pE1: x!=?1 pE2: x IS NOT NULL Result: true ** pE1: x IS NULL pE2: x IS NOT NULL Result: false ** pE1: x IS ?2 pE2: x IS NOT NULL Reuslt: false ** ** When comparing TK_COLUMN nodes between pE1 and pE2, if pE2 has ** Expr.iTable<0 then assume a table number given by iTab. ** ** If pParse is not NULL, then the values of bound variables in pE1 are ** compared against literal values in pE2 and pParse->pVdbe->expmask is ** modified to record which bound variables are referenced. If pParse ** is NULL, then false will be returned if pE1 contains any bound variables. ** ** When in doubt, return false. Returning true might give a performance ** improvement. Returning false might cause a performance reduction, but ** it will always give the correct answer and is hence always safe. 
Name: impliesNotNullRow; Comment: ** This is the Expr node callback for sqlite3ExprImpliesNonNullRow(). ** If the expression node requires that the table at pWalker->iCur ** have one or more non-NULL column, then set pWalker->eCode to 1 and abort. ** ** This routine controls an optimization. False positives (setting ** pWalker->eCode to 1 when it should not be) are deadly, but false-negatives ** (never setting pWalker->eCode) is a harmless missed optimization. 
Name: sqlite3ExprImpliesNonNullRow; Comment: ** Return true (non-zero) if expression p can only be true if at least ** one column of table iTab is non-null. In other words, return true ** if expression p will always be NULL or false if every column of iTab ** is NULL. ** ** False negatives are acceptable. In other words, it is ok to return ** zero even if expression p will never be true of every column of iTab ** is NULL. A false negative is merely a missed optimization opportunity. ** ** False positives are not allowed, however. A false positive may result ** in an incorrect answer. ** ** Terms of p that are marked with EP_FromJoin (and hence that come from ** the ON or USING clauses of LEFT JOINS) are excluded from the analysis. ** ** This routine is used to check if a LEFT JOIN can be converted into ** an ordinary JOIN. The p argument is the WHERE clause. If the WHERE ** clause requires that some column of the right table of the LEFT JOIN ** be non-NULL, then the LEFT JOIN can be safely converted into an ** ordinary join. 
Name: exprIdxCover; Comment: ** Check to see if there are references to columns in table ** pWalker->u.pIdxCover->iCur can be satisfied using the index ** pWalker->u.pIdxCover->pIdx. 
Name: selectSrcCount; Comment: ** xSelect callback for sqlite3FunctionUsesThisSrc(). If this is the first ** SELECT with a FROM clause encountered during this iteration, set ** SrcCount.iSrcInner to the cursor number of the leftmost object in ** the FROM cause. 
Name: exprSrcCount; Comment: ** Count the number of references to columns. 
Name: sqlite3FunctionUsesThisSrc; Comment: ** Determine if any of the arguments to the pExpr Function reference ** pSrcList. Return true if they do. Also return true if the function ** has no arguments or has only constant arguments. Return false if pExpr ** references columns but not columns of tables found in pSrcList. 
Name: agginfoPersistExprCb; Comment: ** This is a Walker expression node callback. ** ** For Expr nodes that contain pAggInfo pointers, make sure the AggInfo ** object that is referenced does not refer directly to the Expr. If ** it does, make a copy. This is done because the pExpr argument is ** subject to change. ** ** The copy is stored on pParse->pConstExpr with a register number of 0. ** This will cause the expression to be deleted automatically when the ** Parse object is destroyed, but the zero register number means that it ** will not generate any code in the preamble. 
Name: sqlite3AggInfoPersistWalkerInit; Comment: ** Initialize a Walker object so that will persist AggInfo entries referenced ** by the tree that is walked. 
Name: addAggInfoColumn; Comment: ** Add a new element to the pAggInfo->aCol[] array. Return the index of ** the new element. Return a negative number if malloc fails. 
Name: addAggInfoFunc; Comment: ** Add a new element to the pAggInfo->aFunc[] array. Return the index of ** the new element. Return a negative number if malloc fails. 
Name: analyzeAggregate; Comment: ** This is the xExprCallback for a tree walker. It is used to ** implement sqlite3ExprAnalyzeAggregates(). See sqlite3ExprAnalyzeAggregates ** for additional information. 
Name: sqlite3ExprAnalyzeAggregates; Comment: ** Analyze the pExpr expression looking for aggregate functions and ** for variables that need to be added to AggInfo object that pNC->pAggInfo ** points to. Additional entries are made on the AggInfo object as ** necessary. ** ** This routine should only be called after the expression has been ** analyzed by sqlite3ResolveExprNames(). 
Name: sqlite3ExprAnalyzeAggList; Comment: ** Call sqlite3ExprAnalyzeAggregates() for every expression in an ** expression list. Return the number of errors. ** ** If an error is found, the analysis is cut short. 
Name: sqlite3GetTempReg; Comment: ** Allocate a single new register for use to hold some intermediate result. 
Name: sqlite3ReleaseTempReg; Comment: ** Deallocate a register, making available for reuse for some other ** purpose. 
Name: sqlite3GetTempRange; Comment: ** Allocate or deallocate a block of nReg consecutive registers. 
Name: sqlite3ClearTempRegCache; Comment: ** Mark all temporary registers as being unavailable for reuse. ** ** Always invoke this procedure after coding a subroutine or co-routine ** that might be invoked from other parts of the code, to ensure that ** the sub/co-routine does not use registers in common with the code that ** invokes the sub/co-routine. 
Name: isAlterableTable; Comment: ** Parameter zName is the name of a table that is about to be altered ** (either with ALTER TABLE ... RENAME TO or ALTER TABLE ... ADD COLUMN). ** If the table is a system table, this function leaves an error message ** in pParse->zErr (system tables may not be altered) and returns non-zero. ** ** Or, if zName is not a system table, zero is returned. 
Name: renameTestSchema; Comment: ** Generate code to verify that the schemas of database zDb and, if ** bTemp is not true, database "temp", can still be parsed. This is ** called at the end of the generation of an ALTER TABLE ... RENAME ... ** statement to ensure that the operation has not rendered any schema ** objects unusable. 
Name: renameReloadSchema; Comment: ** Generate code to reload the schema for database iDb. And, if iDb!=1, for ** the temp database as well. 
Name: sqlite3AlterFinishAddColumn; Comment: ** This function is called after an "ALTER TABLE ... ADD" statement ** has been parsed. Argument pColDef contains the text of the new ** column definition. ** ** The Table structure pParse->pNewTable was extended to include ** the new column during parsing. 
Name: sqlite3AlterBeginAddColumn; Comment: ** This function is called by the parser after the table-name in ** an "ALTER TABLE <table-name> ADD" statement is parsed. Argument ** pSrc is the full-name of the table being altered. ** ** This routine makes a (partial) copy of the Table structure ** for the table being altered and sets Parse.pNewTable to point ** to it. Routines called by the parser as the column definition ** is parsed (i.e. sqlite3AddColumn()) add the new Column data to ** the copy. The copy of the Table structure is deleted by tokenize.c ** after parsing is finished. ** ** Routine sqlite3AlterFinishAddColumn() will be called to complete ** coding the "ALTER TABLE ... ADD" statement. 
Name: renameTokenCheckAll; Comment: None** if( x==y ) ... ** ** Technically, as x no longer points into a valid object or to the byte ** following a valid object, it may not be used in comparison operations. 
Name: sqlite3RenameTokenMap; Comment: ** Remember that the parser tree element pPtr was created using ** the token pToken. ** ** In other words, construct a new RenameToken object and add it ** to the list of RenameToken objects currently being built up ** in pParse->pRename. ** ** The pPtr argument is returned so that this routine can be used ** with tail recursion in tokenExpr() routine, for a small performance ** improvement. 
Name: sqlite3RenameTokenRemap; Comment: ** It is assumed that there is already a RenameToken object associated ** with parse tree element pFrom. This function remaps the associated token ** to parse tree element pTo. 
Name: renameUnmapExprCb; Comment: ** Walker callback used by sqlite3RenameExprUnmap(). 
Name: renameWalkWith; Comment: ** Iterate through the Select objects that are part of WITH clauses attached ** to select statement pSelect. 
Name: unmapColumnIdlistNames; Comment: ** Unmap all tokens in the IdList object passed as the second argument. 
Name: renameUnmapSelectCb; Comment: ** Walker callback used by sqlite3RenameExprUnmap(). 
Name: sqlite3RenameExprUnmap; Comment: ** Remove all nodes that are part of expression pExpr from the rename list. 
Name: sqlite3RenameExprlistUnmap; Comment: ** Remove all nodes that are part of expression-list pEList from the ** rename list. 
Name: renameTokenFree; Comment: ** Free the list of RenameToken objects given in the second argument 
Name: renameTokenFind; Comment: ** Search the Parse object passed as the first argument for a RenameToken ** object associated with parse tree element pPtr. If found, remove it ** from the Parse object and add it to the list maintained by the ** RenameCtx object passed as the second argument. 
Name: renameColumnSelectCb; Comment: ** This is a Walker select callback. It does nothing. It is only required ** because without a dummy callback, sqlite3WalkExpr() and similar do not ** descend into sub-select statements. 
Name: renameColumnExprCb; Comment: ** This is a Walker expression callback. ** ** For every TK_COLUMN node in the expression tree, search to see ** if the column being references is the column being renamed by an ** ALTER TABLE statement. If it is, then attach its associated ** RenameToken object to the list of RenameToken objects being ** constructed in RenameCtx object at pWalker->u.pRename. 
Name: renameColumnTokenNext; Comment: ** The RenameCtx contains a list of tokens that reference a column that ** is being renamed by an ALTER TABLE statement. Return the "last" ** RenameToken in the RenameCtx and remove that RenameToken from the ** RenameContext. "Last" means the last RenameToken encountered when ** the input SQL is parsed from left to right. Repeated calls to this routine ** return all column name tokens in the order that they are encountered ** in the SQL statement. 
Name: renameColumnParseError; Comment: ** An error occured while parsing or otherwise processing a database ** object (either pParse->pNewTable, pNewIndex or pNewTrigger) as part of an ** ALTER TABLE RENAME COLUMN program. The error message emitted by the ** sub-routine is currently stored in pParse->zErrMsg. This function ** adds context to the error message and then stores it in pCtx. 
Name: renameColumnElistNames; Comment: ** For each name in the the expression-list pEList (i.e. each ** pEList->a[i].zName) that matches the string in zOld, extract the ** corresponding rename-token from Parse object pParse and add it ** to the RenameCtx pCtx. 
Name: renameColumnIdlistNames; Comment: ** For each name in the the id-list pIdList (i.e. each pIdList->a[i].zName) ** that matches the string in zOld, extract the corresponding rename-token ** from Parse object pParse and add it to the RenameCtx pCtx. 
Name: renameResolveTrigger; Comment: ** Resolve all symbols in the trigger at pParse->pNewTrigger, assuming ** it was read from the schema of database zDb. Return SQLITE_OK if ** successful. Otherwise, return an SQLite error code and leave an error ** message in the Parse object. 
Name: renameWalkTrigger; Comment: ** Invoke sqlite3WalkExpr() or sqlite3WalkSelect() on all Select or Expr ** objects that are part of the trigger passed as the second argument. 
Name: renameParseCleanup; Comment: ** Free the contents of Parse object (*pParse). Do not free the memory ** occupied by the Parse object itself. 
Name: renameColumnFunc; Comment: ** SQL function: ** ** sqlite_rename_column(zSql, iCol, bQuote, zNew, zTable, zOld) ** ** 0. zSql: SQL statement to rewrite ** 1. type: Type of object ("table", "view" etc.) ** 2. object: Name of object ** 3. Database: Database name (e.g. "main") ** 4. Table: Table name ** 5. iCol: Index of column to rename ** 6. zNew: New column name ** 7. bQuote: Non-zero if the new column name should be quoted. ** 8. bTemp: True if zSql comes from temp schema ** ** Do a column rename operation on the CREATE statement given in zSql. ** The iCol-th column (left-most is 0) of table zTable is renamed from zCol ** into zNew. The name should be quoted if bQuote is true. ** ** This function is used internally by the ALTER TABLE RENAME COLUMN command. ** It is only accessible to SQL created using sqlite3NestedParse(). It is ** not reachable from ordinary SQL passed into sqlite3_prepare(). 
Name: renameTableExprCb; Comment: ** Walker expression callback used by "RENAME TABLE". 
Name: renameTableSelectCb; Comment: ** Walker select callback used by "RENAME TABLE". 
Name: renameTableFunc; Comment: ** This C function implements an SQL user function that is used by SQL code ** generated by the ALTER TABLE ... RENAME command to modify the definition ** of any foreign key constraints that use the table being renamed as the ** parent table. It is passed three arguments: ** ** 0: The database containing the table being renamed. ** 1. type: Type of object ("table", "view" etc.) ** 2. object: Name of object ** 3: The complete text of the schema statement being modified, ** 4: The old name of the table being renamed, and ** 5: The new name of the table being renamed. ** 6: True if the schema statement comes from the temp db. ** ** It returns the new schema statement. For example: ** ** sqlite_rename_table('main', 'CREATE TABLE t1(a REFERENCES t2)','t2','t3',0) ** -> 'CREATE TABLE t1(a REFERENCES t3)' 
Name: renameTableTest; Comment: ** An SQL user function that checks that there are no parse or symbol ** resolution problems in a CREATE TRIGGER|TABLE|VIEW|INDEX statement. ** After an ALTER TABLE .. RENAME operation is performed and the schema ** reloaded, this function is called on each SQL statement in the schema ** to ensure that it is still usable. ** ** 0: Database name ("main", "temp" etc.). ** 1: SQL statement. ** 2: Object type ("view", "table", "trigger" or "index"). ** 3: Object name. ** 4: True if object is from temp schema. ** ** Unless it finds an error, this function normally returns NULL. However, it ** returns integer value 1 if: ** ** the SQL argument creates a trigger, and ** the table that the trigger is attached to is in database zDb. 
Name: sqlite3AlterFunctions; Comment: ** Register built-in functions used to help implement ALTER TABLE 
Name: statAccumDestructor; Comment: ** Reclaim all memory of a StatAccum structure. 
Name: statInit; Comment: ** Implementation of the stat_init(N,K,C,L) SQL function. The four parameters ** are: ** N: The number of columns in the index including the rowid/pk (note 1) ** K: The number of columns in the index excluding the rowid/pk. ** C: Estimated number of rows in the index ** L: A limit on the number of rows to scan, or 0 for no-limit ** ** Note 1: In the special case of the covering index that implements a ** WITHOUT ROWID table, N is the number of PRIMARY KEY columns, not the ** total number of columns in the table. ** ** For indexes on ordinary rowid tables, N==K+1. But for indexes on ** WITHOUT ROWID tables, N=K+P where P is the number of columns in the ** PRIMARY KEY of the table. The covering index that implements the ** original WITHOUT ROWID table as N==K as a special case. ** ** This routine allocates the StatAccum object in heap memory. The return ** value is a pointer to the StatAccum object. The datatype of the ** return value is BLOB, but it is really just a pointer to the StatAccum ** object. 
Name: sampleIsBetterPost; Comment: ** pNew and pOld are both candidate non-periodic samples selected for ** the same column (pNew->iCol==pOld->iCol). Ignoring this column and ** considering only any trailing columns and the sample hash value, this ** function returns true if sample pNew is to be preferred over pOld. ** In other words, if we assume that the cardinalities of the selected ** column for pNew and pOld are equal, is pNew to be preferred over pOld. ** ** This function assumes that for each argument sample, the contents of ** the anEq[] array from pSample->anEq[pSample->iCol+1] onwards are valid. 
Name: sampleIsBetter; Comment: ** Return true if pNew is to be preferred over pOld. ** ** This function assumes that for each argument sample, the contents of ** the anEq[] array from pSample->anEq[pSample->iCol] onwards are valid. 
Name: sampleInsert; Comment: ** Copy the contents of sample *pNew into the p->a[] array. If necessary, ** remove the least desirable sample from p->a[] to make room. 
Name: samplePushPrevious; Comment: ** Field iChng of the index being scanned has changed. So at this point ** p->current contains a sample that reflects the previous row of the ** index. The value of anEq[iChng] and subsequent anEq[] elements are ** correct at this point. 
Name: statPush; Comment: ** Implementation of the stat_push SQL function: stat_push(P,C,R) ** Arguments: ** ** P Pointer to the StatAccum object created by stat_init() ** C Index of left-most column to differ from previous row ** R Rowid for the current row. Might be a key record for ** WITHOUT ROWID tables. ** ** The purpose of this routine is to collect statistical data and/or ** samples from the index being analyzed into the StatAccum object. ** The stat_get() SQL function will be used afterwards to ** retrieve the information gathered. ** ** This SQL function usually returns NULL, but might return an integer ** if it wants the byte-code to do special processing. ** ** The R parameter is only used for STAT4 
Name: statGet; Comment: ** Implementation of the stat_get(P,J) SQL function. This routine is ** used to query statistical information that has been gathered into ** the StatAccum object by prior calls to stat_push(). The P parameter ** has type BLOB but it is really just a pointer to the StatAccum object. ** The content to returned is determined by the parameter J ** which is one of the STAT_GET_xxxx values defined above. ** ** The stat_get(P,J) function is not available to generic SQL. It is ** inserted as part of a manually constructed bytecode program. (See ** the callStatGet() routine below.) It is guaranteed that the P ** parameter will always be a pointer to a StatAccum object, never a ** NULL. ** ** If STAT4 is not enabled, then J is always ** STAT_GET_STAT1 and is hence omitted and this routine becomes ** a one-parameter function, stat_get(P), that always returns the ** stat1 table entry information. 
Name: loadAnalysis; Comment: ** Generate code that will cause the most recent index analysis to ** be loaded into internal hash tables where is can be used. 
Name: analyzeDatabase; Comment: ** Generate code that will do an analysis of an entire database 
Name: analyzeTable; Comment: ** Generate code that will do an analysis of a single table in ** a database. If pOnlyIdx is not NULL then it is a single index ** in pTab that should be analyzed. 
Name: sqlite3Analyze; Comment: ** Generate code for the ANALYZE command. The parser calls this routine ** when it recognizes an ANALYZE command. ** ** ANALYZE -- 1 ** ANALYZE <database> -- 2 ** ANALYZE ?<database>.?<tablename> -- 3 ** ** Form 1 causes all indices in all attached databases to be analyzed. ** Form 2 analyzes all indices the single database named. ** Form 3 analyzes all indices associated with the named table. 
Name: analysisLoader; Comment: ** This callback is invoked once for each index when reading the ** sqlite_stat1 table. ** ** argv[0] = name of the table ** argv[1] = name of the index (might be NULL) ** argv[2] = results of analysis - on integer for each column ** ** Entries for which argv[1]==NULL simply record the number of rows in ** the table. 
Name: sqlite3DeleteIndexSamples; Comment: ** If the Index.aSample variable is not NULL, delete the aSample[] array ** and its contents. 
Name: initAvgEq; Comment: ** Populate the pIdx->aAvgEq[] array based on the samples currently ** stored in pIdx->aSample[]. 
Name: findIndexOrPrimaryKey; Comment: ** Look up an index by name. Or, if the name of a WITHOUT ROWID table ** is supplied instead, find the PRIMARY KEY index for that table. 
Name: loadStat4; Comment: ** Load content from the sqlite_stat4 table into ** the Index.aSample[] arrays of all indices. 
Name: sqlite3AnalysisLoad; Comment: ** Load the content of the sqlite_stat1 and sqlite_stat4 tables. The ** contents of sqlite_stat1 are used to populate the Index.aiRowEst[] ** arrays. The contents of sqlite_stat4 are used to populate the ** Index.aSample[] arrays. ** ** If the sqlite_stat1 table is not present in the database, SQLITE_ERROR ** is returned. In this case, even if SQLITE_ENABLE_STAT4 was defined ** during compilation and the sqlite_stat4 table is present, no data is ** read from it. ** ** If SQLITE_ENABLE_STAT4 was defined during compilation and the ** sqlite_stat4 table is not present in the database, SQLITE_ERROR is ** returned. However, in this case, data is read from the sqlite_stat1 ** table (if it is present) before returning. ** ** If an OOM error occurs, this function always sets db->mallocFailed. ** This means if the caller does not care about other errors, the return ** code may be ignored. 
Name: resolveAttachExpr; Comment: ** Resolve an expression that was part of an ATTACH or DETACH statement. This ** is slightly different from resolving a normal SQL expression, because simple ** identifiers are treated as strings, not possible column names or aliases. ** ** i.e. if the parser sees: ** ** ATTACH DATABASE abc AS def ** ** it treats the two expressions as literal strings 'abc' and 'def' instead of ** looking for columns of the same name. ** ** This only applies to the root node of pExpr, so the statement: ** ** ATTACH DATABASE abc||def AS 'db2' ** ** will fail because neither abc or def can be resolved. 
Name: sqlite3DbIsNamed; Comment: ** Return true if zName points to a name that may be used to refer to ** database iDb attached to handle db. 
Name: attachFunc; Comment: ** An SQL user-function registered to do the work of an ATTACH statement. The ** three arguments to the function come directly from an attach statement: ** ** ATTACH DATABASE x AS y KEY z ** ** SELECT sqlite_attach(x, y, z) ** ** If the optional "KEY z" syntax is omitted, an SQL NULL is passed as the ** third argument. ** ** If the db->init.reopenMemdb flags is set, then instead of attaching a ** new database, close the database on db->init.iDb and reopen it as an ** empty MemDB. 
Name: detachFunc; Comment: ** An SQL user-function registered to do the work of an DETACH statement. The ** three arguments to the function come directly from a detach statement: ** ** DETACH DATABASE x ** ** SELECT sqlite_detach(x) 
Name: sqlite3Detach; Comment: ** Called by the parser to compile a DETACH statement. ** ** DETACH pDbname 
Name: sqlite3Attach; Comment: ** Called by the parser to compile an ATTACH statement. ** ** ATTACH p AS pDbname KEY pKey 
Name: sqlite3_set_authorizer; Comment: ** Set or clear the access authorization function. ** ** The access authorization function is be called during the compilation ** phase to verify that the user has read and/or write access permission on ** various fields of the database. The first argument to the auth function ** is a copy of the 3rd argument to this routine. The second argument ** to the auth function is one of these constants: ** ** SQLITE_CREATE_INDEX ** SQLITE_CREATE_TABLE ** SQLITE_CREATE_TEMP_INDEX ** SQLITE_CREATE_TEMP_TABLE ** SQLITE_CREATE_TEMP_TRIGGER ** SQLITE_CREATE_TEMP_VIEW ** SQLITE_CREATE_TRIGGER ** SQLITE_CREATE_VIEW ** SQLITE_DELETE ** SQLITE_DROP_INDEX ** SQLITE_DROP_TABLE ** SQLITE_DROP_TEMP_INDEX ** SQLITE_DROP_TEMP_TABLE ** SQLITE_DROP_TEMP_TRIGGER ** SQLITE_DROP_TEMP_VIEW ** SQLITE_DROP_TRIGGER ** SQLITE_DROP_VIEW ** SQLITE_INSERT ** SQLITE_PRAGMA ** SQLITE_READ ** SQLITE_SELECT ** SQLITE_TRANSACTION ** SQLITE_UPDATE ** ** The third and fourth arguments to the auth function are the name of ** the table and the column that are being accessed. The auth function ** should return either SQLITE_OK, SQLITE_DENY, or SQLITE_IGNORE. If ** SQLITE_OK is returned, it means that access is allowed. SQLITE_DENY ** means that the SQL statement will never-run - the sqlite3_exec() call ** will return with an error. SQLITE_IGNORE means that the SQL statement ** should run but attempts to read the specified column will return NULL ** and attempts to write the column will be ignored. ** ** Setting the auth function to NULL disables this hook. The default ** setting of the auth function is NULL. 
Name: sqliteAuthBadReturnCode; Comment: ** Write an error message into pParse->zErrMsg that explains that the ** user-supplied authorization function returned an illegal value. 
Name: sqlite3AuthCheck; Comment: ** Do an authorization check using the code and arguments given. Return ** either SQLITE_OK (zero) or SQLITE_IGNORE or SQLITE_DENY. If SQLITE_DENY ** is returned, then the error count and error message in pParse are ** modified appropriately. 
Name: sqlite3AuthContextPush; Comment: ** Push an authorization context. After this routine is called, the ** zArg3 argument to authorization callbacks will be zContext until ** popped. Or if pParse==0, this routine is a no-op. 
Name: sqlite3AuthContextPop; Comment: ** Pop an authorization context that was previously pushed ** by sqlite3AuthContextPush 
Name: codeTableLocks; Comment: ** Code an OP_TableLock instruction for each table locked by the ** statement (configured by calls to sqlite3TableLock()). 
Name: sqlite3FinishCoding; Comment: ** This routine is called after a single SQL statement has been ** parsed and a VDBE program to execute that statement has been ** prepared. This routine puts the finishing touches on the ** VDBE program and resets the pParse structure for the next ** parse. ** ** Note that if an error occurred, it might be the case that ** no VDBE code was generated. 
Name: sqlite3NestedParse; Comment: ** Run the parser and code generator recursively in order to generate ** code for the SQL statement given onto the end of the pParse context ** currently under construction. When the parser is run recursively ** this way, the final OP_Halt is not appended and other initialization ** and finalization steps are omitted because those are handling by the ** outermost parser. ** ** Not everything is nestable. This facility is designed to permit ** INSERT, UPDATE, and DELETE operations against the schema table. Use ** care if you decide to try to use this routine for some other purposes. 
Name: sqlite3UserAuthTable; Comment: ** Return TRUE if zTable is the name of the system table that stores the ** list of users and their access credentials. 
Name: sqlite3FindTable; Comment: ** Locate the in-memory structure that describes a particular database ** table given the name of that table and (optionally) the name of the ** database containing the table. Return NULL if not found. ** ** If zDatabase is 0, all databases are searched for the table and the ** first matching table is returned. (No checking for duplicate table ** names is done.) The search order is TEMP first, then MAIN, then any ** auxiliary databases added using the ATTACH command. ** ** See also sqlite3LocateTable(). 
Name: sqlite3LocateTableItem; Comment: ** Locate the table identified by *p. ** ** This is a wrapper around sqlite3LocateTable(). The difference between ** sqlite3LocateTable() and this function is that this function restricts ** the search to schema (p->pSchema) if it is not NULL. p->pSchema may be ** non-NULL if it is part of a view or trigger program definition. See ** sqlite3FixSrcList() for details. 
Name: sqlite3FindIndex; Comment: ** Locate the in-memory structure that describes ** a particular index given the name of that index ** and the name of the database that contains the index. ** Return NULL if not found. ** ** If zDatabase is 0, all databases are searched for the ** table and the first matching index is returned. (No checking ** for duplicate index names is done.) The search order is ** TEMP first, then MAIN, then any auxiliary databases added ** using the ATTACH command. 
Name: sqlite3FreeIndex; Comment: ** Reclaim the memory used by an index 
Name: sqlite3UnlinkAndDeleteIndex; Comment: ** For the index called zIdxName which is found in the database iDb, ** unlike that index from its Table then remove the index from ** the index hash table and free all memory structures associated ** with the index. 
Name: sqlite3CollapseDatabaseArray; Comment: ** Look through the list of open database files in db->aDb[] and if ** any have been closed, remove them from the list. Reallocate the ** db->aDb[] structure to a smaller size, if possible. ** ** Entry 0 (the "main" database) and entry 1 (the "temp" database) ** are never candidates for being collapsed. 
Name: sqlite3ResetOneSchema; Comment: ** Reset the schema for the database at index iDb. Also reset the ** TEMP schema. The reset is deferred if db->nSchemaLock is not zero. ** Deferred resets may be run by calling with iDb<0. 
Name: sqlite3ResetAllSchemasOfConnection; Comment: ** Erase all schema information from all attached databases (including ** "main" and "temp") for a single database connection. 
Name: sqlite3CommitInternalChanges; Comment: ** This routine is called when a commit occurs. 
Name: sqlite3DeleteColumnNames; Comment: ** Delete memory allocated for the column names of a table or view (the ** Table.aCol[] array). 
Name: deleteTable; Comment: ** Remove the memory data structures associated with the given ** Table. No changes are made to disk by this routine. ** ** This routine just deletes the data structure. It does not unlink ** the table data structure from the hash table. But it does destroy ** memory structures of the indices and foreign keys associated with ** the table. ** ** The db parameter is optional. It is needed if the Table object ** contains lookaside memory. (Table objects in the schema do not use ** lookaside memory, but some ephemeral Table objects do.) Or the ** db parameter can be used with db->pnBytesFreed to measure the memory ** used by the Table object. 
Name: sqlite3UnlinkAndDeleteTable; Comment: ** Unlink the given table from the hash tables and the delete the ** table structure with all its indices and foreign keys. 
Name: sqlite3NameFromToken; Comment: ** Given a token, return a string that consists of the text of that ** token. Space to hold the returned string ** is obtained from sqliteMalloc() and must be freed by the calling ** function. ** ** Any quotation marks (ex: "name", 'name', [name], or `name`) that ** surround the body of the token are removed. ** ** Tokens are often just pointers into the original SQL text and so ** are not _000 terminated and are not persistent. The returned string ** is _000 terminated and is persistent. 
Name: sqlite3OpenSchemaTable; Comment: ** Open the sqlite_schema table stored in database number iDb for ** writing. The table is opened using cursor 0. 
Name: sqlite3FindDbName; Comment: ** Parameter zName points to a nul-terminated buffer containing the name ** of a database ("main", "temp" or the name of an attached db). This ** function returns the index of the named database in db->aDb[], or ** -1 if the named db cannot be found. 
Name: sqlite3FindDb; Comment: ** The token *pName contains the name of a database (either "main" or ** "temp" or the name of an attached db). This routine returns the ** index of the named database in db->aDb[], or -1 if the named db ** does not exist. 
Name: sqlite3WritableSchema; Comment: ** True if PRAGMA writable_schema is ON 
Name: sqlite3PrimaryKeyIndex; Comment: ** Return the PRIMARY KEY index of a table 
Name: sqlite3TableColumnToIndex; Comment: ** Convert an table column number into a index column number. That is, ** for the column iCol in the table (as defined by the CREATE TABLE statement) ** find the (first) offset of that column in index pIdx. Or return -1 ** if column iCol is not used in index pIdx. 
Name: sqlite3StorageColumnToTable; Comment: Convert a storage column number into a table column number.** ** The storage column number (0,1,2,....) is the index of the value ** as it appears in the record on disk. The true column number ** is the index (0,1,2,...) of the column in the CREATE TABLE statement. ** ** The storage column number is less than the table column number if ** and only there are VIRTUAL columns to the left. ** ** If SQLITE_OMIT_GENERATED_COLUMNS, this routine is a no-op macro. 
Name: sqlite3TableColumnToStorage; Comment: None** -- 0 1 2 3 4 5 6 7 8 ** ** Then the mapping from this function is as follows: ** ** INPUTS: 0 1 2 3 4 5 6 7 8 ** OUTPUTS: 0 1 6 2 3 7 4 5 8 ** ** So, in other words, this routine shifts all the virtual columns to ** the end. ** ** If SQLITE_OMIT_GENERATED_COLUMNS then there are no virtual columns and ** this routine is a no-op macro. If the pTab does not have any virtual ** columns, then this routine is no-op that always return iCol. If iCol ** is negative (indicating the ROWID column) then this routine return iCol. 
Name: sqlite3AddColumn; Comment: ** Add a new column to the table currently being constructed. ** ** The parser calls this routine once for each column declaration ** in a CREATE TABLE statement. sqlite3StartTable() gets called ** first to get things going. Then this routine is called for each ** column. 
Name: sqlite3AddNotNull; Comment: ** This routine is called by the parser while in the middle of ** parsing a CREATE TABLE statement. A "NOT NULL" constraint has ** been seen on a column. This routine sets the notNull flag on ** the column currently under construction. 
Name: sqlite3AffinityType; Comment: ** Scan the column type name zType (length nType) and return the ** associated affinity type. ** ** This routine does a case-independent search of zType for the ** substrings in the following table. If one of the substrings is ** found, the corresponding affinity is returned. If zType contains ** more than one of the substrings, entries toward the top of ** the table take priority. For example, if zType is 'BLOBINT', ** SQLITE_AFF_INTEGER is returned. ** ** Substring | Affinity ** -------------------------------- ** 'INT' | SQLITE_AFF_INTEGER ** 'CHAR' | SQLITE_AFF_TEXT ** 'CLOB' | SQLITE_AFF_TEXT ** 'TEXT' | SQLITE_AFF_TEXT ** 'BLOB' | SQLITE_AFF_BLOB ** 'REAL' | SQLITE_AFF_REAL ** 'FLOA' | SQLITE_AFF_REAL ** 'DOUB' | SQLITE_AFF_REAL ** ** If none of the substrings in the above table are found, ** SQLITE_AFF_NUMERIC is returned. 
Name: sqlite3StringToId; Comment: None** ** This is goofy. But to preserve backwards compatibility we continue to ** accept it. This routine does the necessary conversion. It converts ** the expression given in its argument from a TK_STRING into a TK_ID ** if the expression is just a TK_STRING with an optional COLLATE clause. ** If the expression is anything other than TK_STRING, the expression is ** unchanged. 
Name: makeColumnPartOfPrimaryKey; Comment: ** Tag the given column as being part of the PRIMARY KEY 
Name: sqlite3AddCollateType; Comment: ** Set the collation function of the most recently parsed table column ** to the CollSeq given. 
Name: sqlite3AddGenerated; Comment: Change the most recently parsed column to be a GENERATED ALWAYS AS** column. 
Name: sqlite3ChangeCookie; Comment: ** Generate code that will increment the schema cookie. ** ** The schema cookie is used to determine when the schema for the ** database changes. After each schema change, the cookie value ** changes. When a process first reads the schema it records the ** cookie. Thereafter, whenever it goes to access the database, ** it checks the cookie to make sure the schema has not changed ** since it was last read. ** ** This plan is not completely bullet-proof. It is possible for ** the schema to change multiple times and for the cookie to be ** set back to prior value. But schema changes are infrequent ** and the probability of hitting the same cookie value is only ** 1 chance in 2^32. So we're safe enough. ** ** IMPLEMENTATION-OF: R-34230-56049 SQLite automatically increments ** the schema-version whenever the schema changes. 
Name: identLength; Comment: ** Measure the number of characters needed to output the given ** identifier. The number returned includes any quotes used ** but does not include the null terminator. ** ** The estimate is conservative. It might be larger that what is ** really needed. 
Name: identPut; Comment: ** The first parameter is a pointer to an output buffer. The second ** parameter is a pointer to an integer that contains the offset at ** which to write into the output buffer. This function copies the ** nul-terminated string pointed to by the third parameter, zSignedIdent, ** to the specified offset in the buffer and updates *pIdx to refer ** to the first byte after the last byte written before returning. ** ** If the string zSignedIdent consists entirely of alpha-numeric ** characters, does not begin with a digit and is not an SQL keyword, ** then it is copied to the output buffer exactly as it is. Otherwise, ** it is quoted using double-quotes. 
Name: createTableStmt; Comment: ** Generate a CREATE TABLE statement appropriate for the given ** table. Memory to hold the text of the statement is obtained ** from sqliteMalloc() and must be freed by the calling function. 
Name: resizeIndexObject; Comment: ** Resize an Index object to hold N columns total. Return SQLITE_OK ** on success and SQLITE_NOMEM on an OOM error. 
Name: estimateTableWidth; Comment: ** Estimate the total row width for a table. 
Name: estimateIndexWidth; Comment: ** Estimate the average size of a row for an index. 
Name: hasColumn; Comment: Return true if column number x is any of the first nCol entries of aiCol[].** This is used to determine if the column number x appears in any of the ** first nCol entries of an index. 
Name: isDupColumn; Comment: ** Return true if any of the first nKey entries of index pIdx exactly ** match the iCol-th entry of pPk. pPk is always a WITHOUT ROWID ** PRIMARY KEY index. pIdx is an index on the same table. pIdx may ** or may not be the same index as pPk. ** ** The first nKey entries of pIdx are guaranteed to be ordinary columns, ** not a rowid or expression. ** ** This routine differs from hasColumn() in that both the column and the ** collating sequence must match for this routine, but for hasColumn() only ** the column name must match. 
Name: recomputeColumnsNotIndexed; Comment: Recompute the colNotIdxed field of the Index.** ** colNotIdxed is a bitmask that has a 0 bit representing each indexed ** columns that are within the first 63 columns of the table. The ** high-order bit of colNotIdxed is always 1. All unindexed columns ** of the table have a 1. ** ** 2019-10-24: For the purpose of this computation, virtual columns are ** not considered to be covered by the index, even if they are in the ** index, because we do not trust the logic in whereIndexExprTrans() to be ** able to find all instances of a reference to the indexed table column ** and convert them into references to the index. Hence we always want ** the actual table at hand in order to recompute the virtual column, if ** necessary. ** ** The colNotIdxed mask is AND-ed with the SrcList.a[].colUsed mask ** to determine if the index is covering index. 
Name: convertToWithoutRowidTable; Comment: ** This routine runs at the end of parsing a CREATE TABLE statement that ** has a WITHOUT ROWID clause. The job of this routine is to convert both ** internal schema data structures and the generated VDBE code so that they ** are appropriate for a WITHOUT ROWID table instead of a rowid table. ** Changes include: ** ** (1) Set all columns of the PRIMARY KEY schema object to be NOT NULL. ** (2) Convert P3 parameter of the OP_CreateBtree from BTREE_INTKEY ** into BTREE_BLOBKEY. ** (3) Bypass the creation of the sqlite_schema table entry ** for the PRIMARY KEY as the primary key index is now ** identified by the sqlite_schema table entry of the table itself. ** (4) Set the Index.tnum of the PRIMARY KEY Index object in the ** schema to the rootpage from the main table. ** (5) Add all table columns to the PRIMARY KEY Index object ** so that the PRIMARY KEY is a covering index. The surplus ** columns are part of KeyInfo.nAllField and are not used for ** sorting or lookup or uniqueness checks. ** (6) Replace the rowid tail on all automatically generated UNIQUE ** indices with the PRIMARY KEY columns. ** ** For virtual tables, only (1) is performed. 
Name: sqlite3IsShadowTableOf; Comment: ** Return true if pTab is a virtual table and zName is a shadow table name ** for that virtual table. 
Name: sqlite3ShadowTableName; Comment: ** Return true if zName is a shadow table name in the current database ** connection. ** ** zName is temporarily modified while this routine is running, but is ** restored to its original value prior to this routine returning. 
Name: markImmutableExprStep; Comment: ** Mark all nodes of an expression as EP_Immutable, indicating that ** they should not be changed. Expressions attached to a table or ** index definition are tagged this way to help ensure that we do ** not pass them into code generator routines by mistake. 
Name: sqlite3ViewGetColumnNames; Comment: ** The Table structure pTable is really a VIEW. Fill in the names of ** the columns of the view in the pTable structure. Return the number ** of errors. If an error is seen leave an error message in pParse->zErrMsg. 
Name: sqliteViewResetAll; Comment: ** Clear the column names from every VIEW in database idx. 
Name: destroyRootPage; Comment: ** Write code to erase the table with root-page iTable from database iDb. ** Also write code to modify the sqlite_schema table and internal schema ** if a root-page of another table is moved by the btree-layer whilst ** erasing iTable (this can happen with an auto-vacuum database). 
Name: destroyTable; Comment: ** Write VDBE code to erase table pTab and all associated indices on disk. ** Code to update the sqlite_schema tables and internal schema definitions ** in case a root-page belonging to another table is moved by the btree layer ** is also added (this can happen with an auto-vacuum database). 
Name: sqlite3CodeDropTable; Comment: ** Generate code to drop a table. 
Name: sqlite3ReadOnlyShadowTables; Comment: ** Return TRUE if shadow tables should be read-only in the current ** context. 
Name: tableMayNotBeDropped; Comment: ** Return true if it is not allowed to drop the given table 
Name: sqlite3DropTable; Comment: ** This routine is called to do the work of a DROP TABLE statement. ** pName is the name of the table to be dropped. 
Name: sqlite3DeferForeignKey; Comment: ** This routine is called when an INITIALLY IMMEDIATE or INITIALLY DEFERRED ** clause is seen as part of a foreign key definition. The isDeferred ** parameter is 1 for INITIALLY DEFERRED and 0 for INITIALLY IMMEDIATE. ** The behavior of the most recently created foreign key is adjusted ** accordingly. 
Name: sqlite3RefillIndex; Comment: ** Generate code that will erase and refill index *pIdx. This is ** used to initialize a newly created index or to recompute the ** content of an index in response to a REINDEX command. ** ** if memRootPage is not negative, it means that the index is newly ** created. The register specified by memRootPage contains the ** root page number of the index. If memRootPage is negative, then ** the index already exists and must be cleared before being refilled and ** the root page number of the index is taken from pIndex->tnum. 
Name: sqlite3HasExplicitNulls; Comment: ** If expression list pList contains an expression that was parsed with ** an explicit "NULLS FIRST" or "NULLS LAST" clause, leave an error in ** pParse and return non-zero. Otherwise, return zero. 
Name: sqlite3DefaultRowEst; Comment: ** Fill the Index.aiRowEst[] array with default information - information ** to be used when we have not run the ANALYZE command. ** ** aiRowEst[0] is supposed to contain the number of elements in the index. ** Since we do not know, guess 1 million. aiRowEst[1] is an estimate of the ** number of rows in the table that match any particular value of the ** first column of the index. aiRowEst[2] is an estimate of the number ** of rows that match any particular combination of the first 2 columns ** of the index. And so forth. It must always be the case that** aiRowEst[N]<=aiRowEst[N-1] ** aiRowEst[N]>=1 ** ** Apart from that, we have little to go on besides intuition as to ** how aiRowEst[] should be initialized. The numbers generated here ** are based on typical values found in actual indices. 
Name: sqlite3DropIndex; Comment: ** This routine will drop an existing named index. This routine ** implements the DROP INDEX statement. 
Name: sqlite3IdListAppend; Comment: ** Append a new element to the given IdList. Create a new IdList if ** need be. ** ** A new IdList is returned, or NULL if malloc() fails. 
Name: sqlite3IdListDelete; Comment: ** Delete an IdList. 
Name: sqlite3IdListIndex; Comment: ** Return the index in pList of the identifier named zId. Return -1 ** if not found. 
Name: sqlite3SrcListAssignCursors; Comment: ** Assign VdbeCursor index numbers to all tables in a SrcList 
Name: sqlite3SrcListDelete; Comment: ** Delete an entire SrcList including all its substructure. 
Name: sqlite3SrcListIndexedBy; Comment: ** Add an INDEXED BY or NOT INDEXED clause to the most recently added ** element of the source-list passed as the second argument. 
Name: sqlite3SrcListAppendList; Comment: ** Append the contents of SrcList p2 to SrcList p1 and return the resulting ** SrcList. Or, if an error occurs, return NULL. In all cases, p1 and p2 ** are deleted by this function. 
Name: sqlite3SrcListFuncArgs; Comment: ** Add the list of function arguments to the SrcList entry for a ** table-valued-function. 
Name: sqlite3SrcListShiftJoinType; Comment: ** When building up a FROM clause in the parser, the join operator ** is initially attached to the left operand. But the code generator ** expects the join operator to be on the right operand. This routine ** Shifts all join operators from left to right for an entire FROM ** clause. ** ** Example: Suppose the join is like this: ** ** A natural cross join B ** ** The operator is "natural cross join". The A and B operands are stored ** in p->a[0] and p->a[1], respectively. The parser initially stores the ** operator with A. This routine shifts that operator over to B. 
Name: sqlite3BeginTransaction; Comment: ** Generate VDBE code for a BEGIN statement. 
Name: sqlite3EndTransaction; Comment: ** Generate VDBE code for a COMMIT or ROLLBACK statement. ** Code for ROLLBACK is generated if eType==TK_ROLLBACK. Otherwise ** code is generated for a COMMIT. 
Name: sqlite3Savepoint; Comment: ** This function is called by the parser when it parses a command to create, ** release or rollback an SQL savepoint. 
Name: sqlite3OpenTempDatabase; Comment: ** Make sure the TEMP database is open and available for use. Return ** the number of errors. Leave any error messages in the pParse structure. 
Name: sqlite3CodeVerifySchemaAtToplevel; Comment: ** Record the fact that the schema cookie will need to be verified ** for database iDb. The code to actually verify the schema cookie ** will occur at the end of the top-level VDBE and will be generated ** later, by sqlite3FinishCoding(). 
Name: sqlite3CodeVerifyNamedSchema; Comment: ** If argument zDb is NULL, then call sqlite3CodeVerifySchema() for each ** attached database. Otherwise, invoke it for the database named zDb only. 
Name: sqlite3BeginWriteOperation; Comment: ** Generate VDBE code that prepares for doing an operation that ** might change the database. ** ** This routine starts a new transaction if we are not already within ** a transaction. If we are already within a transaction, then a checkpoint ** is set if the setStatement parameter is true. A checkpoint should ** be set for operations that might fail (due to a constraint) part of ** the way through and which will need to undo some writes without having to ** rollback the whole transaction. For operations where all constraints ** can be checked before any changes are made to the database, it is never ** necessary to undo a write and the checkpoint should not be set. 
Name: sqlite3MultiWrite; Comment: ** Indicate that the statement currently under construction might write ** more than one entry (example: deleting one row then inserting another, ** inserting multiple rows in a table, or inserting a row and index entries.) ** If an abort occurs after some of these writes have completed, then it will ** be necessary to undo the completed writes. 
Name: sqlite3MayAbort; Comment: ** The code generator calls this routine if is discovers that it is ** possible to abort a statement prior to completion. In order to ** perform this abort without corrupting the database, we need to make ** sure that the statement is protected by a statement transaction. ** ** Technically, we only need to set the mayAbort flag if the ** isMultiWrite flag was previously set. There is a time dependency ** such that the abort must occur after the multiwrite. This makes ** some statements involving the REPLACE conflict resolution algorithm ** go a little faster. But taking advantage of this time dependency ** makes it more difficult to prove that the code is correct (in ** particular, it prevents us from writing an effective ** implementation of sqlite3AssertMayAbort()) and so we have chosen ** to take the safe route and skip the optimization. 
Name: sqlite3KeyInfoOfIndex; Comment: ** Return a KeyInfo structure that is appropriate for the given Index. ** ** The caller should invoke sqlite3KeyInfoUnref() on the returned object ** when it has finished using it. 
Name: sqlite3WithDelete; Comment: ** Free the contents of the With object passed as the second argument. 
Name: callCollNeeded; Comment: ** Invoke the 'collation needed' callback to request a collation sequence ** in the encoding enc of name zName, length nName. 
Name: synthCollSeq; Comment: ** This routine is called if the collation factory fails to deliver a ** collation function in the best encoding but there may be other versions ** of this collation function (for other text encodings) available. Use one ** of these instead if they exist. Avoid a UTF-8 <-> UTF-16 conversion if ** possible. 
Name: sqlite3CheckCollSeq; Comment: ** This routine is called on a collation sequence before it is used to ** check that it is defined. An undefined collation sequence exists when ** a database is loaded that contains references to collation sequences ** that have not been defined by sqlite3_create_collation() etc. ** ** If required, this routine calls the 'collation needed' callback to ** request a definition of the collating sequence. If this doesn't work, ** an equivalent collating sequence that uses a text encoding different ** from the main database is substituted, if one is available. 
Name: sqlite3SetTextEncoding; Comment: ** Change the text encoding for a database connection. This means that ** the pDfltColl must change as well. 
Name: sqlite3LocateCollSeq; Comment: ** This function returns the collation sequence for database native text ** encoding identified by the string zName. ** ** If the requested collation sequence is not available, or not available ** in the database native encoding, the collation factory is invoked to ** request it. If the collation factory does not supply such a sequence, ** and the sequence is available in another text encoding, then that is ** returned instead. ** ** If no versions of the requested collations sequence are available, or ** another error occurs, NULL is returned and an error message written into ** pParse. ** ** This routine is a wrapper around sqlite3FindCollSeq(). This routine ** invokes the collation factory if the named collation cannot be found ** and generates an error message. ** ** See also: sqlite3FindCollSeq(), sqlite3GetCollSeq() 
Name: sqlite3SchemaClear; Comment: ** Free all resources held by the schema structure. The void* argument points ** at a Schema struct. This function does not call sqlite3DbFree(db, ) on the ** pointer itself, it just cleans up subsidiary resources (i.e. the contents ** of the schema hash tables). ** ** The Schema.cache_size variable is not cleared. 
Name: sqlite3SchemaGet; Comment: ** Find and return the schema associated with a BTree. Create ** a new one if necessary. 
Name: sqlite3SrcListLookup; Comment: ** While a SrcList can in general represent multiple tables and subqueries ** (as in the FROM clause of a SELECT statement) in this case it contains ** the name of a single table, as one might find in an INSERT, DELETE, ** or UPDATE statement. Look up that table in the symbol table and ** return a pointer. Set an error message and return NULL if the table ** name is not found or if any other error occurs. ** ** The following fields are initialized appropriate in pSrc: ** ** pSrc->a[0].pTab Pointer to the Table object ** pSrc->a[0].pIndex Pointer to the INDEXED BY index, if there is one ** 
Name: tabIsReadOnly; Comment: Return true if table pTab is read-only.** ** A table is read-only if any of the following are true: ** ** 1) It is a virtual table and no implementation of the xUpdate method ** has been provided ** ** 2) It is a system table (i.e. sqlite_schema), this call is not ** part of a nested parse and writable_schema pragma has not ** been specified ** ** 3) The table is a shadow table, the database connection is in ** defensive mode, and the current sqlite3_prepare() ** is for a top-level SQL statement. 
Name: sqlite3ResolvePartIdxLabel; Comment: ** If a prior call to sqlite3GenerateIndexKey() generated a jump-over label ** because it was a partial index, then this routine should be called to ** resolve that label. 
Name: sqlite3GetFuncCollSeq; Comment: ** Return the collating function associated with a function. 
Name: sqlite3SkipAccumulatorLoad; Comment: ** Indicate that the accumulator load should be skipped on this ** iteration of the aggregate loop. 
Name: minmaxFunc; Comment: ** Implementation of the non-aggregate min() and max() functions 
Name: typeofFunc; Comment: ** Return the type of the argument. 
Name: lengthFunc; Comment: ** Implementation of the length() function 
Name: absFunc; Comment: ** Implementation of the abs() function. ** ** IMP: R-23979-26855 The abs(X) function returns the absolute value of ** the numeric argument X. 
Name: instrFunc; Comment: ** Implementation of the instr() function. ** ** instr(haystack,needle) finds the first occurrence of needle ** in haystack and returns the number of previous characters plus 1, ** or 0 if needle does not occur within haystack. ** ** If both haystack and needle are BLOBs, then the result is one more than ** the number of bytes in haystack prior to the first occurrence of needle, ** or 0 if needle never occurs in haystack. 
Name: printfFunc; Comment: ** Implementation of the printf() function. 
Name: substrFunc; Comment: ** Implementation of the substr() function. ** ** substr(x,p1,p2) returns p2 characters of x[] beginning with p1. ** p1 is 1-indexed. So substr(x,1,1) returns the first character ** of x. If x is text, then we actually count UTF-8 characters. ** If x is a blob, then we count bytes. ** ** If p1 is negative, then we begin abs(p1) from the end of x[]. ** ** If p2 is negative, return the p2 characters preceding p1. 
Name: contextMalloc; Comment: ** Allocate nByte bytes of space using sqlite3Malloc(). If the ** allocation fails, call sqlite3_result_error_nomem() to notify ** the database handle that malloc() has failed and return NULL. ** If nByte is larger than the maximum string or blob length, then ** raise an SQLITE_TOOBIG exception and return NULL. 
Name: upperFunc; Comment: ** Implementation of the upper() and lower() SQL functions. 
Name: randomFunc; Comment: ** Implementation of random(). Return a random integer. 
Name: randomBlob; Comment: ** Implementation of randomblob(N). Return a random blob ** that is N bytes long. 
Name: last_insert_rowid; Comment: ** Implementation of the last_insert_rowid() SQL function. The return ** value is the same as the sqlite3_last_insert_rowid() API function. 
Name: changes; Comment: ** Implementation of the changes() SQL function. ** ** IMP: R-62073-11209 The changes() SQL function is a wrapper ** around the sqlite3_changes() C/C++ function and hence follows the same ** rules for counting changes. 
Name: total_changes; Comment: ** Implementation of the total_changes() SQL function. The return value is ** the same as the sqlite3_total_changes() API function. 
Name: sqlite3_strglob; Comment: ** The sqlite3_strglob() interface. Return 0 on a match (like strcmp()) and ** non-zero if there is no match. 
Name: sqlite3_strlike; Comment: ** The sqlite3_strlike() interface. Return 0 on a match and non-zero for ** a miss - like strcmp(). 
Name: likeFunc; Comment: ** Implementation of the like() SQL function. This function implements ** the build-in LIKE operator. The first argument to the function is the ** pattern and the second argument is the string. So, the SQL statements: ** ** A LIKE B ** ** is implemented as like(B,A). ** ** This same function (with a different compareInfo structure) computes ** the GLOB operator. 
Name: nullifFunc; Comment: ** Implementation of the NULLIF(x,y) function. The result is the first ** argument if the arguments are different. The result is NULL if the ** arguments are equal to each other. 
Name: versionFunc; Comment: ** Implementation of the sqlite_version() function. The result is the version ** of the SQLite library that is running. 
Name: sourceidFunc; Comment: ** Implementation of the sqlite_source_id() function. The result is a string ** that identifies the particular version of the source code used to build ** SQLite. 
Name: errlogFunc; Comment: ** Implementation of the sqlite_log() function. This is a wrapper around ** sqlite3_log(). The return value is NULL. The function exists purely for ** its side-effects. 
Name: quoteFunc; Comment: ** Implementation of the QUOTE() function. This function takes a single ** argument. If the argument is numeric, the return value is the same as ** the argument. If the argument is NULL, the return value is the string ** "NULL". Otherwise, the argument is enclosed in single quotes with ** single-quote escapes. 
Name: unicodeFunc; Comment: ** The unicode() function. Return the integer unicode code-point value ** for the first character of the input string. 
Name: charFunc; Comment: ** The char() function takes zero or more arguments, each of which is ** an integer. It constructs a string where each character of the string ** is the unicode character for the corresponding integer argument. 
Name: hexFunc; Comment: ** The hex() function. Interpret the argument as a blob. Return ** a hexadecimal rendering as text. 
Name: zeroblobFunc; Comment: ** The zeroblob(N) function returns a zero-filled blob of size N bytes. 
Name: replaceFunc; Comment: ** The replace() function. Three arguments are all strings: call ** them A, B, and C. The result is also a string which is derived ** from A by replacing every occurrence of B with C. The match ** must be exact. Collating sequences are not used. 
Name: trimFunc; Comment: ** Implementation of the TRIM(), LTRIM(), and RTRIM() functions. ** The userdata is 0x1 for left trim, 0x2 for right trim, 0x3 for both. 
Name: unknownFunc; Comment: ** The "unknown" function is automatically substituted in place of ** any unrecognized function name when doing an EXPLAIN or EXPLAIN QUERY PLAN ** when the SQLITE_ENABLE_UNKNOWN_FUNCTION compile-time option is used. ** When the "sqlite3" command-line shell is built using this functionality, ** that allows an EXPLAIN or EXPLAIN QUERY PLAN for complex queries ** involving application-defined functions to be examined in a generic ** sqlite3 shell. 
Name: soundexFunc; Comment: ** Compute the soundex encoding of a word. ** ** IMP: R-59782-00072 The soundex(X) function returns a string that is the ** soundex encoding of the string X. 
Name: loadExt; Comment: ** A function that loads a shared-library extension then returns NULL. 
Name: sumStep; Comment: ** Routines used to compute the sum, average, and total. ** ** The SUM() function follows the (broken) SQL standard which means ** that it returns NULL if it sums over no inputs. TOTAL returns ** 0.0 in that case. In addition, TOTAL always returns a float where ** SUM might return an integer if it never encounters a floating point ** value. TOTAL never fails, but SUM might through an exception if ** it overflows an integer. 
Name: countStep; Comment: ** Routines to implement the count() aggregate function. 
Name: minmaxStep; Comment: ** Routines to implement min() and max() aggregate functions. 
Name: groupConcatStep; Comment: ** group_concat(EXPR, ?SEPARATOR?) 
Name: sqlite3RegisterPerConnectionBuiltinFunctions; Comment: ** This routine does per-connection function registration. Most ** of the built-in functions above are part of the global function set. ** This routine only deals with those that are not global. 
Name: sqlite3RegisterLikeFunctions; Comment: ** Re-register the built-in LIKE functions. The caseSensitive ** parameter determines whether or not the LIKE operator is case ** sensitive. 
Name: sqlite3IsLikeFunction; Comment: ** pExpr points to an expression which implements a function. If ** it is appropriate to apply the LIKE optimization to that function ** then set aWc[0] through aWc[2] to the wildcard characters and the ** escape character and then return TRUE. If the function is not a ** LIKE-style function then return FALSE. ** ** The expression "a LIKE b ESCAPE c" is only considered a valid LIKE ** operator if c is a string literal that is exactly one byte in length. ** That one byte is stored in aWc[3]. aWc[3] is set to zero if there is ** no ESCAPE clause. ** ** *pIsNocase is set to true if uppercase and lowercase are equivalent for ** the function (default for LIKE). If the function makes the distinction ** between uppercase and lowercase (as does GLOB) then *pIsNocase is set to ** false. 
Name: sqlite3RegisterBuiltinFunctions; Comment: ** All of the FuncDef structures in the aBuiltinFunc[] array above ** to the global function hash table. This occurs at start-time (as ** a consequence of calling sqlite3_initialize()). ** ** After this routine runs 
Name: sqlite3FkReferences; Comment: None** ** Calling this function with table "t1" as an argument returns a pointer ** to the FKey structure representing the foreign key constraint on table ** "t2". Calling this function with "t2" as the argument would return a ** NULL pointer (as there are no FK constraints for which t2 is the parent ** table). 
Name: fkTriggerDelete; Comment: ** The second argument is a Trigger structure allocated by the ** fkActionTrigger() routine. This function deletes the Trigger structure ** and all of its sub-components. ** ** The Trigger structure or any of its sub-components may be allocated from ** the lookaside buffer belonging to database handle dbMem. 
Name: sqlite3FkDropTable; Comment: ** This function is called to generate code that runs when table pTab is ** being dropped from the database. The SrcList passed as the second argument ** to this function contains a single entry guaranteed to resolve to ** table pTab. ** ** Normally, no code is required. However, if either ** ** (a) The table is the parent table of a FK constraint, or ** (b) The table is the child table of a deferred FK constraint and it is ** determined at runtime that there are outstanding deferred FK ** constraint violations in the database, ** ** then the equivalent of "DELETE FROM <tbl>" is executed before dropping ** the table from the database. Triggers are disabled while running this ** DELETE, but foreign key actions are not. 
Name: fkParentIsModified; Comment: ** The second argument points to an FKey object representing a foreign key ** for which pTab is the parent table. An UPDATE statement against pTab ** is currently being processed. For each column of the table that is ** actually updated, the corresponding element in the aChange[] array ** is zero or greater (if a column is unmodified the corresponding element ** is set to -1). If the rowid column is modified by the UPDATE statement ** the bChngRowid argument is non-zero. ** ** This function returns true if any of the columns that are part of the ** parent key for FK constraint *p are modified. 
Name: isSetNullAction; Comment: ** Return true if the parser passed as the first argument is being ** used to code a trigger that is really a "SET NULL" action belonging ** to trigger pFKey. 
Name: sqlite3FkDelete; Comment: ** Free all memory associated with foreign key definitions attached to ** table pTab. Remove the deleted foreign keys from the Schema.fkeyHash ** hash table. 
Name: sqlite3IndexAffinityStr; Comment: ** Return a pointer to the column affinity string associated with index ** pIdx. A column affinity string has one character for each column in ** the table, according to the affinity of the column: ** ** Character Column affinity ** ------------------------------ ** 'A' BLOB ** 'B' TEXT ** 'C' NUMERIC ** 'D' INTEGER ** 'F' REAL ** ** An extra 'D' is appended to the end of the string to cover the ** rowid that appears as the last column in every index. ** ** Memory for the buffer containing the column index affinity string ** is managed along with the rest of the Index structure. It will be ** released when sqlite3DeleteIndex() is called. 
Name: sqlite3TableAffinity; Comment: ** Compute the affinity string for table pTab, if it has not already been ** computed. As an optimization, omit trailing SQLITE_AFF_BLOB affinities. ** ** If the affinity exists (if it is no entirely SQLITE_AFF_BLOB values) and ** if iReg>0 then code an OP_Affinity opcode that will set the affinities ** for register iReg and following. Or if affinities exists and iReg==0, ** then just set the P4 operand of the previous opcode (which should be ** an OP_MakeRecord) to the affinity string. ** ** A column affinity string has one character per column: ** ** Character Column affinity ** ------------------------------ ** 'A' BLOB ** 'B' TEXT ** 'C' NUMERIC ** 'D' INTEGER ** 'E' REAL 
Name: readsTable; Comment: ** Return non-zero if the table pTab in database iDb or any of its indices ** have been opened at any point in the VDBE program. This is used to see if ** a statement of the form "INSERT INTO <iDb, pTab> SELECT ..." can ** run without using a temporary table for the results of the SELECT. 
Name: exprColumnFlagUnion; Comment: This walker callback will compute the union of colFlags flags for all** referenced columns in a CHECK constraint or generated column expression. 
Name: sqlite3AutoincrementBegin; Comment: ** This routine generates code that will initialize all of the ** register used by the autoincrement tracker. 
Name: autoIncStep; Comment: ** Update the maximum rowid for an autoincrement calculation. ** ** This routine should be called when the regRowid register holds a ** new rowid that is about to be inserted. If that new rowid is ** larger than the maximum rowid in the memId memory cell, then the ** memory cell is updated. 
Name: autoIncrementEnd; Comment: ** This routine generates the code needed to write autoincrement ** maximum rowid values back into the sqlite_sequence register. ** Every statement that might do an INSERT into an autoincrement ** table (either directly or through triggers) needs to call this ** routine just before the "exit" code. 
Name: checkConstraintExprNode; Comment: This is the Walker callback from sqlite3ExprReferencesUpdatedColumn().* Set bit 0x01 of pWalker->eCode if pWalker->eCode to 0 and if this ** expression node references any of the ** columns that are being modifed by an UPDATE statement. 
Name: sqlite3SetMakeRecordP5; Comment: ** Change the P5 operand on the last opcode (which should be an OP_MakeRecord) ** to be the number of columns in table pTab that must not be NULL-trimmed. ** ** Or if no columns of pTab may be NULL-trimmed, leave P5 at zero. 
Name: xferCompatibleIndex; Comment: ** Check to see if index pSrc is compatible as a source of data ** for index pDest in an insert transfer optimization. The rules ** for a compatible index: ** ** The index is over the same set of columns ** The same DESC and ASC markings occurs on all columns ** The same onError processing (OE_Abort, OE_Ignore, etc) ** The same collating sequence on each column ** The index has the exact same WHERE clause 
Name: sqlite3CloseExtensions; Comment: ** Call this routine when the database connection is closing in order ** to clean up loaded extensions 
Name: sqlite3_enable_load_extension; Comment: ** Enable or disable extension loading. Extension loading is disabled by ** default so as not to open security holes in older applications. 
Name: sqlite3_auto_extension; Comment: ** Register a statically linked extension that is automatically ** loaded by every new database connection. 
Name: sqlite3_cancel_auto_extension; Comment: ** Cancel a prior call to sqlite3_auto_extension. Remove xInit from the ** set of routines that is invoked for each new database connection, if it ** is currently on the list. If xInit is not on the list, then this ** routine is a no-op. ** ** Return 1 if xInit was found on the list and removed. Return 0 if xInit ** was not on the list. 
Name: sqlite3_reset_auto_extension; Comment: ** Reset the automatic extension loading mechanism. 
Name: sqlite3AutoLoadExtensions; Comment: ** Load all automatic extensions. ** ** If anything goes wrong, set an error in the database connection. 
Name: getSafetyLevel; Comment: ** Interpret the given string as a safety level. Return 0 for OFF, ** 1 for ON or NORMAL, 2 for FULL, and 3 for EXTRA. Return 1 for an empty or ** unrecognized string argument. The FULL and EXTRA option is disallowed ** if the omitFull parameter it 1. ** ** Note that the values returned are one less that the values that ** should be passed into sqlite3BtreeSetSafetyLevel(). The is done ** to support legacy SQL code. The safety level used to be boolean ** and older scripts may have used numbers 0 for OFF and 1 for ON. 
Name: sqlite3GetBoolean; Comment: ** Interpret the given string as a boolean value. 
Name: getLockingMode; Comment: ** Interpret the given string as a locking mode value. 
Name: getAutoVacuum; Comment: ** Interpret the given string as an auto-vacuum mode value. ** ** The following strings, "none", "full" and "incremental" are ** acceptable, as are their numeric equivalents: 0, 1 and 2 respectively. 
Name: getTempStore; Comment: ** Interpret the given string as a temp db location. Return 1 for file ** backed temporary databases, 2 for the Red-Black tree in memory database ** and 0 to use the compile-time default. 
Name: invalidateTempStorage; Comment: ** Invalidate temp storage, either when the temp storage is changed ** from default, or when 'file' and the temp_store_directory has changed 
Name: changeTempStorage; Comment: ** If the TEMP database is open, close it and mark the database schema ** as needing reloading. This must be done when using the SQLITE_TEMP_STORE ** or DEFAULT_TEMP_STORE pragmas. 
Name: returnSingleInt; Comment: ** Generate code to return a single integer value. 
Name: sqlite3JournalModename; Comment: ** Parameter eMode must be one of the PAGER_JOURNALMODE_XXX constants ** defined in pager.h. This function returns the associated lowercase ** journal-mode name. 
Name: pragmaLocate; Comment: ** Locate a pragma in the aPragmaName[] array. 
Name: integrityCheckResultRow; Comment: ** Helper subroutine for PRAGMA integrity_check: ** ** Generate code to output a single-column result row with a value of the ** string held in register 3. Decrement the result count in register 1 ** and halt if the maximum number of result rows have been issued. 
Name: pragmaVtabConnect; Comment: ** Pragma virtual table module xConnect method. 
Name: pragmaVtabDisconnect; Comment: ** Pragma virtual table module xDisconnect method. 
Name: pragmaVtabBestIndex; Comment: Figure out the best index to use to search a pragma virtual table.** ** There are not really any index choices. But we want to encourage the ** query planner to give == constraints on as many hidden parameters as ** possible, and especially on the first hidden parameter. So return a ** high cost if hidden parameters are unconstrained. 
Name: pragmaVtabOpen; Comment: Create a new cursor for the pragma virtual table 
Name: pragmaVtabCursorClear; Comment: Clear all content from pragma virtual table cursor. 
Name: pragmaVtabClose; Comment: Close a pragma virtual table cursor 
Name: pragmaVtabNext; Comment: Advance the pragma virtual table cursor to the next row 
Name: pragmaVtabFilter; Comment: ** Pragma virtual table module xFilter method. 
Name: pragmaVtabEof; Comment: ** Pragma virtual table module xEof method. 
Name: pragmaVtabColumn; Comment: The xColumn method simply returns the corresponding column from** the PRAGMA. 
Name: pragmaVtabRowid; Comment: ** Pragma virtual table module xRowid method. 
Name: sqlite3PragmaVtabRegister; Comment: ** Check to see if zTabName is really the name of a pragma. If it is, ** then register an eponymous virtual table for that pragma and return ** a pointer to the Module object for the new virtual table. 
Name: sqlite3IndexHasDuplicateRootPage; Comment: ** Check to see if any sibling index (another index on the same table) ** of pIndex has the same root page number, and if it does, return true. ** This would indicate a corrupt schema. 
Name: sqlite3InitCallback; Comment: ** This is the callback routine for the code that initializes the ** database. See sqlite3Init() below for additional information. ** This routine is also called from the OP_ParseSchema opcode of the VDBE. ** ** Each callback contains the following information: ** ** argv[0] = type of object: "table", "index", "trigger", or "view". ** argv[1] = name of thing being created ** argv[2] = associated table if an index or trigger ** argv[3] = root page number for table or index. 0 for trigger or view. ** argv[4] = SQL text for the CREATE statement. ** 
Name: sqlite3InitOne; Comment: ** Attempt to read the database schema and initialize internal ** data structures for a single database file. The index of the ** database file is given by iDb. iDb==0 is used for the main ** database. iDb==1 should never be used. iDb>=2 is used for ** auxiliary databases. Return one of the SQLITE_ error codes to ** indicate success or failure. 
Name: sqlite3Init; Comment: ** Initialize all database files - the main database file, the file ** used to store temporary tables, and any additional database files ** created using ATTACH statements. Return a success code. If an ** error occurs, write an error message into *pzErrMsg. ** ** After a database is initialized, the DB_SchemaLoaded bit is set ** bit is set in the flags field of the Db structure. 
Name: sqlite3ReadSchema; Comment: ** This routine is a no-op if the database schema is already initialized. ** Otherwise, the schema is loaded. An error code is returned. 
Name: schemaIsValid; Comment: ** Check schema cookies in all databases. If any cookie is out ** of date set pParse->rc to SQLITE_SCHEMA. If all schema cookies ** make no changes to pParse->rc. 
Name: sqlite3SchemaToIndex; Comment: ** Convert a schema pointer into the iDb index that indicates ** which database file in db->aDb[] the schema refers to. ** ** If the same database is attached more than once, the first ** attached database is returned. 
Name: agginfoFree; Comment: ** Deallocate a single AggInfo object 
Name: sqlite3ParserReset; Comment: ** Free all memory allocations in the pParse object 
Name: sqlite3Reprepare; Comment: ** Rerun the compilation of a statement after a schema change. ** ** If the statement is successfully recompiled, return SQLITE_OK. Otherwise, ** if the statement cannot be recompiled because another connection has ** locked the sqlite3_schema table, return SQLITE_LOCKED. If any other error ** occurs, return SQLITE_SCHEMA. 
Name: clearSelect; Comment: ** Delete all the content of a Select structure. Deallocate the structure ** itself depending on the value of bFree ** ** If bFree==1, call sqlite3DbFree() on the p object. ** If bFree==0, Leave the first Select object unfreed 
Name: sqlite3SelectDestInit; Comment: ** Initialize a SelectDest structure. 
Name: sqlite3SelectDelete; Comment: ** Delete the given Select structure and all of its substructures. 
Name: findRightmost; Comment: ** Return a pointer to the right-most SELECT statement in a compound. 
Name: sqlite3JoinType; Comment: ** Given 1 to 3 identifiers preceding the JOIN keyword, determine the ** type of join. Return an integer constant that expresses that type ** in terms of the following bit values: ** ** JT_INNER ** JT_CROSS ** JT_OUTER ** JT_NATURAL ** JT_LEFT ** JT_RIGHT ** ** A full outer join is the combination of JT_LEFT and JT_RIGHT. ** ** If an illegal or unsupported join type is seen, then still return ** a join type, but put an error in the pParse structure. 
Name: columnIndex; Comment: ** Return the index of a column in a table. Return -1 if the column ** is not contained in the table. 
Name: sqlite3SetJoinExpr; Comment: ** Set the EP_FromJoin property on all terms of the given expression. ** And set the Expr.iRightJoinTable to iTable for every term in the ** expression. ** ** The EP_FromJoin property is used on terms of an expression to tell ** the LEFT OUTER JOIN processing logic that this term is part of the ** join restriction specified in the ON or USING clause and not a part ** of the more general WHERE clause. These terms are moved over to the ** WHERE clause during join processing but we need to remember that they ** originated in the ON or USING clause. ** ** The Expr.iRightJoinTable tells the WHERE clause processing that the ** expression depends on table iRightJoinTable even if that table is not ** explicitly mentioned in the expression. That information is needed ** for cases like this: ** ** SELECTFROM t1 LEFT JOIN t2 ON t1.a=t2.b AND t1.x=5 ** ** The where clause needs to defer the handling of the t1.x=5 ** term until after the t2 loop of the join. In that way, a ** NULL t2 row will be inserted whenever t1.x!=5. If we do not ** defer the handling of t1.x=5, it will be processed immediately ** after the t1 loop and rows with t1.x!=5 will never appear in ** the output, which is incorrect. 
Name: unsetJoinExpr; Comment: Undo the work of sqlite3SetJoinExpr(). In the expression p, convert every** term that is marked with EP_FromJoin and iRightJoinTable==iTable into ** an ordinary term that omits the EP_FromJoin mark. ** ** This happens when a LEFT JOIN is simplified into an ordinary JOIN. 
Name: sqliteProcessJoin; Comment: ** This routine processes the join information for a SELECT statement. ** ON and USING clauses are converted into extra terms of the WHERE clause. ** NATURAL joins also create extra WHERE clause terms. ** ** The terms of a FROM clause are contained in the Select.pSrc structure. ** The left most table is the first entry in Select.pSrc. The right-most ** table is the last entry. The join operator is held in the entry to ** the left. Thus entry 0 contains the join operator for the join between ** entries 0 and 1. Any ON or USING clauses associated with the join are ** also attached to the left entry. ** ** This routine returns the number of errors encountered. 
Name: makeSorterRecord; Comment: ** Code the OP_MakeRecord instruction that generates the entry to be ** added into the sorter. ** ** Return the register in which the result is stored. 
Name: sqlite3KeyInfoAlloc; Comment: ** Allocate a KeyInfo object sufficient for an index of N key columns and ** X extra columns. 
Name: sqlite3KeyInfoUnref; Comment: ** Deallocate a KeyInfo object 
Name: sqlite3KeyInfoRef; Comment: ** Make a new pointer to a KeyInfo object 
Name: selectOpName; Comment: ** Name of the connection operator, used for error messages. 
Name: explainTempTable; Comment: ** Unless an "EXPLAIN QUERY PLAN" command is being processed, this function ** is a no-op. Otherwise, it adds a single row of output to the EQP result, ** where the caption is of the form: ** ** "USE TEMP B-TREE FOR xxx" ** ** where xxx is one of "DISTINCT", "ORDER BY" or "GROUP BY". Exactly which ** is determined by the zUsage argument. 
Name: sqlite3ResultSetOfSelect; Comment: ** Given a SELECT statement, generate a Table structure that describes ** the result set of that SELECT. 
Name: sqlite3GetVdbe; Comment: ** Get a VDBE for the given parser context. Create a new one if necessary. ** If an error occurs, return NULL and leave a message in pParse. 
Name: computeLimitRegisters; Comment: ** Compute the iLimit and iOffset fields of the SELECT based on the ** pLimit expressions. pLimit->pLeft and pLimit->pRight hold the expressions ** that appear in the original SQL statement after the LIMIT and OFFSET ** keywords. Or NULL if those keywords are omitted. iLimit and iOffset ** are the integer memory register numbers for counters used to compute ** the limit and offset. If there is no limit and/or offset, then ** iLimit and iOffset are negative. ** ** This routine changes the values of iLimit and iOffset only if ** a limit or offset is defined by pLimit->pLeft and pLimit->pRight. iLimit ** and iOffset should have been preset to appropriate default values (zero) ** prior to calling this routine. ** ** The iOffset register (if it exists) is initialized to the value ** of the OFFSET. The iLimit register is initialized to LIMIT. Register ** iOffset+1 is initialized to LIMIT+OFFSET. ** ** Only if pLimit->pLeft!=0 do the limit registers get ** redefined. The UNION ALL operator uses this property to force ** the reuse of the same limit and offset registers across multiple ** SELECT statements. 
Name: multiSelectCollSeq; Comment: ** Return the appropriate collating sequence for the iCol-th column of ** the result set for the compound-select statement "p". Return NULL if ** the column has no default collating sequence. ** ** The collating sequence for the compound select is taken from the ** left-most term of the select that has a collating sequence. 
Name: multiSelectOrderByKeyInfo; Comment: ** The select statement passed as the second parameter is a compound SELECT ** with an ORDER BY clause. This function allocates and returns a KeyInfo ** structure suitable for implementing the ORDER BY. ** ** Space to hold the KeyInfo structure is obtained from malloc. The calling ** function is responsible for ensuring that this structure is eventually ** freed. 
Name: hasAnchor; Comment: ** Return true if the SELECT statement which is known to be the recursive ** part of a recursive CTE still has its anchor terms attached. If the ** anchor terms have already been removed, then return false. 
Name: sqlite3SelectWrongNumTermsError; Comment: ** Error message for when two or more terms of a compound select have different ** size result sets. 
Name: recomputeColumnsUsedExpr; Comment: ** pSelect is a SELECT statement and pSrcItem is one item in the FROM ** clause of that SELECT. ** ** This routine scans the entire SELECT statement and recomputes the ** pSrcItem->colUsed mask. 
Name: findConstInWhere; Comment: ** Find all terms of COLUMN=VALUE or VALUE=COLUMN in pExpr where VALUE ** is a constant expression and where the term must be true because it ** is part of the AND-connected terms of the expression. For each term ** found, add it to the pConst structure. 
Name: propagateConstantExprRewrite; Comment: ** This is a Walker expression callback. pExpr is a candidate expression ** to be replaced by a value. If pExpr is equivalent to one of the ** columns named in pWalker->u.pConst, then overwrite it with its ** corresponding value. 
Name: minMaxQuery; Comment: ** The pFunc is the only aggregate function in the query. Check to see ** if the query is a candidate for the min/max optimization. ** ** If the query is a candidate for the min/max optimization, then set ** *ppMinMax to be an ORDER BY clause to be used for the optimization ** and return either WHERE_ORDERBY_MIN or WHERE_ORDERBY_MAX depending on ** whether pFunc is a min() or max() function. ** ** If the query is not a candidate for the min/max optimization, return ** WHERE_ORDERBY_NORMAL (which must be zero). ** ** This routine must be called after aggregate functions have been ** located but before their arguments have been subjected to aggregate ** analysis. 
Name: isSimpleCount; Comment: ** The select statement passed as the first argument is an aggregate query. ** The second argument is the associated aggregate-info object. This ** function tests if the SELECT is of the form: ** ** SELECT count(*) FROM <tbl> ** ** where table is a database table, not a sub-select or view. If the query ** does match this pattern, then a pointer to the Table object representing ** <tbl> is returned. Otherwise, 0 is returned. 
Name: sqlite3IndexedByLookup; Comment: ** If the source-list item passed as an argument was augmented with an ** INDEXED BY clause, then try to locate the specified index. If there ** was such a clause and the named index cannot be found, return ** SQLITE_ERROR and leave an error in pParse. Otherwise, populate ** pFrom->pIndex and return SQLITE_OK. 
Name: convertCompoundSelectToSubquery; Comment: Detect compound SELECT statements that use an ORDER BY clause with an alternative collating sequence. SELECT ... FROM t1 EXCEPT SELECT ... FROM t2 ORDER BY .. COLLATE ... These are rewritten as a subquery: SELECT FROM (SELECT ... FROM t1 EXCEPT SELECT ... FROM t2) ORDER BY ... COLLATE ... This transformation is necessary because the multiSelectOrderBy() routine above that generates the code for a compound SELECT with an ORDER BY clause uses a merge algorithm that requires the same collating sequence on the result columns as on the ORDER BY clause. See ticket http:www.sqlite.orgsrcinfo6709574d2a** ** This transformation is only needed for EXCEPT, INTERSECT, and UNION. ** The UNION ALL operator works fine with multiSelectOrderBy() even when ** there are COLLATE terms in the ORDER BY. 
Name: cannotBeFunction; Comment: ** Check to see if the FROM clause term pFrom has table-valued function ** arguments. If it does, leave an error message in pParse and return ** non-zero, since pFrom is not allowed to be a table-valued function. 
Name: sqlite3WithPush; Comment: The code generator maintains a stack of active WITH clauses** with the inner-most WITH clause being at the top of the stack. ** ** This routine pushes the WITH clause passed as the second argument ** onto the top of the stack. If argument bFree is true, then this ** WITH clause will never be popped from the stack. In this case it ** should be freed along with the Parse object. In other cases, when ** bFree==0, the With object will be freed along with the SELECT ** statement with which it is associated. 
Name: withExpand; Comment: ** This function checks if argument pFrom refers to a CTE declared by ** a WITH clause on the stack currently maintained by the parser. And, ** if currently processing a CTE expression, if it is a recursive ** reference to the current CTE. ** ** If pFrom falls into either of the two categories above, pFrom->pTab ** and other fields are populated accordingly. The caller should check ** (pFrom->pTab!=0) to determine whether or not a successful match ** was found. ** ** Whether or not a match is found, SQLITE_OK is returned if no error ** occurs. If an error does occur, an error message is stored in the ** parser and some error code other than SQLITE_OK returned. 
Name: selectPopWith; Comment: ** If the SELECT passed as the second argument has an associated WITH ** clause, pop it from the stack stored as part of the Parse object. ** ** This function is used as the xSelectCallback2() callback by ** sqlite3SelectExpand() when walking a SELECT tree to resolve table ** names and other FROM clause elements. 
Name: sqlite3ExpandSubquery; Comment: ** The SrcList_item structure passed as the second argument represents a ** sub-query in the FROM clause of a SELECT statement. This function ** allocates and populates the SrcList_item.pTab object. If successful, ** SQLITE_OK is returned. Otherwise, if an OOM error is encountered, ** SQLITE_NOMEM. 
Name: selectExpander; Comment: ** This routine is a Walker callback for "expanding" a SELECT statement. ** "Expanding" means to do the following: ** ** (1) Make sure VDBE cursor numbers have been assigned to every ** element of the FROM clause. ** ** (2) Fill in the pTabList->a[].pTab fields in the SrcList that ** defines FROM clause. When views appear in the FROM clause, ** fill pTabList->a[].pSelect with a copy of the SELECT statement ** that implements the view. A copy is made of the view's SELECT ** statement so that we can freely modify or delete that statement ** without worrying about messing up the persistent representation ** of the view. ** ** (3) Add terms to the WHERE clause to accommodate the NATURAL keyword ** on joins and the ON and USING clause of joins. ** ** (4) Scan the list of columns in the result set (pEList) looking ** for instances of the "*" operator or the TABLE.* operator. ** If found, expand each "*" to be every column in every table ** and TABLE.* to be every column in TABLE. ** 
Name: sqlite3SelectWalkAssert2; Comment: ** Always assert. This xSelectCallback2 implementation proves that the ** xSelectCallback2 is never invoked. 
Name: sqlite3SelectExpand; Comment: ** This routine "expands" a SELECT statement and all of its subqueries. ** For additional information on what it means to "expand" a SELECT ** statement, see the comment on the selectExpand worker callback above. ** ** Expanding a SELECT statement is the first step in processing a ** SELECT statement. The SELECT statement must be expanded before ** name resolution is performed. ** ** If anything goes wrong, an error message is written into pParse. ** The calling function can detect the problem by looking at pParse->nErr ** and/or pParse->db->mallocFailed. 
Name: selectAddSubqueryTypeInfo; Comment: ** This is a Walker.xSelectCallback callback for the sqlite3SelectTypeInfo() ** interface. ** ** For each FROM-clause subquery, add Column.zType and Column.zColl ** information to the Table structure that represents the result set ** of that subquery. ** ** The Table structure that represents the result set was constructed ** by selectExpander() but the type and collation information was omitted ** at that point because identifiers had not yet been resolved. This ** routine is called after identifier resolution. 
Name: sqlite3SelectAddTypeInfo; Comment: ** This routine adds datatype and collating sequence information to ** the Table structures of all FROM-clause subqueries in a ** SELECT statement. ** ** Use this routine after name resolution. 
Name: resetAccumulator; Comment: ** Reset the aggregate accumulator. ** ** The aggregate accumulator is a set of memory cells that hold ** intermediate results while calculating an aggregate. This ** routine generates code that stores NULLs in all of those memory ** cells. 
Name: finalizeAggFunctions; Comment: ** Invoke the OP_AggFinalize opcode for every aggregate function ** in the AggInfo structure. 
Name: updateAccumulator; Comment: ** Update the accumulator memory cells for an aggregate based on ** the current cursor position. ** ** If regAcc is non-zero and there are no min() or max() aggregates ** in pAggInfo, then only populate the pAggInfo->nAccumulator accumulator ** registers if register regAcc contains 0. The caller will take care ** of setting and clearing regAcc. 
Name: havingToWhereExprCb; Comment: ** sqlite3WalkExpr() callback used by havingToWhere(). ** ** If the node passed to the callback is a TK_AND node, return ** WRC_Continue to tell sqlite3WalkExpr() to iterate through child nodes. ** ** Otherwise, return WRC_Prune. In this case, also check if the ** sub-expression matches the criteria for being moved to the WHERE ** clause. If so, add it to the WHERE clause and replace the sub-expression ** within the HAVING expression with a constant "1". 
Name: havingToWhere; Comment: ** Transfer eligible terms from the HAVING clause of a query, which is ** processed after grouping, to the WHERE clause, which is processed before ** grouping. For example, the query: ** ** SELECTFROM <tables> WHERE a=? GROUP BY b HAVING b=? AND c=? ** ** can be rewritten as: ** ** SELECTFROM <tables> WHERE a=? AND b=? GROUP BY b HAVING c=? ** ** A term of the HAVING expression is eligible for transfer if it consists ** entirely of constants and expressions that are also GROUP BY terms that ** use the "BINARY" collation sequence. 
Name: countOfViewOptimization; Comment: ** Attempt to transform a query of the form ** ** SELECT count(*) FROM (SELECT x FROM t1 UNION ALL SELECT y FROM t2) ** ** Into this: ** ** SELECT (SELECT count(*) FROM t1)+(SELECT count(*) FROM t2) ** ** The transformation only works if all of the following are true: ** ** The subquery is a UNION ALL of two or more terms ** The subquery does not have a LIMIT clause ** There is no WHERE or GROUP BY or HAVING clauses on the subqueries ** The outer query is a simple count(*) with no WHERE clause or other ** extraneous syntax. ** ** Return TRUE if the optimization is undertaken. 
Name: sqlite3_get_table_cb; Comment: ** This routine is called once for each row in the result table. Its job ** is to fill in the TabResult structure appropriately, allocating new ** memory as necessary. 
Name: sqlite3DeleteTriggerStep; Comment: ** Delete a linked list of TriggerStep structures. 
Name: sqlite3TriggerList; Comment: ** Given table pTab, return a list of all the triggers attached to ** the table. The list is connected by Trigger.pNext pointers. ** ** All of the triggers on pTab that are in the same database as pTab ** are already attached to pTab->pTrigger. But there might be additional ** triggers on pTab in the TEMP schema. This routine prepends all ** TEMP triggers on pTab to the beginning of the pTab->pTrigger list ** and returns the combined list. ** ** To state it another way: This routine returns a list of all triggers ** that fire off of pTab. The list will include any TEMP triggers on ** pTab as well as the triggers lised in pTab->pTrigger. 
Name: triggerSpanDup; Comment: ** Duplicate a range of text from an SQL statement, then convert all ** whitespace characters into ordinary space characters. 
Name: sqlite3DeleteTrigger; Comment: ** Recursively delete a Trigger structure 
Name: sqlite3DropTrigger; Comment: ** This function is called to drop a trigger from the database schema. ** ** This may be called directly from the parser and therefore identifies ** the trigger by name. The sqlite3DropTriggerPtr() routine does the ** same job as this routine except it takes a pointer to the trigger ** instead of the trigger name. *
Name: tableOfTrigger; Comment: ** Return a pointer to the Table structure for the table that a trigger ** is set on. 
Name: sqlite3DropTriggerPtr; Comment: ** Drop a trigger given a pointer to that trigger. 
Name: sqlite3UnlinkAndDeleteTrigger; Comment: ** Remove a trigger from the hash tables of the sqlite* pointer. 
Name: checkColumnOverlap; Comment: ** pEList is the SET clause of an UPDATE statement. Each entry ** in pEList is of the format <id>=<expr>. If any of the entries ** in pEList have an <id> which matches an identifier in pIdList, ** then return TRUE. If pIdList==NULL, then it is considered a ** wildcard that matches anything. Likewise if pEList==NULL then ** it matches anything so always return true. Return false only ** if there is no match. 
Name: onErrorText; Comment: ** This function is used to add VdbeComment() annotations to a VDBE ** program. It is not used in production code, only for debugging. 
Name: transferParseError; Comment: ** Parse context structure pFrom has just been used to create a sub-vdbe ** (trigger program). If an error has occurred, transfer error information ** from pFrom to pTo. 
Name: sqlite3ColumnDefault; Comment: ** The most recently coded instruction was an OP_Column to retrieve the ** i-th column of table pTab. This routine sets the P4 parameter of the ** OP_Column to the default value, if any. ** ** The default value of a column is specified by a DEFAULT clause in the ** column definition. This was either supplied by the user when the table ** was created, or added later to the table definition by an ALTER TABLE ** command. If the latter, then the row-records in the table btree on disk ** may not contain a value for the column and the default value, taken ** from the P4 parameter of the OP_Column instruction, is returned instead. ** If the former, then all row-records are guaranteed to include a value ** for the column and the P4 value is not required. ** ** Column definitions created by an ALTER TABLE command may only have ** literal default values specified: a number, null or a string. (If a more ** complicated default expression value was provided, it is evaluated ** when the ALTER TABLE is executed and one of the literal values written ** into the sqlite_schema table.) ** ** Therefore, the P4 parameter is only required if the default value for ** the column is a literal number, string or null. The sqlite3ValueFromExpr() ** function is capable of transforming these types of expressions into ** sqlite3_value objects. ** ** If column as REAL affinity and the table is an ordinary b-tree table ** (not a virtual table) then the value might have been stored as an ** integer. In that case, add an OP_RealAffinity opcode to make sure ** it has been converted into REAL. 
Name: exprRowColumn; Comment: ** Allocate and return a pointer to an expression of type TK_ROW with ** Expr.iColumn set to value (iCol+1). The resolver will modify the ** expression to be a TK_COLUMN reading column iCol of the first ** table in the source-list (pSrc->a[0]). 
Name: sqlite3UpsertDelete; Comment: ** Free a list of Upsert objects 
Name: sqlite3UpsertDup; Comment: ** Duplicate an Upsert object. 
Name: execSql; Comment: ** Execute zSql on database db. ** ** If zSql returns rows, then each row will have exactly one ** column. (This will only happen if zSql begins with "SELECT".) ** Take each row of result and call execSql() again recursively. ** ** The execSqlF() routine does the same thing, except it accepts ** a format string as its third argument 
Name: sqlite3Vacuum; Comment: ** The VACUUM command is used to clean up the database, ** collapse free space, etc. It is modelled after the VACUUM command ** in PostgreSQL. The VACUUM command works as follows: ** ** (1) Create a new transient database file ** (2) Copy all content from the database being vacuumed into ** the new transient database file ** (3) Copy content from the transient database back into the ** original database. ** ** The transient database requires temporary disk space approximately ** equal to the size of the original database. The copy operation of ** step (3) requires additional temporary disk space approximately equal ** to the size of the original database for the rollback journal. ** Hence, temporary disk space that is approximately 2x the size of the ** original database is required. Every page of the database is written ** approximately 3 times: Once for step (2) and twice for step (3). ** Two writes per page are required in step (3) because the original ** database content must be written into the rollback journal prior to ** overwriting the database with the vacuumed content. ** ** Only 1x temporary space and only 1x writes would be required if ** the copy of step (3) were replaced by deleting the original database ** and renaming the transient database as the original. But that will ** not work if other processes are attached to the original database. ** And a power loss in between deleting the original and renaming the ** transient would cause the database file to appear to be deleted ** following reboot. 
Name: sqlite3_drop_modules; Comment: ** External API to drop all virtual-table modules, except those named ** on the azNames list. 
Name: sqlite3VtabModuleUnref; Comment: ** Decrement the reference count on a Module object. Destroy the ** module when the reference count reaches zero. 
Name: sqlite3VtabLock; Comment: ** Lock the virtual table so that it cannot be disconnected. ** Locks nest. Every lock should have a corresponding unlock. ** If an unlock is omitted, resources leaks will occur. ** ** If a disconnect is attempted while a virtual table is locked, ** the disconnect is deferred until all locks have been removed. 
Name: sqlite3GetVTable; Comment: ** pTab is a pointer to a Table structure representing a virtual-table. ** Return a pointer to the VTable object used by connection db to access ** this virtual-table, if one has been created, or NULL otherwise. 
Name: sqlite3VtabUnlock; Comment: ** Decrement the ref-count on a virtual table object. When the ref-count ** reaches zero, call the xDisconnect() method to delete the object. 
Name: vtabDisconnectAll; Comment: ** Table p is a virtual table. This function moves all elements in the ** p->pVTable list to the sqlite3.pDisconnect lists of their associated ** database connections to be disconnected at the next opportunity. ** Except, if argument db is not NULL, then the entry associated with ** connection db is left in the p->pVTable list. 
Name: sqlite3VtabDisconnect; Comment: ** Table *p is a virtual table. This function removes the VTable object ** for table *p associated with database connection db from the linked ** list in p->pVTab. It also decrements the VTable ref count. This is ** used when closing database connection db to free all of its VTable ** objects without disturbing the rest of the Schema object (which may ** be being used by other shared-cache connections). 
Name: sqlite3VtabUnlockList; Comment: ** Disconnect all the virtual table objects in the sqlite3.pDisconnect list. ** ** This function may only be called when the mutexes associated with all ** shared b-tree databases opened using connection db are held by the ** caller. This is done to protect the sqlite3.pDisconnect list. The ** sqlite3.pDisconnect list is accessed only as follows: ** ** 1) By this function. In this case, all BtShared mutexes and the mutex ** associated with the database handle itself must be held. ** ** 2) By function vtabDisconnectAll(), when it adds a VTable entry to ** the sqlite3.pDisconnect list. In this case either the BtShared mutex ** associated with the database the virtual table is stored in is held ** or, if the virtual table is stored in a non-sharable database, then ** the database handle mutex is held. ** ** As a result, a sqlite3.pDisconnect cannot be accessed simultaneously ** by multiple threads. It is thread-safe. 
Name: sqlite3VtabClear; Comment: ** Clear any and all virtual-table information from the Table record. ** This routine is called, for example, just before deleting the Table ** record. ** ** Since it is a virtual-table, the Table structure contains a pointer ** to the head of a linked list of VTable structures. Each VTable ** structure is associated with a single sqlite3* user of the schema. ** The reference count of the VTable structure associated with database ** connection db is decremented immediately (which may lead to the ** structure being xDisconnected and free). Any other VTable structures ** in the list are moved to the sqlite3.pDisconnect list of the associated ** database connection. 
Name: addModuleArgument; Comment: ** Add a new module argument to pTable->azModuleArg[]. ** The string is not copied - the pointer is stored. The ** string will be freed automatically when the table is ** deleted. 
Name: addArgumentToVtab; Comment: ** This routine takes the module argument that has been accumulating ** in pParse->zArg[] and appends it to the list of arguments on the ** virtual table currently under construction in pParse->pTable. 
Name: sqlite3VtabFinishParse; Comment: ** The parser calls this routine after the CREATE VIRTUAL TABLE statement ** has been completely parsed. 
Name: sqlite3VtabArgInit; Comment: ** The parser calls this routine when it sees the first token ** of an argument to the module name in a CREATE VIRTUAL TABLE statement. 
Name: sqlite3VtabArgExtend; Comment: ** The parser calls this routine for each token after the first token ** in an argument to the module name in a CREATE VIRTUAL TABLE statement. 
Name: vtabCallConstructor; Comment: ** Invoke a virtual table constructor (either xCreate or xConnect). The ** pointer to the function to invoke is passed as the fourth parameter ** to this procedure. 
Name: sqlite3VtabCallConnect; Comment: ** This function is invoked by the parser to call the xConnect() method ** of the virtual table pTab. If an error occurs, an error code is returned ** and an error left in pParse. ** ** This call is a no-op if table pTab is not a virtual table. 
Name: growVTrans; Comment: ** Grow the db->aVTrans[] array so that there is room for at least one ** more v-table. Return SQLITE_NOMEM if a malloc fails, or SQLITE_OK otherwise. 
Name: addToVTrans; Comment: ** Add the virtual table pVTab to the array sqlite3.aVTrans[]. Space should ** have already been reserved using growVTrans(). 
Name: sqlite3VtabCallCreate; Comment: ** This function is invoked by the vdbe to call the xCreate method ** of the virtual table named zTab in database iDb. ** ** If an error occurs, *pzErr is set to point to an English language ** description of the error and an SQLITE_XXX error code is returned. ** In this case the caller must call sqlite3DbFree(db, ) on *pzErr. 
Name: sqlite3_declare_vtab; Comment: ** This function is used to set the schema of a virtual table. It is only ** valid to call this function from within the xCreate() or xConnect() of a ** virtual table module. 
Name: sqlite3VtabCallDestroy; Comment: ** This function is invoked by the vdbe to call the xDestroy method ** of the virtual table named zTab in database iDb. This occurs ** when a DROP TABLE is mentioned. ** ** This call is a no-op if zTab is not a virtual table. 
Name: callFinaliser; Comment: ** This function invokes either the xRollback or xCommit method ** of each of the virtual tables in the sqlite3.aVTrans array. The method ** called is identified by the second argument, "offset", which is ** the offset of the method to call in the sqlite3_module structure. ** ** The array is cleared after invoking the callbacks. 
Name: sqlite3VtabSync; Comment: ** Invoke the xSync method of all virtual tables in the sqlite3.aVTrans ** array. Return the error code for the first error that occurs, or ** SQLITE_OK if all xSync operations are successful. ** ** If an error message is available, leave it in p->zErrMsg. 
Name: sqlite3VtabRollback; Comment: ** Invoke the xRollback method of all virtual tables in the ** sqlite3.aVTrans array. Then clear the array itself. 
Name: sqlite3VtabCommit; Comment: ** Invoke the xCommit method of all virtual tables in the ** sqlite3.aVTrans array. Then clear the array itself. 
Name: sqlite3VtabBegin; Comment: ** If the virtual table pVtab supports the transaction interface ** (xBegin/xRollback/xCommit and optionally xSync) and a transaction is ** not currently open, invoke the xBegin method now. ** ** If the xBegin call is successful, place the sqlite3_vtab pointer ** in the sqlite3.aVTrans array. 
Name: sqlite3VtabSavepoint; Comment: ** Invoke either the xSavepoint, xRollbackTo or xRelease method of all ** virtual tables that currently have an open transaction. Pass iSavepoint ** as the second argument to the virtual table method invoked. ** ** If op is SAVEPOINT_BEGIN, the xSavepoint method is invoked. If it is ** SAVEPOINT_ROLLBACK, the xRollbackTo method. Otherwise, if op is ** SAVEPOINT_RELEASE, then the xRelease method of each virtual table with ** an open transaction is invoked. ** ** If any virtual table method returns an error code other than SQLITE_OK, ** processing is abandoned and the error returned to the caller of this ** function immediately. If all calls to virtual table methods are successful, ** SQLITE_OK is returned. 
Name: sqlite3VtabMakeWritable; Comment: ** Make sure virtual table pTab is contained in the pParse->apVirtualLock[] ** array so that an OP_VBegin will get generated for it. Add pTab to the ** array if it is missing. If pTab is already in the array, this routine ** is a no-op. 
Name: sqlite3VtabEponymousTableInit; Comment: ** Check to see if virtual table module pMod can be have an eponymous ** virtual table instance. If it can, create one if one does not already ** exist. Return non-zero if the eponymous virtual table instance exists ** when this routine returns, and return zero if it does not exist. ** ** An eponymous virtual table instance is one that is named after its ** module, and more importantly, does not require a CREATE VIRTUAL TABLE ** statement in order to come into existance. Eponymous virtual table ** instances always exist. They cannot be DROP-ed. ** ** Any virtual table module for which xConnect and xCreate are the same ** method can have an eponymous virtual table instance. 
Name: sqlite3VtabEponymousTableClear; Comment: ** Erase the eponymous virtual table instance associated with ** virtual table module pMod, if it exists. 
Name: sqlite3_vtab_on_conflict; Comment: ** Return the ON CONFLICT resolution mode in effect for the virtual ** table update operation currently in progress. ** ** The results of this routine are undefined unless it is called from ** within an xUpdate method. 
Name: sqlite3_vtab_config; Comment: ** Call from within the xCreate() or xConnect() methods to provide ** the SQLite core with additional information about the behavior ** of the virtual table being implemented. 
Name: explainIndexColumnName; Comment: ** Return the name of the i-th column of the pIdx index. 
Name: explainIndexRange; Comment: None** ** is run and there is an index on (a, b), then this function returns a ** string similar to: ** ** "a=? AND b>?" 
Name: disableTerm; Comment: Disable a term in the WHERE clause. Except, do not disable the term if it controls a LEFT OUTER JOIN and it did not originate in the ON or USING clause of that join. Consider the term t2.z='ok' in the following queries: (1) SELECT FROM t1 LEFT JOIN t2 ON t1.a=t2.x WHERE t2.z='ok' (2) SELECT FROM t1 LEFT JOIN t2 ON t1.a=t2.x AND t2.z='ok' (3) SELECT FROM t1, t2 WHERE t1.a=t2.x AND t2.z='ok' The t2.z='ok' is disabled in the in (2) because it originates in the ON clause. The term is disabled in (3) because it is not part of a LEFT OUTER JOIN. In (1), the term is not disabled. Disabling a term causes that term to not be tested in the inner loop of the join. Disabling is an optimization. When terms are satisfied by indices, we disable them to prevent redundant tests in the inner loop. We would get the correct results if nothing were ever disabled, but joins might run a little slower. The trick is to disable as much as we can without disabling too much. If we disabled in (1), we'd get the wrong answer. See ticket #813.** ** If all the children of a term are disabled, then that term is also ** automatically disabled. In this way, terms get disabled if derived ** virtual terms are tested first. For example: ** ** x GLOB 'abc*' AND x>='abc' AND x<'acd' ** ____________/ _______/ ______/ ** parent child1 child2 ** ** Only the parent term was in the original WHERE clause. The child1 ** and child2 terms were added by the LIKE optimization. If both of ** the virtual child terms are valid, then testing of the parent can be ** skipped. ** ** Usually the parent term is marked as TERM_CODED. But if the parent ** term was originally TERM_LIKE, then the parent gets TERM_LIKECOND instead. ** The TERM_LIKECOND marking indicates that the term should be coded inside ** a conditional such that is only evaluated on the second pass of a ** LIKE-optimization loop, when scanning BLOBs instead of strings. 
Name: codeApplyAffinity; Comment: ** Code an OP_Affinity opcode to apply the column affinity string zAff ** to the n registers starting at base. ** ** As an optimization, SQLITE_AFF_BLOB and SQLITE_AFF_NONE entries (which ** are no-ops) at the beginning and end of zAff are ignored. If all entries ** in zAff are SQLITE_AFF_BLOB or SQLITE_AFF_NONE, then no code gets generated. ** ** This routine makes its own copy of zAff so that the caller is free ** to modify zAff after this routine returns. 
Name: codeCursorHintCheckExpr; Comment: ** This function is called for every node of an expression that is a candidate ** for a cursor hint on an index cursor. For TK_COLUMN nodes that reference ** the table CCurHint.iTabCur, verify that the same column can be ** accessed through the index. If it cannot, then set pWalker->eCode to 1. 
Name: codeCursorHintIsOrFunction; Comment: ** Test whether or not expression pExpr, which was part of a WHERE clause, ** should be included in the cursor-hint for a table that is on the rhs ** of a LEFT JOIN. Set Walker.eCode to non-zero before returning if the ** expression is not suitable. ** ** An expression is unsuitable if it might evaluate to non NULL even if ** a TK_COLUMN node that does affect the value of the expression is set ** to NULL. For example: ** ** col IS NULL ** col IS NOT NULL ** coalesce(col, 1) ** CASE WHEN col THEN 0 ELSE 1 END 
Name: codeCursorHintFixExpr; Comment: ** This function is called on every node of an expression tree used as an ** argument to the OP_CursorHint instruction. If the node is a TK_COLUMN ** that accesses any table other than the one identified by ** CCurHint.iTabCur, then do the following: ** ** 1) allocate a register and code an OP_Column instruction to read ** the specified column into the new register, and ** ** 2) transform the expression node to a TK_REGISTER node that reads ** from the newly populated register. ** ** Also, if the node is a TK_COLUMN that does access the table idenified ** by pCCurHint.iTabCur, and an index is being used (which we will ** know because CCurHint.pIdx!=0) then transform the TK_COLUMN into ** an access of the index rather than the original table. 
Name: codeExprOrVector; Comment: ** If the expression passed as the second argument is a vector, generate ** code to write the first nReg elements of the vector into an array ** of registers starting with iReg. ** ** If the expression is not a vector, then nReg must be passed 1. In ** this case, generate code to evaluate the expression and leave the ** result in register iReg. 
Name: preserveExpr; Comment: ** Preserve pExpr on the WhereETrans list of the WhereInfo. 
Name: whereIndexExprTransNode; Comment: The walker node callback used to transform matching expressions into** a reference to an index column for an index on an expression. ** ** If pExpr matches, then transform it into a reference to the index column ** that contains the value of pExpr. 
Name: whereIndexExprTransColumn; Comment: A walker node callback that translates a column reference to a table** into a corresponding column reference of an index. 
Name: whereApplyPartialIndexConstraints; Comment: ** The pTruth expression is always true because it is the WHERE clause ** a partial index that is driving a query loop. Look through all of the ** WHERE clause terms on the query, and if any of those terms must be ** true because pTruth is true, then mark those WHERE clause terms as ** coded. 
Name: whereOrInfoDelete; Comment: ** Deallocate all memory associated with a WhereOrInfo object. 
Name: whereAndInfoDelete; Comment: ** Deallocate all memory associated with a WhereAndInfo object. 
Name: whereClauseInsert; Comment: ** Add a single new WhereTerm entry to the WhereClause object pWC. ** The new WhereTerm object is constructed from Expr p and with wtFlags. ** The index in pWC->a[] of the new WhereTerm is returned on success. ** 0 is returned if the new WhereTerm could not be added due to a memory ** allocation error. The memory allocation failure will be recorded in ** the db->mallocFailed flag so that higher-level functions can detect it. ** ** This routine will increase the size of the pWC->a[] array as necessary. ** ** If the wtFlags argument includes TERM_DYNAMIC, then responsibility ** for freeing the expression p is assumed by the WhereClause object pWC. ** This is true even if this routine fails to allocate a new WhereTerm. ** ** WARNING: This routine might reallocate the space used to store ** WhereTerms. All pointers to WhereTerms should be invalidated after ** calling this routine. Such pointers may be reinitialized by referencing ** the pWC->a[] array. 
Name: allowedOp; Comment: ** Return TRUE if the given operator is one of the operators that is ** allowed for an indexable WHERE clause term. The allowed operators are ** "=", "<", ">", "<=", ">=", "IN", "IS", and "IS NULL" 
Name: exprCommute; Comment: ** Commute a comparison operator. Expressions of the form "X op Y" ** are converted into "Y op X". 
Name: operatorMask; Comment: ** Translate from TK_xx operator to WO_xx bitmask. 
Name: transferJoinMarkings; Comment: ** If the pBase expression originated in the ON or USING clause of ** a join, then transfer the appropriate markings over to derived. 
Name: markTermAsChild; Comment: ** Mark term iChild as being a child of term iParent 
Name: whereNthSubterm; Comment: ** Return the N-th AND-connected subterm of pTerm. Or if pTerm is not ** a conjunction, then return just pTerm when N==0. If N is exceeds ** the number of available subterms, return NULL. 
Name: termIsEquivalence; Comment: ** We already know that pExpr is a binary operator where both operands are ** column references. This routine checks to see if pExpr is an equivalence ** relation: ** 1. The SQLITE_Transitive optimization must be enabled ** 2. Must be either an == or an IS operator ** 3. Not originating in the ON clause of an OUTER JOIN ** 4. The affinities of A and B must be compatible ** 5a. Both operands use the same collating sequence OR ** 5b. The overall collating sequence is BINARY ** If this routine returns TRUE, that means that the RHS can be substituted ** for the LHS anyplace else in the WHERE clause where the LHS column occurs. ** This is an optimization. No harm comes from returning 0. But if 1 is ** returned when it should not be, then incorrect answers might result. 
Name: exprSelectUsage; Comment: ** Recursively walk the expressions of a SELECT statement and generate ** a bitmask indicating which tables are used in that expression ** tree. 
Name: sqlite3WhereSplit; Comment: ** This routine identifies subexpressions in the WHERE clause where ** each subexpression is separated by the AND operator or some other ** operator specified in the op parameter. The WhereClause structure ** is filled with pointers to subexpressions. For example: ** ** WHERE a=='hello' AND coalesce(b,11)<10 AND (c+12!=d OR c==22) ** _________/ ________________/ _________________/ ** slot[0] slot[1] slot[2] ** ** The original WHERE clause in pExpr is unaltered. All this routine ** does is make slot[] entries point to substructure within pExpr. ** ** In the previous sentence and in the diagram, "slot[]" refers to ** the WhereClause.a[] array. The slot[] array grows as needed to contain ** all terms of the WHERE clause. 
Name: sqlite3WhereClauseClear; Comment: ** Deallocate a WhereClause structure. The WhereClause structure ** itself is not freed. This routine is the inverse of ** sqlite3WhereClauseInit(). 
Name: sqlite3WhereExprUsageNN; Comment: ** These routines walk (recursively) an expression tree and generate ** a bitmask indicating which tables are used in that expression ** tree. 
Name: sqlite3WhereOutputRowCount; Comment: ** Return the estimated number of output rows from a WHERE clause 
Name: sqlite3WhereIsDistinct; Comment: ** Return one of the WHERE_DISTINCT_xxxxx values to indicate how this ** WHERE clause returns outputs for DISTINCT processing. 
Name: sqlite3WhereIsOrdered; Comment: ** Return the number of ORDER BY terms that are satisfied by the ** WHERE clause. A return of 0 means that the output must be ** completely sorted. A return equal to the number of ORDER BY ** terms means that no sorting is needed at all. A return that ** is positive but less than the number of ORDER BY terms means that ** block sorting is required. 
Name: sqlite3WhereOrderByLimitOptLabel; Comment: ** In the ORDER BY LIMIT optimization, if the inner-most loop is known ** to emit rows in increasing order, and if the last row emitted by the ** inner-most loop did not fit within the sorter, then we can skip all ** subsequent rows for the current iteration of the inner loop (because they ** will not fit in the sorter either) and continue with the second inner ** loop - the loop immediately outside the inner-most. ** ** When a row does not fit in the sorter (because the sorter already ** holds LIMIT+OFFSET rows that are smaller), then a jump is made to the ** label returned by this function. ** ** If the ORDER BY LIMIT optimization applies, the jump destination should ** be the continuation for the second-inner-most loop. If the ORDER BY ** LIMIT optimization does not apply, then the jump destination should ** be the continuation for the inner-most loop. ** ** It is always safe for this routine to return the continuation of the ** inner-most loop, in the sense that a correct answer will result. ** Returning the continuation the second inner loop is an optimization ** that might make the code run a little faster, but should not change ** the final answer. 
Name: sqlite3WhereContinueLabel; Comment: ** Return the VDBE address or label to jump to in order to continue ** immediately with the next row of a WHERE clause. 
Name: sqlite3WhereBreakLabel; Comment: ** Return the VDBE address or label to jump to in order to break ** out of a WHERE loop. 
Name: sqlite3WhereOkOnePass; Comment: ** Return ONEPASS_OFF (0) if an UPDATE or DELETE statement is unable to ** operate directly on the rowids returned by a WHERE clause. Return ** ONEPASS_SINGLE (1) if the statement can operation directly because only ** a single row is to be changed. Return ONEPASS_MULTI (2) if the one-pass ** optimization can be used on multiple ** ** If the ONEPASS optimization is used (if this routine returns true) ** then also write the indices of open cursors used by ONEPASS ** into aiCur[0] and aiCur[1]. iaCur[0] gets the cursor of the data ** table and iaCur[1] gets the cursor used by an auxiliary index. ** Either value may be -1, indicating that cursor is not used. ** Any cursors returned will have been opened for writing. ** ** aiCur[0] and aiCur[1] both get -1 if the where-clause logic is ** unable to use the ONEPASS optimization. 
Name: sqlite3WhereUsesDeferredSeek; Comment: ** Return TRUE if the WHERE loop uses the OP_DeferredSeek opcode to move ** the data cursor to the row selected by the index cursor. 
Name: whereOrMove; Comment: ** Move the content of pSrc into pDest 
Name: sqlite3WhereGetMask; Comment: ** Return the bitmask for the given cursor number. Return 0 if ** iCursor is not in the set. 
Name: createMask; Comment: ** Create a new mask for cursor iCursor. ** ** There is one cursor per table in the FROM clause. The number of ** tables in the FROM clause is limited by a test early in the ** sqlite3WhereBegin() routine. So we know that the pMaskSet->ix[] ** array will never overflow. 
Name: whereRightSubexprIsColumn; Comment: ** If the right-hand branch of the expression is a TK_COLUMN, then return ** a pointer to the right-hand branch. Otherwise, return NULL. 
Name: whereScanNext; Comment: ** Advance to the next WhereTerm that matches according to the criteria ** established when the pScan object was initialized by whereScanInit(). ** Return NULL if there are no more matching WhereTerms. 
Name: whereScanInitIndexExpr; Comment: ** This is whereScanInit() for the case of an index on an expression. ** It is factored out into a separate tail-recursion subroutine so that ** the normal whereScanInit() routine, which is a high-runner, does not ** need to push registers onto the stack as part of its prologue. 
Name: indexColumnNotNull; Comment: ** Return TRUE if the iCol-th column of index pIdx is NOT NULL 
Name: estLog; Comment: ** Estimate the logarithm of the input value to base 2. 
Name: vtabBestIndex; Comment: ** The table object reference passed as the second argument to this function ** must represent a virtual table. This function invokes the xBestIndex() ** method of the virtual table with the sqlite3_index_info object that ** comes in as the 3rd argument to this function. ** ** If an error occurs, pParse is populated with an error message and an ** appropriate error code is returned. A return of SQLITE_CONSTRAINT from ** xBestIndex is not considered an error. SQLITE_CONSTRAINT indicates that ** the current configuration of "unusable" flags in sqlite3_index_info can ** not result in a valid plan. ** ** Whether or not an error is returned, it is the responsibility of the ** caller to eventually free p->idxStr if p->needToFreeIdxStr indicates ** that this is required. 
Name: whereRangeAdjust; Comment: ** If it is not NULL, pTerm is a term that provides an upper or lower ** bound on a range scan. Without considering pTerm, it is estimated ** that the scan will visit nNew rows. This function returns the number ** estimated to be visited after taking pTerm into account. ** ** If the user explicitly specified a likelihood() value for this term, ** then the return value is the likelihood multiplied by the number of ** input rows. Otherwise, this function assumes that an "IS NOT NULL" term ** has a likelihood of 0.50, and any other term a likelihood of 0.25. 
Name: sqlite3IndexColumnAffinity; Comment: ** Return the affinity for a single column of an index. 
Name: sqlite3WhereTermPrint; Comment: ** Print the content of a WhereTerm object 
Name: sqlite3WhereClausePrint; Comment: ** Show the complete content of a WhereClause 
Name: sqlite3WhereLoopPrint; Comment: ** Print a WhereLoop object for debugging purposes 
Name: whereLoopInit; Comment: ** Convert bulk memory into a valid WhereLoop that can be passed ** to whereLoopClear harmlessly. 
Name: whereLoopClearUnion; Comment: ** Clear the WhereLoop.u union. Leave WhereLoop.pLTerm intact. 
Name: whereLoopClear; Comment: ** Deallocate internal memory used by a WhereLoop object 
Name: whereLoopResize; Comment: ** Increase the memory allocation for pLoop->aLTerm[] to be at least n. 
Name: whereLoopXfer; Comment: ** Transfer content from the second pLoop into the first. 
Name: whereLoopDelete; Comment: ** Delete a WhereLoop object 
Name: whereInfoFree; Comment: ** Free a WhereInfo structure 
Name: whereLoopAdjustCost; Comment: ** Try to adjust the cost of WhereLoop pTemplate upwards or downwards so ** that: ** ** (1) pTemplate costs less than any other WhereLoops that are a proper ** subset of pTemplate ** ** (2) pTemplate costs more than any other WhereLoops for which pTemplate ** is a proper subset. ** ** To say "WhereLoop X is a proper subset of Y" means that X uses fewer ** WHERE clause terms than Y and that every WHERE clause term used by X is ** also used by Y. 
Name: whereLoopFindLesser; Comment: ** Search the list of WhereLoops in *ppPrev looking for one that can be ** replaced by pTemplate. ** ** Return NULL if pTemplate does not belong on the WhereLoop list. ** In other words if pTemplate ought to be dropped from further consideration. ** ** If pX is a WhereLoop that pTemplate can replace, then return the ** link that points to pX. ** ** If pTemplate cannot replace any existing element of the list but needs ** to be added to the list as a new entry, then return a pointer to the ** tail of the list. 
Name: whereLoopInsert; Comment: ** Insert or replace a WhereLoop entry using the template supplied. ** ** An existing WhereLoop entry might be overwritten if the new template ** is better and has fewer dependencies. Or the template will be ignored ** and no insert will occur if an existing WhereLoop is faster and has ** fewer dependencies than the template. Otherwise a new WhereLoop is ** added based on the template. ** ** If pBuilder->pOrSet is not NULL then we care about only the ** prerequisites and rRun and nOut costs of the N best loops. That ** information is gathered in the pBuilder->pOrSet object. This special ** processing mode is used only for OR clause processing. ** ** When accumulating multiple loops (when pBuilder->pOrSet is NULL) we ** still might overwrite similar loops with the new template if the ** new template is better. Loops may be overwritten if the following ** conditions are met: ** ** (1) They have the same iTab. ** (2) They have the same iSortIdx. ** (3) The template has same or fewer dependencies than the current loop ** (4) The template has the same or lower cost than the current loop 
Name: indexMightHelpWithOrderBy; Comment: ** Return True if it is possible that pIndex might be useful in ** implementing the ORDER BY clause in pBuilder. ** ** Return False if pBuilder does not contain an ORDER BY clause or ** if there is no way for pIndex to be useful in implementing that ** ORDER BY clause. 
Name: sqlite3_vtab_collation; Comment: ** If this function is invoked from within an xBestIndex() callback, it ** returns a pointer to a buffer containing the name of the collation ** sequence associated with element iCons of the sqlite3_index_info.aConstraint ** array. Or, if iCons is out of range or there is no active xBestIndex ** call, return NULL. 
Name: whereLoopAddOr; Comment: ** Add WhereLoop entries to handle OR terms. This works for either ** btrees or virtual tables. 
Name: whereLoopAddAll; Comment: ** Add all WhereLoop objects for all tables 
Name: sqlite3WhereIsSorted; Comment: None then SELECT FROM t1 GROUP BY x,y ORDER BY x,y; -- IsSorted()==1 SELECT FROM t1 GROUP BY y,x ORDER BY y,x; -- IsSorted()==0
Name: wherePathName; Comment: For debugging use only: 
Name: whereSortingCost; Comment: ** Return the cost of sorting nRow rows, assuming that the keys have ** nOrderby columns and that the first nSorted columns are already in ** order. 
Name: wherePathSolver; Comment: ** Given the list of WhereLoop objects at pWInfo->pLoops, this routine ** attempts to find the lowest cost path that visits each WhereLoop ** once. This path is then loaded into the pWInfo->a[].pWLoop fields. ** ** Assume that the total number of output rows that will need to be sorted ** will be nRowEst (in the 10*log2 representation). Or, ignore sorting ** costs if nRowEst==0. ** ** Return SQLITE_OK on success or SQLITE_NOMEM of a memory allocation ** error occurs. 
Name: whereShortCut; Comment: ** Most queries use only a single table (they are not joins) and have ** simple == constraints against indexed fields. This routine attempts ** to plan those simple cases using much less ceremony than the ** general-purpose query planner, and thereby yield faster sqlite3_prepare() ** times for the common case. ** ** Return non-zero on success, if this query can be handled by this ** no-frills query planner. Return zero if this query needs the ** general-purpose query planner. 
Name: exprNodeIsDeterministic; Comment: ** Helper function for exprIsDeterministic(). 
Name: exprIsDeterministic; Comment: ** Return true if the expression contains no non-deterministic SQL ** functions. Do not consider non-deterministic SQL functions that are ** part of sub-select statements. 
Name: showAllWhereLoops; Comment: ** Display all WhereLoops in pWInfo 
Name: sqlite3WhereEnd; Comment: ** Generate the end of the WHERE loop. See comments on ** sqlite3WhereBegin() for additional information. 
Name: row_numberStepFunc; Comment: ** Implementation of built-in window function row_number(). Assumes that the ** window frame has been coerced to: ** ** ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 
Name: dense_rankStepFunc; Comment: ** Implementation of built-in window function dense_rank(). Assumes that ** the window frame has been set to: ** ** RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 
Name: rankStepFunc; Comment: ** Implementation of built-in window function rank(). Assumes that ** the window frame has been set to: ** ** RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 
Name: percent_rankStepFunc; Comment: ** Implementation of built-in window function percent_rank(). Assumes that ** the window frame has been set to: ** ** GROUPS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING 
Name: cume_distStepFunc; Comment: ** Implementation of built-in window function cume_dist(). Assumes that ** the window frame has been set to: ** ** GROUPS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING 
Name: ntileStepFunc; Comment: ** Implementation of ntile(). This assumes that the window frame has ** been coerced to: ** ** ROWS CURRENT ROW AND UNBOUNDED FOLLOWING 
Name: last_valueStepFunc; Comment: ** Implementation of last_value(). 
Name: sqlite3WindowFunctions; Comment: ** Register those built-in window functions that are not also aggregates. 
Name: selectWindowRewriteExprCb; Comment: ** Callback function used by selectWindowRewriteEList(). If necessary, ** this function appends to the output expression-list and updates ** expression (*ppExpr) in place. 
Name: sqlite3WindowExtraAggFuncDepth; Comment: ** When rewriting a query, if the new subquery in the FROM clause ** contains TK_AGG_FUNCTION nodes that refer to an outer query, ** then we have to increase the Expr->op2 values of those nodes ** due to the extra subquery layer that was added. ** ** See also the incrAggDepth() routine in resolve.c 
Name: sqlite3WindowRewrite; Comment: ** If the SELECT statement passed as the second argument does not invoke ** any SQL window functions, this function is a no-op. Otherwise, it ** rewrites the SELECT statement so that window function xStep functions ** are invoked in the correct order as described under "SELECT REWRITING" ** at the top of this file. 
Name: sqlite3WindowUnlinkFromSelect; Comment: ** Unlink the Window object from the Select to which it is attached, ** if it is attached. 
Name: sqlite3WindowDelete; Comment: ** Free the Window object passed as the second argument. 
Name: sqlite3WindowListDelete; Comment: ** Free the linked list of Window objects starting at the second argument. 
Name: sqlite3WindowOffsetExpr; Comment: ** The argument expression is an PRECEDING or FOLLOWING offset. The ** value should be a non-negative integer. If the value is not a ** constant, change it to NULL. The fact that it is then a non-negative ** integer will be caught later. But it is important not to leave ** variable values in the expression tree. 
Name: sqlite3WindowAssemble; Comment: ** Attach PARTITION and ORDER BY clauses pPartition and pOrderBy to window ** pWin. Also, if parameter pBase is not NULL, set pWin->zBase to the ** equivalent nul-terminated string. 
Name: sqlite3WindowChain; Comment: ** Window *pWin has just been created from a WINDOW clause. Tokne pBase ** is the base window. Earlier windows from the same WINDOW clause are ** stored in the linked list starting at pWin->pNextWin. This function ** either updates *pWin according to the base specification, or else ** leaves an error in pParse. 
Name: sqlite3WindowAttach; Comment: ** Attach window object pWin to expression p. 
Name: sqlite3WindowLink; Comment: ** Possibly link window pWin into the list at pSel->pWin (window functions ** to be processed as part of SELECT statement pSel). The window is linked ** in if either (a) there are no other windows already linked to this ** SELECT, or (b) the windows already linked use a compatible window frame. 
Name: sqlite3WindowCompare; Comment: ** Return 0 if the two window objects are identical, 1 if they are ** different, or 2 if it cannot be determined if the objects are identical ** or not. Identical window objects can be processed in a single scan. 
Name: sqlite3WindowCodeInit; Comment: ** This is called by code in select.c before it calls sqlite3WhereBegin() ** to begin iterating through the sub-query results. It is used to allocate ** and initialize registers and cursors used by sqlite3WindowCodeStep(). 
Name: windowCheckValue; Comment: ** A "PRECEDING <expr>" (eCond==0) or "FOLLOWING <expr>" (eCond==1) or the ** value of the second argument to nth_value() (eCond==2) has just been ** evaluated and the result left in register reg. This function generates VM ** code to check that the value is a non-negative integer and throws an ** exception if it is not. 
Name: windowArgCount; Comment: ** Return the number of arguments passed to the window-function associated ** with the object passed as the only argument to this function. 
Name: windowReadPeerValues; Comment: ** Generate VM code to read the window frames peer values from cursor csr into ** an array of registers starting at reg. 
Name: windowAggFinal; Comment: ** Generate VM code to invoke either xValue() (bFin==0) or xFinalize() ** (bFin==1) for each window function in the linked list starting at ** pMWin. Or, for built-in window-functions that do not use the standard ** API, generate the equivalent VM code. 
Name: windowFullScan; Comment: ** Generate code to calculate the current values of all window functions in the ** p->pMWin list by doing a full scan of the current window frame. Store the ** results in the Window.regResult registers, ready to return the upper ** layer. 
Name: windowReturnOneRow; Comment: ** Invoke the sub-routine at regGosub (generated by code in select.c) to ** return the current row of Window.iEphCsr. If all window functions are ** aggregate window functions that use the standard API, a single ** OP_Gosub instruction is all that this routine generates. Extra VM code ** for per-row processing is only generated for the following built-in window ** functions: ** ** nth_value() ** first_value() ** lag() ** lead() 
Name: windowInitAccum; Comment: ** Generate code to set the accumulator register for each window function ** in the linked list passed as the second argument to NULL. And perform ** any equivalent initialization required by any built-in window functions ** in the list. 
Name: windowCacheFrame; Comment: ** Return true if the current frame should be cached in the ephemeral table, ** even if there are no xInverse() calls required. 
Name: sqlite3WindowDup; Comment: ** Allocate and return a duplicate of the Window object indicated by the ** third argument. Set the Window.pOwner field of the new object to ** pOwner. 
Name: sqlite3WindowListDup; Comment: ** Return a copy of the linked list of Window objects passed as the ** second argument. 
Name: windowExprGtZero; Comment: ** Return true if it can be determined at compile time that expression ** pExpr evaluates to a value that, when cast to an integer, is greater ** than zero. False otherwise. ** ** If an OOM error occurs, this function sets the Parse.db.mallocFailed ** flag and returns zero. 
Name: disableLookaside; Comment: ** Disable lookaside memory allocation for objects that might be ** shared across database connections. 
Name: updateDeleteLimitError; Comment: ** Issue an error message if an ORDER BY or LIMIT clause occurs on an ** UPDATE or DELETE statement. 
Name: parserDoubleLinkSelect; Comment: ** For a compound SELECT statement, make sure p->pPrior->pNext==p for ** all elements in the list. And make sure list length does not exceed ** SQLITE_LIMIT_COMPOUND_SELECT. 
Name: tokenExpr; Comment: Construct a new Expr object from a single identifier. Use the ** new Expr to populate pOut. Set the span of pOut to be the identifier ** that created the expression. 
Name: binaryToUnaryIfNull; Comment: A routine to convert a binary TK_IS or TK_ISNOT expression into a ** unary TK_ISNULL or TK_NOTNULL expression. 
Name: parserAddExprIdListTerm; Comment: Add a single new term to an ExprList that is used to store a ** list of identifiers. Report an error if the ID list contains ** a COLLATE clause or an ASC or DESC keyword, except ignore the ** error while parsing a legacy schema. 
Name: sqlite3ParserTrace; Comment: ** Turn parser tracing on by giving a stream to which to write the trace ** and a prompt to preface each trace message. Tracing is turned off ** by making either argument NULL ** ** Inputs: ** <ul> ** <li> A FILE* to which trace output should be written. ** If NULL, then tracing is turned off. ** <li> A prefix string written at the beginning of every ** line of trace output. If NULL, then tracing is ** turned off. ** </ul> ** ** Outputs: ** None. 
Name: yyGrowStack; Comment: ** Try to increase the size of the parser stack. Return the number ** of errors. Return 0 on success. 
Name: sqlite3ParserInit; Comment: Initialize a new parser that has already been allocated.
Name: sqlite3ParserAlloc; Comment: ** This function allocates a new parser. ** The only argument is a pointer to a function which works like ** malloc. ** ** Inputs: ** A pointer to the function used to allocate memory. ** ** Outputs: ** A pointer to a parser. This pointer is used in subsequent calls ** to sqlite3Parser and sqlite3ParserFree. 
Name: yy_pop_parser_stack; Comment: ** Pop the parser's stack once. ** ** If there is a destructor routine associated with the token which ** is popped from the stack, then call it. 
Name: sqlite3ParserFinalize; Comment: ** Clear all secondary memory allocations from the parser 
Name: yyStackOverflow; Comment: ** The following routine is called if the stack overflows. 
Name: sqlite3ParserFallback; Comment: ** Return the fallback token corresponding to canonical token iToken, or ** 0 if iToken has no fallback. 
Name: keywordCode; Comment: Check to see if z[0..n-1] is a keyword. If it is, write the** parser symbol code for that keyword into *pType. Always ** return the integer n (the length of the token). 
Name: getToken; Comment: ** Return the id of the next token in string (*pz). Before returning, set ** (*pz) to point to the byte following the parsed token. 
Name: analyzeWindowKeyword; Comment: ** The following three functions are called immediately after the tokenizer ** reads the keywords WINDOW, OVER and FILTER, respectively, to determine ** whether the token should be treated as a keyword or an SQL identifier. ** This cannot be handled by the usual lemon %fallback method, due to ** the ambiguity in some constructions. e.g. ** ** SELECT sum(x) OVER ... ** ** In the above, "OVER" might be a keyword, or it might be an alias for the ** sum(x) expression. If a "%fallback ID OVER" directive were added to ** grammar, then SQLite would always treat "OVER" as an alias, making it ** impossible to call a window-function without a FILTER clause. ** ** WINDOW is treated as a keyword if: ** ** the following token is an identifier, or a keyword that can fallback ** to being an identifier, and ** the token after than one is TK_AS. ** ** OVER is a keyword if: ** ** the previous token was TK_RP, and ** the next token is either TK_LP or an identifier. ** ** FILTER is a keyword if: ** ** the previous token was TK_RP, and ** the next token is TK_LP. 
Name: sqlite3GetToken; Comment: ** Return the length (in bytes) of the token that begins at z[0]. ** Store the token type in *tokenType before returning. 
Name: sqlite3RunParser; Comment: ** Run the parser on the given SQL string. The parser structure is ** passed in. An SQLITE_ status code is returned. If an error occurs ** then an and attempt is made to write an error message into ** memory obtained from sqlite3_malloc() and to make *pzErrMsg point to that ** error message. 
Name: addSpaceSeparator; Comment: ** Insert a single space character into pStr if the current string ** ends with an identifier 
Name: sqlite3_complete; Comment: Return TRUE if the given SQL string ends in a semicolon. Special handling is require for CREATE TRIGGER statements. Whenever the CREATE TRIGGER keywords are seen, the statement must end with ";END;". This implementation uses a state machine with 8 states: (0) INVALID We have not yet seen a non-whitespace character. (1) START At the beginning or end of an SQL statement. This routine returns 1 if it ends in the START state and 0 if it ends in any other state. (2) NORMAL We are in the middle of statement which ends with a single semicolon. (3) EXPLAIN The keyword EXPLAIN has been seen at the beginning of a statement. (4) CREATE The keyword CREATE has been seen at the beginning of a statement, possibly preceded by EXPLAIN andor followed by TEMP or TEMPORARY (5) TRIGGER We are in the middle of a trigger definition that must be ended by a semicolon, the keyword END, and another semicolon. (6) SEMI We've seen the first semicolon in the ";END;" that occurs at the end of a trigger definition. (7) END We've seen the ";END" of the ";END;" that occurs at the end** of a trigger definition. ** ** Transitions between states above are determined by tokens extracted ** from the input. The following tokens are significant: ** ** (0) tkSEMI A semicolon. ** (1) tkWS Whitespace. ** (2) tkOTHER Any other SQL token. ** (3) tkEXPLAIN The "explain" keyword. ** (4) tkCREATE The "create" keyword. ** (5) tkTEMP The "temp" or "temporary" keyword. ** (6) tkTRIGGER The "trigger" keyword. ** (7) tkEND The "end" keyword. ** ** Whitespace never causes a state transition and is always ignored. ** This means that a SQL string of all whitespace is invalid. ** ** If we compile with SQLITE_OMIT_TRIGGER, all of the computation needed ** to recognize the end of a trigger can be omitted. All we have to do ** is look for a semicolon that is not part of an string or comment. 
Name: sqlite3_complete16; Comment: ** This routine is the same as the sqlite3_complete() routine described ** above, except that the parameter is required to be UTF-16 encoded, not ** UTF-8. 
Name: sqlite3TestExtInit; Comment: ** This is an extension initializer that is a no-op and always ** succeeds, except that it fails if the fault-simulation is set ** to 500. 
Name: int; Comment: ** An array of pointers to extension initializer functions for ** built-in extensions. 
Name: sqlite3_initialize; Comment: ** Initialize SQLite. ** ** This routine must be called to initialize the memory allocation, ** VFS, and mutex subsystems prior to doing any serious work with ** SQLite. But as long as you do not compile with SQLITE_OMIT_AUTOINIT ** this routine will be called automatically by key routines such as ** sqlite3_open(). ** ** This routine is a no-op except on its very first call for the process, ** or for the first call after a call to sqlite3_shutdown. ** ** The first thread to call this routine runs the initialization to ** completion. If subsequent threads call this routine before the first ** thread has finished the initialization process, then the subsequent ** threads must block until the first thread finishes with the initialization. ** ** The first thread might call this routine recursively. Recursive ** calls to this routine should not block, of course. Otherwise the ** initialization process would never complete. ** ** Let X be the first thread to enter this routine. Let Y be some other ** thread. Then while the initial invocation of this routine by X is ** incomplete, it is required that: ** ** Calls to this routine from Y must block until the outer-most ** call by X completes. ** ** Recursive calls to this routine from thread X return immediately ** without blocking. 
Name: sqlite3_shutdown; Comment: ** Undo the effects of sqlite3_initialize(). Must not be called while ** there are outstanding database connections or memory allocations or ** while any part of SQLite is otherwise in use in any thread. This ** routine is not threadsafe. But it is safe to invoke this routine ** on when SQLite is already shut down. If SQLite is already shut down ** when this routine is invoked, then this routine is a harmless no-op. 
Name: sqlite3_config; Comment: ** This API allows applications to modify the global configuration of ** the SQLite library at run-time. ** ** This routine should only be called when there are no outstanding ** database connections or memory allocations. This routine is not ** threadsafe. Failure to heed these warnings can lead to unpredictable ** behavior. 
Name: setupLookaside; Comment: ** Set up the lookaside buffers for a database connection. ** Return SQLITE_OK on success. ** If lookaside is already active, return SQLITE_BUSY. ** ** The sz parameter is the number of bytes in each lookaside slot. ** The cnt parameter is the number of slots. If pStart is NULL the ** space for the lookaside memory is obtained from sqlite3_malloc(). ** If pStart is not NULL then it is sz*cnt bytes of memory to use for ** the lookaside memory. 
Name: sqlite3_db_mutex; Comment: ** Return the mutex associated with a database connection. 
Name: sqlite3_db_release_memory; Comment: ** Free up as much memory as we can from the given database ** connection. 
Name: sqlite3_db_cacheflush; Comment: ** Flush any dirty pages in the pager-cache for any attached database ** to disk. 
Name: sqlite3_db_config; Comment: ** Configuration settings for an individual database connection 
Name: binCollFunc; Comment: ** This is the default collating function named "BINARY" which is always ** available. 
Name: rtrimCollFunc; Comment: ** This is the collating function named "RTRIM" which is always ** available. Ignore trailing spaces. 
Name: sqlite3IsBinary; Comment: ** Return true if CollSeq is the default built-in BINARY. 
Name: nocaseCollatingFunc; Comment: ** Another built-in collating sequence: NOCASE. ** ** This collating sequence is intended to be used for "case independent ** comparison". SQLite's knowledge of upper and lower case equivalents ** extends only to the 26 characters used in the English language. ** ** At the moment there is only a UTF-8 implementation. 
Name: sqlite3_last_insert_rowid; Comment: ** Return the ROWID of the most recent insert 
Name: sqlite3_set_last_insert_rowid; Comment: ** Set the value returned by the sqlite3_last_insert_rowid() API function. 
Name: sqlite3_changes; Comment: ** Return the number of changes in the most recent call to sqlite3_exec(). 
Name: sqlite3_total_changes; Comment: ** Return the number of changes since the database handle was opened. 
Name: sqlite3CloseSavepoints; Comment: ** Close all open savepoints. This function only manipulates fields of the ** database handle object, it does not close any savepoints that may be open ** at the b-tree/pager level. 
Name: functionDestroy; Comment: ** Invoke the destructor function associated with FuncDef p, if any. Except, ** if this is not the last copy of the function, do not invoke it. Multiple ** copies of a single function are created when create_function() is called ** with SQLITE_ANY as the encoding. 
Name: disconnectAllVtab; Comment: ** Disconnect all sqlite3_vtab objects that belong to database connection ** db. This is called when db is being closed. 
Name: connectionIsBusy; Comment: ** Return TRUE if database connection db has unfinalized prepared ** statements or unfinished sqlite3_backup objects. 
Name: sqlite3Close; Comment: ** Close an existing SQLite database 
Name: sqlite3_txn_state; Comment: ** Return the transaction state for a single databse, or the maximum ** transaction state over all attached databases if zSchema is null. 
Name: sqlite3LeaveMutexAndCloseZombie; Comment: ** Close the mutex on database connection db. ** ** Furthermore, if database connection db is a zombie (meaning that there ** has been a prior call to sqlite3_close(db) or sqlite3_close_v2(db)) and ** every sqlite3_stmt has now been finalized and every sqlite3_backup has ** finished, then free all resources. 
Name: sqlite3RollbackAll; Comment: ** Rollback all database files. If tripCode is not SQLITE_OK, then ** any write cursors are invalidated ("tripped" - as in "tripping a circuit ** breaker") and made to return tripCode if there are any further ** attempts to use that cursor. Read cursors remain open and valid ** but are "saved" in case the table pages are moved around. 
Name: sqlite3ErrStr; Comment: ** Return a static string that describes the kind of error specified in the ** argument. 
Name: sqlite3InvokeBusyHandler; Comment: ** Invoke the given busy handler. ** ** This routine is called when an operation failed to acquire a ** lock on VFS file pFile. ** ** If this routine returns non-zero, the lock is retried. If it ** returns 0, the operation aborts with an SQLITE_BUSY error. 
Name: sqlite3_busy_handler; Comment: ** This routine sets the busy callback for an Sqlite database to the ** given callback function with the given argument. 
Name: sqlite3_progress_handler; Comment: ** This routine sets the progress callback for an Sqlite database to the ** given callback function with the given argument. The progress callback will ** be invoked every nOps opcodes. 
Name: sqlite3_busy_timeout; Comment: ** This routine installs a default busy handler that waits for the ** specified number of milliseconds before returning 0. 
Name: sqlite3_interrupt; Comment: ** Cause any pending operation to stop at its earliest opportunity. 
Name: sqlite3CreateFunc; Comment: ** This function is exactly the same as sqlite3_create_function(), except ** that it is designed to be called by internal code. The difference is ** that if a malloc() fails in sqlite3_create_function(), an error code ** is returned and the mallocFailed flag cleared. 
Name: createFunctionApi; Comment: ** Worker function used by utf-8 APIs that create new functions: ** ** sqlite3_create_function() ** sqlite3_create_function_v2() ** sqlite3_create_window_function() 
Name: sqlite3_create_function; Comment: ** Create new user functions. 
Name: sqlite3_overload_function; Comment: ** Declare that a function has been overloaded by a virtual table. ** ** If the function already exists as a regular global function, then ** this routine is a no-op. If the function does not exist, then create ** a new one that always throws a run-time error. ** ** When virtual tables intend to provide an overloaded function, they ** should call this routine to make sure the global function exists. ** A global function must exist in order for name resolution to work ** properly. 
Name: sqlite3_profile; Comment: ** Register a profile function. The pArg from the previously registered ** profile function is returned. ** ** A NULL profile function means that no profiling is executes. A non-NULL ** profile is a pointer to a function that is invoked at the conclusion of ** each SQL statement that is run. 
Name: sqlite3_wal_autocheckpoint; Comment: ** Configure an sqlite3_wal_hook() callback to automatically checkpoint ** a database after committing a transaction if there are nFrame or ** more frames in the log file. Passing zero or a negative value as the ** nFrame parameter disables automatic checkpoints entirely. ** ** The callback registered by this function replaces any existing callback ** registered using sqlite3_wal_hook(). Likewise, registering a callback ** using sqlite3_wal_hook() disables the automatic checkpoint mechanism ** configured by this function. 
Name: sqlite3_wal_checkpoint; Comment: ** Checkpoint database zDb. If zDb is NULL, or if the buffer zDb points ** to contains a zero-length string, all attached databases are ** checkpointed. 
Name: sqlite3Checkpoint; Comment: ** Run a checkpoint on database iDb. This is a no-op if database iDb is ** not currently open in WAL mode. ** ** If a transaction is open on the database being checkpointed, this ** function returns SQLITE_LOCKED and a checkpoint is not attempted. If ** an error occurs while running the checkpoint, an SQLite error code is ** returned (i.e. SQLITE_IOERR). Otherwise, SQLITE_OK. ** ** The mutex on database handle db should be held by the caller. The mutex ** associated with the specific b-tree being checkpointed is taken by ** this function while the checkpoint is running. ** ** If iDb is passed SQLITE_MAX_ATTACHED, then all attached databases are ** checkpointed. If an error is encountered it is returned immediately - ** no attempt is made to checkpoint any remaining databases. ** ** Parameter eMode is one of SQLITE_CHECKPOINT_PASSIVE, FULL, RESTART ** or TRUNCATE. 
Name: sqlite3TempInMemory; Comment: ** This function returns true if main-memory should be used instead of ** a temporary file for transient pager files and statement journals. ** The value returned depends on the value of db->temp_store (runtime ** parameter) and the compile time value of SQLITE_TEMP_STORE. The ** following table describes the relationship between these two values ** and this functions return value. ** ** SQLITE_TEMP_STORE db->temp_store Location of temporary database ** ----------------- -------------- ------------------------------ ** 0 any file (return 0) ** 1 1 file (return 0) ** 1 2 memory (return 1) ** 1 0 file (return 0) ** 2 1 file (return 0) ** 2 2 memory (return 1) ** 2 0 memory (return 1) ** 3 any memory (return 1) 
Name: sqlite3_errmsg; Comment: ** Return UTF-8 encoded English language explanation of the most recent ** error. 
Name: sqlite3_errmsg16; Comment: ** Return UTF-16 encoded English language explanation of the most recent ** error. 
Name: sqlite3_errcode; Comment: ** Return the most recent error code generated by an SQLite routine. If NULL is ** passed to this function, we assume a malloc() failed during sqlite3_open(). 
Name: sqlite3_errstr; Comment: ** Return a string that describes the kind of error specified in the ** argument. For now, this simply calls the internal sqlite3ErrStr() ** function. 
Name: createCollation; Comment: ** Create a new collating function for database "db". The name is zName ** and the encoding is enc. 
Name: sqlite3_limit; Comment: ** Change the value of a limit. Report the old value. ** If an invalid limit index is supplied, report -1. ** Make no changes but still report the old value if the ** new limit is negative. ** ** A new lower limit does not shrink existing constructs. ** It merely prevents new constructs that exceed the limit ** from forming. 
Name: uriParameter; Comment: ** This routine does the core work of extracting URI parameters from a ** database filename for the sqlite3_uri_parameter() interface. 
Name: sqlite3_open; Comment: ** Open a new database handle. 
Name: sqlite3_open16; Comment: ** Open a new database handle. 
Name: sqlite3_create_collation; Comment: ** Register a new collation sequence with the database handle db. 
Name: sqlite3_create_collation_v2; Comment: ** Register a new collation sequence with the database handle db. 
Name: sqlite3_create_collation16; Comment: ** Register a new collation sequence with the database handle db. 
Name: sqlite3_collation_needed; Comment: ** Register a collation sequence factory callback with the database handle ** db. Replace any previously installed collation sequence factory. 
Name: sqlite3_collation_needed16; Comment: ** Register a collation sequence factory callback with the database handle ** db. Replace any previously installed collation sequence factory. 
Name: sqlite3_global_recover; Comment: ** This function is now an anachronism. It used to be used to recover from a ** malloc() failure, but SQLite now does this automatically. 
Name: sqlite3_get_autocommit; Comment: ** Test to see whether or not the database connection is in autocommit ** mode. Return TRUE if it is and FALSE if not. Autocommit mode is on ** by default. Autocommit is disabled by a BEGIN statement and reenabled ** by the next COMMIT or ROLLBACK. 
Name: sqlite3ReportError; Comment: ** The following routines are substitutes for constants SQLITE_CORRUPT, ** SQLITE_MISUSE, SQLITE_CANTOPEN, SQLITE_NOMEM and possibly other error ** constants. They serve two purposes: ** ** 1. Serve as a convenient place to set a breakpoint in a debugger ** to detect when version error conditions occurs. ** ** 2. Invoke sqlite3_log() to provide the source code location where ** a low-level error is first detected. 
Name: sqlite3_thread_cleanup; Comment: ** This is a convenience routine that makes sure that all thread-specific ** data for this thread has been deallocated. ** ** SQLite no longer uses thread-specific data so this routine is now a ** no-op. It is retained for historical compatibility. 
Name: sqlite3_sleep; Comment: ** Sleep for a little while. Return the amount of time slept. 
Name: sqlite3_extended_result_codes; Comment: ** Enable or disable the extended result codes. 
Name: sqlite3_file_control; Comment: ** Invoke the xFileControl method on a particular database. 
Name: sqlite3_test_control; Comment: ** Interface to the testing logic. 
Name: databaseName; Comment: ** The Pager stores the Database filename, Journal filename, and WAL filename ** consecutively in memory, in that order. The database filename is prefixed ** by four zero bytes. Locate the start of the database filename by searching ** backwards for the first byte following four consecutive zero bytes. ** ** This only works if the filename passed in was obtained from the Pager. 
Name: appendText; Comment: ** Append text z[] to the end of p[]. Return a pointer to the first ** character after then zero terminator on the new text in p[]. 
Name: sqlite3_create_filename; Comment: ** Allocate memory to hold names for a database, journal file, WAL file, ** and query parameters. The pointer returned is valid for use by ** sqlite3_filename_database() and sqlite3_uri_parameter() and related ** functions. ** ** Memory layout must be compatible with that generated by the pager ** and expected by sqlite3_uri_parameter() and databaseName(). 
Name: sqlite3_free_filename; Comment: ** Free memory obtained from sqlite3_create_filename(). It is a severe ** error to call this routine with any parameter other than a pointer ** previously obtained from sqlite3_create_filename() or a NULL pointer. 
Name: sqlite3_uri_parameter; Comment: ** This is a utility routine, useful to VFS implementations, that checks ** to see if a database file was a URI that contained a specific query ** parameter, and if so obtains the value of the query parameter. ** ** The zFilename argument is the filename pointer passed into the xOpen() ** method of a VFS implementation. The zParam argument is the name of the ** query parameter we seek. This routine returns the value of the zParam ** parameter if it exists. If the parameter does not exist, this routine ** returns a NULL pointer. 
Name: sqlite3_uri_key; Comment: ** Return a pointer to the name of Nth query parameter of the filename. 
Name: sqlite3_uri_boolean; Comment: ** Return a boolean value for a query parameter. 
Name: sqlite3_filename_database; Comment: ** Translate a filename that was handed to a VFS routine into the corresponding ** database, journal, or WAL file. ** ** It is an error to pass this routine a filename string that was not ** passed into the VFS from the SQLite core. Doing so is similar to ** passing free() a pointer that was not obtained from malloc() - it is ** an error that we cannot easily detect but that will likely cause memory ** corruption. 
Name: sqlite3DbNameToBtree; Comment: ** Return the Btree pointer identified by zDbName. Return NULL if not found. 
Name: sqlite3_db_filename; Comment: ** Return the filename of the database associated with a database ** connection. 
Name: sqlite3_db_readonly; Comment: ** Return 1 if database is read-only or 0 if read/write. Return -1 if ** no such database exists. 
Name: sqlite3_snapshot_get; Comment: ** Obtain a snapshot handle for the snapshot of database zDb currently ** being read by handle db. 
Name: sqlite3_snapshot_open; Comment: ** Open a read-transaction on the snapshot idendified by pSnapshot. 
Name: sqlite3_snapshot_recover; Comment: ** Recover as many snapshots as possible from the wal file associated with ** schema zDb of database db. 
Name: sqlite3_snapshot_free; Comment: ** Free a snapshot handle obtained from sqlite3_snapshot_get(). 
Name: sqlite3_compileoption_used; Comment: ** Given the name of a compile-time option, return true if that option ** was used and false if not. ** ** The name can optionally begin with "SQLITE_" but the "SQLITE_" prefix ** is not required for a match. 
Name: sqlite3_compileoption_get; Comment: ** Return the N-th compile-time option string. If N is out of range, ** return a NULL pointer. 
Name: checkListProperties; Comment: ** This function is a complex assert() that verifies the following ** properties of the blocked connections list: ** ** 1) Each entry in the list has a non-NULL value for either ** pUnlockConnection or pBlockingConnection, or both. ** ** 2) All entries in the list that share a common value for ** xUnlockNotify are grouped together. ** ** 3) If the argument db is not NULL, then none of the entries in the ** blocked connections list have pUnlockConnection or pBlockingConnection ** set to db. This is used when closing connection db. 
Name: removeFromBlockedList; Comment: ** Remove connection db from the blocked connections list. If connection ** db is not currently a part of the list, this function is a no-op. 
Name: addToBlockedList; Comment: ** Add connection db to the blocked connections list. It is assumed ** that it is not already a part of the list. 
Name: enterMutex; Comment: ** Obtain the STATIC_MAIN mutex. 
Name: leaveMutex; Comment: ** Release the STATIC_MAIN mutex. 
Name: sqlite3_unlock_notify; Comment: ** Register an unlock-notify callback. ** ** This is called after connection "db" has attempted some operation ** but has received an SQLITE_LOCKED error because another connection ** (call it pOther) in the same process was busy using the same shared ** cache. pOther is found by looking at db->pBlockingConnection. ** ** If there is no blocking connection, the callback is invoked immediately, ** before this routine returns. ** ** If pOther is already blocked on db, then report SQLITE_LOCKED, to indicate ** a deadlock. ** ** Otherwise, make arrangements to invoke xNotify when pOther drops ** its locks. ** ** Each call to this routine overrides any prior callbacks registered ** on the same "db". If xNotify==0 then any prior callbacks are immediately ** cancelled. 
Name: sqlite3ConnectionBlocked; Comment: ** This function is called while stepping or preparing a statement ** associated with connection db. The operation will return SQLITE_LOCKED ** to the user because it requires a lock that will not be available ** until connection pBlocker concludes its current transaction. 
Name: sqlite3ConnectionUnlocked; Comment: ** This function is called when ** the transaction opened by database db has just finished. Locks held ** by database connection db have been released. ** ** This function loops through each entry in the blocked connections ** list and does the following: ** ** 1) If the sqlite3.pBlockingConnection member of a list entry is ** set to db, then set pBlockingConnection=0. ** ** 2) If the sqlite3.pUnlockConnection member of a list entry is ** set to db, then invoke the configured unlock-notify callback and ** set pUnlockConnection=0. ** ** 3) If the two steps above mean that pBlockingConnection==0 and ** pUnlockConnection==0, remove the entry from the blocked connections ** list. 
Name: sqlite3ConnectionClosed; Comment: ** This is called when the database connection passed as an argument is ** being closed. The connection is removed from the blocked list. 
Name: sqlite3Fts3PutVarint; Comment: ** Write a 64-bit variable-length integer to memory starting at p[0]. ** The length of data written will be between 1 and FTS3_VARINT_MAX bytes. ** The number of bytes written is returned. 
Name: sqlite3Fts3GetVarint; Comment: ** Read a 64-bit variable-length integer from memory starting at p[0]. ** Return the number of bytes read, or 0 on error. ** The value is stored in *v. 
Name: sqlite3Fts3GetVarintBounded; Comment: ** Read a 64-bit variable-length integer from memory starting at p[0] and ** not extending past pEnd[-1]. ** Return the number of bytes read, or 0 on error. ** The value is stored in *v. 
Name: sqlite3Fts3GetVarint32; Comment: ** Similar to sqlite3Fts3GetVarint(), except that the output is truncated to ** a non-negative 32-bit integer before it is returned. 
Name: sqlite3Fts3VarintLen; Comment: ** Return the number of bytes required to encode v as a varint 
Name: sqlite3Fts3Dequote; Comment: ** Convert an SQL-style quoted string into a normal string by removing ** the quote characters. The conversion is done in-place. If the ** input does not begin with a quote character, then this routine ** is a no-op. ** ** Examples: ** ** "abc" becomes abc ** 'xyz' becomes xyz ** [pqr] becomes pqr ** `mno` becomes mno ** 
Name: fts3GetDeltaVarint; Comment: ** Read a single varint from the doclist at *pp and advance *pp to point ** to the first byte past the end of the varint. Add the value of the varint ** to *pVal. 
Name: fts3GetReverseVarint; Comment: ** When this function is called, *pp points to the first byte following a ** varint that is part of a doclist (or position-list, or any other list ** of varints). This function moves *pp to point to the start of that varint, ** and sets *pVal by the varint value. ** ** Argument pStart points to the first byte of the doclist that the ** varint is part of. 
Name: fts3DisconnectMethod; Comment: ** The xDisconnect() virtual table method. 
Name: sqlite3Fts3ErrMsg; Comment: ** Write an error message into *pzErr 
Name: fts3DestroyMethod; Comment: ** The xDestroy() virtual table method. 
Name: fts3DeclareVtab; Comment: ** Invoke sqlite3_declare_vtab() to declare the schema for the FTS3 table ** passed as the first argument. This is done as part of the xConnect() ** and xCreate() methods. ** ** If *pRc is non-zero when this function is called, it is a no-op. ** Otherwise, if an error occurs, an SQLite error code is stored in *pRc ** before returning. 
Name: sqlite3Fts3CreateStatTable; Comment: ** Create the %_stat table if it does not already exist. 
Name: fts3CreateTables; Comment: ** Create the backing store tables (%_content, %_segments and %_segdir) ** required by the FTS3 table passed as the only argument. This is done ** as part of the vtab xCreate() method. ** ** If the p->bHasDocsize boolean is true (indicating that this is an ** FTS4 table, not an FTS3 table) then also create the %_docsize and ** %_stat tables required by FTS4. 
Name: fts3DatabasePageSize; Comment: ** Store the current database page-size in bytes in p->nPgsz. ** ** If *pRc is non-zero when this function is called, it is a no-op. ** Otherwise, if an error occurs, an SQLite error code is stored in *pRc ** before returning. 
Name: fts3IsSpecialColumn; Comment: ** "Special" FTS4 arguments are column specifications of the following form: ** ** <key> = <value> ** ** There may not be whitespace surrounding the "=" character. The <value> ** term may be quoted, but the <key> may not. 
Name: fts3QuoteId; Comment: ** Return a copy of input string zInput enclosed in double-quotes (") and ** with all double quote characters escaped. For example: ** ** fts3QuoteId("un _"zip_"") -> "un _"_"zip_"_"" ** ** The pointer returned points to memory obtained from sqlite3_malloc(). It ** is the callers responsibility to call sqlite3_free() to release this ** memory. 
Name: fts3ReadExprList; Comment: ** Return a list of comma separated SQL expressions and a FROM clause that ** could be used in a SELECT statement such as the following: ** ** SELECT <list of expressions> FROM %_content AS x ... ** ** to return the docid, followed by each column of text data in order ** from left to write. If parameter zFunc is not NULL, then instead of ** being returned directly each column of text data is passed to an SQL ** function named zFunc first. For example, if zFunc is "unzip" and the ** table has the three user-defined columns "a", "b", and "c", the following ** string is returned: ** ** "docid, unzip(x.'a'), unzip(x.'b'), unzip(x.'c') FROM %_content AS x" ** ** The pointer returned points to a buffer allocated by sqlite3_malloc(). It ** is the responsibility of the caller to eventually free it. ** ** If *pRc is not SQLITE_OK when this function is called, it is a no-op (and ** a NULL pointer is returned). Otherwise, if an OOM error is encountered ** by this function, NULL is returned and *pRc is set to SQLITE_NOMEM. If ** no error occurs, *pRc is left unmodified. 
Name: fts3WriteExprList; Comment: ** Return a list of N comma separated question marks, where N is the number ** of columns in the %_content table (one for the docid plus one for each ** user-defined text column). ** ** If argument zFunc is not NULL, then all but the first question mark ** is preceded by zFunc and an open bracket, and followed by a closed ** bracket. For example, if zFunc is "zip" and the FTS3 table has three ** user-defined text columns, the following string is returned: ** ** "?, zip(?), zip(?), zip(?)" ** ** The pointer returned points to a buffer allocated by sqlite3_malloc(). It ** is the responsibility of the caller to eventually free it. ** ** If *pRc is not SQLITE_OK when this function is called, it is a no-op (and ** a NULL pointer is returned). Otherwise, if an OOM error is encountered ** by this function, NULL is returned and *pRc is set to SQLITE_NOMEM. If ** no error occurs, *pRc is left unmodified. 
Name: sqlite3Fts3ReadInt; Comment: ** Buffer z contains a positive integer value encoded as utf-8 text. ** Decode this value and store it in *pnOut, returning the number of bytes ** consumed. If an overflow error occurs return a negative value. 
Name: fts3GobbleInt; Comment: ** This function interprets the string at (*pp) as a non-negative integer ** value. It reads the integer and sets *pnOut to the value read, then ** sets *pp to point to the byte immediately following the last byte of ** the integer value. ** ** Only decimal digits ('0'..'9') may be part of an integer value. ** ** If *pp does not being with a decimal digit SQLITE_ERROR is returned and ** the output value undefined. Otherwise SQLITE_OK is returned. ** ** This function is used when parsing the "prefix=" FTS4 parameter. 
Name: fts3SetEstimatedRows; Comment: ** Set the pIdxInfo->estimatedRows variable to nRow. Unless this ** extension is currently being used by a version of SQLite too old to ** support estimatedRows. In that case this function is a no-op. 
Name: fts3SetUniqueFlag; Comment: ** Set the SQLITE_INDEX_SCAN_UNIQUE flag in pIdxInfo->flags. Unless this ** extension is currently being used by a version of SQLite too old to ** support index-info flags. In that case this function is a no-op. 
Name: fts3BestIndexMethod; Comment: ** Implementation of the xBestIndex method for FTS3 tables. There ** are three possible strategies, in order of preference: ** ** 1. Direct lookup by rowid or docid. ** 2. Full-text search using a MATCH operator on a non-docid column. ** 3. Linear scan of %_content table. 
Name: fts3OpenMethod; Comment: ** Implementation of xOpen method. 
Name: fts3CursorFinalizeStmt; Comment: ** Finalize the statement handle at pCsr->pStmt. ** ** Or, if that statement handle is one created by fts3CursorSeekStmt(), ** and the Fts3Table.pSeekStmt slot is currently NULL, save the statement ** pointer there instead of finalizing it. 
Name: fts3ClearCursor; Comment: ** Free all resources currently held by the cursor passed as the only ** argument. 
Name: fts3CloseMethod; Comment: ** Close the cursor. For additional information see the documentation ** on the xClose method of the virtual table interface. 
Name: fts3CursorSeekStmt; Comment: ** If pCsr->pStmt has not been prepared (i.e. if pCsr->pStmt==0), then ** compose and prepare an SQL statement of the form: ** ** "SELECT <columns> FROM %_content WHERE rowid = ?" ** ** (or the equivalent for a content=xxx table) and set pCsr->pStmt to ** it. If an error occurs, return an SQLite error code. 
Name: fts3CursorSeek; Comment: ** Position the pCsr->pStmt statement so that it is on the row ** of the %_content table that contains the last match. Return ** SQLITE_OK on success. 
Name: fts3PoslistCopy; Comment: ** When this function is called, *ppPoslist is assumed to point to the ** start of a position-list. After it returns, *ppPoslist points to the ** first byte after the position-list. ** ** A position list is list of positions (delta encoded) and columns for ** a single document record of a doclist. So, in other words, this ** routine advances *ppPoslist so that it points to the next docid in ** the doclist, or to the first byte past the end of the doclist. ** ** If pp is not NULL, then the contents of the position list are copied ** to *pp. *pp is set to point to the first byte past the last byte copied ** before this function returns. 
Name: fts3ColumnlistCopy; Comment: ** When this function is called, *ppPoslist is assumed to point to the ** start of a column-list. After it returns, *ppPoslist points to the ** to the terminator (POS_COLUMN or POS_END) byte of the column-list. ** ** A column-list is list of delta-encoded positions for a single column ** within a single document within a doclist. ** ** The column-list is terminated either by a POS_COLUMN varint (1) or ** a POS_END varint (0). This routine leaves *ppPoslist pointing to ** the POS_COLUMN or POS_END that terminates the column-list. ** ** If pp is not NULL, then the contents of the column-list are copied ** to *pp. *pp is set to point to the first byte past the last byte copied ** before this function returns. The POS_COLUMN or POS_END terminator ** is not copied into *pp. 
Name: fts3PutColNumber; Comment: ** If parameter iCol is not 0, write an POS_COLUMN (1) byte followed by ** the value of iCol encoded as a varint to *pp. This will start a new ** column list. ** ** Set *pp to point to the byte just after the last byte written before ** returning (do not modify it if iCol==0). Return the total number of bytes ** written (0 if iCol==0). 
Name: fts3TermSelectFinishMerge; Comment: ** Merge all doclists in the TermSelect.aaOutput[] array into a single ** doclist stored in TermSelect.aaOutput[0]. If successful, delete all ** other doclists (except the aaOutput[0] one) and return SQLITE_OK. ** ** If an OOM error occurs, return SQLITE_NOMEM. In this case it is ** the responsibility of the caller to free any doclists left in the ** TermSelect.aaOutput[] array. 
Name: fts3SegReaderCursorAppend; Comment: ** Append SegReader object pNew to the end of the pCsr->apSegment[] array. 
Name: fts3SegReaderCursorFree; Comment: ** Free an Fts3MultiSegReader allocated by fts3TermSegReaderCursor(). 
Name: fts3DoclistCountDocids; Comment: ** This function counts the total number of docids in the doclist stored ** in buffer aList[], size nList bytes. ** ** If the isPoslist argument is true, then it is assumed that the doclist ** contains a position-list following each docid. Otherwise, it is assumed ** that the doclist is simply a list of docids stored as delta encoded ** varints. 
Name: fts3NextMethod; Comment: ** Advance the cursor to the next row in the %_content table that ** matches the search criteria. For a MATCH search, this will be ** the next row that matches. For a full-table scan, this will be ** simply the next row in the %_content table. For a docid lookup, ** this routine simply sets the EOF flag. ** ** Return SQLITE_OK if nothing goes wrong. SQLITE_OK is returned ** even if we reach end-of-file. The fts3EofMethod() will be called ** subsequently to determine whether or not an EOF was hit. 
Name: fts3DocidRange; Comment: ** If the numeric type of argument pVal is "integer", then return it ** converted to a 64-bit signed integer. Otherwise, return a copy of ** the second parameter, iDefault. 
Name: fts3EofMethod; Comment: ** This is the xEof method of the virtual table. SQLite calls this ** routine to find out if it has reached the end of a result set. 
Name: fts3RowidMethod; Comment: ** This is the xRowid method. The SQLite core calls this routine to ** retrieve the rowid for the current row of the result set. fts3 ** exposes %_content.docid as the rowid for the virtual table. The ** rowid should be written to *pRowid. 
Name: fts3SyncMethod; Comment: ** Implementation of xSync() method. Flush the contents of the pending-terms ** hash-table to the database. 
Name: fts3SetHasStat; Comment: ** If it is currently unknown whether or not the FTS table has an %_stat ** table (if p->bHasStat==2), attempt to determine this (set p->bHasStat ** to 0 or 1). Return SQLITE_OK if successful, or an SQLite error code ** if an error occurs. 
Name: fts3BeginMethod; Comment: ** Implementation of xBegin() method. 
Name: fts3CommitMethod; Comment: ** Implementation of xCommit() method. This is a no-op. The contents of ** the pending-terms hash-table have already been flushed into the database ** by fts3SyncMethod(). 
Name: fts3RollbackMethod; Comment: ** Implementation of xRollback(). Discard the contents of the pending-terms ** hash-table. Any changes made to the database are reverted by SQLite. 
Name: fts3ReversePoslist; Comment: ** When called, *ppPoslist must point to the byte immediately following the ** end of a position-list. i.e. ( (*ppPoslist)[-1]==POS_END ). This function ** moves *ppPoslist so that it instead points to the first byte of the ** same position list. 
Name: fts3SavepointMethod; Comment: ** The xSavepoint() method. ** ** Flush the contents of the pending-terms table to disk. 
Name: fts3ReleaseMethod; Comment: ** The xRelease() method. ** ** This is a no-op. 
Name: fts3RollbackToMethod; Comment: ** The xRollbackTo() method. ** ** Discard the contents of the pending terms table. 
Name: fts3ShadowName; Comment: ** Return true if zName is the extension on one of the shadow tables used ** by this module. 
Name: hashDestroy; Comment: ** This function is registered as the module destructor (called when an ** FTS3 enabled database connection is closed). It frees the memory ** allocated for the tokenizer hash table. 
Name: sqlite3Fts3Init; Comment: ** Initialize the fts3 extension. If this extension is built as part ** of the sqlite library, then this function is called directly by ** SQLite. If fts3 is built as a dynamically loadable extension, this ** function is called by the sqlite3_extension_init() entry point. 
Name: fts3EvalDeferredPhrase; Comment: ** This function is called on each phrase after the position lists for ** any deferred tokens have been loaded into memory. It updates the phrases ** current position list to include only those positions that are really ** instances of the phrase (after considering deferred tokens). If this ** means that the phrase does not appear in the current row, doclist.pList ** and doclist.nList are both zeroed. ** ** SQLITE_OK is returned if no error occurs, otherwise an SQLite error code. 
Name: fts3EvalPhraseStart; Comment: ** This function is called for each Fts3Phrase in a full-text query ** expression to initialize the mechanism for returning rows. Once this ** function has been called successfully on an Fts3Phrase, it may be ** used with fts3EvalPhraseNext() to iterate through the matching docids. ** ** If parameter bOptOk is true, then the phrase may (or may not) use the ** incremental loading strategy. Otherwise, the entire doclist is loaded into ** memory within this call. ** ** SQLITE_OK is returned if no error occurs, otherwise an SQLite error code. 
Name: fts3EvalDlPhraseNext; Comment: ** Advance the iterator pDL to the next entry in pDL->aAll/nAll. Set *pbEof ** to true if EOF is reached. 
Name: fts3EvalAverageDocsize; Comment: ** Determine the average document (row) size in pages. If successful, ** write this value to *pnPage and return SQLITE_OK. Otherwise, return ** an SQLite error code. ** ** The average document size in pages is calculated by first calculating ** determining the average size in bytes, B. If B is less than the amount ** of data that will fit on a single leaf page of an intkey table in ** this database, then the average docsize is 1. Otherwise, it is 1 plus ** the number of overflow pages consumed by a record B bytes in size. 
Name: fts3EvalStart; Comment: None ... return row pCsr->iPrevId to the caller ... }
Name: fts3EvalInvalidatePoslist; Comment: ** Invalidate the current position list for phrase pPhrase. 
Name: fts3EvalNearTest; Comment: ** If *pRc is not SQLITE_OK, or if pExpr is not the root node of a NEAR ** cluster, then this function returns 1 immediately. ** ** Otherwise, it checks if the current row really does match the NEAR ** expression, using the data currently stored in the position lists ** (Fts3Expr->pPhrase.doclist.pList/nList) for each phrase in the expression. ** ** If the current row is a match, the position list associated with each ** phrase in the NEAR expression is edited in place to contain only those ** phrase instances sufficiently close to their peers to satisfy all NEAR ** constraints. In this case it returns 1. If the NEAR expression does not ** match the current row, 0 is returned. The position lists may or may not ** be edited if 0 is returned. 
Name: sqlite3Fts3EvalTestDeferred; Comment: ** This function is called as the second part of each xNext operation when ** iterating through the results of a full-text query. At this point the ** cursor points to a row that matches the query expression, with the ** following caveats: ** ** Up until this point, "NEAR" operators in the expression have been ** treated as "AND". ** ** Deferred tokens have not yet been considered. ** ** If *pRc is not SQLITE_OK when this function is called, it immediately ** returns 0. Otherwise, it tests whether or not after considering NEAR ** operators and deferred tokens the current row is still a match for the ** expression. It returns 1 if both of the following are true: ** ** 1. *pRc is SQLITE_OK when this function returns, and ** ** 2. After scanning the current FTS table row for the deferred tokens, ** it is determined that the row does *not* match the query. ** ** Or, if no error occurs and it seems the current row does match the FTS ** query, return 0. 
Name: fts3EvalNext; Comment: ** Advance to the next document that matches the FTS expression in ** Fts3Cursor.pExpr. 
Name: fts3EvalRestart; Comment: ** Restart interation for expression pExpr so that the next call to ** fts3EvalNext() visits the first row. Do not allow incremental ** loading or merging of phrase doclists for this iteration. ** ** If *pRc is other than SQLITE_OK when this function is called, it is ** a no-op. If an error occurs within this function, *pRc is set to an ** SQLite error code before returning. 
Name: fts3EvalUpdateCounts; Comment: ** After allocating the Fts3Expr.aMI[] array for each phrase in the ** expression rooted at pExpr, the cursor iterates through all rows matched ** by pExpr, calling this function for each row. This function increments ** the values in Fts3Expr.aMI[] according to the position-list currently ** found in Fts3Expr.pPhrase->doclist.pList for each of the phrase ** expression nodes. 
Name: sqlite3Fts3EvalPhraseCleanup; Comment: ** Free all components of the Fts3Phrase structure that were allocated by ** the eval module. Specifically, this means to free: ** ** the contents of pPhrase->doclist, and ** any Fts3MultiSegReader objects held by phrase tokens. 
Name: fts3auxDisconnectMethod; Comment: ** This function does the work for both the xDisconnect and xDestroy methods. ** These tables have no persistent representation of their own, so xDisconnect ** and xDestroy are identical operations. 
Name: fts3auxBestIndexMethod; Comment: ** xBestIndex - Analyze a WHERE and ORDER BY clause. 
Name: fts3auxOpenMethod; Comment: ** xOpen - Open a cursor. 
Name: fts3auxCloseMethod; Comment: ** xClose - Close a cursor. 
Name: fts3auxNextMethod; Comment: ** xNext - Advance the cursor to the next row, if any. 
Name: fts3auxEofMethod; Comment: ** xEof - Return true if the cursor is at EOF, or false otherwise. 
Name: sqlite3Fts3InitAux; Comment: ** Register the fts3aux module with database connection db. Return SQLITE_OK ** if successful or an error code if sqlite3_create_module() fails. 
Name: fts3isspace; Comment: ** This function is equivalent to the standard isspace() function. ** ** The standard isspace() can be awkward to use safely, because although it ** is defined to accept an argument of type int, its behavior when passed ** an integer that falls outside of the range of the unsigned char type ** is undefined (and sometimes, "undefined" means segfault). This wrapper ** is defined to accept an argument of type char, and always returns 0 for ** any values that fall outside of the range of the unsigned char type (i.e. ** negative values). 
Name: fts3MallocZero; Comment: ** Allocate nByte bytes of memory using sqlite3_malloc(). If successful, ** zero the memory before returning a pointer to it. If unsuccessful, ** return NULL. 
Name: fts3ReallocOrFree; Comment: ** Enlarge a memory allocation. If an out-of-memory allocation occurs, ** then free the old allocation. 
Name: opPrecedence; Comment: ** The argument is an Fts3Expr structure for a binary operator (any type ** except an FTSQUERY_PHRASE). Return an integer value representing the ** precedence of the operator. Lower values have a higher precedence (i.e. ** group more tightly). For example, in the C language, the == operator ** groups more tightly than ||, and would therefore have a higher precedence. ** ** When using the new fts3 query syntax (when SQLITE_ENABLE_FTS3_PARENTHESIS ** is defined), the order of the operators in precedence from highest to ** lowest is: ** ** NEAR ** NOT ** AND (including implicit ANDs) ** OR ** ** Note that when using the old query syntax, the OR operator has a higher ** precedence than the AND operator. 
Name: fts3ExprCheckDepth; Comment: ** Return SQLITE_ERROR if the maximum depth of the expression tree passed ** as the only argument is more than nMaxDepth. 
Name: fts3ExprBalance; Comment: ** This function attempts to transform the expression tree at (*pp) to ** an equivalent but more balanced form. The tree is modified in place. ** If successful, SQLITE_OK is returned and (*pp) set to point to the ** new root expression node. ** ** nMaxDepth is the maximum allowable depth of the balanced sub-tree. ** ** Otherwise, if an error occurs, an SQLite error code is returned and ** expression (*pp) freed. 
Name: fts3FreeExprNode; Comment: ** Free a single node of an expression tree. 
Name: sqlite3Fts3ExprFree; Comment: ** Free a parsed fts3 query expression allocated by sqlite3Fts3ExprParse(). ** ** This function would be simpler if it recursively called itself. But ** that would mean passing a sufficiently large expression to ExprParse() ** could cause a stack overflow. 
Name: exprToString; Comment: ** Return a pointer to a buffer containing a text representation of the ** expression passed as the first argument. The buffer is obtained from ** sqlite3_malloc(). It is the responsibility of the caller to use ** sqlite3_free() to release the memory. If an OOM condition is encountered, ** NULL is returned. ** ** If the second argument is not NULL, then its contents are prepended to ** the returned expression text and then freed using sqlite3_free(). 
Name: sqlite3Fts3ExprInitTestInterface; Comment: ** Register the query expression parser test function fts3_exprtest() ** with database connection db. 
Name: fts3HashMalloc; Comment: ** Malloc and Free functions 
Name: sqlite3Fts3HashInit; Comment: Turn bulk memory into a hash table object by initializing the** fields of the Hash structure. ** ** "pNew" is a pointer to the hash table that is to be initialized. ** keyClass is one of the constants ** FTS3_HASH_BINARY or FTS3_HASH_STRING. The value of keyClass ** determines what kind of key the hash table will use. "copyKey" is ** true if the hash table should make its own private copy of keys and ** false if it should just use the supplied pointer. 
Name: sqlite3Fts3HashClear; Comment: Remove all entries from a hash table. Reclaim all memory.** Call this routine to delete a hash table or to reset a hash table ** to the empty state. 
Name: fts3StrHash; Comment: ** Hash and comparison functions when the mode is FTS3_HASH_STRING 
Name: fts3BinHash; Comment: ** Hash and comparison functions when the mode is FTS3_HASH_BINARY 
Name: int; Comment: ** Return a pointer to the appropriate hash function given the key class. ** ** The C syntax in this function definition may be unfamilar to some ** programmers, so we provide the following additional explanation: ** ** The name of the function is "ftsHashFunction". The function takes a ** single parameter "keyClass". The return value of ftsHashFunction() ** is a pointer to another function. Specifically, the return value ** of ftsHashFunction() is a pointer to a function that takes two parameters ** with types "const void*" and "int" and returns an "int". 
Name: int; Comment: ** Return a pointer to the appropriate hash function given the key class. ** ** For help in interpreted the obscure C code in the function definition, ** see the header comment on the previous function. 
Name: fts3Rehash; Comment: Resize the hash table so that it cantains "new_size" buckets.** "new_size" must be a power of 2. The hash table might fail ** to resize if sqliteMalloc() fails. ** ** Return non-zero if a memory allocation error occurs. 
Name: sqlite3Fts3HashFind; Comment: ** Attempt to locate an element of the hash table pH with a key ** that matches pKey,nKey. Return the data for this element if it is ** found, or NULL if there is no match. 
Name: porterCreate; Comment: ** Create a new tokenizer instance. 
Name: porterDestroy; Comment: ** Destroy a tokenizer 
Name: porterClose; Comment: ** Close a tokenization cursor previously opened by a call to ** porterOpen() above. 
Name: m_gt_0; Comment: Let any sequence of one or more vowels be represented by V and let C be sequence of one or more consonants. Then every word can be represented as: [C] (VC){m} [V]** ** In prose: A word is an optional consonant followed by zero or ** vowel-consonant pairs followed by an optional vowel. "m" is the ** number of vowel consonant pairs. This routine computes the value ** of m for the first i bytes of a word. ** ** Return true if the m-value for z is 1 or more. In other words, ** return true if z contains at least one vowel that is followed ** by a consonant. ** ** In this routine z[] is in reverse order. So we are really looking ** for an instance of a consonant followed by a vowel. 
Name: m_eq_1; Comment: Like mgt0 above except we are looking for a value of m which is** exactly 1 
Name: m_gt_1; Comment: Like mgt0 above except we are looking for a value of m>1 instead** or m>0 
Name: hasVowel; Comment: ** Return TRUE if there is a vowel anywhere within z[0..n-1] 
Name: doubleConsonant; Comment: ** Return TRUE if the word ends in a double consonant. ** ** The text is reversed here. So we are really looking at ** the first two characters of z[]. 
Name: star_oh; Comment: ** Return TRUE if the word ends with three letters which ** are consonant-vowel-consonent and where the final consonant ** is not 'w', 'x', or 'y'. ** ** The word is reversed here. So we are really checking the ** first three letters and the first one cannot be in [wxy]. 
Name: copy_stemmer; Comment: ** This is the fallback stemmer used when the porter stemmer is ** inappropriate. The input word is copied into the output with ** US-ASCII case folding. If the input word is too long (more ** than 20 bytes if it contains no digits or more than 6 bytes if ** it contains digits) then word is truncated to 20 or 6 bytes ** by taking 10 or 3 bytes from the beginning and end. 
Name: porter_stemmer; Comment: ** Stem the input word zIn[0..nIn-1]. Store the output in zOut. ** zOut is at least big enough to hold nIn bytes. Write the actual ** size of the output word (exclusive of the '_0' terminator) into *pnOut. ** ** Any upper-case characters in the US-ASCII character set ([A-Z]) ** are converted to lower case. Upper-case UTF characters are ** unchanged. ** ** Words that are longer than about 20 bytes are stemmed by retaining ** a few bytes from the beginning and the end of the word. If the ** word contains digits, 3 bytes are taken from the beginning and ** 3 bytes from the end. For long words without digits, 10 bytes ** are taken from each end. US-ASCII case folding still applies. ** ** If the input word contains not digits but does characters not ** in [a-zA-Z] then no stemming is attempted and this routine just ** copies the input into the input into the output with US-ASCII ** case folding. ** ** Stemming never increases the length of the word. So there is ** no chance of overflowing the zOut buffer. 
Name: sqlite3Fts3PorterTokenizerModule; Comment: ** Allocate a new porter tokenizer. Return a pointer to the new ** tokenizer in *ppModule 
Name: fts3TokenizerFunc; Comment: None** ** where <function-name> is the name passed as the second argument ** to the sqlite3Fts3InitHashTable() function (e.g. 'fts3_tokenizer'). ** ** If the <pointer> argument is specified, it must be a blob value ** containing a pointer to be stored as the hash data corresponding ** to the string <key-name>. If <pointer> is not specified, then ** the string <key-name> must already exist in the has table. Otherwise, ** an error is returned. ** ** Whether or not the <pointer> argument is specified, the value returned ** is a blob containing the pointer stored as the hash data corresponding ** to string <key-name> (after the hash-table is updated, if applicable). 
Name: testFunc; Comment: None will return the string: "{0 i I 1 dont don't 2 see see 3 how how}"** 
Name: intTestFunc; Comment: None** 
Name: sqlite3Fts3InitHashTable; Comment: None** ** This function adds a scalar function (see header comment above ** fts3TokenizerFunc() in this file for details) and, if ENABLE_TABLE is ** defined at compilation time, a temporary virtual table (see header ** comment above struct HashTableVtab) to the database schema. Both ** provide read/write access to the contents of *pHash. ** ** The third argument to this function, zName, is used as the name ** of both the scalar and, if created, the virtual table. 
Name: simpleCreate; Comment: ** Create a new tokenizer instance. 
Name: simpleDestroy; Comment: ** Destroy a tokenizer 
Name: simpleClose; Comment: ** Close a tokenization cursor previously opened by a call to ** simpleOpen() above. 
Name: sqlite3Fts3SimpleTokenizerModule; Comment: ** Allocate a new simple tokenizer. Return a pointer to the new ** tokenizer in *ppModule 
Name: fts3tokQueryTokenizer; Comment: ** Query FTS for the tokenizer implementation named zName. 
Name: fts3tokDisconnectMethod; Comment: ** This function does the work for both the xDisconnect and xDestroy methods. ** These tables have no persistent representation of their own, so xDisconnect ** and xDestroy are identical operations. 
Name: fts3tokBestIndexMethod; Comment: ** xBestIndex - Analyze a WHERE and ORDER BY clause. 
Name: fts3tokOpenMethod; Comment: ** xOpen - Open a cursor. 
Name: fts3tokResetCursor; Comment: ** Reset the tokenizer cursor passed as the only argument. As if it had ** just been returned by fts3tokOpenMethod(). 
Name: fts3tokCloseMethod; Comment: ** xClose - Close a cursor. 
Name: fts3tokNextMethod; Comment: ** xNext - Advance the cursor to the next row, if any. 
Name: fts3tokEofMethod; Comment: ** xEof - Return true if the cursor is at EOF, or false otherwise. 
Name: sqlite3Fts3InitTok; Comment: ** Register the fts3tok module with database connection db. Return SQLITE_OK ** if successful or an error code if sqlite3_create_module() fails. 
Name: fts3Writelock; Comment: ** This function ensures that the caller has obtained an exclusive ** shared-cache table-lock on the %_segdir table. This is required before ** writing data to the fts3 table. If this lock is not acquired first, then ** the caller may end up attempting to take this lock as part of committing ** a transaction, causing SQLite to return SQLITE_LOCKED or ** LOCKED_SHAREDCACHEto a COMMIT command. ** ** It is best to avoid this because if FTS3 returns any error when ** committing a transaction, the whole transaction will be rolled back. ** And this is not what users expect when they get SQLITE_LOCKED_SHAREDCACHE. ** It can still happen if the user locks the underlying tables directly ** instead of accessing them via FTS. 
Name: fts3PendingListDelete; Comment: ** Free a PendingList object allocated by fts3PendingListAppend(). 
Name: sqlite3Fts3PendingTermsClear; Comment: ** Discard the contents of the pending-terms hash tables. 
Name: fts3InsertTerms; Comment: ** This function is called by the xUpdate() method as part of an INSERT ** operation. It adds entries for each term in the new record to the ** pendingTerms hash table. ** ** Argument apVal is the same as the similarly named argument passed to ** fts3InsertData(). Parameter iDocid is the docid of the new row. 
Name: fts3DeleteAll; Comment: ** Remove all data from the FTS3 table. Clear the hash table containing ** pending terms. 
Name: langidFromSelect; Comment: ** 
Name: sqlite3Fts3SegmentsClose; Comment: ** Close the blob handle at p->pSegments, if it is open. See comments above ** the sqlite3Fts3ReadBlock() function for details. 
Name: fts3SegReaderSetEof; Comment: ** Set an Fts3SegReader cursor to point at EOF. 
Name: fts3SegReaderNext; Comment: ** Move the iterator passed as the first argument to the next term in the ** segment. If successful, SQLITE_OK is returned. If there is no next term, ** SQLITE_DONE. Otherwise, an SQLite error code. 
Name: fts3SegReaderFirstDocid; Comment: ** Set the SegReader to point to the first docid in the doclist associated ** with the current term. 
Name: sqlite3Fts3SegReaderFree; Comment: ** Free all allocations associated with the iterator passed as the ** second argument. 
Name: fts3CompareElemByTerm; Comment: ** This is a comparison function used as a qsort() callback when sorting ** an array of pending terms by term. This occurs as part of flushing ** the contents of the pending-terms hash table to the database. 
Name: fts3SegReaderCmp; Comment: ** Compare the entries pointed to by two Fts3SegReader structures. ** Comparison is as follows: ** ** 1) EOF is greater than not EOF. ** ** 2) The current terms (if any) are compared using memcmp(). If one ** term is a prefix of another, the longer term is considered the ** larger. ** ** 3) By segment age. An older segment is considered larger. 
Name: fts3SegReaderDoclistCmp; Comment: ** A different comparison function for SegReader structures. In this ** version, it is assumed that each SegReader points to an entry in ** a doclist for identical terms. Comparison is made as follows: ** ** 1) EOF (end of doclist in this case) is greater than not EOF. ** ** 2) By current docid. ** ** 3) By segment age. An older segment is considered larger. 
Name: sqlite3Fts3MaxLevel; Comment: ** Find the largest relative level number in the table. If successful, set ** *pnMax to this value and return SQLITE_OK. Otherwise, if an error occurs, ** set *pnMax to zero and return an SQLite error code. 
Name: fts3TreeFinishNode; Comment: ** Helper function for fts3NodeWrite(). 
Name: fts3NodeFree; Comment: ** Free all memory allocations associated with the tree pTree. 
Name: fts3SegWriterFree; Comment: ** Release all memory held by the SegmentWriter object passed as the ** first argument. 
Name: fts3IsEmpty; Comment: ** The first value in the apVal[] array is assumed to contain an integer. ** This function tests if there exist any documents with docid values that ** are different from that integer. i.e. if deleting the document with docid ** pRowid would mean the FTS3 table were empty. ** ** If successful, *pisEmpty is set to true if the table is empty except for ** document pRowid, or false otherwise, and SQLITE_OK is returned. If an ** error occurs, an SQLite error code is returned. 
Name: fts3SegmentMaxLevel; Comment: ** Set *pnMax to the largest segment level in the database for the index ** iIndex. ** ** Segment levels are stored in the 'level' column of the %_segdir table. ** ** Return SQLITE_OK if successful, or an SQLite error code if not. 
Name: fts3SegmentIsMaxLevel; Comment: ** iAbsLevel is an absolute level that may be assumed to exist within ** the database. This function checks if it is the largest level number ** within its index. Assuming no error occurs, *pbMax is set to 1 if ** iAbsLevel is indeed the largest level, or 0 otherwise, and SQLITE_OK ** is returned. If an error occurs, an error code is returned and the ** final value of *pbMax is undefined. 
Name: sqlite3Fts3MsrIncrRestart; Comment: ** This function is called on a MultiSegReader that has been started using ** sqlite3Fts3MsrIncrStart(). One or more calls to MsrIncrNext() may also ** have been made. Calling this function puts the MultiSegReader in such ** a state that if the next two calls are: ** ** sqlite3Fts3SegReaderStart() ** sqlite3Fts3SegReaderStep() ** ** then the entire doclist for the term is available in ** MultiSegReader.aDoclist/nDoclist. 
Name: fts3ReadEndBlockField; Comment: ** Decode the "end_block" field, selected by column iCol of the SELECT ** statement passed as the first argument. ** ** The "end_block" field may contain either an integer, or a text field ** containing the text representation of two non-negative integers separated ** by one or more space (0x20) characters. In the first case, set *piEndBlock ** to the integer value and *pnByte to zero before returning. In the second, ** set *piEndBlock to the first value and *pnByte to the second. 
Name: sqlite3Fts3PendingTermsFlush; Comment: ** Flush the contents of pendingTerms to level 0 segments. 
Name: fts3DoOptimize; Comment: ** Merge the entire database so that there is one segment for each ** iIndex/iLangid combination. 
Name: fts3DoRebuild; Comment: None** ** The entire FTS index is discarded and rebuilt. If the table is one ** created using the content=xxx option, then the new index is based on ** the current contents of the xxx table. Otherwise, it is rebuilt based ** on the contents of the %_content table. 
Name: blobGrowBuffer; Comment: ** If *pRc is not SQLITE_OK when this function is called, it is a no-op. ** Otherwise, if the allocation at pBlob->a is not already at least nMin ** bytes in size, extend (realloc) it to be so. ** ** If an OOM error occurs, set *pRc to SQLITE_NOMEM and leave pBlob->a ** unmodified. Otherwise, if the allocation succeeds, update pBlob->nAlloc ** to reflect the new size of the pBlob->a[] buffer. 
Name: nodeReaderNext; Comment: ** Attempt to advance the node-reader object passed as the first argument to ** the next entry on the node. ** ** Return an error code if an error occurs (SQLITE_NOMEM is possible). ** Otherwise return SQLITE_OK. If there is no next entry on the node ** (e.g. because the current entry is the last) set NodeReader->aNode to ** NULL to indicate EOF. Otherwise, populate the NodeReader structure output ** variables for the new entry. 
Name: nodeReaderRelease; Comment: ** Release all dynamic resources held by node-reader object *p. 
Name: nodeReaderInit; Comment: ** Initialize a node-reader object to read the node in buffer aNode/nNode. ** ** If successful, SQLITE_OK is returned and the NodeReader object set to ** point to the first entry on the node (if any). Otherwise, an SQLite ** error code is returned. 
Name: fts3IsAppendable; Comment: ** Query to see if the entry in the %_segments table with blockid iEnd is ** NULL. If no error occurs and the entry is NULL, set *pbRes 1 before ** returning. Otherwise, set *pbRes to 0. ** ** Or, if an error occurs while querying the database, return an SQLite ** error code. The final value of *pbRes is undefined in this case. ** ** This is used to test if a segment is an "appendable" segment. If it ** is, then a NULL entry has been inserted into the %_segments table ** with blockid %_segdir.end_block. 
Name: fts3IncrmergeHintStore; Comment: ** Store an incr-merge hint in the database. 
Name: fts3IncrmergeHintLoad; Comment: ** Load an incr-merge hint from the database. The incr-merge hint, if one ** exists, is stored in the rowid==1 row of the %_stat table. ** ** If successful, populate blob *pHint with the value read from the %_stat ** table and return SQLITE_OK. Otherwise, if an error occurs, return an ** SQLite error code. 
Name: fts3IncrmergeHintPop; Comment: ** Read the last entry (most recently pushed) from the hint blob *pHint ** and then remove the entry. Write the two values read to *piAbsLevel and ** *pnInput before returning. ** ** If no error occurs, return SQLITE_OK. If the hint blob in *pHint does ** not contain at least two valid varints, return SQLITE_CORRUPT_VTAB. 
Name: sqlite3Fts3Incrmerge; Comment: ** Attempt an incremental merge that writes nMerge leaf blocks. ** ** Incremental merges happen nMin segments at a time. The segments ** to be merged are the nMin oldest segments (the ones with the smallest ** values for the _segdir.idx field) in the highest level that contains ** at least nMin segments. Multiple merges might occur in an attempt to ** write the quota of nMerge leaf blocks. 
Name: fts3Getint; Comment: ** Convert the text beginning at *pz into an integer and return ** its value. Advance *pz to point to the first character past ** the integer. ** ** This function used for parameters to merge= and incrmerge= ** commands. 
Name: fts3IntegrityCheck; Comment: ** Check if the contents of the FTS index match the current contents of the ** content table. If no error occurs and the contents do match, set *pbOk ** to true and return SQLITE_OK. Or if the contents do not match, set *pbOk ** to false before returning. ** ** If an error occurs (e.g. an OOM or IO error), return an SQLite error ** code. The final value of *pbOk is undefined in this case. 
Name: fts3SpecialInsert; Comment: ** Handle a 'special' INSERT of the form: ** ** "INSERT INTO tbl(tbl) VALUES(<expr>)" ** ** Argument pVal contains the result of <expr>. Currently the only ** meaningful value to insert is the text 'optimize'. 
Name: sqlite3Fts3FreeDeferredDoclists; Comment: ** Delete all cached deferred doclists. Deferred doclists are cached ** (allocated) by the sqlite3Fts3CacheDeferredDoclists() function. 
Name: sqlite3Fts3FreeDeferredTokens; Comment: ** Free all entries in the pCsr->pDeffered list. Entries are added to ** this list using sqlite3Fts3DeferToken(). 
Name: sqlite3Fts3CacheDeferredDoclists; Comment: ** Generate deferred-doclists for all tokens in the pCsr->pDeferred list ** based on the row that pCsr currently points to. ** ** A deferred-doclist is like any other doclist with position information ** included, except that it only contains entries for a single row of the ** table, not for all rows. 
Name: sqlite3Fts3Optimize; Comment: ** Flush any data in the pending-terms hash table to disk. If successful, ** merge all segments in the database (including the new segment, if ** there was any data to flush) into a single segment. 
Name: fts3MIBufferNew; Comment: ** Allocate a two-slot MatchinfoBuffer object. 
Name: sqlite3Fts3MIBufferFree; Comment: ** Free a MatchinfoBuffer object allocated using fts3MIBufferNew() 
Name: fts3GetDeltaPosition; Comment: ** This function is used to help iterate through a position-list. A position ** list is a list of unique integers, sorted from smallest to largest. Each ** element of the list is represented by an FTS3 varint that takes the value ** of the difference between the current element and the previous one plus ** two. For example, to store the position-list: ** ** 4 9 113 ** ** the three varints: ** ** 6 7 106 ** ** are encoded. ** ** When this function is called, *pp points to the start of an element of ** the list. *piPos contains the value of the previous entry in the list. ** After it returns, *piPos contains the value of the next element of the ** list and *pp is advanced to the following varint. 
Name: fts3ExprLoadDoclistsCb; Comment: ** This is an fts3ExprIterate() callback used while loading the doclists ** for each phrase into Fts3Expr.aDoclist[]/nDoclist. See also ** fts3ExprLoadDoclists(). 
Name: fts3SnippetAdvance; Comment: ** Advance the position list iterator specified by the first two ** arguments so that it points to the first element with a value greater ** than or equal to parameter iNext. 
Name: fts3SnippetNextCandidate; Comment: ** Advance the snippet iterator to the next candidate snippet. 
Name: fts3SnippetFindPositions; Comment: ** This function is an fts3ExprIterate() callback used by fts3BestSnippet(). ** Each invocation populates an element of the SnippetIter.aPhrase[] array. 
Name: fts3ColumnlistCount; Comment: ** This function is used to count the entries in a column-list (a ** delta-encoded list of term offsets within a single column of a single ** row). When this function is called, *ppCollist should point to the ** beginning of the first varint in the column-list (the varint that ** contains the position of the first matching term in the column data). ** Before returning, *ppCollist is set to point to the first byte after ** the last varint in the column-list (either the 0x00 signifying the end ** of the position-list, or the 0x01 that precedes the column number of ** the next column in the position-list). ** ** The number of elements in the column-list is returned. 
Name: fts3ExprLHitGather; Comment: ** Gather the results for matchinfo directives 'y' and 'b'. 
Name: fts3LcsIteratorAdvance; Comment: ** Advance the iterator passed as an argument to the next position. Return ** 1 if the iterator is at EOF or if it now points to the start of the ** position list for the next column. 
Name: fts3MatchinfoLcs; Comment: ** This function implements the FTS3_MATCHINFO_LCS matchinfo() flag. ** ** If the call is successful, the longest-common-substring lengths for each ** column are written into the first nCol elements of the pInfo->aMatchinfo[] ** array before returning. SQLITE_OK is returned in this case. ** ** Otherwise, if an error occurs, an SQLite error code is returned and the ** data written to the first nCol elements of pInfo->aMatchinfo[] is ** undefined. 
Name: fts3ExprTermOffsetInit; Comment: ** This function is an fts3ExprIterate() callback used by sqlite3Fts3Offsets(). 
Name: unicodeDestroy; Comment: ** Destroy a tokenizer allocated by unicodeCreate(). 
Name: unicodeIsException; Comment: ** Return true if the p->aiException[] array contains the value iCode. 
Name: unicodeIsAlnum; Comment: ** Return true if, for the purposes of tokenization, codepoint iCode is ** considered a token character (not a separator). 
Name: unicodeClose; Comment: ** Close a tokenization cursor previously opened by a call to ** simpleOpen() above. 
Name: sqlite3Fts3UnicodeTokenizer; Comment: ** Set *ppModule to a pointer to the sqlite3_tokenizer_module ** structure for the unicode tokenizer. 
Name: sqlite3FtsUnicodeIsalnum; Comment: ** Return true if the argument corresponds to a unicode codepoint ** classified as either a letter or a number. Otherwise false. ** ** The results are undefined if the value passed to this function ** is less than zero. 
Name: remove_diacritic; Comment: ** If the argument is a codepoint corresponding to a lowercase letter ** in the ASCII range with a diacritic added, return the codepoint ** of the ASCII letter only. For example, if passed 235 - "LATIN ** SMALL LETTER E WITH DIAERESIS" - return 65 ("LATIN SMALL LETTER ** E"). The resuls of passing a codepoint that corresponds to an ** uppercase letter are undefined. 
Name: sqlite3FtsUnicodeIsdiacritic; Comment: ** Return true if the argument interpreted as a unicode codepoint ** is a diacritical modifier character. 
Name: sqlite3FtsUnicodeFold; Comment: ** Interpret the argument as a unicode codepoint. If the codepoint ** is an upper case character that has a lower case equivalent, ** return the codepoint corresponding to the lower case version. ** Otherwise, return a copy of the argument. ** ** The results are undefined if the value passed to this function ** is less than zero. 
Name: jsonZero; Comment: Set the JsonString object to an empty string
Name: jsonInit; Comment: Initialize the JsonString object
Name: jsonReset; Comment: Free all allocated memory and reset the JsonString object back to its** initial state. 
Name: jsonOom; Comment: Report an out-of-memory (OOM) condition
Name: jsonGrow; Comment: Enlarge pJson->zBuf so that it can hold at least N more bytes.** Return zero on success. Return non-zero on an OOM error 
Name: jsonAppendRaw; Comment: Append N bytes from zIn onto the end of the JsonString string.
Name: jsonPrintf; Comment: Append formatted text (not to exceed N bytes) to the JsonString.
Name: jsonAppendChar; Comment: Append a single character
Name: jsonAppendSeparator; Comment: Append a comma separator to the output buffer, if the previous character is not '[' or '{'.
Name: jsonAppendString; Comment: Append the N-byte string in zIn to the end of the JsonString string** under construction. Enclose the string in "..." and escape ** any double-quotes or backslash characters contained within the ** string. 
Name: jsonResult; Comment: Make the JSON in p the result of the SQL function.
Name: jsonNodeSize; Comment: ** Return the number of consecutive JsonNode slots need to represent ** the parsed JSON at pNode. The minimum answer is 1. For ARRAY and ** OBJECT types, the number might be larger. ** ** Appended elements are not counted. The value returned is the number ** by which the JsonNode counter should increment in order to go to the ** next peer value. 
Name: jsonParseReset; Comment: ** Reclaim all memory allocated by a JsonParse object. But do not ** delete the JsonParse object itself. 
Name: jsonParseFree; Comment: ** Free a JsonParse object that was obtained from sqlite3_malloc(). 
Name: jsonHexToInt; Comment: ** Translate a single byte of Hex into an integer. ** This routine only works if h really is a valid hexadecimal ** character: 0..9a..fA..F 
Name: jsonHexToInt4; Comment: ** Convert a 4-byte hex string into an integer 
Name: jsonIs4Hex; Comment: ** Return true if z[] begins with 4 (or more) hexadecimal digits 
Name: jsonParseValue; Comment: Parse a single JSON value which begins at pParse->zJson[i]. Return the index of the first character past the end of the value parsed. Return negative for a syntax error. Special cases: return -2 if the first non-whitespace character is '}' and return -3 if the first** non-whitespace character is ']'. 
Name: jsonParseFillInParentage; Comment: Mark node i of pParse as being a child of iParent. Call recursively** to fill in all the descendants of node i. 
Name: jsonParseFindParents; Comment: ** Compute the parentage of all nodes in a completed parse. 
Name: jsonParseCached; Comment: ** Obtain a complete parse of the JSON found in the first argument ** of the argv array. Use the sqlite3_get_auxdata() cache for this ** parse if it is available. If the cache is not available or if it ** is no longer valid, parse the JSON again and return the new parse, ** and also register the new parse so that it will be available for ** future sqlite3_get_auxdata() calls. 
Name: jsonLabelCompare; Comment: ** Compare the OBJECT label at pNode against zKey,nKey. Return true on ** a match. 
Name: jsonPathSyntaxError; Comment: ** Return the text of a syntax error message on a JSON path. Space is ** obtained from sqlite3_malloc(). 
Name: jsonWrongNumArgs; Comment: ** Report the wrong number of arguments for json_insert(), json_replace() ** or json_set(). 
Name: jsonRemoveAllNulls; Comment: ** Mark all NULL entries in the Object passed in as JNODE_REMOVE. 
Name: jsonParseFunc; Comment: ** The json_parse(JSON) function returns a string which describes ** a parse of the JSON provided. Or it returns NULL if JSON is not ** well-formed. 
Name: jsonTest1Func; Comment: ** The json_test1(JSON) function return true (1) if the input is JSON ** text generated by another json function. It returns (0) if the input ** is not known to be JSON. 
Name: jsonQuoteFunc; Comment: ** Implementation of the json_QUOTE(VALUE) function. Return a JSON value ** corresponding to the SQL value input. Mostly this means putting ** double-quotes around strings and returning the unquoted string "null" ** when given a NULL input. 
Name: jsonArrayFunc; Comment: ** Implementation of the json_array(VALUE,...) function. Return a JSON ** array that contains all values given in arguments. Or if any argument ** is a BLOB, throw an error. 
Name: jsonArrayLengthFunc; Comment: ** json_array_length(JSON) ** json_array_length(JSON, PATH) ** ** Return the number of elements in the top-level JSON array. ** Return 0 if the input is not a well-formed JSON array. 
Name: jsonExtractFunc; Comment: ** json_extract(JSON, PATH, ...) ** ** Return the element described by PATH. Return NULL if there is no ** PATH element. If there are multiple PATHs, then return a JSON array ** with the result from each path. Throw an error if the JSON or any PATH ** is malformed. 
Name: jsonPatchFunc; Comment: ** Implementation of the json_mergepatch(JSON1,JSON2) function. Return a JSON ** object that is the result of running the RFC 7396 MergePatch() algorithm ** on the two arguments. 
Name: jsonObjectFunc; Comment: ** Implementation of the json_object(NAME,VALUE,...) function. Return a JSON ** object that contains all name/value given in arguments. Or if any name ** is not a string or if any value is a BLOB, throw an error. 
Name: jsonRemoveFunc; Comment: ** json_remove(JSON, PATH, ...) ** ** Remove the named elements from JSON and return the result. malformed ** JSON or PATH arguments result in an error. 
Name: jsonReplaceFunc; Comment: ** json_replace(JSON, PATH, VALUE, ...) ** ** Replace the value at PATH with VALUE. If PATH does not already exist, ** this routine is a no-op. If JSON or PATH is malformed, throw an error. 
Name: jsonSetFunc; Comment: ** json_set(JSON, PATH, VALUE, ...) ** ** Set the value at PATH to VALUE. Create the PATH if it does not already ** exist. Overwrite existing values that do exist. ** If JSON or PATH is malformed, throw an error. ** ** json_insert(JSON, PATH, VALUE, ...) ** ** Create PATH and initialize it to VALUE. If PATH already exists, this ** routine is a no-op. If JSON or PATH is malformed, throw an error. 
Name: jsonTypeFunc; Comment: ** json_type(JSON) ** json_type(JSON, PATH) ** ** Return the top-level "type" of a JSON string. Throw an error if ** either the JSON or PATH inputs are not well-formed. 
Name: jsonValidFunc; Comment: ** json_valid(JSON) ** ** Return 1 if JSON is a well-formed JSON string according to RFC-7159. ** Return 0 otherwise. 
Name: jsonArrayStep; Comment: ** json_group_array(VALUE) ** ** Return a JSON array composed of all values in the aggregate. 
Name: jsonGroupInverse; Comment: ** This method works for both json_group_array() and json_group_object(). ** It works by removing the first element of the group by searching forward ** to the first comma (",") that is not within a string and deleting all ** text through that comma. 
Name: jsonObjectStep; Comment: ** json_group_obj(NAME,VALUE) ** ** Return a JSON object composed of all names and values in the aggregate. 
Name: jsonEachConnect; Comment: Constructor for the json_each virtual table 
Name: jsonEachDisconnect; Comment: destructor for json_each virtual table 
Name: jsonEachOpenEach; Comment: constructor for a JsonEachCursor object for json_each(). 
Name: jsonEachOpenTree; Comment: constructor for a JsonEachCursor object for json_tree(). 
Name: jsonEachCursorReset; Comment: Reset a JsonEachCursor back to its original state. Free any memory** held. 
Name: jsonEachClose; Comment: Destructor for a jsonEachCursor object 
Name: jsonEachEof; Comment: Return TRUE if the jsonEachCursor object has been advanced off the end** of the JSON object 
Name: jsonEachNext; Comment: Advance the cursor to the next element for json_tree() 
Name: jsonEachRowid; Comment: Return the current rowid value 
Name: jsonEachBestIndex; Comment: The query strategy is to look for an equality constraint on the json** column. Without such a constraint, the table cannot operate. idxNum is ** 1 if the constraint is found, 3 if the constraint and zRoot are found, ** and 0 otherwise. 
Name: jsonEachFilter; Comment: Start a search on a new JSON string 
Name: sqlite3Json1Init; Comment: ***************************************************************************** The following routines are the only publically visible identifiers in this ** file. Call the following routines in order to register the various SQL ** functions and the virtual table implemented by this file. ***************************************************************************
Name: readInt16; Comment: ** Functions to deserialize a 16 bit integer, 32 bit real number and ** 64 bit integer. The deserialized value is returned. 
Name: writeInt16; Comment: ** Functions to serialize a 16 bit integer, 32 bit real number and ** 64 bit integer. The value returned is the number of bytes written ** to the argument buffer (always 2, 4 and 8 respectively). 
Name: nodeReference; Comment: ** Increment the reference count of node p. 
Name: nodeZero; Comment: ** Clear the content of node p (set all bytes to 0x00). 
Name: nodeHash; Comment: ** Given a node number iNode, return the corresponding key to use ** in the Rtree.aHash table. 
Name: nodeHashLookup; Comment: ** Search the node hash table for node iNode. If found, return a pointer ** to it. Otherwise, return 0. 
Name: nodeHashInsert; Comment: ** Add node pNode to the node hash table. 
Name: nodeHashDelete; Comment: ** Remove node pNode from the node hash table. 
Name: nodeNew; Comment: ** Allocate and return new r-tree node. Initially, (RtreeNode.iNode==0), ** indicating that node has not yet been assigned a node number. It is ** assigned a node number when nodeWrite() is called to write the ** node contents out to the database. 
Name: nodeBlobReset; Comment: ** Clear the Rtree.pNodeBlob object 
Name: nodeInParentChain; Comment: ** Check to see if pNode is the same as pParent or any of the parents ** of pParent. 
Name: nodeDeleteCell; Comment: ** Remove the cell with index iCell from node pNode. 
Name: nodeWrite; Comment: ** If the node is dirty, write it out to the database. 
Name: nodeRelease; Comment: ** Release a reference to a node. If the node is dirty and the reference ** count drops to zero, the node data is written to the database. 
Name: rtreeCreate; Comment: ** Rtree virtual table module xCreate method. 
Name: rtreeConnect; Comment: ** Rtree virtual table module xConnect method. 
Name: rtreeReference; Comment: ** Increment the r-tree reference count. 
Name: rtreeRelease; Comment: ** Decrement the r-tree reference count. When the reference count reaches ** zero the structure is deleted. 
Name: rtreeDisconnect; Comment: ** Rtree virtual table module xDisconnect method. 
Name: rtreeDestroy; Comment: ** Rtree virtual table module xDestroy method. 
Name: rtreeOpen; Comment: ** Rtree virtual table module xOpen method. 
Name: resetCursor; Comment: ** Reset a cursor back to its initial state. 
Name: rtreeClose; Comment: ** Rtree virtual table module xClose method. 
Name: rtreeEof; Comment: ** Rtree virtual table module xEof method. ** ** Return non-zero if the cursor does not currently point to a valid ** record (i.e if the scan has finished), or zero otherwise. 
Name: nodeRowidIndex; Comment: ** One of the cells in node pNode is guaranteed to have a 64-bit ** integer value equal to iRowid. Return the index of this cell. 
Name: nodeParentIndex; Comment: ** Return the index of the cell containing a pointer to node pNode ** in its parent. If pNode is the root node, return -1. 
Name: rtreeSearchPointCompare; Comment: ** Compare two search points. Return negative, zero, or positive if the first ** is less than, equal to, or greater than the second. ** ** The rScore is the primary key. Smaller rScore values come first. ** If the rScore is a tie, then use iLevel as the tie breaker with smaller ** iLevel values coming first. In this way, if rScore is the same for all ** SearchPoints, then iLevel becomes the deciding factor and the result ** is a depth-first search, which is the desired default behavior. 
Name: rtreeSearchPointSwap; Comment: ** Interchange two search points in a cursor. 
Name: rtreeSearchPointFirst; Comment: ** Return the search point with the lowest current score. 
Name: rtreeNodeOfFirstSearchPoint; Comment: ** Get the RtreeNode for the search point with the lowest score. 
Name: tracePoint; Comment: Tracing routines for the RtreeSearchPoint queue 
Name: rtreeSearchPointPop; Comment: Remove the search point with the lowest current score.
Name: rtreeStepToLeaf; Comment: ** Continue the search on cursor pCur until the front of the queue ** contains an entry suitable for returning as a result-set row, ** or until the RtreeSearchPoint queue is empty, indicating that the ** query has completed. 
Name: rtreeNext; Comment: ** Rtree virtual table module xNext method. 
Name: rtreeRowid; Comment: ** Rtree virtual table module xRowid method. 
Name: rtreeColumn; Comment: ** Rtree virtual table module xColumn method. 
Name: deserializeGeometry; Comment: ** This function is called to configure the RtreeConstraint object passed ** as the second argument for a MATCH constraint. The value passed as the ** first argument to this function is the right-hand operand to the MATCH ** operator. 
Name: rtreeFilter; Comment: ** Rtree virtual table module xFilter method. 
Name: rtreeBestIndex; Comment: ** Rtree virtual table module xBestIndex method. There are three ** table scan strategies to choose from (in order from most to ** least desirable): ** ** idxNum idxStr Strategy ** ------------------------------------------------ ** 1 Unused Direct lookup by rowid. ** 2 See below R-tree query or full-table scan. ** ------------------------------------------------ ** ** If strategy 1 is used, then idxStr is not meaningful. If strategy ** 2 is used, idxStr is formatted to contain 2 bytes for each ** constraint used. The first two bytes of idxStr correspond to ** the constraint in sqlite3_index_info.aConstraintUsage[] with ** (argvIndex==1) etc. ** ** The first of each pair of bytes in idxStr identifies the constraint ** operator as follows: ** ** Operator Byte Value ** ---------------------- ** = 0x41 ('A') ** <= 0x42 ('B') ** < 0x43 ('C') ** >= 0x44 ('D') ** > 0x45 ('E') ** MATCH 0x46 ('F') ** ---------------------- ** ** The second of each pair of bytes identifies the coordinate column ** to which the constraint applies. The leftmost coordinate column ** is 'a', the second from the left 'b' etc. 
Name: cellArea; Comment: ** Return the N-dimensional volumn of the cell stored in *p. 
Name: cellMargin; Comment: ** Return the margin length of cell p. The margin length is the sum ** of the objects size in each dimension. 
Name: cellUnion; Comment: ** Store the union of cells p1 and p2 in p1. 
Name: cellContains; Comment: ** Return true if the area covered by p2 is a subset of the area covered ** by p1. False otherwise. 
Name: cellGrowth; Comment: ** Return the amount cell p would grow by if it were unioned with pCell. 
Name: rowidWrite; Comment: ** Write mapping (iRowid->iNode) to the <rtree>_rowid table. 
Name: parentWrite; Comment: ** Write mapping (iNode->iPar) to the <rtree>_parent table. 
Name: SortByDistance; Comment: Arguments aIdx, aDistance and aSpare all point to arrays of size nIdx. The aIdx array contains the set of integers from 0 to (nIdx-1) in no particular order. This function sorts the values in aIdx according to the indexed values in aDistance. For example, assuming the inputs: aIdx = { 0, 1, 2, 3 } aDistance = { 5.0, 2.0, 7.0, 6.0 } this function sets the aIdx array to contain: aIdx = { 0, 1, 2, 3 }** ** The aSpare array is used as temporary working space by the ** sorting algorithm. 
Name: SortByDimension; Comment: ** Arguments aIdx, aCell and aSpare all point to arrays of size ** nIdx. The aIdx array contains the set of integers from 0 to ** (nIdx-1) in no particular order. This function sorts the values ** in aIdx according to dimension iDim of the cells in aCell. The ** minimum value of dimension iDim is considered first, the ** maximum used to break ties. ** ** The aSpare array is used as temporary working space by the ** sorting algorithm. 
Name: splitNodeStartree; Comment: ** Implementation of the R*-tree variant of SplitNode from Beckman[1990]. 
Name: fixLeafParent; Comment: ** If node pLeaf is not the root of the r-tree and its pParent pointer is ** still NULL, load all ancestor nodes of pLeaf into memory and populate ** the pLeaf->pParent chain all the way up to the root node. ** ** This operation is required when a row is deleted (or updated - an update ** is implemented as a delete followed by an insert). SQLite provides the ** rowid of the row to delete, which can be used to find the leaf on which ** the entry resides (argument pLeaf). Once the leaf is located, this ** function is called to determine its ancestry. 
Name: deleteCell; Comment: ** Delete the cell at index iCell of node pNode. After removing the ** cell, adjust the r-tree data structure if required. 
Name: rtreeInsertCell; Comment: ** Insert cell pCell into node pNode. Node pNode is the head of a ** subtree iHeight high (leaf nodes have iHeight==0). 
Name: rtreeNewRowid; Comment: ** Select a currently unused rowid for a new r-tree record. 
Name: rtreeDeleteRowid; Comment: ** Remove the entry with rowid=iDelete from the r-tree structure. 
Name: rtreeValueDown; Comment: ** Convert an sqlite3_value into an RtreeValue (presumably a float) ** while taking care to round toward negative or positive, respectively. 
Name: rtreeConstraintError; Comment: ** A constraint has failed while inserting a row into an rtree table. ** Assuming no OOM error occurs, this function sets the error message ** (at pRtree->base.zErrMsg) to an appropriate value and returns ** SQLITE_CONSTRAINT. ** ** Parameter iCol is the index of the leftmost column involved in the ** constraint failure. If it is 0, then the constraint that failed is ** the unique constraint on the id column. Otherwise, it is the rtree ** (c1<=c2) constraint on columns iCol and iCol+1 that has failed. ** ** If an OOM occurs, SQLITE_NOMEM is returned instead of SQLITE_CONSTRAINT. 
Name: rtreeUpdate; Comment: ** The xUpdate method for rtree module virtual tables. 
Name: rtreeBeginTransaction; Comment: ** Called when a transaction starts. 
Name: rtreeEndTransaction; Comment: ** Called when a transaction completes (either by COMMIT or ROLLBACK). ** The sqlite3_blob object should be released at this point. 
Name: rtreeRename; Comment: ** The xRename method for rtree module virtual tables. 
Name: rtreeQueryStat1; Comment: ** This function populates the pRtree->nRowEst variable with an estimate ** of the number of rows in the virtual table. If possible, this is based ** on sqlite_stat1 data. Otherwise, use RTREE_DEFAULT_ROWEST. 
Name: rtreeShadowName; Comment: ** Return true if zName is the extension on one of the shadow tables used ** by this module. 
Name: getIntFromStmt; Comment: ** The second argument to this function contains the text of an SQL statement ** that returns a single integer value. The statement is compiled and executed ** using database connection db. If successful, the integer value returned ** is written to *piVal and SQLITE_OK returned. Otherwise, an SQLite error ** code is returned and the value of *piVal after returning is not defined. 
Name: rtreeTokenLength; Comment: ** Return the length of a token 
Name: rtreenode; Comment: None** ** The human readable string takes the form of a Tcl list with one ** entry for each cell in the r-tree node. Each entry is itself a ** list, containing the 8-byte rowid/pageno followed by the ** <num-dimension>*2 coordinates. 
Name: rtreedepth; Comment: None** ** The depth value is 0 for all nodes other than the root node, and the root ** node always has nodeno=1, so the example above is the primary use for this ** routine. This routine is intended for testing and analysis only. 
Name: rtreeCheckReset; Comment: ** Reset SQL statement pStmt. If the sqlite3_reset() call returns an error, ** and RtreeCheck.rc==SQLITE_OK, set RtreeCheck.rc to the error code. 
Name: rtreeCheckAppendMsg; Comment: ** The second and subsequent arguments to this function are a printf() ** style format string and arguments. This function formats the string and ** appends it to the report being accumuated in pCheck. 
Name: rtreeCheckGetNode; Comment: ** This function is a no-op if there is already an error code stored ** in the RtreeCheck object indicated by the first argument. NULL is ** returned in this case. ** ** Otherwise, the contents of rtree table node iNode are loaded from ** the database and copied into a buffer obtained from sqlite3_malloc(). ** If no error occurs, a pointer to the buffer is returned and (*pnNode) ** is set to the size of the buffer in bytes. ** ** Or, if an error does occur, NULL is returned and an error code left ** in the RtreeCheck object. The final value of *pnNode is undefined in ** this case. 
Name: rtreeCheckCount; Comment: ** The second argument to this function must be either "_rowid" or ** "_parent". This function checks that the number of entries in the ** %_rowid or %_parent table is exactly nExpect. If not, it adds ** an error message to the report in the RtreeCheck object indicated ** by the first argument. 
Name: rtreecheck; Comment: None** ** Invoking this SQL function runs an integrity-check on the named rtree ** table. The integrity-check verifies the following: ** ** 1. For each cell in the r-tree structure (%_node table), that: ** ** a) for each dimension, (coord1 <= coord2). ** ** b) unless the cell is on the root node, that the cell is bounded ** by the parent cell on the parent node. ** ** c) for leaf nodes, that there is an entry in the %_rowid ** table corresponding to the cell's rowid value that ** points to the correct node. ** ** d) for cells on non-leaf nodes, that there is an entry in the ** %_parent table mapping from the cell's child node to the ** node that it resides on. ** ** 2. That there are the same number of entries in the %_rowid table ** as there are leaf cells in the r-tree structure, and that there ** is a leaf cell that corresponds to each entry in the %_rowid table. ** ** 3. That there are the same number of entries in the %_parent table ** as there are non-leaf cells in the r-tree structure, and that ** there is a non-leaf cell that corresponds to each entry in the ** %_parent table. 
Name: geopolySwab32; Comment: Do a 4-byte byte swap 
Name: geopolySkipSpace; Comment: Skip whitespace. Return the next non-whitespace character. 
Name: geopolyParseNumber; Comment: Parse out a number. Write the value into *pVal if pVal!=0.** return non-zero on success and zero if the next token is not a number. 
Name: geopolyParseJson; Comment: ** If the input is a well-formed JSON array of coordinates with at least ** four coordinates and where each coordinate is itself a two-value array, ** then convert the JSON into a GeoPoly object and return a pointer to ** that object. ** ** If any error occurs, return NULL. 
Name: geopolyBlobFunc; Comment: ** Implementation of the geopoly_blob(X) function. ** ** If the input is a well-formed Geopoly BLOB or JSON string ** then return the BLOB representation of the polygon. Otherwise ** return NULL. 
Name: geopolyJsonFunc; Comment: ** SQL function: geopoly_json(X) ** ** Interpret X as a polygon and render it as a JSON array ** of coordinates. Or, if X is not a valid polygon, return NULL. 
Name: geopolySvgFunc; Comment: ** SQL function: geopoly_svg(X, ....) ** ** Interpret X as a polygon and render it as a SVG <polyline>. ** Additional arguments are added as attributes to the <polyline>. 
Name: geopolyXformFunc; Comment: ** SQL Function: geopoly_xform(poly, A, B, C, D, E, F) ** ** Transform and/or translate a polygon as follows: ** ** x1 = A*x0 + B*y0 + E ** y1 = C*x0 + D*y0 + F ** ** For a translation: ** ** geopoly_xform(poly, 1, 0, 0, 1, x-offset, y-offset) ** ** Rotate by R around the point (0,0): ** ** geopoly_xform(poly, cos(R), sin(R), -sin(R), cos(R), 0, 0) 
Name: geopolyArea; Comment: ** Compute the area enclosed by the polygon. ** ** This routine can also be used to detect polygons that rotate in ** the wrong direction. Polygons are suppose to be counter-clockwise (CCW). ** This routine returns a negative value for clockwise (CW) polygons. 
Name: geopolyAreaFunc; Comment: ** Implementation of the geopoly_area(X) function. ** ** If the input is a well-formed Geopoly BLOB then return the area ** enclosed by the polygon. If the polygon circulates clockwise instead ** of counterclockwise (as it should) then return the negative of the ** enclosed area. Otherwise return NULL. 
Name: geopolyCcwFunc; Comment: ** Implementation of the geopoly_ccw(X) function. ** ** If the rotation of polygon X is clockwise (incorrect) instead of ** counter-clockwise (the correct winding order according to RFC7946) ** then reverse the order of the vertexes in polygon X. ** ** In other words, this routine returns a CCW polygon regardless of the ** winding order of its input. ** ** Use this routine to sanitize historical inputs that that sometimes ** contain polygons that wind in the wrong direction. 
Name: geopolySine; Comment: Fast approximation for sine(X) for X between -0.5*pi and 2*pi
Name: geopolyRegularFunc; Comment: ** Function: geopoly_regular(X,Y,R,N) ** ** Construct a simple, convex, regular polygon centered at X, Y ** with circumradius R and with N sides. 
Name: geopolyBBoxFunc; Comment: ** Implementation of the geopoly_bbox(X) SQL function. 
Name: geopolyBBoxStep; Comment: ** Implementation of the geopoly_group_bbox(X) aggregate SQL function. 
Name: pointBeneathLine; Comment: ** Determine if point (x0,y0) is beneath line segment (x1,y1)->(x2,y2). ** Returns: ** ** +2 x0,y0 is on the line segement ** ** +1 x0,y0 is beneath line segment ** ** 0 x0,y0 is not on or beneath the line segment or the line segment ** is vertical and x0,y0 is not on the line segment ** ** The left-most coordinate min(x1,x2) is not considered to be part of ** the line segment for the purposes of this analysis. 
Name: geopolyContainsPointFunc; Comment: ** SQL function: geopoly_contains_point(P,X,Y) ** ** Return +2 if point X,Y is within polygon P. ** Return +1 if point X,Y is on the polygon boundary. ** Return 0 if point X,Y is outside the polygon 
Name: geopolyWithinFunc; Comment: ** SQL function: geopoly_within(P1,P2) ** ** Return +2 if P1 and P2 are the same polygon ** Return +1 if P2 is contained within P1 ** Return 0 if any part of P2 is on the outside of P1 ** 
Name: geopolyAddOneSegment; Comment: ** Add a single segment and its associated events. 
Name: geopolyEventMerge; Comment: ** Merge two lists of sorted events by X coordinate 
Name: geopolySortEventsByX; Comment: ** Sort an array of nEvent event objects into a list. 
Name: geopolySegmentMerge; Comment: ** Merge two lists of sorted segments by Y, and then by C. 
Name: geopolySortSegmentsByYAndC; Comment: ** Sort a list of GeoSegments in order of increasing Y and in the event of ** a tie, increasing C (slope). 
Name: geopolyOverlap; Comment: ** Determine the overlap between two polygons 
Name: geopolyOverlapFunc; Comment: ** SQL function: geopoly_overlap(P1,P2) ** ** Determine whether or not P1 and P2 overlap. Return value: ** ** 0 The two polygons are disjoint ** 1 They overlap ** 2 P1 is completely contained within P2 ** 3 P2 is completely contained within P1 ** 4 P1 and P2 are the same polygon ** NULL Either P1 or P2 or both are not valid polygons 
Name: geopolyDebugFunc; Comment: ** Enable or disable debugging output 
Name: geopolyCreate; Comment: ** GEOPOLY virtual table module xCreate method. 
Name: geopolyConnect; Comment: ** GEOPOLY virtual table module xConnect method. 
Name: geopolyBestIndex; Comment: ** Rtree virtual table module xBestIndex method. There are three ** table scan strategies to choose from (in order from most to ** least desirable): ** ** idxNum idxStr Strategy ** ------------------------------------------------ ** 1 "rowid" Direct lookup by rowid. ** 2 "rtree" R-tree overlap query using geopoly_overlap() ** 3 "rtree" R-tree within query using geopoly_within() ** 4 "fullscan" full-table scan. ** ------------------------------------------------ 
Name: geopolyColumn; Comment: ** GEOPOLY virtual table module xColumn method. 
Name: geopolyUpdate; Comment: ** The xUpdate method for GEOPOLY module virtual tables. ** ** For DELETE: ** ** argv[0] = the rowid to be deleted ** ** For INSERT: ** ** argv[0] = SQL NULL ** argv[1] = rowid to insert, or an SQL NULL to select automatically ** argv[2] = _shape column ** argv[3] = first application-defined column.... ** ** For UPDATE: ** ** argv[0] = rowid to modify. Never NULL ** argv[1] = rowid after the change. Never NULL ** argv[2] = new value for _shape ** argv[3] = new value for first application-defined column.... 
Name: geopolyFindFunction; Comment: ** Report that geopoly_overlap() is an overloaded function suitable ** for use in xBestIndex. 
Name: sqlite3RtreeInit; Comment: ** Register the r-tree module with database handle db. This creates the ** virtual table module "rtree" and the debugging/analysis scalar ** function "rtreenode". 
Name: rtreeFreeCallback; Comment: ** This routine deletes the RtreeGeomCallback object that was attached ** one of the SQL functions create by sqlite3_rtree_geometry_callback() ** or sqlite3_rtree_query_callback(). In other words, this routine is the ** destructor for an RtreeGeomCallback objecct. This routine is called when ** the corresponding SQL function is deleted. 
Name: rtreeMatchArgFree; Comment: ** This routine frees the BLOB that is returned by geomCallback(). 
Name: geomCallback; Comment: ** Each call to sqlite3_rtree_geometry_callback() or ** sqlite3_rtree_query_callback() creates an ordinary SQLite ** scalar function that is implemented by this routine. ** ** All this function does is construct an RtreeMatchArg object that ** contains the geometry-checking callback routines and a list of ** parameters to this function, then return that RtreeMatchArg object ** as a BLOB. ** ** The R-Tree MATCH operator will read the returned BLOB, deserialize ** the RtreeMatchArg object, and use the RtreeMatchArg object to figure ** out which elements of the R-Tree should be returned by the query. 
Name: xFree; Comment: ** Version of sqlite3_free() that is always a function, never a macro. 
Name: icuLikeFunc; Comment: ** Implementation of the like() SQL function. This function implements ** the build-in LIKE operator. The first argument to the function is the ** pattern and the second argument is the string. So, the SQL statements: ** ** A LIKE B ** ** is implemented as like(B, A). If there is an escape character E, ** ** A LIKE B ESCAPE E ** ** is mapped to like(B, A, E). 
Name: icuRegexpDelete; Comment: ** Function to delete compiled regexp objects. Registered as ** a destructor function with sqlite3_set_auxdata(). 
Name: icuRegexpFunc; Comment: ** Implementation of SQLite REGEXP operator. This scalar function takes ** two arguments. The first is a regular expression pattern to compile ** the second is a string to match against that pattern. If either ** argument is an SQL NULL, then NULL Is returned. Otherwise, the result ** is 1 if the string matches the pattern, or 0 otherwise. ** ** SQLite maps the regexp() function to the regexp() operator such ** that the following two are equivalent: ** ** zString REGEXP zPattern ** regexp(zPattern, zString) ** ** Uses the following ICU regexp APIs: ** ** uregex_open() ** uregex_matches() ** uregex_close() 
Name: icuCaseFunc16; Comment: Implementations of scalar functions for case mapping - upper() and lower(). Function upper() converts its input to upper-case (ABC). Function lower() converts to lower-case (abc). ICU provides two types of case mapping, "general" case mapping and "language specific". Refer to ICU documentation for the differences between the two. To utilise "general" case mapping, the upper() or lower() scalar functions are invoked with one argument: upper('ABC') -> 'abc' lower('abc') -> 'ABC' To access ICU "language specific" case mapping, upper() or lower() should be invoked with two arguments. The second argument is the name of the locale to use. Passing an empty string ("") or SQL NULL value as the second argument is the same as invoking the 1 argument version of upper() or lower(). lower('I', 'en_us') -> 'i' lower('I', 'tr_tr') -> '_u131' (small dotless i) http:www.icu-project.orguserguideposix.html#case_mappings
Name: icuCollationDel; Comment: ** Collation sequence destructor function. The pCtx argument points to ** a UCollator structure previously allocated using ucol_open(). 
Name: icuCollationColl; Comment: ** Collation sequence comparison function. The pCtx argument points to ** a UCollator structure previously allocated using ucol_open(). 
Name: icuLoadCollation; Comment: None** ** Where <locale> is a string containing an ICU locale identifier (i.e. ** "en_AU", "tr_TR" etc.) and <collation-name> is the name of the ** collation sequence to create. 
Name: sqlite3IcuInit; Comment: ** Register the ICU extension functions with database db. 
Name: icuDestroy; Comment: ** Destroy a tokenizer 
Name: icuClose; Comment: ** Close a tokenization cursor previously opened by a call to icuOpen(). 
Name: sqlite3Fts3IcuTokenizerModule; Comment: ** Set *ppModule to point at the implementation of the ICU tokenizer. 
Name: rbuDeltaGetInt; Comment: ** Read bytes from *pz and convert them into a positive integer. When ** finished, leave *pz pointing to the first character past the end of ** the integer. The *pLen parameter holds the length of the string ** in *pz and is decremented once for each character in the integer. 
Name: rbuDeltaChecksum; Comment: ** Compute a 32-bit checksum on the N-byte buffer. Return the result. 
Name: rbuFossilDeltaFunc; Comment: ** Implementation of SQL scalar function rbu_fossil_delta(). ** ** This function applies a fossil delta patch to a blob. Exactly two ** arguments must be passed to this function. The first is the blob to ** patch and the second the patch to apply. If no error occurs, this ** function returns the patched blob. 
Name: prepareAndCollectError; Comment: ** Prepare the SQL statement in buffer zSql against database handle db. ** If successful, set *ppStmt to point to the new statement and return ** SQLITE_OK. ** ** Otherwise, if an error does occur, set *ppStmt to NULL and return ** an SQLite error code. Additionally, set output variable *pzErrmsg to ** point to a buffer containing an error message. It is the responsibility ** of the caller to (eventually) free this buffer using sqlite3_free(). 
Name: resetAndCollectError; Comment: ** Reset the SQL statement passed as the first argument. Return a copy ** of the value returned by sqlite3_reset(). ** ** If an error has occurred, then set *pzErrmsg to point to a buffer ** containing an error message. It is the responsibility of the caller ** to eventually free this buffer using sqlite3_free(). 
Name: prepareFreeAndCollectError; Comment: ** Unless it is NULL, argument zSql points to a buffer allocated using ** sqlite3_malloc containing an SQL statement. This function prepares the SQL ** statement against database db and frees the buffer. If statement ** compilation is successful, *ppStmt is set to point to the new statement ** handle and SQLITE_OK is returned. ** ** Otherwise, if an error occurs, *ppStmt is set to NULL and an error code ** returned. In this case, *pzErrmsg may also be set to point to an error ** message. It is the responsibility of the caller to free this error message ** buffer using sqlite3_free(). ** ** If argument zSql is NULL, this function assumes that an OOM has occurred. ** In this case SQLITE_NOMEM is returned and *ppStmt set to NULL. 
Name: rbuObjIterFreeCols; Comment: ** Free the RbuObjIter.azTblCol[] and RbuObjIter.abTblPk[] arrays allocated ** by an earlier call to rbuObjIterCacheTableInfo(). 
Name: rbuObjIterClearStatements; Comment: ** Finalize all statements and free all allocations that are specific to ** the current object (table/index pair). 
Name: rbuObjIterFinalize; Comment: ** Clean up any resources allocated as part of the iterator object passed ** as the only argument. 
Name: rbuObjIterNext; Comment: ** Advance the iterator to the next position. ** ** If no error occurs, SQLITE_OK is returned and the iterator is left ** pointing to the next entry. Otherwise, an error code and message is ** left in the RBU handle passed as the first argument. A copy of the ** error code is returned. 
Name: rbuTargetNameFunc; Comment: ** The implementation of the rbu_target_name() SQL function. This function ** accepts one or two arguments. The first argument is the name of a table - ** the name of a table in the RBU database. The second, if it is present, is 1 ** for a view or 0 for a table. ** ** For a non-vacuum RBU handle, if the table name matches the pattern: ** ** data[0-9]_<name> ** ** where <name> is any sequence of 1 or more characters, <name> is returned. ** Otherwise, if the only argument does not match the above pattern, an SQL ** NULL is returned. ** ** "data_t1" -> "t1" ** "data0123_t2" -> "t2" ** "dataAB_t3" -> NULL ** ** For an rbu vacuum handle, a copy of the first argument is returned if ** the second argument is either missing or 0 (not a view). 
Name: rbuObjIterFirst; Comment: ** Initialize the iterator structure passed as the second argument. ** ** If no error occurs, SQLITE_OK is returned and the iterator is left ** pointing to the first entry. Otherwise, an error code and message is ** left in the RBU handle passed as the first argument. A copy of the ** error code is returned. 
Name: rbuMPrintf; Comment: ** This is a wrapper around "sqlite3_mprintf(zFmt, ...)". If an OOM occurs, ** an error code is stored in the RBU handle passed as the first argument. ** ** If an error has already occurred (p->rc is already set to something other ** than SQLITE_OK), then this function returns NULL without modifying the ** stored error code. In this case it still calls sqlite3_free() on any ** printf() parameters associated with %z conversions. 
Name: rbuMPrintfExec; Comment: ** Argument zFmt is a sqlite3_mprintf() style format string. The trailing ** arguments are the usual subsitution values. This function performs ** the printf() style substitutions and executes the result as an SQL ** statement on the RBU handles database. ** ** If an error occurs, an error code and error message is stored in the ** RBU handle. If an error has already occurred when this function is ** called, it is a no-op. 
Name: rbuMalloc; Comment: ** Attempt to allocate and return a pointer to a zeroed block of nByte ** bytes. ** ** If an error (i.e. an OOM condition) occurs, return NULL and leave an ** error code in the rbu handle passed as the first argument. Or, if an ** error has already occurred when this function is called, return NULL ** immediately without attempting the allocation or modifying the stored ** error code. 
Name: rbuAllocateIterArrays; Comment: ** Allocate and zero the pIter->azTblCol[] and abTblPk[] arrays so that ** there is room for at least nCol elements. If an OOM occurs, store an ** error code in the RBU handle passed as the first argument. 
Name: rbuStrndup; Comment: ** The first argument must be a nul-terminated string. This function ** returns a copy of the string in memory obtained from sqlite3_malloc(). ** It is the responsibility of the caller to eventually free this memory ** using sqlite3_free(). ** ** If an OOM condition is encountered when attempting to allocate memory, ** output variable (*pRc) is set to SQLITE_NOMEM before returning. Otherwise, ** if the allocation succeeds, (*pRc) is left unchanged. 
Name: rbuFinalize; Comment: ** Finalize the statement passed as the second argument. ** ** If the sqlite3_finalize() call indicates that an error occurs, and the ** rbu handle error code is not already set, set the error code and error ** message accordingly. 
Name: rbuTableType; Comment: Determine the type of a table. peType is of type (int), a pointer to an output parameter of type (int). This call sets the output parameter as follows, depending on the type of the table specified by parameters dbName and zTbl. RBU_PK_NOTABLE: No such table. RBU_PK_NONE: Table has an implicit rowid. RBU_PK_IPK: Table has an explicit IPK column. RBU_PK_EXTERNAL: Table has an external PK index. RBU_PK_WITHOUT_ROWID: Table is WITHOUT ROWID. RBU_PK_VTAB: Table is a virtual table. Argument piPk is also of type (int), and also points to an output parameter. Unless the table has an external primary key index (i.e. unless peType is set to 3), then piPk is set to zero. Or, if the table does have an external primary key index, then piPk is set to the root page number of the primary key index before returning. ALGORITHM: if( no entry exists in sqlite_schema ){ return RBU_PK_NOTABLE }else if( sql for the entry starts with "CREATE VIRTUAL" ){ return RBU_PK_VTAB }else if( "PRAGMA index_list()" for the table contains a "pk" index ){ if( the index that is the pk exists in sqlite_schema ){ piPK = rootpage of that index. return RBU_PK_EXTERNAL }else{ return RBU_PK_WITHOUT_ROWID } }else if( "PRAGMA table_info()" lists one or more "pk" columns ){ return RBU_PK_IPK }else{ return RBU_PK_NONE }
Name: rbuObjIterCacheIndexedCols; Comment: ** This is a helper function for rbuObjIterCacheTableInfo(). It populates ** the pIter->abIndexed[] array. 
Name: rbuObjIterCacheTableInfo; Comment: ** If they are not already populated, populate the pIter->azTblCol[], ** pIter->abTblPk[], pIter->nTblCol and pIter->bRowid variables according to ** the table (not index) that the iterator currently points to. ** ** Return SQLITE_OK if successful, or an SQLite error code otherwise. If ** an error does occur, an error code and error message are also left in ** the RBU handle. 
Name: rbuObjIterGetOldlist; Comment: ** Assuming the current table columns are "a", "b" and "c", and the zObj ** paramter is passed "old", return a string of the form: ** ** "old.a, old.b, old.b" ** ** With the column names escaped. ** ** For tables with implicit rowids - RBU_PK_EXTERNAL and RBU_PK_NONE, append ** the text ", old._rowid_" to the returned value. 
Name: rbuObjIterGetWhere; Comment: None** ** Return the string: ** ** "b = ?1 AND c = ?2" 
Name: rbuBadControlError; Comment: ** The SELECT statement iterating through the keys for the current object ** (p->objiter.pSelect) currently points to a valid row. However, there ** is something wrong with the rbu_control value in the rbu_control value ** stored in the (p->nCol+1)'th column. Set the error code and error message ** of the RBU handle to something reflecting this. 
Name: rbuObjIterGetSetlist; Comment: ** Return a nul-terminated string containing the comma separated list of ** assignments that should be included following the "SET" keyword of ** an UPDATE statement used to update the table object that the iterator ** passed as the second argument currently points to if the rbu_control ** column of the data_xxx table entry is set to zMask. ** ** The memory for the returned string is obtained from sqlite3_malloc(). ** It is the responsibility of the caller to eventually free it using ** sqlite3_free(). ** ** If an OOM error is encountered when allocating space for the new ** string, an error code is left in the rbu handle passed as the first ** argument and NULL is returned. Or, if an error has already occurred ** when this function is called, NULL is returned immediately, without ** attempting the allocation or modifying the stored error code. 
Name: rbuObjIterGetBindlist; Comment: ** Return a nul-terminated string consisting of nByte comma separated ** "?" expressions. For example, if nByte is 3, return a pointer to ** a buffer containing the string "?,?,?". ** ** The memory for the returned string is obtained from sqlite3_malloc(). ** It is the responsibility of the caller to eventually free it using ** sqlite3_free(). ** ** If an OOM error is encountered when allocating space for the new ** string, an error code is left in the rbu handle passed as the first ** argument and NULL is returned. Or, if an error has already occurred ** when this function is called, NULL is returned immediately, without ** attempting the allocation or modifying the stored error code. 
Name: rbuWithoutRowidPK; Comment: ** The iterator currently points to a table (not index) of type ** RBU_PK_WITHOUT_ROWID. This function creates the PRIMARY KEY ** declaration for the corresponding imposter table. For example, ** if the iterator points to a table created as: ** ** CREATE TABLE t1(a, b, c, PRIMARY KEY(b, a DESC)) WITHOUT ROWID ** ** this function returns: ** ** PRIMARY KEY("b", "a" DESC) 
Name: rbuCreateImposterTable2; Comment: None** 
Name: rbuCreateImposterTable; Comment: ** If an error has already occurred when this function is called, it ** immediately returns zero (without doing any work). Or, if an error ** occurs during the execution of this function, it sets the error code ** in the sqlite3rbu object indicated by the first argument and returns ** zero. ** ** The iterator passed as the second argument is guaranteed to point to ** a table (not an index) when this function is called. This function ** attempts to create any imposter table required to write to the main ** table b-tree of the table before returning. Non-zero is returned if ** an imposter table are created, or zero otherwise. ** ** An imposter table is required in all cases except RBU_PK_VTAB. Only ** virtual tables are written to directly. The imposter table has the ** same schema as the actual target table (less any UNIQUE constraints). ** More precisely, the "same schema" means the same columns, types, ** collation sequences. For tables that do not have an external PRIMARY ** KEY, it also means the same PRIMARY KEY declaration. 
Name: rbuObjIterPrepareTmpInsert; Comment: None** ** The number of bound variables is equal to the number of columns in ** the target table, plus one (for the rbu_control column), plus one more ** (for the rbu_rowid column) if the target table is an implicit IPK or ** virtual table. 
Name: rbuFreeState; Comment: ** Free an RbuState object allocated by rbuLoadState(). 
Name: rbuLoadState; Comment: ** Allocate an RbuState object and load the contents of the rbu_state ** table into it. Return a pointer to the new object. It is the ** responsibility of the caller to eventually free the object using ** sqlite3_free(). ** ** If an error occurs, leave an error code and message in the rbu handle ** and return NULL. 
Name: rbuOpenDatabase; Comment: ** Open the database handle and attach the RBU database as "rbu". If an ** error occurs, leave an error code and message in the RBU handle. 
Name: rbuFileSuffix3; Comment: ** This routine is a copy of the sqlite3FileSuffix3() routine from the core. ** It is a no-op unless SQLITE_ENABLE_8_3_NAMES is defined. ** ** If SQLITE_ENABLE_8_3_NAMES is set at compile-time and if the database ** filename in zBaseFilename is a URI with the "8_3_names=1" parameter and ** if filename in z[] has a suffix (a.k.a. "extension") that is longer than ** three characters, then shorten the suffix on z[] to be the last three ** characters of the original suffix. ** ** If SQLITE_ENABLE_8_3_NAMES is set to 2 at compile-time, then always ** do the suffix shortening regardless of URI parameter. ** ** Examples: ** ** test.db-journal => test.nal ** test.db-wal => test.wal ** test.db-shm => test.shm ** test.db-mj7f3319fa => test.9fa 
Name: rbuShmChecksum; Comment: ** Return the current wal-index header checksum for the target database ** as a 64-bit integer. ** ** The checksum is store in the first page of xShmMap memory as an 8-byte ** blob starting at byte offset 40. 
Name: rbuSetupCheckpoint; Comment: ** This function is called as part of initializing or reinitializing an ** incremental checkpoint. ** ** It populates the sqlite3rbu.aFrame[] array with the set of ** (wal frame -> db page) copy operations required to checkpoint the ** current wal file, and obtains the set of shm locks required to safely ** perform the copy operations directly on the file-system. ** ** If argument pState is not NULL, then the incremental checkpoint is ** being resumed. In this case, if the checksum of the wal-index-header ** following recovery is not the same as the checksum saved in the RbuState ** object, then the rbu handle is set to DONE state. This occurs if some ** other client appends a transaction to the wal file in the middle of ** an incremental checkpoint. 
Name: rbuCaptureWalRead; Comment: ** Called when iAmt bytes are read from offset iOff of the wal file while ** the rbu object is in capture mode. Record the frame number of the frame ** being read in the aFrame[] array. 
Name: rbuCaptureDbWrite; Comment: ** Called when a page of data is written to offset iOff of the database ** file while the rbu handle is in capture mode. Record the page number ** of the page being written in the aFrame[] array. 
Name: rbuCheckpointFrame; Comment: ** This is called as part of an incremental checkpoint operation. Copy ** a single frame of data from the wal file into the database file, as ** indicated by the RbuFrame object. 
Name: rbuLockDatabase; Comment: ** Take an EXCLUSIVE lock on the database file. 
Name: rbuMoveOalFile; Comment: ** The RBU handle is currently in RBU_STAGE_OAL state, with a SHARED lock ** on the database file. This proc moves the *-oal file to the *-wal path, ** then reopens the database file (this time in vanilla, non-oal, WAL mode). ** If an error occurs, leave an error code and error message in the rbu ** handle. 
Name: rbuStepType; Comment: ** The SELECT statement iterating through the keys for the current object ** (p->objiter.pSelect) currently points to a valid row. This function ** determines the type of operation requested by this row and returns ** one of the following values to indicate the result: ** ** RBU_INSERT ** RBU_DELETE ** RBU_IDX_DELETE ** RBU_UPDATE ** ** If RBU_UPDATE is returned, then output variable *pzMask is set to ** point to the text value indicating the columns to update. ** ** If the rbu_control field contains an invalid value, an error code and ** message are left in the RBU handle and zero returned. 
Name: assertColumnName; Comment: ** Assert that column iCol of statement pStmt is named zName. 
Name: rbuStepOneOp; Comment: ** Argument eType must be one of RBU_INSERT, RBU_DELETE, RBU_IDX_INSERT or ** RBU_IDX_DELETE. This function performs the work of a single ** sqlite3rbu_step() call for the type of operation specified by eType. 
Name: rbuStep; Comment: ** This function does the work for an sqlite3rbu_step() call. ** ** The object-iterator (p->objiter) currently points to a valid object, ** and the input cursor (p->objiter.pSelect) currently points to a valid ** input row. Perform whatever processing is required and return. ** ** If no error occurs, SQLITE_OK is returned. Otherwise, an error code ** and message is left in the RBU handle and a copy of the error code ** returned. 
Name: rbuIncrSchemaCookie; Comment: ** Increment the schema cookie of the main database opened by p->dbMain. ** ** Or, if this is an RBU vacuum, set the schema cookie of the main db ** opened by p->dbMain to one more than the schema cookie of the main ** db opened by p->dbRbu. 
Name: rbuSaveState; Comment: ** Update the contents of the rbu_state table within the rbu database. The ** value stored in the RBU_STATE_STAGE column is eStage. All other values ** are determined by inspecting the rbu handle passed as the first argument. 
Name: rbuCopyPragma; Comment: ** The second argument passed to this function is the name of a PRAGMA ** setting - "page_size", "auto_vacuum", "user_version" or "application_id". ** This function executes the following on sqlite3rbu.dbRbu: ** ** "PRAGMA main.$zPragma" ** ** where $zPragma is the string passed as the second argument, then ** on sqlite3rbu.dbMain: ** ** "PRAGMA main.$zPragma = $val" ** ** where $val is the value returned by the first PRAGMA invocation. ** ** In short, it copies the value of the specified PRAGMA setting from ** dbRbu to dbMain. 
Name: rbuCreateTargetSchema; Comment: ** The RBU handle passed as the only argument has just been opened and ** the state database is empty. If this RBU handle was opened for an ** RBU vacuum operation, create the schema in the target db. 
Name: sqlite3rbu_step; Comment: ** Step the RBU object. 
Name: rbuStrCompare; Comment: ** Compare strings z1 and z2, returning 0 if they are identical, or non-zero ** otherwise. Either or both argument may be NULL. Two NULL values are ** considered equal, and NULL is considered distinct from all other values. 
Name: rbuSetupOal; Comment: ** This function is called as part of sqlite3rbu_open() when initializing ** an rbu handle in OAL stage. If the rbu update has not started (i.e. ** the rbu_state table was empty) it is a no-op. Otherwise, it arranges ** things so that the next call to sqlite3rbu_step() continues on from ** where the previous rbu handle left off. ** ** If an error occurs, an error code and error message are left in the ** rbu handle passed as the first argument. 
Name: rbuDeleteOalFile; Comment: ** If there is a "*-oal" file in the file-system corresponding to the ** target database in the file-system, delete it. If an error occurs, ** leave an error code and error message in the rbu handle. 
Name: rbuCreateVfs; Comment: ** Allocate a private rbu VFS for the rbu handle passed as the only ** argument. This VFS will be used unless the call to sqlite3rbu_open() ** specified a URI with a vfs=? option in place of a target database ** file name. 
Name: rbuDeleteVfs; Comment: ** Destroy the private VFS created for the rbu handle passed as the only ** argument by an earlier call to rbuCreateVfs(). 
Name: rbuIndexCntFunc; Comment: ** This user-defined SQL function is invoked with a single argument - the ** name of a table expected to appear in the target database. It returns ** the number of auxilliary indexes on the table. 
Name: rbuInitPhaseOneSteps; Comment: None** ** There should be one row in the table for each data_xxx table in the ** database. The 'tbl' column should contain the name of a data_xxx table, ** and the cnt column the number of rows it contains. ** ** sqlite3rbu.nPhaseOneStep is initialized to the sum of (1 + nIndex)cnt ** for all rows in the rbu_count table, where nIndex is the number of ** indexes on the corresponding target database table. 
Name: rbuMisuseError; Comment: ** Allocate and return an RBU handle with all fields zeroed except for the ** error code, which is set to SQLITE_MISUSE. 
Name: sqlite3rbu_open; Comment: ** Open and return a new RBU handle. 
Name: sqlite3rbu_vacuum; Comment: ** Open a handle to begin or resume an RBU VACUUM operation. 
Name: sqlite3rbu_db; Comment: ** Return the database handle used by pRbu. 
Name: rbuEditErrmsg; Comment: ** If the error code currently stored in the RBU handle is SQLITE_CONSTRAINT, ** then edit any error message string so as to remove all occurrences of ** the pattern "rbu_imp_[0-9]*". 
Name: sqlite3rbu_close; Comment: ** Close the RBU handle. 
Name: sqlite3rbu_progress; Comment: ** Return the total number of key-value operations (inserts, deletes or ** updates) that have been performed on the target database since the ** current RBU update was started. 
Name: sqlite3rbu_bp_progress; Comment: ** Return permyriadage progress indications for the two main stages of ** an RBU update. 
Name: sqlite3rbu_state; Comment: ** Return the current state of the RBU vacuum or update operation. 
Name: rbuUnlockShm; Comment: *************************************************************************** Beginning of RBU VFS shim methods. The VFS shim modifies the behaviour ** of a standard VFS in the following ways: ** ** 1. Whenever the first page of a main database file is read or ** written, the value of the change-counter cookie is stored in ** rbu_file.iCookie. Similarly, the value of the "write-version" ** database header field is stored in rbu_file.iWriteVer. This ensures ** that the values are always trustworthy within an open transaction. ** ** 2. Whenever an SQLITE_OPEN_WAL file is opened, the (rbu_file.pWalFd) ** member variable of the associated database file descriptor is set ** to point to the new file. A mutex protected linked list of all main ** db fds opened using a particular RBU VFS is maintained at ** rbu_vfs.pMain to facilitate this. ** ** 3. Using a new file-control "SQLITE_FCNTL_RBU", a main db rbu_file ** object can be marked as the target database of an RBU update. This ** turns on the following extra special behaviour: ** ** 3a. If xAccess() is called to check if there exists a *-wal file ** associated with an RBU target database currently in RBU_STAGE_OAL ** stage (preparing the *-oal file), the following special handling ** applies: ** ** if the *-wal file does exist, return SQLITE_CANTOPEN. An RBU ** target database may not be in wal mode already. ** ** if the *-wal file does not exist, set the output parameter to ** non-zero (to tell SQLite that it does exist) anyway. ** ** Then, when xOpen() is called to open the *-wal file associated with ** the RBU target in RBU_STAGE_OAL stage, instead of opening the *-wal ** file, the rbu vfs opens the corresponding *-oal file instead. ** ** 3b. The *-shm pages returned by xShmMap() for a target db file in ** RBU_STAGE_OAL mode are actually stored in heap memory. This is to ** avoid creating a *-shm file on disk. Additionally, xShmLock() calls ** are no-ops on target database files in RBU_STAGE_OAL mode. This is ** because assert() statements in some VFS implementations fail if ** xShmLock() is called before xShmMap(). ** ** 3c. If an EXCLUSIVE lock is attempted on a target database file in any ** mode except RBU_STAGE_DONE (all work completed and checkpointed), it ** fails with an SQLITE_BUSY error. This is to stop RBU connections ** from automatically checkpointing a *-wal (or *-oal) file from within ** sqlite3_close(). ** ** 3d. In RBU_STAGE_CAPTURE mode, all xRead() calls on the wal file, and ** all xWrite() calls on the target database file perform no IO. ** Instead the frame and page numbers that would be read and written ** are recorded. Additionally, successful attempts to obtain exclusive ** xShmLock() WRITER, CHECKPOINTER and READ0 locks on the target ** database file are recorded. xShmLock() calls to unlock the same ** locks are no-ops (so that once obtained, these locks are never ** relinquished). Finally, calls to xSync() on the target database ** file fail with SQLITE_INTERNAL errors. 
Name: rbuUpdateTempSize; Comment: 
Name: rbuMainlistAdd; Comment: ** Add an item to the main-db lists, if it is not already present. ** ** There are two main-db lists. One for all file descriptors, and one ** for all file descriptors with rbu_file.pDb!=0. If the argument has ** rbu_file.pDb!=0, then it is assumed to already be present on the ** main list and is only added to the pDb!=0 list. 
Name: rbuMainlistRemove; Comment: ** Remove an item from the main-db lists. 
Name: rbuFindMaindb; Comment: ** Given that zWal points to a buffer containing a wal file name passed to ** either the xOpen() or xAccess() VFS method, search the main-db list for ** a file-handle opened by the same database connection on the corresponding ** database file. ** ** If parameter bRbu is true, only search for file-descriptors with ** rbu_file.pDb!=0. 
Name: rbuVfsClose; Comment: ** Close an rbu file. 
Name: rbuGetU32; Comment: ** Read and return an unsigned 32-bit big-endian integer from the buffer ** passed as the only argument. 
Name: rbuPutU32; Comment: ** Write an unsigned 32-bit value in big-endian format to the supplied ** buffer. 
Name: rbuVfsRead; Comment: ** Read data from an rbuVfs-file. 
Name: rbuVfsWrite; Comment: ** Write data to an rbuVfs-file. 
Name: rbuVfsTruncate; Comment: ** Truncate an rbuVfs-file. 
Name: rbuVfsSync; Comment: ** Sync an rbuVfs-file. 
Name: rbuVfsFileSize; Comment: ** Return the current file-size of an rbuVfs-file. 
Name: rbuVfsLock; Comment: ** Lock an rbuVfs-file. 
Name: rbuVfsUnlock; Comment: ** Unlock an rbuVfs-file. 
Name: rbuVfsCheckReservedLock; Comment: ** Check if another file-handle holds a RESERVED lock on an rbuVfs-file. 
Name: rbuVfsFileControl; Comment: ** File control method. For custom operations on an rbuVfs-file. 
Name: rbuVfsSectorSize; Comment: ** Return the sector-size in bytes for an rbuVfs-file. 
Name: rbuVfsDeviceCharacteristics; Comment: ** Return the device characteristic flags supported by an rbuVfs-file. 
Name: rbuVfsShmLock; Comment: ** Take or release a shared-memory lock. 
Name: rbuVfsShmMap; Comment: ** Obtain a pointer to a mapping of a single 32KiB page of the *-shm file. 
Name: rbuVfsShmBarrier; Comment: ** Memory barrier. 
Name: rbuVfsShmUnmap; Comment: ** The xShmUnmap method. 
Name: rbuVfsOpen; Comment: ** Open an rbu file handle. 
Name: rbuVfsDelete; Comment: ** Delete the file located at zPath. 
Name: rbuVfsAccess; Comment: ** Test for access permissions. Return true if the requested permission ** is available, or false otherwise. 
Name: rbuVfsFullPathname; Comment: ** Populate buffer zOut with the full canonical pathname corresponding ** to the pathname in zPath. zOut is guaranteed to point to a buffer ** of at least (DEVSYM_MAX_PATHNAME+1) bytes. 
Name: rbuVfsDlOpen; Comment: ** Open the dynamic library located at zPath and return a handle. 
Name: rbuVfsDlError; Comment: ** Populate the buffer zErrMsg (size nByte bytes) with a human readable ** utf-8 string describing the most recent error encountered associated ** with dynamic libraries. 
Name: rbuVfsDlClose; Comment: ** Close the dynamic library handle pHandle. 
Name: rbuVfsRandomness; Comment: ** Populate the buffer pointed to by zBufOut with nByte bytes of ** random data. 
Name: rbuVfsSleep; Comment: ** Sleep for nMicro microseconds. Return the number of microseconds ** actually slept. 
Name: rbuVfsCurrentTime; Comment: ** Return the current time as a Julian Day number in *pTimeOut. 
Name: rbuVfsGetLastError; Comment: ** No-op. 
Name: sqlite3rbu_destroy_vfs; Comment: ** Deregister and destroy an RBU vfs created by an earlier call to ** sqlite3rbu_create_vfs(). 
Name: sqlite3rbu_create_vfs; Comment: ** Create an RBU VFS named zName that accesses the underlying file-system ** via existing VFS zParent. The new object is registered as a non-default ** VFS with SQLite before returning. 
Name: sqlite3rbu_temp_size_limit; Comment: ** Configure the aggregate temp file size limit for this RBU handle. 
Name: statConnect; Comment: ** Connect to or create a new DBSTAT virtual table. 
Name: statDisconnect; Comment: ** Disconnect from or destroy the DBSTAT virtual table. 
Name: statBestIndex; Comment: ** Compute the best query strategy and return the result in idxNum. ** ** idxNum-Bit Meaning ** ---------- ---------------------------------------------- ** 0x01 There is a schema=? term in the WHERE clause ** 0x02 There is a name=? term in the WHERE clause ** 0x04 There is an aggregate=? term in the WHERE clause ** 0x08 Output should be ordered by name and path 
Name: statOpen; Comment: ** Open a new DBSTAT cursor. 
Name: statResetCounts; Comment: Resize the space-used counters inside of the cursor 
Name: statClose; Comment: ** Close a DBSTAT cursor. 
Name: statDecodePage; Comment: Populate the StatPage object with information about the all** cells found on the page currently under analysis. 
Name: statSizeAndOffset; Comment: ** Populate the pCsr->iOffset and pCsr->szPage member variables. Based on ** the current value of pCsr->iPageno. 
Name: statNext; Comment: ** Move a DBSTAT cursor to the next entry. Normally, the next ** entry will be the next page, but in aggregated mode (pCsr->isAgg!=0), ** the next entry is the next btree. 
Name: statFilter; Comment: Initialize a cursor according to the query plan idxNum using the** arguments in argv[0]. See statBestIndex() for a description of the ** meaning of the bits in idxNum. 
Name: sqlite3DbstatRegister; Comment: ** Invoke this routine to register the "dbstat" virtual table module 
Name: dbpageConnect; Comment: ** Connect to or create a dbpagevfs virtual table. 
Name: dbpageDisconnect; Comment: ** Disconnect from or destroy a dbpagevfs virtual table. 
Name: dbpageBestIndex; Comment: ** idxNum: ** ** 0 schema=main, full table scan ** 1 schema=main, pgno=?1 ** 2 schema=?1, full table scan ** 3 schema=?1, pgno=?2 
Name: dbpageOpen; Comment: ** Open a new dbpagevfs cursor. 
Name: dbpageClose; Comment: ** Close a dbpagevfs cursor. 
Name: dbpageNext; Comment: ** Move a dbpagevfs cursor to the next entry in the file. 
Name: dbpageFilter; Comment: ** idxNum: ** ** 0 schema=main, full table scan ** 1 schema=main, pgno=?1 ** 2 schema=?1, full table scan ** 3 schema=?1, pgno=?2 ** ** idxStr is not used 
Name: dbpageBegin; Comment: Since we do not know in advance which database files will be** written by the sqlite_dbpage virtual table, start a write transaction ** on them all. 
Name: sqlite3DbpageRegister; Comment: ** Invoke this routine to register the "dbpage" virtual table module 
Name: sessionVarintPut; Comment: ** Write a varint with value iVal into the buffer at aBuf. Return the ** number of bytes written. 
Name: sessionVarintLen; Comment: ** Return the number of bytes required to store value iVal as a varint. 
Name: sessionVarintGet; Comment: ** Read a varint value from aBuf[] into *piVal. Return the number of ** bytes read. 
Name: sessionGetI64; Comment: ** Read a 64-bit big-endian integer value from buffer aRec[]. Return ** the value read. 
Name: sessionPutI64; Comment: ** Write a 64-bit big-endian integer value to the buffer aBuf[]. 
Name: sessionHashAppendI64; Comment: ** Append the hash of the 64-bit integer passed as the second argument to the ** hash-key value passed as the first. Return the new hash-key value. 
Name: sessionHashAppendBlob; Comment: ** Append the hash of the blob passed via the second and third arguments to ** the hash-key value passed as the first. Return the new hash-key value. 
Name: sessionHashAppendType; Comment: ** Append the hash of the data type passed as the second argument to the ** hash-key value passed as the first. Return the new hash-key value. 
Name: sessionSerialLen; Comment: ** The buffer that the argument points to contains a serialized SQL value. ** Return the number of bytes of space occupied by the value (including ** the type byte). 
Name: sessionMergeRecord; Comment: ** Arguments aLeft and aRight both point to buffers containing change ** records with nCol columns. This function "merges" the two records into ** a single records which is written to the buffer at *paOut. *paOut is ** then set to point to one byte after the last byte written before ** returning. ** ** The merging of records is done as follows: For each column, if the ** aRight record contains a value for the column, copy the value from ** their. Otherwise, if aLeft contains a value, copy it. If neither ** record contains a value for a given column, then neither does the ** output record. 
Name: sessionGrowHash; Comment: ** If required, grow the hash table used to store changes on table pTab ** (part of the session pSession). If a fatal OOM error occurs, set the ** session object to failed and return SQLITE_ERROR. Otherwise, return ** SQLITE_OK. ** ** It is possible that a non-fatal OOM error occurs in this function. In ** that case the hash-table does not grow, but SQLITE_OK is returned anyway. ** Growing the hash table in this case is a performance optimization only, ** it is not required for correct operation. 
Name: sessionInitTable; Comment: ** This function is only called from within a pre-update handler for a ** write to table pTab, part of session pSession. If this is the first ** write to this table, initalize the SessionTable.nCol, azCol[] and ** abPK[] arrays accordingly. ** ** If an error occurs, an error code is stored in sqlite3_session.rc and ** non-zero returned. Or, if no error occurs but the table has no primary ** key, sqlite3_session.rc is left set to SQLITE_OK and non-zero returned to ** indicate that updates on this table should be ignored. SessionTable.abPK ** is set to NULL in this case. 
Name: sessionPreupdateOld; Comment: ** The pre-update hook implementations. 
Name: sessionPreupdateHooks; Comment: ** Install the pre-update hooks on the session object passed as the only ** argument. 
Name: sessionDiffOld; Comment: ** The diff hook implementations. 
Name: sessionDiffHooks; Comment: ** Install the diff hooks on the session object passed as the only ** argument. 
Name: sessionDeleteTable; Comment: ** Free the list of table objects passed as the first argument. The contents ** of the changed-rows hash tables are also deleted. 
Name: sqlite3session_delete; Comment: ** Delete a session object previously allocated using sqlite3session_create(). 
Name: sessionBufferGrow; Comment: ** Ensure that there is room in the buffer to append nByte bytes of data. ** If not, use sqlite3_realloc() to grow the buffer so that there is. ** ** If successful, return zero. Otherwise, if an OOM condition is encountered, ** set *pRc to SQLITE_NOMEM and return non-zero. 
Name: sessionAppendValue; Comment: ** Append the value passed as the second argument to the buffer passed ** as the first. ** ** This function is a no-op if *pRc is non-zero when it is called. ** Otherwise, if an error occurs, *pRc is set to an SQLite error code ** before returning. 
Name: sessionAppendByte; Comment: ** This function is a no-op if *pRc is other than SQLITE_OK when it is ** called. Otherwise, append a single byte to the buffer. ** ** If an OOM condition is encountered, set *pRc to SQLITE_NOMEM before ** returning. 
Name: sessionAppendVarint; Comment: ** This function is a no-op if *pRc is other than SQLITE_OK when it is ** called. Otherwise, append a single varint to the buffer. ** ** If an OOM condition is encountered, set *pRc to SQLITE_NOMEM before ** returning. 
Name: sessionAppendBlob; Comment: ** This function is a no-op if *pRc is other than SQLITE_OK when it is ** called. Otherwise, append a blob of data to the buffer. ** ** If an OOM condition is encountered, set *pRc to SQLITE_NOMEM before ** returning. 
Name: sessionAppendStr; Comment: ** This function is a no-op if *pRc is other than SQLITE_OK when it is ** called. Otherwise, append a string to the buffer. All bytes in the string ** up to (but not including) the nul-terminator are written to the buffer. ** ** If an OOM condition is encountered, set *pRc to SQLITE_NOMEM before ** returning. 
Name: sqlite3session_changeset_strm; Comment: ** Streaming version of sqlite3session_changeset(). 
Name: sqlite3session_patchset_strm; Comment: ** Streaming version of sqlite3session_patchset(). 
Name: sqlite3session_enable; Comment: ** Enable or disable the session object passed as the first argument. 
Name: sqlite3session_indirect; Comment: ** Enable or disable the session object passed as the first argument. 
Name: sqlite3session_isempty; Comment: ** Return true if there have been no changes to monitored tables recorded ** by the session object passed as the only argument. 
Name: int; Comment: OUT: Changeset iterator handle 
Name: sessionDiscardData; Comment: ** If the SessionInput object passed as the only argument is a streaming ** object and the buffer is full, discard some data to free up space. 
Name: sessionInputBuffer; Comment: ** Ensure that there are at least nByte bytes available in the buffer. Or, ** if there are not nByte bytes remaining in the input, that all available ** data is in the buffer. ** ** Return an SQLite error code if an error occurs, or SQLITE_OK otherwise. 
Name: sessionChangesetBufferTblhdr; Comment: ** The input pointer currently points to the second byte of a table-header. ** Specifically, to the following: ** ** + number of columns in table (varint) ** + array of PK flags (1 byte per column), ** + table name (nul terminated). ** ** This function ensures that all of the above is present in the input ** buffer (i.e. that it can be accessed without any calls to xInput()). ** If successful, SQLITE_OK is returned. Otherwise, an SQLite error code. ** The input pointer is not moved. 
Name: sessionChangesetReadTblhdr; Comment: ** The input pointer currently points to the second byte of a table-header. ** Specifically, to the following: ** ** + number of columns in table (varint) ** + array of PK flags (1 byte per column), ** + table name (nul terminated). ** ** This function decodes the table-header and populates the p->nCol, ** p->zTab and p->abPK[] variables accordingly. The p->apValue[] array is ** also allocated or resized according to the new value of p->nCol. The ** input pointer is left pointing to the byte following the table header. ** ** If successful, SQLITE_OK is returned. Otherwise, an SQLite error code ** is returned and the final values of the various fields enumerated above ** are undefined. 
Name: sqlite3changeset_next; Comment: ** Advance an iterator created by sqlite3changeset_start() to the next ** change in the changeset. This function may return SQLITE_ROW, SQLITE_DONE ** or SQLITE_CORRUPT. ** ** This function may not be called on iterators passed to a conflict handler ** callback by changeset_apply(). 
Name: sqlite3changeset_finalize; Comment: ** Finalize an iterator allocated with sqlite3changeset_start(). ** ** This function may not be called on iterators passed to a conflict handler ** callback by changeset_apply(). 
Name: sqlite3changeset_invert_strm; Comment: ** Streaming version of sqlite3changeset_invert(). 
Name: sessionStat1Sql; Comment: ** Prepare statements for applying changes to the sqlite_stat1 table. ** These are similar to those created by sessionSelectRow(), ** sessionInsertRow(), sessionUpdateRow() and sessionDeleteRow() for ** other tables. 
Name: sessionChangegroupOutput; Comment: ** Serialize a changeset (or patchset) based on all changesets (or patchsets) ** added to the changegroup object passed as the first argument. ** ** If xOutput is not NULL, then the changeset/patchset is returned to the ** user via one or more calls to xOutput, as with the other streaming ** interfaces. ** ** Or, if xOutput is NULL, then (*ppOut) is populated with a pointer to a ** buffer containing the output changeset before this function returns. In ** this case (*pnOut) is set to the size of the output buffer in bytes. It ** is the responsibility of the caller to free the output buffer using ** sqlite3_free() when it is no longer required. ** ** If successful, SQLITE_OK is returned. Or, if an error occurs, an SQLite ** error code. If an error occurs and xOutput is NULL, (*ppOut) and (*pnOut) ** are both set to 0 before returning. 
Name: sqlite3changegroup_new; Comment: ** Allocate a new, empty, sqlite3_changegroup. 
Name: sqlite3changegroup_add; Comment: ** Add the changeset currently stored in buffer pData, size nData bytes, ** to changeset-group p. 
Name: sqlite3changegroup_output; Comment: ** Obtain a buffer containing a changeset representing the concatenation ** of all changesets added to the group so far. 
Name: sqlite3changegroup_add_strm; Comment: ** Streaming versions of changegroup_add(). 
Name: sqlite3changegroup_output_strm; Comment: ** Streaming versions of changegroup_output(). 
Name: sqlite3changegroup_delete; Comment: ** Delete a changegroup object. 
Name: sqlite3changeset_concat_strm; Comment: ** Streaming version of sqlite3changeset_concat(). 
Name: sqlite3rebaser_create; Comment: ** Create a new rebaser object. 
Name: sqlite3rebaser_configure; Comment: ** Call this one or more times to configure a rebaser. 
Name: sqlite3rebaser_rebase; Comment: ** Rebase a changeset according to current rebaser configuration 
Name: sqlite3rebaser_rebase_strm; Comment: ** Rebase a changeset according to current rebaser configuration 
Name: sqlite3rebaser_delete; Comment: ** Destroy a rebaser object 
Name: sqlite3session_config; Comment: ** Global configuration 
Name: sqlite3Fts5ParserTrace; Comment: ** Turn parser tracing on by giving a stream to which to write the trace ** and a prompt to preface each trace message. Tracing is turned off ** by making either argument NULL ** ** Inputs: ** <ul> ** <li> A FILE* to which trace output should be written. ** If NULL, then tracing is turned off. ** <li> A prefix string written at the beginning of every ** line of trace output. If NULL, then tracing is ** turned off. ** </ul> ** ** Outputs: ** None. 
Name: fts5yyGrowStack; Comment: ** Try to increase the size of the parser stack. Return the number ** of errors. Return 0 on success. 
Name: sqlite3Fts5ParserInit; Comment: Initialize a new parser that has already been allocated.
Name: sqlite3Fts5ParserAlloc; Comment: ** This function allocates a new parser. ** The only argument is a pointer to a function which works like ** malloc. ** ** Inputs: ** A pointer to the function used to allocate memory. ** ** Outputs: ** A pointer to a parser. This pointer is used in subsequent calls ** to sqlite3Fts5Parser and sqlite3Fts5ParserFree. 
Name: fts5yy_pop_parser_stack; Comment: ** Pop the parser's stack once. ** ** If there is a destructor routine associated with the token which ** is popped from the stack, then call it. 
Name: sqlite3Fts5ParserFinalize; Comment: ** Clear all secondary memory allocations from the parser 
Name: fts5yyStackOverflow; Comment: ** The following routine is called if the stack overflows. 
Name: sqlite3Fts5ParserFallback; Comment: ** Return the fallback token corresponding to canonical token iToken, or ** 0 if iToken has no fallback. 
Name: fts5CInstIterNext; Comment: ** Advance the iterator to the next coalesced phrase instance. Return ** an SQLite error code if an error occurs, or SQLITE_OK otherwise. 
Name: fts5CInstIterInit; Comment: ** Initialize the iterator object indicated by the final parameter to ** iterate through coalesced phrase instances in column iCol. 
Name: fts5HighlightAppend; Comment: ** Append text to the HighlightContext output string - p->zOut. Argument ** z points to a buffer containing n bytes of text to append. If n is ** negative, everything up until the first '_0' is appended to the output. ** ** If *pRc is set to any value other than SQLITE_OK when this function is ** called, it is a no-op. If an error (i.e. an OOM condition) is encountered, ** *pRc is set to an error code before returning. 
Name: fts5SentenceFinderAdd; Comment: ** Add an entry to the Fts5SFinder.aFirst[] array. Grow the array if ** necessary. Return SQLITE_OK if successful, or SQLITE_NOMEM if an ** error occurs. 
Name: fts5ValueToText; Comment: ** Return the value in pVal interpreted as utf-8 text. Except, if pVal ** contains a NULL value, return a pointer to a static string zero ** bytes in length instead of a NULL pointer. 
Name: sqlite3Fts5BufferSize; Comment: #include "fts5Int.h" 
Name: sqlite3Fts5BufferAppendVarint; Comment: ** Encode value iVal as an SQLite varint and append it to the buffer object ** pBuf. If an OOM error occurs, set the error code in p. 
Name: sqlite3Fts5BufferAppendBlob; Comment: ** Append buffer nData/pData to buffer pBuf. If an OOM error occurs, set ** the error code in p. If an error has already occurred when this function ** is called, it is a no-op. 
Name: sqlite3Fts5BufferAppendString; Comment: ** Append the nul-terminated string zStr to the buffer pBuf. This function ** ensures that the byte following the buffer data is set to 0x00, even ** though this byte is not included in the pBuf->n count. 
Name: sqlite3Fts5BufferAppendPrintf; Comment: ** Argument zFmt is a printf() style format string. This function performs ** the printf() style processing, then appends the results to buffer pBuf. ** ** Like sqlite3Fts5BufferAppendString(), this function ensures that the byte ** following the buffer data is set to 0x00, even though this byte is not ** included in the pBuf->n count. 
Name: sqlite3Fts5BufferFree; Comment: ** Free any buffer allocated by pBuf. Zero the structure before returning. 
Name: sqlite3Fts5BufferZero; Comment: ** Zero the contents of the buffer object. But do not free the associated ** memory allocation. 
Name: sqlite3Fts5BufferSet; Comment: ** Set the buffer to contain nData/pData. If an OOM error occurs, leave an ** the error code in p. If an error has already occurred when this function ** is called, it is a no-op. 
Name: sqlite3Fts5PoslistReaderNext; Comment: ** Advance the iterator object passed as the only argument. Return true ** if the iterator reaches EOF, or false otherwise. 
Name: sqlite3Fts5PoslistSafeAppend; Comment: ** Append position iPos to the position list being accumulated in buffer ** pBuf, which must be already be large enough to hold the new data. ** The previous position written to this list is *piPrev. *piPrev is set ** to iPos before returning. 
Name: sqlite3Fts5Strndup; Comment: ** Return a nul-terminated copy of the string indicated by pIn. If nIn ** is non-negative, then it is the length of the string in bytes. Otherwise, ** the length of the string is determined using strlen(). ** ** It is the responsibility of the caller to eventually free the returned ** buffer using sqlite3_free(). If an OOM error occurs, NULL is returned. 
Name: sqlite3Fts5IsBareword; Comment: ** Return true if character 't' may be part of an FTS5 bareword, or false ** otherwise. Characters that may be part of barewords: ** ** All non-ASCII characters, ** The 52 upper and lower case ASCII characters, and ** The 10 integer ASCII characters. ** The underscore character "_" (0x5F). ** The unicode "subsitute" character (0x1A). 
Name: fts5ConfigSkipWhitespace; Comment: ** Argument pIn points to a character that is part of a nul-terminated ** string. Return a pointer to the first character following *pIn in ** the string that is not a white-space character. 
Name: fts5ConfigSkipBareword; Comment: ** Argument pIn points to a character that is part of a nul-terminated ** string. Return a pointer to the first character following *pIn in ** the string that is not a "bareword" character. 
Name: fts5Dequote; Comment: ** The first character of the string pointed to by argument z is guaranteed ** to be an open-quote character (see function fts5_isopenquote()). ** ** This function searches for the corresponding close-quote character within ** the string and, if found, dequotes the string in place and adds a new ** nul-terminator byte. ** ** If the close-quote is found, the value returned is the byte offset of ** the character immediately following it. Or, if the close-quote is not ** found, -1 is returned. If -1 is returned, the buffer is left in an ** undefined state. 
Name: sqlite3Fts5Dequote; Comment: ** Convert an SQL-style quoted string into a normal string by removing ** the quote characters. The conversion is done in-place. If the ** input does not begin with a quote character, then this routine ** is a no-op. ** ** Examples: ** ** "abc" becomes abc ** 'xyz' becomes xyz ** [pqr] becomes pqr ** `mno` becomes mno 
Name: fts5ConfigDefaultTokenizer; Comment: ** Allocate an instance of the default tokenizer ("simple") at ** Fts5Config.pTokenizer. Return SQLITE_OK if successful, or an SQLite error ** code if an error occurs. 
Name: fts5ConfigMakeExprlist; Comment: ** Populate the Fts5Config.zContentExprlist string. 
Name: sqlite3Fts5ConfigFree; Comment: ** Free the configuration object passed as the only argument. 
Name: sqlite3Fts5ConfigDeclareVtab; Comment: ** Call sqlite3_declare_vtab() based on the contents of the configuration ** object passed as the only argument. Return SQLITE_OK if successful, or ** an SQLite error code if an error occurs. 
Name: fts5ConfigSkipArgs; Comment: ** Argument pIn points to the first character in what is expected to be ** a comma-separated list of SQL literals followed by a ')' character. ** If it actually is this, return a pointer to the ')'. Otherwise, return ** NULL to indicate a parse error. 
Name: sqlite3Fts5ConfigLoad; Comment: ** Load the contents of the %_config table into memory. 
Name: sqlite3Fts5ExprPattern; Comment: ** This function is only called when using the special 'trigram' tokenizer. ** Argument zText contains the text of a LIKE or GLOB pattern matched ** against column iCol. This function creates and compiles an FTS5 MATCH ** expression that will match a superset of the rows matched by the LIKE or ** GLOB. If successful, SQLITE_OK is returned. Otherwise, an SQLite error ** code. 
Name: sqlite3Fts5ParseNodeFree; Comment: ** Free the expression node object passed as the only argument. 
Name: sqlite3Fts5ExprFree; Comment: ** Free the expression object passed as the only argument. 
Name: fts5ExprSynonymRowid; Comment: ** Argument pTerm must be a synonym iterator. Return the current rowid ** that it points to. 
Name: fts5ExprNearIsMatch; Comment: ** The near-set object passed as the first argument contains more than ** one phrase. All phrases currently point to the same row. The ** Fts5ExprPhrase.poslist buffers are populated accordingly. This function ** tests if the current row contains instances of each phrase sufficiently ** close together to meet the NEAR constraint. Non-zero is returned if it ** does, or zero otherwise. ** ** If in/out parameter (*pRc) is set to other than SQLITE_OK when this ** function is called, it is a no-op. Or, if an error (e.g. SQLITE_NOMEM) ** occurs within this function (*pRc) is set accordingly before returning. ** The return value is undefined in both these cases. ** ** If no error occurs and non-zero (a match) is returned, the position-list ** of each phrase object is edited to contain only those entries that ** meet the constraint before returning. 
Name: fts5ExprNearInitAll; Comment: ** Initialize all term iterators in the pNear object. If any term is found ** to match no documents at all, return immediately without initializing any ** further iterators. ** ** If an error occurs, return an SQLite error code. Otherwise, return ** SQLITE_OK. It is not considered an error if some term matches zero ** documents. 
Name: fts5RowidCmp; Comment: ** If pExpr is an ASC iterator, this function returns a value with the ** same sign as: ** ** (iLhs - iRhs) ** ** Otherwise, if this is a DESC iterator, the opposite is returned: ** ** (iRhs - iLhs) 
Name: fts5NodeCompare; Comment: ** Compare the values currently indicated by the two nodes as follows: ** ** res = (*p1) - (*p2) ** ** Nodes that point to values that come later in the iteration order are ** considered to be larger. Nodes at EOF are the largest of all. ** ** This means that if the iteration order is ASC, then numerically larger ** rowids are considered larger. Or if it is the default DESC, numerically ** smaller rowids are larger. 
Name: fts5ExprNodeNext_TERM; Comment: ** xNext() method for a node of type FTS5_TERM. 
Name: fts5ExprNodeFirst; Comment: ** Set node pNode, which is part of expression pExpr, to point to the first ** match. If there are no matches, set the Node.bEof flag to indicate EOF. ** ** Return an SQLite error code if an error occurs, or SQLITE_OK otherwise. ** It is not an error if there are no matches. 
Name: sqlite3Fts5ExprFirst; Comment: ** Begin iterating through the set of documents in index pIdx matched by ** the MATCH expression passed as the first argument. If the "bDesc" ** parameter is passed a non-zero value, iteration is in descending rowid ** order. Or, if it is zero, in ascending order. ** ** If iterating in ascending rowid order (bDesc==0), the first document ** visited is that with the smallest rowid that is larger than or equal ** to parameter iFirst. Or, if iterating in ascending order (bDesc==1), ** then the first document visited must have a rowid smaller than or ** equal to iFirst. ** ** Return SQLITE_OK if successful, or an SQLite error code otherwise. It ** is not considered an error if the query does not match any documents. 
Name: sqlite3Fts5ExprNext; Comment: ** Move to the next document ** ** Return SQLITE_OK if successful, or an SQLite error code otherwise. It ** is not considered an error if the query does not match any documents. 
Name: fts5ExprPhraseFree; Comment: ** Free the phrase object passed as the only argument. 
Name: sqlite3Fts5ParseSetCaret; Comment: ** Set the "bFirst" flag on the first token of the phrase passed as the ** only argument. 
Name: sqlite3Fts5ParsePhraseFree; Comment: ** Free the phrase object passed as the only argument. 
Name: sqlite3Fts5ParseNearsetFree; Comment: ** Free the phrase object passed as the second argument. 
Name: sqlite3Fts5ExprClonePhrase; Comment: ** Create a new FTS5 expression by cloning phrase iPhrase of the ** expression passed as the second argument. 
Name: sqlite3Fts5ParseNear; Comment: ** Token pTok has appeared in a MATCH expression where the NEAR operator ** is expected. If token pTok does not contain "NEAR", store an error ** in the pParse object. 
Name: sqlite3Fts5ParseColsetInvert; Comment: ** Allocate and return an Fts5Colset object specifying the inverse of ** the colset passed as the second argument. Free the colset passed ** as the second argument before returning. 
Name: fts5CloneColset; Comment: ** If argument pOrig is NULL, or if (*pRc) is set to anything other than ** SQLITE_OK when this function is called, NULL is returned. ** ** Otherwise, a copy of (*pOrig) is made into memory obtained from ** sqlite3Fts5MallocZero() and a pointer to it returned. If the allocation ** fails, (*pRc) is set to SQLITE_NOMEM and NULL is returned. 
Name: fts5MergeColset; Comment: ** Remove from colset pColset any columns that are not also in colset pMerge. 
Name: fts5ParseSetColset; Comment: ** Recursively apply colset pColset to expression node pNode and all of ** its decendents. If (*ppFree) is not NULL, it contains a spare copy ** of pColset. This function may use the spare copy and set (*ppFree) to ** zero, or it may create copies of pColset using fts5CloneColset(). 
Name: sqlite3Fts5ParseSetColset; Comment: ** Apply colset pColset to expression node pExpr and all of its descendents. 
Name: fts5ParsePhraseToAnd; Comment: ** This function is used when parsing LIKE or GLOB patterns against ** trigram indexes that specify either detail=column or detail=none. ** It converts a phrase: ** ** abc + def + ghi ** ** into an AND tree: ** ** abc AND def AND ghi 
Name: fts5ExprPrintTcl; Comment: ** Compose a tcl-readable representation of expression pExpr. Return a ** pointer to a buffer containing that representation. It is the ** responsibility of the caller to at some point free the buffer using ** sqlite3_free(). 
Name: sqlite3Fts5ExprInit; Comment: ** This is called during initialization to register the fts5_expr() scalar ** UDF with the SQLite handle passed as the only argument. 
Name: sqlite3Fts5ExprPhraseCount; Comment: ** Return the number of phrases in expression pExpr. 
Name: sqlite3Fts5ExprPhraseSize; Comment: ** Return the number of terms in the iPhrase'th phrase in pExpr. 
Name: sqlite3Fts5ExprPoslist; Comment: ** This function is used to access the current position list for phrase ** iPhrase. 
Name: fts5ExprColsetTest; Comment: ** TODO: Make this more efficient! 
Name: sqlite3Fts5ExprPhraseCollist; Comment: ** This function is only called for detail=columns tables. 
Name: sqlite3Fts5HashNew; Comment: ** Allocate a new hash table. 
Name: sqlite3Fts5HashFree; Comment: ** Free a hash table object. 
Name: sqlite3Fts5HashClear; Comment: ** Empty (but do not delete) a hash table. 
Name: fts5HashResize; Comment: ** Resize the hash table by doubling the number of slots. 
Name: fts5HashEntryMerge; Comment: ** Arguments pLeft and pRight point to linked-lists of hash-entry objects, ** each sorted in key order. This function merges the two lists into a ** single list and returns a pointer to its first element. 
Name: fts5IdxMalloc; Comment: ** Allocate and return a buffer at least nByte bytes in size. ** ** If an OOM error is encountered, return NULL and set the error code in ** the Fts5Index handle passed as the first argument. 
Name: fts5BufferCompare; Comment: ** Compare the contents of the two buffers using memcmp(). If one buffer ** is a prefix of the other, it is considered the lesser. ** ** Return -ve if pLeft is smaller than pRight, 0 if they are equal or ** +ve if pRight is smaller than pLeft. In other words: ** ** res = *pLeft - *pRight 
Name: sqlite3Fts5IndexCloseReader; Comment: ** Close the read-only blob handle, if it is open. 
Name: fts5DataRead; Comment: ** Retrieve a record from the %_data table. ** ** If an error occurs, NULL is returned and an error left in the ** Fts5Index object. 
Name: fts5DataRelease; Comment: ** Release a reference to data record returned by an earlier call to ** fts5DataRead(). 
Name: fts5DataWrite; Comment: ** INSERT OR REPLACE a record into the %_data table. 
Name: fts5DataDelete; Comment: ** Execute the following SQL: ** ** DELETE FROM %_data WHERE id BETWEEN $iFirst AND $iLast 
Name: fts5DataRemoveSegment; Comment: ** Remove all records associated with segment iSegid. 
Name: fts5StructureRelease; Comment: ** Release a reference to an Fts5Structure object returned by an earlier ** call to fts5StructureRead() or fts5StructureDecode(). 
Name: fts5StructureAddLevel; Comment: ** 
Name: fts5StructureExtendLevel; Comment: ** Extend level iLvl so that there is room for at least nExtra more ** segments. 
Name: fts5StructureRead; Comment: ** Read, deserialize and return the structure record. ** ** The Fts5Structure.aLevel[] and each Fts5StructureLevel.aSeg[] array ** are over-allocated as described for function fts5StructureDecode() ** above. ** ** If an error occurs, NULL is returned and an error code left in the ** Fts5Index handle. If an error has already occurred when this function ** is called, it is a no-op. 
Name: fts5StructureWrite; Comment: ** Serialize and store the "structure" record. ** ** If an error occurs, leave an error code in the Fts5Index object. If an ** error has already occurred, this function is a no-op. 
Name: fts5StructurePromoteTo; Comment: ** Return a copy of index structure pStruct. Except, promote as many ** segments as possible to level iPromote. If an OOM occurs, NULL is ** returned. 
Name: fts5DlidxLvlNext; Comment: ** Advance the iterator passed as the only argument. If the end of the ** doclist-index page is reached, return non-zero. 
Name: fts5DlidxIterNextR; Comment: ** Advance the iterator passed as the only argument. 
Name: fts5DlidxIterFirst; Comment: ** The iterator passed as the first argument has the following fields set ** as follows. This function sets up the rest of the iterator so that it ** points to the first rowid in the doclist-index. ** ** pData: ** pointer to doclist-index record, ** ** When this function is called pIter->iLeafPgno is the page number the ** doclist is associated with (the one featuring the term). 
Name: fts5DlidxLvlPrev; Comment: ** Move the iterator passed as the only argument to the previous entry. 
Name: fts5DlidxIterFree; Comment: ** Free a doclist-index iterator object allocated by fts5DlidxIterInit(). 
Name: fts5GetPoslistSize; Comment: ** Argument p points to a buffer containing a varint to be interpreted as a ** position list size field. Read the varint and return the number of bytes ** read. Before returning, set *pnSz to the number of bytes in the position ** list, and *pbDel to true if the delete flag is set, or false otherwise. 
Name: fts5SegIterLoadNPos; Comment: ** Fts5SegIter.iLeafOffset currently points to the first byte of a ** position-list size field. Read the value of the field and store it ** in the following variables: ** ** Fts5SegIter.nPos ** Fts5SegIter.bDel ** ** Leave Fts5SegIter.iLeafOffset pointing to the first byte of the ** position list content (if any). 
Name: fts5SegIterLoadTerm; Comment: ** Fts5SegIter.iLeafOffset currently points to the first byte of the ** "nSuffix" field of a term. Function parameter nKeep contains the value ** of the "nPrefix" field (if there was one - it is passed 0 if this is ** the first term in the segment). ** ** This function populates: ** ** Fts5SegIter.term ** Fts5SegIter.rowid ** ** accordingly and leaves (Fts5SegIter.iLeafOffset) set to the content of ** the first position list. The position list belonging to document ** (Fts5SegIter.iRowid). 
Name: fts5SegIterReverseInitPage; Comment: ** This function is only ever called on iterators created by calls to ** Fts5IndexQuery() with the FTS5INDEX_QUERY_DESC flag set. ** ** The iterator is in an unusual state when this function is called: the ** Fts5SegIter.iLeafOffset variable is set to the offset of the start of ** the position-list size field for the first relevant rowid on the page. ** Fts5SegIter.rowid is set, but nPos and bDel are not. ** ** This function advances the iterator so that it points to the last ** relevant rowid on the page and, if necessary, initializes the ** aRowidOffset[] and iRowidOffset variables. At this point the iterator ** is in its regular state - Fts5SegIter.iLeafOffset points to the first ** byte of the position list content associated with said rowid. 
Name: fts5SegIterReverseNewPage; Comment: ** 
Name: fts5MultiIterIsEmpty; Comment: ** Return true if the iterator passed as the second argument currently ** points to a delete marker. A delete marker is an entry with a 0 byte ** position-list. 
Name: fts5SegIterReverse; Comment: ** Iterator pIter currently points to the first rowid in a doclist. This ** function sets the iterator up so that iterates in reverse order through ** the doclist. 
Name: fts5SegIterLoadDlidx; Comment: ** Iterator pIter currently points to the first rowid of a doclist. ** There is a doclist-index associated with the final term on the current ** page. If the current term is the last term on the page, load the ** doclist-index from disk and initialize an iterator at (pIter->pDlidx). 
Name: fts5SegIterClear; Comment: ** Zero the iterator passed as the only argument. 
Name: fts5AssertComparisonResult; Comment: ** This function is used as part of the big assert() procedure implemented by ** fts5AssertMultiIterSetup(). It ensures that the result currently stored ** in *pRes is the correct result of comparing the current positions of the ** two iterators. 
Name: fts5AssertMultiIterSetup; Comment: ** This function is a no-op unless SQLITE_DEBUG is defined when this module ** is compiled. In that case, this function is essentially an assert() ** statement used to verify that the contents of the pIter->aFirst[] array ** are correct. 
Name: fts5MultiIterDoCompare; Comment: ** Do the comparison necessary to populate pIter->aFirst[iOut]. ** ** If the returned value is non-zero, then it is the index of an entry ** in the pIter->aSeg[] array that is (a) not at EOF, and (b) pointing ** to a key that is a duplicate of another, higher priority, ** segment-iterator in the pSeg->aSeg[] array. 
Name: fts5MultiIterFree; Comment: ** Free the iterator object passed as the second argument. 
Name: fts5MultiIterSetEof; Comment: ** Set the pIter->bEof variable based on the state of the sub-iterators. 
Name: fts5IndexColsetTest; Comment: ** TODO: Make this more efficient! 
Name: void; Comment: Context pointer for xChunk callback 
Name: fts5SegiterPoslist; Comment: ** Iterator pIter currently points to a valid entry (not EOF). This ** function appends the position list data for the current entry to ** buffer pBuf. It does not make a copy of the position-list size ** field. 
Name: fts5IterSetOutputs_None; Comment: ** xSetOutputs callback used by detail=none tables. 
Name: fts5IterSetOutputs_Nocolset; Comment: ** xSetOutputs callback used by detail=full and detail=col tables when no ** column filters are specified. 
Name: fts5IterSetOutputs_ZeroColset; Comment: ** xSetOutputs callback used when the Fts5Colset object has nCol==0 (match ** against no columns at all). 
Name: fts5IterSetOutputs_Col; Comment: ** xSetOutputs callback used by detail=col when there is a column filter ** and there are 100 or more columns. Also called as a fallback from ** fts5IterSetOutputs_Col100 if the column-list spans more than one page. 
Name: fts5IterSetOutputs_Col100; Comment: ** xSetOutputs callback used when: ** ** detail=col, ** there is a column filter, and ** the table contains 100 or fewer columns. ** ** The last point is to ensure all column numbers are stored as ** single-byte varints. 
Name: fts5IterSetOutputs_Full; Comment: ** xSetOutputs callback used by detail=full when there is a column filter. 
Name: fts5MultiIterEof; Comment: ** Return true if the iterator is at EOF or if an error has occurred. ** False otherwise. 
Name: fts5MultiIterRowid; Comment: ** Return the rowid of the entry that the iterator currently points ** to. If the iterator points to EOF when this function is called the ** results are undefined. 
Name: fts5MultiIterNextFrom; Comment: ** Move the iterator to the next entry at or following iMatch. 
Name: fts5MultiIterTerm; Comment: ** Return a pointer to a buffer containing the term associated with the ** entry that the iterator currently points to. 
Name: fts5AllocateSegid; Comment: ** Allocate a new segment-id for the structure pStruct. The new segment ** id must be between 1 and 65335 inclusive, and must not be used by ** any currently existing segment. If a free segment id cannot be found, ** SQLITE_FULL is returned. ** ** If an error has already occurred, this function is a no-op. 0 is ** returned in this case. 
Name: fts5IndexDiscardData; Comment: ** Discard all data currently cached in the hash-tables. 
Name: fts5PrefixCompress; Comment: ** Return the size of the prefix, in bytes, that buffer ** (pNew/<length-unknown>) shares with buffer (pOld/nOld). ** ** Buffer (pNew/<length-unknown>) is guaranteed to be greater ** than buffer (pOld/nOld). 
Name: fts5WriteDlidxGrow; Comment: ** Grow the pWriter->aDlidx[] array to at least nLvl elements in size. ** Any new array elements are zeroed before returning. 
Name: fts5WriteFlushDlidx; Comment: ** If the current doclist-index accumulating in pWriter->aDlidx[] is large ** enough, flush it to disk and return 1. Otherwise discard it and return ** zero. 
Name: fts5WriteFlushBtree; Comment: ** This function is called whenever processing of the doclist for the ** last term on leaf page (pWriter->iBtPage) is completed. ** ** The doclist-index for that term is currently stored in-memory within the ** Fts5SegWriter.aDlidx[] array. If it is large enough, this function ** writes it out to disk. Or, if it is too small to bother with, discards ** it. ** ** Fts5SegWriter.btterm currently contains the first term on page iBtPage. 
Name: fts5WriteDlidxAppend; Comment: ** Rowid iRowid has just been appended to the current leaf page. It is the ** first on the page. This function appends an appropriate entry to the current ** doclist-index. 
Name: fts5WriteAppendTerm; Comment: ** Append term pTerm/nTerm to the segment being written by the writer passed ** as the second argument. ** ** If an error occurs, set the Fts5Index.rc error code. If an error has ** already occurred, this function is a no-op. 
Name: fts5WriteAppendRowid; Comment: ** Append a rowid and position-list size field to the writers output. 
Name: fts5TrimSegments; Comment: ** Iterator pIter was used to iterate through the input segments of on an ** incremental merge operation. This function is called if the incremental ** merge step has finished but the input has not been completely exhausted. 
Name: fts5PoslistPrefix; Comment: ** Buffer aBuf[] contains a list of varints, all small enough to fit ** in a 32-bit integer. Return the size of the largest prefix of this ** list nMax bytes or less in size. 
Name: fts5FlushOneHash; Comment: ** Flush the contents of in-memory hash table iHash to a new level-0 ** segment on disk. Also update the corresponding structure record. ** ** If an error occurs, set the Fts5Index.rc error code. If an error has ** already occurred, this function is a no-op. 
Name: fts5IndexFlush; Comment: ** Flush any data stored in the in-memory hash tables to the database. 
Name: sqlite3Fts5IndexMerge; Comment: ** This is called to implement the special "VALUES('merge', $nMerge)" ** INSERT command. 
Name: fts5BufferSwap; Comment: ** Swap the contents of buffer *p1 with that of *p2. 
Name: sqlite3Fts5IndexBeginWrite; Comment: ** Indicate that all subsequent calls to sqlite3Fts5IndexWrite() pertain ** to the document with rowid iRowid. 
Name: sqlite3Fts5IndexSync; Comment: ** Commit data to disk. 
Name: sqlite3Fts5IndexRollback; Comment: ** Discard any data stored in the in-memory hash tables. Do not write it ** to the database. Additionally, assume that the contents of the %_data ** table may have changed on disk. So any in-memory caches of %_data ** records must be invalidated. 
Name: sqlite3Fts5IndexReinit; Comment: ** The %_data table is completely empty when this function is called. This ** function populates it with the initial structure objects for each index, ** and the initial version of the "averages" record (a zero-byte blob). 
Name: sqlite3Fts5IndexOpen; Comment: ** Open a new Fts5Index handle. If the bCreate argument is true, create ** and initialize the underlying %_data table. ** ** If successful, set *pp to point to the new object and return SQLITE_OK. ** Otherwise, set *pp to NULL and return an SQLite error code. 
Name: sqlite3Fts5IndexClose; Comment: ** Close a handle opened by an earlier call to sqlite3Fts5IndexOpen(). 
Name: sqlite3Fts5IndexCharlenToBytelen; Comment: ** Argument p points to a buffer containing utf-8 text that is n bytes in ** size. Return the number of bytes in the nChar character prefix of the ** buffer, or 0 if there are less than nChar characters in total. 
Name: fts5IndexCharlen; Comment: ** pIn is a UTF-8 encoded string, nIn bytes in size. Return the number of ** unicode characters in the string. 
Name: sqlite3Fts5IterNext; Comment: ** Move to the next matching rowid. 
Name: sqlite3Fts5IterNextScan; Comment: ** Move to the next matching term/rowid. Used by the fts5vocab module. 
Name: sqlite3Fts5IterNextFrom; Comment: ** Move to the next matching rowid that occurs at or after iMatch. The ** definition of "at or after" depends on whether this iterator iterates ** in ascending or descending rowid order. 
Name: sqlite3Fts5IterTerm; Comment: ** Return the current term. 
Name: sqlite3Fts5IterClose; Comment: ** Close an iterator opened by an earlier call to sqlite3Fts5IndexQuery(). 
Name: sqlite3Fts5IndexGetAverages; Comment: ** Read and decode the "averages" record from the database. ** ** Parameter anSize must point to an array of size nCol, where nCol is ** the number of user defined columns in the FTS table. 
Name: sqlite3Fts5IndexSetAverages; Comment: ** Replace the current "averages" record with the contents of the buffer ** supplied as the second argument. 
Name: sqlite3Fts5IndexReads; Comment: ** Return the total number of blocks this module has read from the %_data ** table since it was created. 
Name: sqlite3Fts5IndexSetCookie; Comment: ** Set the 32-bit cookie value stored at the start of all structure ** records to the value passed as the second argument. ** ** Return SQLITE_OK if successful, or an SQLite error code if an error ** occurs. 
Name: sqlite3Fts5IndexEntryCksum; Comment: ** Return a simple checksum value based on the arguments. 
Name: fts5TestUtf8; Comment: ** Check if buffer z[], size n bytes, contains as series of valid utf-8 ** encoded codepoints. If so, return 0. Otherwise, if the buffer does not ** contain valid utf-8, return non-zero. 
Name: sqlite3Fts5IndexIntegrityCheck; Comment: ** Run internal checks to ensure that the FTS index (a) is internally ** consistent and (b) contains entries for which the XOR of the checksums ** as calculated by sqlite3Fts5IndexEntryCksum() is cksum. ** ** Return SQLITE_CORRUPT if any of the internal checks fail, or if the ** checksum does not match. Return SQLITE_OK if all checks pass without ** error, or some other SQLite error code if another error (e.g. OOM) ** occurs. 
Name: fts5DecodePoslist; Comment: ** Buffer (a/n) is assumed to contain a list of serialized varints. Read ** each varint and append its string representation to buffer pBuf. Return ** after either the input buffer is exhausted or a 0 value is read. ** ** The return value is the number of bytes read from the input buffer. 
Name: fts5DecodeDoclist; Comment: ** The start of buffer (a/n) contains the start of a doclist. The doclist ** may or may not finish within the buffer. This function appends a text ** representation of the part of the doclist that is present to buffer ** pBuf. ** ** The return value is the number of bytes read from the input buffer. 
Name: sqlite3Fts5IndexInit; Comment: ** This is called as part of registering the FTS5 module with database ** connection db. It registers several user-defined scalar functions useful ** with FTS5. ** ** If successful, SQLITE_OK is returned. If an error occurs, some other ** SQLite error code is returned instead. 
Name: fts5IsContentless; Comment: ** Return true if pTab is a contentless table. 
Name: fts5FreeVtab; Comment: ** Delete a virtual table handle allocated by fts5InitVtab(). 
Name: fts5DisconnectMethod; Comment: ** The xDisconnect() virtual table method. 
Name: fts5DestroyMethod; Comment: ** The xDestroy() virtual table method. 
Name: fts5SetUniqueFlag; Comment: ** Set the SQLITE_INDEX_SCAN_UNIQUE flag in pIdxInfo->flags. Unless this ** extension is currently being used by a version of SQLite too old to ** support index-info flags. In that case this function is a no-op. 
Name: fts5BestIndexMethod; Comment: ** Implementation of the xBestIndex method for FTS5 tables. Within the ** WHERE constraint, it searches for the following: ** ** 1. A MATCH constraint against the table column. ** 2. A MATCH constraint against the "rank" column. ** 3. A MATCH constraint against some other column. ** 4. An == constraint against the rowid column. ** 5. A < or <= constraint against the rowid column. ** 6. A > or >= constraint against the rowid column. ** ** Within the ORDER BY, the following are supported: ** ** 5. ORDER BY rank [ASC|DESC] ** 6. ORDER BY rowid [ASC|DESC] ** ** Information for the xFilter call is passed via both the idxNum and ** idxStr variables. Specifically, idxNum is a bitmask of the following ** flags used to encode the ORDER BY clause: ** ** FTS5_BI_ORDER_RANK ** FTS5_BI_ORDER_ROWID ** FTS5_BI_ORDER_DESC ** ** idxStr is used to encode data from the WHERE clause. For each argument ** passed to the xFilter method, the following is appended to idxStr: ** ** Match against table column: "m" ** Match against rank column: "r" ** Match against other column: "M<column-number>" ** LIKE against other column: "L<column-number>" ** GLOB against other column: "G<column-number>" ** Equality constraint against the rowid: "=" ** A < or <= against the rowid: "<" ** A > or >= against the rowid: ">" ** ** This function ensures that there is at most one "r" or "=". And that if ** there exists an "=" then there is no "<" or ">". ** ** Costs are assigned as follows: ** ** a) If an unusable MATCH operator is present in the WHERE clause, the ** cost is unconditionally set to 1e50 (a really big number). ** ** a) If a MATCH operator is present, the cost depends on the other ** constraints also present. As follows: ** ** No other constraints: cost=1000.0 ** One rowid range constraint: cost=750.0 ** Both rowid range constraints: cost=500.0 ** An == rowid constraint: cost=100.0 ** ** b) Otherwise, if there is no MATCH: ** ** No other constraints: cost=1000000.0 ** One rowid range constraint: cost=750000.0 ** Both rowid range constraints: cost=250000.0 ** An == rowid constraint: cost=10.0 ** ** Costs are not modified by the ORDER BY clause. 
Name: fts5OpenMethod; Comment: ** Implementation of xOpen method. 
Name: fts5CsrNewrow; Comment: ** This function is called after the cursor passed as the only argument ** is moved to point at a different row. It clears all cached data ** specific to the previous row stored by the cursor object. 
Name: fts5CloseMethod; Comment: ** Close the cursor. For additional information see the documentation ** on the xClose method of the virtual table interface. 
Name: fts5TripCursors; Comment: ** Set the FTS5CSR_REQUIRE_RESEEK flag on all FTS5_PLAN_MATCH cursors ** open on table pTab. 
Name: fts5CursorReseek; Comment: ** If the REQUIRE_RESEEK flag is set on the cursor passed as the first ** argument, close and reopen all Fts5IndexIter iterators that the cursor ** is using. Then attempt to move the cursor to a rowid equal to or laster ** (in the cursors sort order - ASC or DESC) than the current rowid. ** ** If the new rowid is not equal to the old, set output parameter *pbSkip ** to 1 before returning. Otherwise, leave it unchanged. ** ** Return SQLITE_OK if successful or if no reseek was required, or an ** error code if an error occurred. 
Name: fts5NextMethod; Comment: ** Advance the cursor to the next row in the table that matches the ** search criteria. ** ** Return SQLITE_OK if nothing goes wrong. SQLITE_OK is returned ** even if we reach end-of-file. The fts5EofMethod() will be called ** subsequently to determine whether or not an EOF was hit. 
Name: fts5SpecialMatch; Comment: ** Process a "special" query. A special query is identified as one with a ** MATCH expression that begins with a '*' character. The remainder of ** the text passed to the MATCH operator are used as the special query ** parameters. 
Name: fts5FindAuxiliary; Comment: ** Search for an auxiliary function named zName that can be used with table ** pTab. If one is found, return a pointer to the corresponding Fts5Auxiliary ** structure. Otherwise, if no such function exists, return NULL. 
Name: fts5EofMethod; Comment: ** This is the xEof method of the virtual table. SQLite calls this ** routine to find out if it has reached the end of a result set. 
Name: fts5CursorRowid; Comment: ** Return the rowid that the cursor currently points to. 
Name: fts5RowidMethod; Comment: ** This is the xRowid method. The SQLite core calls this routine to ** retrieve the rowid for the current row of the result set. fts5 ** exposes %_content.rowid as the rowid for the virtual table. The ** rowid should be written to *pRowid. 
Name: fts5SeekCursor; Comment: ** If the cursor requires seeking (bSeekRequired flag is set), seek it. ** Return SQLITE_OK if no error occurs, or an SQLite error code otherwise. ** ** If argument bErrormsg is true and an error occurs, an error message may ** be left in sqlite3_vtab.zErrMsg. 
Name: fts5SyncMethod; Comment: ** Implementation of xSync() method. 
Name: fts5BeginMethod; Comment: ** Implementation of xBegin() method. 
Name: fts5CommitMethod; Comment: ** Implementation of xCommit() method. This is a no-op. The contents of ** the pending-terms hash-table have already been flushed into the database ** by fts5SyncMethod(). 
Name: fts5RollbackMethod; Comment: ** Implementation of xRollback(). Discard the contents of the pending-terms ** hash-table. Any changes made to the database are reverted by SQLite. 
Name: fts5CacheInstArray; Comment: ** Ensure that the Fts5Cursor.nInstCount and aInst[] variables are populated ** correctly for the current view. Return SQLITE_OK if successful, or an ** SQLite error code otherwise. 
Name: fts5ApiQueryPhrase; Comment: ** Implementation of API function xQueryPhrase(). 
Name: fts5PoslistBlob; Comment: ** Return a "position-list blob" corresponding to the current position of ** cursor pCsr via sqlite3_result_blob(). A position-list blob contains ** the current position-list for each phrase in the query associated with ** cursor pCsr. ** ** A position-list blob begins with (nPhrase-1) varints, where nPhrase is ** the number of phrases in the query. Following the varints are the ** concatenated position lists for each phrase, in order. ** ** The first varint (if it exists) contains the size of the position list ** for phrase 0. The second (same disclaimer) contains the size of position ** list 1. And so on. There is no size field for the final position list, ** as it can be derived from the total size of the blob. 
Name: fts5SavepointMethod; Comment: ** The xSavepoint() method. ** ** Flush the contents of the pending-terms table to disk. 
Name: fts5ReleaseMethod; Comment: ** The xRelease() method. ** ** This is a no-op. 
Name: fts5RollbackToMethod; Comment: ** The xRollbackTo() method. ** ** Discard the contents of the pending terms table. 
Name: fts5ShadowName; Comment: ** Return true if zName is the extension on one of the shadow tables used ** by this module. 
Name: sqlite3Fts5DropAll; Comment: ** Drop all shadow tables. Return SQLITE_OK if successful or an SQLite error ** code otherwise. 
Name: sqlite3Fts5StorageClose; Comment: ** Close a handle opened by an earlier call to sqlite3Fts5StorageOpen(). 
Name: fts5StorageDeleteFromIndex; Comment: ** If a row with rowid iDel is present in the %_content table, add the ** delete-markers to the FTS index necessary to delete it. Do not actually ** remove the %_content row at this time though. 
Name: fts5StorageLoadTotals; Comment: ** Load the contents of the "averages" record from disk into the ** p->nTotalRow and p->aTotalSize[] variables. If successful, and if ** argument bCache is true, set the p->bTotalsValid flag to indicate ** that the contents of aTotalSize[] and nTotalRow are valid until ** further notice. ** ** Return SQLITE_OK if successful, or an SQLite error code if an error ** occurs. 
Name: fts5StorageSaveTotals; Comment: ** Store the current contents of the p->nTotalRow and p->aTotalSize[] ** variables in the "averages" record on disk. ** ** Return SQLITE_OK if successful, or an SQLite error code if an error ** occurs. 
Name: sqlite3Fts5StorageDelete; Comment: ** Remove a row from the FTS table. 
Name: sqlite3Fts5StorageDeleteAll; Comment: ** Delete all entries in the FTS5 index. 
Name: fts5StorageNewRowid; Comment: ** Allocate a new rowid. This is used for "external content" tables when ** a NULL value is inserted into the rowid column. The new rowid is allocated ** by inserting a dummy row into the %_docsize table. The dummy will be ** overwritten later. ** ** If the %_docsize table does not exist, SQLITE_MISMATCH is returned. In ** this case the user is required to provide a rowid explicitly. 
Name: sqlite3Fts5StorageContentInsert; Comment: ** Insert a new row into the FTS content table. 
Name: sqlite3Fts5StorageIndexInsert; Comment: ** Insert new entries into the FTS index and %_docsize table. 
Name: sqlite3Fts5StorageIntegrity; Comment: ** Check that the contents of the FTS index match that of the %_content ** table. Return SQLITE_OK if they do, or SQLITE_CORRUPT if not. Return ** some other SQLite error code if an error occurs while attempting to ** determine this. 
Name: sqlite3Fts5StorageStmt; Comment: ** Obtain an SQLite statement handle that may be used to read data from the ** %_content table. 
Name: sqlite3Fts5StorageStmtRelease; Comment: ** Release an SQLite statement handle obtained via an earlier call to ** sqlite3Fts5StorageStmt(). The eStmt parameter passed to this function ** must match that passed to the sqlite3Fts5StorageStmt() call. 
Name: sqlite3Fts5StorageDocsize; Comment: ** Argument aCol points to an array of integers containing one entry for ** each table column. This function reads the %_docsize record for the ** specified rowid and populates aCol[] with the results. ** ** An SQLite error code is returned if an error occurs, or SQLITE_OK ** otherwise. 
Name: sqlite3Fts5StorageSync; Comment: ** Flush any data currently held in-memory to disk. 
Name: fts5AsciiDelete; Comment: ** Delete a "ascii" tokenizer. 
Name: fts5AsciiCreate; Comment: ** Create an "ascii" tokenizer. 
Name: fts5AsciiTokenize; Comment: ** Tokenize some text using the ascii tokenizer. 
Name: fts5UnicodeIsException; Comment: ** Return true if the p->aiException[] array contains the value iCode. 
Name: fts5UnicodeDelete; Comment: ** Delete a "unicode61" tokenizer. 
Name: fts5UnicodeCreate; Comment: ** Create a "unicode61" tokenizer. 
Name: fts5UnicodeIsAlnum; Comment: ** Return true if, for the purposes of tokenizing with the tokenizer ** passed as the first argument, codepoint iCode is considered a token ** character (not a separator). 
Name: fts5PorterDelete; Comment: ** Delete a "porter" tokenizer. 
Name: fts5PorterCreate; Comment: ** Create a "porter" tokenizer. 
Name: fts5Porter_MGt0; Comment: porter rule condition: (m > 0) 
Name: fts5Porter_MGt1; Comment: porter rule condition: (m > 1) 
Name: fts5Porter_MEq1; Comment: porter rule condition: (m = 1) 
Name: fts5Porter_Ostar; Comment: porter rule condition: (*o) 
Name: fts5Porter_MGt1_and_S_or_T; Comment: porter rule condition: (m > 1 and (*S or *T)) 
Name: fts5Porter_Vowel; Comment: porter rule condition: (*v*) 
Name: fts5PorterStep4; Comment: **************************************************************************************************************************************************** ** GENERATED CODE STARTS HERE (mkportersteps.tcl) 
Name: fts5PorterStep1A; Comment: ** GENERATED CODE ENDS HERE (mkportersteps.tcl) *************************************************************************** *************************************************************************
Name: fts5PorterTokenize; Comment: ** Tokenize using the porter tokenizer. 
Name: fts5TriDelete; Comment: ** Free a trigram tokenizer. 
Name: fts5TriCreate; Comment: ** Allocate a trigram tokenizer. 
Name: fts5TriTokenize; Comment: ** Trigram tokenizer tokenize routine. 
Name: sqlite3Fts5TokenizerPattern; Comment: ** Argument xCreate is a pointer to a constructor function for a tokenizer. ** pTok is a tokenizer previously created using the same method. This function ** returns one of FTS5_PATTERN_NONE, FTS5_PATTERN_LIKE or FTS5_PATTERN_GLOB ** indicating the style of pattern matching that the tokenizer can support. ** In practice, this is: ** ** "trigram" tokenizer, case_sensitive=1 - FTS5_PATTERN_GLOB ** "trigram" tokenizer, case_sensitive=0 (the default) - FTS5_PATTERN_LIKE ** all other tokenizers - FTS5_PATTERN_NONE 
Name: sqlite3Fts5TokenizerInit; Comment: ** Register all built-in tokenizers with FTS5. 
Name: fts5_remove_diacritic; Comment: ** If the argument is a codepoint corresponding to a lowercase letter ** in the ASCII range with a diacritic added, return the codepoint ** of the ASCII letter only. For example, if passed 235 - "LATIN ** SMALL LETTER E WITH DIAERESIS" - return 65 ("LATIN SMALL LETTER ** E"). The resuls of passing a codepoint that corresponds to an ** uppercase letter are undefined. 
Name: sqlite3Fts5UnicodeIsdiacritic; Comment: ** Return true if the argument interpreted as a unicode codepoint ** is a diacritical modifier character. 
Name: sqlite3Fts5UnicodeFold; Comment: ** Interpret the argument as a unicode codepoint. If the codepoint ** is an upper case character that has a lower case equivalent, ** return the codepoint corresponding to the lower case version. ** Otherwise, return a copy of the argument. ** ** The results are undefined if the value passed to this function ** is less than zero. 
Name: sqlite3Fts5GetVarint32; Comment: ** This is a copy of the sqlite3GetVarint32() routine from the SQLite core. ** Except, this version does handle the single byte case that the core ** version depends on being handled before its function is called. 
Name: sqlite3Fts5GetVarint; Comment: ** Read a 64-bit variable-length integer from memory starting at p[0]. ** Return the number of bytes read. The value is stored in *v. 
Name: fts5PutVarint64; Comment: ** Write a 64-bit variable-length integer to memory starting at p[0]. ** The length of data write will be between 1 and 9 bytes. The number ** of bytes written is returned. ** ** A variable-length integer consists of the lower 7 bits of each byte ** for all bytes that have the 8th bit set and one byte with the 8th ** bit clear. Except, if we get to the 9th byte, it stores the full ** 8 bits and is the last byte. 
Name: fts5VocabTableType; Comment: ** Translate a string containing an fts5vocab table type to an ** FTS5_VOCAB_XXX constant. If successful, set *peType to the output ** value and return SQLITE_OK. Otherwise, set *pzErr to an error message ** and return SQLITE_ERROR. 
Name: fts5VocabDisconnectMethod; Comment: ** The xDisconnect() virtual table method. 
Name: fts5VocabDestroyMethod; Comment: ** The xDestroy() virtual table method. 
Name: fts5VocabBestIndexMethod; Comment: ** Implementation of the xBestIndex method. ** ** Only constraints of the form: ** ** term <= ? ** term == ? ** term >= ? ** ** are interpreted. Less-than and less-than-or-equal are treated ** identically, as are greater-than and greater-than-or-equal. 
Name: fts5VocabOpenMethod; Comment: ** Implementation of xOpen method. 
Name: fts5VocabCloseMethod; Comment: ** Close the cursor. For additional information see the documentation ** on the xClose method of the virtual table interface. 
Name: fts5VocabNextMethod; Comment: ** Advance the cursor to the next row in the table. 
Name: fts5VocabEofMethod; Comment: ** This is the xEof method of the virtual table. SQLite calls this ** routine to find out if it has reached the end of a result set. 
Name: fts5VocabRowidMethod; Comment: ** This is the xRowid method. The SQLite core calls this routine to ** retrieve the rowid for the current row of the result set. The ** rowid should be written to *pRowid. 
Name: stmtConnect; Comment: ** The stmtConnect() method is invoked to create a new ** stmt_vtab that describes the stmt virtual table. ** ** Think of this routine as the constructor for stmt_vtab objects. ** ** All this routine needs to do is: ** ** (1) Allocate the stmt_vtab object and initialize all fields. ** ** (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the ** result set of queries against stmt will look like. 
Name: stmtDisconnect; Comment: ** This method is the destructor for stmt_cursor objects. 
Name: stmtOpen; Comment: ** Constructor for a new stmt_cursor object. 
Name: stmtClose; Comment: ** Destructor for a stmt_cursor. 
Name: stmtNext; Comment: ** Advance a stmt_cursor to its next row of output. 
Name: stmtRowid; Comment: ** Return the rowid for the current row. In this implementation, the ** rowid is the same as the output value. 
Name: stmtEof; Comment: ** Return TRUE if the cursor has been moved off of the last ** row of output. 
Name: stmtFilter; Comment: ** This method is called to "rewind" the stmt_cursor object back ** to the first row of output. This method is always called at least ** once prior to any call to stmtColumn() or stmtRowid() or ** stmtEof(). 
Name: stmtBestIndex; Comment: ** SQLite will invoke this method one or more times while planning a query ** that uses the stmt virtual table. This routine needs to create ** a query plan for each invocation and compute an estimated cost for that ** plan. 
Name: closeIncrblobChannels; Comment: ** Close all incrblob channels opened using database connection pDb. ** This is called when shutting down the database connection. 
Name: incrblobClose; Comment: ** Close an incremental blob channel. 
Name: incrblobInput; Comment: ** Read data from an incremental blob channel. 
Name: incrblobOutput; Comment: ** Write data to an incremental blob channel. 
Name: incrblobSeek; Comment: ** Seek an incremental blob channel. 
Name: createIncrblobChannel; Comment: ** Create a new incrblob channel. 
Name: safeToUseEvalObjv; Comment: Look at the script prefix in pCmd. We will be executing this script after first appending one or more arguments. This routine analyzes the script to see if it is safe to use Tcl_EvalObjv() on the script rather than the more general Tcl_EvalEx(). Tcl_EvalObjv() is much faster. Scripts that are safe to use with Tcl_EvalObjv() consists of a command name followed by zero or more arguments with no [...] or $ or {...} or ; to be seen anywhere. Most callback scripts consist** of just a single procedure name and they meet this requirement. 
Name: findSqlFunc; Comment: ** Find an SqlFunc structure with the given name. Or create a new ** one if an existing one cannot be found. Return a pointer to the ** structure. 
Name: dbFreeStmt; Comment: ** Free a single SqlPreparedStmt object. 
Name: flushStmtCache; Comment: ** Finalize and free a list of prepared statements 
Name: DbDeleteCmd; Comment: ** TCL calls this procedure when an sqlite3 database command is ** deleted. 
Name: DbBusyHandler; Comment: ** This routine is called when a database file is locked while trying ** to execute SQL. 
Name: DbProgressHandler; Comment: ** This routine is invoked as the 'progress callback' for the database. 
Name: DbTraceHandler; Comment: ** This routine is called by the SQLite trace handler whenever a new ** block of SQL is executed. The TCL script in pDb->zTrace is executed. 
Name: DbProfileHandler; Comment: ** This routine is called by the SQLite profile handler after a statement ** SQL has executed. The TCL script in pDb->zProfile is evaluated. 
Name: DbCommitHandler; Comment: ** This routine is called when a transaction is committed. The ** TCL script in pDb->zCommit is executed. If it returns non-zero or ** if it throws an exception, the transaction is rolled back instead ** of being committed. 
Name: DbWalHandler; Comment: ** This procedure handles wal_hook callbacks. 
Name: DbPreUpdateHandler; Comment: ** Pre-update hook callback. 
Name: tclSqlCollate; Comment: ** This routine is called to evaluate an SQL collation function implemented ** using TCL script. 
Name: tclSqlFunc; Comment: ** This routine is called to evaluate an SQL function implemented ** using TCL script. 
Name: local_getline; Comment: ** This routine reads a line of text from FILE in, stores ** the text in memory obtained from malloc() and returns a pointer ** to the text. NULL is returned at end of file, or if malloc() ** fails. ** ** The interface is like "readline" but no command-line editing ** is done. ** ** copied from shell.c from '.import' command 
Name: dbReleaseColumnNames; Comment: ** Release any cache of column names currently held as part of ** the DbEvalContext structure passed as the first argument. 
Name: dbEvalStep; Comment: ** Return one of TCL_OK, TCL_BREAK or TCL_ERROR. If TCL_ERROR is ** returned, then an error message is stored in the interpreter before ** returning. ** ** A return value of TCL_OK means there is a row of data available. The ** data may be accessed using dbEvalRowInfo() and dbEvalColumnValue(). This ** is analogous to a return of SQLITE_ROW from sqlite3_step(). If TCL_BREAK ** is returned, then the SQL script has finished executing and there are ** no further rows available. This is similar to SQLITE_DONE. 
Name: dbEvalFinalize; Comment: ** Free all resources currently held by the DbEvalContext structure passed ** as the first argument. There should be exactly one call to this function ** for each call to dbEvalInit(). 
Name: dbEvalColumnValue; Comment: ** Return a pointer to a Tcl_Obj structure with ref-count 0 that contains ** the value for the iCol'th column of the row currently pointed to by ** the DbEvalContext structure passed as the first argument. 
Name: DbObjCmd; Comment: ** The "sqlite" command below creates a new Tcl command for each ** connection it opens to an SQLite database. This routine is invoked ** whenever one of those connection-specific commands is executed ** in Tcl. For example, if you run Tcl code like this: ** ** sqlite3 db1 "my_database" ** db1 close ** ** The first command opens a connection to the "my_database" database ** and calls that connection "db1". The second command causes this ** subroutine to be invoked. 
Name: DbObjCmdAdaptor; Comment: ** Adaptor that provides an objCmd interface to the NRE-enabled ** interface implementation. 
Name: sqliteCmdUsage; Comment: ** Issue the usage message when the "sqlite3" command arguments are ** incorrect. 
Name: DbMain; Comment: ** sqlite3 DBNAME FILENAME ?-vfs VFSNAME? ?-key KEY? ?-readonly BOOLEAN? ** ?-create BOOLEAN? ?-nomutex BOOLEAN? ** ?-nofollow BOOLEAN? ** ** This is the main Tcl command. When the "sqlite" Tcl command is ** invoked, this routine runs to process that command. ** ** The first argument, DBNAME, is an arbitrary name for a new ** database connection. This command creates a new command named ** DBNAME that is used to control that connection. The database ** connection is deleted when the DBNAME command is deleted. ** ** The second argument is the name of the database file. ** 
Name: Sqlite3_Init; Comment: ** Initialize this module. ** ** This Tcl module contains only a single new Tcl command named "sqlite". ** (Hence there is no namespace. There is no point in using a namespace ** if the extension only supplies one new name!) The "sqlite" command is ** used to open a new SQLite database. See the DbMain() routine above ** for additional information. ** ** The EXTERN macros are required by TCL in order to work on windows. 
Name: tclsh_main_loop; Comment: This is the main routine for an ordinary TCL shell. If there are** are arguments, run the first argument as a script. Otherwise, ** read TCL commands from standard input 
Name: TCLSH_MAIN; Comment: Needed to fake out mktclapp 
Name: main; Comment: exitcodes: 0 == no, 1 == yes, 2 == error 
Name: GetVersionFromFile; Comment: GetVersionFromFile -- _Looks for a match string in a file and then returns the version _following the match where a version is anything acceptable to _package provide or package ifneeded. 
Name: list_insert; Comment: insert a list item into the list (list may be null) 
Name: SubstituteFile; Comment: SubstituteFile -- *_As windows doesn't provide anything useful like sed and it's unreliable *_to use the tclsh you are building against (consider x-platform builds - *_eg compiling AMD64 target from IX86) we provide a simple substitution *_option here to handle autoconf style substitutions. *_The substitution file is whitespace and line delimited. The file should *_consist of lines matching the regular expression: *_ _s*_S+_s+_S*$ *_Usage is something like: *_ nmakehlp -S << $** > $@ @PACKAGE_NAME@ $(PACKAGE_NAME) @PACKAGE_VERSION@ $(PACKAGE_VERSION) << 
Name: QualifyPath; Comment: QualifyPath -- *_This composes the current working directory with a provided path *_and returns the fully qualified and normalized path. *_Mostly needed to setup paths for testing. 
Name: areadlinkat_with_size; Comment: None typically it is taken from st_size. It need not be correct. Return a pointer to that NUL-terminated string in malloc'd storage. If readlinkat fails, malloc fails, or if the link value is longer than SSIZE_MAX, return NULL (caller may use errno to diagnose). However, failure to change directory during readlinkat will issue a diagnostic and exit. 
Name: __argp_make_fmtstream; Comment: Return an argp_fmtstream that outputs to STREAM, and which prefixes lines written on it with LMARGIN spaces and limits them to RMARGIN columns total. If WMARGIN >= 0, words that extend past RMARGIN are wrapped by replacing the whitespace before them with a newline and WMARGIN spaces. Otherwise, chars beyond RMARGIN are simply dropped until a newline. Returns NULL if there was an error. 
Name: __argp_fmtstream_free; Comment: Flush FS to its stream, and free it (but don't close the stream). 
Name: __argp_fmtstream_update; Comment: Process FS's buffer so that line wrapping is done from POINT_OFFS to the end of its buffer. This code is mostly from glibc stdio/linewrap.c. 
Name: __argp_fmtstream_ensure; Comment: Ensure that FS has space for AMOUNT more bytes in its buffer, either by growing the buffer, or by flushing it. True is returned iff we succeed. 
Name: fill_in_uparams; Comment: Read user options from the environment, and fill in UPARAMS appropriately. 
Name: find_char; Comment: Returns true if CH occurs between BEG and END. 
Name: make_hol; Comment: Create a struct hol from the options in ARGP. CLUSTER is the hol_cluster in which these entries occur, or NULL if at the root. 
Name: hol_add_cluster; Comment: Add a new cluster to HOL, with the given GROUP and HEADER (taken from the associated argp child list entry), INDEX, and PARENT, and return a pointer to it. ARGP is the argp that this cluster results from. 
Name: hol_free; Comment: Free HOL and any resources it uses. 
Name: hol_entry_short_iterate; Comment: Iterate across the short_options of the given ENTRY. Call FUNC for each. Stop when such a call returns a non-zero value, and return this value. If all FUNC invocations returned 0, return 0. 
Name: until_short; Comment: A filter that returns true for the first short option of a given ENTRY. 
Name: hol_entry_first_short; Comment: Returns the first valid short option in ENTRY, or 0 if there is none. 
Name: hol_entry_first_long; Comment: Returns the first valid long option in ENTRY, or NULL if there is none. 
Name: hol_find_entry; Comment: Returns the entry in HOL with the long option name NAME, or NULL if there is none. 
Name: hol_set_group; Comment: If an entry with the long option NAME occurs in HOL, set its special sort position to GROUP. 
Name: group_cmp; Comment: Order by group: 0, 1, 2, ..., n, -m, ..., -2, -1. 
Name: hol_sibling_cluster_cmp; Comment: Compare clusters CL1 and CL2 by the order that they should appear in output. Assume CL1 and CL2 have the same parent. 
Name: hol_cousin_cluster_cmp; Comment: Compare clusters CL1 and CL2 by the order that they should appear in output. Assume CL1 and CL2 are at the same depth. 
Name: hol_cluster_cmp; Comment: Compare clusters CL1 and CL2 by the order that they should appear in output. 
Name: hol_cluster_base; Comment: Return the ancestor of CL that's just below the root (i.e., has a parent of 0). 
Name: canon_doc_option; Comment: Given the name of an OPTION_DOC option, modifies *NAME to start at the tail that should be used for comparisons, and returns true iff it should be treated as a non-option. 
Name: hol_entry_cmp; Comment: Order ENTRY1 and ENTRY2 by the order which they should appear in a help listing. This function implements a total order, that is: - if cmp (entry1, entry2) < 0 and cmp (entry2, entry3) < 0, then cmp (entry1, entry3) < 0. - if cmp (entry1, entry2) < 0 and cmp (entry2, entry3) == 0, then cmp (entry1, entry3) < 0. - if cmp (entry1, entry2) == 0 and cmp (entry2, entry3) < 0, then cmp (entry1, entry3) < 0. - if cmp (entry1, entry2) == 0 and cmp (entry2, entry3) == 0, then cmp (entry1, entry3) == 0. 
Name: hol_entry_qcmp; Comment: Variant of hol_entry_cmp with correct signature for qsort. 
Name: hol_sort; Comment: Sort HOL by group and alphabetically by option name (with short options taking precedence over long). Since the sorting is for display purposes only, the shadowing of options isn't effected. 
Name: hol_append; Comment: Append MORE to HOL, destroying MORE in the process. Options in HOL shadow any in MORE with the same name. 
Name: argp_hol; Comment: Make a HOL containing all levels of options in ARGP. CLUSTER is the cluster in which ARGP's entries should be clustered, or NULL. 
Name: indent_to; Comment: Inserts enough spaces to make sure STREAM is at column COL. 
Name: space; Comment: Output to STREAM either a space, or a newline if there isn't room for at least ENSURE characters before the right margin. 
Name: arg; Comment: If the option REAL has an argument, we print it in using the printf format REQ_FMT or OPT_FMT depending on whether it's a required or optional argument. 
Name: filter_doc; Comment: If a user doc filter should be applied to DOC, do so. 
Name: print_header; Comment: Prints STR as a header line, with the margin lines set appropriately, and notes the fact that groups should be separated with a blank line. ARGP is the argp that should dictate any user doc filtering to take place. Note that the previous wrap margin isn't restored, but the left margin is reset to 0. 
Name: hol_cluster_is_child; Comment: Return true if CL1 is a child of CL2. 
Name: comma; Comment: Inserts a comma if this isn't the first item on the line, and then makes sure we're at least to column COL. If this *is* the first item on a line, prints any pending whitespace/headers that should precede this line. Also clears FIRST. 
Name: hol_entry_help; Comment: Print help for ENTRY to STREAM. 
Name: hol_help; Comment: Output a long help message about the options in HOL to STREAM. 
Name: add_argless_short_opt; Comment: If OPT is a short option without an arg, append its key to the string pointer pointer to by COOKIE, and advance the pointer. 
Name: usage_argful_short_opt; Comment: If OPT is a short option with an arg, output a usage entry for it to the stream pointed at by COOKIE. 
Name: usage_long_opt; Comment: Output a usage entry for the long option opt to the stream pointed at by COOKIE. 
Name: hol_usage; Comment: Print a short usage description for the arguments in HOL to STREAM. 
Name: argp_args_levels; Comment: Calculate how many different levels with alternative args strings exist in ARGP. 
Name: argp_args_usage; Comment: Print all the non-option args documented in ARGP to STREAM. Any output is preceded by a space. LEVELS is a pointer to a byte vector the length returned by argp_args_levels; it should be initialized to zero, and updated by this routine for the next call if ADVANCE is true. True is returned as long as there are more patterns to output. 
Name: argp_doc; Comment: Print the documentation for ARGP to STREAM; if POST is false, then everything preceding a '_v' character in the documentation strings (or the whole string, for those with none) is printed, otherwise, everything following the '_v' character (nothing for strings without). Each separate bit of documentation is separated a blank line, and if PRE_BLANK is true, then the first is as well. If FIRST_ONLY is true, only the first occurrence is output. Returns true if anything was output. 
Name: _help; Comment: Output a usage message for ARGP to STREAM. If called from argp_state_help, STATE is the relevant parsing state. FLAGS are from the set ARGP_HELP_*. NAME is what to use wherever a 'program name' is needed. 
Name: __argp_help; Comment: Output a usage message for ARGP to STREAM. FLAGS are from the set ARGP_HELP_*. NAME is what to use wherever a 'program name' is needed. 
Name: __argp_state_help; Comment: Output, if appropriate, a usage message for STATE to STREAM. FLAGS are from the set ARGP_HELP_*. 
Name: __argp_error; Comment: If appropriate, print the printf string FMT and following args, preceded by the program name and ':', to stderr, and followed by a "Try ... --help" message, then exit (1). 
Name: __argp_failure; Comment: Similar to the standard gnu error-reporting function error(), but will respect the ARGP_NO_EXIT and ARGP_NO_ERRS flags in STATE, and will print to STATE->err_stream. This is useful for argument parsing code that is shared between program startup (when exiting is desired) and runtime option parsing (when typically an error code is returned instead). The difference between this function and argp_error is that the latter is for *parsing errors*, and the former is for other problems that occur during parsing but don't reflect a (syntactic) problem with the input. 
Name: find_long_option; Comment: Returns the offset into the getopt long options array LONG_OPTIONS of a long option with called NAME, or -1 if none is found. Passing NULL as NAME will return the number of options. 
Name: group_parse; Comment: Call GROUP's parser with KEY and ARG, swapping any group-specific info from STATE before calling, and back into state afterwards. If GROUP has no parser, EBADKEY is returned. 
Name: convert_options; Comment: Converts all options in ARGP (which is put in GROUP) and ancestors into getopt options stored in SHORT_OPTS and LONG_OPTS; SHORT_END and CVT->LONG_END are the points at which new options are added. Returns the next unused group entry. CVT holds state used during the conversion. 
Name: parser_convert; Comment: Find the merged set of getopt options, with keys appropriately prefixed. 
Name: calc_sizes; Comment: For ARGP, increments the NUM_GROUPS field in SZS by the total number of argp structures descended from it, and the SHORT_LEN & LONG_LEN fields by the maximum lengths of the resulting merged getopt short options string and long-options array, respectively. 
Name: parser_init; Comment: Initializes PARSER to parse ARGP in a manner described by FLAGS. 
Name: parser_finalize; Comment: Free any storage consumed by PARSER (but not PARSER itself). 
Name: parser_parse_arg; Comment: Call the user parsers to parse the non-option argument VAL, at the current position, returning any error. The state NEXT pointer is assumed to have been adjusted (by getopt) to point after this argument; this function will adjust it correctly to reflect however many args actually end up being consumed. 
Name: parser_parse_opt; Comment: Call the user parsers to parse the option OPT, with argument VAL, at the current position, returning any error. 
Name: parser_parse_next; Comment: Parse the next argument in PARSER (as indicated by PARSER->state.next). Any error from the parsers is returned, and *ARGP_EBADKEY indicates whether a value of EBADKEY is due to an unrecognized argument (which is generally not fatal). 
Name: __argp_parse; Comment: Parse the options strings in ARGC & ARGV according to the argp in ARGP. FLAGS is one of the ARGP_ flags above. If END_INDEX is non-NULL, the index in ARGV of the first unparsed option is returned in it. If an unknown option is present, EINVAL is returned; if some parser routine returned a non-zero value, it is returned; otherwise 0 is returned. 
Name: __argp_input; Comment: Return the input field for ARGP in the parser corresponding to STATE; used by the help routines. 
Name: find_backup_file_name; Comment: Relative to DIR_FD, return the name of a backup file for the existing file FILE, allocated with malloc. Report an error and exit if out of memory. Do not call this function if backup_type == no_backups. 
Name: set_simple_backup_suffix; Comment: Set SIMPLE_BACKUP_SUFFIX to S, or to a default specified by the environment if S is null. If S or the environment does not specify a valid backup suffix, use "~". 
Name: check_extension; Comment: If FILE (which was of length FILELEN before an extension was appended to it) is too long, replace the extension with the single char E. If the result is still too long, remove the char just before E. If DIR_FD is nonnegative, it is a file descriptor for FILE's parent. *NAME_MAX is either 0, or the cached result of a previous call for FILE's parent's _PC_NAME_MAX. 
Name: numbered_backup; Comment: Relative to DIR_FD, *BUFFER contains a file name. Store into BUFFER the next backup name for the named file, with a version number greater than all the existing numbered backups. Reallocate BUFFER as necessary; its initial allocated size is BUFFER_SIZE, which must be at least 4 bytes longer than the file name to make room for the initially appended ".~1". FILELEN is the length of the original file name. BASE_OFFSET is the offset of the basename in *BUFFER. The returned value indicates what kind of backup was found. If an I/O or other read error occurs, use the highest backup number that was found. *DIRPP is the destination directory. If *DIRPP is null, open the destination directory and store the resulting stream into *DIRPP and its file descriptor into *PNEW_FD without closing the stream. 
Name: backupfile_internal; Comment: Relative to DIR_FD, return the name of the new backup file for the existing file FILE, allocated with malloc. If RENAME, also rename FILE to the new name. On failure, return NULL and set errno. Do not call this function if backup_type == no_backups. 
Name: __realpath; Comment: Return the canonical absolute name of file NAME. A canonical name does not contain any ".", ".." components nor any repeated file name separators ('') or symlinks. All file name components must exist. If RESOLVED is null, the result is malloc'd; otherwise, if the canonical name is PATH_MAX chars or more, returns null with 'errno' set to ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars, returns the name in RESOLVED. If the name cannot be resolved and RESOLVED is non-NULL, it contains the name of the first component that cannot be resolved. If the name can be resolved, RESOLVED holds the same value as the value returned. 
Name: fdutimensat; Comment: Set the access and modification timestamps of FD (a.k.a. FILE) to be TIMESPEC[0] and TIMESPEC[1], respectively; relative to directory DIR. FD must be either negative -- in which case it is ignored -- or a file descriptor that is open on FILE. If FD is nonnegative, then FILE can be NULL, which means use just futimes (or equivalent) instead of utimes (or equivalent), and fail if on an old system without futimes (or equivalent). If TIMESPEC is null, set the timestamps to the current time. ATFLAG is passed to utimensat if FD is negative or futimens was unsupported, which can allow operation on FILE as a symlink. Return 0 on success, -1 (setting errno) on failure. 
Name: futimens; Comment: Set the access and modification timestamps of FD to be TIMESPEC[0] and TIMESPEC[1], respectively. Fail with ENOSYS on systems without futimes (or equivalent). If TIMESPEC is null, set the timestamps to the current time. Return 0 on success, -1 (setting errno) on failure. 
Name: lchmod; Comment: Work like chmod, except when FILE is a symbolic link. In that case, on systems where permissions on symbolic links are unsupported (such as Linux), set errno to EOPNOTSUPP and return -1. 
Name: mkdtemp; Comment: None they are replaced with a string that makes the filename unique. The directory is created, mode 700, and its name is returned. (This function comes from OpenBSD.) 
Name: mkfifoat; Comment: Mingw lacks mkfifo, so this wrapper is trivial. 
Name: mknodat; Comment: Mingw lacks mknod, so this wrapper is trivial. 
Name: my_strftime; Comment: Write information from TP into S according to the format string FORMAT, writing no more that MAXSIZE characters (including the terminating '_0') and returning number of characters written. If S is NULL, nothing will be written anywhere, so to determine how many characters would be written, use NULL for S and (size_t) -1 for MAXSIZE. 
Name: yystpcpy; Comment: Copy YYSRC to YYDEST, returning the address of the terminating '_0' in YYDEST. 
Name: gettext_quote; Comment: MSGID approximates a quotation mark. Return its translation if it has one; otherwise, return either it or "_"", depending on S. S is either clocale_quoting_style or locale_quoting_style. 
Name: sift_states_backward; Comment: This function checks the STATE_LOG from the SCTX->last_str_idx to 0 and sift the nodes in each states according to the following rules. Updated state_log will be wrote to STATE_LOG. Rules: We throw away the Node 'a' in the STATE_LOG[STR_IDX] if... 1. When STR_IDX == MATCH_LAST(the last index in the state_log): _If 'a' isn't the LAST_NODE and 'a' can't epsilon transit to _the LAST_NODE, we throw away the node 'a'. 2. When 0 <= STR_IDX < MATCH_LAST and 'a' accepts _string 's' and transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX+strlen('s')], we throw _ away the node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX+strlen('s')] but 'b' is _ thrown away, we throw away the node 'a'. 3. When 0 <= STR_IDX < MATCH_LAST and 'a' epsilon transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX], we throw away the _ node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX] but 'b' is thrown away, _ we throw away the node 'a'. 
Name: find_subexp_node; Comment: Find the first node which is '(' or ')' and whose index is SUBEXP_IDX. Search '(' if FL_OPEN, or search ')' otherwise. TODO: This function isn't efficient... _ Because there might be more than one nodes whose types are _ OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all _ nodes. _ E.g. RE: (a){2} 
Name: check_arrival_add_next_nodes; Comment: Calculate the destination nodes of CUR_NODES at STR_IDX, and append them to NEXT_NODES. TODO: This function is similar to the functions transit_state*(), _ however this function has many additional works. _ Can't we unify them? 
Name: re_acquire_state; Comment: Search for the state whose node_set is equivalent to NODES. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: re_acquire_state_context; Comment: Search for the state whose node_set is equivalent to NODES and whose context is equivalent to CONTEXT. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: renameatu; Comment: Rename FILE1, in the directory open on descriptor FD1, to FILE2, in the directory open on descriptor FD2. If possible, do it without changing the working directory. Otherwise, resort to using save_cwdfchdir, then renamerestore_cwd. If either the save_cwd or the restore_cwd fails, then give a diagnostic and exit nonzero. Obey FLAGS when doing the renaming. If FLAGS is zero, this function is equivalent to renameat (FD1, SRC, FD2, DST). Otherwise, attempt to implement FLAGS even if the implementation is not atomic; this differs from the GNULinux native renameat2, which fails if it cannot guarantee atomicity. 
Name: streamsavedir; Comment: None the end is marked by two '_0' characters in a row. Returned values are sorted according to OPTION. Return NULL (setting errno) if DIRP cannot be read. If DIRP is NULL, return NULL without affecting errno. 
Name: savedir; Comment: None the end is marked by two '_0' characters in a row. Return NULL (setting errno) if DIR cannot be opened, read, or closed. 
Name: set_acls_from_mode; Comment: Solaris, Cygwin < 2.5, not HP-UX 
Name: __stpcpy; Comment: Copy SRC to DEST, returning the address of the terminating '_0' in DEST. 
Name: strchrnul; Comment: Find the first occurrence of C in S or the final NUL byte. 
Name: strnlen; Comment: Find the length of STRING, but scan at most MAXLEN characters. If no '_0' terminator is found in that many characters, return MAXLEN. 
Name: fdutimens; Comment: Set the access and modification timestamps of FD (a.k.a. FILE) to be TIMESPEC[0] and TIMESPEC[1], respectively. FD must be either negative -- in which case it is ignored -- or a file descriptor that is open on FILE. If FD is nonnegative, then FILE can be NULL, which means use just futimes (or equivalent) instead of utimes (or equivalent), and fail if on an old system without futimes (or equivalent). If TIMESPEC is null, set the timestamps to the current time. Return 0 on success, -1 (setting errno) on failure. 
Name: utimens; Comment: Set the access and modification timestamps of FILE to be TIMESPEC[0] and TIMESPEC[1], respectively. 
Name: lutimens; Comment: Set the access and modification timestamps of FILE to be TIMESPEC[0] and TIMESPEC[1], respectively, without dereferencing symlinks. Fail with ENOSYS if the platform does not support changing symlink timestamps, but FILE was a symlink. 
Name: vsnprintf; Comment: Print formatted output to string STR. Similar to vsprintf, but additional length SIZE limit how much is written into STR. Returns string length of formatted string (which may be larger than SIZE). STR may be NULL, in which case nothing will be written. On error, return a negative value. 
Name: pax_decode_mode; Comment: Decode MODE from its binary form in a stat structure, and encode it into a 9-byte string STRING, terminated with a NUL. 
Name: call_arg_error; Comment: Report an error associated with the system call CALL and the optional name NAME. 
Name: call_arg_fatal; Comment: Report a fatal error associated with the system call CALL and the optional file name NAME. 
Name: call_arg_warn; Comment: Report a warning associated with the system call CALL and the optional file name NAME. 
Name: hash_string_hasher; Comment: Calculate the hash of a string. 
Name: hash_string_compare; Comment: Compare two strings for equality. 
Name: hash_string_insert_prefix; Comment: Return zero if TABLE contains a LEN-character long prefix of STRING, otherwise, insert a newly allocated copy of this prefix to TABLE and return 1. If RETURN_PREFIX is not NULL, point it to the allocated copy. 
Name: removed_prefixes_p; Comment: Return true if file names of some members in the archive were stripped off their leading components. We could have used return prefix_table[0] || prefix_table[1] but the following seems to be safer: 
Name: safer_name_suffix; Comment: Return a safer suffix of FILE_NAME, or "." if it has no safer suffix. Check for fully specified file names and other atrocities. Warn the user if we do not return NAME. If LINK_TARGET is 1, FILE_NAME is the target of a hard link, not a member name. If ABSOLUTE_NAMES is 0, strip filesystem prefix from the file name. 
Name: _rmt_shutdown; Comment: Close remote tape connection HANDLE, and reset errno to ERRNO_VALUE. 
Name: do_command; Comment: Attempt to perform the remote tape command specified in BUFFER on remote tape connection HANDLE. Return 0 if successful, -1 on error. 
Name: get_status; Comment: Read and return the status from remote tape connection HANDLE. If an error occurred, return -1 and set errno. 
Name: _rmt_rexec; Comment: Execute /etc/rmt as user USER on remote system HOST using rexec. Return a file descriptor of a bidirectional socket for stdin and stdout. If USER is zero, use the current username. By default, this code is not used, since it requires that the user have a .netrc file in his/her home directory, or that the application designer be willing to have rexec prompt for login and password info. This may be unacceptable, and .rhosts files for use with rsh are much more common on BSD systems. 
Name: encode_oflag; Comment: Place into BUF a string representing OFLAG, which must be suitable as argument 2 of `open'. BUF must be large enough to hold the result. This function should generate a string that decode_oflag can parse. 
Name: rmt_open__; Comment: Open a file (a magnetic tape device?) on the system specified in FILE_NAME, as the given user. FILE_NAME has the form `[USER@]HOST:FILE'. OPEN_MODE is O_RDONLY, O_WRONLY, etc. If successful, return the remote pipe number plus BIAS. REMOTE_SHELL may be overridden. On error, return -1. 
Name: rmt_close__; Comment: Close remote tape connection HANDLE and shut down. Return 0 if successful, -1 on error. 
Name: rmt_read__; Comment: Read up to LENGTH bytes into BUFFER from remote tape connection HANDLE. Return the number of bytes read on success, SAFE_READ_ERROR on error. 
Name: rmt_write__; Comment: Write LENGTH bytes from BUFFER to remote tape connection HANDLE. Return the number of bytes written. 
Name: rmt_lseek__; Comment: Perform an imitation lseek operation on remote tape connection HANDLE. Return the new file offset if successful, -1 if on error. 
Name: rmt_ioctl__; Comment: Perform a raw tape operation on remote tape connection HANDLE. Return the results of the ioctl, or -1 on error. 
Name: node_split_prefix; Comment: Variable expansion 
Name: wsnode_nullelim; Comment: Remove NULL nodes from the list 
Name: wordsplit_trimws; Comment: Strip off any leading and trailing whitespace. This function is called right after the initial scanning, therefore it assumes that every node in the list is a text reference node. 
Name: open_device; Comment: Syntax ------ O<device>_n<flags>_n Function -------- Opens the <device> with given <flags>. If a device had already been opened, it is closed before opening the new one. Arguments --------- <device> - name of the device to open. <flags> - flags for open(2): a decimal number, or any valid O_* constant from fcntl.h (the initial O_ may be omitted), or a bitwise or (using '|') of any number of these, e.g.: 576 64|512 CREAT|TRUNC In addition, a compined form is also allowed, i.e. a decimal mode followed by its symbolic representation. In this case the symbolic representation is given preference. Reply ----- A0_n on success, E0_n<msg>_n on error. Extensions ---------- BSD version allows only decimal number as <flags> 
Name: close_device; Comment: Syntax ------ C[<device>]_n Function -------- Close the currently open device. Arguments --------- Any arguments are silently ignored. Reply ----- A0_n on success, E0_n<msg>_n on error. 
Name: read_device; Comment: Syntax ------ R<count>_n Function -------- Read <count> bytes of data from the current device. Arguments --------- <count> - number of bytes to read. Reply ----- On success: A<rdcount>_n, followed by <rdcount> bytes of data read from the device. On error: E0_n<msg>_n 
Name: write_device; Comment: Syntax ------ W<count>_n followed by <count> bytes of input data. Function -------- Write data onto the current device. Arguments --------- <count> - number of bytes. Reply ----- On success: A<wrcount>_n, where <wrcount> is number of bytes actually written. On error: E0_n<msg>_n 
Name: iocop_device; Comment: Syntax ------ I<opcode>_n<count>_n Function -------- Perform a MTIOCOP ioctl(2) command using the specified paramedters. Arguments --------- <opcode> - MTIOCOP operation code. <count> - mt_count. Reply ----- On success: A0_n On error: E0_n<msg>_n 
Name: status_device; Comment: Syntax ------ S_n Function -------- Return the status of the open device, as obtained with a MTIOCGET ioctl call. Arguments --------- None Reply ----- On success: A<count>_n followed by <count> bytes of data. On error: E0_n<msg>_n 
Name: clear_read_error_count; Comment: Functions. 
Name: check_compressed_archive; Comment: Check if the file ARCHIVE is a compressed archive. 
Name: guess_seekable_archive; Comment: Guess if the archive is seekable. 
Name: open_compressed_archive; Comment: Open an archive named archive_name_array[0]. Detect if it is a compressed archive of known type and use corresponding decompression program if so 
Name: format_total_stats; Comment: Format totals to file FP. FORMATS is an array of strings to output before each data item (bytes read, written, deleted, in that order). EOR is a delimiter to output after each item (used only if deleting from the archive), EOL is a delimiter to add at the end of the output line. 
Name: current_block_ordinal; Comment: Compute and return the block ordinal at current_block. 
Name: reset_eof; Comment: If the EOF flag is set, reset it, as well as current_block, etc. 
Name: find_next_block; Comment: Return the location of the next available input or output block. Return zero for EOF. Once we have returned zero, we just keep returning it, to avoid accidentally going on to the next file on the tape. 
Name: set_next_block_after; Comment: Indicate that we have used all blocks up thru BLOCK. 
Name: available_space_after; Comment: Return the number of bytes comprising the space between POINTER through the end of the current buffer of blocks. This space is available for filling with data, or taking data from. POINTER is usually (but not always) the result of previous find_next_block call. 
Name: xclose; Comment: Close file having descriptor FD, and abort if close unsuccessful. 
Name: _open_archive; Comment: Open an archive file. The argument specifies whether we are reading or writing, or both. 
Name: _flush_write; Comment: Perform a write to flush the buffer. 
Name: archive_write_error; Comment: Handle write errors on the archive. Write errors are always fatal. Hitting the end of a volume does not cause a write error unless the write was the first record of the volume. 
Name: archive_read_error; Comment: Handle read errors on the archive. If the read should be retried, return to the caller. 
Name: flush_archive; Comment: Flush the current buffer to/from the archive. 
Name: backspace_output; Comment: Backspace the archive descriptor by one record worth. If it's a tape, MTIOCTOP will work. If it's something else, try to seek on it. If we can't seek, we lose! 
Name: close_archive; Comment: Close the archive file. 
Name: init_volume_number; Comment: Called to initialize the global volume number. 
Name: closeout_volume_number; Comment: Called to write out the closing global volume number. 
Name: new_volume; Comment: We've hit the end of the old volume. Close it and open the next one. Return nonzero on success. 
Name: check_label_pattern; Comment: Check LABEL against the volume label, seen as a globbing pattern. Return true if the pattern matches. In case of failure, retry matching a volume sequence number before giving up in multi-volume mode. 
Name: match_volume_label; Comment: Check if the next block contains a volume label and if this matches the one given in the command line 
Name: _write_volume_label; Comment: Mark the archive with volume label STR. 
Name: add_volume_label; Comment: Add a volume label to a part of multi-volume archive 
Name: write_volume_label; Comment: Add a volume label to the current archive 
Name: gnu_add_multi_volume_header; Comment: Write GNU multi-volume header 
Name: add_multi_volume_header; Comment: Add a multi volume header to the current archive. The exact header format depends on the archive format. 
Name: simple_flush_read; Comment: Simple flush read (no multi-volume or label extensions) 
Name: simple_flush_write; Comment: Simple flush write (no multi-volume or label extensions) 
Name: _gnu_flush_read; Comment: GNU flush functions. These support multi-volume and archive labels in GNU and PAX archive formats. 
Name: diff_init; Comment: Initialize for a diff operation. 
Name: report_difference; Comment: Sigh about something that differs by writing a MESSAGE to stdlis, given MESSAGE is nonzero. Also set the exit status if not already. 
Name: process_noop; Comment: Take a buffer returned by read_and_process and do nothing with it. 
Name: read_and_process; Comment: Some other routine wants SIZE bytes in the archive. For each chunk of the archive, call PROCESSOR with the size of the chunk, and the address of the chunk it can work with. The PROCESSOR should return nonzero for success. Once it returns error, continue skipping without calling PROCESSOR anymore. 
Name: get_stat_data; Comment: Call either stat or lstat over STAT_DATA, depending on --dereference (-h), for a file which should exist. Diagnose any problem. Return nonzero for success, zero otherwise. 
Name: diff_archive; Comment: Diff a file against the archive. 
Name: to_octal; Comment: Convert VALUE to an octal representation suitable for tar headers. Output to buffer WHERE with size SIZE. The result is undefined if SIZE is 0 or if VALUE is too large to fit. 
Name: tar_copy_str; Comment: Copy at most LEN bytes from the string SRC to DST. Terminate with NUL unless SRC is LEN or more bytes long. 
Name: tar_name_copy_str; Comment: Same as tar_copy_str, but always terminate with NUL if using is OLDGNU format 
Name: to_base256; Comment: Convert NEGATIVE VALUE to a base-256 representation suitable for tar headers. NEGATIVE is 1 if VALUE was negative before being cast to uintmax_t, 0 otherwise. Output to buffer WHERE with size SIZE. The result is undefined if SIZE is 0 or if VALUE is too large to fit. 
Name: to_chars; Comment: Convert NEGATIVE VALUE (which was originally of size VALSIZE) to external form, using SUBSTITUTE (...) if VALUE won't fit. Output to buffer WHERE with size SIZE. NEGATIVE is 1 iff VALUE was negative before being cast to uintmax_t; its original bitpattern can be deduced from VALSIZE, its original size before casting. TYPE is the kind of value being output (useful for diagnostics). Prefer the POSIX format of SIZE - 1 octal digits (with leading zero digits), followed by '_0'. If this won't work, and if GNU or OLDGNU format is allowed, use '_200' followed by base-256, or (if NEGATIVE is nonzero) '_377' followed by two's complement base-256. If neither format works, use SUBSTITUTE (...) instead. Pass to SUBSTITUTE the address of an 0-or-1 flag recording whether the substitute value is negative. 
Name: file_dumpable_p; Comment: A directory is always considered dumpable. Otherwise, only regular and contiguous files are considered dumpable. Such a file is dumpable if it is sparse and both --sparse and --totals are specified. Otherwise, it is dumpable unless any of the following conditions occur: a) it is empty *and* world-readable, or b) current archive is /dev/null 
Name: write_eot; Comment: Write the EOT block(s). Zero at least two blocks, through the end of the record. Old tar, as previous versions of GNU tar, writes garbage after two zeroed blocks. 
Name: start_private_header; Comment: Write a "private" header 
Name: write_short_name; Comment: Create a new header and store there at most NAME_FIELD_SIZE bytes of the file name 
Name: write_gnu_long_link; Comment: Write a GNUTYPE_LONGLINK or GNUTYPE_LONGNAME block. 
Name: write_long_link; Comment: Write a long link name, depending on the current archive format 
Name: start_header; Comment: Make a header block for the file whose stat info is st, and return its address. 
Name: finish_header; Comment: Finish off a filled-in header block and write it out. We also print the file name and/or full info if verbose is on. If BLOCK_ORDINAL is not negative, is the block ordinal of the first record for this file, which may be a preceding long name or long link record. 
Name: dump_dir0; Comment: Copy info from the directory identified by ST into the archive. DIRECTORY contains the directory's entries. 
Name: ensure_slash; Comment: Ensure exactly one trailing slash. 
Name: open_failure_recover; Comment: If we just ran out of file descriptors, release a file descriptor in the directory chain somewhere leading from DIR->parent->parent up through the root. Return true if successful, false (preserving errno == EMFILE) otherwise. Do not release DIR's file descriptor, or DIR's parent, as other code assumes that they work. On some operating systems, another process can claim file descriptor resources as we release them, and some calls or their emulations require multiple file descriptors, so callers should not give up if a single release doesn't work. 
Name: get_directory_entries; Comment: Return the directory entries of ST, in a dynamically allocated buffer, each entry followed by '_0' and the last followed by an extra '_0'. Return null on failure, setting errno. 
Name: dump_dir; Comment: Dump the directory ST. Return true if successful, false (emitting diagnostics) otherwise. Get ST's entries, recurse through its subdirectories, and clean up file descriptors afterwards. 
Name: create_archive; Comment: Main functions of this module. 
Name: hash_link; Comment: Calculate the hash of a link. 
Name: compare_links; Comment: Compare two links for equality. 
Name: dump_hard_link; Comment: Try to dump stat as a hard link to another file in the archive. Return true if successful. 
Name: check_links; Comment: For each dumped file, check if all its links were dumped. Emit warnings if it is not so. 
Name: subfile_open; Comment: Assuming DIR is the working directory, open FILE, using FLAGS to control the open. A null DIR means to use ".". If we are low on file descriptors, try to release one or more from DIR's parents to reuse it. 
Name: restore_parent_fd; Comment: Restore the file descriptor for ST->parent, if it was temporarily closed to conserve file descriptors. On failure, set the file descriptor to the negative of the corresponding errno value. Call this every time a subdirectory is ascended from. 
Name: dump_file0; Comment: FIXME: One should make sure that for *every* path leading to setting exit_status to failure, a clear diagnostic has been issued. 
Name: dump_file; Comment: Dump a file, recursively. PARENT describes the file's parent directory, NAME is the file's name relative to PARENT, and FULLNAME its full name, possibly relative to the working directory. NAME may contain slashes at the top level of invocation. 
Name: move_archive; Comment: Move archive descriptor by COUNT records worth. If COUNT is positive we move forward, else we move negative. If it's a tape, MTIOCTOP had better work. If it's something else, we try to seek on it. If we can't seek, we lose! 
Name: write_record; Comment: Write out the record which has been filled. If MOVE_BACK_FLAG, backspace to where we started. 
Name: excluded_name; Comment: Return nonzero if file NAME is excluded. 
Name: implemented; Comment: Return true if an error number ERR means the system call is supported in this case. 
Name: extr_init; Comment: Set up to extract files. 
Name: fd_i_chmod; Comment: Use fchmod if possible, fchmodat otherwise. 
Name: fd_chmod; Comment: A version of fd_i_chmod which gracefully handles several common error conditions. Additional argument TYPEFLAG is the type of file in tar notation. 
Name: fd_chown; Comment: Use fchown if possible, fchownat otherwise. 
Name: fd_stat; Comment: Use fstat if possible, fstatat otherwise. 
Name: set_mode; Comment: None thus if MODE_MASK is zero, do nothing. If FD is nonnegative, it is a file descriptor for the file. CURRENT_MODE and CURRENT_MODE_MASK specify information known about the file's current mode, using the style of struct delayed_set_stat. TYPEFLAG specifies the type of the file. ATFLAG specifies the flag to use when statting the file. 
Name: check_time; Comment: Check time after successfully setting FILE_NAME's time stamp to T. 
Name: set_stat; Comment: Restore stat attributes (owner, group, mode and times) for FILE_NAME, using information given in *ST. If FD is nonnegative, it is a file descriptor for the file. CURRENT_MODE and CURRENT_MODE_MASK specify information known about the file's current mode, using the style of struct delayed_set_stat. TYPEFLAG specifies the type of the file. If INTERDIR, this is an intermediate directory. ATFLAG specifies the flag to use when statting the file. 
Name: find_direct_ancestor; Comment: Find the direct ancestor of FILE_NAME in the delayed_set_stat list. 
Name: mark_after_links; Comment: For each entry H in the leading prefix of entries in HEAD that do not have after_links marked, mark H and fill in its dev and ino members. Assume HEAD && ! HEAD->after_links. 
Name: delay_set_stat; Comment: Remember to restore stat attributes (owner, group, mode and times) for the directory FILE_NAME, using information given in *ST, once we stop extracting files into that directory. If ST is null, merely create a placeholder node for an intermediate directory that was created by make_directories. NOTICE: this works only if the archive has usual member order, i.e. directory, then the files in that directory. Incremental archive have somewhat reversed order: first go subdirectories, then all other members. To help cope with this case the variable delay_directory_restore_option is set by prepare_to_extract. If an archive was explicitely created so that its member order is reversed, some directory timestamps can be restored incorrectly, e.g.: tar --no-recursion -cf archive dir dir/file1 foo dir/file2 
Name: repair_delayed_set_stat; Comment: Update the delayed_set_stat info for an intermediate directory created within the file name of DIR. The intermediate directory turned out to be the same as this directory, e.g. due to ".." or symbolic links. *DIR_STAT_INFO is the status of the directory. 
Name: make_directories; Comment: After a file/link/directory creation has failed, see if it's because some required directory was not present, and if so, create all required directories. Return zero if all the required directories were created, nonzero (issuing a diagnostic) otherwise. Set *INTERDIR_MADE if at least one directory was created. 
Name: file_newer_p; Comment: Return true if FILE_NAME (with status *STP, if STP) is not a directory, and has a time stamp newer than (or equal to) that of TAR_STAT. 
Name: maybe_recoverable; Comment: Attempt repairing what went wrong with the extraction. Delete an already existing file or create missing intermediate directories. Return RECOVER_OK if we somewhat increased our chances at a successful extraction, RECOVER_NO if there are no chances, and RECOVER_SKIP if the caller should skip extraction of that member. The value of errno is properly restored on returning RECOVER_NO. If REGULAR, the caller was trying to extract onto a regular file. Set *INTERDIR_MADE if an intermediate directory is made as part of the recovery process. 
Name: set_xattr; Comment: Restore stat extended attributes (xattr) for FILE_NAME, using information given in *ST. Restore before extraction because they may affect file layout (e.g. on Lustre distributed parallel filesystem - setting info about how many servers is this file striped over, stripe size, mirror copies, etc. in advance dramatically improves the following performance of reading and writing a file). If not restoring permissions, invert the INVERT_PERMISSIONS bits from the file's current permissions. TYPEFLAG specifies the type of the file. Returns non-zero when error occurs (while un-available xattrs is not an error, rather no-op). Non-zero FILE_CREATED indicates set_xattr has created the file. 
Name: apply_nonancestor_delayed_set_stat; Comment: Fix the statuses of all directories whose statuses need fixing, and which are not ancestors of FILE_NAME. If AFTER_LINKS is nonzero, do this for all such directories; otherwise, stop at the first directory that is marked to be fixed up only after delayed links are applied. 
Name: extract_dir; Comment: Extractor functions for various member types 
Name: find_delayed_link_source; Comment: Find a delayed_link structure corresponding to the source NAME. Such a structure exists in the delayed link list only if the link placeholder file has been created. Therefore, try to stat the NAME first. If it doesn't exist, there is no matching entry in the list. Otherwise, look for the entry in list which has the matching dev and ino numbers. This approach avoids scanning the singly-linked list in obvious cases and does not rely on comparing file names, which may differ for various reasons (e.g. relative vs. absolute file names). 
Name: create_placeholder_file; Comment: Create a placeholder file with name FILE_NAME, which will be replaced after other extraction is done by a symbolic link if IS_SYMLINK is true, and by a hard link otherwise. Set *INTERDIR_MADE if an intermediate directory is made in the process. Install the created struct delayed_link after PREV, unless the latter is NULL, in which case insert it at the head of the delayed link list. 
Name: prepare_to_extract; Comment: Prepare to extract a file. Find extractor function. Return true to proceed with the extraction, false to skip the current member. 
Name: extract_archive; Comment: Extract a file from the archive. 
Name: apply_delayed_links; Comment: Extract the links whose final extraction were delayed. 
Name: extract_finish; Comment: Finish the extraction of an archive. 
Name: dumpdir_locate; Comment: Locate NAME in the dumpdir array DUMP. Return pointer to the slot in DUMP->contents, or NULL if not found 
Name: dumpdir_size; Comment: Return size in bytes of the dumpdir array P 
Name: hash_directory_canonical_name; Comment: Calculate the hash of a directory. 
Name: compare_directory_canonical_names; Comment: Compare two directories for equality of their names. 
Name: compare_directory_meta; Comment: Compare two directories for equality of their device and inode numbers. 
Name: make_directory; Comment: Make a directory entry for given relative NAME and canonical name CANAME. The latter is "stolen", i.e. the returned directory contains pointer to it. 
Name: note_directory; Comment: Create and link a new directory entry for directory NAME, having a device number DEV and an inode number INO, with NFS indicating whether it is an NFS device and FOUND indicating whether we have found that the directory exists. 
Name: find_directory; Comment: Return a directory entry for a given file NAME, or zero if none found. 
Name: remove_directory; Comment: Remove directory entry for the given CANAME 
Name: rebase_directory; Comment: If first OLD_PREFIX_LEN bytes of DIR->NAME name match OLD_PREFIX, replace them with NEW_PREFIX. 
Name: find_directory_meta; Comment: Return a directory entry for a given combination of device and inode numbers, or zero if none found. 
Name: makedumpdir; Comment: Compare dumpdir array from DIRECTORY with directory listing DIR and build a new dumpdir template. DIR must be returned by a previous call to savedir(). File names in DIRECTORY->dump->contents must be sorted alphabetically. DIRECTORY->dump is replaced with the created template. Each entry is prefixed with ' ' if it was present in DUMP and with 'Y' otherwise. 
Name: maketagdumpdir; Comment: Create a dumpdir containing only one entry: that for the tagfile. 
Name: scan_directory; Comment: Recursively scan the directory identified by ST. 
Name: directory_contents; Comment: Return pointer to the contents of the directory DIR 
Name: safe_directory_contents; Comment: A "safe" version of directory_contents, which never returns NULL. 
Name: read_incr_db_01; Comment: Read incremental snapshot formats 0 and 1 
Name: read_obstack; Comment: Read a nul-terminated string from FP and store it in STK. Store the number of bytes read (including nul terminator) in PCOUNT. Return the last character read or EOF on end of file. 
Name: read_num; Comment: Read from file FP a null-terminated string and convert it to an integer. FIELDNAME is the intended use of the integer, useful for diagnostics. MIN_VAL and MAX_VAL are its minimum and maximum permissible values; MIN_VAL must be nonpositive and MAX_VAL positive. Store into *PVAL the resulting value, converted to intmax_t. Throw a fatal error if the string cannot be converted or if the converted value is out of range. Return true if successful, false if end of file. 
Name: read_timespec; Comment: Read from FP two NUL-terminated strings representing a struct timespec. Return the resulting value in PVAL. Throw a fatal error if the string cannot be converted. 
Name: read_incr_db_2; Comment: Read incremental snapshot format 2 
Name: read_directory_file; Comment: Read incremental snapshot file (directory file). If the file has older incremental version, make sure that it is processed correctly and that tar will use the most conservative backup method among possible alternatives (i.e. prefer ALL_CHILDREN over CHANGED_CHILDREN, etc.) This ensures that the snapshots are updated to the recent version without any loss of data. 
Name: write_directory_file_entry; Comment: Output incremental data for the directory ENTRY to the file DATA. Return nonzero if successful, preserving errno on write failure. 
Name: get_gnu_dumpdir; Comment: Restoration of incremental dumps. 
Name: is_dumpdir; Comment: Return T if STAT_INFO represents a dumpdir archive member. Note: can invalidate current_header. It happens if flush_archive() gets called within get_gnu_dumpdir() 
Name: try_purge_directory; Comment: Examine the directories under directory_name and delete any files that were not there at the time of the back-up. 
Name: read_and; Comment: Main loop for reading an archive. 
Name: list_archive; Comment: Print a header block, based on tar options. 
Name: tar_checksum; Comment: The standard BSD tar sources create the checksum by adding up the bytes in the header as type char. I think the type char was unsigned on the PDP-11, but it's signed on the Next and Sun. It looks like the sources to BSD tar were never changed to compute the checksum correctly, so both the Sun and Next add the bytes of the header as signed chars. This doesn't cause a problem until you get a file with a name containing characters with the high bit set. So tar_checksum computes two checksums -- signed and unsigned. 
Name: read_header; Comment: Read a block that's supposed to be a header block. Return its address in *RETURN_BLOCK, and if it is good, the file's size and names (file name, link name) in *INFO. Return one of enum read_header describing the status of the operation. The MODE parameter instructs read_header what to do with special header blocks, i.e.: extended POSIX, GNU long name or long link, etc.: read_header_auto process them automatically, read_header_x_raw when a special header is read, return HEADER_SUCCESS_EXTENDED without actually ___ processing the header, read_header_x_global when a POSIX global header is read, decode it and return HEADER_SUCCESS_EXTENDED. You must always set_next_block_after(*return_block) to skip past the header which this routine reads. 
Name: decode_header; Comment: Decode things from a file HEADER block into STAT_INFO, also setting *FORMAT_POINTER depending on the header block format. If DO_USER_GROUP, decode the user/group information (this is useful for extraction, but waste time when merely listing). read_header() has already decoded the checksum and length, so we don't. This routine should *not* be called twice for the same block, since the two calls might use different DO_USER_GROUP values and thus might end up with different uid/gid for the two calls. If anybody wants the uid/gid they should decode it first, and other callers should decode it without uid/gid before calling a routine, e.g. print_header, that assumes decoded data. 
Name: mode_from_header; Comment: Convert P to the file mode, as understood by tar. Set *HBITS if there are any unrecognized bits. 
Name: tartime; Comment: Return a printable representation of T. The result points to static storage that can be reused in the next call to this function, to ctime, or to asctime. If FULL_TIME, then output the time stamp to its full resolution; otherwise, just output it to 1-minute resolution. 
Name: print_for_mkdir; Comment: Print a similar line when we make a directory automatically. 
Name: skip_file; Comment: Skip over SIZE bytes of data in blocks in the archive. 
Name: skip_member; Comment: Skip the current member in the archive. NOTE: Current header must be decoded before calling this function. 
Name: assign_string; Comment: Assign STRING to a copy of VALUE if not zero, or to zero. If STRING was nonzero, it is freed first. 
Name: quote_copy_string; Comment: Allocate a copy of the string quoted as in C, and returns that. If the string does not have to be quoted, it returns a null pointer. The allocated copy should normally be freed with free() after the caller is done with it. This is used in one context only: generating the directory file in incremental dumps. The quoted string is not intended for human consumption; it is intended only for unquote_string. The quoting is locale-independent, so that users needn't worry about locale when reading directory files. This means that we can't use quotearg, as quotearg is locale-dependent and is meant for human consumption. 
Name: unquote_string; Comment: Takes a quoted C string (like those produced by quote_copy_string) and turns it back into the un-quoted original. This is done in place. Returns 0 only if the string was not properly quoted, but completes the unquoting anyway. This is used for reading the saved directory file in incremental dumps. It is used for decoding old 'N' records (demangling names). But also, it is used for decoding file arguments, would they come from the shell or a -T file, and for decoding the --exclude argument. 
Name: zap_slashes; Comment: Zap trailing slashes. 
Name: normalize_filename_x; Comment: Normalize FILE_NAME by removing redundant slashes and "." components, including redundant trailing slashes. Leave ".." alone, as it may be significant in the presence of symlinks and on platforms where "/.." != "/". Destructive version: modifies its argument. 
Name: normalize_filename; Comment: Normalize NAME by removing redundant slashes and "." components, including redundant trailing slashes. Return a normalized newly-allocated copy. 
Name: code_ns_fraction; Comment: Output fraction and trailing digits appropriate for a nanoseconds count equal to NS, but don't output unnecessary '.' or trailing zeros. 
Name: must_be_dot_or_slash; Comment: Return 1 if FILE_NAME is obviously "." or "/". 
Name: safer_rmdir; Comment: None otherwise call rmdir. 
Name: remove_any_file; Comment: Remove FILE_NAME, returning 1 on success. If FILE_NAME is a directory, then if OPTION is RECURSIVE_REMOVE_OPTION is set remove FILE_NAME recursively; otherwise, remove it only if it is empty. If FILE_NAME is a directory that cannot be removed (e.g., because it is nonempty) and if OPTION is WANT_DIRECTORY_REMOVE_OPTION, then return -1. Return 0 on error, with errno set; if FILE_NAME is obviously the working directory return zero with errno set to zero. 
Name: maybe_backup_file; Comment: Check if FILE_NAME already exists and make a backup of it right now. Return success (nonzero) only if the backup is either unneeded, or successful. For now, directories are considered to never need backup. If THIS_IS_THE_ARCHIVE is nonzero, this is the archive and so, we do not have to backup block or character devices, nor remote entities. 
Name: undo_last_backup; Comment: Try to restore the recently backed up file to its original name. This is usually only needed after a failed extraction. 
Name: deref_stat; Comment: Apply either stat or lstat to (NAME, BUF), depending on the presence of the --dereference option. NAME is relative to the most-recent argument to chdir_do. 
Name: blocking_read; Comment: Read from FD into the buffer BUF with COUNT bytes. Attempt to fill BUF. Wait until input is available; this matters because files are opened O_NONBLOCK for security reasons, and on some file systems this can cause read to fail with errno == EAGAIN. Return the actual number of bytes read, zero for EOF, or SAFE_READ_ERROR upon error. 
Name: blocking_write; Comment: Write to FD from the buffer BUF with COUNT bytes. Do a full write. Wait until an output buffer is available; this matters because files are opened O_NONBLOCK for security reasons, and on some file systems this can cause write to fail with errno == EAGAIN. Return the actual number of bytes written, setting errno if that is less than COUNT. 
Name: set_file_atime; Comment: Set FD's (i.e., assuming the working directory is PARENTFD, FILE's) access time to ATIME. 
Name: chdir_arg; Comment: DIR is the operand of a -C option; add it to vector of chdir targets, and return the index of its location. 
Name: chdir_do; Comment: Change to directory I, in a virtual way. This does not actually invoke chdir; it merely sets chdir_fd to an int suitable as the first argument for openat, etc. If I is 0, change to the initial working directory; otherwise, I must be a value returned by chdir_arg. 
Name: tar_getcdpath; Comment: Return the absolute path that represents the working directory referenced by IDX. If wd is empty, then there were no -C options given, and chdir_args() has never been called, so we simply return the process's actual cwd. (Note that in this case IDX is ignored, since it should always be 0.) 
Name: xfork; Comment: Fork, aborting if unsuccessful. 
Name: xpipe; Comment: Create a pipe, aborting if unsuccessful. 
Name: page_aligned_alloc; Comment: Return the address of a page-aligned buffer of at least SIZE bytes. The caller should free *PTR when done with the buffer. 
Name: tar_savedir; Comment: Return the filenames in directory NAME, relative to the chdir_fd. If the directory does not exist, report error if MUST_EXIST is true. Return NULL on errors. 
Name: uid_to_uname; Comment: Given UID, find the corresponding UNAME. 
Name: gid_to_gname; Comment: Given GID, find the corresponding GNAME. 
Name: uname_to_uid; Comment: Given UNAME, set the corresponding UID and return 1, or else, return 0. 
Name: gname_to_gid; Comment: Given GNAME, set the corresponding GID and return 1, or else, return 0. 
Name: unconsumed_option_push; Comment: Push an option to the list 
Name: unconsumed_option_free; Comment: Clear the unconsumed option list 
Name: unconsumed_option_report; Comment: Report any options that have not been consumed 
Name: name_add_name; Comment: Add to name_array the file NAME with fnmatch options MATFLAGS 
Name: name_add_dir; Comment: Add to name_array a chdir request for the directory NAME 
Name: name_init; Comment: Set up to gather file names for tar. They can either come from a file or were saved from decoding arguments. 
Name: file_list_name; Comment: Return the name of the file from which the file names and options are being read. 
Name: chopslash; Comment: Chop trailing slashes. 
Name: read_name_from_file; Comment: Read from FP a sequence of characters up to TERM and put them into STK. 
Name: name_next_elt; Comment: Get the next NELT_NAME element from name_array. Result is in static storage and can't be relied upon across two calls. If CHANGE_DIRS is true, treat any entries of type NELT_CHDIR as the request to change to the given directory. 
Name: name_gather; Comment: Gather names in a list for scanning. Could hash them later if we really care. If the names are already sorted to match the archive, we just read them one by one. name_gather reads the first one, and it is called by name_match as appropriate to read the next ones. At EOF, the last name read is just left in the buffer. This option lets users of small machines extract an arbitrary number of files by doing "tar t" and editing down the list of files. 
Name: addname; Comment: Add a name to the namelist. 
Name: namelist_match; Comment: Find a match for FILE_NAME (whose string length is LENGTH) in the name list. 
Name: name_match; Comment: Return true if and only if name FILE_NAME (from an archive) matches any name from the namelist. 
Name: all_names_found; Comment: Returns true if all names from the namelist were processed. P is the stat_info of the most recently processed entry. The decision is postponed until the next entry is read if: 1) P ended with a slash (i.e. it was a directory) 2) P matches any entry from the namelist *and* represents a subdirectory or a file lying under this entry (in the terms of directory structure). This is necessary to handle contents of directories. 
Name: names_notfound; Comment: Print the names of things in the namelist that were not matched. 
Name: merge_sort_sll; Comment: Sort *singly* linked LIST of names, of given LENGTH, using COMPARE to order names. Return the sorted list. Note that after calling this function, the 'prev' links in list elements are messed up. Apart from the type 'struct name' and the definition of SUCCESSOR, this is a generic list-sorting function, but it's too painful to make it both generic and portable in C. 
Name: merge_sort; Comment: Sort doubly linked LIST of names, of given LENGTH, using COMPARE to order names. Return the sorted list. 
Name: compare_names_found; Comment: A comparison function for sorting names. Put found names last; break ties by string comparison. 
Name: compare_names; Comment: Simple comparison by names. 
Name: add_hierarchy_to_namelist; Comment: Add all the dirs under ST to the namelist NAME, descending the directory hierarchy recursively. 
Name: name_hash; Comment: Auxiliary functions for hashed table of struct name's. 
Name: name_compare; Comment: Compare two directories for equality of their names. 
Name: rebase_child_list; Comment: Rebase 'name' member of CHILD and all its siblings to the new PARENT. 
Name: collect_and_sort_names; Comment: Collect all the names from argv[] (or whatever), expand them into a directory tree, and sort them. This gets only subdirectories, not all files. 
Name: name_scan; Comment: This is like name_match, except that 1. It returns a pointer to the name it matched, and doesn't set FOUND in structure. The caller will have to do that if it wants to. 2. If the namelist is empty, it returns null, unlike name_match, which returns TRUE. 
Name: make_file_name; Comment: Yield a newly allocated file name consisting of DIR_NAME concatenated to NAME, with an intervening slash if DIR_NAME does not already end in one. 
Name: stripped_prefix_len; Comment: Return the size of the prefix of FILE_NAME that is removed after stripping NUM leading file name components. NUM must be positive. 
Name: contains_dot_dot; Comment: Return nonzero if NAME contains ".." as a file name component. 
Name: dump_zeros; Comment: Dump zeros to file->fd until offset is reached. It is used instead of lseek if the output file is not seekable 
Name: zero_block_p; Comment: Takes a blockful of data and basically cruises through it to see if it's made *entirely* of zeros, returning a 0 the instant it finds something that is a nonzero, i.e., useful data. 
Name: sparse_scan_file_raw; Comment: Scan the sparse file byte-by-byte and create its map. 
Name: sparse_scan_file_seek; Comment: Try to engage SEEK_HOLE/SEEK_DATA feature. 
Name: sparse_dump_file; Comment: Interface functions 
Name: oldgnu_add_sparse; Comment: Add a sparse item to the sparse file and its obstack 
Name: oldgnu_get_sparse_info; Comment: Convert old GNU format sparse data to internal representation 
Name: star_sparse_member_p; Comment: Star 
Name: star_get_sparse_info; Comment: Convert STAR format sparse data to internal representation 
Name: pax_sparse_member_p; Comment: GNU PAX sparse file format. There are several versions: 0.0 The initial version of sparse format used by tar 1.14-1.15.1. The sparse file map is stored in x header: GNU.sparse.size Real size of the stored file GNU.sparse.numblocks Number of blocks in the sparse map repeat numblocks time GNU.sparse.offset Offset of the next data block GNU.sparse.numbytes Size of the next data block end repeat This has been reported as conflicting with the POSIX specs. The reason is that offsets and sizes of non-zero data blocks were stored in multiple instances of GNU.sparse.offset/GNU.sparse.numbytes variables, whereas POSIX requires the latest occurrence of the variable to override all previous occurrences. To avoid this incompatibility two following versions were introduced. 0.1 Used by tar 1.15.2 -- 1.15.91 (alpha releases). The sparse file map is stored in x header: GNU.sparse.size Real size of the stored file GNU.sparse.numblocks Number of blocks in the sparse map GNU.sparse.map Map of non-null data chunks. A string consisting of comma-separated values "offset,size[,offset,size]..." The resulting GNU.sparse.map string can be *very* long. While POSIX does not impose any limit on the length of a x header variable, this can confuse some tars. 1.0 Starting from this version, the exact sparse format version is specified explicitely in the header using the following variables: GNU.sparse.major Major version GNU.sparse.minor Minor version X header keeps the following variables: GNU.sparse.name Real file name of the sparse file GNU.sparse.realsize Real size of the stored file (corresponds to the old GNU.sparse.size variable) The name field of the ustar header is constructed using the pattern "%d/GNUSparseFile.%p/%f". The sparse map itself is stored in the file data block, preceding the actual file data. It consists of a series of octal numbers of arbitrary length, delimited by newlines. The map is padded with nulls to the nearest block boundary. The first number gives the number of entries in the map. Following are map entries, each one consisting of two numbers giving the offset and size of the data block it describes. The format is designed in such a way that non-posix aware tars and tars not supporting GNU.sparse.* keywords will extract each sparse file in its condensed form with the file map attached and will place it into a separate directory. Then, using a simple program it would be possible to expand the file to its original form even without GNU tar. Bu default, v.1.0 archives are created. To use other formats, --sparse-version option is provided. Additionally, v.0.0 can be obtained by deleting GNU.sparse.map from 0.1 format: --sparse-version 0.1 --pax-option delete=GNU.sparse.map 
Name: pax_start_header; Comment: Start a header that uses the effective (shrunken) file size. 
Name: sys_compare_uid; Comment: stat() in djgpp's C library gives a constant number of 42 as the uid and gid of a file. So, comparing an FTP'ed archive just after unpack would fail on MSDOS. 
Name: sys_child_open_for_compress; Comment: Set ARCHIVE for writing, then compressing an archive. 
Name: sys_child_open_for_uncompress; Comment: Set ARCHIVE for uncompressing, then reading an archive. 
Name: sys_get_archive_stat; Comment: stat block for archive file 
Name: sys_save_archive_dev_ino; Comment: Save archive file inode and device numbers 
Name: sys_detect_dev_null_output; Comment: Detect if outputting to "/dev/null". 
Name: is_regular_file; Comment: Return nonzero if NAME is the name of a regular file, or if the file does not exist (so it would be created as a regular file). 
Name: xdup2; Comment: Duplicate file descriptor FROM into becoming INTO. INTO is closed first and has to be the next available slot. 
Name: wait_for_grandchild; Comment: Propagate any failure of the grandchild back to the parent. 
Name: request_stdin; Comment: Doesn't return if stdin already requested. 
Name: confirm; Comment: Returns true if and only if the user typed an affirmative response. 
Name: optloc_save; Comment: Save location of an option of class ID. Return location of a previous occurrence of an option of that class, or NULL. 
Name: optloc_lookup; Comment: Return location of a recent option of class ID 
Name: option_set_in_cl; Comment: Return true if the latest occurrence of option ID was in the command line 
Name: optloc_eq; Comment: Compare two option locations 
Name: find_argp_option_key; Comment: Parse the options for tar. 
Name: tar_print_progname; Comment: The error() function from glibc correctly prefixes each message it prints with program_name as set by set_program_name. However, its replacement from gnulib, which is linked in on systems where this function is not available, prints the name returned by getprogname() instead. Due to this messages output by tar subprocess (which sets its program name to 'tar (child)') become indiscernible from those printed by the main process. In particular, this breaks the remfiles01.at and remfiles02.at test cases. To avoid this, on such systems the following helper function is used to print proper program name. Its address is assigned to the error_print_progname variable, which error() then uses instead of printing getprogname() result. 
Name: main; Comment: Main routine for tar. 
Name: tar_stat_close; Comment: Close the stream or file descriptor associated with ST, and remove all traces of it from ST. Return true if successful, false (with a diagnostic) otherwise. 
Name: tar_timespec_cmp; Comment: Same as timespec_cmp, but ignore nanoseconds if current archive format does not provide sufficient resolution. 
Name: set_exit_status; Comment: Set tar exit status to VAL, unless it is already indicating a more serious condition. This relies on the fact that the values of TAREXIT_ constants are ranged by severity. 
Name: run_case_conv; Comment: Run case conversion specified by CASE_CTL on array PTR of SIZE characters. Returns pointer to statically allocated storage. 
Name: append_file; Comment: Catenate file FILE_NAME to the archive without creating a header for it. It had better be a tar file or the archive is screwed. 
Name: update_archive; Comment: Implement the 'r' (add files to end of archive), and 'u' (add files to end of archive if they aren't there, or are more up to date than the version in the archive) commands. 
Name: perms2acl; Comment: convert unix permissions into an ACL ... needed due to "default" ACLs 
Name: fixup_extra_acl_fields; Comment: The POSIX draft allows extra fields after the three main ones. Star uses this to add a fourth field for user/group which is the numeric ID. This function removes such extra fields by overwriting them with the characters that follow. 
Name: xattrs__acls_set; Comment: Set the "system.posix_acl_access/system.posix_acl_default" extended attribute. Called only when acls_option > 0. 
Name: xattrs_acls_cleanup; Comment: Cleanup textual representation of the ACL in VAL by eliminating tab characters and comments 
Name: xattrs__acls_get_d; Comment: "system.posix_acl_default" 
Name: xattrs_xattrs_get; Comment: get xattrs from file given by FILE_NAME or FD (when non-zero) xattrs are checked against the user supplied include/exclude mask if no mask is given this includes all the user.*, security.*, system.*, etc. available domains 
Name: xattrs_selinux_get; Comment: lgetfileconat is called against FILE_NAME iff the FD parameter is set to zero, otherwise the fgetfileconat is used against correct file descriptor 
Name: xattrs_masked_out; Comment: Check whether the xattr with keyword KW should be discarded from list of attributes that are going to be archived/excluded (set ARCHIVING=true for archiving, false for excluding) 
Name: x_obstack_grow; Comment: Interface functions to obstacks 
Name: xheader_format_name; Comment: string Includes: Replaced By: %d The directory name of the file, equivalent to the result of the dirname utility on the translated file name. %f The filename of the file, equivalent to the result of the basename utility on the translated file name. %p The process ID of the pax process. %n The value of the 3rd argument. %% A '%' character. 
Name: xheader_forbid_global; Comment: Forbid modifications of the global extended header 
Name: xattr_decode_keyword; Comment: This is reversal function for xattr_encode_keyword. See comment for xattr_encode_keyword() for more info. 
Name: decode_record; Comment: Decode a single extended header record, advancing *PTR to the next record. Return true on success, false otherwise. 
Name: xattr_encode_keyword; Comment: xattr_encode_keyword() substitutes '=' ~~> '%3D' and '%' ~~> '%25' in extended attribute keywords. This is needed because the '=' character has special purpose in extended attribute header - it splits keyword and value part of header. If there was the '=' occurrence allowed inside keyword, there would be no unambiguous way how to decode this extended attribute. (http:lists.gnu.orgarchivehtmlbug-tar2012-10msg00017.html) 
Name: xheader_string_begin; Comment: Buildable strings 
Name: out_of_range_header; Comment: Implementations 
Name: volume_offset_coder; Comment: FIXME: Merge with volume_size_coder 
Name: argcv_free; Comment: frees all elements of an argv array argc is the number of elements argv is the array 
Name: argcv_string; Comment: Take a argv an make string separated by ' '. 
Name: main; Comment: Some filesystems can slightly offset the timestamps of newly created files. To compensate for it, tar testsuite waits at least 1 second before creating next level of incremental backups. However, NFS mounts can offset the timestamps by bigger amounts. This program returns with success (0) if a newly created file is assigned mtime matching the system time to the nearest second. 
Name: generate_simple_file; Comment: Generate Mode: usual files 
Name: read_name_from_file; Comment: A simplified version of the same function from tar 
Name: mkhole; Comment: Generate Mode: sparse files 
Name: print_time; Comment: Status Mode 
Name: exec_checkpoint; Comment: Exec Mode 
Name: args_cmp; Comment: Arguments tree comparison function. 
Name: args_find; Comment: Find a flag in the arguments tree. 
Name: args_parse; Comment: Parse an argv and argc into a new argument set. 
Name: args_free; Comment: Free an arguments set. 
Name: printflike; Comment: Add to string. 
Name: args_print_add_value; Comment: Add value to string. 
Name: args_print_add_argument; Comment: Add argument to string. 
Name: args_print; Comment: Print a set of arguments. 
Name: args_escape; Comment: Escape an argument. 
Name: args_has; Comment: Return if an argument is present. 
Name: args_set; Comment: Set argument value in the arguments tree. 
Name: args_get; Comment: Get argument value. Will be NULL if it isn't present. 
Name: args_first; Comment: Get first argument. 
Name: args_next; Comment: Get next argument. 
Name: args_first_value; Comment: Get first value in argument. 
Name: args_next_value; Comment: Get next value in argument. 
Name: args_strtonum; Comment: Convert an argument value to a number. 
Name: args_percentage; Comment: Convert an argument to a number which may be a percentage. 
Name: args_string_percentage; Comment: Convert a string to a number which may be a percentage. 
Name: attributes_tostring; Comment: Copyright (c) 2009 Joshua Elsasser <josh@elsasser.org> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: client_get_lock; Comment: Get server create lock. If already held then server start is happening in another client, so block until the lock is released and return -2 to retry. Return -1 on failure to continue and start the server anyway. 
Name: client_connect; Comment: Connect client to server. 
Name: client_exit_message; Comment: Get exit string from reason number. 
Name: client_exit; Comment: Exit if all streams flushed. 
Name: client_main; Comment: Client main loop. 
Name: client_send_identify; Comment: Send identify messages to server. 
Name: client_exec; Comment: Run command in shell; used for -c. 
Name: client_signal; Comment: Callback to handle signals in the client. 
Name: client_file_check_cb; Comment: Callback for file write error or close. 
Name: client_dispatch; Comment: Callback for client read events. 
Name: client_dispatch_exit_message; Comment: Process an exit message. 
Name: client_dispatch_wait; Comment: Dispatch imsgs when in wait state (before MSG_READY). 
Name: client_dispatch_attached; Comment: Dispatch imsgs in attached state (after MSG_READY). 
Name: cmd_find_inside_pane; Comment: Find pane containing client if any. 
Name: cmd_find_client_better; Comment: Is this client better? 
Name: cmd_find_best_client; Comment: Find best client for session. 
Name: cmd_find_session_better; Comment: Is this session better? 
Name: cmd_find_best_session; Comment: Find best session from a list, or all if list is NULL. 
Name: cmd_find_best_session_with_window; Comment: Find best session and winlink for window. 
Name: cmd_find_best_winlink_with_window; Comment: Find the best winlink for a window (the current if it contains the window, otherwise the first). 
Name: cmd_find_map_table; Comment: Maps string in table. 
Name: cmd_find_get_session; Comment: Find session from string. Fills in s. 
Name: cmd_find_get_window; Comment: Find window from string. Fills in s, wl, w. 
Name: cmd_find_get_window_with_session; Comment: Find window from string, assuming it is in given session. Needs s, fills in wl and w. 
Name: cmd_find_get_pane; Comment: Find pane from string. Fills in s, wl, w, wp. 
Name: cmd_find_get_pane_with_session; Comment: Find pane from string, assuming it is in given session. Needs s, fills in wl and w and wp. 
Name: cmd_find_get_pane_with_window; Comment: Find pane from string, assuming it is in the given window. Needs w, fills in wp. 
Name: cmd_find_clear_state; Comment: Clear state. 
Name: cmd_find_empty_state; Comment: Check if state is empty. 
Name: cmd_find_valid_state; Comment: Check if a state if valid. 
Name: cmd_find_copy_state; Comment: Copy a state. 
Name: cmd_find_log_state; Comment: Log the result. 
Name: cmd_find_from_session; Comment: Find state from a session. 
Name: cmd_find_from_winlink; Comment: Find state from a winlink. 
Name: cmd_find_from_session_window; Comment: Find state from a session and window. 
Name: cmd_find_from_window; Comment: Find state from a window. 
Name: cmd_find_from_winlink_pane; Comment: Find state from a winlink and pane. 
Name: cmd_find_from_pane; Comment: Find state from a pane. 
Name: cmd_find_from_nothing; Comment: Find state from nothing. 
Name: cmd_find_from_mouse; Comment: Find state from mouse. 
Name: cmd_find_from_client; Comment: Find state from client. 
Name: cmd_find_target; Comment: Split target into pieces and resolve for the given type. Fills in the given state. Returns 0 on success or -1 on error. 
Name: cmd_find_current_client; Comment: Find the current client. 
Name: cmd_find_client; Comment: Find the target client or report an error and return NULL. 
Name: cmdq_name; Comment: Get command queue name. 
Name: cmdq_get; Comment: Get command queue from client. 
Name: cmdq_new; Comment: Create a queue. 
Name: cmdq_free; Comment: Free a queue. 
Name: cmdq_get_name; Comment: Get item name. 
Name: cmdq_get_client; Comment: Get item client. 
Name: cmdq_get_target_client; Comment: Get item target client. 
Name: cmdq_get_state; Comment: Get item state. 
Name: cmdq_get_target; Comment: Get item target. 
Name: cmdq_get_source; Comment: Get item source. 
Name: cmdq_get_event; Comment: Get state event. 
Name: cmdq_get_current; Comment: Get state current target. 
Name: cmdq_get_flags; Comment: Get state flags. 
Name: cmdq_new_state; Comment: Create a new state. 
Name: cmdq_link_state; Comment: Add a reference to a state. 
Name: cmdq_copy_state; Comment: Make a copy of a state. 
Name: cmdq_free_state; Comment: Free a state. 
Name: cmdq_add_format; Comment: Add a format to command queue. 
Name: cmdq_merge_formats; Comment: Merge formats from item. 
Name: cmdq_append; Comment: Append an item. 
Name: cmdq_insert_after; Comment: Insert an item. 
Name: cmdq_insert_hook; Comment: Insert a hook. 
Name: cmdq_continue; Comment: Continue processing command queue. 
Name: cmdq_remove; Comment: Remove an item. 
Name: cmdq_remove_group; Comment: Remove all subsequent items that match this item's group. 
Name: cmdq_get_command; Comment: Get a command for the command queue. 
Name: cmdq_find_flag; Comment: Fill in flag for a command. 
Name: cmdq_add_message; Comment: Add message with command. 
Name: cmdq_fire_command; Comment: Fire command on command queue. 
Name: cmdq_get_callback1; Comment: Get a callback for the command queue. 
Name: cmdq_error_callback; Comment: Generic error callback. 
Name: cmdq_get_error; Comment: Get an error callback for the command queue. 
Name: cmdq_fire_callback; Comment: Fire callback on callback queue. 
Name: cmdq_next; Comment: Process next item on command queue. 
Name: cmdq_running; Comment: Get running item if any. 
Name: cmdq_guard; Comment: Print a guard line. 
Name: cmdq_print; Comment: Show message from command. 
Name: cmdq_error; Comment: Show error from command. 
Name: printflike; Comment: Log an argument vector. 
Name: cmd_prepend_argv; Comment: Prepend to an argument vector. 
Name: cmd_append_argv; Comment: Append to an argument vector. 
Name: cmd_pack_argv; Comment: Pack an argument vector up into a buffer. 
Name: cmd_unpack_argv; Comment: Unpack an argument vector from a packed buffer. 
Name: cmd_copy_argv; Comment: Copy an argument vector, ensuring it is terminated by NULL. 
Name: cmd_free_argv; Comment: Free an argument vector. 
Name: cmd_stringify_argv; Comment: Convert argument vector to a string. 
Name: cmd_get_entry; Comment: Get entry for command. 
Name: cmd_get_args; Comment: Get arguments for command. 
Name: cmd_get_group; Comment: Get group for command. 
Name: cmd_get_source; Comment: Get file and line for command. 
Name: cmd_get_alias; Comment: Look for an alias for a command. 
Name: cmd_find; Comment: Look up a command entry by name. 
Name: cmd_parse; Comment: Parse a single command from an argument vector. 
Name: cmd_free; Comment: Free a command. 
Name: cmd_print; Comment: Get a command as a string. 
Name: cmd_list_new; Comment: Create a new command list. 
Name: cmd_list_append; Comment: Append a command to a command list. 
Name: cmd_list_move; Comment: Move all commands from one command list to another 
Name: cmd_list_free; Comment: Free a command list. 
Name: cmd_list_print; Comment: Get a command list as a string. 
Name: cmd_list_first; Comment: Get first command in list. 
Name: cmd_list_next; Comment: Get next command in list. 
Name: cmd_list_all_have; Comment: Do all of the commands in this command list have this flag? 
Name: cmd_list_any_have; Comment: Do any of the commands in this command list have this flag? 
Name: cmd_mouse_at; Comment: Adjust current mouse position for a pane. 
Name: cmd_mouse_window; Comment: Get current mouse window if any. 
Name: cmd_mouse_pane; Comment: Get current mouse pane if any. 
Name: cmd_template_replace; Comment: Replace the first %% or %idx in template by s. 
Name: colour_find_rgb; Comment: Convert an RGB triplet to the xterm(1) 256 colour palette. xterm provides a 6x6x6 colour cube (16 - 231) and 24 greys (232 - 255). We map our RGB colour to the closest in the cube, also work out the closest grey, and use the nearest of the two. Note that the xterm has much lower resolution for darker colours (they are not evenly spread out), so our 6 levels are not evenly spread: 0x0, 0x5f (95), 0x87 (135), 0xaf (175), 0xd7 (215) and 0xff (255). Greys are more evenly spread (8, 18, 28 ... 238). 
Name: colour_join_rgb; Comment: Join RGB into a colour. 
Name: colour_split_rgb; Comment: Split colour into RGB. 
Name: colour_tostring; Comment: Convert colour to a string. 
Name: colour_fromstring; Comment: Convert colour from string. 
Name: colour_256toRGB; Comment: Convert 256 colour to RGB colour. 
Name: colour_256to16; Comment: Convert 256 colour to 16 colour. 
Name: colour_byname; Comment: Get colour by X11 colour name. 
Name: control_notify_pane_mode_changed; Comment: Copyright (c) 2012 Nicholas Marriott <nicholas.marriott@gmail.com> Copyright (c) 2012 George Nachman <tmux@georgester.com> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: control_pane_cmp; Comment: Compare client panes. 
Name: control_sub_cmp; Comment: Compare client subs. 
Name: control_sub_pane_cmp; Comment: Compare client subscription panes. 
Name: control_sub_window_cmp; Comment: Compare client subscription windows. 
Name: control_free_sub; Comment: Free a subscription. 
Name: control_free_block; Comment: Free a block. 
Name: control_get_pane; Comment: Get pane offsets for this client. 
Name: control_add_pane; Comment: Add pane offsets for this client. 
Name: control_discard_pane; Comment: Discard output for a pane. 
Name: control_window_pane; Comment: Get actual pane for this client. 
Name: control_reset_offsets; Comment: Reset control offsets. 
Name: control_pane_offset; Comment: Get offsets for client. 
Name: control_set_pane_on; Comment: Set pane as on. 
Name: control_set_pane_off; Comment: Set pane as off. 
Name: control_continue_pane; Comment: Continue a paused pane. 
Name: control_pause_pane; Comment: Pause a pane. 
Name: control_vwrite; Comment: Write a line. 
Name: control_write; Comment: Write a line. 
Name: control_check_age; Comment: Check age for this pane. 
Name: control_write_output; Comment: Write output from a pane. 
Name: control_error; Comment: Control client error callback. 
Name: control_error_callback; Comment: Control client error callback. 
Name: control_read_callback; Comment: Control client input callback. Read lines and fire commands. 
Name: control_all_done; Comment: Does this control client have outstanding data to write? 
Name: control_flush_all_blocks; Comment: Flush all blocks until output. 
Name: control_append_data; Comment: Append data to buffer. 
Name: control_write_data; Comment: Write buffer. 
Name: control_write_pending; Comment: Write output to client. 
Name: control_write_callback; Comment: Control client write callback. 
Name: control_start; Comment: Initialize for control mode. 
Name: control_discard; Comment: Discard all output for a client. 
Name: control_stop; Comment: Stop control mode. 
Name: control_check_subs_session; Comment: Check session subscription. 
Name: control_check_subs_pane; Comment: Check pane subscription. 
Name: control_check_subs_all_panes; Comment: Check all panes subscription. 
Name: control_check_subs_window; Comment: Check window subscription. 
Name: control_check_subs_all_windows; Comment: Check all windows subscription. 
Name: control_check_subs_timer; Comment: Check subscriptions timer. 
Name: control_add_sub; Comment: Add a subscription. 
Name: control_remove_sub; Comment: Remove a subscription. 
Name: environ_create; Comment: Initialise the environment. 
Name: environ_free; Comment: Free an environment. 
Name: environ_copy; Comment: Copy one environment into another. 
Name: environ_find; Comment: Find an environment variable. 
Name: environ_set; Comment: Set an environment variable. 
Name: environ_clear; Comment: Clear an environment variable. 
Name: environ_put; Comment: Set an environment variable from a NAME=VALUE string. 
Name: environ_unset; Comment: Unset an environment variable. 
Name: environ_update; Comment: Copy variables from a destination into a source environment. 
Name: environ_push; Comment: Push environment into the real environment - use after fork(). 
Name: environ_log; Comment: Log the environment. 
Name: environ_for_session; Comment: Create initial environment for new child. 
Name: file_get_path; Comment: Get path for file, either as given or from working directory. 
Name: file_cmp; Comment: Tree comparison function. 
Name: file_create_with_peer; Comment: Create a file object in the client process - the peer is the server to send messages to. Check callback is fired when the file is finished with so the process can decide if it needs to exit (if it is waiting for files to flush). 
Name: file_create_with_client; Comment: Create a file object in the server, communicating with the given client. 
Name: file_free; Comment: Free a file. 
Name: file_fire_done_cb; Comment: Event to fire the done callback. 
Name: file_fire_done; Comment: Add an event to fire the done callback (used by the server). 
Name: file_fire_read; Comment: Fire the read callback. 
Name: file_can_print; Comment: Can this file be printed to? 
Name: file_print; Comment: Print a message to a file. 
Name: file_vprint; Comment: Print a message to a file. 
Name: file_print_buffer; Comment: Print a buffer to a file. 
Name: file_error; Comment: Report an error to a file. 
Name: file_write; Comment: Write data to a file. 
Name: file_read; Comment: Read a file. 
Name: file_push_cb; Comment: Push event, fired if there is more writing to be done. 
Name: file_push; Comment: Push uwritten data to the client for a file, if it will accept it. 
Name: file_write_left; Comment: Check if any files have data left to write. 
Name: file_write_error_callback; Comment: Client file write error callback. 
Name: file_write_callback; Comment: Client file write callback. 
Name: file_write_open; Comment: Handle a file write open message (client). 
Name: file_write_data; Comment: Handle a file write data message (client). 
Name: file_write_close; Comment: Handle a file write close message (client). 
Name: file_read_error_callback; Comment: Client file read error callback. 
Name: file_read_callback; Comment: Client file read callback. 
Name: file_read_open; Comment: Handle a file read open message (client). 
Name: file_write_ready; Comment: Handle a write ready message (server). 
Name: file_read_data; Comment: Handle read data message (server). 
Name: file_read_done; Comment: Handle a read done message (server). 
Name: format_is_type; Comment: Does this range match this style? 
Name: format_free_range; Comment: Free a range. 
Name: format_update_ranges; Comment: Fix range positions. 
Name: format_draw_put; Comment: Draw a part of the format. 
Name: format_draw_put_list; Comment: Draw list part of format. 
Name: format_draw_none; Comment: Draw format with no list. 
Name: format_draw_left; Comment: Draw format with list on the left. 
Name: format_draw_centre; Comment: Draw format with list in the centre. 
Name: format_draw_right; Comment: Draw format with list on the right. 
Name: format_draw_many; Comment: Draw multiple characters. 
Name: format_draw; Comment: Draw a format to a screen. 
Name: format_width; Comment: Get width, taking #[] into account. 
Name: format_trim_left; Comment: Trim on the left, taking #[] into account. Note, we copy the whole set of unescaped #s, but only add their escaped size to width. This is because theformat_draw function will actually do the escaping when it runs 
Name: format_trim_right; Comment: Trim on the right, taking #[] into account. 
Name: format_job_cmp; Comment: Format job tree comparison function. 
Name: format_entry_cmp; Comment: Format entry tree comparison function. 
Name: printflike; Comment: Log a message if verbose. 
Name: format_copy_state; Comment: Copy expand state. 
Name: format_job_update; Comment: Format job update callback. 
Name: format_job_complete; Comment: Format job complete callback. 
Name: format_job_get; Comment: Find a job. 
Name: format_job_tidy; Comment: Remove old jobs. 
Name: format_tidy_jobs; Comment: Tidy old jobs for all clients. 
Name: format_lost_client; Comment: Remove old jobs for client. 
Name: printflike; Comment: Wrapper for asprintf. 
Name: format_cb_host; Comment: Callback for host. 
Name: format_cb_host_short; Comment: Callback for host_short. 
Name: format_cb_pid; Comment: Callback for pid. 
Name: format_cb_session_attached_list; Comment: Callback for session_attached_list. 
Name: format_cb_session_alerts; Comment: Callback for session_alerts. 
Name: format_cb_session_stack; Comment: Callback for session_stack. 
Name: format_cb_window_stack_index; Comment: Callback for window_stack_index. 
Name: format_cb_window_linked_sessions_list; Comment: Callback for window_linked_sessions_list. 
Name: format_cb_window_active_sessions; Comment: Callback for window_active_sessions. 
Name: format_cb_window_active_sessions_list; Comment: Callback for window_active_sessions_list. 
Name: format_cb_window_active_clients; Comment: Callback for window_active_clients. 
Name: format_cb_window_active_clients_list; Comment: Callback for window_active_clients_list. 
Name: format_cb_window_layout; Comment: Callback for window_layout. 
Name: format_cb_window_visible_layout; Comment: Callback for window_visible_layout. 
Name: format_cb_start_command; Comment: Callback for pane_start_command. 
Name: format_cb_current_command; Comment: Callback for pane_current_command. 
Name: format_cb_current_path; Comment: Callback for pane_current_path. 
Name: format_cb_history_bytes; Comment: Callback for history_bytes. 
Name: format_cb_history_all_bytes; Comment: Callback for history_all_bytes. 
Name: format_cb_pane_tabs; Comment: Callback for pane_tabs. 
Name: format_cb_pane_fg; Comment: Callback for pane_fg. 
Name: format_cb_pane_bg; Comment: Callback for pane_bg. 
Name: format_cb_session_group_list; Comment: Callback for session_group_list. 
Name: format_cb_session_group_attached_list; Comment: Callback for session_group_attached_list. 
Name: format_cb_pane_in_mode; Comment: Callback for pane_in_mode. 
Name: format_cb_pane_at_top; Comment: Callback for pane_at_top. 
Name: format_cb_pane_at_bottom; Comment: Callback for pane_at_bottom. 
Name: format_cb_cursor_character; Comment: Callback for cursor_character. 
Name: format_cb_mouse_word; Comment: Callback for mouse_word. 
Name: format_cb_mouse_line; Comment: Callback for mouse_line. 
Name: format_cb_alternate_on; Comment: Callback for alternate_on. 
Name: format_cb_alternate_saved_x; Comment: Callback for alternate_saved_x. 
Name: format_cb_alternate_saved_y; Comment: Callback for alternate_saved_y. 
Name: format_cb_buffer_name; Comment: Callback for buffer_name. 
Name: format_cb_buffer_sample; Comment: Callback for buffer_sample. 
Name: format_cb_buffer_size; Comment: Callback for buffer_size. 
Name: format_cb_client_cell_height; Comment: Callback for client_cell_height. 
Name: format_cb_client_cell_width; Comment: Callback for client_cell_width. 
Name: format_cb_client_control_mode; Comment: Callback for client_control_mode. 
Name: format_cb_client_discarded; Comment: Callback for client_discarded. 
Name: format_cb_client_flags; Comment: Callback for client_flags. 
Name: format_cb_client_height; Comment: Callback for client_height. 
Name: format_cb_client_key_table; Comment: Callback for client_key_table. 
Name: format_cb_client_last_session; Comment: Callback for client_last_session. 
Name: format_cb_client_name; Comment: Callback for client_name. 
Name: format_cb_client_pid; Comment: Callback for client_pid. 
Name: format_cb_client_prefix; Comment: Callback for client_prefix. 
Name: format_cb_client_readonly; Comment: Callback for client_readonly. 
Name: format_cb_client_session; Comment: Callback for client_session. 
Name: format_cb_client_termfeatures; Comment: Callback for client_termfeatures. 
Name: format_cb_client_termname; Comment: Callback for client_termname. 
Name: format_cb_client_termtype; Comment: Callback for client_termtype. 
Name: format_cb_client_tty; Comment: Callback for client_tty. 
Name: format_cb_client_utf8; Comment: Callback for client_utf8. 
Name: format_cb_client_width; Comment: Callback for client_width. 
Name: format_cb_client_written; Comment: Callback for client_written. 
Name: format_cb_config_files; Comment: Callback for config_files. 
Name: format_cb_cursor_flag; Comment: Callback for cursor_flag. 
Name: format_cb_cursor_x; Comment: Callback for cursor_x. 
Name: format_cb_cursor_y; Comment: Callback for cursor_y. 
Name: format_cb_history_limit; Comment: Callback for history_limit. 
Name: format_cb_history_size; Comment: Callback for history_size. 
Name: format_cb_insert_flag; Comment: Callback for insert_flag. 
Name: format_cb_keypad_cursor_flag; Comment: Callback for keypad_cursor_flag. 
Name: format_cb_keypad_flag; Comment: Callback for keypad_flag. 
Name: format_cb_mouse_all_flag; Comment: Callback for mouse_all_flag. 
Name: format_cb_mouse_any_flag; Comment: Callback for mouse_any_flag. 
Name: format_cb_mouse_button_flag; Comment: Callback for mouse_button_flag. 
Name: format_cb_mouse_pane; Comment: Callback for mouse_pane. 
Name: format_cb_mouse_sgr_flag; Comment: Callback for mouse_sgr_flag. 
Name: format_cb_mouse_standard_flag; Comment: Callback for mouse_standard_flag. 
Name: format_cb_mouse_utf8_flag; Comment: Callback for mouse_utf8_flag. 
Name: format_cb_mouse_x; Comment: Callback for mouse_x. 
Name: format_cb_mouse_y; Comment: Callback for mouse_y. 
Name: format_cb_origin_flag; Comment: Callback for origin_flag. 
Name: format_cb_pane_active; Comment: Callback for pane_active. 
Name: format_cb_pane_at_left; Comment: Callback for pane_at_left. 
Name: format_cb_pane_at_right; Comment: Callback for pane_at_right. 
Name: format_cb_pane_bottom; Comment: Callback for pane_bottom. 
Name: format_cb_pane_dead; Comment: Callback for pane_dead. 
Name: format_cb_pane_dead_status; Comment: Callback for pane_dead_status. 
Name: format_cb_pane_format; Comment: Callback for pane_format. 
Name: format_cb_pane_height; Comment: Callback for pane_height. 
Name: format_cb_pane_id; Comment: Callback for pane_id. 
Name: format_cb_pane_index; Comment: Callback for pane_index. 
Name: format_cb_pane_input_off; Comment: Callback for pane_input_off. 
Name: format_cb_pane_last; Comment: Callback for pane_last. 
Name: format_cb_pane_left; Comment: Callback for pane_left. 
Name: format_cb_pane_marked; Comment: Callback for pane_marked. 
Name: format_cb_pane_marked_set; Comment: Callback for pane_marked_set. 
Name: format_cb_pane_mode; Comment: Callback for pane_mode. 
Name: format_cb_pane_path; Comment: Callback for pane_path. 
Name: format_cb_pane_pid; Comment: Callback for pane_pid. 
Name: format_cb_pane_pipe; Comment: Callback for pane_pipe. 
Name: format_cb_pane_right; Comment: Callback for pane_right. 
Name: format_cb_pane_search_string; Comment: Callback for pane_search_string. 
Name: format_cb_pane_synchronized; Comment: Callback for pane_synchronized. 
Name: format_cb_pane_title; Comment: Callback for pane_title. 
Name: format_cb_pane_top; Comment: Callback for pane_top. 
Name: format_cb_pane_tty; Comment: Callback for pane_tty. 
Name: format_cb_pane_width; Comment: Callback for pane_width. 
Name: format_cb_scroll_region_lower; Comment: Callback for scroll_region_lower. 
Name: format_cb_scroll_region_upper; Comment: Callback for scroll_region_upper. 
Name: format_cb_session_attached; Comment: Callback for session_attached. 
Name: format_cb_session_format; Comment: Callback for session_format. 
Name: format_cb_session_group; Comment: Callback for session_group. 
Name: format_cb_session_group_attached; Comment: Callback for session_group_attached. 
Name: format_cb_session_group_many_attached; Comment: Callback for session_group_many_attached. 
Name: format_cb_session_group_size; Comment: Callback for session_group_size. 
Name: format_cb_session_grouped; Comment: Callback for session_grouped. 
Name: format_cb_session_id; Comment: Callback for session_id. 
Name: format_cb_session_many_attached; Comment: Callback for session_many_attached. 
Name: format_cb_session_marked; Comment: Callback for session_marked. 
Name: format_cb_session_name; Comment: Callback for session_name. 
Name: format_cb_session_path; Comment: Callback for session_path. 
Name: format_cb_session_windows; Comment: Callback for session_windows. 
Name: format_cb_socket_path; Comment: Callback for socket_path. 
Name: format_cb_version; Comment: Callback for version. 
Name: format_cb_active_window_index; Comment: Callback for active_window_index. 
Name: format_cb_last_window_index; Comment: Callback for last_window_index. 
Name: format_cb_window_active; Comment: Callback for window_active. 
Name: format_cb_window_activity_flag; Comment: Callback for window_activity_flag. 
Name: format_cb_window_bell_flag; Comment: Callback for window_bell_flag. 
Name: format_cb_window_bigger; Comment: Callback for window_bigger. 
Name: format_cb_window_cell_height; Comment: Callback for window_cell_height. 
Name: format_cb_window_cell_width; Comment: Callback for window_cell_width. 
Name: format_cb_window_end_flag; Comment: Callback for window_end_flag. 
Name: format_cb_window_flags; Comment: Callback for window_flags. 
Name: format_cb_window_format; Comment: Callback for window_format. 
Name: format_cb_window_height; Comment: Callback for window_height. 
Name: format_cb_window_id; Comment: Callback for window_id. 
Name: format_cb_window_index; Comment: Callback for window_index. 
Name: format_cb_window_last_flag; Comment: Callback for window_last_flag. 
Name: format_cb_window_linked; Comment: Callback for window_linked. 
Name: format_cb_window_linked_sessions; Comment: Callback for window_linked_sessions. 
Name: format_cb_window_marked_flag; Comment: Callback for window_marked_flag. 
Name: format_cb_window_name; Comment: Callback for window_name. 
Name: format_cb_window_offset_x; Comment: Callback for window_offset_x. 
Name: format_cb_window_offset_y; Comment: Callback for window_offset_y. 
Name: format_cb_window_panes; Comment: Callback for window_panes. 
Name: format_cb_window_raw_flags; Comment: Callback for window_raw_flags. 
Name: format_cb_window_silence_flag; Comment: Callback for window_silence_flag. 
Name: format_cb_window_start_flag; Comment: Callback for window_start_flag. 
Name: format_cb_window_width; Comment: Callback for window_width. 
Name: format_cb_window_zoomed_flag; Comment: Callback for window_zoomed_flag. 
Name: format_cb_wrap_flag; Comment: Callback for wrap_flag. 
Name: format_cb_buffer_created; Comment: Callback for buffer_created. 
Name: format_cb_client_activity; Comment: Callback for client_activity. 
Name: format_cb_client_created; Comment: Callback for client_created. 
Name: format_cb_session_activity; Comment: Callback for session_activity. 
Name: format_cb_session_created; Comment: Callback for session_created. 
Name: format_cb_session_last_attached; Comment: Callback for session_last_attached. 
Name: format_cb_start_time; Comment: Callback for start_time. 
Name: format_cb_window_activity; Comment: Callback for window_activity. 
Name: format_cb_buffer_mode_format; Comment: Callback for buffer_mode_format, 
Name: format_cb_client_mode_format; Comment: Callback for client_mode_format, 
Name: format_cb_tree_mode_format; Comment: Callback for tree_mode_format, 
Name: format_table_compare; Comment: Compare format table entries. 
Name: format_table_get; Comment: Get a format callback. 
Name: format_merge; Comment: Merge one format tree into another. 
Name: format_get_pane; Comment: Get format pane. 
Name: format_create_add_item; Comment: Add item bits to tree. 
Name: format_create; Comment: Create a new tree. 
Name: format_free; Comment: Free a tree. 
Name: format_each; Comment: Walk each format. 
Name: format_add; Comment: Add a key-value pair. 
Name: format_add_tv; Comment: Add a key and time. 
Name: format_add_cb; Comment: Add a key and function. 
Name: format_quote_shell; Comment: Quote shell special characters in string. 
Name: format_quote_style; Comment: Quote #s in string. 
Name: format_pretty_time; Comment: Make a prettier time. 
Name: format_find; Comment: Find a format entry. 
Name: format_strip; Comment: Remove escaped characters from string. 
Name: format_skip; Comment: Skip until end. 
Name: format_choose; Comment: Return left and right alternatives separated by commas. 
Name: format_true; Comment: Is this true? 
Name: format_is_end; Comment: Check if modifier end. 
Name: format_add_modifier; Comment: Add to modifier list. 
Name: format_free_modifiers; Comment: Free modifier list. 
Name: format_build_modifiers; Comment: Build modifier list. 
Name: format_match; Comment: Match against an fnmatch(3) pattern or regular expression. 
Name: format_sub; Comment: Perform substitution in string. 
Name: format_search; Comment: Search inside pane. 
Name: format_session_name; Comment: Does session name exist? 
Name: format_loop_sessions; Comment: Loop over sessions. 
Name: format_window_name; Comment: Does window name exist? 
Name: format_loop_windows; Comment: Loop over windows. 
Name: format_loop_panes; Comment: Loop over panes. 
Name: format_replace; Comment: Replace a key. 
Name: format_expand_time; Comment: Expand keys in a template, passing through strftime first. 
Name: format_expand; Comment: Expand keys in a template. 
Name: format_single; Comment: Expand a single string. 
Name: format_single_from_state; Comment: Expand a single string using state. 
Name: format_single_from_target; Comment: Expand a single string using target. 
Name: format_create_defaults; Comment: Create and add defaults. 
Name: format_create_from_state; Comment: Create and add defaults using state. 
Name: format_create_from_target; Comment: Create and add defaults using target. 
Name: format_defaults; Comment: Set defaults for any of arguments that are not NULL. 
Name: format_defaults_session; Comment: Set default format keys for a session. 
Name: format_defaults_client; Comment: Set default format keys for a client. 
Name: format_defaults_window; Comment: Set default format keys for a window. 
Name: format_defaults_winlink; Comment: Set default format keys for a winlink. 
Name: format_defaults_pane; Comment: Set default format keys for a window pane. 
Name: format_defaults_paste_buffer; Comment: Set default format keys for paste buffer. 
Name: format_grid_word; Comment: Return word at given coordinates. Caller frees. 
Name: format_grid_line; Comment: Return line at given coordinates. Caller frees. 
Name: grid_reader_start; Comment: Initialise virtual cursor. 
Name: grid_reader_get_cursor; Comment: Get cursor position from reader. 
Name: grid_reader_line_length; Comment: Get length of line containing the cursor. 
Name: grid_reader_cursor_right; Comment: Move cursor forward one position. 
Name: grid_reader_cursor_left; Comment: Move cursor back one position. 
Name: grid_reader_cursor_down; Comment: Move cursor down one line. 
Name: grid_reader_cursor_up; Comment: Move cursor up one line. 
Name: grid_reader_cursor_start_of_line; Comment: Move cursor to the start of the line. 
Name: grid_reader_cursor_end_of_line; Comment: Move cursor to the end of the line. 
Name: grid_reader_in_set; Comment: Check if character under cursor is in set. 
Name: grid_reader_cursor_next_word; Comment: Move cursor to the start of the next word. 
Name: grid_reader_cursor_next_word_end; Comment: Move cursor to the end of the next word. 
Name: grid_reader_cursor_previous_word; Comment: Move to the previous place where a word begins. 
Name: grid_reader_cursor_jump; Comment: Jump forward to character. 
Name: grid_reader_cursor_jump_back; Comment: Jump back to character. 
Name: grid_reader_cursor_back_to_indentation; Comment: Jump back to the first non-blank character of the line. 
Name: grid_view_get_cell; Comment: Get cell. 
Name: grid_view_set_cell; Comment: Set cell. 
Name: grid_view_set_padding; Comment: Set padding. 
Name: grid_view_set_cells; Comment: Set cells. 
Name: grid_view_clear_history; Comment: Clear into history. 
Name: grid_view_clear; Comment: Clear area. 
Name: grid_view_scroll_region_up; Comment: Scroll region up. 
Name: grid_view_scroll_region_down; Comment: Scroll region down. 
Name: grid_view_insert_lines; Comment: Insert lines. 
Name: grid_view_insert_lines_region; Comment: Insert lines in region. 
Name: grid_view_delete_lines; Comment: Delete lines. 
Name: grid_view_delete_lines_region; Comment: Delete lines inside scroll region. 
Name: grid_view_insert_cells; Comment: Insert characters. 
Name: grid_view_delete_cells; Comment: Delete characters. 
Name: grid_view_string_cells; Comment: Convert cells into a string. 
Name: grid_store_cell; Comment: Store cell in entry. 
Name: grid_need_extended_cell; Comment: Check if a cell should be an extended cell. 
Name: grid_get_extended_cell; Comment: Get an extended cell. 
Name: grid_extended_cell; Comment: Set cell as extended. 
Name: grid_compact_line; Comment: Free up unused extended cells. 
Name: grid_get_line; Comment: Get line data. 
Name: grid_adjust_lines; Comment: Adjust number of lines. 
Name: grid_clear_cell; Comment: Copy default into a cell. 
Name: grid_check_y; Comment: Check grid y position. 
Name: grid_cells_look_equal; Comment: Check if two styles are (visibly) the same. 
Name: grid_cells_equal; Comment: Compare grid cells. Return 1 if equal, 0 if not. 
Name: grid_free_line; Comment: Free one line. 
Name: grid_free_lines; Comment: Free several lines. 
Name: grid_create; Comment: Create a new grid. 
Name: grid_destroy; Comment: Destroy grid. 
Name: grid_compare; Comment: Compare grids. 
Name: grid_trim_history; Comment: Trim lines from the history. 
Name: grid_collect_history; Comment: Collect lines from the history if at the limit. Free the top (oldest) 10% and shift up. 
Name: grid_remove_history; Comment: Remove lines from the bottom of the history. 
Name: grid_scroll_history; Comment: Scroll the entire visible screen, moving one line into the history. Just allocate a new line at the bottom and move the history size indicator. 
Name: grid_clear_history; Comment: Clear the history. 
Name: grid_scroll_history_region; Comment: Scroll a region up, moving the top line into the history. 
Name: grid_expand_line; Comment: Expand line to fit to cell. 
Name: grid_empty_line; Comment: Empty a line and set background colour if needed. 
Name: grid_peek_line; Comment: Peek at grid line. 
Name: grid_get_cell1; Comment: Get cell from line. 
Name: grid_get_cell; Comment: Get cell for reading. 
Name: grid_set_cell; Comment: Set cell at position. 
Name: grid_set_padding; Comment: Set padding at position. 
Name: grid_set_cells; Comment: Set cells at position. 
Name: grid_clear; Comment: Clear area. 
Name: grid_clear_lines; Comment: Clear lines. This just frees and truncates the lines. 
Name: grid_move_lines; Comment: Move a group of lines. 
Name: grid_move_cells; Comment: Move a group of cells. 
Name: grid_string_cells_fg; Comment: Get ANSI foreground sequence. 
Name: grid_string_cells_bg; Comment: Get ANSI background sequence. 
Name: grid_string_cells_code; Comment: Returns ANSI code to set particular attributes (colour, bold and so on) given a current state. 
Name: grid_string_cells; Comment: Convert cells into a string. 
Name: grid_duplicate_lines; Comment: Duplicate a set of lines between two grids. Both source and destination should be big enough. 
Name: grid_reflow_dead; Comment: Mark line as dead. 
Name: grid_reflow_add; Comment: Add lines, return the first new one. 
Name: grid_reflow_move; Comment: Move a line across. 
Name: grid_reflow_join; Comment: Join line below onto this one. 
Name: grid_reflow_split; Comment: Split this line into several new ones 
Name: grid_reflow; Comment: Reflow lines on grid to new width. 
Name: grid_wrap_position; Comment: Convert to position based on wrapped lines. 
Name: grid_unwrap_position; Comment: Convert position based on wrapped lines back. 
Name: grid_line_length; Comment: Get length of line. 
Name: input_key_cmp; Comment: Input key comparison function. 
Name: input_key_get; Comment: Look for key in tree. 
Name: input_key_split2; Comment: Split a character into two UTF-8 bytes. 
Name: input_key_build; Comment: Build input key tree. 
Name: input_key_pane; Comment: Translate a key code into an output key sequence for a pane. 
Name: input_key; Comment: Translate a key code into an output key sequence. 
Name: input_key_get_mouse; Comment: Get mouse event string. 
Name: input_key_mouse; Comment: Translate mouse and output. 
Name: input_table_compare; Comment: Input table compare. 
Name: input_timer_callback; Comment: Timer - if this expires then have been waiting for a terminator for too long, so reset to ground. 
Name: input_start_timer; Comment: Start the timer. 
Name: input_reset_cell; Comment: Reset cell state to default. 
Name: input_save_state; Comment: Save screen state. 
Name: input_restore_state; Comment: Restore screen state. 
Name: input_init; Comment: Initialise input parser. 
Name: input_free; Comment: Destroy input parser. 
Name: input_reset; Comment: Reset input state and clear screen. 
Name: input_pending; Comment: Return pending data. 
Name: input_set_state; Comment: Change input state. 
Name: input_parse; Comment: Parse data. 
Name: input_parse_pane; Comment: Parse input from pane. 
Name: input_parse_buffer; Comment: Parse given input. 
Name: input_parse_screen; Comment: Parse given input for screen. 
Name: input_split; Comment: Split the parameter list (if any). 
Name: input_get; Comment: Get an argument or return default value. 
Name: input_reply; Comment: Reply to terminal query. 
Name: input_clear; Comment: Clear saved state. 
Name: input_ground; Comment: Reset for ground state. 
Name: input_print; Comment: Output this character to the screen. 
Name: input_intermediate; Comment: Collect intermediate string. 
Name: input_parameter; Comment: Collect parameter string. 
Name: input_input; Comment: Collect input string. 
Name: input_c0_dispatch; Comment: Execute C0 control sequence. 
Name: input_esc_dispatch; Comment: Execute escape sequence. 
Name: input_csi_dispatch; Comment: Execute control sequence. 
Name: input_csi_dispatch_rm; Comment: Handle CSI RM. 
Name: input_csi_dispatch_rm_private; Comment: Handle CSI private RM. 
Name: input_csi_dispatch_sm; Comment: Handle CSI SM. 
Name: input_csi_dispatch_sm_private; Comment: Handle CSI private SM. 
Name: input_csi_dispatch_winops; Comment: Handle CSI window operations. 
Name: input_csi_dispatch_sgr_256_do; Comment: Helper for 256 colour SGR. 
Name: input_csi_dispatch_sgr_256; Comment: Handle CSI SGR for 256 colours. 
Name: input_csi_dispatch_sgr_rgb_do; Comment: Helper for RGB colour SGR. 
Name: input_csi_dispatch_sgr_rgb; Comment: Handle CSI SGR for RGB colours. 
Name: input_csi_dispatch_sgr_colon; Comment: Handle CSI SGR with a ISO parameter. 
Name: input_csi_dispatch_sgr; Comment: Handle CSI SGR. 
Name: input_end_bel; Comment: End of input with BEL. 
Name: input_enter_dcs; Comment: DCS string started. 
Name: input_dcs_dispatch; Comment: DCS terminator (ST) received. 
Name: input_enter_osc; Comment: OSC string started. 
Name: input_exit_osc; Comment: OSC terminator (ST) received. 
Name: input_enter_apc; Comment: APC string started. 
Name: input_exit_apc; Comment: APC terminator (ST) received. 
Name: input_enter_rename; Comment: Rename string started. 
Name: input_exit_rename; Comment: Rename terminator (ST) received. 
Name: input_top_bit_set; Comment: Open UTF-8 character. 
Name: input_osc_parse_colour; Comment: Parse colour from OSC. 
Name: input_osc_colour_reply; Comment: Reply to a colour request. 
Name: input_osc_4; Comment: Handle the OSC 4 sequence for setting (multiple) palette entries. 
Name: input_osc_10; Comment: Handle the OSC 10 sequence for setting and querying foreground colour. 
Name: input_osc_110; Comment: Handle the OSC 110 sequence for resetting background colour. 
Name: input_osc_11; Comment: Handle the OSC 11 sequence for setting and querying background colour. 
Name: input_osc_111; Comment: Handle the OSC 111 sequence for resetting background colour. 
Name: input_osc_52; Comment: Handle the OSC 52 sequence for setting the clipboard. 
Name: input_osc_104; Comment: Handle the OSC 104 sequence for unsetting (multiple) palette entries. 
Name: job_run; Comment: Start a job running. 
Name: job_free; Comment: Kill and free an individual job. 
Name: job_resize; Comment: Resize job. 
Name: job_read_callback; Comment: Job buffer read callback. 
Name: job_write_callback; Comment: Job buffer write callback. Fired when the buffer falls below watermark (default is empty). If all the data has been written, disable the write event. 
Name: job_error_callback; Comment: Job buffer error callback. 
Name: job_check_died; Comment: Job died (waitpid() returned its pid). 
Name: job_get_status; Comment: Get job status. 
Name: job_get_data; Comment: Get job data. 
Name: job_get_event; Comment: Get job event. 
Name: job_kill_all; Comment: Kill all jobs. 
Name: job_still_running; Comment: Are any jobs still running? 
Name: job_print_summary; Comment: Print job summary. 
Name: key_string_search_table; Comment: Find key string in table. 
Name: key_string_get_modifiers; Comment: Find modifiers. 
Name: key_string_lookup_string; Comment: Lookup a string and convert to a key value. 
Name: key_string_lookup_key; Comment: Convert a key code into string format, with prefix if necessary. 
Name: layout_find_bottomright; Comment: Find the bottom-right cell. 
Name: layout_checksum; Comment: Calculate layout checksum. 
Name: layout_dump; Comment: Dump layout as a string. 
Name: layout_append; Comment: Append information for a single cell. 
Name: layout_check; Comment: Check layout sizes fit. 
Name: layout_parse; Comment: Parse a layout string and arrange window as layout. 
Name: layout_assign; Comment: Assign panes into cells. 
Name: layout_construct; Comment: Construct a cell from all or part of a layout tree. 
Name: layout_fix_offsets1; Comment: Fix cell offsets for a child cell. 
Name: layout_fix_offsets; Comment: Update cell offsets based on their sizes. 
Name: layout_cell_is_top; Comment: Is this a top cell? 
Name: layout_cell_is_bottom; Comment: Is this a bottom cell? 
Name: layout_add_border; Comment: Returns 1 if we need to add an extra line for the pane status line. This is the case for the most upper or lower panes only. 
Name: layout_fix_panes; Comment: Update pane offsets and sizes based on their cells. 
Name: layout_count_cells; Comment: Count the number of available cells in a layout. 
Name: layout_resize_check; Comment: Calculate how much size is available to be removed from a cell. 
Name: layout_resize_adjust; Comment: Adjust cell size evenly, including altering its children. This function expects the change to have already been bounded to the space available. 
Name: layout_destroy_cell; Comment: Destroy a cell and redistribute the space. 
Name: layout_resize; Comment: Resize the entire layout after window resize. 
Name: layout_resize_pane_to; Comment: Resize a pane to an absolute size. 
Name: layout_resize_pane; Comment: Resize a single pane within the layout. 
Name: layout_resize_pane_grow; Comment: Helper function to grow pane. 
Name: layout_resize_pane_shrink; Comment: Helper function to shrink pane. 
Name: layout_assign_pane; Comment: Assign window pane to newly split cell. 
Name: layout_new_pane_size; Comment: Calculate the new pane size for resized parent. 
Name: layout_set_size_check; Comment: Check if the cell and all its children can be resized to a specific size. 
Name: layout_resize_child_cells; Comment: Resize all child cells to fit within the current cell. 
Name: layout_split_pane; Comment: Split a pane into two. size is a hint, or -1 for default half/half split. This must be followed by layout_assign_pane before much else happens! 
Name: layout_close_pane; Comment: Destroy the cell associated with a pane. 
Name: log_event_cb; Comment: Log callback for libevent. 
Name: log_add_level; Comment: Increment log level. 
Name: log_get_level; Comment: Get log level. 
Name: log_open; Comment: Open logging to file. 
Name: log_toggle; Comment: Toggle logging. 
Name: log_close; Comment: Close logging. 
Name: log_vwrite; Comment: Write a log message. 
Name: log_debug; Comment: Log a debug message. 
Name: fatal; Comment: Log a critical error with error string and die. 
Name: fatalx; Comment: Log a critical error and die. 
Name: osdep_get_name; Comment: Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@gmail.com> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: paste_buffer_name; Comment: Get paste buffer name. 
Name: paste_buffer_order; Comment: Get paste buffer order. 
Name: paste_buffer_created; Comment: Get paste buffer created. 
Name: paste_buffer_data; Comment: Get paste buffer data. 
Name: paste_walk; Comment: Walk paste buffers by time. 
Name: paste_get_top; Comment: Get the most recent automatic buffer. 
Name: paste_get_name; Comment: Get a paste buffer by name. 
Name: paste_free; Comment: Free a paste buffer. 
Name: paste_add; Comment: Add an automatic buffer, freeing the oldest automatic item if at limit. Note that the caller is responsible for allocating data. 
Name: paste_rename; Comment: Rename a paste buffer. 
Name: paste_set; Comment: Add or replace an item in the store. Note that the caller is responsible for allocating data. 
Name: paste_replace; Comment: Set paste data without otherwise changing it. 
Name: paste_make_sample; Comment: Convert start of buffer into a nice string. 
Name: resize_window; Comment: Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@gmail.com> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: screen_redraw_border_set; Comment: Get cell border character. 
Name: screen_redraw_two_panes; Comment: Return if window has only two panes. 
Name: screen_redraw_pane_border; Comment: Check if cell is on the border of a pane. 
Name: screen_redraw_cell_border; Comment: Check if a cell is on a border. 
Name: screen_redraw_type_of_cell; Comment: Work out type of border cell from surrounding cells. 
Name: screen_redraw_check_cell; Comment: Check if cell inside a pane. 
Name: screen_redraw_check_is; Comment: Check if the border of a particular pane. 
Name: screen_redraw_make_pane_status; Comment: Update pane status. 
Name: screen_redraw_draw_pane_status; Comment: Draw pane status. 
Name: screen_redraw_update; Comment: Update status line and change flags if unchanged. 
Name: screen_redraw_set_context; Comment: Set up redraw context. 
Name: screen_redraw_screen; Comment: Redraw entire screen. 
Name: screen_redraw_pane; Comment: Redraw a single pane. 
Name: screen_redraw_draw_borders_style; Comment: Get border cell style. 
Name: screen_redraw_draw_borders_cell; Comment: Draw a border cell. 
Name: screen_redraw_draw_borders; Comment: Draw the borders. 
Name: screen_redraw_draw_panes; Comment: Draw the panes. 
Name: screen_redraw_draw_status; Comment: Draw the status line. 
Name: screen_redraw_draw_pane; Comment: Draw one pane. 
Name: screen_write_set_cursor; Comment: Set cursor position. 
Name: screen_write_redraw_cb; Comment: Do a full redraw. 
Name: screen_write_set_client_cb; Comment: Update context for client. 
Name: screen_write_initctx; Comment: Set up context for TTY command. 
Name: screen_write_make_list; Comment: Make write list. 
Name: screen_write_free_list; Comment: Free write list. 
Name: screen_write_init; Comment: Set up for writing. 
Name: screen_write_start_pane; Comment: Initialize writing with a pane. 
Name: screen_write_start_callback; Comment: Initialize writing with a callback. 
Name: screen_write_start; Comment: Initialize writing. 
Name: screen_write_stop; Comment: Finish writing. 
Name: screen_write_reset; Comment: Reset screen state. 
Name: screen_write_putc; Comment: Write character. 
Name: screen_write_strlen; Comment: Calculate string length. 
Name: screen_write_text; Comment: Write string wrapped over lines. 
Name: screen_write_puts; Comment: Write simple string (no maximum length). 
Name: screen_write_nputs; Comment: Write string with length limit (-1 for unlimited). 
Name: screen_write_fast_copy; Comment: Copy from another screen but without the selection stuff. Assumes the target region is already big enough. 
Name: screen_write_hline; Comment: Draw a horizontal line on screen. 
Name: screen_write_vline; Comment: Draw a horizontal line on screen. 
Name: screen_write_menu; Comment: Draw a menu on screen. 
Name: screen_write_box; Comment: Draw a box on screen. 
Name: screen_write_preview; Comment: Write a preview version of a window. Assumes target area is big enough and already cleared. 
Name: screen_write_mode_set; Comment: Set a mode. 
Name: screen_write_mode_clear; Comment: Clear a mode. 
Name: screen_write_cursorup; Comment: Cursor up by ny. 
Name: screen_write_cursordown; Comment: Cursor down by ny. 
Name: screen_write_cursorright; Comment: Cursor right by nx. 
Name: screen_write_cursorleft; Comment: Cursor left by nx. 
Name: screen_write_backspace; Comment: Backspace; cursor left unless at start of wrapped line when can move up. 
Name: screen_write_alignmenttest; Comment: VT100 alignment test. 
Name: screen_write_insertcharacter; Comment: Insert nx characters. 
Name: screen_write_deletecharacter; Comment: Delete nx characters. 
Name: screen_write_clearcharacter; Comment: Clear nx characters. 
Name: screen_write_insertline; Comment: Insert ny lines. 
Name: screen_write_deleteline; Comment: Delete ny lines. 
Name: screen_write_clearline; Comment: Clear line at cursor. 
Name: screen_write_clearendofline; Comment: Clear to end of line from cursor. 
Name: screen_write_clearstartofline; Comment: Clear to start of line from cursor. 
Name: screen_write_cursormove; Comment: Move cursor to px,py. 
Name: screen_write_reverseindex; Comment: Reverse index (up with scroll). 
Name: screen_write_scrollregion; Comment: Set scroll region. 
Name: screen_write_linefeed; Comment: Line feed. 
Name: screen_write_scrollup; Comment: Scroll up. 
Name: screen_write_scrolldown; Comment: Scroll down. 
Name: screen_write_carriagereturn; Comment: Carriage return (cursor to start of line). 
Name: screen_write_clearendofscreen; Comment: Clear to end of screen from cursor. 
Name: screen_write_clearstartofscreen; Comment: Clear to start of screen. 
Name: screen_write_clearscreen; Comment: Clear entire screen. 
Name: screen_write_clearhistory; Comment: Clear entire history. 
Name: screen_write_collect_trim; Comment: Trim collected items. 
Name: screen_write_collect_clear; Comment: Clear collected lines. 
Name: screen_write_collect_scroll; Comment: Scroll collected lines up. 
Name: screen_write_collect_flush; Comment: Flush collected lines. 
Name: screen_write_collect_end; Comment: Finish and store collected cells. 
Name: screen_write_collect_add; Comment: Write cell data, collecting if necessary. 
Name: screen_write_cell; Comment: Write cell data. 
Name: screen_write_combine; Comment: Combine a UTF-8 zero-width character onto the previous. 
Name: screen_write_overwrite; Comment: UTF-8 wide characters are a bit of an annoyance. They take up more than one cell on the screen, so following cells must not be drawn by marking them as padding. So far, so good. The problem is, when overwriting a padding cell, or a UTF-8 character, it is necessary to also overwrite any other cells which covered by the same character. 
Name: screen_write_setselection; Comment: Set external clipboard. 
Name: screen_write_rawstring; Comment: Write unmodified string. 
Name: screen_write_alternateon; Comment: Turn alternate screen on. 
Name: screen_write_alternateoff; Comment: Turn alternate screen off. 
Name: screen_free_titles; Comment: Free titles stack. 
Name: screen_init; Comment: Create a new screen. 
Name: screen_reinit; Comment: Reinitialise screen. 
Name: screen_free; Comment: Destroy a screen. 
Name: screen_reset_tabs; Comment: Reset tabs to default, eight spaces apart. 
Name: screen_set_cursor_style; Comment: Set screen cursor style. 
Name: screen_set_cursor_colour; Comment: Set screen cursor colour. 
Name: screen_set_title; Comment: Set screen title. 
Name: screen_set_path; Comment: Set screen path. 
Name: screen_push_title; Comment: Push the current title onto the stack. 
Name: screen_pop_title; Comment: Pop a title from the stack and set it as the screen title. If the stack is empty, do nothing. 
Name: screen_resize_cursor; Comment: Resize screen with options. 
Name: screen_resize; Comment: Resize screen. 
Name: screen_set_selection; Comment: Set selection. 
Name: screen_clear_selection; Comment: Clear selection. 
Name: screen_hide_selection; Comment: Hide selection. 
Name: screen_check_selection; Comment: Check if cell in selection. 
Name: screen_select_cell; Comment: Get selected grid cell. 
Name: screen_reflow; Comment: Reflow wrapped lines. 
Name: screen_alternate_on; Comment: Enter alternative screen mode. A copy of the visible screen is saved and the history is not updated. 
Name: screen_alternate_off; Comment: Exit alternate screen mode and restore the copied grid. 
Name: server_client_window_cmp; Comment: Compare client windows. 
Name: server_client_how_many; Comment: Number of attached clients. 
Name: server_client_overlay_timer; Comment: Overlay timer callback. 
Name: server_client_set_overlay; Comment: Set an overlay on client. 
Name: server_client_clear_overlay; Comment: Clear overlay mode on client. 
Name: server_client_check_nested; Comment: Check if this client is inside this server. 
Name: server_client_set_key_table; Comment: Set client key table. 
Name: server_client_get_key_table; Comment: Get default key table. 
Name: server_client_is_default_key_table; Comment: Is this table the default key table? 
Name: server_client_create; Comment: Create a new client. 
Name: server_client_open; Comment: Open client terminal if needed. 
Name: server_client_lost; Comment: Lost a client. 
Name: server_client_unref; Comment: Remove reference from a client. 
Name: server_client_free; Comment: Free dead client. 
Name: server_client_suspend; Comment: Suspend a client. 
Name: server_client_detach; Comment: Detach a client. 
Name: server_client_exec; Comment: Execute command to replace a client. 
Name: server_client_check_mouse; Comment: Check for mouse keys. 
Name: server_client_assume_paste; Comment: Is this fast enough to probably be a paste? 
Name: server_client_update_latest; Comment: Has the latest client changed? 
Name: server_client_key_callback; Comment: Handle data key input from client. This owns and can modify the key event it is given and is responsible for freeing it. 
Name: server_client_handle_key; Comment: Handle a key event. 
Name: server_client_loop; Comment: Client functions that need to happen every loop. 
Name: server_client_check_window_resize; Comment: Check if window needs to be resized. 
Name: server_client_resize_timer; Comment: Resize timer event. 
Name: server_client_start_resize_timer; Comment: Start the resize timer. 
Name: server_client_force_timer; Comment: Force timer event. 
Name: server_client_start_force_timer; Comment: Start the force timer. 
Name: server_client_check_pane_resize; Comment: Check if pane should be resized. 
Name: server_client_check_pane_buffer; Comment: Check pane buffer size. 
Name: server_client_check_pane_focus; Comment: Check whether pane should be focused. 
Name: server_client_reset_state; Comment: Update cursor position and mode settings. The scroll region and attributes are cleared when idle (waiting for an event) as this is the most likely time a user may interrupt tmux, for example with ~^Z in ssh(1). This is a compromise between excessive resets and likelihood of an interrupt. tty_region/tty_reset/tty_update_mode already take care of not resetting things that are already in their default state. 
Name: server_client_repeat_timer; Comment: Repeat time callback. 
Name: server_client_click_timer; Comment: Double-click callback. 
Name: server_client_check_exit; Comment: Check if client should be exited. 
Name: server_client_redraw_timer; Comment: Redraw timer callback. 
Name: server_client_check_modes; Comment: Check if modes need to be updated. Only modes in the current window are updated and it is done when the status line is redrawn. 
Name: server_client_check_redraw; Comment: Check for client redraws. 
Name: server_client_set_title; Comment: Set client title. 
Name: server_client_dispatch; Comment: Dispatch message from client. 
Name: server_client_command_done; Comment: Callback when command is done. 
Name: server_client_dispatch_command; Comment: Handle command message. 
Name: server_client_dispatch_identify; Comment: Handle identify message. 
Name: server_client_dispatch_shell; Comment: Handle shell message. 
Name: server_client_get_cwd; Comment: Get client working directory. 
Name: server_client_control_flags; Comment: Get control client flags. 
Name: server_client_set_flags; Comment: Set client flags. 
Name: server_client_get_flags; Comment: Get client flags. This is only flags useful to show to users. 
Name: server_client_get_client_window; Comment: Get client window. 
Name: server_client_get_pane; Comment: Get client active pane. 
Name: server_client_set_pane; Comment: Set client active pane. 
Name: server_client_remove_pane; Comment: Remove pane from client lists. 
Name: server_set_marked; Comment: Set marked pane. 
Name: server_clear_marked; Comment: Clear marked pane. 
Name: server_is_marked; Comment: Is this the marked pane? 
Name: server_check_marked; Comment: Check if the marked pane is still valid. 
Name: server_create_socket; Comment: Create server socket. 
Name: server_tidy_event; Comment: Tidy up every hour. 
Name: server_start; Comment: Fork new server. 
Name: server_loop; Comment: Server loop callback. 
Name: server_send_exit; Comment: Exit the server by killing all clients and windows. 
Name: server_update_socket; Comment: Update socket execute permissions based on whether sessions are attached. 
Name: server_accept; Comment: Callback for server socket. 
Name: server_add_accept; Comment: Add accept event. If timeout is nonzero, add as a timeout instead of a read event - used to backoff when running out of file descriptors. 
Name: server_signal; Comment: Signal handler. 
Name: server_child_signal; Comment: Handle SIGCHLD. 
Name: server_child_exited; Comment: Handle exited children. 
Name: server_child_stopped; Comment: Handle stopped children. 
Name: server_add_message; Comment: Add to message log. 
Name: session_alive; Comment: Find if session is still alive. This is true if it is still on the global sessions list. 
Name: session_find; Comment: Find session by name. 
Name: session_find_by_id_str; Comment: Find session by id parsed from a string. 
Name: session_find_by_id; Comment: Find session by id. 
Name: session_create; Comment: Create a new session. 
Name: session_add_ref; Comment: Add a reference to a session. 
Name: session_remove_ref; Comment: Remove a reference from a session. 
Name: session_free; Comment: Free session. 
Name: session_destroy; Comment: Destroy a session. 
Name: session_check_name; Comment: Sanitize session name. 
Name: session_lock_timer; Comment: Lock session if it has timed out. 
Name: session_update_activity; Comment: Update activity time. 
Name: session_next_session; Comment: Find the next usable session. 
Name: session_previous_session; Comment: Find the previous usable session. 
Name: session_attach; Comment: Attach a window to a session. 
Name: session_detach; Comment: Detach a window from a session. 
Name: session_has; Comment: Return if session has window. 
Name: session_is_linked; Comment: Return 1 if a window is linked outside this session (not including session groups). The window must be in this session! 
Name: session_next; Comment: Move session to next window. 
Name: session_previous; Comment: Move session to previous window. 
Name: session_select; Comment: Move session to specific window. 
Name: session_last; Comment: Move session to last used window. 
Name: session_set_current; Comment: Set current winlink to wl .
Name: session_group_contains; Comment: Find the session group containing a session. 
Name: session_group_find; Comment: Find session group by name. 
Name: session_group_new; Comment: Create a new session group. 
Name: session_group_add; Comment: Add a session to a session group. 
Name: session_group_remove; Comment: Remove a session from its group and destroy the group if empty. 
Name: session_group_count; Comment: Count number of sessions in session group. 
Name: session_group_attached_count; Comment: Count number of clients attached to sessions in session group. 
Name: session_group_synchronize_to; Comment: Synchronize a session to its session group. 
Name: session_group_synchronize_from; Comment: Synchronize a session group to a session. 
Name: session_group_synchronize1; Comment: Synchronize a session with a target session. This means destroying all winlinks then recreating them, then updating the current window, last window stack and alerts. 
Name: session_renumber_windows; Comment: Renumber the windows across winlinks attached to a specific session. 
Name: spawn_log; Comment: None- remaining environment, comes from the session. 
Name: status_prompt_find_history_file; Comment: Find the history file to load/save from/to. 
Name: status_prompt_load_history; Comment: Load status prompt history from file. 
Name: status_prompt_save_history; Comment: Save status prompt history to file. 
Name: status_timer_callback; Comment: Status timer callback. 
Name: status_timer_start; Comment: Start status timer for client. 
Name: status_timer_start_all; Comment: Start status timer for all clients. 
Name: status_update_cache; Comment: Update status cache. 
Name: status_at_line; Comment: Get screen line of status line. -1 means off. 
Name: status_line_size; Comment: Get size of status line for client's session. 0 means off. 
Name: status_get_range; Comment: Get window at window list position. 
Name: status_free_ranges; Comment: Free all ranges. 
Name: status_push_screen; Comment: Save old status line. 
Name: status_pop_screen; Comment: Restore old status line. 
Name: status_init; Comment: Initialize status line. 
Name: status_free; Comment: Free status line. 
Name: status_redraw; Comment: Draw status line for client. 
Name: status_message_set; Comment: Set a status line message. 
Name: status_message_clear; Comment: Clear status line message. 
Name: status_message_callback; Comment: Clear status line message after timer expires. 
Name: status_message_redraw; Comment: Draw client message on status line of present else on last line. 
Name: status_prompt_set; Comment: Enable status line prompt. 
Name: status_prompt_clear; Comment: Remove status line prompt. 
Name: status_prompt_update; Comment: Update status line prompt with a new prompt string. 
Name: status_prompt_redraw; Comment: Draw client prompt on status line of present else on last line. 
Name: status_prompt_in_list; Comment: Is this a separator? 
Name: status_prompt_space; Comment: Is this a space? 
Name: status_prompt_translate_key; Comment: Translate key from emacs to vi. Return 0 to drop key, 1 to process the key as an emacs key; return 2 to append to the buffer. 
Name: status_prompt_paste; Comment: Paste into prompt. 
Name: status_prompt_replace_complete; Comment: Finish completion. 
Name: status_prompt_key; Comment: Handle keys in prompt. 
Name: status_prompt_up_history; Comment: Get previous line from the history. 
Name: status_prompt_down_history; Comment: Get next line from the history. 
Name: status_prompt_add_history; Comment: Add line to the history. 
Name: status_prompt_complete_list; Comment: Build completion list. 
Name: status_prompt_complete_prefix; Comment: Find longest prefix. 
Name: status_prompt_menu_callback; Comment: Complete word menu callback. 
Name: status_prompt_complete_list_menu; Comment: Show complete word menu. 
Name: status_prompt_complete_window_menu; Comment: Show complete word menu. 
Name: status_prompt_complete_sort; Comment: Sort complete list. 
Name: status_prompt_complete_session; Comment: Complete a session. 
Name: status_prompt_complete; Comment: Complete word. 
Name: style_parse; Comment: Parse an embedded style of the form "fg=colour,bg=colour,bright,...". Note that this adds onto the given style, so it must have been initialized already. 
Name: style_tostring; Comment: Convert style to a string. 
Name: style_add; Comment: Apply a style on top of the given style. 
Name: style_apply; Comment: Apply a style on top of the default style. 
Name: style_set; Comment: Initialize style from cell. 
Name: style_copy; Comment: Copy style. 
Name: tty_acs_needed; Comment: Should this terminal use ACS instead of UTF-8 line drawing? 
Name: tty_acs_get; Comment: Retrieve ACS to output as UTF-8. 
Name: tty_acs_reverse_get; Comment: Reverse UTF-8 into ACS. 
Name: tty_keys_add; Comment: Add key to tree. 
Name: tty_keys_add1; Comment: Add next node to the tree. 
Name: tty_keys_build; Comment: Initialise a key tree from the table. 
Name: tty_keys_free; Comment: Free the entire key tree. 
Name: tty_keys_free1; Comment: Free a single key. 
Name: tty_keys_find; Comment: Lookup a key in the tree. 
Name: tty_keys_find1; Comment: Find the next node. 
Name: tty_keys_next1; Comment: Look up part of the next key. 
Name: tty_keys_next; Comment: Process at least one key in the buffer. Return 0 if no keys present. 
Name: tty_keys_callback; Comment: Key timer callback. 
Name: tty_keys_extended_key; Comment: None 
Name: tty_keys_mouse; Comment: Handle mouse key input. Returns 0 for success, -1 for failure, 1 for partial (probably a mouse sequence but need more data). 
Name: tty_keys_clipboard; Comment: Handle OSC 52 clipboard input. Returns 0 for success, -1 for failure, 1 for partial. 
Name: tty_keys_device_attributes; Comment: Handle secondary device attributes input. Returns 0 for success, -1 for failure, 1 for partial. 
Name: tty_keys_extended_device_attributes; Comment: Handle extended device attributes input. Returns 0 for success, -1 for failure, 1 for partial. 
Name: tty_window_bigger; Comment: Is this window bigger than the terminal? 
Name: tty_window_offset; Comment: What offset should this window be drawn at? 
Name: tty_window_offset1; Comment: What offset should this window be drawn at? 
Name: tty_update_window_offset; Comment: Update stored offsets for a window and redraw if necessary. 
Name: tty_update_client_offset; Comment: Update stored offsets for a client and redraw if necessary. 
Name: tty_get_palette; Comment: Get a palette entry. 
Name: tty_large_region; Comment: Is the region large enough to be worth redrawing once later rather than probably several times now? Currently yes if it is more than 50% of the pane. 
Name: tty_fake_bce; Comment: Return if BCE is needed but the terminal doesn't have it - it'll need to be emulated. 
Name: tty_redraw_region; Comment: Redraw scroll region using data from screen (already updated). Used when CSR not supported, or window is a pane that doesn't take up the full width of the terminal. 
Name: tty_is_visible; Comment: Is this position visible in the pane? 
Name: tty_clamp_line; Comment: Clamp line position to visible part of pane. 
Name: tty_clear_line; Comment: Clear a line. 
Name: tty_clear_pane_line; Comment: Clear a line, adjusting to visible part of pane. 
Name: tty_clamp_area; Comment: Clamp area position to visible part of pane. 
Name: tty_clear_area; Comment: Clear an area, adjusting to visible part of pane. 
Name: tty_clear_pane_area; Comment: Clear an area in a pane. 
Name: tty_region_off; Comment: Turn off margin. 
Name: tty_region_pane; Comment: Set region inside pane. 
Name: tty_region; Comment: Set region at absolute position. 
Name: tty_margin_off; Comment: Turn off margin. 
Name: tty_margin_pane; Comment: Set margin inside pane. 
Name: tty_margin; Comment: Set margin at absolute position. 
Name: tty_cursor_pane_unless_wrap; Comment: Move the cursor, unless it would wrap itself when the next character is printed. 
Name: tty_cursor_pane; Comment: Move cursor inside pane. 
Name: tty_cursor; Comment: Move cursor to absolute position. 
Name: utf8_item_by_data; Comment: Get a UTF-8 item from data. 
Name: utf8_item_by_index; Comment: Get a UTF-8 item from data. 
Name: utf8_put_item; Comment: Add a UTF-8 item. 
Name: utf8_from_data; Comment: Get UTF-8 character from data. 
Name: utf8_to_data; Comment: Get UTF-8 data from character. 
Name: utf8_build_one; Comment: Get UTF-8 character from a single ASCII character. 
Name: utf8_set; Comment: Set a single character. 
Name: utf8_copy; Comment: Copy UTF-8 character. 
Name: utf8_width; Comment: Get width of Unicode character. 
Name: utf8_open; Comment: Open UTF-8 sequence. 11000010-11011111 C2-DF start of 2-byte sequence 11100000-11101111 E0-EF start of 3-byte sequence 11110000-11110100 F0-F4 start of 4-byte sequence 
Name: utf8_append; Comment: Append character to UTF-8, closing if finished. 
Name: utf8_strvis; Comment: Encode len characters from src into dst, which is guaranteed to have four bytes available for each character from src (for _abc or UTF-8) plus space for _0. 
Name: utf8_stravis; Comment: Same as utf8_strvis but allocate the buffer. 
Name: utf8_stravisx; Comment: Same as utf8_strvis but allocate the buffer. 
Name: utf8_isvalid; Comment: Does this string contain anything that isn't valid UTF-8? 
Name: utf8_sanitize; Comment: Sanitize a string, changing any UTF-8 characters to '_'. Caller should free the returned string. Anything not valid printable ASCII or UTF-8 is stripped. 
Name: utf8_strlen; Comment: Get UTF-8 buffer length. 
Name: utf8_strwidth; Comment: Get UTF-8 string width. 
Name: utf8_fromcstr; Comment: Convert a string into a buffer of UTF-8 characters. Terminated by size == 0. Caller frees. 
Name: utf8_tocstr; Comment: Convert from a buffer of UTF-8 characters into a string. Caller frees. 
Name: utf8_cstrwidth; Comment: Get width of UTF-8 string. 
Name: utf8_padcstr; Comment: Pad UTF-8 string to width on the left. Caller frees. 
Name: utf8_rpadcstr; Comment: Pad UTF-8 string to width on the right. Caller frees. 
Name: window_copy_last_regex; Comment: Find last match in given range. 
Name: window_copy_stringify; Comment: Stringify line and append to input buffer. Caller frees. 
Name: window_copy_cstrtocellpos; Comment: Map start of C string containing UTF-8 data to grid cell position. 
Name: window_copy_search_back_overlap; Comment: Handle backward wrapped regex searches with overlapping matches. In this case find the longest overlapping match from previous wrapped lines. 
Name: window_copy_search_jump; Comment: Search for text stored in sgd starting from position fx,fy up to endline. If found, jump to it. If cis then ignore case. The direction is 0 for searching up, down otherwise. If wrap then go to begin/end of grid and try again if not found. 
Name: window_copy_search; Comment: Search in for text searchstr. If direction is 0 then search up, otherwise down. 
Name: window_copy_cursor_next_word_end_pos; Comment: Compute the next place where a word ends. 
Name: window_copy_cursor_next_word_end; Comment: Move to the next place where a word ends. 
Name: window_copy_cursor_previous_word_pos; Comment: Compute the previous place where a word begins. 
Name: window_copy_cursor_previous_word; Comment: Move to the previous place where a word begins. 
Name: window_copy_acquire_cursor_up; Comment: Scroll up if the cursor went off the visible screen. 
Name: window_copy_acquire_cursor_down; Comment: Scroll down if the cursor went off the visible screen. 
Name: window_pane_choose_best; Comment: Get MRU pane from a list. 
Name: window_pane_find_up; Comment: Find the pane directly above another. We build a list of those adjacent to top edge and then choose the best. 
Name: window_pane_find_down; Comment: Find the pane directly below another. 
Name: window_pane_find_left; Comment: Find the pane directly to the left of another. 
Name: window_pane_find_right; Comment: Find the pane directly to the right of another. 
Name: winlink_clear_flags; Comment: Clear alert flags for a winlink 
Name: winlink_shuffle_up; Comment: Shuffle window indexes up. 
Name: explicit_bzero; Comment: Public domain. Written by Matthew Dempsky. 
Name: getptmfd; Comment: Copyright (c) 2017 Nicholas Marriott <nicholas.marriott@gmail.com> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: BSDgetopt; Comment: getopt -- *_Parse argc/argv argument vector. 
Name: imsg_create; Comment: ARGSUSED 
Name: memmem; Comment: Find the first occurrence of the byte string s in byte string l. 
Name: strnlen; Comment: Copyright (c) 2010 Todd C. Miller <Todd.Miller@courtesan.com> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: unvis; Comment: unvis - decode characters previously encoded by vis 
Name: strunvis; Comment: strunvis - decode src into dst *_Number of chars decoded into dst is returned, -1 on error. *_Dst is null terminated. 
Name: utf8proc_wcwidth; Comment: Copyright (c) 2016 Joshua Rubin <joshua@rubixconsulting.com> Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Name: strvis; Comment: strvis, strnvis, strvisx - visually encode characters from src into dst *_ *_Dst must be 4 times the size of src to account for possible *_expansion. The length of dst, not including the trailing NULL, *_is returned. *_Strnvis will write no more than siz-1 bytes (and will NULL terminate). *_The number of bytes needed to fully encode the string is returned. *_Strvisx encodes exactly len bytes from src into dst. *_This is useful for encoding a block of data. 
Name: response_head_terminator; Comment: copied from wget's http.c 
Name: alg_socket; Comment: Return a newly created socket for ALG. On error, return a negative error number. 
Name: to_uchar; Comment: Convert 'char' to 'unsigned char' without casting. 
Name: init_fatal_signals; Comment: Eliminate signals whose signal handler is SIG_IGN. 
Name: uninstall_handlers; Comment: Uninstall the handlers. 
Name: fatal_signal_handler; Comment: The signal handler. It gets called asynchronously. 
Name: install_handlers; Comment: Install the handlers. 
Name: at_fatal_signal; Comment: Register a cleanup function to be executed when a catchable fatal signal occurs. 
Name: block_fatal_signals; Comment: Temporarily delay the catchable fatal signals. 
Name: unblock_fatal_signals; Comment: Stop delaying the catchable fatal signals. 
Name: file_size; Comment: Determine the current size of a file. Because the other braindeadAPIs we'll call need lower/upper 32 bit pairs, keep the file size like that too. 
Name: do_lock; Comment: Acquire a lock. 
Name: do_unlock; Comment: Unlock reader or exclusive lock. 
Name: flock; Comment: Now our BSD-like flock operation. 
Name: md2_init_ctx; Comment: Initialize structure containing state of computation. (RFC 1319, 3.3: Step 3) 
Name: md2_read_ctx; Comment: Put result from CTX in first 16 bytes following RESBUF. The result must be in little endian byte order. 
Name: md2_finish_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. 
Name: md2_stream; Comment: Compute MD2 message digest for bytes read from STREAM. The resulting message digest number will be written into the 16 bytes beginning at RESBLOCK. 
Name: md2_buffer; Comment: Compute MD5 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: md2_update_chksum; Comment: adds 16 bytes to the checksum 
Name: md2_process_block; Comment: Process LEN bytes of BUFFER, accumulating context into CTX. 
Name: md4_init_ctx; Comment: Initialize structure containing state of computation. (RFC 1320, 3.3: Step 3) 
Name: md4_read_ctx; Comment: Put result from CTX in first 16 bytes following RESBUF. The result must be in little endian byte order. 
Name: md4_finish_ctx; Comment: Process the remaining bytes in the internal buffer and the usual prolog according to the standard and write the result to RESBUF. 
Name: md4_stream; Comment: Compute MD4 message digest for bytes read from STREAM. The resulting message digest number will be written into the 16 bytes beginning at RESBLOCK. 
Name: md4_buffer; Comment: Compute MD4 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: md4_process_block; Comment: Process LEN bytes of BUFFER, accumulating context into CTX. It is assumed that LEN % 64 == 0. 
Name: mkostemp; Comment: None they are replaced with a string that makes the file name unique. Then open the file and return a fd. 
Name: dup_noinherit; Comment: Duplicates a file handle, making the copy uninheritable. Returns -1 for a file handle that is equivalent to closed. 
Name: fd_safer_noinherit; Comment: Returns a file descriptor equivalent to FD, except that the resulting file descriptor is none of STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO. FD must be open and non-inheritable. The result will be non-inheritable as well. If FD < 0, FD itself is returned. 
Name: pipe2_safer; Comment: Like pipe2, but ensure that neither of the file descriptors is STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO. 
Name: gettext_quote; Comment: MSGID approximates a quotation mark. Return its translation if it has one; otherwise, return either it or "_"", depending on S. S is either clocale_quoting_style or locale_quoting_style. 
Name: sift_states_backward; Comment: This function checks the STATE_LOG from the SCTX->last_str_idx to 0 and sift the nodes in each states according to the following rules. Updated state_log will be wrote to STATE_LOG. Rules: We throw away the Node 'a' in the STATE_LOG[STR_IDX] if... 1. When STR_IDX == MATCH_LAST(the last index in the state_log): _If 'a' isn't the LAST_NODE and 'a' can't epsilon transit to _the LAST_NODE, we throw away the node 'a'. 2. When 0 <= STR_IDX < MATCH_LAST and 'a' accepts _string 's' and transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX+strlen('s')], we throw _ away the node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX+strlen('s')] but 'b' is _ thrown away, we throw away the node 'a'. 3. When 0 <= STR_IDX < MATCH_LAST and 'a' epsilon transit to 'b': _i. If 'b' isn't in the STATE_LOG[STR_IDX], we throw away the _ node 'a'. _ii. If 'b' is in the STATE_LOG[STR_IDX] but 'b' is thrown away, _ we throw away the node 'a'. 
Name: find_subexp_node; Comment: Find the first node which is '(' or ')' and whose index is SUBEXP_IDX. Search '(' if FL_OPEN, or search ')' otherwise. TODO: This function isn't efficient... _ Because there might be more than one nodes whose types are _ OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all _ nodes. _ E.g. RE: (a){2} 
Name: check_arrival_add_next_nodes; Comment: Calculate the destination nodes of CUR_NODES at STR_IDX, and append them to NEXT_NODES. TODO: This function is similar to the functions transit_state*(), _ however this function has many additional works. _ Can't we unify them? 
Name: re_acquire_state; Comment: Search for the state whose node_set is equivalent to NODES. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: re_acquire_state_context; Comment: Search for the state whose node_set is equivalent to NODES and whose context is equivalent to CONTEXT. Return the pointer to the state, if we found it in the DFA. Otherwise create the new one and return it. In case of an error return NULL and set the error code in ERR. Note: - We assume NULL as the invalid state, then it is possible that _ return value is NULL and ERR is REG_NOERROR. _ - We never return non-NULL value in case of any errors, it is for _ optimization. 
Name: sha1_stream; Comment: Compute SHA1 message digest for bytes read from STREAM. The resulting message digest number will be written into the 20 bytes beginning at RESBLOCK. 
Name: set_uint32; Comment: Copy the value from v into the memory location pointed to by *CP, If your architecture allows unaligned access, this is equivalent to (__typeof__ (v) *) cp = v 
Name: shaxxx_stream; Comment: Compute message digest for bytes read from STREAM using algorithm ALG. Write the message digest into RESBLOCK, which contains HASHLEN bytes. The initial and finishing operations are INIT_CTX and FINISH_CTX. Return zero if and only if successful. 
Name: sha256_buffer; Comment: Compute SHA256 message digest for LEN bytes beginning at BUFFER. The result is always in little endian byte order, so that a byte-wise output yields to the wanted ASCII representation of the message digest. 
Name: nonintr_close; Comment: EINTR handling for close(). These functions can return -1/EINTR even though we don't have any signal handlers set up, namely when we get interrupted via SIGSTOP. 
Name: create_pipe; Comment: Open a pipe connected to a child process. write system read parent -> fd[1] -> STDIN_FILENO -> child if pipe_stdin parent <- fd[0] <- STDOUT_FILENO <- child if pipe_stdout read system write At least one of pipe_stdin, pipe_stdout must be true. pipe_stdin and prog_stdin together determine the child's standard input. pipe_stdout and prog_stdout together determine the child's standard output. If pipe_stdin is true, prog_stdin is ignored. If pipe_stdout is true, prog_stdout is ignored. 
Name: create_pipe_bidi; Comment: Open a bidirectional pipe. write system read parent -> fd[1] -> STDIN_FILENO -> child parent <- fd[0] <- STDOUT_FILENO <- child read system write 
Name: create_pipe_in; Comment: Open a pipe for input from a child process.The child's stdin comes from a file. read system write parent <- fd[0] <- STDOUT_FILENO <- child 
Name: create_pipe_out; Comment: Open a pipe for output to a child process.The child's stdout goes to a file. write system read parent -> fd[0] -> STDIN_FILENO -> child 
Name: posix_spawn; Comment: Spawn a new process executing PATH with the attributes describes in *ATTRP. Before running the process perform the actions described in FILE-ACTIONS. 
Name: posix_spawnattr_destroy; Comment: Initialize data structure for file attribute for 'spawn' call. 
Name: posix_spawnattr_init; Comment: Initialize data structure for file attribute for 'spawn' call. 
Name: posix_spawnattr_setflags; Comment: Store flags in the attribute structure. 
Name: posix_spawnattr_setpgroup; Comment: Store process group ID in the attribute structure. 
Name: posix_spawnattr_setsigmask; Comment: Set signal mask for the new process in ATTR to SIGMASK. 
Name: grow_inheritable_handles; Comment: Grows inh_handles->count so that it becomes > newfd. Returns 0 upon success. In case of failure, -1 is returned, with errno set. 
Name: shrink_inheritable_handles; Comment: Reduces inh_handles->count to the minimum needed. 
Name: close_inheritable_handles; Comment: Closes all handles in inh_handles. 
Name: memiszero; Comment: Tests whether a memory region, starting at P and N bytes long, contains only zeroes. 
Name: sigisempty; Comment: Tests whether *S contains no signals. 
Name: open_handle; Comment: Opens a HANDLE to a file. Upon failure, returns INVALID_HANDLE_VALUE with errno set. 
Name: do_open; Comment: Executes an 'open' action. Returns 0 upon success. In case of failure, -1 is returned, with errno set. 
Name: do_dup2; Comment: Executes a 'dup2' action. Returns 0 upon success. In case of failure, -1 is returned, with errno set. 
Name: do_close; Comment: Executes a 'close' action. Returns 0 upon success. In case of failure, -1 is returned, with errno set. 
Name: __spawni; Comment: Spawn a new process executing PATH with the attributes describes in *ATTRP. Before running the process perform the actions described in FILE-ACTIONS. 
Name: posix_spawnp; Comment: Spawn a new process executing FILE with the attributes describes in *ATTRP. Before running the process perform the actions described in FILE-ACTIONS. 
Name: __posix_spawn_file_actions_realloc; Comment: Function used to increase the size of the allocated array. This function is called from the 'add'-functions. 
Name: posix_spawn_file_actions_init; Comment: Initialize data structure for file attribute for 'spawn' call. 
Name: printf; Comment: avoid collision with printf.c 
Name: fprintf; Comment: avoid collision with fprintf.c 
Name: vprintf; Comment: avoid collision with vprintf.c 
Name: __stpcpy; Comment: Copy SRC to DEST, returning the address of the terminating '_0' in DEST. 
Name: strndup; Comment: A replacement function, for systems that lack strndup. Copyright (C) 1996-1998, 2001-2003, 2005-2007, 2009-2021 Free Software Foundation, Inc. This file is free software: you can redistribute it andor modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This file is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. 
Name: strnlen; Comment: Find the length of STRING, but scan at most MAXLEN characters. If no '_0' terminator is found in that many characters, return MAXLEN. 
Name: __strtok_r; Comment: s = "abc_0-def_0"
Name: path_search; Comment: Path search algorithm, for tmpnam, tmpfile, etc. If DIR is non-null and exists, uses it; otherwise uses the first of $TMPDIR, P_tmpdir, /tmp that exists. Copies into TMPL a template suitable for use with mk[s]temp. Will fail (-1) if DIR is non-null and doesn't exist, none of the searched dirs exists, or there's not enough space in TMPL. 
Name: update_timespec; Comment: Normalize any UTIME_NOW or UTIME_OMIT values in (*TS)[0] and (*TS)[1], using STATBUF to obtain the current timestamps of the file. If both times are UTIME_NOW, set *TS to NULL (as this can avoid some permissions issues). If both times are UTIME_OMIT, return true (nothing further beyond the prior collection of STATBUF is necessary); otherwise return false. 
Name: cleanup_slaves; Comment: The cleanup action. It gets called asynchronously. 
Name: cleanup_slaves_action; Comment: The cleanup action, taking a signal argument. It gets called asynchronously. 
Name: register_slave_subprocess; Comment: Register a subprocess as being a slave process. This means that the subprocess will be terminated when its creator receives a catchable fatal signal or exits normally. Registration ends when wait_subprocess() notices that the subprocess has exited. 
Name: unregister_slave_subprocess; Comment: Unregister a child from the list of slave subprocesses. 
Name: wait_subprocess; Comment: Wait for a subprocess to finish. Return its exit code. If it didn't terminate correctly, exit if exit_on_error is true, otherwise return 127. 
Name: waitpid; Comment: for _cwait, WAIT_CHILD 
Name: quoted_arg_length; Comment: Returns the length of a quoted argument string. 
Name: quoted_arg_string; Comment: Produces a quoted argument string. Stores exactly quoted_arg_length (STRING) + 1 bytes, including the final NUL byte, at MEM. Returns a pointer past the stored quoted argument string. 
Name: xnmalloc; Comment: Allocate an array of N objects, each with S bytes of memory, dynamically, with error checking. S must be nonzero. 
Name: xmemdup0; Comment: Clone an arbitrary block of bytes P of size S, with error checking, and include a terminating NUL byte. P is of type 'void const ', to make it easier to use this with other mem functions that return 'void ', but since appending a NUL byte only makes sense on bytes, the return type is 'char '. The terminating NUL makes it safe to use strlen or rawmemchr to check for embedded NUL; it also speeds up algorithms such as escape sequence processing on arbitrary memory, by making it always safe to read the byte after the escape character rather than having to check if each escape character is the last byte in the object. 
Name: read_file; Comment: Read the contents of an input stream, and return it, terminated with a NUL byte. 
Name: sockaddr_set_data; Comment: Fill SA as per the data in IP and PORT. SA should point to struct sockaddr_storage if ENABLE_IPV6 is defined, to struct sockaddr_in otherwise. 
Name: sockaddr_get_data; Comment: Get the data of SA, specifically the IP address and the port. If you're not interested in one or the other information, pass NULL as the pointer. 
Name: sockaddr_size; Comment: Return the size of the sockaddr structure depending on its family. 
Name: resolve_bind_address; Comment: Resolve the bind address specified via --bind-address and store it to SA. The resolved value is stored in a static variable and reused after the first invocation of this function. Returns true on success, false on failure. 
Name: connect_with_timeout; Comment: Like connect, but specifies a timeout. If connecting takes longer than TIMEOUT seconds, -1 is returned and errno is set to ETIMEDOUT. 
Name: connect_to_ip; Comment: Connect via TCP to the specified address and port. If PRINT is non-NULL, it is the host name to print that we're connecting to. 
Name: connect_to_host; Comment: Connect via TCP to a remote host on the specified port. HOST is resolved as an Internet host name. If HOST resolves to more than one IP address, they are tried in the order returned by DNS until connecting to one of them succeeds. 
Name: bind_local; Comment: Create a socket, bind it to local interface BIND_ADDRESS on port *PORT, set up a listen backlog, and return the resulting socket, or -1 in case of error. BIND_ADDRESS is the address of the interface to bind to. If it is NULL, the socket is bound to the default address. PORT should point to the port number that will be used for the binding. If that number is 0, the system will choose a suitable port, and the chosen value will be written to *PORT. Calling accept() on such a socket waits for and accepts incoming TCP connections. 
Name: accept_connection; Comment: Like a call to accept(), but with the added check for timeout. In other words, accept a client connection on LOCAL_SOCK, and return the new socket used for communication with the client. LOCAL_SOCK should have been bound, e.g. using bind_local(). The caller is blocked until a connection is established. If no connection is established for opt.connect_timeout seconds, the function exits with an error status. 
Name: socket_ip_address; Comment: Get the IP address associated with the connection on FD and store it to IP. Return true on success, false otherwise. If ENDPOINT is ENDPOINT_LOCAL, it returns the address of the local (client) side of the socket. Else if ENDPOINT is ENDPOINT_PEER, it returns the address of the remote (peer's) side of the socket. 
Name: socket_family; Comment: Get the socket family of connection on FD and store Return family type on success, -1 otherwise. If ENDPOINT is ENDPOINT_LOCAL, it returns the sock family of the local (client) side of the socket. Else if ENDPOINT is ENDPOINT_PEER, it returns the sock family of the remote (peer's) side of the socket. 
Name: retryable_socket_connect_error; Comment: Return true if the error from the connect code can be considered retryable. Wget normally retries after errors, but the exception are the "unsupported protocol" type errors (possible on IPv4/IPv6 dual family systems) and "connection refused". 
Name: select_fd_internal; Comment: Wait for a single descriptor to become available, timing out after MAXTIME seconds. Returns 1 if FD is available, 0 for timeout and -1 for error. The argument WAIT_FOR can be a combination of WAIT_FOR_READ and WAIT_FOR_WRITE. This is a mere convenience wrapper around the select call, and should be taken as such (for example, it doesn't implement Wget's 0-timeout-means-no-timeout semantics.) 
Name: test_socket_open; Comment: Return true if the connection to the remote site established through SOCK is still open. Specifically, this function returns true if SOCK is not ready for reading. This is because, when the connection closes, the socket is ready for reading because EOF is about to be delivered. A side effect of this method is that sockets that have pending data are considered non-open. This is actually a good thing for callers of this function, where such pending data can only be unwanted leftover from a previous request. 
Name: sock_read; Comment: Basic socket operations, mostly EINTR wrappers. 
Name: fd_register_transport; Comment: Register the transport layer operations that will be used when reading, writing, and polling FD. This should be used for transport layers like SSL that piggyback on sockets. FD should otherwise be a real socket, on which you can call getpeername, etc. 
Name: fd_transport_context; Comment: Return context of the transport registered with fd_register_transport. This assumes fd_register_transport was previously called on FD. 
Name: poll_internal; Comment: When fd_read/fd_write are called multiple times in a loop, they should remember the INFO pointer instead of fetching it every time. It is not enough to compare FD to LAST_FD because FD might have been closed and reopened. modified_tick ensures that changes to transport_map will not be unnoticed. This is a macro because we want the static storage variables to be per-function. 
Name: fd_read; Comment: Read no more than BUFSIZE bytes of data from FD, storing them to BUF. If TIMEOUT is non-zero, the operation aborts if no data is received after that many seconds. If TIMEOUT is -1, the value of opt.timeout is used for TIMEOUT. 
Name: fd_peek; Comment: Like fd_read, except it provides a "preview" of the data that will be read by subsequent calls to fd_read. Specifically, it copies no more than BUFSIZE bytes of the currently available data to BUF and returns the number of bytes copied. Return values and timeout semantics are the same as those of fd_read. CAVEAT: Do not assume that the first subsequent call to fd_read will retrieve the same amount of data. Reading can return more or less data, depending on the TCP implementation and other circumstances. However, barring an error, it can be expected that all the peeked data will eventually be read by fd_read. 
Name: fd_write; Comment: Write the entire contents of BUF to FD. If TIMEOUT is non-zero, the operation aborts if no data is received after that many seconds. If TIMEOUT is -1, the value of opt.timeout is used for TIMEOUT. 
Name: fd_errstr; Comment: Report the most recent error(s) on FD. This should only be called after fd_* functions, such as fd_read and fd_write, and only if they return a negative result. For errors coming from other calls such as setsockopt or fopen, strerror should continue to be used. If the transport doesn't support error messages or doesn't supply one, strerror(errno) is returned. The returned error message should not be used after fd_close has been called. 
Name: fd_close; Comment: Close the file descriptor FD. 
Name: convert_all_links; Comment: This function is called when the retrieval is done to convert the links that have been downloaded. It has to be called at the end of the retrieval, because only then does Wget know conclusively which URLs have been downloaded, and which not, so it can tell which direction to convert to. The "direction" means that the URLs to the files that have been downloaded get converted to the relative URL which will point to that file. And the other URLs get converted to the remote URL on the server. All the downloaded HTMLs are kept in downloaded_html_files, and downloaded URLs in urls_downloaded. All the information is extracted from these two lists. 
Name: convert_links; Comment: Change the links in one file. LINKS is a list of links in the document, along with their positions and the desired direction of the conversion. 
Name: construct_relative; Comment: Construct and return a link that points from BASEFILE to LINKFILE. Both files should be local file names, BASEFILE of the referrering file, and LINKFILE of the referred file. Examples: cr("foo", "bar") -> "bar" cr("A/foo", "A/bar") -> "bar" cr("A/foo", "A/B/bar") -> "B/bar" cr("A/X/foo", "A/Y/bar") -> "../Y/bar" cr("X/", "Y/bar") -> "../Y/bar" (trailing slash does matter in BASE) Both files should be absolute or relative, otherwise strange results might ensue. The function makes no special efforts to handle "." and ".." in links, so make sure they're not there (e.g. using path_simplify). 
Name: convert_basename; Comment: foo.com/bar.cgi?xyz.css" Essentially, we do s/$(basename orig_url)/$(basename link->local_name)/ 
Name: replace_plain; Comment: Replace a string with NEW_TEXT. Ignore quoting. 
Name: replace_attr; Comment: Replace an attribute's original text with NEW_TEXT. 
Name: replace_attr_refresh_hack; Comment: The same as REPLACE_ATTR, but used when replacing <meta http-equiv=refresh content="new_text"> because we need to append "timeout_value; URL=" before the next_text. 
Name: find_fragment; Comment: Find the first occurrence of '#' in [BEG, BEG+SIZE) that is not preceded by '&'. If the character is not found, return zero. If the character is found, return true and set BP and EP to point to the beginning and end of the region. This is used for finding the fragment indentifiers in URLs. 
Name: local_quote_string; Comment: Quote FILE for use as local reference to an HTML file. We quote ? as %3F to avoid passing part of the file name as the parameter when browsing the converted file through HTTP. However, it is safe to do this only when `--adjust-extension' is turned on. This is because converting "index.html?foo=bar" to "index.html%3Ffoo=bar" would break local browsing, as the latter isn't even recognized as an HTML file! However, converting "index.html?foo=bar.html" to "index.html%3Ffoo=bar.html" should be safe for both local and HTTP-served browsing. We always quote "#" as "%23", "%" as "%25" and ";" as "%3B" because those characters have special meanings in URLs. 
Name: match_except_index; Comment: Return true if S1 and S2 are the same, except for "/index.html". The three cases in which it returns one are (substitute any substring for "foo"): m("foo/index.html", "foo/") ==> 1 m("foo/", "foo/index.html") ==> 1 m("foo", "foo/index.html") ==> 1 m("foo", "foo/" ==> 1 m("foo", "foo") ==> 1 
Name: dissociate_urls_from_file; Comment: Remove all associations from various URLs to FILE from dl_url_file_map. 
Name: register_download; Comment: Register that URL has been successfully downloaded to FILE. This is used by the link conversion code to convert references to URLs to references to local files. It is also being used to check if a URL has already been downloaded. 
Name: register_redirection; Comment: Register that FROM has been redirected to "TO". This assumes that TO is successfully downloaded and already registered using register_download() above. 
Name: register_delete_file; Comment: Register that the file has been deleted. 
Name: register_html; Comment: Register that FILE is an HTML file that has been downloaded. 
Name: register_css; Comment: Register that FILE is a CSS file that has been downloaded. 
Name: downloaded_mode_to_ptr; Comment: We're storing "modes" of type downloaded_file_t in the hash table. However, our hash tables only accept pointers for keys and values. So when we need a pointer, we use the address of a downloaded_file_t variable of static storage. 
Name: downloaded_file; Comment: Remembers which files have been downloaded. In the standard case, should be called with mode == FILE_DOWNLOADED_NORMALLY for each file we actually download successfully (i.e. not for ones we have failures on or that we skip due to -N). When we've downloaded a file and tacked on a ".html" extension due to -E, call this function with FILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED rather than FILE_DOWNLOADED_NORMALLY. If you just want to check if a file has been previously added without adding it, call with mode == CHECK_FOR_FILE. Please be sure to call this function with local filenames, not remote URLs. 
Name: html_quote_string; Comment: The function returns the pointer to the malloc-ed quoted version of string s. It will recognize and quote numeric and special graphic entities, as per RFC1866: `&' -> `&amp;' `<' -> `&lt;' `>' -> `&gt;' `"' -> `&quot;' SP -> `&#32;' No other entities are recognized or replaced. 
Name: cookie_new; Comment: Allocate and return a new, empty cookie structure. 
Name: cookie_expired_p; Comment: Non-zero if the cookie has expired. Assumes cookies_now has been set by one of the entry point functions. 
Name: delete_cookie; Comment: Deallocate COOKIE and its components. 
Name: find_matching_cookie; Comment: Find and return a cookie in JAR whose domain, path, and attribute name correspond to COOKIE. If found, PREVPTR will point to the location of the cookie previous in chain, or NULL if the found cookie is the head of a chain. If no matching cookie is found, return NULL. 
Name: store_cookie; Comment: Store COOKIE to the jar. This is done by placing COOKIE at the head of its chain. However, if COOKIE matches a cookie already in memory, as determined by find_matching_cookie, the old cookie is unlinked and destroyed. The key of each chain's hash table entry is allocated only the first time; next hash_table_put's reuse the same key. 
Name: discard_matching_cookie; Comment: Discard a cookie matching COOKIE's domain, port, path, and attribute name. This gets called when we encounter a cookie whose expiry date is in the past, or whose max-age is set to 0. The former corresponds to netscape cookie spec, while the latter is specified by rfc2109. 
Name: parse_set_cookie; Comment: Parse the contents of the `Set-Cookie' header. The header looks like this: name1=value1; name2=value2; ... Trailing semicolon is optional; spaces are allowed between all tokens. Additionally, values may be quoted. A new cookie is returned upon success, NULL otherwise. The first name-value pair will be used to set the cookie's attribute name and value. Subsequent parameters will be checked against field names such as `domain', `path', etc. Recognized fields will be parsed and the corresponding members of COOKIE filled. 
Name: numeric_address_p; Comment: Check whether ADDR matches <digits>.<digits>.<digits>.<digits>. We don't want to call network functions like inet_addr() because all we need is a check, preferably one that is small, fast, and well-defined. 
Name: check_path_match; Comment: Check whether PATH begins with COOKIE_PATH. 
Name: cookie_handle_set_cookie; Comment: Process the HTTP `Set-Cookie' header. This results in storing the cookie or discarding a matching one, or ignoring it completely, all depending on the contents. 
Name: count_char; Comment: Return a count of how many times CHR occurs in STRING. 
Name: find_chains_of_host; Comment: Find the cookie chains whose domains match HOST and store them to DEST. A cookie chain is the head of a list of cookies that belong to a host/domain. Given HOST "img.search.xemacs.org", this function will return the chains for "img.search.xemacs.org", "search.xemacs.org", and "xemacs.org" -- those of them that exist (if any), that is. DEST should be large enough to accept (in the worst case) as many elements as there are domain components of HOST. 
Name: path_matches; Comment: If FULL_PATH begins with PREFIX, return the length of PREFIX, zero otherwise. 
Name: cookie_matches_url; Comment: Return true if COOKIE matches the provided parameters of the URL being downloaded: HOST, PORT, PATH, and SECFLAG. If PATH_GOODNESS is non-NULL, store the "path goodness" value there. That value is a measure of how closely COOKIE matches PATH, used for ordering cookies. 
Name: equality_comparator; Comment: Comparator used for uniquifying the list. 
Name: eliminate_dups; Comment: Eliminate duplicate cookies. "Duplicate cookies" are any two cookies with the same attr name and value. Whenever a duplicate pair is found, one of the cookies is removed. 
Name: goodness_comparator; Comment: Comparator used for sorting by quality. 
Name: cookie_header; Comment: Generate a `Cookie' header for a request that goes to HOST:PORT and requests PATH from the server. The resulting string is allocated with `malloc', and the caller is responsible for freeing it. If no cookies pertain to this request, i.e. no cookie header should be generated, NULL is returned. 
Name: domain_port; Comment: If the region [B, E) ends with :<digits>, parse the number, return it, and store new boundary (location of the `:') to DOMAIN_E_PTR. If port is not specified, return 0. 
Name: cookie_jar_load; Comment: Load cookies from FILE. 
Name: cookie_jar_save; Comment: Save cookies, in format described above, to FILE. 
Name: cookie_jar_delete; Comment: Clean up cookie-related data. 
Name: get_uri_string; Comment: Given a detected URI token, get only the URI specified within. Also adjust the starting position and length of the string. A URI can be specified with or without quotes, and the quotes can be single or double quotes. In addition there can be whitespace after the opening parenthesis and before the closing parenthesis. 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: yy_get_next_buffer; Comment: yy_get_next_buffer - try to read in a new bufferReturns a code representing an action: *_EOB_ACT_LAST_MATCH - *_EOB_ACT_CONTINUE_SCAN - continue scanning from current position *_EOB_ACT_END_OF_FILE - end of file 
Name: get_status_for_err; Comment: XXX: I don't like that newly-added uerr_t codes will doubtless fall through the craccks, or the fact that we seem to have way more codes than we know what to do with. Need to go through and sort through the truly essential codes, and merge the rest with those. Quite a few are never even used! Quite a few of the codes below would have no business being returned to retrieve_url's caller, but since it's very difficult to determine which do and which don't, I grab virtually all of them to be safe. 
Name: inform_exit_status; Comment: inform_exit_statusEnsure that Wget's exit status will reflect the problem indicated by ERR, unless the exit status has already been set to reflect a more important problem. 
Name: ftp_response; Comment: Get the response of FTP server and allocate enough room to handle it. <CR> and <LF> characters are stripped from the line, and the line is 0-terminated. All the response lines but the last one are skipped. The last line is determined as described in RFC959. If the line is successfully read, FTPOK is returned, and *ret_line is assigned a freshly allocated line. Otherwise, FTPRERR is returned, and the value of *ret_line should be ignored. 
Name: ftp_request; Comment: Returns the malloc-ed FTP request, ending with <CR><LF>, printing it if printing is required. If VALUE is NULL, just use command<CR><LF>. 
Name: ftp_login; Comment: Sends the USER and PASS commands to the server, to control connection socket csock. 
Name: ftp_port; Comment: Bind a port and send the appropriate PORT command to the FTP server. Use acceptport after RETR, to get the socket of data connection. 
Name: ftp_lprt; Comment: Bind a port and send the appropriate PORT command to the FTP server. Use acceptport after RETR, to get the socket of data connection. 
Name: ftp_eprt; Comment: Bind a port and send the appropriate PORT command to the FTP server. Use acceptport after RETR, to get the socket of data connection. 
Name: ftp_auth; Comment: Sends an AUTH command as defined by RFC 2228, deriving its argument from the scheme. For example, if the provided scheme is SCHEME_FTPS, the command sent will be "AUTH TLS". Currently, this is the only scheme supported, so this function will return FTPNOAUTH when supplied a different one. It will also return FTPNOAUTH if the target server does not support FTPS. 
Name: ftp_pasv; Comment: Similar to ftp_port, but uses `PASV' to initiate the passive FTP transfer. Reads the response from server and parses it. Reads the host and port addresses and returns them. 
Name: ftp_lpsv; Comment: Similar to ftp_lprt, but uses `LPSV' to initiate the passive FTP transfer. Reads the response from server and parses it. Reads the host and port addresses and returns them. 
Name: ftp_epsv; Comment: Similar to ftp_eprt, but uses `EPSV' to initiate the passive FTP transfer. Reads the response from server and parses it. Reads the host and port addresses and returns them. 
Name: ftp_type; Comment: Sends the TYPE request to the server. 
Name: ftp_cwd; Comment: Changes the working directory by issuing a CWD command to the server. 
Name: ftp_rest; Comment: Sends REST command to the FTP server. 
Name: ftp_retr; Comment: Sends RETR command to the FTP server. 
Name: ftp_list; Comment: Sends the LIST command to the server. If FILE is NULL, send just `LIST' (no space). 
Name: ftp_syst; Comment: Sends the SYST command to the server. 
Name: ftp_pwd; Comment: Sends the PWD command to the server. 
Name: ftp_size; Comment: Sends the SIZE command to the server, and returns the value in 'size'.If an error occurs, size is set to zero. 
Name: ftp_process_type; Comment: If URL's params are of the form "type=X", return character X. Otherwise, return 'I' (the default type). 
Name: symperms; Comment: Converts symbolic permissions to number-style ones, e.g. string rwxr-xr-x to 755. For now, it knows nothing of setuid/setgid/sticky. ACLs are ignored. 
Name: clean_line; Comment: Cleans a line of text so that it can be consistently parsed. Destroys <CR> and <LF> in case that they occur at the end of the line and replaces all <TAB> character with <SPACE>. Returns the length of the modified line. 
Name: ftp_parse_unix_ls; Comment: Convert the Un*x-ish style directory listing stored in FILE to a linked list of fileinfo (system-independent) entries. The contents of FILE are considered to be produced by the standard Unix `ls -la' output (whatever that might be). BSD (no group) and SYSV (with group) listings are handled. The time stamps are stored in a separate variable, time_t compatible (I hope). The timezones are ignored. 
Name: ftp_parse_ls; Comment: This function switches between the correct parsing routine depending on the SYSTEM_TYPE. The system type should be based on the result of the "SYST" response of the FTP server. According to this response we will use on of the three different listing parsers that cover the most of FTP servers used nowadays. 
Name: ftp_index; Comment: The function creates an HTML index containing references to given directories and files on the appropriate host. The references are FTP. 
Name: extract; Comment: Extract LENGTH bits from the char array S starting with bit number START. It always reads three consecutive octects, which means it can read past end of data when START is at the edge of the region. 
Name: btoe; Comment: Encode 8 bytes in C as a string of English words and store them to STORE. Returns STORE. 
Name: skey_response; Comment: Calculate the SKEY response, based on the sequence, seed (challenge), and the secret password. The calculated response is used instead of the real password when logging in to SKEY-enabled servers. The result is calculated like this: + Concatenate SEED and PASS and calculate the 16-byte MD5 checksum. + Shorten the checksum to eight bytes by folding the second eight bytes onto the first eight using XOR. The resulting eight-byte sequence is the key. + MD5-process the key, fold the checksum to eight bytes and store it back to the key. Repeat this crunching SEQUENCE times. (Sequence is a number that gets decremented every time the user logs in to the server. Therefore an eavesdropper would have to invert the hash function in order to guess the next one-time password.) + Convert the resulting 64-bit key to 6 English words separated by spaces (see btoe for details) and return the resulting ASCII string. All this is described in section 6 of rfc2289 in more detail. 
Name: ftp_expected_bytes; Comment: Look for regexp "( *[0-9]+ *byte" (literal parenthesis) anywhere in the string S, and return the number converted to wgint, if found, 0 otherwise. 
Name: ftp_do_pasv; Comment: This function sets up a passive data connection with the FTP server. It is merely a wrapper around ftp_epsv, ftp_lpsv and ftp_pasv. 
Name: ftp_do_port; Comment: This function sets up an active data connection with the FTP server. It is merely a wrapper around ftp_eprt, ftp_lprt and ftp_port. 
Name: getftp; Comment: Retrieves a file with denoted parameters through opening an FTP connection to the server. It always closes the data connection, and closes the control connection in case of error. If warc_tmp is non-NULL, the downloaded data will be written there as well. 
Name: ftp_loop_internal; Comment: A one-file FTP loop. This is the part where FTP retrieval is retried, and retried, and retried, and... This loop either gets commands from con, or (if ON_YOUR_OWN is set), makes them up to retrieve the file given by the URL. 
Name: ftp_get_listing; Comment: Return the directory listing in a reusable format. The directory is specified in u->dir. 
Name: ftp_retrieve_list; Comment: Retrieve a list of files given in struct fileinfo linked list. If a file is a symbolic link, do not retrieve it, but rather try to set up a similar link on the local disk, if the symlinks are supported. If opt.recursive is set, after all files have been retrieved, ftp_retrieve_dirs will be called to retrieve the directories. 
Name: ftp_retrieve_dirs; Comment: Retrieve the directories given in a file list. This function works by simply going through the linked list and calling ftp_retrieve_glob on each directory entry. The function knows about excluded directories. 
Name: has_insecure_name_p; Comment: Return true if S has a leading '/' or contains '../' 
Name: is_invalid_entry; Comment: Test if the file node is invalid. This can occur due to malformed ormaliciously crafted listing files being returned by the server. Currently, this function only tests if there are multiple entries in the listing file by the same name. However this function can be expanded as more such illegal listing formats are discovered. 
Name: ftp_retrieve_glob; Comment: A near-top-level function to retrieve the files in a directory. The function calls ftp_get_listing, to get a linked list of files. Then it weeds out the file names that do not match the pattern. ftp_retrieve_list is called with this updated list as an argument. If the argument ACTION is GLOB_GETONE, just download the file (but first get the listing, so that the time-stamp is heeded); if it's GLOB_GLOBALL, use globbing; if it's GLOB_GETALL, download the whole directory. 
Name: ftp_loop; Comment: The wrapper that calls an appropriate routine according to contents of URL. Inherently, its capabilities are limited on what can be encoded into a URL. 
Name: delelement; Comment: Delete an element from the fileinfo linked list. Returns the address of the next element, or NULL if the list is exhausted. It can modify the start of the list. 
Name: freefileinfo; Comment: Free the fileinfo linked list of files. 
Name: prime_size; Comment: Find a prime near, but greater than or equal to SIZE. The primes are looked up from a table with a selection of primes convenient for this purpose. PRIME_OFFSET is a minor optimization: it specifies start position for the search for the large enough prime. The final offset is stored in the same variable. That way the list of primes does not have to be scanned from the beginning each time around. 
Name: hash_table_new; Comment: Create a hash table with hash function HASH_FUNCTION and test function TEST_FUNCTION. The table is empty (its count is 0), but pre-allocated to store at least ITEMS items. ITEMS is the number of items that the table can accept without needing to resize. It is useful when creating a table that is to be immediately filled with a known number of items. In that case, the regrows are a waste of time, and specifying ITEMS correctly will avoid them altogether. Note that hash tables grow dynamically regardless of ITEMS. The only use of ITEMS is to preallocate the table and avoid unnecessary dynamic regrows. Don't bother making ITEMS prime because it's not used as size unchanged. To start with a small table that grows as needed, simply specify zero ITEMS. If hash and test callbacks are not specified, identity mapping is assumed, i.e. pointer values are used for key comparison. (Common Lisp calls such tables EQ hash tables, and Java calls them IdentityHashMaps.) If your keys require different comparison, specify hash and test functions. For easy use of C strings as hash keys, you can use the convenience functions make_string_hash_table and make_nocase_string_hash_table. 
Name: hash_table_destroy; Comment: Free the data associated with hash table HT. 
Name: hash_table_get; Comment: Get the value that corresponds to the key KEY in the hash table HT. If no value is found, return NULL. Note that NULL is a legal value for value; if you are storing NULLs in your hash table, you can use hash_table_contains to be sure that a (possibly NULL) value exists in the table. Or, you can use hash_table_get_pair instead of this function. 
Name: hash_table_get_pair; Comment: Like hash_table_get, but writes out the pointers to both key and value. Returns non-zero on success. 
Name: hash_table_contains; Comment: Return 1 if HT contains KEY, 0 otherwise. 
Name: grow_hash_table; Comment: Grow hash table HT as necessary, and rehash all the key-value mappings. 
Name: hash_table_put; Comment: Put VALUE in the hash table HT under the key KEY. This regrows the table if necessary. 
Name: hash_table_remove; Comment: Remove KEY->value mapping from HT. Return 0 if there was no such entry; return 1 if an entry was removed. 
Name: hash_table_clear; Comment: Clear HT of all entries. After calling this function, the count and the fullness of the hash table will be zero. The size will remain unchanged. 
Name: hash_table_for_each; Comment: Call FN for each entry in HT. FN is called with three arguments: the key, the value, and ARG. When FN returns a non-zero value, the mapping stops. It is undefined what happens if you add or remove entries in the hash table while hash_table_for_each is running. The exception is the entry you're currently mapping over; you may call hash_table_put or hash_table_remove on that entry's key. That is also the reason why this function cannot be implemented in terms of hash_table_iterate. 
Name: hash_table_iterate; Comment: None for (hash_table_iterate (ht, &iter); hash_table_iter_next (&iter); ) ... do something with iter.key and iter.value ... The iterator does not need to be deallocated after use. The hash table must not be modified while being iterated over. 
Name: hash_table_iter_next; Comment: Get the next hash table entry. ITER is an iterator object initialized using hash_table_iterate. While there are more entries, the key and value pointers are stored to ITER->key and ITER->value respectively and 1 is returned. When there are no more entries, 0 is returned. If the hash table is modified between calls to this function, the result is undefined. 
Name: hash_table_count; Comment: Return the number of elements in the hash table. This is not the same as the physical size of the hash table, which is always greater than the number of elements. 
Name: cmp_string; Comment: Frontend for strcmp usable for hash tables. 
Name: make_string_hash_table; Comment: Return a hash table of preallocated to store at least ITEMS items suitable to use strings as keys. 
Name: string_cmp_nocase; Comment: Like string_cmp, but doing case-insensitive comparison. 
Name: make_nocase_string_hash_table; Comment: Like make_string_hash_table, but uses string_hash_nocase and string_cmp_nocase. 
Name: address_list_get_bounds; Comment: Get the bounds of the address list. 
Name: address_list_address_at; Comment: Return a pointer to the address at position POS. 
Name: address_list_contains; Comment: Return true if AL contains IP, false otherwise. 
Name: address_list_set_faulty; Comment: Mark the INDEXth element of AL as faulty, so that the next time this address list is used, the faulty element will be skipped. 
Name: address_list_set_connected; Comment: Set the "connected" flag to true. This flag used by connect.c to see if the host perhaps needs to be resolved again. 
Name: address_list_connected_p; Comment: Return the value of the "connected" flag. 
Name: address_list_from_addrinfo; Comment: Create an address_list from the addresses in the given struct addrinfo. 
Name: cmp_prefer_ipv4; Comment: Compare two IP addresses by family, giving preference to the IPv4 address (sorting it first). In other words, return -1 if ADDR1 is IPv4 and ADDR2 is IPv6, +1 if ADDR1 is IPv6 and ADDR2 is IPv4, and 0 otherwise. This is intended to be used as the comparator arg to a qsort-like sorting function, which is why it accepts generic pointers. 
Name: cmp_prefer_ipv6; Comment: Like the above, but give preference to the IPv6 address. 
Name: address_list_from_ipv4_addresses; Comment: Create an address_list from a NULL-terminated vector of IPv4 addresses. This kind of vector is returned by gethostbyname. 
Name: address_list_release; Comment: Mark the address list as being no longer in use. This will reduce its reference count which will cause the list to be freed when the count reaches 0. 
Name: gethostbyname_with_timeout; Comment: Just like gethostbyname, except it times out after TIMEOUT seconds. In case of timeout, NULL is returned and errno is set to ETIMEDOUT. The function makes sure that when NULL is returned for reasons other than timeout, errno is reset. 
Name: host_errstr; Comment: Print error messages for host errors. 
Name: getaddrinfo_with_timeout; Comment: Just like getaddrinfo, except it times out after TIMEOUT seconds. In case of timeout, the EAI_SYSTEM error code is returned and errno is set to ETIMEDOUT. 
Name: print_address; Comment: Return a textual representation of ADDR, i.e. the dotted quad for IPv4 addresses, and the colon-separated list of hex words (with all zeros omitted, etc.) for IPv6 addresses. 
Name: is_valid_ipv4_address; Comment: The following two functions were adapted from glibc's implementation of inet_pton, written by Paul Vixie. 
Name: cache_query; Comment: Return the host's resolved addresses from the cache, if available. 
Name: cache_store; Comment: Cache the DNS lookup of HOST. Subsequent invocations of lookup_host will return the cached value. 
Name: cache_remove; Comment: Remove HOST from the DNS cache. Does nothing is HOST is not in the cache. 
Name: lookup_host; Comment: Look up HOST in DNS and return a list of IP addresses. This function caches its result so that, if the same host is passed the second time, the addresses are returned without DNS lookup. (Use LH_REFRESH to force lookup, or set opt.dns_cache to 0 to globally disable caching.) The order of the returned addresses is affected by the setting of opt.prefer_family: if it is set to prefer_ipv4, IPv4 addresses are placed at the beginning; if it is prefer_ipv6, IPv6 ones are placed at the beginning; otherwise, the order is left intact. The relative order of addresses with the same family is left undisturbed in either case. FLAGS can be a combination of: LH_SILENT - don't print the "resolving ... done" messages. LH_BIND - resolve addresses for use with bind, which under IPv6 means to use AI_PASSIVE flag to getaddrinfo. Passive lookups are not cached under IPv6. LH_REFRESH - if HOST is cached, remove the entry from the cache and resolve it anew. 
Name: accept_domain; Comment: Determine whether a URL is acceptable to be followed, according to a list of domains to accept. 
Name: sufmatch; Comment: Check whether WHAT is matched in LIST, each element of LIST being a pattern to match WHAT against, using backward matching (see match_backwards() in utils.c). If an element of LIST matched, 1 is returned, 0 otherwise. 
Name: hsts_find_entry; Comment: Private functions. Feel free to make some of these public when needed. 
Name: hsts_add_entry; Comment: Creates a new entry, but does not check whether that entry already exists. This function assumes that check has already been done by the caller. 
Name: hsts_new_entry; Comment: Creates a new entry, unless an identical one already exists. 
Name: hsts_file_access_valid; Comment: Test: - The file is a regular file (ie. not a symlink), and - The file is not world-writable. 
Name: hsts_match; Comment: Changes the given URLs according to the HSTS policy. If there's no host in the store that either congruently or not, matches the given URL, no changes are made. Returns true if the URL was changed, or false if it was left intact. 
Name: hsts_store_entry; Comment: Add a new HSTS Known Host to the HSTS store. If the host already exists, its information is updated, or it'll be removed from the store if max_age is zero. Bear in mind that the store is kept in memory, and will not be written to disk until hsts_store_save is called. This function regrows the in-memory HSTS store if necessary. Currently, for a host to be taken into consideration, two conditions have to be met: - Connection must be through a secure channel (HTTPS). - The host must not be an IPv4 or IPv6 address. The RFC 6797 states that hosts that match IPv4 or IPv6 format should be discarded at URI rewrite time. But we short-circuit that check here, since there's no point in storing a host that will never be matched. Returns true if a new entry was actually created, or false if an existing entry was updated/deleted. 
Name: tagstack_pop; Comment: remove ts and everything after it from the stack 
Name: decode_entity; Comment: Decode the HTML character entity at *PTR, considering END to be end of buffer. It is assumed that the "&" character that marks the beginning of the entity has been seen at *PTR-1. If a recognized ASCII entity is seen, it is returned, and *PTR is moved to the end of the entity. Otherwise, -1 is returned and *PTR left unmodified. The recognized entities are: &lt, &gt, &amp, &apos, and &quot. 
Name: convert_and_copy; Comment: None AP_DECODE_ENTITIES -- decode the named and numeric entities in the ASCII range when copying the string. AP_TRIM_BLANKS -- ignore blanks at the beginning and at the end of text, as well as embedded newlines. 
Name: advance_declaration; Comment: Advance over an SGML declaration, such as <!DOCTYPE ...>. In strict comments mode, this is used for skipping over comments as well. To recap: any SGML declaration may have comments associated with it, e.g. <!MY-DECL -- isn't this fun? -- foo bar> An HTML comment is merely an empty declaration (<!>) with a comment attached, like this: <!-- some stuff here --> Several comments may be embedded in one comment declaration: <!-- have -- -- fun --> Whitespace is allowed between and after the comments, but not before the first comment. Additionally, this function attempts to handle double quotes in SGML declarations correctly. 
Name: find_comment_end; Comment: Find the first occurrence of the substring "-->" in [BEG, END) and return the pointer to the character after the substring. If the substring is not found, return NULL. 
Name: name_allowed; Comment: Return true if the string containing of characters inside [b, e) is present in hash table HT. 
Name: map_html_tags; Comment: Map MAPFUN over HTML tags in TEXT, which is SIZE characters long. MAPFUN will be called with two arguments: pointer to an initialized struct taginfo, and MAPARG. ALLOWED_TAGS and ALLOWED_ATTRIBUTES are hash tables the keys of which are the tags and attribute names that this function should use. If ALLOWED_TAGS is NULL, all tags are processed; if ALLOWED_ATTRIBUTES is NULL, all attributes are returned. (Obviously, the caller can filter out unwanted tags and attributes just as well, but this is just an optimization designed to avoid unnecessary copying of tags/attributes which the caller doesn't care about.) 
Name: find_attr; Comment: Find the value of attribute named NAME in the taginfo TAG. If the attribute is not present, return NULL. If ATTRIND is non-NULL, the index of the attribute in TAG will be stored there. 
Name: append_url; Comment: Append LINK_URI to the urlpos structure that is being built. LINK_URI will be merged with the current document base. 
Name: tag_find_urls; Comment: Default tag handler: collect URLs from attributes specified for this tag by tag_url_attributes. 
Name: tag_handle_base; Comment: Handle the BASE tag, for <base href=...>. 
Name: tag_handle_form; Comment: Mark the URL found in <form action=...> for conversion. 
Name: tag_handle_link; Comment: Handle the LINK tag. It requires special handling because how its links will be followed in -p mode depends on the REL attribute. 
Name: tag_handle_meta; Comment: Handle the META tag. This requires special handling because of the refresh feature and because of robot exclusion. 
Name: tag_handle_img; Comment: Handle the IMG tag. This requires special handling for the srcset attr, while the traditional src/lowsrc/href attributes can be handled generically. 
Name: collect_tags_mapper; Comment: Dispatch the tag handler appropriate for the tag we're mapping over. See known_tags[] for definition of tag handlers. 
Name: get_urls_html_fm; Comment: Analyze HTML tags FILE and construct a list of URLs referenced from it. It merges relative links in FILE with URL. It is aware of <base href=...> and does the right thing. 
Name: get_urls_file; Comment: This doesn't really have anything to do with HTML, but it's similar to get_urls_html, so we put it here. 
Name: ntlm_input; Comment: return true on success, false otherwise 
Name: calc_resp; Comment: takes a 21 byte array and treats it as 3 56-bit DES keys. The 8 byte plaintext is encrypted with each key and the resulting 24 bytes are stored in the results array. 
Name: ntlm_output; Comment: this is for creating ntlm header output 
Name: request_new; Comment: Create a new, empty request. Set the request's method and its arguments. METHOD should be a literal string (or it should outlive the request) because it will not be freed. ARG will be freed by request_free. 
Name: request_method; Comment: Return the method string passed with the last call to request_set_method. 
Name: release_header; Comment: Free one header according to the release policy specified with request_set_header. 
Name: request_set_header; Comment: None 
Name: request_set_user_header; Comment: Like request_set_header, but sets the whole header line, as provided by the user using the `--header' option. For example, request_set_user_header (req, "Foo: bar") works just like request_set_header (req, "Foo", "bar"). 
Name: request_remove_header; Comment: Remove the header with specified name from REQ. Returns true if the header was actually removed, false otherwise. 
Name: request_send; Comment: Construct the request and write it to FD using fd_write. If warc_tmp is set to a file pointer, the request string will also be written to that file. 
Name: request_free; Comment: Release the resources used by REQ. It is safe to call it with a valid pointer to a NULL pointer. It is not safe to call it with an invalid or NULL pointer. 
Name: maybe_send_basic_creds; Comment: Find out if this host has issued a Basic challenge yet; if so, giveit the username, password. A temporary measure until we can get proper authentication in place. 
Name: body_file_send; Comment: Send the contents of FILE_NAME to SOCK. Make sure that exactly PROMISED_SIZE bytes are sent over the wire -- if the file is longer, read only that much; if the file is shorter, report an error. If warc_tmp is set to a file pointer, the post data will also be written to that file. 
Name: response_head_terminator; Comment: Determine whether [START, PEEKED + PEEKLEN) contains an empty line. If so, return the pointer to the position after the line, otherwise return NULL. This is used as callback to fd_read_hunk. The data between START and PEEKED has been read and cannot be "unread"; the data after PEEKED has only been peeked. 
Name: read_http_response_head; Comment: Read the HTTP request head from FD and return it. The error conditions are the same as with fd_read_hunk. To support HTTP/0.9 responses, this function tries to make sure that the data begins with "HTTP". If this is not the case, no data is read and an empty request is returned, so that the remaining data can be treated as body. 
Name: resp_new; Comment: Create a new response object from the text of the HTTP response, available in HEAD. That text is automatically split into constituent header lines for fast retrieval using resp_header_*. 
Name: resp_header_locate; Comment: Locate the header named NAME in the request data, starting with position START. This allows the code to loop through the request data, filtering for all requests of a given name. Returns the found position, or -1 for failure. The code that uses this function typically looks like this: for (pos = 0; (pos = resp_header_locate (...)) != -1; pos++) ... do something with header ... If you only care about one header, use resp_header_get instead of this function. 
Name: resp_header_get; Comment: Find and retrieve the header named NAME in the request data. If found, set *BEGPTR to its starting, and *ENDPTR to its ending position, and return true. Otherwise return false. This function is used as a building block for resp_header_copy and resp_header_strdup. 
Name: resp_header_copy; Comment: Copy the response header named NAME to buffer BUF, no longer than BUFSIZE (BUFSIZE includes the terminating 0). If the header exists, true is returned, false otherwise. If there should be no limit on the size of the header, use resp_header_strdup instead. If BUFSIZE is 0, no data is copied, but the boolean indication of whether the header is present is still returned. 
Name: resp_header_strdup; Comment: Return the value of header named NAME in RESP, allocated with malloc. If such a header does not exist in RESP, return NULL. 
Name: resp_status; Comment: Parse the HTTP status line, which is of format: HTTP-Version SP Status-Code SP Reason-Phrase The function returns the status-code, or -1 if the status line appears malformed. The pointer to "reason-phrase" message is returned in *MESSAGE. 
Name: resp_free; Comment: Release the resources used by RESP. It is safe to call it with a valid pointer to a NULL pointer. It is not safe to call it with a invalid or NULL pointer. 
Name: print_response_line; Comment: None but that failed to escape the non-printable characters and, in fact, caused crashes in UTF-8 locales. 
Name: print_server_response; Comment: Print the server response, line by line, omitting the trailing CRLF from individual header lines, and prefixed with PREFIX. 
Name: parse_content_range; Comment: Parse the `Content-Range' header and extract the information it contains. Returns true if successful, false otherwise. 
Name: skip_short_body; Comment: Read the body of the request, but don't store it anywhere and don't display a progress gauge. This is useful for reading the bodies of administrative responses to which we will soon issue another request. The response is not useful to the user, but reading it allows us to continue using the same connection to the server. If reading fails, false is returned, true otherwise. In debug mode, the body is displayed for debugging purposes. 
Name: modify_param_name; Comment: extract_param extracts the parameter name into NAME. However, if the parameter name is in RFC2231 format then this function adjusts NAME by stripping of the trailing characters that are not part of the name but are present to indicate the presence of encoding information in the value or a fragment of a long parameter value 
Name: modify_param_value; Comment: extract_param extract the parameter value into VALUE. Like modify_param_name this function modifies VALUE by stripping off the encoding information from the actual value 
Name: extract_param; Comment: None filename=_"foo bar_"", the first call to this function will return the token named "attachment" and no value, and the second call will return the token named "filename" and value "foo bar". The third call will return false, indicating no more valid tokens. is_url_encoded is an out parameter. If not NULL, a boolean value will be stored into it, letting the caller know whether or not the extracted value is URL-encoded. The caller can then decode it with url_unescape(), which however performs decoding in-place. URL-encoding is used by RFC 2231 to support non-US-ASCII characters in HTTP header values. 
Name: append_value_to_filename; Comment: Appends the string represented by VALUE to FILENAME 
Name: parse_content_disposition; Comment: Parse the contents of the `Content-Disposition' header, extracting the information useful to Wget. Content-Disposition is a header borrowed from MIME; when used in HTTP, it typically serves for specifying the desired file name of the resource. For example: Content-Disposition: attachment; filename="flora.jpg" Wget will skip the tokens it doesn't care about, such as "attachment" in the previous example; it will also skip other unrecognized params. If the header is syntactically correct and contains a file name, a copy of the file name is stored in *filename and true is returned. Otherwise, the function returns false. The file name is stripped of directory components and must not be empty. Historically, this function returned filename prefixed with opt.dir_prefix, now that logic is handled by the caller, new code should pay attention, changed by crq, Sep 2010. 
Name: invalidate_persistent; Comment: Mark the persistent connection as invalid and free the resources it uses. This is used by the CLOSE_* macros after they forcefully close a registered persistent connection. 
Name: register_persistent; Comment: Register FD, which should be a TCP/IP connection to HOST:PORT, as persistent. This will enable someone to use the same connection later. In the context of HTTP, this must be called only AFTER the response has been received and the server has promised that the connection will remain alive. If a previous connection was persistent, it is closed. 
Name: persistent_available_p; Comment: Return true if a persistent connection is available for connecting to HOST:PORT. 
Name: read_response_body; Comment: Download the response body from the socket and writes it to an output file. The headers have already been read from the socket. If WARC is enabled, the response body will also be written to a WARC response record. hs, contlen, contrange, chunked_transfer_encoding and url are parameters from the gethttp method. fp is a pointer to the output file. url, warc_timestamp_str, warc_request_uuid, warc_ip, type and statcode will be saved in the headers of the WARC record. The head parameter contains the HTTP headers of the response. If fp is NULL and WARC is enabled, the response body will be written only to the WARC file. If WARC is disabled and fp is a file pointer, the data will be written to the file. If fp is a file pointer and WARC is enabled, the body will be written to both destinations. Returns the error code. 
Name: time_to_rfc1123; Comment: Convert time_t to one of valid HTTP date formats ie. rfc1123-date. HTTP-date = rfc1123-date | rfc850-date | asctime-date rfc1123-date = wkday "," SP date1 SP time SP "GMT" rfc850-date = weekday "," SP date2 SP time SP "GMT" asctime-date = wkday SP date3 SP time SP 4DIGIT date1 = 2DIGIT SP month SP 4DIGIT ; day month year (e.g., 02 Jun 1982) date2 = 2DIGIT "-" month "-" 2DIGIT ; day-month-year (e.g., 02-Jun-82) date3 = month SP ( 2DIGIT | ( SP 1DIGIT )) ; month day (e.g., Jun 2) time = 2DIGIT ":" 2DIGIT ":" 2DIGIT ; 00:00:00 - 23:59:59 wkday = "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" weekday = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday" month = "Jan" | "Feb" | "Mar" | "Apr" | "May" | "Jun" | "Jul" | "Aug" | "Sep" | "Oct" | "Nov" | "Dec" source: RFC2616 
Name: set_content_type; Comment: Set proper type flags based on type string. 
Name: metalink_from_http; Comment: Will return proper metalink_t structure if enough data was found in http response resp. Otherwise returns NULL. Two exit points: one for success and one for failure. 
Name: gethttp; Comment: Retrieve a document through HTTP protocol. It recognizes status code, and correctly handles redirections. It closes the network socket. If it receives an error from the functions below it, it will print it if there is enough information to do so (almost always), returning the error to the caller (i.e. http_loop). Various HTTP parameters are stored to hs. If PROXY is non-NULL, the connection will be made to the proxy server, and u->url will be requested. 
Name: check_retry_on_http_error; Comment: Check whether the supplied HTTP status code is among those listed for the --retry-on-http-error option. 
Name: http_loop; Comment: The genuine HTTP loop! This is the part where the retrieval is retried, and retried, and retried, and... 
Name: check_end; Comment: Check whether the result of strptime() indicates success. strptime() returns the pointer to how far it got to in the string. The processing has been successful if the string is at `GMT' or `+X', or at the end of the string. In extended regexp parlance, the function returns 1 if P matches "^ *(GMT|[+-][0-9]|$)", 0 otherwise. P being NULL (which strptime can return) is considered a failure and 0 is returned. 
Name: http_atotm; Comment: Convert the textual specification of time in TIME_STRING to the number of seconds since the Epoch. TIME_STRING can be in any of the three formats RFC2616 allows the HTTP servers to emit -- RFC1123-date, RFC850-date or asctime-date, as well as the time format used in the Set-Cookie header. Timezones are ignored, and should be GMT. Return the computed time_t representation, or -1 if the conversion fails. This function uses strptime with various string formats for parsing TIME_STRING. This results in a parser that is not as lenient in interpreting TIME_STRING as I would like it to be. Being based on strptime, it always allows shortened months, one-digit days, etc., but due to the multitude of formats in which time can be represented, an ideal HTTP time parser would be even more forgiving. It should completely ignore things like week days and concentrate only on the various forms of representing years, months, days, hours, minutes, and seconds. For example, it would be nice if it accepted ISO 8601 out of the box. I've investigated free and PD code for this purpose, but none was usable. getdate was big and unwieldy, and had potential copyright issues, or so I was informed. Dr. Marcus Hennecke's atotm(), distributed with phttpd, is excellent, but we cannot use it because it is not assigned to the FSF. So I stuck it with strptime. 
Name: basic_authentication_encode; Comment: Create the authentication header contents for the `Basic' scheme. This is done by encoding the string "USER:PASS" to base64 and prepending the string "Basic " in front of it. 
Name: dump_hash; Comment: Dump the hexadecimal representation of HASH to BUF. HASH should be an array of 16 bytes containing the hash keys, and BUF should be a buffer of 33 writable characters (32 for hex digits plus one for zero termination). 
Name: digest_authentication_encode; Comment: Take the line apart to find the challenge, and compose a digest authorization header. See RFC2069 section 2.1.2. 
Name: create_authorization_line; Comment: Create the HTTP authorization request header. When the `WWW-Authenticate' response header is seen, according to the authorization scheme specified in that header (`Basic' and `Digest' are supported by the current implementation), produce an appropriate HTTP authorization request header. 
Name: command_by_name; Comment: Look up CMDNAME in the commands[] and return its position in the array. If CMDNAME is not found, return -1. 
Name: defaults; Comment: Reset the variables to default values. 
Name: home_dir; Comment: Return the user's home directory (strdup-ed), or NULL if none is found. 
Name: wgetrc_env_file_name; Comment: Check the 'WGETRC' environment variable and return the file name if 'WGETRC' is set and is a valid file. If the `WGETRC' variable exists but the file does not exist, the function will exit(). 
Name: ajoin_dir_file; Comment: Append file name to (locally appropriate) directory spec. Return pointer to allocated storage. 
Name: wgetrc_user_file_name; Comment: Check for the existence of '$HOME/.wgetrc' and return its path if it exists and is set. 
Name: wgetrc_file_name; Comment: Return the path to the user's .wgetrc. This is either the value of `WGETRC' environment variable, or `$HOME/.wgetrc'. Additionally, for windows, look in the directory where wget.exe resides. 
Name: run_wgetrc; Comment: Initialize variables from a wgetrc file. Returns zero (failure) if there were errors in the file. 
Name: initialize; Comment: Initialize the defaults and run the system wgetrc and user's own wgetrc. 
Name: dehyphen; Comment: Remove dashes and underscores from S, modifying S in the process. 
Name: parse_line; Comment: Parse the line pointed by line, with the syntax: <sp>* command <sp>* = <sp>* value <sp>* Uses malloc to allocate space for command and value. Returns one of line_ok, line_empty, line_syntax_error, or line_unknown_command. In case of line_ok, *COM and *VAL point to freshly allocated strings, and *COMIND points to com's index. In case of error or empty line, their values are unmodified. 
Name: setval_internal; Comment: Run commands[comind].action. 
Name: setoptval; Comment: Run command COM with value VAL. If running the command produces an error, report the error and exit. This is intended to be called from main to modify Wget's behavior through command-line switches. Since COM is hard-coded in main, it is not canonicalized, and this aborts when COM is not found. If COMIND's are exported to init.h, this function will be changed to accept COMIND directly. 
Name: run_command; Comment: Parse OPT into command and value and run it. For example, run_command("foo=bar") is equivalent to setoptval("foo", "bar"). This is used by the `--execute' flag in main.c. 
Name: cmd_boolean; Comment: Store the boolean value from VAL to PLACE. COM is ignored, except for error messages. 
Name: cmd_check_cert; Comment: Store the check_cert value from VAL to PLACE. COM is ignored, except for error messages. 
Name: cmd_number; Comment: Set the non-negative integer value from VAL to PLACE. With incorrect specification, the number remains unchanged. 
Name: cmd_number_inf; Comment: Similar to cmd_number(), only accepts `inf' as a synonym for 0. 
Name: cmd_string; Comment: Copy (strdup) the string at COM to a new location and place a pointer to *PLACE. 
Name: cmd_string_uppercase; Comment: Like cmd_string but ensure the string is upper case. 
Name: cmd_file; Comment: Like cmd_string, but handles tilde-expansion when reading a user's `.wgetrc'. In that case, and if VAL begins with `~', the tilde gets expanded to the user's home directory. 
Name: cmd_file_once; Comment: like cmd_file, but insist on just a single option usage 
Name: cmd_directory; Comment: Like cmd_file, but strips trailing '/' characters. 
Name: cmd_vector; Comment: Split VAL by space to a vector of values, and append those values to vector pointed to by the PLACE argument. If VAL is empty, the PLACE vector is cleared instead. 
Name: parse_bytes_helper; Comment: Engine for cmd_bytes and cmd_bytes_sum: converts a string such as "100k" or "2.5G" to a floating point number. 
Name: cmd_bytes; Comment: Parse VAL as a number and set its value to PLACE (which should point to a wgint). By default, the value is assumed to be in bytes. If "K", "M", or "G" are appended, the value is multiplied with 1<<10, 1<<20, or 1<<30, respectively. Floating point values are allowed and are cast to integer before use. The idea is to be able to use things like 1.5k instead of "1536". The string "inf" is returned as 0. In case of error, false is returned and memory pointed to by PLACE remains unmodified. 
Name: cmd_bytes_sum; Comment: Like cmd_bytes, but PLACE is interpreted as a pointer to SIZE_SUM. It works by converting the string to double, therefore working with values up to 2^53-1 without loss of precision. This value (8192 TB) is large enough to serve for a while. 
Name: cmd_time; Comment: Store the value of VAL to *OUT. The value is a time period, by default expressed in seconds, but also accepting suffixes "m", "h", "d", and "w" for minutes, hours, days, and weeks respectively. 
Name: cmd_spec_mirror; Comment: Set the "mirror" mode. It means: recursive download, timestamping, no limit on max. recursion depth, and don't remove listings. 
Name: cmd_spec_prefer_family; Comment: Validate --prefer-family and set the choice. Allowed values are "IPv4", "IPv6", and "none". 
Name: cmd_spec_progress; Comment: Set progress.type to VAL, but verify that it's a valid progress implementation before that. 
Name: cmd_spec_recursive; Comment: Set opt.recursive to VAL as with cmd_boolean. If opt.recursive is set to true, also set opt.dirstruct to true, unless opt.no_dirstruct is specified. 
Name: cmd_spec_regex_type; Comment: Validate --regex-type and set the choice. 
Name: cmd_spec_timeout; Comment: Set all three timeout values. 
Name: cmd_spec_progressdisp; Comment: The --show-progress option is not a cmd_boolean since we need to keep trackof whether the user explicitly requested the option or not. -1 means uninitialized. 
Name: cmd_spec_verbose; Comment: The "verbose" option cannot be cmd_boolean because the variable is not bool -- it's of type int (-1 means uninitialized because of some random hackery for disallowing -q -v). 
Name: simple_atof; Comment: Trivial atof, with error reporting. Handles "<digits>[.<digits>]", doesn't handle exponential notation. Returns true on success, false on failure. In case of success, stores its result to *DEST. 
Name: check_user_specified_header; Comment: Verify that the user-specified header in S is valid. It must contain a colon preceded by non-white-space characters and must not contain newlines. 
Name: decode_string; Comment: Decode VAL into a number, according to ITEMS. 
Name: cleanup; Comment: Free the memory allocated by global variables. 
Name: parse_charset; Comment: Given a string containing "charset=XXX", return the encoding if found, or NULL otherwise 
Name: find_locale; Comment: Find the locale used, or fall back on a default value 
Name: check_encoding_name; Comment: Basic check of an encoding name. 
Name: do_conversion; Comment: Do the conversion according to the passed conversion descriptor cd. *out will contain the transcoded string on success. *out content is unspecified otherwise. 
Name: locale_to_utf8; Comment: Try converting string str from locale to UTF-8. Return a new string on success, or str on error or if conversion isn't needed. 
Name: idn_encode; Comment: Try to "ASCII encode" UTF-8 host. Return the new domain on success or NULL on error. 
Name: idn_decode; Comment: Try to decode an "ASCII encoded" host. Return the new domain in the locale on success or NULL on error. 
Name: remote_to_utf8; Comment: Try to transcode string str from remote encoding to UTF-8. On success, *new contains the transcoded string. *new content is unspecified otherwise. 
Name: iri_new; Comment: Allocate a new iri structure and return a pointer to it. 
Name: iri_free; Comment: Completely free an iri structure. 
Name: set_uri_encoding; Comment: Set uri_encoding of struct iri i. If a remote encoding was specified, use it unless force is true. 
Name: set_content_encoding; Comment: Set content_encoding of struct iri i. 
Name: free_log_line; Comment: Free the log line index with NUM. This calls free on ln->malloced_line if it's non-NULL, and it also resets ln->malloced_line and ln->content to NULL. 
Name: saved_append_1; Comment: Append bytes in the range [start, end) to one line in the log. The region is not supposed to contain newlines, except for the last character (at end[-1]). 
Name: saved_append; Comment: Log the contents of S, as explained above. If S consists of multiple lines, they are logged separately. If S does not end with a newline, it will form a "trailing" line, to which things will get appended the next time this function is called. 
Name: get_log_fp; Comment: Returns the file descriptor for logging. This is LOGFP, except if called before log_init, in which case it returns stderr. This is useful in case someone calls a logging function before log_init. If logging is inhibited, return NULL. 
Name: get_warc_log_fp; Comment: Returns the file descriptor for the secondary log file. This is WARCLOGFP, except if called before log_init, in which case it returns stderr. This is useful in case someone calls a logging function before log_init. If logging is inhibited, return NULL. 
Name: log_set_warc_log_fp; Comment: Sets the file descriptor for the secondary log file. 
Name: logputs; Comment: Log a literal string S. The string is logged as-is, without a newline appended. 
Name: GCC_FORMAT_ATTR; Comment: Print a message to the log. A copy of message will be saved to saved_log, for later reusal by log_dump_context(). Normally we'd want this function to loop around vsnprintf until sufficient room is allocated, as the Linux man page recommends. However each call to vsnprintf() must be preceded by va_start and followed by va_end. Since calling va_start/va_end is possible only in the function that contains the `...' declaration, we cannot call vsnprintf more than once. Therefore this function saves its state to logvprintf_state and signals the parent to call it again. (An alternative approach would be to use va_copy, but that's not portable.) 
Name: logflush; Comment: Flush LOGFP. Useful while flushing is disabled. 
Name: log_set_flush; Comment: Enable or disable log flushing. 
Name: log_set_save_context; Comment: (Temporarily) disable storing log to memory. Returns the old status of storing, with which this function can be called again to reestablish storing. 
Name: logprintf; Comment: Print a message to the screen or to the log. The first argument defines the verbosity of the message, and the rest are as in printf(3). 
Name: debug_logprintf; Comment: The same as logprintf(), but does anything only if opt.debug is true. 
Name: log_init; Comment: Open FILE and set up a logging stream. If FILE cannot be opened, exit with status of 1. 
Name: log_close; Comment: Close LOGFP (only if we opened it, not if it's stderr), inhibit further logging and free the memory associated with it. 
Name: log_dump_context; Comment: Dump saved lines to logfp. 
Name: count_nonprint; Comment: Return the number of non-printable characters in SOURCE. Non-printable characters are determined as per c-ctype.c. 
Name: copy_and_escape; Comment: Copy SOURCE to DEST, escaping non-printable characters. Non-printable refers to anything outside the non-control ASCII range (32-126) which means that, for example, CR, LF, and TAB are considered non-printable along with ESC, BS, and other control chars. This is by design: it makes sure that messages from remote servers cannot be easily used to deceive the users by mimicking Wget's output. Disallowing non-ASCII characters is another necessary security measure, which makes sure that remote servers cannot garble the screen or guess the local charset and perform homographic attacks. Of course, the above mandates that escnonprint only be used in contexts expected to be ASCII, such as when printing host names, URL components, HTTP headers, FTP server messages, and the like. ESCAPE is the leading character of the escape sequence. BASE should be the base of the escape sequence, and must be either 8 for octal or 16 for hex. DEST must point to a location with sufficient room to store an encoded version of SOURCE. 
Name: escnonprint_internal; Comment: ring data 
Name: escnonprint; Comment: Return a pointer to a static copy of STR with the non-printable characters escaped as _ooo. If there are no non-printable characters in STR, STR is returned. See copy_and_escape for more information on which characters are considered non-printable. DON'T call this function on translated strings because escaping will break them. Don't call it on literal strings from the source, which are by definition trusted. If newlines are allowed in the string, escape and print it line by line because escaping the whole string will convert newlines to _012. (This is so that expectedly single-line messages cannot use embedded newlines to mimic Wget's output and deceive the user.) escnonprint doesn't quote its escape character because it is notf meant as a general and reversible quoting mechanism, but as a quick way to defang binary junk sent by malicious or buggy servers. NOTE: since this function can return a pointer to static data, be careful to copy its result before calling it again. However, to be more useful with printf, it maintains an internal ring of static buffers to return. Currently the ring size is 3, which means you can print up to three values in the same printf; if more is needed, bump RING_SIZE. 
Name: escnonprint_uri; Comment: Return a pointer to a static copy of STR with the non-printable characters escaped as %XX. If there are no non-printable characters in STR, STR is returned. See escnonprint for usage details. 
Name: redirect_output; Comment: Redirect output to `wget-log' or back to stdout/stderr. 
Name: check_redirect_output; Comment: Check whether there's a need to redirect output. 
Name: redirect_output_signal; Comment: Hangup signal handler. When wget receives SIGHUP or SIGUSR1, it will proceed operation as usual, trying to write into a log file. If that is impossible, the output will be turned off. 
Name: no_prefix; Comment: Return a string that contains S with "no-" prepended. The string is NUL-terminated and allocated off static storage at Wget startup. 
Name: init_switches; Comment: Initialize the long_options array used by getopt_long from the data in option_data. 
Name: print_usage; Comment: Print the usage message. 
Name: print_help; Comment: Print the help message, describing all the available options. If you add an option, be sure to update this list. 
Name: secs_to_human_time; Comment: Return a human-readable printed representation of INTERVAL, measured in seconds. 
Name: run_use_askpass; Comment: Execute external application opt.use_askpass 
Name: use_askpass; Comment: set the user name and password
Name: format_and_print_line; Comment: Function that prints the line argument while limiting it to at most line_length. prefix is printed on the first line and an appropriate number of spaces are added on subsequent lines.
Name: retrieve_from_metalink; Comment: Loop through all files in metalink structure and retrieve them. Returns RETROK if all files were downloaded. Returns last retrieval error (from retrieve_url) if some files could not be downloaded. 
Name: replace_metalink_basename; Comment: Replace/remove the basename of a file name. The file name is permanently modified. Always set NAME to a string, even an empty one. Use REF's basename as replacement. If REF is NULL or if it doesn't provide a valid basename candidate, then remove NAME's basename. 
Name: get_metalink_basename; Comment: Strip the directory components from the given name. Return a pointer to the end of the leading directory components. Return NULL if the resulting name is unsafe or invalid. Due to security issues posed by saving files with unsafe names, here the use of libmetalink's metalink_check_safe_path() is enforced. If this appears redundant because the given name was already verified, just remember to never underestimate unsafe file names. 
Name: append_suffix_number; Comment: Append a separator and a numeric suffix to a string. The string is permanently modified. 
Name: clean_metalink_string; Comment: Remove the string's trailing/leading whitespaces and line breaks. The string is permanently modified. 
Name: dequote_metalink_string; Comment: Remove the quotation surrounding a string. The string is permanently modified. 
Name: badhash_suffix; Comment: Append the suffix ".badhash" to the file NAME, except without overwriting an existing file with that name and suffix. 
Name: badhash_or_remove; Comment: Append the suffix ".badhash" to the file NAME, except without overwriting an existing file with that name and suffix. Remove the file NAME if the option --delete-after is specified, or if the option --keep-badhash isn't set. 
Name: fetch_metalink_file; Comment: Simple file fetch. Set DESTNAME to the name of the saved file. Resume previous download if RESUME is true. To disable Metalink/HTTP, set METALINK_HTTP to false. 
Name: find_key_value; Comment: Find value of given key. This is intended for Link header, but will work with any header that uses ';' as field separator and '=' as key-value separator. Link = "Link" ":" #link-value link-value = "<" URI-Reference ">" ( ";" link-param ) link-param = ( ( "rel" "=" relation-types ) | ( "anchor" "=" <"> URI-Reference <"> ) | ( "rev" "=" relation-types ) | ( "hreflang" "=" Language-Tag ) | ( "media" "=" ( MediaDesc | ( <"> MediaDesc <"> ) ) ) | ( "title" "=" quoted-string ) | ( "title" "=" ext-value ) | ( "type" "=" ( media-type | quoted-mt ) ) | ( link-extension ) ) link-extension = ( parmname [ "=" ( ptoken | quoted-string ) ] ) | ( ext-name-star "=" ext-value ) ext-name-star = parmname "" ; reserved for RFC2231-profiled ; extensions. Whitespace NOT ; allowed in between. ptoken = 1ptokenchar ptokenchar = "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "" | "+" | "-" | "." | "" | DIGIT | ":" | "<" | "=" | ">" | "?" | "@" | ALPHA | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" media-type = type-name "/" subtype-name quoted-mt = <"> media-type <"> relation-types = relation-type | <"> relation-type *( 1*SP relation-type ) <"> relation-type = reg-rel-type | ext-rel-type reg-rel-type = LOALPHA *( LOALPHA | DIGIT | "." | "-" ) ext-rel-type = URI See more: rfc5988 
Name: has_key; Comment: This is to check if given token exists in HTTP header. Tokens are separated by ';'. 
Name: find_key_values; Comment: None for (pos = header_beg; pos = find_key_values (pos, header_end, &key, &val); pos++) { ... } 
Name: xsleep; Comment: Windows version of xsleep in utils.c. 
Name: make_section_name; Comment: Construct the name for a named section (a.k.a. `file mapping') object. The returned string is dynamically allocated and needs to be xfree()'d. 
Name: fake_fork_child; Comment: Determines if we are the child and if so performs the child logic. Return values: < 0 error 0 parent > 0 child 
Name: fake_fork; Comment: Windows doesn't support the fork() call; so we fake it by invoking another copy of Wget with the same arguments with which we were invoked. The child copy of Wget should perform the same initialization sequence as the parent; so we should have two processes that are essentially identical. We create a specially named section object that allows the child to distinguish itself from the parent and is used to exchange information between the two processes. We use an event object for synchronization. 
Name: fork_to_background; Comment: This is the corresponding Windows implementation of the fork_to_background() function in utils.c. 
Name: ws_changetitle; Comment: Updates the console title with the URL of the current file being transferred. 
Name: ws_percenttitle; Comment: Updates the console title with the percentage of the current file transferred. 
Name: ws_mypath; Comment: Returns a pointer to the fully qualified name of the directory that contains the Wget binary (wget.exe). The returned path does not have a trailing path separator. Returns NULL on failure. 
Name: set_sleep_mode; Comment: Prevent Windows entering sleep/hibernation-mode while Wget is doing a lengthy transfer. Windows does not, by default, consider network activity in console-programs as activity! Works on Win-98/ME/2K and up. 
Name: ws_startup; Comment: Perform Windows specific initialization. 
Name: thread_helper; Comment: The callback that runs FUN(ARG) in a separate thread. This function exists for two reasons: a) to not require FUN to be declared WINAPI/__stdcall[1], and b) to retrieve Winsock errors, which are per-thread. The latter is useful when FUN calls Winsock functions, which is how run_with_timeout is used in Wget. [1] MSVC can use __fastcall globally (cl /Gr) and on Watcom this is the default (wcc386 -3r). 
Name: run_with_timeout; Comment: Call FUN(ARG), but don't allow it to run for more than TIMEOUT seconds. Returns true if the function was interrupted with a timeout, false otherwise. This works by running FUN in a separate thread and terminating the thread if it doesn't finish in the specified time. 
Name: inet_ntop; Comment: An inet_ntop implementation that uses WSAAddressToString. Prototype complies with POSIX 1003.1-2004. This is only used under IPv6 because Wget prints IPv4 addresses using inet_ntoa. 
Name: search_netrc; Comment: Return the correct user and password, given the host, user (as given in the URL), and password (as given in the URL). May return NULL. If SLACK_DEFAULT is set, allow looking for a "default" account. You will typically turn it off for HTTP. 
Name: maybe_add_to_list; Comment: Maybe add NEWENTRY to the account information list, LIST. NEWENTRY is set to a ready-to-use acc_t, in any event. 
Name: shift_left; Comment: Helper function for the parser, shifts contents of null-terminated string once character to the left. Used in processing _ and " constructs in the netrc file 
Name: parse_netrc_fp; Comment: Parse a .netrc file (as described in the ftp(1) manual page). 
Name: free_netrc; Comment: Free a netrc list. 
Name: main; Comment: Needed by warc.c 
Name: init_prng; Comment: Initialize the SSL's PRNG using various methods. 
Name: print_errors; Comment: Print errors in the OpenSSL error stack. 
Name: key_type_to_ssl_type; Comment: Convert keyfile type as used by options.h to a type as accepted by SSL_CTX_use_certificate_file and SSL_CTX_use_PrivateKey_file. (options.h intentionally doesn't use values from openssl/ssl.h so it doesn't depend specifically on OpenSSL for SSL functionality.) 
Name: ssl_init; Comment: Create an SSL Context and set default paths etc. Called the first time an HTTP download is attempted. Returns true on success, false otherwise. 
Name: ssl_connect_wget; Comment: Perform the SSL handshake on file descriptor FD, which is assumed to be connected to an SSL server. The SSL handle provided by OpenSSL is registered with the file descriptor FD using fd_register_transport, so that subsequent calls to fd_read, fd_write, etc., will use the corresponding SSL functions. Returns true on success, false on failure. 
Name: pattern_match; Comment: Return true is STRING (case-insensitively) matches PATTERN, false otherwise. The recognized wildcard character is "*", which matches any character in STRING except ".". Any number of the "*" wildcard may be present in the pattern. This is used to match of hosts as indicated in rfc2818: "Names may contain the wildcard characterwhich is considered to match any single domain name component or component fragment. E.g., *.a.com matches foo.a.com but not bar.foo.a.com. f*.com matches foo.com but not bar.com [or foo.bar.com]." If the pattern contain no wildcards, pattern_match(a, b) is equivalent to !strcasecmp(a, b). 
Name: pkp_pin_peer_pubkey; Comment: Heavily modified from: https:www.owasp.orgindex.phpCertificate_and_Public_Key_Pinning#OpenSSL 
Name: ssl_check_certificate; Comment: Verify the validity of the certificate presented by the server. Also check that the "common name" of the server, as presented by its certificate, corresponds to HOST. (HOST typically comes from the URL and is what the user thinks he's connecting to.) This assumes that ssl_connect_wget has successfully finished, i.e. that the SSL handshake has been performed and that FD is connected to an SSL handle. If opt.check_cert is true (the default), this returns 1 if the certificate is valid, 0 otherwise. If opt.check_cert is 0, the function always returns 1, but should still be called because it warns the user about any problems with the certificate. 
Name: valid_progress_implementation_p; Comment: Return true if NAME names a valid progress bar implementation. The characters after the first : will be ignored. 
Name: set_progress_implementation; Comment: Set the progress implementation to NAME. 
Name: progress_create; Comment: Create a progress gauge. INITIAL is the number of bytes the download starts from (zero if the download starts from scratch). TOTAL is the expected total number of bytes in this download. If TOTAL is zero, it means that the download size is not known in advance. 
Name: progress_interactive_p; Comment: Return true if the progress gauge is "interactive", i.e. if it can profit from being called regularly even in absence of data. The progress bar is interactive because it regularly updates the ETA and current update. 
Name: progress_update; Comment: Inform the progress gauge of newly received bytes. DLTIME is the time since the beginning of the download. 
Name: progress_finish; Comment: Tell the progress gauge to clean up. Calling this will free the PROGRESS object, the further use of which is not allowed. 
Name: dot_create; Comment: Dot-progress backend for progress_create. 
Name: dot_update; Comment: Dot-progress backend for progress_update. 
Name: dot_finish; Comment: Dot-progress backend for progress_finish. 
Name: dot_set_params; Comment: This function interprets the progress "parameters". For example, if Wget is invoked with --progress=dot:mega, it will set the "dot-style" to "mega". Valid styles are default, binary, mega, and giga. 
Name: update_speed_ring; Comment: This code attempts to maintain the notion of a "current" download speed, over the course of no less than 3s. (Shorter intervals produce very erratic results.) To do so, it samples the speed in 150ms intervals and stores the recorded samples in a FIFO history ring. The ring stores no more than 20 intervals, hence the history covers the period of at least three seconds and at most 20 reads into the past. This method should produce reasonable results for downloads ranging from very slow to very fast. The idea is that for fast downloads, we get the speed over exactly the last three seconds. For slow downloads (where a network read takes more than 150ms to complete), we get the speed over a larger time period, as large as it takes to complete twenty reads. This is good because slow downloads tend to fluctuate more and a 3-second average would be too erratic. 
Name: display_image; Comment: Print the contents of the buffer as a one-line ASCII "image" so that it can be overwritten next time. 
Name: eta_to_human_short; Comment: Provide a short human-readable rendition of the ETA. This is like secs_to_human_time in main.c, except the output doesn't include fractions (which would look silly in by nature imprecise ETA) and takes less room. If the time is measured in hours, hours and minutes (but not seconds) are shown; if measured in days, then days and hours are shown. This ensures brevity while still displaying as much as possible. If CONDENSED is true, the separator between minutes and seconds (and hours and minutes, etc.) is not included, shortening the display by one additional character. This is used for dot progress. The display never occupies more than 7 characters of screen space. 
Name: posix_init; Comment: Decide which clock_id to use. 
Name: ptimer_new; Comment: Allocate a new timer and reset it. Return the new timer. 
Name: ptimer_destroy; Comment: Free the resources associated with the timer. Its further use is prohibited. 
Name: ptimer_reset; Comment: Reset timer PT. This establishes the starting point from which ptimer_measure() will return the elapsed time in seconds. It is allowed to reset a previously used timer. 
Name: ptimer_measure; Comment: Measure the elapsed time since timer creation/reset. This causes the timer to internally call clock_gettime (or gettimeofday, etc.) to update its idea of current time. The time is returned, but is also stored for later access through ptimer_read(). This function handles clock skew, i.e. time that moves backwards is ignored. 
Name: ptimer_read; Comment: Return the most recent elapsed time measured with ptimer_measure. If ptimer_measure has not yet been called since the timer was created or reset, this returns 0. 
Name: ptimer_resolution; Comment: Return the assessed resolution of the timer implementation, in seconds. This is used by code that tries to substitute a better value for timers that have returned zero. 
Name: url_queue_new; Comment: Create a URL queue. 
Name: url_queue_delete; Comment: Delete a URL queue. 
Name: url_enqueue; Comment: Enqueue a URL in the queue. The queue is FIFO: the items will be retrieved ("dequeued") from the queue in the order they were placed into it. 
Name: url_dequeue; Comment: Take a URL out of the queue. Return true if this operation succeeded, or false if the queue is empty. 
Name: retrieve_tree; Comment: Retrieve a part of the web beginning with START_URL. This used to be called "recursive retrieval", because the old function was recursive and implemented depth-first search. retrieve_tree on the other hand implements breadth-search traversal of the tree, which results in much nicer ordering of downloads. The algorithm this function uses is simple: 1. put START_URL in the queue. 2. while there are URLs in the queue: 3. get next URL from the queue. 4. download it. 5. if the URL is HTML and its depth does not exceed maximum depth, get the list of URLs embedded therein. 6. for each of those URLs do the following: 7. if the URL is not one of those downloaded before, and if it satisfies the criteria specified by the various command-line options, add it to the queue. 
Name: download_child; Comment: Based on the context provided by retrieve_tree, decide whether a URL is to be descended to. This is only ever called from retrieve_tree, but is in a separate function for clarity. The most expensive checks (such as those for robots) are memoized by storing these URLs to BLACKLIST. This may or may not help. It will help if those URLs are encountered many times. 
Name: descend_redirect; Comment: This function determines whether we will consider downloading the children of a URL whose download resulted in a redirection, possibly to another host, etc. It is needed very rarely, and thus it is merely a simple-minded wrapper around download_child. 
Name: write_reject_log_header; Comment: This function writes the rejected log header. 
Name: write_reject_log_url; Comment: This function writes a URL to the reject log. Internal use only. 
Name: write_reject_log_reason; Comment: This function writes out information on why a URL was rejected and its context from download_child such as the URL being rejected and it's parent's URL. The format it uses is comma separated values but with tabs. 
Name: match_user_agent; Comment: Check whether AGENT (a string of length LENGTH) equals "wget" or "*". If it is either of them, *matches is set to one. If it is "wget", *exact_match is set to one. 
Name: add_path; Comment: Add a path specification between PATH_B and PATH_E as one of the paths in SPECS. 
Name: prune_non_exact; Comment: Recreate SPECS->paths with only those paths that have user_agent_exact_p set to true. 
Name: res_parse; Comment: Parse textual RES specs beginning with SOURCE of length LENGTH. Return a specs objects ready to be fed to res_match_path. The parsing itself is trivial, but creating a correct SPECS object is trickier than it seems, because RES is surprisingly byzantine if you attempt to implement it correctly. A "record" is a block of one or more `User-Agent' lines followed by one or more `Allow' or `Disallow' lines. Record is accepted by Wget if one of the `User-Agent' lines was "wget", or if the user agent line was "*". After all the lines have been read, we examine whether an exact ("wget") user-agent field was specified. If so, we delete all the lines read under "User-Agent: *" blocks because we have our own Wget-specific blocks. This enables the admin to say: User-Agent: Disallow: / User-Agent: google User-Agent: wget Disallow: /cgi-bin This means that to Wget and to Google, /cgi-bin is disallowed, whereas for all other crawlers, everything is disallowed. res_parse is implemented so that the order of records doesn't matter. In the case above, the "User-Agent: *" could have come after the other one. 
Name: res_parse_from_file; Comment: The same like res_parse, but first map the FILENAME into memory, and then parse it. 
Name: matches; Comment: The inner matching engine: return true if RECORD_PATH matches URL_PATH. The rules for matching are described at <http://www.robotstxt.org/norobots-rfc.txt>, section 3.2.2. 
Name: res_match_path; Comment: Iterate through all paths in SPECS. For the first one that matches, return its allow/reject status. If none matches, retrieval is by default allowed. 
Name: res_register_specs; Comment: Register RES specs that below to server on HOST:PORT. They will later be retrievable using res_get_specs. 
Name: res_get_specs; Comment: Get the specs that belong to HOST:PORT. 
Name: res_retrieve_file; Comment: Retrieve the robots.txt from the server root of the server that serves URL. The file will be named according to the currently active rules, and the file name will be returned in *file. Return true if robots were retrieved OK, false otherwise. 
Name: limit_bandwidth; Comment: Limit the bandwidth by pausing the download for an amount of time. BYTES is the number of bytes received from the network, and TIMER is the timer that started at the beginning of download. 
Name: write_data; Comment: Write data in BUF to OUT. However, if *SKIP is non-zero, skip that amount of data and decrease SKIP. Increment *TOTAL by the amount of data written. If OUT2 is not NULL, also write BUF to OUT2. In case of error writing to OUT, -2 is returned. In case of error writing to OUT2, -3 is returned. Return 1 if the whole BUF was skipped. 
Name: fd_read_body; Comment: Read the contents of file descriptor FD until it the connection terminates or a read error occurs. The data is read in portions of up to 16K and written to OUT as it arrives. If opt.verbose is set, the progress is shown. TOREAD is the amount of data expected to arrive, normally only used by the progress gauge. STARTPOS is the position from which the download starts, used by the progress gauge. If QTYREAD is non-NULL, the value it points to is incremented by the amount of data read from the network. If QTYWRITTEN is non-NULL, the value it points to is incremented by the amount of data written to disk. The time it took to download the data is stored to ELAPSED. If OUT2 is non-NULL, the contents is also written to OUT2. OUT2 will get an exact copy of the response: if this is a chunked response, everything -- including the chunk headers -- is written to OUT2. (OUT will only get the unchunked response.) The function exits and returns the amount of data read. In case of error while reading data, -1 is returned. In case of error while writing data to OUT, -2 is returned. In case of error while writing data to OUT2, -3 is returned. 
Name: fd_read_hunk; Comment: Read a hunk of data from FD, up until a terminator. The hunk is limited by whatever the TERMINATOR callback chooses as its terminator. For example, if terminator stops at newline, the hunk will consist of a line of data; if terminator stops at two newlines, it can be used to read the head of an HTTP response. Upon determining the boundary, the function returns the data (up to the terminator) in malloc-allocated storage. In case of read error, NULL is returned. In case of EOF and no data read, NULL is returned and errno set to 0. In case of having read some data, but encountering EOF before seeing the terminator, the data that has been read is returned, but it will (obviously) not contain the terminator. The TERMINATOR function is called with three arguments: the beginning of the data read so far, the beginning of the current block of peeked-at data, and the length of the current block. Depending on its needs, the function is free to choose whether to analyze all data or just the newly arrived data. If TERMINATOR returns NULL, it means that the terminator has not been seen. Otherwise it should return a pointer to the charactre immediately following the terminator. The idea is to be able to read a line of input, or otherwise a hunk of text, such as the head of an HTTP request, without crossing the boundary, so that the next call to fd_read etc. reads the data after the hunk. To achieve that, this function does the following: 1. Peek at incoming data. 2. Determine whether the peeked data, along with the previously read data, includes the terminator. 2a. If yes, read the data until the end of the terminator, and exit. 2b. If no, read the peeked data and goto 1. The function is careful to assume as little as possible about the implementation of peeking. For example, every peek is followed by a read. If the read returns a different amount of data, the process is retried until all data arrives safely. SIZEHINT is the buffer size sufficient to hold all the data in the typical case (it is used as the initial buffer size). MAXSIZE is the maximum amount of memory this function is allowed to allocate, or 0 if no upper limit is to be enforced. This function should be used as a building block for other functions -- see fd_read_line as a simple example. 
Name: fd_read_line; Comment: Read one line from FD and return it. The line is allocated using malloc, but is never larger than FD_READ_LINE_MAX. If an error occurs, or if no data can be read, NULL is returned. In the former case errno indicates the error condition, and in the latter case, errno is NULL. 
Name: retr_rate; Comment: Return a printed representation of the download rate, along with the units appropriate for the download speed. 
Name: calc_rate; Comment: Calculate the download rate and trim it as appropriate for the speed. Appropriate means that if rate is greater than 1K/s, kilobytes are used, and if rate is greater than 1MB/s, megabytes are used. UNITS is zero for B/s, one for KB/s, two for MB/s, and three for GB/s. 
Name: retrieve_url; Comment: #### This function should be rewritten so it doesn't return from multiple points. 
Name: retrieve_from_file; Comment: Find the URLs in the file and call retrieve_url() for each of them. If HTML is true, treat the file as HTML, and construct the URLs accordingly. If opt.recursive is set, call retrieve_tree() for each file. 
Name: printwhat; Comment: Print `giving up', or `retrying', depending on the impending action. N1 and N2 are the attempt number and the attempt limit. 
Name: sleep_between_retrievals; Comment: If opt.wait or opt.waitretry are specified, and if certain conditions are met, sleep the appropriate number of seconds. See the documentation of --wait and --waitretry for more information. COUNT is the count of current retrieval, beginning with 1. 
Name: free_urlpos; Comment: Free the linked list of urlpos. 
Name: rotate_backups; Comment: Rotate FNAME opt.backups times 
Name: getproxy; Comment: Return the URL of the proxy appropriate for url U. 
Name: url_uses_proxy; Comment: Returns true if URL would be downloaded through a proxy. 
Name: no_proxy_match; Comment: Should a host be accessed through proxy, concerning no_proxy? 
Name: set_local_file; Comment: Set the file parameter to point to the local file string. 
Name: input_file_url; Comment: Return true for an input file's own URL, false otherwise. 
Name: nonexisting_url; Comment: Remembers broken links. 
Name: xstrdup_lower; Comment: Utility function: like xstrdup(), but also lowercases S. 
Name: strdupdelim; Comment: Copy the string formed by two pointers (one on the beginning, other on the char after the last char) to a new, malloc-ed location. 0-terminate it. If both pointers are NULL, the function returns an empty string. 
Name: sepstring; Comment: Parse a string containing comma-separated elements, and return a vector of char pointers with the elements. Spaces following the commas are ignored. 
Name: aprintf; Comment: Like sprintf, but prints into a string of sufficient size freshly allocated with malloc, which is returned. If unable to print due to invalid format, returns NULL. Inability to allocate needed memory results in abort, as with xmalloc. This is in spirit similar to the GNU/BSD extension asprintf, but somewhat easier to use. Internally the function either calls vasprintf or loops around vsnprintf until the correct size is found. Since Wget also ships a fallback implementation of vsnprintf, this should be portable. 
Name: strlcpy; Comment: strlcpy() is a BSD function that sometimes is really handy.It is the same as snprintf(dst,dstsize,"%s",src), but much faster. 
Name: concat_strings; Comment: Concatenate the NULL-terminated list of string arguments into freshly allocated space. 
Name: fmttime; Comment: Format the provided time according to the specified format. The format is a string with format elements supported by strftime. 
Name: time_str; Comment: Return pointer to a static char[] buffer in which zero-terminated string-representation of TM (in form hh:mm:ss) is printed. If TM is NULL, the current time will be used. 
Name: datetime_str; Comment: Like the above, but include the date: YYYY-MM-DD hh:mm:ss. 
Name: touch; Comment: "Touch" FILE, i.e. make its mtime ("modified time") equal the time specified with TM. The atime ("access time") is set to the current time. 
Name: remove_link; Comment: Checks if FILE is a symbolic link, and removes it if it is. Does nothing under MS-Windows. 
Name: file_exists_p; Comment: Does FILENAME exist? 
Name: file_non_directory_p; Comment: Returns 0 if PATH is a directory, 1 otherwise (any kind of file). Returns 0 on error. 
Name: file_size; Comment: Return the size of file named by FILENAME, or -1 if it cannot be opened or sought into. 
Name: unique_name_1; Comment: stat file names named PREFIX.1, PREFIX.2, etc., until one that doesn't exist is found. Return a freshly allocated copy of the unused file name. 
Name: unique_name_passthrough; Comment: Return a unique file name, based on FILE. More precisely, if FILE doesn't exist, it is returned unmodified. If not, FILE.1 is tried, then FILE.2, etc. The first FILE.<number> file name that doesn't exist is returned. 2005-02-19 SMS. "." is now UNIQ_SEP, and may be different. The resulting file is not created, only verified that it didn't exist at the point in time when the function was called. Therefore, where security matters, don't rely that the file created by this function exists until you open it with O_EXCL or equivalent. unique_name() always returns a freshly allocated string. unique_name_passthrough() may return FILE if the file doesn't exist (and therefore doesn't need changing). 
Name: unique_name_passthrough; Comment: Dummy unique_name() for VMS. Return the original name as easily as possible. 
Name: unique_create; Comment: Create a file based on NAME, except without overwriting an existing file with that name. Providing O_EXCL is correctly implemented, this function does not have the race condition associated with opening the file returned by unique_name. 
Name: fopen_excl; Comment: Open the file for writing, with the addition that the file is opened "exclusively". This means that, if the file already exists, this function will *fail* and errno will be set to EEXIST. If BINARY is set, the file will be opened in binary mode, equivalent to fopen's "wb". If opening the file fails for any reason, including the file having previously existed, this function returns NULL and sets errno appropriately. 
Name: fopen_stat; Comment: fopen_stat() assumes that file_exists_p() was called earlier. file_stats_t passed to this function was returned from file_exists_p() This is to prevent TOCTTOU race condition. Details : FIO45-C from https:www.securecoding.cert.org Note that for creating a new file, this check is not useful Input: fname => Name of file to open mode => File open mode fstats => Saved file_stats_t about file that was checked for existence Returns: NULL if there was an error FILEof opened file stream 
Name: open_stat; Comment: open_stat assumes that file_exists_p() was called earlier to save file_stats file_stats_t passed to this function was returned from file_exists_p() This is to prevent TOCTTOU race condition. Details : FIO45-C from https:www.securecoding.cert.org Note that for creating a new file, this check is not useful Input: fname => Name of file to open flags => File open flags mode => File open mode fstats => Saved file_stats_t about file that was checked for existence Returns: -1 if there was an error file descriptor of opened file stream 
Name: make_directory; Comment: Create DIRECTORY. If some of the pathname components of DIRECTORY are missing, create them first. In case any mkdir() call fails, return its error status. Returns 0 on successful completion. The behaviour of this function should be identical to the behaviour of `mkdir -p' on systems where mkdir supports the `-p' option. 
Name: file_merge; Comment: Merge BASE with FILE. BASE can be a directory or a file name, FILE should be a file name. file_merge("/foo/bar", "baz") => "/foo/baz" file_merge("/foo/bar/", "baz") => "/foo/bar/baz" file_merge("foo", "bar") => "bar" In other words, it's a simpler and gentler version of uri_merge. 
Name: fnmatch_nocase; Comment: Like fnmatch, but performs a case-insensitive match. 
Name: acceptable; Comment: Determine whether a file is acceptable to be followed, according to lists of patterns to accept/reject. 
Name: accept_url; Comment: Determine whether an URL is acceptable to be followed, according to regex patterns to accept/reject. 
Name: subdir_p; Comment: Check if D2 is a subdirectory of D1. E.g. if D1 is `/something', subdir_p() will return true if and only if D2 begins with `/something/' or is exactly '/something'. 
Name: dir_matches_p; Comment: Iterate through DIRLIST (which must be NULL-terminated), and return the first element that matches DIR, through wildcards or front comparison (as appropriate). 
Name: accdir; Comment: Returns whether DIRECTORY is acceptable for download, wrt the includeexclude lists. The leading `' is ignored in paths; relative and absolute paths may be freely intermixed. 
Name: match_tail; Comment: Return true if STRING ends with TAIL. For instance: match_tail ("abc", "bc", false) -> 1 match_tail ("abc", "ab", false) -> 0 match_tail ("abc", "abc", false) -> 1 If FOLD_CASE is true, the comparison will be case-insensitive. 
Name: in_acclist; Comment: Checks whether string S matches each element of ACCEPTS. A list element are matched either with fnmatch() or match_tail(), according to whether the element contains wildcards or not. If the BACKWARD is false, don't do backward comparison -- just compare them normally. 
Name: suffix; Comment: Return the location of STR's suffix (file extension). Examples: suffix ("foo.bar") -> "bar" suffix ("foo.bar.baz") -> "baz" suffix ("/foo/bar") -> NULL suffix ("/foo.bar/baz") -> NULL 
Name: has_wildcards_p; Comment: Return true if S contains globbing wildcards (`*', `?', `[' or `]'). 
Name: has_html_suffix_p; Comment: Return true if FNAME ends with a typical HTML suffix. The following (case-insensitive) suffixes are presumed to be HTML files: html htm ?html (`?' matches one character) #### CAVEAT. This is not necessarily a good indication that FNAME refers to a file that contains HTML! 
Name: wget_read_file; Comment: Read FILE into memory. A pointer to `struct file_memory' are returned; use struct element `content' to access file contents, and the element `length' to know the file length. `content' is *not* zero-terminated, and you should *not* read or write beyond the [0, length) range of characters. After you are done with the file contents, call wget_read_file_free to release the memory. Depending on the operating system and the type of file that is being read, wget_read_file() either mmap's the file into memory, or reads the file into the core using read(). If file is named "-", fileno(stdin) is used for reading instead. If you want to read from a real file named "-", use "./-" instead. 
Name: wget_read_file_free; Comment: Release the resources held by FM. Specifically, this calls munmap() or xfree() on fm->content, depending whether mmap or malloc/read were used to read in the file. It also frees the memory needed to hold the FM structure itself. 
Name: free_vec; Comment: Free the pointers in a NULL-terminated vector of pointers, then free the pointer itself. 
Name: merge_vecs; Comment: Append vector V2 to vector V1. The function frees V2 and reallocates V1 (thus you may not use the contents of neither pointer after the call). If V1 is NULL, V2 is returned. 
Name: vec_append; Comment: Append a freshly allocated copy of STR to VEC. If VEC is NULL, it is allocated as needed. Return the new value of the vector. 
Name: string_set_add; Comment: Sometimes it's useful to create "sets" of strings, i.e. special hash tables where you want to store strings as keys and merely query for their existence. Here is a set of utility routines that makes that transparent. 
Name: string_set_contains; Comment: Synonym for hash_table_contains... 
Name: string_set_to_array; Comment: Convert the specified string set to array. ARRAY should be large enough to hold hash_table_count(ht) char pointers. 
Name: string_set_free; Comment: Free the string set. This frees both the storage allocated for keys and the actual hash table. (hash_table_destroy would only destroy the hash table.) 
Name: free_keys_and_values; Comment: Utility function: simply call xfree() on all keys and values of HT. 
Name: get_grouping_data; Comment: Get digit grouping data for thousand separors by calling localeconv(). The data includes separator string and grouping info and is cached after the first call to the function. In locales that don't set a thousand separator (such as the "C" locale), this forces it to be ",". We are now only showing thousand separators in one place, so this shouldn't be a problem in practice. 
Name: with_thousand_seps; Comment: Return a printed representation of N with thousand separators. This should respect locale settings, with the exception of the "C" locale which mandates no separator, but we use one anyway. Unfortunately, we cannot use %'d (in fact it would be %'j) to get the separators because it's too non-portable, and it's hard to test for this feature at configure time. Besides, it wouldn't display separators in the "C" locale, still used by many Unix users. 
Name: human_readable; Comment: N, a byte quantity, is converted to a human-readable abberviated form a la sizes printed by `ls -lh'. The result is written to a static buffer, a pointer to which is returned. Unlike `with_thousand_seps', this approximates to the nearest unit. Quoting GNU libit: "Most people visually process strings of 3-4 digits effectively, but longer strings of digits are more prone to misinterpretation. Hence, converting to an abbreviated form usually improves readability." This intentionally uses kilobyte (KB), megabyte (MB), etc. in their original computer-related meaning of "powers of 1024". We don't use the "*bibyte" names invented in 1998, and seldom used in practice. Wikipedia's entry on "binary prefix" discusses this in some detail. 
Name: numdigit; Comment: Count the digits in the provided number. Used to allocate space when printing numbers. 
Name: number_to_string; Comment: Print NUMBER to BUFFER in base 10. This is equivalent to `sprintf(buffer, "%lld", (long long) number)', only typically much faster and portable to machines without long long. The speedup may make a difference in programs that frequently convert numbers to strings. Some implementations of sprintf, particularly the one in some versions of GNU libc, have been known to be quite slow when converting integers to strings. Return the pointer to the location where the terminating zero was printed. (Equivalent to calling buffer+strlen(buffer) after the function is done.) BUFFER should be large enough to accept as many bytes as you expect the number to take up. On machines with 64-bit wgints the maximum needed size is 24 bytes. That includes the digits needed for the largest 64-bit number, the `-' sign in case it's negative, and the terminating '_0'. 
Name: number_to_static_string; Comment: Print NUMBER to a statically allocated string and return a pointer to the printed representation. This function is intended to be used in conjunction with printf. It is hard to portably print wgint values: a) you cannot use printf("%ld", number) because wgint can be long long on 32-bit machines with LFS. b) you cannot use printf("%lld", number) because NUMBER could be long on 32-bit machines without LFS, or on 64-bit machines, which do not require LFS. Also, Windows doesn't support %lld. c) you cannot use printf("%j", (int_max_t) number) because not all versions of printf support "%j", the most notable being the one on Windows. d) you cannot #define WGINT_FMT to the appropriate format and use printf(WGINT_FMT, number) because that would break translations for user-visible messages, such as printf("Downloaded: %d bytes_n", number). What you should use instead is printf("%s", number_to_static_string (number)). CAVEAT: since the function returns pointers to static data, you must be careful to copy its result before calling it again. However, to make it more useful with printf, the function maintains an internal ring of static buffers to return. That way things like printf("%s %s", number_to_static_string (num1), number_to_static_string (num2)) work as expected. Three buffers are currently used, which means that "%s %s %s" will work, but "%s %s %s %s" won't. If you need to print more than three wgints, bump the RING_SIZE (or rethink your message.) 
Name: convert_to_bits; Comment: Converts the byte to bits format if --report-bps option is enabled 
Name: determine_screen_width; Comment: Determine the width of the terminal we're running on. If that's not possible, return 0. 
Name: random_number; Comment: Return a random number between 0 and MAX-1, inclusive. If the system does not support lrand48 and MAX is greater than the value of RAND_MAX+1 on the system, the returned value will be in the range [0, RAND_MAX]. This may be fixed in a future release. The random number generator is seeded automatically the first time it is called. This uses lrand48 where available, rand elsewhere. DO NOT use it for cryptography. It is only meant to be used in situations where quality of the random numbers returned doesn't really matter. 
Name: random_float; Comment: Return a random uniformly distributed floating point number in the [0, 1) range. Uses drand48 where available, and a really lame kludge elsewhere. 
Name: alarm_set; Comment: Arrange for SIGALRM to be delivered in TIMEOUT seconds. This uses setitimer where available, alarm otherwise. TIMEOUT should be non-zero. If the timeout value is so small that it would be rounded to zero, it is rounded to the least legal value instead (1us for setitimer, 1s for alarm). That ensures that SIGALRM will be delivered in all cases. 
Name: alarm_cancel; Comment: Cancel the alarm set with alarm_set. 
Name: run_with_timeout; Comment: Call FUN(ARG), but don't allow it to run for more than TIMEOUT seconds. Returns true if the function was interrupted with a timeout, false otherwise. This works by setting up SIGALRM to be delivered in TIMEOUT seconds using setitimer() or alarm(). The timeout is enforced by longjumping out of the SIGALRM handler. This has several advantages compared to the traditional approach of relying on signals causing system calls to exit with EINTR: The callback function is *forcibly* interrupted after the timeout expires, (almost) regardless of what it was doing and whether it was in a syscall. For example, a calculation that takes a long time is interrupted as reliably as an IO operation. It works with both SYSV and BSD signals because it doesn't depend on the default setting of SA_RESTART. It doesn't require special handler setup beyond a simple call to signal(). (It does use sigsetjmp/siglongjmp, but they're optional.) The only downside is that, if FUN allocates internal resources that are normally freed prior to exit from the functions, they will be lost in case of timeout. 
Name: run_with_timeout; Comment: A stub version of run_with_timeout that just calls FUN(ARG). Don't define it under Windows, because Windows has its own version of run_with_timeout that uses threads. 
Name: wget_base64_encode; Comment: Encode the octets in DATA of length LENGTH to base64 format, storing the result to DEST. The output will be zero-terminated, and must point to a writable buffer of at least 1+BASE64_LENGTH(length) bytes. The function returns the length of the resulting base64 data, not counting the terminating zero. This implementation does not emit newlines after 76 characters of base64 data. 
Name: wget_base64_decode; Comment: Decode data from BASE64 (a null-terminated string) into memory pointed to by DEST. DEST is assumed to be large enough to accommodate the decoded data, which is guaranteed to be no more than 3/4*strlen(base64). Since DEST is assumed to contain binary data, it is not NUL-terminated. The function returns the length of the data written to "TO". -1 is returned in case of error caused by malformed base64 input. This function originates from Free Recode. 
Name: compile_pcre2_regex; Comment: Compiles the PCRE2 regex. 
Name: compile_pcre_regex; Comment: Compiles the PCRE regex. 
Name: compile_posix_regex; Comment: Compiles the POSIX regex. 
Name: match_pcre2_regex; Comment: Matches a PCRE2 regex. 
Name: match_pcre_regex; Comment: Matches a PCRE regex. 
Name: match_posix_regex; Comment: Matches a POSIX regex. 
Name: mergesort_internal; Comment: Simple merge sort for use by stable_sort. Implementation courtesy Zeljko Vrba with additional debugging by Nenad Barbutov. 
Name: stable_sort; Comment: Stable sort with interface exactly like standard library's qsort. Uses mergesort internally. 
Name: print_decimal; Comment: Print a decimal number. If it is equal to or larger than ten, the number is rounded. Otherwise it is printed with one significant digit without trailing zeros and with no more than three fractional digits total. For example, 0.1 is printed as "0.1", 0.035 is printed as "0.04", 0.0091 as "0.009", and 0.0003 as simply "0". This is useful for displaying durations because it provides order-of-magnitude information without unnecessary clutter -- long-running downloads are shown without the fractional part, and short ones still retain one significant digit. 
Name: get_max_length; Comment: Return 0 if length is unknown. 
Name: wg_pubkey_pem_to_der; Comment: Public key pem to der conversion 
Name: wg_pin_peer_pubkey; Comment: Generic pinned public key check. 
Name: warc_write_buffer; Comment: Writes SIZE bytes from BUFFER to the current WARC file, through gzwrite if compression is enabled. Returns the number of uncompressed bytes written. 
Name: warc_write_string; Comment: Writes STR to the current WARC file. Returns false and set warc_write_ok to false if there is an error. 
Name: warc_write_start_record; Comment: Starts a new WARC record. Writes the version header. If opt.warc_maxsize is set and the current file is becoming too large, this will open a new WARC file. If compression is enabled, this will start a new gzip stream in the current WARC file. Returns false and set warc_write_ok to false if there is an error. 
Name: warc_write_header; Comment: Writes a WARC header to the current WARC record. This method may be run after warc_write_start_record and before warc_write_block_from_file. 
Name: warc_write_header_uri; Comment: Writes a WARC header with a URI as value to the current WARC record. This method may be run after warc_write_start_record and before warc_write_block_from_file. 
Name: warc_write_block_from_file; Comment: Copies the contents of DATA_IN to the WARC record. Adds a Content-Length header to the WARC record. Run this method after warc_write_header, then run warc_write_end_record. 
Name: warc_write_end_record; Comment: Run this method to close the current WARC record. If compression is enabled, this method closes the current GZIP stream and fills the extra GZIP header with the uncompressed and compressed length of the record. 
Name: warc_write_date_header; Comment: Writes the WARC-Date header for the given timestamp to the current WARC record. If timestamp is NULL, the current time will be used. 
Name: warc_write_ip_header; Comment: Writes the WARC-IP-Address header for the given IP to the current WARC record. If IP is NULL, no header will be written. 
Name: warc_sha1_stream_with_payload; Comment: warc_sha1_stream_with_payload is a modified copy of sha1_stream from gnulib/sha1.c. This version calculates two digests in one go. Compute SHA1 message digests for bytes read from STREAM. The digest of the complete file will be written into the 16 bytes beginning at RES_BLOCK. If payload_offset >= 0, a second digest will be calculated of the portion of the file starting at payload_offset and continuing to the end of the file. The digest number will be written into the 16 bytes beginning ad RES_PAYLOAD. 
Name: warc_base32_sha1_digest; Comment: Converts the SHA1 digest to a base32-encoded string. "sha1:DIGEST_0" (Allocates a new string for the response.) 
Name: warc_write_digest_headers; Comment: Sets the digest headers of the record. This method will calculate the block digest and, if payload_offset >= 0, will also calculate the payload digest of the payload starting at the provided offset. 
Name: warc_timestamp; Comment: Fills timestamp with the current time and date. The UTC time is formatted following ISO 8601, as required for use in the WARC-Date header. The timestamp will be 21 characters long. 
Name: warc_uuid_str; Comment: Fills urn_str with a UUID based on random numbers in the format required for the WARC-Record-Id header. (See RFC 4122, UUID version 4.) Note: this is a fallback method, it is much better to use the methods provided by libuuid. The string will be 47 characters long. 
Name: warc_write_warcinfo_record; Comment: Write a warcinfo record to the current file. Updates warc_current_warcinfo_uuid_str. 
Name: warc_start_new_file; Comment: None 4. write the initial warcinfo record. Returns true on success, false otherwise. 
Name: warc_start_cdx_file; Comment: Opens the CDX file for output. 
Name: warc_parse_cdx_header; Comment: Parse the CDX header and find the field numbers of the original url, checksum and record ID fields. 
Name: warc_process_cdx_line; Comment: Parse the CDX record and add it to the warc_cdx_dedup_table hash table. 
Name: warc_load_cdx_dedup_file; Comment: Loads the CDX file from opt.warc_cdx_dedup_filename and fills the warc_cdx_dedup_table. 
Name: warc_find_duplicate_cdx_record; Comment: Returns the existing duplicate CDX record for the given url and payload digest. Returns NULL if the url is not found or if the payload digest does not match, or if CDX deduplication is disabled. 
Name: warc_init; Comment: Initializes the WARC writer (if opt.warc_filename is set). This should be called before any WARC record is written. 
Name: warc_write_metadata; Comment: Writes metadata (manifest, configuration, log file) to the WARC file. 
Name: warc_close; Comment: Finishes the WARC writing. This should be called at the end of the program. 
Name: warc_tempfile; Comment: Creates a temporary file for writing WARC output. The temporary file will be created in opt.warc_tempdir. Returns the pointer to the temporary file, or NULL. 
Name: warc_write_request_record; Comment: Writes a request record to the WARC file. url is the target uri of the request, timestamp_str is the timestamp of the request (generated with warc_timestamp), record_uuid is the uuid of the request (generated with warc_uuid_str), body is a pointer to a file containing the request headers and body. ip is the ip address of the server (or NULL), Calling this function will close body. Returns true on success, false on error. 
Name: warc_write_cdx_record; Comment: Writes a response record to the CDX file. url is the target uri of the request/response, timestamp_str is the timestamp of the request that generated this response, (generated with warc_timestamp), mime_type is the mime type of the response body (will be printed to CDX), response_code is the HTTP response code (will be printed to CDX), payload_digest is the sha1 digest of the payload, redirect_location is the contents of the Location: header, or NULL (will be printed to CDX), offset is the position of the WARC record in the WARC file, warc_filename is the filename of the WARC, response_uuid is the uuid of the response. Returns true on success, false on error. 
Name: warc_write_revisit_record; Comment: Writes a revisit record to the WARC file. url is the target uri of the request/response, timestamp_str is the timestamp of the request that generated this response (generated with warc_timestamp), concurrent_to_uuid is the uuid of the request for that generated this response (generated with warc_uuid_str), refers_to_uuid is the uuid of the original response (generated with warc_uuid_str), payload_digest is the sha1 digest of the payload, ip is the ip address of the server (or NULL), body is a pointer to a file containing the response headers (without payload). Calling this function will close body. Returns true on success, false on error. 
Name: warc_write_response_record; Comment: Writes a response record to the WARC file. url is the target uri of the request/response, timestamp_str is the timestamp of the request that generated this response (generated with warc_timestamp), concurrent_to_uuid is the uuid of the request for that generated this response (generated with warc_uuid_str), ip is the ip address of the server (or NULL), body is a pointer to a file containing the response headers and body. mime_type is the mime type of the response body (will be printed to CDX), response_code is the HTTP response code (will be printed to CDX), redirect_location is the contents of the Location: header, or NULL (will be printed to CDX), Calling this function will close body. Returns true on success, false on error. 
Name: warc_write_record; Comment: Writes a resource or metadata record to the WARC file. warc_type is either "resource" or "metadata", resource_uuid is the uuid of the resource (or NULL), url is the target uri of the resource, timestamp_str is the timestamp (generated with warc_timestamp), concurrent_to_uuid is the uuid of the record that generated this, resource (generated with warc_uuid_str) or NULL, ip is the ip address of the server (or NULL), content_type is the mime type of the body (or NULL), body is a pointer to a file containing the resource data. Calling this function will close body. Returns true on success, false on error. 
Name: warc_write_resource_record; Comment: Writes a resource record to the WARC file. resource_uuid is the uuid of the resource (or NULL), url is the target uri of the resource, timestamp_str is the timestamp (generated with warc_timestamp), concurrent_to_uuid is the uuid of the record that generated this, resource (generated with warc_uuid_str) or NULL, ip is the ip address of the server (or NULL), content_type is the mime type of the body (or NULL), body is a pointer to a file containing the resource data. Calling this function will close body. Returns true on success, false on error. 
Name: warc_write_metadata_record; Comment: Writes a metadata record to the WARC file. record_uuid is the uuid of the record (or NULL), url is the target uri of the record, timestamp_str is the timestamp (generated with warc_timestamp), concurrent_to_uuid is the uuid of the record that generated this, record (generated with warc_uuid_str) or NULL, ip is the ip address of the server (or NULL), content_type is the mime type of the body (or NULL), body is a pointer to a file containing the record data. Calling this function will close body. Returns true on success, false on error. 
Name: main; Comment: Needed by lib/error.c. 
